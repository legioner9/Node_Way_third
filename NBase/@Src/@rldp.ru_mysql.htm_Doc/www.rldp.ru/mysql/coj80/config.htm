<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <meta http-equiv="Content-Type" content="text/html; charset=">
  <title>Глава 14. Connector/J и Spring</title>
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="connector-j-usagenotes-spring-config"></a>
Глава 14. Connector/J и Spring</h1>
<a class="indexterm" name="idm45064738642608"></a>
<p>Spring Framework это Java-окружение, разработанное для помощи в
проектировании приложений, обеспечивая способ формировать компоненты.
Техника, используемая в Spring, является известным шаблоном разработки под
названием Dependency Injection (см.
<a href="../../../www.martinfowler.com/articles/injection.html" target="_top">
Inversion of Control Containers and the Dependency Injection pattern</a>).
Эта статья сосредоточится на ориентированном на Java доступе к базам данных
MySQL с Spring 2.0. Есть также .NET-порт Spring под названием Spring.NET.</p>

<p>Spring не только система для формирования компонентов, но также
включает поддержку аспектно-ориентированного программирования (AOP). Это одни
из главных преимуществ для управления ресурсами Spring и
управления транзакциями. Spring также обеспечивает утилиты для интеграции
управления ресурсами с JDBC и Hibernate.</p>

<p>Для примеров в этой секции будет использоваться база данных-образец world.
Первая задача состоит в том, чтобы настроить источник данных MySQL из Spring.
Компоненты в Spring используют терминологию
<span class="quote">bean</span>. Например, чтобы формировать связь с сервером
MySQL, поддерживающим базу данных-образец, вы могли бы использовать:</p>

<pre class="programlisting">
&lt;util:map id="dbProps"&gt;
  &lt;entry key="db.driver" value="com.mysql.cj.jdbc.Driver"/&gt;
  &lt;entry key="db.jdbcurl" value="jdbc:mysql://localhost/world"/&gt;
  &lt;entry key="db.username" value="myuser"/&gt;
  &lt;entry key="db.password" value="mypass"/&gt;
&lt;/util:map&gt;
</pre>

<p>В вышеупомянутом примере мы назначаем значения свойствам, которые будут
использоваться в конфигурации. Для конфигурации источника данных:</p>
<pre class="programlisting">
&lt;bean id="dataSource"
  class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
  &lt;property name="driverClassName" value="${db.driver}"/&gt;
  &lt;property name="url" value="${db.jdbcurl}"/&gt;
  &lt;property name="username" value="${db.username}"/&gt;
  &lt;property name="password" value="${db.password}"/&gt;
&lt;/bean&gt;
</pre>

<p>Заполнители используются, чтобы предоставить значения для свойств этого
блока. Это означает, что мы можем определить все свойства конфигурации в
одном месте вместо того, чтобы задавать значения для каждого свойства.
Нам действительно, однако, нужен еще один блок, чтобы собрать все это вместе.
Последний блок ответственен за то, чтобы заменить
заполнители значениями свойств.</p>

<pre class="programlisting">
&lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;
  &lt;property name="properties" ref="dbProps"/&gt;
&lt;/bean&gt;
</pre>

<p>Теперь, когда мы сформировали наш источник данных MySQL и готовы к
работе, мы пишем некоторый код на Java, чтобы получить доступ к нему.
Пример ниже получит три случайных города и их соответствующую страну,
используя источник данных, который мы сформировали в Spring.</p>

<pre class="programlisting">
// Create a new application context. this processes the Spring config
ApplicationContext ctx = new ClassPathXmlApplicationContext("ex1appContext.xml");
// Retrieve the data source from the application context
DataSource ds = (DataSource) ctx.getBean("dataSource");
// Open a database connection using Spring's DataSourceUtils
Connection c = DataSourceUtils.getConnection(ds);
try {
  // retrieve a list of three random cities
  PreparedStatement ps = c.prepareStatement(
    "select City.Name as 'City', Country.Name as 'Country' " +
    "from City inner join Country on City.CountryCode = Country.Code " +
    "order by rand() limit 3");
  ResultSet rs = ps.executeQuery();
  while(rs.next()) {
    String city = rs.getString("City");
    String country = rs.getString("Country");
    System.out.printf("The city %s is in %s%n", city, country);
  }
} catch (SQLException ex) {
  // something has failed and we print a stack trace to analyse the error
  ex.printStackTrace();
  // ignore failure closing connection
  try { c.close(); } catch (SQLException e) { }
} finally {
  // properly release our connection
  DataSourceUtils.releaseConnection(c, ds);
}
</pre>

<p>Это очень похоже на нормальный доступ JDBC к MySQL с основным различием
в том, что мы используем DataSourceUtils вместо DriverManager,
чтобы создать связь.</p>

<p>В то время как это может походить на небольшую разницу, последствия
несколько больше. Spring управляет этим ресурсом, в некотором роде подобным
контейнерному источнику управляемых данных в сервере приложений J2EE. Когда
связь открыта, к ней можно впоследствии получить доступ в других частях кода,
если они синхронизированы с транзакцией. Это позволяет рассматривать
различные части вашего приложения как транзакции вместо того, чтобы раздавать
соединение с базой данных.</p>

<h2><a name="connector-j-usagenotes-spring-config-jdbctemplate"></a>
14.1. Использование <code class="classname">JdbcTemplate</code></h2>
<p>Spring широко применяет шаблон разработки метода Template (см.
<a href="../../../en.wikipedia.org/wiki/Template_method_pattern" target="_top">
Template Method Pattern</a>). Нашим непосредственным центром будет
<code class="literal">JdbcTemplate</code> и связанные классы, определенно
<code class="literal">NamedParameterJdbcTemplate</code>. Получение
обработчика шаблонных классов и наличие связи для доступа к данным,
когда это необходимо.</p>

<p>Следующий пример показывает, как использовать
<code class="literal">NamedParameterJdbcTemplate</code> в классе DAO
(Data Access Object), чтобы получить случайный город по коду страны.</p>

<pre class="programlisting">
public class Ex2JdbcDao {
  /**
  * Data source reference which will be provided by Spring.
  */
  private DataSource dataSource;

  /**
  * Our query to find a random city given a country code. Notice
  * the ":country" parameter toward the end. This is called a
  * named parameter.
  */
  private String queryString = "select Name from City " +
          "where CountryCode = :country order by rand() limit 1";

  /**
  * Retrieve a random city using Spring JDBC access classes.
  */
  public String getRandomCityByCountryCode(String cntryCode) {
    // A template that permits using queries with named parameters
    NamedParameterJdbcTemplate template =
      new NamedParameterJdbcTemplate(dataSource);
    // A java.util.Map is used to provide values for the parameters
    Map params = new HashMap();
    params.put("country", cntryCode);
    // We query for an Object and specify what class we are expecting
    return (String)template.queryForObject(queryString, params, String.class);
  }
  /**
  * A JavaBean setter-style method to allow Spring to inject the data source.
  * @param dataSource
  */
  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }
}
</pre>

<p>Центром в вышеупомянутом коде является метод
<code class="function">getRandomCityByCountryCode()</code>.
Мы передаем код страны и используем
<code class="literal">NamedParameterJdbcTemplate</code> для запроса города.
Код страны помещается в Map с ключем "country",
который является параметром, названным в SQL-запросе.</p>

<p>Чтобы получить доступ к этому коду, необходимо формировать его в Spring,
обеспечивая ссылку на источник данных.</p>
<pre class="programlisting">
&lt;bean id="dao" class="code.Ex2JdbcDao"&gt;
  &lt;property name="dataSource" ref="dataSource"/&gt;
&lt;/bean&gt;
</pre>

<p>В этом пункте мы можем просто захватить ссылку на DAO из Spring и вызвать
<code class="function">getRandomCityByCountryCode()</code>.</p>
<pre class="programlisting">
// Create the application context
  ApplicationContext ctx =
    new ClassPathXmlApplicationContext("ex2appContext.xml");
  // Obtain a reference to our DAO
  Ex2JdbcDao dao = (Ex2JdbcDao) ctx.getBean("dao");
  String countryCode = "USA";
  // Find a few random cities in the US
  for (int i = 0; i &lt; 4; ++i)
    System.out.printf("A random city in %s is %s%n", countryCode,
                      dao.getRandomCityByCountryCode(countryCode));
</pre>

<p>Этот пример показывает, как использовать классы Spring JDBC
для абстрактного использования традиционных классов JDBC, включая
<code class="literal">Connection</code> и
<code class="literal">PreparedStatement</code>.</p>

<h2><a name="connector-j-usagenotes-spring-config-transactional"></a>
14.2. Транзакционный доступ JDBC</h2>
<p>Spring позволяет нам добавлять транзакции в наш код, не имея дела
непосредственно с классами JDBC. С этой целью Spring
обеспечивает пакет управления транзакциями, который не только заменяет
управление транзакциями JDBC, но также и позволяет декларативное управление
транзакциями (конфигурация вместо кода).</p>

<p>Чтобы использовать транзакционный доступ к базе данных, мы должны будем
изменить механизм хранения таблиц в базе данных. Загруженный скрипт
явно составляет таблицы MyISAM, которые не поддерживают транзакционную
семантику. Механизм хранения InnoDB действительно поддерживает
транзакции и это то, что мы будем использовать. Мы можем изменить механизм
хранения следующими запросами.</p>

<pre class="programlisting">
ALTER TABLE City ENGINE=InnoDB;
ALTER TABLE Country ENGINE=InnoDB;
ALTER TABLE CountryLanguage ENGINE=InnoDB;
</pre>

<p>Хорошая практика программирования в Spring отделяет интерфейсы и
реализации. Это означает, что мы можем создать интерфейс Java и только
использовать операции в этом интерфейсе без любого внутреннего ведома того,
какова фактическая реализация. Мы позволим Spring работать с
внедрением, и это будет управлять транзакциями для нашего внедрения.</p>

<p>Сначала вы создаете простой интерфейс:</p>
<pre class="programlisting">
public interface Ex3Dao {
  Integer createCity(String name, String countryCode,
                     String district, Integer population);
}
</pre>

<p>Этот интерфейс содержит один метод, который создаст новую запись города
в базе данных и возвратит идентификатор новой записи.
Затем необходимо создать реализацию этого интерфейса.</p>

<pre class="programlisting">
public class Ex3DaoImpl implements Ex3Dao {
  protected DataSource dataSource;
  protected SqlUpdate updateQuery;
  protected SqlFunction idQuery;

  public Integer createCity(String name, String countryCode,
                            String district, Integer population)
  {
    updateQuery.update(new Object[]
                {name, countryCode, district, population});
    return getLastId();
  }
  protected Integer getLastId() {
    return idQuery.run();
  }
}</pre>

<p>Вы видите, что мы только воздействуем на абстрактные объекты
запроса здесь и не имеем дело непосредственно с API JDBC. Кроме того, это
полноценная реализация. Со всем нашим управлением транзакциями будет иметь
дело конфигурация. Чтобы начать конфигурацию, мы должны создать DAO.</p>

<pre class="programlisting">
&lt;bean id="dao" class="code.Ex3DaoImpl"&gt;
  &lt;property name="dataSource" ref="dataSource"/&gt;
  &lt;property name="updateQuery"&gt;...&lt;/property&gt;
  &lt;property name="idQuery"&gt;...&lt;/property&gt;
&lt;/bean&gt;
</pre>

<p>Теперь мы должны настроить операционную конфигурацию. Первая вещь, которую
мы должны сделать, это создать менеджер транзакций, чтобы управлять
источником данных и спецификацией того, какие операционные свойства требуются
для методов <code class="literal">dao</code>.</p>

<pre class="programlisting">
&lt;bean id="transactionManager"
  class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
  &lt;property name="dataSource" ref="dataSource"/&gt;
&lt;/bean&gt;

&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;
  &lt;tx:attributes&gt;
    &lt;tx:method name="*"/&gt;
  &lt;/tx:attributes&gt;
&lt;/tx:advice&gt;
</pre>

<p>Предыдущий код создает менеджер транзакций, который обращается с
транзакциями для источника данных, предоставленного ему.
<code class="literal">txAdvice</code> использует этот менеджер транзакций и
определяет признаки, чтобы создать транзакцию для всех методов.
Наконец мы должны применить это с AOP.</p>

<pre class="programlisting">
&lt;aop:config&gt;
  &lt;aop:pointcut id="daoMethods"
    expression="execution(* code.Ex3Dao.*(..))"/&gt;
  &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="daoMethods"/&gt;
&lt;/aop:config&gt;
</pre>

<p>Это в основном говорит что все методы, к которым обращается интерфейс
<code class="literal">Ex3Dao</code>, обернуты в транзакцию.
Чтобы использовать это, мы только должны получить
<code class="literal">dao</code> от прикладного контекста и обращатся к
методу в экземпляре <code class="literal">dao</code>.</p>

<pre class="programlisting">
Ex3Dao dao = (Ex3Dao) ctx.getBean("dao");
Integer id = dao.createCity(name,countryCode, district, pop);
</pre>

<p>Мы можем проверить, что нет никакого управления транзакциями,
происходящего в нашем коде Java, и все формируется с Spring.
Это очень сильное понятие, рассматриваемое как одна из самых
выгодных особенностей Spring.</p>

<h2><a name="connector-j-usagenotes-spring-config-connpooling"></a>
14.3. Объединение связи в Spring</h2>
<a class="indexterm" name="idm45064738593664"></a>
<p>Во многих ситуациях, таких как веб-приложения, будет большое количество
маленьких транзакций базы данных. Когда дело обстоит так, обычно имеет смысл
создавать фонд соединений с базой данных, доступных для веб-запросов по мере
необходимости. Хотя MySQL не порождает дополнительный процесс, когда связь
установлена, есть все еще небольшое количество издержек, чтобы создать и
настроить связь. Объединение связей также облегчает такие проблемы, как
работа большого числа сокетов в состоянии <code class="literal">TIME_WAIT
</code>.</p>

<p>Подготовка объединения подключений с Spring так же проста, как изменение
конфигурации источника данных в прикладном контексте. Есть много
конфигураций, которые мы можем использовать. Первый пример основан на
<a href="../../../jakarta.apache.org/commons/dbcp/default.htm" target="_top">Jakarta
Commons DBCP library</a>. Пример ниже заменяет исходную конфигурацию, которая
была на основе <code class="literal">DriverManagerDataSource</code>
с DBCP's BasicDataSource.</p>

<pre class="programlisting">
&lt;bean id="dataSource" destroy-method="close"
  class="org.apache.commons.dbcp.BasicDataSource"&gt;
  &lt;property name="driverClassName" value="${db.driver}"/&gt;
  &lt;property name="url" value="${db.jdbcurl}"/&gt;
  &lt;property name="username" value="${db.username}"/&gt;
  &lt;property name="password" value="${db.password}"/&gt;
  &lt;property name="initialSize" value="3"/&gt;
&lt;/bean&gt;
</pre>

<p>Конфигурация этих двух решений очень похожа. Различие в том, что DBCP
объединит связи с базой данных вместо того, чтобы создать новую связь каждый
раз, когда она нужна. Мы также установили параметр, здесь названный
<code class="literal">initialSize</code>. Это говорит DBCP, что мы хотим три
связи в пуле, когда он создается.</p>

<p>Другой способ формировать объединение связи состоит в том, чтобы
формировать источник данных в нашем сервере приложений J2EE. Используя JBoss
как пример, можно настроить фонд подключений MySQL создав файл, названный
<code class="filename">mysql-local-ds.xml</code> и разместив его в каталоге
<code class="filename">server/default/deploy</code> в JBoss.
Как только мы это настроили, мы можем использовать JNDI, чтобы искать его.
С Spring этот поиск очень прост. Конфигурация источника данных похожа на это:
</p>

<pre class="programlisting">
&lt;jee:jndi-lookup id="dataSource" jndi-name="java:MySQL_DS"/&gt;
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
