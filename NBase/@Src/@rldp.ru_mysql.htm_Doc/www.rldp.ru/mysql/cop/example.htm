<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <meta http-equiv="Content-Type" content="text/html; charset=koi8-r">
  <title>Глава 5. Примеры Connector/Python</title>
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="connector-python-examples"></a>
Глава 5. Примеры Connector/Python</h1>
<p>Эти примеры иллюстрируют, как разработать приложения Python
и скрипты, которые соединяются с использованием MySQL Connector/Python.</p>

<h2><a name="connector-python-example-connecting"></a>
5.1. Соединение с MySQL, используя Connector/Python</h2>
<p>Конструктор <code class="literal">connect()</code>
создает связь с сервером MySQL и возвращает объект
<code class="literal">MySQLConnection</code>.</p>

<p>Следующий пример показывает, как соединиться с сервером MySQL:</p>
<pre class="programlisting">
import mysql.connector
cnx = mysql.connector.connect(user='scott', password='<em class="replaceable"><code>password</code></em>',
                              host='127.0.0.1',
                              database='employees')
cnx.close()
</pre>

<p><a href="connect.htm#connector-python-connectargs">Раздел 7.1</a>
описывает разрешенные аргументы соединения.</p>
<p>Также возможно создать объекты связи, используя класс
<a href="refer.htm#connector-python-api-mysqlconnection">
connection.MySQLConnection()</a>:</p>

<pre class="programlisting">
from mysql.connector import (connection)

cnx = connection.MySQLConnection(user='scott', password='<em class="replaceable"><code>password</code></em>',
                                 host='127.0.0.1',
                                 database='employees')
cnx.close()
</pre>

<p>Обе формы (любое использование конструктора
<code class="literal">connect()</code> или класса непосредственно)
действительны и функционально равны, но использование
<code class="literal">connect()</code> предпочитается и используется
большинством примеров в этом руководстве.</p>

<p>Чтобы обработать ошибки связи, используйте
<code class="literal">try</code> и ловите все ошибки при использовании
исключения <a href="refer.htm#connector-python-api-errors-error">errors.Error
</a>:</p>

<pre class="programlisting">
import mysql.connector
from mysql.connector import errorcode

try:
cnx = mysql.connector.connect(user='scott', database='employ')
except mysql.connector.Error as err:
  if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
     print("Something is wrong with your user name or password")
  elif err.errno == errorcode.ER_BAD_DB_ERROR:
       print("Database does not exist")
    else:
      print(err)
  else:
    cnx.close()
</pre>

<p>Определение аргументов соединения в словаре и использование оператора
<code class="literal">**</code>:</p>
<pre class="programlisting">
import mysql.connector
config = {
  'user': 'scott',
  'password': '<em class="replaceable"><code>password</code></em>',
  'host': '127.0.0.1',
  'database': 'employees',
  'raise_on_warnings': True
}
cnx = mysql.connector.connect(**config)
cnx.close()
</pre>

<h3><a name="idm45244849587040"></a>
Connector/Python Python или расширение C</h3>
<p>Connector/Python предлагает два внедрения: чистый интерфейс Python и
расширение C, которое пользуется библиотекой клиента (см.
<a href="cext.htm">главу 8</a>). Это может формироваться во время
выполнения, используя параметр <code class="literal">use_pure</code>.
Это по умолчанию <code class="literal">False</code> с MySQL 8 означая, что
расширение C используется. Если расширение C недоступно на системе, тогда
<code class="literal">use_pure</code> по умолчанию
<code class="literal">True</code>. Установка
<code class="literal">use_pure=False</code> заставляет связь использовать
расширение C, если ваша установка Connector/Python включает его, в то время
как <code class="literal">use_pure=True</code> означает, что внедрение Python
используется при наличии.</p>

<p>Опция <code class="literal">use_pure</code> и расширение C были добавлены
в Connector/Python 2.1.1.</p>
<p>Следующий пример показывает, как установить
<code class="literal">use_pure</code> = False.</p>

<pre class="programlisting">
import mysql.connector
cnx = mysql.connector.connect(user='scott', password='<em class="replaceable"><code>password</code></em>',
                              host='127.0.0.1',
                              database='employees',
                              use_pure=False)
cnx.close()
</pre>

<p>Также возможно использовать расширение C непосредственно, импортируя
модуль <code class="literal">_mysql_connector</code> вместо
<code class="literal">mysql.connector</code>. Для получения дополнительной
информации посмотрите <a href="cext.htm#connector-python-cext-module">раздел
8.2</a>.</p>

<h2><a name="connector-python-example-ddl"></a>
5.2. Создание таблиц используя Connector/Python</h2>
<p>Все запросы <a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_ddl"
target="_top">DDL</a> (Data Definition Language) выполняются, используя
структуру, известную как курсор. Следующие примеры показывают, как составить
таблицы <a href="../../../dev.mysql.com/doc/employee/en/index.html"
target="_top">Employee Sample Database</a>.
Вам они нужны для других примеров.</p>

<p>В сервере MySQL таблицы очень долговечные объекты и часто нужен доступ
многочисленным запросам, написанным на различных языках. Вы могли бы, как
правило, работать с таблицами, которые уже есть, вместо того, чтобы создать
их в рамках вашего собственного приложения. Не стои создавать и удалять
таблицы много раз, поскольку это дорогая операция. Исключение:
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_temporary_table"
target="_top">temporary tables</a>, которые могут быть
составлены и удалены быстро.</p>

<pre class="programlisting">
from __future__ import print_function
import mysql.connector
from mysql.connector import errorcode

DB_NAME = 'employees'
TABLES = {}
TABLES['employees'] = (
  "CREATE TABLE `employees` ("
    "`emp_no` int(11) NOT NULL AUTO_INCREMENT,"
    "`birth_date` date NOT NULL,"
    "`first_name` varchar(14) NOT NULL,"
    "`last_name` varchar(16) NOT NULL,"
    "`gender` enum('M','F') NOT NULL,"
    "`hire_date` date NOT NULL,"
    "PRIMARY KEY (`emp_no`)"
    ") ENGINE=InnoDB")

TABLES['departments'] = (
  "CREATE TABLE `departments` ("
    "`dept_no` char(4) NOT NULL,"
    "`dept_name` varchar(40) NOT NULL,"
    "PRIMARY KEY (`dept_no`), UNIQUE KEY `dept_name` (`dept_name`)"
    ") ENGINE=InnoDB")

TABLES['salaries'] = (
  "CREATE TABLE `salaries` ("
    "`emp_no` int(11) NOT NULL,"
    "`salary` int(11) NOT NULL,"
    "`from_date` date NOT NULL,"
    "`to_date` date NOT NULL,"
    "PRIMARY KEY (`emp_no`,`from_date`), KEY `emp_no` (`emp_no`),"
    "CONSTRAINT `salaries_ibfk_1` FOREIGN KEY (`emp_no`) "
    " REFERENCES `employees` (`emp_no`) ON DELETE CASCADE"
    ") ENGINE=InnoDB")

TABLES['dept_emp'] = (
  "CREATE TABLE `dept_emp` ("
    "`emp_no` int(11) NOT NULL,"
    "`dept_no` char(4) NOT NULL,"
    "`from_date` date NOT NULL,"
    "`to_date` date NOT NULL,"
    "PRIMARY KEY (`emp_no`,`dept_no`), KEY `emp_no` (`emp_no`),"
    "KEY `dept_no` (`dept_no`),"
    "CONSTRAINT `dept_emp_ibfk_1` FOREIGN KEY (`emp_no`) "
    " REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,"
    "CONSTRAINT `dept_emp_ibfk_2` FOREIGN KEY (`dept_no`) "
    " REFERENCES `departments` (`dept_no`) ON DELETE CASCADE"
    ") ENGINE=InnoDB")

TABLES['dept_manager'] = (
  "CREATE TABLE `dept_manager` ("
    "`dept_no` char(4) NOT NULL,"
    "`emp_no` int(11) NOT NULL,"
    "`from_date` date NOT NULL,"
    "`to_date` date NOT NULL,"
    "PRIMARY KEY (`emp_no`,`dept_no`),"
    "KEY `emp_no` (`emp_no`),"
    "KEY `dept_no` (`dept_no`),"
    "CONSTRAINT `dept_manager_ibfk_1` FOREIGN KEY (`emp_no`) "
    " REFERENCES `employees` (`emp_no`) ON DELETE CASCADE,"
    "CONSTRAINT `dept_manager_ibfk_2` FOREIGN KEY (`dept_no`) "
    " REFERENCES `departments` (`dept_no`) ON DELETE CASCADE"
    ") ENGINE=InnoDB")

TABLES['titles'] = (
  "CREATE TABLE `titles` ("
    "`emp_no` int(11) NOT NULL,"
    "`title` varchar(50) NOT NULL,"
    "`from_date` date NOT NULL,"
    "`to_date` date DEFAULT NULL,"
    "PRIMARY KEY (`emp_no`,`title`,`from_date`), KEY `emp_no` (`emp_no`),"
    "CONSTRAINT `titles_ibfk_1` FOREIGN KEY (`emp_no`)"
    " REFERENCES `employees` (`emp_no`) ON DELETE CASCADE"
    ") ENGINE=InnoDB")
</pre>

<p>Предыдущий код показывает, как мы храним запросы
<code class="literal">CREATE</code> в словаре Python
<code class="literal">TABLES</code>. Мы также определяем базу данных в
глобальной переменной <code class="literal">DB_NAME</code>,
которая позволяет вам легко использовать различную схему.</p>

<pre class="programlisting">
cnx = mysql.connector.connect(user='scott')
cursor = cnx.cursor()
</pre>

<p>Единственный сервер MySQL может управлять многократными
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_database"
target="_top">базами данных</a>. Как правило, вы определяете базу данных,
чтобы переключиться на нее, соединяясь с сервером MySQL. Этот пример не
соединяется с базой данных, чтобы можно было удостовериться, что база данных
существует и создать ее, если ее еще нет:</p>

<pre class="programlisting">
def create_database(cursor):
try:
  cursor.execute(
    "CREATE DATABASE {} DEFAULT CHARACTER SET 'utf8'".format(DB_NAME))
  except mysql.connector.Error as err:
    print("Failed creating database: {}".format(err))
exit(1)

try:
  cursor.execute("USE {}".format(DB_NAME))
  except mysql.connector.Error as err:
    print("Database {} does not exists.".format(DB_NAME))
  if err.errno == errorcode.ER_BAD_DB_ERROR:
     create_database(cursor)
     print("Database {} created successfully.".format(DB_NAME))
     cnx.database = DB_NAME
  else:
    print(err)
exit(1)
</pre>

<p>Мы сначала пытаемся перейти на конкретную базу данных, используя
свойство <code class="literal">database</code> объекта связи
<code class="literal">cnx</code>. Если есть ошибка, мы исследуем код ошибки,
чтобы проверить, не существует ли база данных. Если это так, мы вызываем
функцию <code class="literal">create_database</code>, чтобы создать базу.</p>

<p>На любой другой ошибке приложение выходит и показывает
сообщение об ошибке.</p>
<p>После того, как мы успешно создадим или переключимся на целевую базу
данных, мы составляем таблицы, повторяя по пунктам словарь
<code class="literal">TABLES</code>:</p>

<pre class="programlisting">
for table_name in TABLES:
  table_description = TABLES[table_name]
  try:
    print("Creating table {}: ".format(table_name), end='')
  cursor.execute(table_description)
  except mysql.connector.Error as err:
    if err.errno == errorcode.ER_TABLE_EXISTS_ERROR:
       print("already exists.")
    else:
      print(err.msg)
  else:
    print("OK")
cursor.close()
cnx.close()
</pre>

<p>Чтобы обработать ошибку, когда таблица уже существует, мы уведомляем
пользователя, что это уже было там. Другие ошибки печатаются, но мы
продолжаем составлять таблицы. Пример показывает, как обращаться с условием
"<span class="quote">табьлица уже есть</span>" в целях иллюстрации.
В реальном применении мы, как правило, избегали бы состояния ошибки полностью
при помощи <code class="literal">IF NOT EXISTS</code> в запросе
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/create-table.html"
target="_top"><code class="literal">CREATE TABLE</code></a>.</p>

<p>Вывод был бы чем-то вроде этого:</p>
<pre class="programlisting">
Database employees does not exists.
Database employees created successfully.
Creating table employees: OK
Creating table departments: already exists.
Creating table salaries: already exists.
Creating table dept_emp: OK
Creating table dept_manager: OK
Creating table titles: OK
</pre>

<p>Чтобы наполнить таблицы, используйте файлы дампа
<a href="../../../dev.mysql.com/doc/employee/en/index.html" target="_top">
Employee Sample Database</a>. Обратите внимание на то, что вам нужны только
файлы дампа данных, которые вы найдете в архиве
<code class="literal">employees_db-dump-files-1.0.5.tar.bz2</code>.
После загрузки файлов выполните следующие команды, добавив опции связи к
командам <span class="command"><strong>mysql</strong></span>, если надо:</p>

<pre class="programlisting">
shell&gt; <strong class="userinput"><code>tar xzf employees_db-dump-files-1.0.5.tar.bz2</code></strong>
shell&gt; <strong class="userinput"><code>cd employees_db</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_employees.dump</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_titles.dump</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_departments.dump</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_salaries.dump</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_dept_emp.dump</code></strong>
shell&gt; <strong class="userinput"><code>mysql employees &lt; load_dept_manager.dump</code></strong>
</pre>

<h2><a name="connector-python-example-cursor-transaction"></a>
5.3. Вставка данных используя Connector/Python</h2>
<p>Вставка или обновление данных также сделаны, используя структуру,
известную как курсор. Когда вы используете механизм системы хранения
транзакций, такой как <code class="literal">InnoDB</code> (умолчание для
MySQL 5.5 и выше), необходимо
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_commit"
target="_top">commit</a> данные после последовательности
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/insert.html" target="_top">
<code class="literal">INSERT</code></a>,
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/delete.html" target="_top">
<code class="literal">DELETE</code></a> и
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/update.html" target="_top">
<code class="literal">UPDATE</code></a>.</p>

<p>Этот пример показывает, как вставить новые данные. Второй
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/insert.html" target="_top">
<code class="literal">INSERT</code></a> зависит от значения недавно
созданного <a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_primary_key"
target="_top">primary key</a> первого. Пример также демонстрирует, как
использовать расширенные форматы. Задача состоит в том, чтобы добавить нового
сотрудника, начинающего работать завтра с зарплатой в 50000.</p>

<p>Следующий пример использует таблицы, составленные в
<a href="#connector-python-example-ddl">разделе 5.2</a>.
Опция столбца <code class="literal">AUTO_INCREMENT</code>
для первичного ключа таблицы <code class="literal">employees</code>
важна, чтобы гарантировать надежные, легко доступные для поиска данные.</p>

<pre class="programlisting">
from __future__ import print_function
from datetime import date, datetime, timedelta
import mysql.connector

cnx = mysql.connector.connect(user='scott', database='employees')
cursor = cnx.cursor()
tomorrow = datetime.now().date() + timedelta(days=1)

add_employee = ("INSERT INTO employees "
  "(first_name, last_name, hire_date, gender, birth_date) "
  "VALUES (%s, %s, %s, %s, %s)")
add_salary = ("INSERT INTO salaries "
  "(emp_no, salary, from_date, to_date) "
  "VALUES (%(emp_no)s, %(salary)s, %(from_date)s, %(to_date)s)")
data_employee = ('Geert', 'Vanderkelen', tomorrow, 'M', date(1977, 6, 14))

# Insert new employee
cursor.execute(add_employee, data_employee)
emp_no = cursor.lastrowid

# Insert salary information
data_salary = {
  'emp_no': emp_no,
  'salary': 50000,
  'from_date': tomorrow,
  'to_date': date(9999, 1, 1),
}
cursor.execute(add_salary, data_salary)

# Make sure data is committed to the database
cnx.commit()
cursor.close()
cnx.close()
</pre>

<p>Мы сначала открываем связь с сервером MySQL и сохраняем
<a href="refer.htm#connector-python-api-mysqlconnection">объект соединения
</a> в переменной <code class="literal">cnx</code>.
Мы тогда создаем новый курсор, по умолчанию это объект
<a href="refer.htm#connector-python-api-mysqlcursor">MySQLCursor</a>,
используя метод связм
<a href="refer.htm#connector-python-api-mysqlconnection-cursor">
<code class="literal">cursor()</code></a>.</p>

<p>Мы могли бы вычислить понятие "завтра", вызвав функцию базы данных, но для
ясности мы делаем это в Python, используя модуль
<code class="literal">datetime</code>.</p>

<p>Оба запроса <code class="literal">INSERT</code>
сохранены в переменных <code class="literal">add_employee</code> и
<code class="literal">add_salary</code>. Отметьте что второй
<code class="literal">INSERT</code> использует расширенные
коды формата Python.</p>

<p>Информация нового сотрудника хранится в кортеже
<code class="literal">data_employee</code>. Запрос, чтобы ввести нового
сотрудника выполняется, и мы получаем недавно вставленное значение для
столбца <code class="literal">emp_no</code> (столбец
<code class="literal">AUTO_INCREMENT</code>) с использованием свойства
<code class="literal">lastrowid</code> объекта курсора.</p>

<p>Затем мы вставляем новую зарплату для нового сотрудника, используя
переменную <code class="literal">emp_no</code>
в словаре, содержащем данные. Этот словарь передается к методу
<code class="literal">execute()</code> курсора, если произошла ошибка.</p>

<p>Connector/Python по умолчанию выключает
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_autocommit"
target="_top">autocommit</a>, а MySQL 5.5 и выше используют транзакционные
таблицы <code class="literal">InnoDB</code>. Поэтому необходимо явно передать
ваши изменения, используя метод <code class="literal">commit()</code>.
Вы могли бы также
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_rollback"
target="_top">отменить их</a> методом <code class="literal">rollback()
</code>.</p>

<h2><a name="connector-python-example-cursor-select"></a>
5.4. Запрос данных, используя Connector/Python</h2>
<p>Следующий пример показывает, как
<a href="../../../https@dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_query"
target="_top">запрос</a> данных использует курсор, созданный с использованием
метода <a href="refer.htm#connector-python-api-mysqlconnection-cursor">
<code class="literal">cursor()</code></a>.
Возвращенные данные отформатированы и выведены на консоль.</p>

<p>Задача состоит в том, чтобы выбрать всех сотрудников, нанятых в 1999 году,
и напечатать их имена и даты на консоль.</p>
<pre class="programlisting">
import datetime
import mysql.connector

cnx = mysql.connector.connect(user='scott', database='employees')
cursor = cnx.cursor()
query = ("SELECT first_name, last_name, hire_date FROM employees "
         "WHERE hire_date BETWEEN %s AND %s")

hire_start = datetime.date(1999, 1, 1)
hire_end = datetime.date(1999, 12, 31)
cursor.execute(query, (hire_start, hire_end))
for (first_name, last_name, hire_date) in cursor:
  print("{}, {} was hired on {:%d %b %Y}".format(
        last_name, first_name, hire_date))
cursor.close()
cnx.close()
</pre>

<p>Мы сначала открываем связь с сервером MySQL и сохраняем
<a href="refer.htm#connector-python-api-mysqlconnection">объект соединения
</a> в переменную <code class="literal">cnx</code>. Затем создаем новый
курсор, по умолчанию это объект
<a href="refer.htm#connector-python-api-mysqlcursor">MySQLCursor</a>,
используя метод <a href="refer.htm#connector-python-api-mysqlconnection-cursor">
<code class="literal">cursor()</code></a>.</p>

<p>В предыдущем примере мы храним запрос <code class="literal">SELECT</code>
в переменной <code class="literal">query</code>. Обратите внимание на то, что
мы используем <code class="literal">%s</code>-маркеры без кавычек там,
где даты должны были быть. Connector/Python конвертирует
<code class="literal">hire_start</code> и
<code class="literal">hire_end</code> из типов Python
до типа данных, который MySQL понимает и добавляет необходимые кавычки.
В этом случае это заменяет первый <code class="literal">%s</code> на
<code class="literal">'1999-01-01'</code>, а второй на
<code class="literal">'1999-12-31'</code>.</p>

<p>Мы тогда выполняем операцию, сохраненную в переменной
<code class="literal">query</code>, используя метод
<a href="refer.htm#connector-python-api-mysqlcursor-execute">
<code class="literal">execute()</code></a>. Данные, раньше заменившие
<code class="literal">%s</code>-маркеры в запросе, передаются как кортеж:
<code class="literal">(hire_start, hire_end)</code>.</p>

<p>После выполнения запроса сервер MySQL готов послать данные.
Набор результатов может быть пустым, одной строкой или 100 миллионами строк.
В зависимости от ожидаемого объема можно использовать различные методы, чтобы
обработать этот набор результатов. В этом примере мы используем объект
<code class="literal">cursor</code> как итератор. Первый столбец в строке
сохранен в переменной <code class="literal">first_name</code>, второй в
<code class="literal">last_name</code>, третий в
<code class="literal">hire_date</code>.</p>

<p>Мы печатаем результат, форматируя вывод, используя встроенную функцию
Python <code class="literal">format()</code>. Отметьте, что
<code class="literal">hire_date</code> был преобразован автоматически
Connector/Python в объект Python <code class="literal">datetime.date</code>.
Это означает, что мы можем легко отформатировать дату в более читаемой форме.
</p>

<p>Вывод должен быть чем-то вроде этого:</p>
<pre class="programlisting">
...
Wilharm, LiMin was hired on 16 Dec 1999
Wielonsky, Lalit was hired on 16 Dec 1999
Kamble, Dannz was hired on 18 Dec 1999
DuBourdieux, Zhongwei was hired on 19 Dec 1999
Fujisawa, Rosita was hired on 20 Dec 1999
...
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
