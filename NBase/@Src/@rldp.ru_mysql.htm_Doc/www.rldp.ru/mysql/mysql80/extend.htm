<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <title>Глава 26. Расширение MySQL</title>
<meta name="generator" content="DocBook XSL Stylesheets + chunker.py v1.9.2" />
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="extending-mysql"></a>Глава 26. Расширение MySQL</h1>
<h2><a name="mysql-internals"></a>26.1. MySQL изнутри</h2>
<p>Эта глава описывает много вещей, которые Вы должны знать, работая над
кодом MySQL. Чтобы отследить или способствовать развитию MySQL, следуйте
инструкциям в <a href="install.htm#installing-development-tree">разделе
2.8.3</a>. Если Вы интересуетесь внутренностями MySQL, Вы должны также
подписаться на наш список рассылки <code>internals</code>. У этого списка
относительно низкий трафик. Для деталей о том, как подписаться,
пожалуйста, см. <a href="intro.htm#mailing-lists">раздел 1.6.1</a>.
Много разработчиков MySQL в Oracle Corporation читают список
<code>internals</code> и мы помогаем другим людям, которые работают над кодом
MySQL. Не стесняйтесь использовать этот список и чтобы задать вопросы о коде
и послать участки, которые Вы хотели бы внести в проект MySQL!</p>

<p>Исходный код MySQL содержит внутреннюю документацию, использующую
Doxygen. Эта документация полезна для понимания, как MySQL работает с точки
зрения разработчика. Произведенный контент Doxygen доступен в
<a href="../../../dev.mysql.com/doc/dev/mysql-server/latest/default.htm" target="_top">
http://dev.mysql.com/doc/dev/mysql-server/latest/</a>. Также возможно
произвести этот контент локально из исходного дистрибутива MySQL, используя
инструкции в <a href="install.htm#source-installation-doxygen">разделе 2.8.7
</a>.</p>

<h3><a name="mysql-threads"></a>26.1.1. Потоки MySQL</h3>
<p>Сервер MySQL создает следующие потоки:</p>
<ul><li><p>Менеджер соединений распараллеливает запросы соединения клиента
на сетевых интерфейсах. На всех платформах один поток менеджера обрабатывает
запросы соединения TCP/IP. На Unix этот поток менеджера также обрабатывает
запросы соединения файла сокета Unix. В Windows поток менеджера обрабатывает
запросы соединения совместно используемой памяти и соединение именованного
канала. Сервер не создает потоки, чтобы обработать интерфейсы, которые он не
слушает. Например, Windows server, у которого нет поддержки соединений по
именованному каналу, не создает поток, чтобы обработать их.</li>

<li>Менеджер соединений распараллеливает каждое соединение клиента с потоком,
посвященным этому, который обрабатывает аутентификацию и запросы для этого
соединения. Потоки менеджера создают новую ветвь когда необходимо, но
пытаются избежать этого, сначала связываясь с кэшем потока, чтобы видеть,
содержит ли он поток, который может использоваться для соединения. Когда
соединение заканчивается, его поток возвращен к кэшу потока, если
кэш не полон.</li>

<li>На основном сервере репликации соединения от ведомых серверов обработаны
как соединения клиента: есть один поток на соединенное ведомое устройство.
</li>
<li>На ведомом сервере поток ввода/вывода запущен, чтобы соединиться с
главным сервером и считать с него обновления. Поток SQL запущен, чтобы
применить обновления, считанные от ведущего устройства. Эти два потока
работают независимо и могут быть запущены и остановлены независимо.</li>

<li>Поток сигнала обрабатывает все сигналы. Этот поток также обычно
обрабатывает аварийные сигналы и требования
<code>process_alarm()</code> вызвать тайм-ауты на соединениях, которые были
неактивны слишком долго.</li>

<li>Если применяется <code>InnoDB</code>, будут дополнительные потоки чтения
и записи по умолчанию. Числом их управляют параметры
<a href="innodb.htm#sysvar_innodb_read_io_threads"><code>
innodb_read_io_threads</code></a> и
<a href="innodb.htm#sysvar_innodb_write_io_threads"><code>
innodb_write_io_threads</code></a>. См.
<a href="innodb.htm#innodb-parameters">раздел 16.13</a>.</li>

<li>Если сервер запущен с опцией
<a href="server.htm#sysvar_flush_time"><code>--flush_time=<em><code>val
</code></em></code></a>, специализированный поток создается, чтобы сбрасывать
все таблицы каждые <em><code>val</code></em> секунд.</li>

<li>Если планировщик событий является активным, есть один поток для
планировщика и поток для каждого случая, в настоящее время работающего.
См. <a href="stored.htm#events-overview">раздел 21.4.1</a>.</p></li></ul>
<p><a href="programs.htm#mysqladmin"><span><strong>mysqladmin processlist
</strong></span></a> показывает потоки соединений, репликации и событий.</p>

<h3><a name="mysql-test-suite"></a>26.1.2. MySQL Test Suite</h3>
<p>Испытательная система, которая включена в двоичные дистрибутивы, позволяет
пользователям и разработчикам выполнить тесты на коде MySQL. Эти тесты могут
быть выполнены на Unix.</p>

<p>Вы можете также написать свои собственные прецеденты. Для информации об
испытательной структуре MySQL, включая системные требования, см. руководство,
доступное на <a href="../../../dev.mysql.com/doc/mysqltest/2.0/en/default.htm"
target="_top">http://dev.mysql.com/doc/mysqltest/2.0/en/</a>.</p>

<p>Текущий набор прецедентов не проверяет все в MySQL, но это должно поймать
большинство очевидных ошибок в SQL, обрабатывающем коде, операционной системе
или проблемы библиотек и довольно полно в тестировании репликации. Наша цель
состоит в том, чтобы иметь испытательное покрытие 100% кода. Мы приветствуем
вклады в наш испытательный набор. Вы можете особенно хотеть внести тесты,
которые исследуют функциональность, важную по отношению к Вашей системе,
потому что это гарантирует, что весь будущий MySQL будет хорошо
работать с Вашими приложениями.</p>

<p>Испытательная система состоит из испытательного языкового интерпретатора
(<span><strong>mysqltest</strong></span>), Perl-скрипта, чтобы выполнить все
тесты (<span><strong>mysql-test-run.pl</strong></span>), фактические
прецеденты, написанные на специальном испытательном языке, и их ожидаемые
результаты. Чтобы выполнить испытательный набор на Вашей системе после
создания, введите <span><strong>make test</strong></span> из корневого
каталога исходных текстов или перейдите в каталог <code>mysql-test</code> и
введите <span><strong>./mysql-test-run.pl</strong></span>. Если Вы установили
двоичный дистрибутив, измените местоположение на каталог
<code>mysql-test</code> (например, <code>/usr/local/mysql/mysql-test</code>)
и запустите <span><strong>./mysql-test-run.pl</strong></span>. Все тесты
должны пройти успешно. Если что-либо не работает, не стесняйтесь пытаться
узнать, почему и сообщите о проблеме, если она указывает на ошибку в MySQL.
См. <a href="intro.htm#bug-reports">раздел 1.7</a>.</p>

<p>Если один тест терпит неудачу, Вы должны выполнить
<span><strong>mysql-test-run.pl</strong></span> с опцией
<code>--force</code>, чтобы проверить, терпят ли какие-либо
другие тесты неудачу.</p>

<p>Если у Вас есть копия <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a>, работающего на машине, где Вы хотите выполнить
испытательный набор, Вы не должны останавливать его, пока это не использует
порты <code>9306</code> или <code>9307</code>. Если любой из этих портов
занят, Вы должны установить переменную окружения <code>MTR_BUILD_THREAD
</code> к соответствующему значению, и испытательный набор будут использовать
иной набор портов для ведущего, ведомого устройства и NDB. Например:
<pre>
shell&gt; export MTR_BUILD_THREAD=31
shell&gt; ./mysql-test-run.pl [<em><code>options</code></em>] [<em><code>test_name</code></em>]
</pre>

В каталоге <code>mysql-test</code> Вы можете выполнить отдельный прецедент с
помощью <span><strong>./mysql-test-run.pl
<em><code>test_name</code></em></strong></span>.</p>

<p>Если Вы имеете вопрос об испытательном наборе или полезный прецедент,
пошлите электронное письмо в список рассылки MySQL <code>internals</code>.
См. <a href="intro.htm#mailing-lists">раздел 1.6.1</a>.</p>

<h2><a name="plugin-api"></a>26.2. MySQL Plugin API</h2>
<p>MySQL поддерживает API, который позволяет создание серверных компонентов.
Плагины могут быть загружены при запуске сервера или загружены и выгружены во
время выполнения, не перезапуская сервер. API является глобальным и не
определяет то, что могут сделать плагины. Компоненты, поддержанные этим
интерфейсом, включают, но не ограничены, механизмы хранения, полнотекстовые
плагины анализатора и расширения сервера.</p>

<p>Например, полнотекстовые плагины анализатора могут использоваться, чтобы
заменить или увеличить встроенный полнотекстовый анализатор. Плагин может
разобрать текст на слова, используя правила, которые отличаются от
используемых встроенным анализатором. Это может быть полезно, если Вы должны
разобрать текст с характеристиками, отличающимися от
ожидаемых встроенным анализатором.</p>

<p>Интерфейс является более общим, чем более старый интерфейс определяемых
пользователем функций (UDF).</p>
<p>Интерфейс использует таблицу <code>plugin</code> в базе данных
<code>mysql</code>, чтобы сделать запись информации о плагинах, которые были
установлены надолго оператором
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>.
Эта таблица составлена как часть процесса установки MySQL. Плагины могут
также быть установлены кратко опцией <code>--plugin-load</code>. Плагины,
установленные этим путем, не зарегистрированы в таблице <code>plugin</code>.
См. <a href="server.htm#server-plugin-loading">раздел 6.6.2</a>.</p>

<p>MySQL поддерживает API для плагинов клиента в дополнение к этому для
плагинов сервера. Это используется, например, плагинами аутентификации, где
серверный плагин и клиентский плагин сотрудничают, чтобы позволить клиентам
соединиться с сервером через множество методов аутентификации.</p>

<p>Исходные тексты MySQL содержат внутреннюю документацию, созданную с
помощью Doxygen. Эта документация полезна для понимания, как MySQL работает с
точки зрения разработчика. Произведенный контент Doxygen доступен на
<a href="../../../dev.mysql.com/doc/dev/mysql-server/latest/default.htm" target="_top">
http://dev.mysql.com/doc/dev/mysql-server/latest/</a>. Также возможно
воспроизвести этот контент локально, используя инструкции в
<a href="install.htm#source-installation-doxygen">разделе 2.8.7</a>.</p>

<h3><a name="plugin-types"></a>26.2.1. Типы плагинов</h3>
<p>API включает создание плагинов, которые осуществляют несколько задач:</p>
<ul><li><p><a href="#storage-engine-plugin-type">Механизмы хранения
</a></li>
<li><a href="#full-text-plugin-type">Полнотекстовые анализаторы</a>
</li>
<li><a href="#daemon-plugin-type">Демоны</a></li>
<li><a href="#information-schema-plugin-type">Таблицы
<code>INFORMATION_SCHEMA</code></a></li>
<li><a href="#semisynchronous-replication-plugin-type">
Полусинхронная репликация</a></li>
<li><a href="#audit-plugin-type">Аудит</a></li>
<li><a href="#authentication-plugin-type">Аутентификация</a></li>
<li><a href="#password-validation-plugin-type">
Проверка допустимости пароля</a></li>
<li><a href="#protocol-trace-plugin-type">Трассировка протокола
</a></li>
<li><a href="#query-rewrite-plugin-type">Перезапись запроса</a>
</li>
<li><a href="#keyring-plugin-type">Безопасное хранение ключей</a>
</p></li></ul>
<p>Следующие разделы обеспечивают краткий обзор этих типов.</p>

<h4><a name="storage-engine-plugin-type"></a>Плагины механизма хранения</h4>
<p>Архитектура механизма хранения, используемая сервером MySQL, позволяет
механизмам хранения быть написанными как плагины и загруженными в процессе
работы сервера. Для описания этой архитектуры, см.
<a href="storage.htm#pluggable-storage-overview">раздел 17.11</a>.</p>

<p>Для информации о том, как использовать API, чтобы написать механизм
хранения, см.
<a href="../../../dev.mysql.com/doc/internals/en/custom-engine.html"
target="_top">MySQL Internals: Writing a Custom Storage Engine</a>.</p>

<h4><a name="full-text-plugin-type"></a>Полнотекстовые плагины анализатора
</h4>
<p>У MySQL есть встроенный анализатор, который он использует по умолчанию для
полнотекстовых операций (разбор текста, который будет индексирован, или
разбор строки запроса, чтобы определить параметры, которые будут
использоваться для поиска). Встроенный полнотекстовый анализатор поддержан
для таблиц <code>InnoDB</code> и <code>MyISAM</code>.</p>

<p>Символьно-ориентированный полнотекстовый анализатор, который поддерживает
китайский, японский и корейский (CJK), и основанный на слове плагин
анализатора MeCab, который поддерживает японский язык, для использования с
таблицами <code>InnoDB</code> и <code>MyISAM</code>.</p>

<p>"Для полнотекстовой обработки" означает извлечение слов (или
<span><span>токенов</span></span>, в случае символьно-ориентированного
анализатора) из текста или строки запроса, основываясь на правилах, которые
определяют, какие символьные последовательности составляют слово и
где границы слова.</p>

<p>Разбирая для того, чтобы индексировать цели, анализатор передает каждое
слово серверу, который добавляет его к полнотекстовому индексу. Разбирая
строку запроса, анализатор передает каждое слово серверу, который накапливает
слова для использования в поиске.</p>

<p>Свойства парсинга встроенного полнотекстового анализатора описаны в
<a href="funct.htm#fulltext-search">разделе 13.9</a>. Эти свойства включают
правила для того, чтобы определить, как извлечь слова из текста. Анализатор
под влиянием определенных системных переменных исключает слова короче или
длиннее определенного размера и обрабатывает список стоп-слов, который
идентифицирует общие слова, которые будут проигнорированы. Для получения
дополнительной информации, см. разделы
<a href="funct.htm#fulltext-stopwords">13.9.4</a> и
<a href="funct.htm#fulltext-fine-tuning">13.9.6</a>.</p>

<p>API позволяет Вам использовать свой полнотекстовый анализатор. Например,
если Вы работаете с японским языком, Вы можете хотеть использовать
полнотекстовый анализатор MeCab. API также позволяет Вам обеспечить
полнотекстовый собственный анализатор так, чтобы Вы управляли основными
режимами работы анализатора. Плагин анализатора может работать в любой
из двух ролей:</p>

<ul><li><p>Плагин может заменить встроенный анализатор. В этой роли плагин
читает ввод, который будет разобран, разделяет это на слова и передает слова
серверу (для того, чтобы индексировать или для маркерного накопления).
Парсеры ngram и MeCab действуют в качестве замены для
встроенного полнотекстового анализатора.</p>

<p>Вы можете хотеть обеспечивать свой собственный полнотекстовый анализатор,
если Вы должны использовать правила, отличные от таковых из встроенного
анализатора для того, чтобы определить, как разделить ввод на слова.
Например, встроенный анализатор полагает, что текст
<span><span>case-sensitive</span></span> состоит из двух слов
<span><span>case</span></span> и <span><span>sensitive</span></span>,
тогда как приложение, возможно, должно было бы обработать текст
как отдельное слово.</li>

<li>Плагин может действовать в соединении со встроенным анализатором, служа
фронтэндом для него. В этой роли плагин извлекает текст из ввода и передает
его анализатору, который разделяет текст на слова, используя нормальные
правила парсинга. Этот парсинг затронут системными переменными
<code>innodb_ft_<em><code>xxx</code></em></code> или
<code>ft_<em><code>xxx</code></em></code> и списком стоп-слов.</p>

<p>Одна причина использовать анализатор, состоит в том, что Вы должны
индексировать контент, такой как документы в формате PDF, XML-документы или
файлы <code>.doc</code>. Встроенный анализатор не предназначен для этих типов
ввода, но плагин может вытащить текст из этих входных источников и передать
его встроенному анализатору.</p></li></ul>

<p>Для плагина анализатора также возможно работать в обеих ролях.
Таким образом, это может извлечь текст из ввода какого-то сложного формата
(роль фронтэнда), а также разобрать текст на слова (таким образом
заменяя встроенный анализатор).</p>

<p>Полнотекстовый плагин связан с полнотекстовым индексированием. Таким
образом, когда Вы устанавливаете плагин анализатора первоначально, он не
будет использоваться для любых полнотекстовых операций. Это просто становится
доступным. Например, полнотекстовый плагин анализатора становится доступным
для вызова в предложении <code>WITH PARSER</code> для создания конкретного
индекса <code>FULLTEXT</code>. Чтобы создать такой индекс во время создания
таблицы, сделайте это:
<pre>
CREATE TABLE t
(
  doc CHAR(255),
  FULLTEXT INDEX (doc) WITH PARSER parser_name
) ENGINE=InnoDB;
</pre>

Или Вы можете добавить индексирование после того, как
таблица была составлена:
<pre>
ALTER TABLE t ADD FULLTEXT INDEX (doc) WITH PARSER parser_name;
</pre>

Единственное изменение SQL для того, чтобы связать анализатор с
индексированием: предложение <code>WITH PARSER</code>. Поиски определены как
прежде, без изменений, необходимых для запросов.</p>

<p>Когда Вы связываете плагин анализатора с индексом <code>FULLTEXT</code>,
плагин требуется для того, чтобы использовать индексирование. Если плагин
анализатора удален, любой связанный с ним индекс, становится непригодным.
Любая попытка использовать таблицу, для которой плагин недоступен, приведет
к ошибке, хотя <a href="sql.htm#drop-table"><code>DROP TABLE</code></a>
все еще возможно.</p>

<h4><a name="daemon-plugin-type"></a>Демоны</h4>
<p>Плагин демона это простой тип плагина, используемого для кода, который
должен быть выполнен сервером, но это не общается с ним. Дистрибутивы MySQL
включают плагин демона в качестве примера, который пишет
периодические сообщения в файл.</p>

<h4><a name="information-schema-plugin-type"></a>Плагины INFORMATION_SCHEMA
</h4>
<p>Плагины <code>INFORMATION_SCHEMA</code> позволяют создание таблиц,
содержащих метаданные о сервере, которые выставлены пользователям через
базу данных <code>INFORMATION_SCHEMA</code>. Например, <code>InnoDB</code>
применяет плагин <code>INFORMATION_SCHEMA</code>, чтобы обеспечить таблицы,
которые содержат информацию о текущих транзакциях и блокировках.</p>

<h4><a name="semisynchronous-replication-plugin-type"></a>Плагины репликации
</h4>
<p>Репликация MySQL является асинхронной по умолчанию. С полусинхронной
передача выполненного на ведущей стороне делается прежде, чем возвратиться
к сеансу, который выполнил транзакцию, пока по крайней мере одно ведомое
устройство не признает, что получило и зарегистрировало события.
Полусинхронная репликация осуществлена через дополнительные плагины ведущего
устройства и клиента. См. <a href="replica.htm#replication-semisync">раздел
19.3.10</a>.</p>

<h4><a name="audit-plugin-type"></a>Плагины аудита</h4>
<p>Сервер MySQL обеспечивает контрольный интерфейс, который позволяет
сообщать информацию об операциях сервера заинтересованным сторонам.
Контрольное уведомление происходит для этих операций (хотя интерфейс является
общим, и сервер мог быть изменен, чтобы сообщить о других):</p>

<ul><li><p>Запись сообщения в общий журнал запроса (если журнал включен).
</li>
<li>Запись сообщения в журнал ошибок.</li>
<li>Отправка результата запроса клиенту.</p></li></ul>

<p>Контрольные плагины могут зарегистрироваться в контрольном интерфейсе,
чтобы получить уведомление об операциях сервера. Когда соответствующее
событие имеет место, сервер определяет, необходимо ли уведомление. Для
каждого зарегистрированного контрольного плагина сервер проверяет случай по
тем классам событий, в которых плагин заинтересован и передает случай
плагину, если есть соответствие.</p>

<p>Этот интерфейс позволяет контрольным плагинам получить уведомления только
об операциях в классах событий, которые они считают существенными и
проигнорировать другие. Интерфейс предусматривает классификацию операций в
классы событий и дальнейшее разделение на подклассы событий в
пределах каждого класса.</p>

<p>Когда контрольный плагин уведомлен о событии, он получает указатель на
текущую структуру THD и указатель на структуру, которая содержит информацию о
случае. Плагин может исследовать случай и предпринять любые соответствующие
действия ревизии. Например, плагин может видеть, какой запрос произвел набор
результатов или был зарегистрирован, число строк в результате, кем текущий
пользователь был для работы, или код ошибки для неудавшейся операции.</p>

<h4><a name="authentication-plugin-type"></a>Плагины аутентификации</h4>
<p>MySQL поддерживает подключаемую аутентификацию. Плагины аутентификации
существуют на стороне сервера и на стороне клиента. Плагины на стороне
сервера осуществляют методы аутентификации для использования клиентами,
когда они соединяются с сервером. Плагин на стороне клиента общается с
серверным плагином, чтобы предоставить информацию аутентификации, которую это
запрашивает. Клиентский плагин может взаимодействовать с пользователем,
выполняя задачи, такие как запрос пароля или других параметров
аутентификации, которые будут посланы серверу. См.
<a href="security.html#pluggable-authentication">раздел 7.3.9</a>.</p>

<h4><a name="password-validation-plugin-type"></a>
Плагины проверки допустимости пароля</h4>
<p>Сервер MySQL обеспечивает интерфейс для того, чтобы созадть плагин
контроля паролей. Такой плагин осуществляет две задачи:</p>

<ul><li><p>Отклонение слабых паролей в запросах, которые назначают пароли
(<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>) и паролей,
заданных как параметр функции <a href="funct.htm#function_password"><code>
PASSWORD()</code></a>.</li>

<li>Оценка силы потенциальных паролей для функции SQL
<a href="funct.htm#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH()</code></a>.</p></li></ul>

<h4><a name="protocol-trace-plugin-type"></a>Плагины трассировки протокола
</h4>
<p>MySQL поддерживает использование плагинов трассировки протокола:
клиентские плагины, которые осуществляют рассмотрение связи между клиентом и
сервером, которая имеет место, используя протокол клиент-сервер.</p>

<h4><a name="query-rewrite-plugin-type"></a>Плагины перезаписи запроса</h4>
<p>Сервер MySQL поддерживает плагины перезаписи запроса, которые могут
исследовать и возможно изменить запросы, полученные сервером прежде, чем
сервер выполнит их. Плагин перезаписи запроса берет запросы прежде или после
того, как сервер разобрал их.</p>

<p>У плагина перезаписи запроса перед разбором есть эти характеристики:</p>
<ul><li><p>Плагин позволяет переписать запросы SQL, достигающие сервера
прежде, чем сервер обработает их.</li>
<li>Плагин получает строку запроса и может возвратить иную строку.
</p></li></ul>

<p>У плагина перезаписи запроса после разбора есть эти характеристики:</p>
<ul><li><p>Плагин позволяет перезапись, основанную на деревьях разбора.</li>
<li>Сервер разбирает каждый запрос и передает его дерево разбора к плагину,
который может переделать дерево. Плагин может возвратить оригинальное дерево
серверу для дальнейшей обработки или создать иное дерево и вернуть его.</li>

<li>Плагин может использовать сервис <code>mysql_parser</code> в этих целях:
<ul><li><p>Активировать вычисление обзора запроса и получить нормализованную
версию запросов, независимых от того, производит ли
Performance Schema обзоры.</li>

<li>Переделывать деревья разбора.</li>
<li>Разобрать запрос. Это полезно, если плагин создает новую строку запроса
из дерева разбора. У плагина может быть серверный разбор строки, чтобы
произвести новое дерево, затем возвратить то дерево как
представление переписанного запроса.</p></li></ul></li></ul>

<p>Плагины перезаписи запроса до и после разбора имеют эти характеристики:
</p>

<ul><li><p>Если плагин перезаписи запроса установлен, опция
<a href="server.htm#option_mysqld_log-raw"><code>--log-raw</code></a>
затрагивает протоколирование запросов так:</p>

<ul><li><p>Без <a href="server.htm#option_mysqld_log-raw"><code>--log-raw
</code></a> сервер регистрирует запрос, возвращенный плагином перезаписи
запроса. Это может отличаться от изначального запроса.</li>
<li>С <a href="server.htm#option_mysqld_log-raw"><code>--log-raw</code></a>
сервер регистрирует оригинальный запрос как получен.</p></li></ul></li>

<li><p>Если плагин переписывает запрос, сервер решает, написать ли это в
двоичный журнал регистрации (и таким образом каким-либо ведомым устройствам).
Если плагин переписывает только запросы
<a href="sql.htm#select"><code>SELECT</code></a> в запросы
<a href="sql.htm#select"><code>SELECT</code></a>,
нет никакого воздействия на двоичное журналирование, потому что сервер не
пишет в него запросы <a href="sql.htm#select"><code>SELECT</code></a>.</li>

<li>Если плагин переписывает запрос, сервер производит сообщение
<code>Note</code>, что клиент может рассмотреть, применяя
<a href="sql.htm#show-warnings"><code>SHOW WARNINGS</code></a>. У сообщений
есть формат, где <em><code>stmt_in</code></em> оригинал запроса, а
<em><code>stmt_out</code></em> переписанный запрос:
<pre>
Query '<em><code>stmt_in</code></em>' rewritten to '<em><code>stmt_out</code></em>' by a query rewrite plugin
</pre></li></ul>

<p>Дистрибутивы MySQL включают плагин <code>Rewriter</code> перезаписи
запроса после разбора. Этот плагин базируется на правилах. Вы можете добавить
строки к его таблице правил, чтобы вызвать перезапись запроса
<a href="sql.htm#select"><code>SELECT</code></a>.</p>

<p>Плагины перезаписи запроса используют тот же самый API, что и контрольные
плагины. Для получения дополнительной информации о контрольных плагинах см.
<a href="#writing-audit-plugins">раздел 26.2.4.8</a>.</p>

<h4><a name="keyring-plugin-type"></a>Плагины ключей</h4>
<p>Сервер MySQL поддерживает плагины ключей, которые позволяют внутренним
серверным компонентам и плагинам надежно хранить чувствительную информацию
для последующего извлечения.</p>
<p>Все дистрибутивы MySQL включают такой плагин <code>keyring_file</code>.
См. <a href="security.html#keyring">раздел 7.5.3</a>.</p>

<h3><a name="plugin-api-characteristics"></a>26.2.2. Характеристики API</h3>
<p>У API плагинов сервера есть эти характеристики:</p>
<ul><li><p>У всех плагинов есть несколько общих черт.</p>

<p>У каждого плагина есть имя, по которому он может быть упомянут в запросах
SQL, а также другие метаданные (например, автор и описание), которые
предоставляют другую информацию. Эта информация может быть исследована в
таблице <a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS
</code></a> или <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>.
</li>

<li>Структура является растяжимой, чтобы приспособить
различные виды плагинов.</p>
<p>Хотя некоторые аспекты API характерны для всех типов плагинов, API также
разрешает определенные для типа элементы интерфейса так, чтобы различные
типы плагинов могли быть созданы. У плагина с одной целью может быть
интерфейс, самый соответствующий его собственным требованиям а не требованиям
некоторого другого типа.</p>

<p>Интерфейсы для нескольких типов плагинов существуют, такие как механизмы
хранения, полнотекстовый анализатор и таблицы <code>INFORMATION_SCHEMA</code>.
Другие могут быть добавлены.</li>

<li>Плагины могут выставить информацию пользователям.</p>
<p>Плагин может осуществить систему и переменные состояния, которые доступны
через операторы <a href="sql.htm#show-variables"><code>SHOW VARIABLES</code>
</a> и <a href="sql.htm#show-status"><code>SHOW STATUS</code></a>.</li>
<li>API включает информацию о версии.</p>

<p>Информация о версии, включенная в API, позволяет библиотеке и каждому
плагину, который ее содержит самоидентифицироваться относительно версии API,
которая использовалась, чтобы создать библиотеку. Если API изменится в
течение долгого времени, то номера версии изменятся, но сервер может
исследовать информацию о версии данной библиотеки, чтобы определить,
поддерживает ли он плагины в библиотеке.</p>

<p>Есть два типа номеров версии. Первой является версия для общей сменной
структуры непосредственно. Каждая сменная библиотека включает этот вид номера
версии. Второй тип версии относится к отдельным плагинам. У каждого
определенного типа плагина есть версия для интерфейса, таким образом, у
каждого плагина в библиотеке есть определенный для типа номер версии.
Например, у библиотеки, содержащей полнотекстовый плагин анализатора, есть
общий сменный номер версии API, и у плагина есть номер версии, определенный
для полнотекстового интерфейса.</li>

<li>API осуществляет ограничения безопасности.</p>
<p>Сменная библиотека должна быть установлена в определенном
специализированном каталоге, для которого местоположением управляет сервер и
оно не может быть изменено во времени выполнения. Кроме того, библиотека
должна содержать определенные символы, которые идентифицируют ее как сменную
библиотеку. Сервер не будет загружать что-то как плагин, если это не было
создано как плагин.</li>

<li>У плагинов есть доступ к службам сервера.</p>
<p>Интерфейс служб выставляет функциональность сервера, так что плагины могут
получить доступ к обычным вызовам функций. Для деталей см.
<a href="#plugin-services">раздел 26.3</a>.</p></li></ul>

<p>В некотором отношении, у плагина сервера, API подобен более старой
определяемой пользователем функции (UDF), но у API есть несколько преимуществ.
Например, у UDFs не было никакой информации о версии. Кроме того, более новый
интерфейс устраняет вопросы безопасности. Более старый интерфейс для того,
чтобы написать UDF разрешал библиотекам быть загруженными из любого каталога,
просматриваемого динамическим компоновщиком системы, а символы, которые
идентифицировали библиотеку UDF, были относительно неопределенными.</p>
<p>У плагина клиента есть подобные архитектурные характеристики, но плагины
клиента не имеют никакого прямого доступа к серверу.</p>

<h3><a name="plugin-api-components"></a>26.2.3. Компоненты Plugin API</h3>
<p>Реализация плагина сервера включает несколько компонентов.</p>
<p>Запросы SQL</p>
<ul><li><p><a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>
регистрирует плагин в таблице <code>mysql.plugin</code> и загружает код.</li>
<li><a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>
отменяет регистрацию в таблице <code>mysql.plugin</code> и выгружает код.
</li>

<li>Предложение <code>WITH PARSER</code> для полнотекстового индексирования
создает связь полнотекстового плагина анализатора с данным индексом
<code>FULLTEXT</code>.</li>
<li><a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a> показывает
сведения о плагинах сервера.</p></li></ul>

<p>Параметры командной строки и системные переменные:</p>
<ul><li><p><a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load
</code></a> позволяет плагинам быть загруженными во время запуска сервера.
</li>

<li>Системная переменная <a href="server.htm#sysvar_plugin_dir"><code>
plugin_dir</code></a> указывает на местоположение каталога, где все плагины
должны быть установлены. Значение этой переменной может быть определено при
запуске сервера с помощью опции
<a href="server.htm#sysvar_plugin_dir"><code>--plugin_dir=<em><code>dir_name
</code></em></code></a>. <a href="programs.htm#mysql-config">
<span><strong>mysql_config --plugindir</strong></span></a> отображает путь
к каталогу плагинов по умолчанию.</p></li></ul>

<p>Связанные с плагинами таблицы:</p>
<ul><li><p>Таблица <a href="inform.htm#plugins-table"><code>
INFORMATION_SCHEMA.PLUGINS</code></a> содержит информацию о плагинах.</li>

<li>Таблица <code>mysql.plugin</code> приводит каждый плагин, который был
установлен с <a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>
и требуется для его использования. Для новых установок MySQL эта таблица
составлена во время процесса установки.</p></li></ul>

<p>Выполнение плагина клиента более просто:</p>
<ul><li><p>Для функции C API <a href="connect.htm#mysql-options"><code>
mysql_options()</code></a> опции <code>MYSQL_DEFAULT_AUTH</code> и
<code>MYSQL_PLUGIN_DIR</code> позволяют программам клиента
загрузить плагины аутентификации.</li>
<li>Есть C API функции, которые включают управлению плагинами клиента.
</p></li></ul>

<p>Чтобы исследовать, как MySQL осуществляет плагины, консультируйтесь
со следующими исходными файлами в дистрибутиве исходых текстов MySQL:</p>
<ul><li><p>В каталоге <code>include/mysql</code> <code>plugin.h</code>
выставляет общественный API. Этот файл должен быть исследован любым, кто
хочет написать библиотеку плагинов. Файлы <code>plugin_<em><code>xxx</code>
</em>.h</code> обеспечивают дополнительную информацию, которая принадлежит к
определенным типам плагинов. <code>client_plugin.h</code> содержит
информацию, определенную для плагинов клиента.</li>

<li>В каталоге <code>sql</code> файлы <code>sql_plugin.h</code> и
<code>sql_plugin.cc</code> реализуют плагины. <code>sql_acl.cc</code> то
место, где сервер использует плагины аутентификации. С этими файлами не
должны консультироваться разработчики. Они могут представлять интерес для
тех, кто хочет знать больше о том, как сервер обрабатывает плагины.</li>

<li>В каталоге <code>sql-common</code> <code>client_plugin.h</code> реализует
функции C API плагина клиента и <code>client.c</code> реализует поддержку
аутентификации клиента. С этими файлами не должны консультироваться
разработчики. Они могут представлять интерес для тех, кто хочет знать больше
о том, как сервер обрабатывает плагины.</li></ul>

<h3><a name="writing-plugins"></a>26.2.4. Написание плагинов</h3>
<p>Чтобы создать библиотеку плагинов, Вы должны предоставить запрошенную
дескрипторную информацию, которая указывает на то, какие плагины файл
библиотеки содержит, и написать функции интерфейса для каждого плагина.</p>

<p>У каждого плагина сервера должен быть общий дескриптор, который
предоставляет информацию API, и определенный для типа дескриптор, который
предоставляет информацию об интерфейсе для данного типа плагина. Структура
общего дескриптора одинакова для всех типов плагинов. Структура определенного
для типа дескриптора изменяется от типа к типу и определена требованиями
того, что должен сделать плагин. Интерфейс плагина сервера также позволяет
плагинам выставить системные переменные и состояние. Эти переменные
становятся видимыми через операторы
<a href="sql.htm#show-status"><code>SHOW STATUS</code></a> и
<a href="sql.htm#show-variables"><code>SHOW VARIABLES</code></a>, а также
соответствующие таблицы в <code>INFORMATION_SCHEMA</code>.</p>

<p>Для клиентских плагинов архитектура немного отличается. У каждого плагина
должен быть дескриптор, но нет никакого подразделения на отдельные общие и
определенные для типа дескрипторы. Вместо этого дескриптор начинается с
фиксированного набора членов, характерных для всех типов плагина клиента,
общие члены сопровождаются дополнительными, требуемыми, чтобы осуществить
определенный тип плагина.</p>

<p>Вы можете написать плагины на C или C++ (или другом языке, который может
использовать соглашение о вызовах C). Плагины загружены и выгружены
динамически, таким образом, Ваша операционная система должна поддерживать
динамическую загрузку, и Вы должны скомпилировать вызывающее приложение
динамически (не статически). Для плагинов сервера это означает, что
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
должен быть собран динамически.</p>

<p>Плагин сервера содержит код, который становится частью рабочего сервера,
так что, когда Вы пишете плагин, Вы связаны всеми ограничениями, которые
относятся к написанию кода сервера. Например, у Вас могут быть проблемы, если
Вы пытаетесь использовать функции из библиотеки <code>libstdc++</code>. Эти
ограничения могут измениться в будущих версиях сервера, таким образом,
возможно, что обновления сервера потребуют пересмотра плагинов, первоначально
написанных для более старых серверов. Для информации об этих ограничениях см.
разделы <a href="install.htm#source-configuration-options">2.8.4</a> и
<a href="install.htm#compilation-problems">2.8.5</a>.</p>

<p>Авторы плагина клиента должны избежать зависимостей от того, какие символы
вызывающее приложение имеет, потому что Вы не можете убедиться, какие
приложения используют плагин.</p>

<h4><a name="writing-plugins-overview"></a>
26.2.4.1. Обзор разработки плагинов</h4>
<p>Следующая процедура обеспечивает краткий обзор шагов, которые должны
создать библиотеку плагинов. Следующие разделы обеспечивают дополнительные
детали об установке структур данных и создании определенных типов плагинов.
</p>

<ol type="1"><li><p>В исходном файле включайте заголовочные файлы, в которых
нуждается библиотека. Файл <code>plugin.h</code> требуется, и библиотека
могла бы потребовать других файлов также. Например:
<pre>
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#include &lt;mysql/plugin.h&gt;
</pre></li>

<li>Настройте информацию о дескрипторе для файла библиотеки. Для плагинов
сервера напишите дескриптор библиотеки, который должен содержать общий
дескриптор для каждого плагина сервера в файле. Для получения
дополнительной информации, см.
<a href="#server-plugin-descriptors">раздел 26.2.4.2.1</a>. Кроме
того, настройте определенный для типа дескриптор для каждого плагина сервера
в библиотеке. Общий дескриптор каждого плагина указывает на его определенный
для типа дескриптор.</p>

<p>Для плагинов клиента напишите дескриптор клиента. Для получения
дополнительной информации, см.
<a href="#client-plugin-descriptors">раздел 26.2.4.2.3</a>.</li>

<li>Напишите функции интерфейса для каждого плагина. Например, общий
дескриптор каждого плагина указывает на функции инициализации и завершения,
которые сервер должен вызвать, когда загружает и выгружает плагин.
Определенное для типа описание плагина может также указать
на функции интерфейса.</li>

<li>Для плагинов сервера установите состояние и системные переменные,
если они есть.</li>
<li>Соберите библиотеку как совместно используемую библиотеку и установите ее
в каталоге плагинов. Для получения дополнительной информации, см.
<a href="#compiling-plugin-libraries">раздел 26.2.4.3</a>.</li>

<li>Для плагинов сервера зарегистрируйте плагин на сервере. Для получения
дополнительной информации, см.
<a href="server.htm#server-plugin-loading">раздел 6.6.2</a>.</li>
<li>Протестируйте плагин, чтобы проверить, что он работает должным образом.
</p></li></ol>

<h4><a name="plugin-data-structures"></a>26.2.4.2. Структуры данных плагинов
</h4>
<p>Файл библиотеки плагинов включает информацию об описателе (дескрипторе),
чтобы указать на то, какие плагины это содержит.</p>

<p>Если библиотека содержит какие-либо плагины сервера, она должна включать
следующую информацию об описателе (дескрипторе):</p>
<ul><li><p>Описатель библиотеки указывает на общий номер версии API плагина
сервера, используемый библиотекой, и содержит общий дескриптор для каждого
плагина сервера в библиотеке. Чтобы предоставить основу для этого описателя,
вызовите два макроопределения из файла заголовка <code>plugin.h</code>:
<pre>
mysql_declare_plugin(<em><code>name</code></em>)
 <em><code>... один или более дескрипторов здесь ...</code></em>
mysql_declare_plugin_end;
</pre>
Макроопределение расширяется, чтобы обеспечить декларацию для версии API
автоматически. Вы должны обеспечить описатели (дескрипторы).</li>

<li>В пределах описателя библиотеки каждый общий плагин сервера описан
структурой <code>st_mysql_plugin</code>. Эта сменная дескрипторная структура
содержит информацию, которая характерна для каждого типа плагина сервера:
значение, которое указывает на тип; имя, автор, описание и тип лицензии;
указатели на функции инициализации и завершения, которые вызывает сервер,
когда загружает и выгружает плагин, и указатели на любое состояние или
системные переменные плагина.</li>

<li>Каждый общий описатель плагина сервера в пределах описателя библиотеки
также содержит указатель на определенный для типа описатель. Структура
определенных для типа описателей изменяется от одного типа к другому, потому
что у каждого типа плагина может быть свой собственный API. Определенный для
типа описатель содержит определенный для типа номер версии API и указатели на
функции, которые необходимы, чтобы осуществить этот тип. Например, у
полнотекстового плагина анализатора есть функции инициализации и завершения
и основная функция парсинга. Сервер вызывает эти функции, когда он использует
плагин, чтобы разобрать текст.</p></li></ul>

<p>Библиотека также содержит функции интерфейса, на которые ссылаются общие и
определенные для типа описатели для каждого плагина в библиотеке.</p>
<p>Если библиотека содержит плагин клиента, она должна включать описатель для
плагина. Описатель начинается с фиксированного набора членов, характерных для
всех плагинов клиента, сопровождаемых любыми членами, определенными для
конкретного типа плагина. Чтобы создать основу дескриптора, вызовите два
макроопределения из файла заголовка <code>client_plugin.h</code>:
<pre>
mysql_declare_client_plugin(<em><code>plugin_type</code></em>)
   ... <em><code>члены для всех клиентских плагинов</code></em> ...
   ... <em><code>Дополнительные члены для конкретного типа</code></em> ...
mysql_end_client_plugin;
</pre>
Библиотека также содержит любые функции интерфейса, на которые
ссылается описатель клиента.</p>

<p>Макросы <code>mysql_declare_plugin()</code> и
<code>mysql_declare_client_plugin()</code> отличается несколько в том, как
они могут быть вызваны, у кого есть значения для содержания библиотек.
Следующие замечания суммируют правила:</p>

<ul><li><p><code>mysql_declare_plugin()</code> и
<code>mysql_declare_client_plugin()</code> могут оба использоваться в том же
самом исходном файле, что означает, что библиотека может содержать серверные
и клиентские плагины. Однако, каждый из <code>mysql_declare_plugin()</code>
и <code>mysql_declare_client_plugin()</code> может использоваться
самое большее однажды.</li>

<li>Многократные декларации плагина сервера <code>mysql_declare_plugin()
</code> разрешены, таким образом, библиотека может содержать
много плагинов сервера.</li>

<li>Допустима только единственная декларация плагина клиента
<code>mysql_declare_client_plugin()</code>. Чтобы создать много плагинов
клиента, нужно пользоваться разными библиотеками.</p></li></ul>

<p>Когда программа клиента ищет плагин клиента, который находится в
библиотеке и не создан в <code>libmysqlclient</code>, это ищет файл с базовым
именем, которое является тем же самым, что и имя плагина. Например, если
программа должна использовать плагин аутентификации клиента, названный
<code>auth_xxx</code> в системе, которая использует суффикс библиотеки
<code>.so</code>, будет проводиться поиск файла с именем
<code>auth_xxx.so</code>. В OS X программа сначала ищет
<code>auth_xxx.dylib</code>, а уже потом <code>auth_xxx.so</code>. Поэтому,
если библиотека содержит плагин клиента, у библиотеки должно быть то же самое
базовое имя, как и у плагина.</p>

<p>То же самое неверно для библиотеки, которая содержит плагины сервера.
Опция <a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load
</code></a> и оператор <a href="sql.htm#install-plugin"><code>INSTALL PLUGIN
</code></a> обеспечивает имя файла библиотеки явно, таким образом, нет
никаких явных отношений между именем библиотеки и названием любых плагинов
сервера, которые она содержит.</p>

<h5><a name="server-plugin-descriptors"></a>26.2.4.2.1.
Библиотека плагина сервера и дескрипторы плагинов</h5>
<p>Каждая библиотека, которая содержит плагины сервера, должна включать
описатель библиотеки, который содержит общий дескриптор для каждого плагина
сервера в файле. Этот раздел обсуждает, как написать библиотеку и общий
дескриптор для плагинов сервера.</p>

<p>Описатель библиотеки должен определить два символа:</p>
<ul><li><p><code>_mysql_plugin_interface_version_</code> определяет номер
версии общей структуры. Это дано символом
<code>MYSQL_PLUGIN_INTERFACE_VERSION</code>, который определен в файле
<code>plugin.h</code>.</li>

<li><code>_mysql_plugin_declarations_</code> определяет массив деклараций
плагинов, законченных декларацией со всеми членами, установленными в 0.
Каждая декларация является экземпляром структуры <code>st_mysql_plugin</code>
(тоже определена в <code>plugin.h</code>). Должен быть один экземпляр для
каждого плагина сервера в библиотеке.</p></li></ul>

<p>Если сервер не находит те два символа в библиотеке, он не принимает это
как легальную библиотеку и отклоняет ее с ошибкой. Это предотвращает
использование библиотеки, если она не была создана определенно
как библиотека плагинов.</p>

<p>Обычный способ определить два необходимых символа при использовании
макросов <code>mysql_declare_plugin()</code> и
<code>mysql_declare_plugin_end</code> из файла <code>plugin.h</code>:
<pre>
mysql_declare_plugin(<em><code>name</code></em>)
 <em><code>... Один или более дескрипторов плагинов ...</code></em>
mysql_declare_plugin_end;
</pre>

У каждого плагина сервера должен быть общий описатель, который предоставляет
информацию API плагинов сервера. У общего описателя есть та же самая
структура для всех типов плагинов. Структура <code>st_mysql_plugin</code> в
файле <code>plugin.h</code> определяет этот дескриптор:
<pre>
struct st_mysql_plugin
{
  int type;             /* the plugin type (a MYSQL_XXX_PLUGIN value)   */
  void *info;           /* pointer to type-specific plugin descriptor   */
  const char *name;     /* plugin name  */
  const char *author;   /* plugin author (for I_S.PLUGINS)  */
  const char *descr;    /* general descriptive text (for I_S.PLUGINS)   */
  int license;          /* the plugin license (PLUGIN_LICENSE_XXX)*/
  int (*init)(void *);  /* the function to invoke when plugin is loaded */
  int (*deinit)(void *);/* the function to invoke when plugin is unloaded */
  unsigned int version; /* plugin version (for I_S.PLUGINS) */
  struct st_mysql_show_var *status_vars;
  struct st_mysql_sys_var **system_vars;
  void * __reserved1;   /* reserved for dependency checking */
  unsigned long flags;  /* flags for plugin */
};
</pre>

Члены структуры <code>st_mysql_plugin</code> используются следующим образом.
Члены <code>char *</code> должны быть определены как
законченные нулем строки.</p>

<ul><li><p><code>type</code>: Тип плагина. Это должно быть одним из значений
типа из <code>plugin.h</code>:
<pre>
/*
  The allowable types of plugins
*/
#define MYSQL_UDF_PLUGIN 0              /* User-defined function*/
#define MYSQL_STORAGE_ENGINE_PLUGIN  1  /* Storage Engine   */
#define MYSQL_FTPARSER_PLUGIN2          /* Full-text parser plugin*/
#define MYSQL_DAEMON_PLUGIN  3          /* The daemon/raw plugin type */
#define MYSQL_INFORMATION_SCHEMA_PLUGIN  4     /* The I_S plugin type */
#define MYSQL_AUDIT_PLUGIN   5          /* The Audit plugin type*/
#define MYSQL_REPLICATION_PLUGIN 6      /* The replication plugin type */
#define MYSQL_AUTHENTICATION_PLUGIN  7  /* The authentication plugin type */
...
</pre>
Например, для полнотекстового плагина анализатора значение
<code>type</code> <code>MYSQL_FTPARSER_PLUGIN</code>.</li>

<li><code>info</code>: Указатель на определенный для типа описатель для
плагина. Структура этого описателя зависит от конкретного типа плагина, в
отличие от общей структуры дескриптора плагина. В целях управления версиями
первый член определенного для типа описателя для каждого типа будет версией
интерфейса для типа. Это позволяет серверу проверить определенную для типа
версию каждого плагина, независимо от его типа. После номера версии описатель
включает любых других необходимых членов, таких как функции обратного вызова
и другую информацию, необходимую серверу, чтобы вызвать плагин должным
образом. Более поздние разделы по написанию типов плагинов сервера описывают
структуру определенных для типа описателей.</li>

<li><code>name</code>: Строка, которая задает имя плагина. Это имя, которое
будет перечислено в таблице <code>mysql.plugin</code> и которым Вы отсылаете
к плагину в запросах SQL, таких как
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> и
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a> или
опцией <a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load
</code></a>. Имя также видимо в таблице
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или в выводе <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code>
</a>.</p>

<p>Имя не должно начинаться с названия любого параметра сервера. Если это
сделать, то сервер будет не в состоянии инициализировать плагин. Например, у
сервера есть опция <a href="server.htm#option_mysqld_socket"><code>--socket
</code></a>, таким образом, Вы не должны использовать такое имя плагина, как
<code>socket</code>, <code>socket_plugin</code> и им подобные.</li>

<li><code>author</code>: Строка с автором плагина. Это может быть тем,
что Вы любите.</li>
<li><code>desc</code>: Строка, которая обеспечивает общее описание плагина.
Это может быть тем, что Вы любите.</li>

<li><code>license</code>: Тип лицензии. Значение может быть одним из
<code>PLUGIN_LICENSE_PROPRIETARY</code>, <code>PLUGIN_LICENSE_GPL</code> или
<code>PLUGIN_LICENSE_BSD</code>.</li>

<li><code>init</code>: Функция инициализации или <code>NULL</code>, если нет
такой функции. Сервер выполняет эту функцию, когда загружает плагин командой
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или через
таблицу <code>mysql.plugin</code> при запуске сервера. Функция берет один
параметр, который указывает на внутреннюю структуру, используемую, чтобы
идентифицировать плагин. Это возвращает ноль для успеха и отличное от нуля
значение для отказа.</li>

<li><code>deinit</code>: Функция завершения или <code>NULL</code>, если нет
такой функции. Сервер выполняет эту функцию, когда выгружает плагин командой
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a> или
через таблицу <code>mysql.plugin</code> при завершении сервера. Функция берет один
параметр, который указывает на внутреннюю структуру, используемую, чтобы
идентифицировать плагин. Это возвращает ноль для успеха и отличное от нуля
значение для отказа.</li>

<li><code>version</code>: Номер версии. Когда плагин установлен, это значение
может быть получено из таблицы <a href="inform.htm#plugins-table"><code>
INFORMATION_SCHEMA.PLUGINS</code></a>. Значение включает главные и
незначительные числа. Если Вы пишете значение как шестнадцатеричную
постоянную, формат <code>0x<em><code>MMNN</code></em></code>, где
<em><code>MM</code></em> и <code>NN</code> главные и незначительные числа,
соответственно. Например, <code>0x0302</code> определяет версию 3.2.</li>

<li><code>status_vars</code>: Указатель на структуру для переменных состояния
плагина или <code>NULL</code>, если нет таких переменных. Когда плагин
установлен, эти переменные выведены на экран в выводе команды
<a href="sql.htm#show-status"><code>SHOW STATUS</code></a>.</p>

<p>Член <code>status_vars</code>, если не <code>NULL</code>, указывает на
массив структур <code>st_mysql_show_var</code>, которые описывают переменные
состояния. См. <a href="#plugin-status-system-variables">раздел
26.2.4.2.2</a>.</li>

<li><code>system_vars</code>: Указатель на структуру для системных переменных
плагина или <code>NULL</code>, если нет таких переменных. Эти системные
переменные могут использоваться, чтобы помочь инициализировать
переменные в пределах плагина.</p>

<p>Член <code>system_vars</code>, если не <code>NULL</code>, указывает на
массив структур <code>st_mysql_sys_var</code>, которые описывают системные
переменные. См. <a href="#plugin-status-system-variables">
раздел 26.2.4.2.2</a>.</li>

<li><code>__reserved1</code>: Заполнитель для будущего.
Это должно быть установлено в <code>NULL</code>.</li>
<li><code>flags</code>: Флаги плагина. Отдельные биты соответствуют различным
флагам. Значение должно быть установлено в ИЛИ применимых
флагов. Доступны флаги:
<pre>
#define PLUGIN_OPT_NO_INSTALL   1UL   /* Not dynamically loadable */
#define PLUGIN_OPT_NO_UNINSTALL 2UL   /* Not dynamically unloadable */
</pre>

<code>PLUGIN_OPT_NO_INSTALL</code> указывает, что плагин не может быть
загружен во время выполнения с помощью <a href="sql.htm#install-plugin">
<code>INSTALL PLUGIN</code></a>. Это является подходящим для плагинов,
которые должны быть загружены при запуске сервера через опцию
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code>
</a>. <code>PLUGIN_OPT_NO_UNINSTALL</code> указывает, что плагин не может
быть выгружен во время выполнения с помощью
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
</p></li></ul>

<p>Сервер вызывает функции <code>init</code> и <code>deinit</code> в общем
описателе только, когда загружает и выгружает плагин.</p>
<p>Например, информация об описателе для библиотеки, которая содержит
единственный полнотекстовый плагин анализатора
<code>simple_parser</code> похожа на это:
<pre>
mysql_declare_plugin(ftexample)
{
  MYSQL_FTPARSER_PLUGIN,          /* type */
  &amp;simple_parser_descriptor,  /* descriptor */
  "simple_parser",                /* name */
  "Oracle Corporation",           /* author */
  "Simple Full-Text Parser",      /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license */
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables */
  simple_system_variables,        /* system variables */
  NULL, 0
}
mysql_declare_plugin_end;
</pre>

Для полнотекстового плагина анализатора тип должен быть
<code>MYSQL_FTPARSER_PLUGIN</code>. Это значение, которое идентифицирует
плагин, как являющийся законным для использования в предложении
<code>WITH PARSER</code> при создании индекса <code>FULLTEXT</code>.
Никакой другой тип не является законным для этого.</p>

<p><code>plugin.h</code> определяет макросы
<code>mysql_declare_plugin()</code> и
<code>mysql_declare_plugin_end</code> так:
<pre>
#ifndef MYSQL_DYNAMIC_PLUGIN
#define __MYSQL_DECLARE_PLUGIN(NAME, VERSION, PSIZE, DECLS) \
MYSQL_PLUGIN_EXPORT int VERSION= MYSQL_PLUGIN_INTERFACE_VERSION; \
MYSQL_PLUGIN_EXPORT int PSIZE= sizeof(struct st_mysql_plugin); \
MYSQL_PLUGIN_EXPORT struct st_mysql_plugin DECLS[]= {
#else
#define __MYSQL_DECLARE_PLUGIN(NAME, VERSION, PSIZE, DECLS) \
MYSQL_PLUGIN_EXPORT int _mysql_plugin_interface_version_= MYSQL_PLUGIN_INTERFACE_VERSION; \
MYSQL_PLUGIN_EXPORT int _mysql_sizeof_struct_st_plugin_= sizeof(struct st_mysql_plugin); \
MYSQL_PLUGIN_EXPORT struct st_mysql_plugin _mysql_plugin_declarations_[]= {
#endif

#define mysql_declare_plugin(NAME) \
__MYSQL_DECLARE_PLUGIN(NAME, \
 builtin_ ## NAME ## _plugin_interface_version, \
 builtin_ ## NAME ## _sizeof_struct_st_plugin, \
 builtin_ ## NAME ## _plugin)
#define mysql_declare_plugin_end ,{0,0,0,0,0,0,0,0,0,0,0,0,0}}
</pre>

<p>Эти декларации определяют символ <code>_mysql_plugin_interface_version_
</code>, только если определен символ <code>MYSQL_DYNAMIC_PLUGIN</code>.
Это означает, что <code>-DMYSQL_DYNAMIC_PLUGIN</code> должна быть обеспечена
как часть команды компиляции, чтобы создать плагин как
совместно используемую библиотеку.</p>

<p>Когда макроопределение используется как показано, оно расширяется до
следующего кода, который определяет оба из необходимых символов
(<code>_mysql_plugin_interface_version_</code> и
<code>_mysql_plugin_declarations_</code>):
<pre>
int _mysql_plugin_interface_version_= MYSQL_PLUGIN_INTERFACE_VERSION;
int _mysql_sizeof_struct_st_plugin_= sizeof(struct st_mysql_plugin);
struct st_mysql_plugin _mysql_plugin_declarations_[]= {
{
  MYSQL_FTPARSER_PLUGIN,          /* type*/
  &amp;simple_parser_descriptor,  /* descriptor  */
  "simple_parser",                /* name*/
  "Oracle Corporation",           /* author  */
  "Simple Full-Text Parser",      /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license*/
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables*/
  simple_system_variables,        /* system variables*/
  NULL, 0}, {0,0,0,0,0,0,0,0,0,0,0,0}}
};
</pre>

Предыдущий пример объявляет единственный плагин в общем описателе, но
возможно объявить много плагинов. Перечислите декларации одну за другой между
<code>mysql_declare_plugin()</code> и <code>mysql_declare_plugin_end</code>,
разделяя их запятыми.</p>

<p>Плагины сервера MySQL могут быть написаны на C или C++ (или другом языке,
который может использовать C-соглашения о вызове). Если Вы пишете C++ плагин,
одной возможностью C++, которую Вы не должны использовать, являются
непостоянные переменные, чтобы инициализировать глобальные структуры.
Члены структур такие, как <code>st_mysql_plugin</code> должны быть
инициализированы только с постоянными. Описатель <code>simple_parser</code>,
показанный ранее, допустим в C++ плагине, потому что удовлетворяет правилам:
<pre>
mysql_declare_plugin(ftexample)
{
  MYSQL_FTPARSER_PLUGIN,          /* type*/
  &amp;simple_parser_descriptor,  /* descriptor  */
  "simple_parser",                /* name*/
  "Oracle Corporation",           /* author  */
  "Simple Full-Text Parser",      /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license*/
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables*/
  simple_system_variables,        /* system variables*/
  NULL, 0
}
mysql_declare_plugin_end;
</pre>

Вот другой допустимый способ написать общий описатель. Это использует
постоянные, чтобы указать на имя, автора и описание:
<pre>
const char *simple_parser_name = "simple_parser";
const char *simple_parser_author = "Oracle Corporation";
const char *simple_parser_description = "Simple Full-Text Parser";

mysql_declare_plugin(ftexample)
{
  MYSQL_FTPARSER_PLUGIN,          /* type*/
  &amp;simple_parser_descriptor,  /* descriptor  */
  simple_parser_name,             /* name*/
  simple_parser_author,           /* author  */
  simple_parser_description,      /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license*/
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables*/
  simple_system_variables,        /* system variables*/
  NULL, 0
}
mysql_declare_plugin_end;
</pre>

Однако, следующий общий описатель недопустим. Это использует членов
структуры, чтобы указать на имя, автора и описание, но структуры не
считаются постоянными инициализаторами в C++:
<pre>
typedef struct
{
  const char *name;
  const char *author;
  const char *description;
} plugin_info;

plugin_info parser_info = {
  "simple_parser",
  "Oracle Corporation",
  "Simple Full-Text Parser"
};

mysql_declare_plugin(ftexample)
{
  MYSQL_FTPARSER_PLUGIN,          /* type*/
  &amp;simple_parser_descriptor,  /* descriptor  */
  parser_info.name,               /* name*/
  parser_info.author,             /* author  */
  parser_info.description,        /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license*/
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables*/
  simple_system_variables,        /* system variables*/
  NULL, 0
}
mysql_declare_plugin_end;
</pre>

<h5><a name="plugin-status-system-variables"></a>26.2.4.2.2.
Статусы и системные переменные серверных плагинов</h5>
<p>Интерфейс плагина сервера позволяет плагинам выставить состояние и
системные переменные, используя члены <code>status_vars</code> и
<code>system_vars</code> общего описателя.</p>

<p>Член <code>status_vars</code> общего дескриптора, если не 0, указывает
на массив структур <code>st_mysql_show_var</code>, каждая из которых
описывает одну переменную состояния, сопровождаемую структурой со всеми
членами установленными в 0. У структуры <code>st_mysql_show_var</code>
есть это определение:
<pre>
struct st_mysql_show_var {
  const char *name;
  char *value;
  enum enum_mysql_show_type type;
};
</pre>

Когда плагин установлен, имя плагина и переменная <code>name</code>
присоединяются с подчеркиванием, чтобы сформировать имя, выведенное на экран
<a href="sql.htm#show-status"><code>SHOW STATUS</code></a>.</p>

<p>Следующая таблица показывает допустимые переменные состояния
<code>type</code> и какова соответствующая переменная должна быть.</p>

<a name="idm139965274318128"></a><p><b>Таблица 26.1. Типы статусных
переменных серверных плагинов</b></p>
<table border="1">
<thead><tr><th scope="col">Тип переменной</th><th scope="col">Значение</th>
</tr></thead>
<tbody><tr><td scope="row"><code>SHOW_BOOL</code></td><td>
Указатель на логическую переменную</td></tr>
<tr><td scope="row"><code>SHOW_INT</code></td><td>Указатель на integer</td>
</tr>
<tr><td scope="row"><code>SHOW_LONG</code></td><td>Указатель на long integer
</td></tr>
<tr><td scope="row"><code>SHOW_LONGLONG</code></td><td>Указатель на longlong
integer</td></tr>
<tr><td scope="row"><code>SHOW_CHAR</code></td><td>Строка</td></tr>
<tr><td scope="row"><code>SHOW_CHAR_PTR</code></td><td>Указатель на string
</td></tr>
<tr><td scope="row"><code>SHOW_ARRAY</code></td><td>Указатель на другой
массив <code>st_mysql_show_var</code></td></tr>
<tr><td scope="row"><code>SHOW_FUNC</code></td><td>Указатель на функцию</td>
</tr>
<tr><td scope="row"><code>SHOW_DOUBLE</code></td><td>Указатель на double</td>
</tr></tbody></table>

<p>Для типа <code>SHOW_FUNC</code> функция вызвана и заполняет параметр
<code>out</code>, который тогда предоставляет информацию о переменной,
которая будет выведена на экран. У функции есть эта сигнатура:
<pre>
#define SHOW_VAR_FUNC_BUFF_SIZE 1024
typedef int (*mysql_show_var_func) (void *thd, struct st_mysql_show_var *out,
                                    char *buf);
</pre>

Член <code>system_vars</code>, если не 0, указывает на массив из структур
<code>st_mysql_sys_var</code>, каждая из которых описывает одну системную
переменную (которая также может быть установлена из командной строки или
конфигурационного файла), сопровождаемый структурой со всем членами,
установленными в 0. Структура <code>st_mysql_sys_var</code>
определена следующим образом:
<pre>
struct st_mysql_sys_var {
  int flags;
  const char *name, *comment;
  int (*check) (THD*, struct st_mysql_sys_var *, void*, st_mysql_value*);
  void (*update) (THD*, struct st_mysql_sys_var *, void*, const void*);
};
</pre>
Дополнительные поля прилагают как требуется, в зависимости от флагов.</p>

<p>Для удобства много макроопределений определены, которые делают создание
новые системных переменных в пределах плагина намного более простым.</p>
<p>В макросах следующие поля доступны:</p>
<ul><li><p><code>name</code>: Идентификатор для системной переменной.</li>
<li><code>varname</code>: Идентификатор для статической переменной. Где
недоступен, это то же самое, что и поле <code>name</code>.</li>
<li><code>opt</code>: Дополнительное использование флагов для системной
переменной. Следующая таблица показывает допустимые флаги.</p>

<a name="idm139965274284656"></a><p><b>Таблица 26.2. Флаги системных
переменных серверных плагинов</b></p>
<table border="1">
<thead><tr><th scope="col">Значение флага</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><code>PLUGIN_VAR_READONLY</code></td>
<td>Системная переменная только для чтения</td></tr>
<tr><td scope="row"><code>PLUGIN_VAR_NOSYSVAR</code></td>
<td>Системная переменная во время выполнения не видна пользователю</td></tr>
<tr><td scope="row"><code>PLUGIN_VAR_NOCMDOPT</code></td>
<td>Системная переменная не конфигурируема из командной строки</td></tr>
<tr><td scope="row"><code>PLUGIN_VAR_NOCMDARG</code></td>
<td>Никакой параметр не требуется в командной строке (как правило
используется для логических переменных)</td></tr>
<tr><td scope="row"><code>PLUGIN_VAR_RQCMDARG</code></td>
<td>Параметр требуется в командной строке (это значение по умолчанию)
</td></tr>
<tr><td scope="row"><code> PLUGIN_VAR_OPCMDARG</code></td>
<td>Параметр является дополнительным в командной строке</td></tr>
<tr><td scope="row"><code>PLUGIN_VAR_MEMALLOC</code></td>
<td>Используется для строковых переменных: указывает, что память должна быть
выделена для хранения строки</td></tr></tbody></table></li>

<li><p><code>comment</code>: Описательный комментарий, который будет выведен
на экран в серверном сообщении помощи. <code>NULL</code>, если эта переменная
должна быть скрыта.</li>

<li><code>check</code>: Функция проверки, <code>NULL</code> для
значения по умолчанию.</li>
<li><code>update</code>: Функция обновления, <code>NULL</code> для
значения по умолчанию.</li>

<li><code>default</code>: Значение переменной по умолчанию.</li>
<li><code>minimum</code>: Минимальное значение переменной.</li>
<li><code>maximum</code>: Максимальное значение переменной.</li>

<li><code>blocksize</code>: Размер блока. Когда значение установлено, оно
округлено к самому близкому числу, кратному <code>blocksize</code>.
</p></li></ul>

<p>К системной переменной можно получить доступ при использовании статической
переменной непосредственно или при использовании макроса
<code>SYSVAR()</code>. Макрос <code>SYSVAR()</code> обеспечен для
законченности. Обычно это должно использоваться только, когда код не может
непосредственно получить доступ к основной переменной.</p>

<p>Например:
<pre>
static int my_foo;
static MYSQL_SYSVAR_INT(foo_var, my_foo,
                        PLUGIN_VAR_RQCMDARG, "foo comment",
                        NULL, NULL, 0, 0, INT_MAX, 0);
   ...
   SYSVAR(foo_var)= value;
   value= SYSVAR(foo_var);
   my_foo= value;
   value= my_foo;
</pre>

К переменным сеанса можно получить доступ только через
макрос <code>THDVAR()</code>. Например:
<pre>
static MYSQL_THDVAR_BOOL(some_flag, PLUGIN_VAR_NOCMDARG, "flag comment",
                         NULL, NULL, FALSE);
   ...
   if (THDVAR(thd, some_flag)) {
      do_something();
      THDVAR(thd, some_flag)= FALSE;
   }
</pre>

Все глобальные и сеансовые системные переменные должны быть опубликованы
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
перед использованием. Это сделано, создавая <code>NULL</code>-завершенный
массив переменных и связи с ним в общем интерфейсе. Например:
<pre>
static struct st_mysql_sys_var *my_plugin_vars[] = {
  MYSQL_SYSVAR(foo_var), MYSQL_SYSVAR(some_flag), NULL
};

mysql_declare_plugin(fooplug)
{
  MYSQL_..._PLUGIN, &amp;plugin_data, "fooplug", "foo author",
  "This does foo!", PLUGIN_LICENSE_GPL, foo_init, foo_fini, 0x0001,
  NULL, my_plugin_vars, NULL, 0
}
mysql_declare_plugin_end;</pre>

Следующее макроопределение позволяет Вам объявить различные
типы системных переменных:</p>
<ul><li><p>Булевы системные переменные типа <code>my_bool</code>,
которые занимают 1 байт (0 = FALSE, 1 = TRUE).
<pre>
MYSQL_THDVAR_BOOL(name, opt, comment, check, update, default)
MYSQL_SYSVAR_BOOL(name, varname, opt, comment, check, update, default)
</pre></li>

<li>Строковые системные переменные типа <code>char*</code>,
которые являются указателем на законченную нулем строку.
<pre>
MYSQL_THDVAR_STR(name, opt, comment, check, update, default)
MYSQL_SYSVAR_STR(name, varname, opt, comment, check, update, default)
</pre></li>

<li>Системные переменные Integer, для которых есть несколько вариантов.</p>
<ul><li><p>Системные переменные <code>int</code>, как правило, является 4
байтами (словом со знаком).
<pre>
MYSQL_THDVAR_INT(name, opt, comment, check, update, default, min, max, blk)
MYSQL_SYSVAR_INT(name, varname, opt, comment, check, update, default,
                 minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>unsigned int</code>, как правило, является 4
байтами (словом без знака).
<pre>
MYSQL_THDVAR_UINT(name, opt, comment, check, update, default, min, max, blk)
MYSQL_SYSVAR_UINT(name, varname, opt, comment, check, update, default,
                  minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>long</code>, как правило, является 4 или 8
байтами (словом со знаком).
<pre>
MYSQL_THDVAR_LONG(name, opt, comment, check, update, default, min, max, blk)
MYSQL_SYSVAR_LONG(name, varname, opt, comment, check, update, default,
                  minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>unsigned long</code>, как правило, является 4
или 8 байтами (словом без знака).
<pre>
MYSQL_THDVAR_ULONG(name, opt, comment, check, update, default, min, max, blk)
MYSQL_SYSVAR_ULONG(name, varname, opt, comment, check, update, default,
                   minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>long long</code>, как правило, является 8
байтами (словом со знаком).
<pre>
MYSQL_THDVAR_LONGLONG(name, opt, comment, check, update,
                      default, minimum, maximum, blocksize)
MYSQL_SYSVAR_LONGLONG(name, varname, opt, comment, check, update,
                      default, minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>unsigned long long</code>, как правило,
является 8 байтами (словом без знака).
<pre>
MYSQL_THDVAR_ULONGLONG(name, opt, comment, check, update,
                       default, minimum, maximum, blocksize)
MYSQL_SYSVAR_ULONGLONG(name, varname, opt, comment, check, update,
                       default, minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>double</code>, как правило, является 8
байтами (словом со знаком).
<pre>
MYSQL_THDVAR_DOUBLE(name, opt, comment, check, update,
                    default, minimum, maximum, blocksize)
MYSQL_SYSVAR_DOUBLE(name, varname, opt, comment, check, update,
                    default, minimum, maximum, blocksize)
</pre></li>

<li>Системные переменные <code>unsigned long</code>, как правило, является
4 или 8 байтами (словом без знака). Диапазон возможных значений ординал числа
элементов в <code>typelib</code>, начиная с 0.
<pre>
MYSQL_THDVAR_ENUM(name, opt, comment, check, update, default, typelib)
MYSQL_SYSVAR_ENUM(name, varname, opt, comment, check, update,
                  default, typelib)
</pre></li>

<li><p>Системные переменные <code>unsigned long long</code>, как правило,
является 8 байтами (словом без знака).
Каждый бит представляет элемент в <code>typelib</code>.
<pre>
MYSQL_THDVAR_SET(name, opt, comment, check, update, default, typelib)
MYSQL_SYSVAR_SET(name, varname, opt, comment, check, update,
                 default, typelib)
</pre></li></ul></li></ul>

<p>Внутренне, все изменчивые системные переменные сохранены в структуре
<code>HASH</code>. Отображение текста справки командной строки сервера
обработано, собирая <code>DYNAMIC_ARRAY</code> из всех переменных,
относящихся к параметрам командной строки м сортируя их.</p>

<p>Когда параметр командной строки был обработан, он будет удален из
<code>argv</code> функцией <code>handle_option()</code>
(<code>my_getopt.c</code>).</p>

<p>Сервер обрабатывает параметры командной строки во время процесса
установки плагина, немедленно после того, как плагин был успешно загружен, но
прежде, чем функция инициализации была вызвана.</p>

<p>Плагины, загруженные во время выполнения, не извлекают ничего ни из каких
параметров конфигурации и должны иметь применимые значения по умолчанию. Как
только они установлены, они загружены в
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
и параметры конфигурации могут быть установлены в командной строке или в
пределах <code>my.cnf</code>.</p>
<p>Плагины должны рассмотреть параметр <code>thd</code>, чтобы быть
только для чтения.</p>

<h5><a name="client-plugin-descriptors"></a>26.2.4.2.3.
Описатели плагина клиента</h5>
<p>У каждого плагина клиента должен быть описатель, который предоставляет
информацию API клиентского плагина. Дескрипторная структура начинается с
фиксированной группы членов, характерных для всех плагинов клиента,
сопровождаемых любыми членами, определенными для типа плагина.</p>

<p>Структура <code>st_mysql_client_plugin</code> в файле
<code>client_plugin.h</code> определяет описатель <span>generic</span>,
который содержит общие члены:
<pre>
struct st_mysql_client_plugin
{
  int type;
  unsigned int interface_version;
  const char *name;
  const char *author;
  const char *desc;
  unsigned int version[3];
  const char *license;
  void *mysql_api;
  int (*init)(char *, size_t, int, va_list);
  int (*deinit)();
  int (*options)(const char *option, const void *);
};
</pre>

Общие члены структуры <code>st_mysql_client_plugin</code> используются
следующим образом. Члены <code>char *</code> должны быть определены как
законченные нулем строки.</p>

<ul><li><p><code>type</code>: Тип плагина. Это должно быть одним из значений
типа из <code>client_plugin.h</code>, например,
<code>MYSQL_CLIENT_AUTHENTICATION_PLUGIN</code>.</li>

<li><code>interface_version</code>: Версия интерфейса плагина. Например,
<code>MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION</code>
для плагина аутентификации.</li>

<li><code>name</code>: Строка, которая дает имя. Это то имя, которым Вы
обращаетесь к плагину, когда Вы вызываете
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a> с
опцией <code>MYSQL_DEFAULT_AUTH</code> или определяете опцию
<code>--default-auth</code> в клиентской программе MySQL.</li>

<li><code>author</code>: Строка с именем автора. Это может быть тем,
что Вы любите.</li>
<li><code>desc</code>: Строка, которая обеспечивает общее описание плагина.
Это может быть тем, что Вы любите.</li>

<li><code>version</code>: Версия как массив трех целых чисел, указывающих на
старший, средний и младший номера версии. Например, <code>{1,2,3}</code>
указывает на версию 1.2.3.</li>

<li><code>license</code>: Строка, которая определяет тип лицензии.</li>
<li><code>mysql_api</code>: Для внутреннего пользования. Определите это как
<code>NULL</code> в описателе плагина.</li>

<li><code>init</code>: Функция инициализации или <code>NULL</code>, если нет
такой функции. Библиотека клиента выполняет эту функцию, когда загружает
плагин. Функция возвращает ноль для успеха и отличное от нуля
значение для отказа.</p>

<p>Функция <code>init</code> использует первые два параметра, чтобы
возвратить сообщение об ошибке, если ошибка происходит. Первый параметр
указатель на буфер <code>char</code>, второй параметр указывает на буферную
длину. Любое сообщение, возвращенное <code>init</code>, должна быть закончена
нулем, таким образом, максимальная длина сообщения это длина буфера минус
один. Следующие параметры передаются в
<a href="connect.htm#mysql-load-plugin"><code>mysql_load_plugin()</code></a>.
Первое указывает, сколько там параметров (0, если ни одного), сопровождается
любыми остающимися параметрами.</li>

<li><code>deinit</code>: Функция завершения или <code>NULL</code>, если нет
такой функции. Библиотека клиента выполняет эту функцию, когда выгружает
плагин. Функция не берет параметров. Это возвращает ноль для успеха и
отличное от нуля значение для отказа.</li>

<li><code>options</code>: Функция для того, чтобы обработать опции плагина
или <code>NULL</code>, если нет такой функции. Функция берет два параметра,
представляющие имя опции и указатель на ее значение. Функция возвращает ноль
для успеха и отличное от нуля значение для отказа.</p></li></ul>

<p>Для данного типа плагина клиента общие члены дескриптора могут
сопровождаться дополнительными членами, необходимыми, чтобы осуществить
плагины того типа. Например, структура
<code>st_mysql_client_plugin_AUTHENTICATION</code> для плагинов
аутентификации имеет функцию в конце, который библиотека клиента вызывает,
чтобы выполнить аутентификацию.</p>

<p>Чтобы объявить плагин, используйте макросы
<code>mysql_declare_client_plugin()</code> и
<code>mysql_end_client_plugin</code>:
<pre>
mysql_declare_client_plugin(<em><code>plugin_type</code></em>)
   ... <em><code>Общие члены для всех клиентских плагинов</code></em> ...
   ... <em><code>Специфические для типа плагина члены</code></em> ...
mysql_end_client_plugin;
</pre>

Не определяйте члены <code>type</code> или <code>interface_version</code>
явно. Макрос <code>mysql_declare_client_plugin()</code> использует параметр
<em><code>plugin_type</code></em>, чтобы произвести их значения
автоматически. Например, объявите плагин клиента аутентификации так:
<pre>
mysql_declare_client_plugin(AUTHENTICATION)
  "my_auth_plugin", "Author Name", "My Client Authentication Plugin",
  {1,0,0}, "GPL", NULL, my_auth_init, my_auth_deinit, my_auth_options,
  my_auth_main
mysql_end_client_plugin;
</pre>

Эта декларация использует параметр <code>AUTHENTICATION</code> для задания
членам <code>type</code> и <code>interface_version</code> значений
<code>MYSQL_CLIENT_AUTHENTICATION_PLUGIN</code> и
<code>MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION</code>.</p>

<p>В зависимости от типа плагина, у описателя могут быть другие члены
после общих. Например, для плагина аутентификации, есть функция
(<code>my_auth_main()</code> в описателе, показанном выше), которая
обрабатывает коммуникацию с сервером. См.
<a href="#writing-authentication-plugins">
раздел 26.2.4.9</a>.</p>

<p>Обычно программа клиента, которая поддерживает использование плагинов
аутентификации, заставляет плагин быть загруженным, вызывая
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>, чтобы
установить опции <code>MYSQL_DEFAULT_AUTH</code> и
<code>MYSQL_PLUGIN_DIR</code>:
<pre>
char *plugin_dir = "<em><code>path_to_plugin_dir</code></em>";
char *default_auth = "<em><code>plugin_name</code></em>";
/* ... process command-line options ... */
mysql_options(&amp;mysql, MYSQL_PLUGIN_DIR, plugin_dir);
mysql_options(&amp;mysql, MYSQL_DEFAULT_AUTH, default_auth);
</pre>

Как правило, программа также примет опции <code>--plugin-dir</code> и
<code>--default-auth</code>, которые позволяют пользователям переопределить
значения по умолчанию.</p>

<p>Если программа клиента требует управления низшего уровня, библиотека
клиента содержит функции, которые берут аргумент
<code>st_mysql_client_plugin</code>. См.
<a href="connect.htm#c-api-plugin-functions">раздел 25.8.14</a>.</p>

<h4><a name="compiling-plugin-libraries"></a>26.2.4.3.
Компилирование и установка библиотек</h4>
<p>После того, как Ваш плагин написан, Вы должны собрать и установить его.
Процедура для того, чтобы собрать совместно используемые объекты изменяется
от системы к системе. Если Вы создаете свою библиотеку, используя
<code>CMake</code>, это должно быть в состоянии произвести правильные команды
компиляции для Вашей системы. Если библиотеку называют
<code>somepluglib</code>, Вы должны получить совместно используемый файл
библиотеки, у которого есть имя что-то вроде <code>somepluglib.so</code>.
Суффикс имени файла <code>.so</code> в Вашей системе может быть другим.</p>

<p>Чтобы использовать <code>CMake</code>, Вы должны будете настроить
конфигурационные файлы, чтобы позволить плагину быть собранным и
установленным. Используйте примеры в подкаталоге
<code>plugin</code> дистрибутива исходных текстов MySQL как руководство.</p>

<p>Создать <code>CMakeLists.txt</code>, который должен
выглядеть примерно так:
<pre>
MYSQL_ADD_PLUGIN(somepluglib somepluglib.c
  MODULE_ONLY MODULE_OUTPUT_NAME "somepluglib")
</pre>

Когда <code>CMake</code> производит <code>Makefile</code>, это должно
позаботиться о прохождении к компилятору флага
<code>-DMYSQL_DYNAMIC_PLUGIN</code>, а к компоновщику флага
<code>-lmysqlservices</code>, который необходимы, чтобы скомпоновать с любыми
функциями интерфейса службы плагинов. См.
<a href="#plugin-services">раздел 26.3</a>.</p>

<p>Запустите <span><strong>CMake</strong></span>, затем выполните
<span><strong>make</strong></span>:
<pre>
shell&gt; cmake .
shell&gt; make
</pre>

Если Вы должны определить параметры конфигурации для
<span><strong>CMake</strong></span>, см.
<a href="install.htm#source-configuration-options">раздел 2.8.4</a>.
Например, Вы могли бы хотеть определить
<a href="install.htm#option_cmake_cmake_install_prefix"><code>
CMAKE_INSTALL_PREFIX</code></a>, чтобы указать на базовый каталог MySQL, в
соответствии с которым должен быть установлен плагин. Вы можете увидеть,
какое значение использовать для этой опции с помощью
запроса <a href="sql.htm#show-variables"><code>SHOW VARIABLES</code></a>:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'basedir';
+---------------+------------------+
| Variable_name | Value            |
+---------------+------------------+
| base          | /usr/local/mysql |
+---------------+------------------+
</pre>

Местоположение каталога, где Вы должны установить библиотеку, дано в
системной переменной <a href="server.htm#sysvar_plugin_dir"><code>
plugin_dir</code></a>. Например:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'plugin_dir';
+---------------+-----------------------------------+
| Variable_name | Value                             |
+---------------+-----------------------------------+
| plugin_dir    | /usr/local/mysql/lib/mysql/plugin |
+---------------+-----------------------------------+
</pre>

Чтобы установить библиотеку, примените <span><strong>make</strong></span>:
<pre>
shell&gt; make install
</pre>

Проверьте, что <span><strong>make install</strong></span> установил
библиотеку в надлежащем каталоге. После установки удостоверьтесь, что
права доступа библиотеки разрешают ей быть выполненной сервером.</p>

<h4><a name="writing-full-text-plugins"></a>26.2.4.4.
Написание полнотекстовых плагинов анализатора</h4>
<p>MySQL поддерживает полнотекстовые плагины анализатора на стороне сервера
для <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a> и
<a href="innodb.htm"><code>InnoDB</code></a>.</p>

<p>Полнотекстовый плагин анализатора может использоваться, чтобы заменить или
изменить встроенный полнотекстовый анализатор. Этот раздел описывает, как
написать полнотекстовый плагин <code>simple_parser</code>. Этот плагин
выполняет парсинг, основанный на более простых правилах, чем используемый
MySQL встроенный полнотекстовый анализатор: слова считаются непустыми
цепочками символов, разделенных пробелами.</p>

<p>Инструкции используют исходный код в каталоге <code>plugin/fulltext</code>
исходных текстов MySQL, так что перейдите в этот каталог. Следующая процедура
описывает, как библиотека создается:</p>

<ol type="1"><li><p>Чтобы написать полнотекстовый плагин анализатора,
включите следующий заголовочный файл в исходный файл плагина. Другие общие
заголовочные файлы также могут быть необходимы, в зависимости от
способностей и требований плагина.
<pre>
#include &lt;mysql/plugin.h&gt;
</pre>

<code>plugin.h</code> определяет тип плагина сервера
<code>MYSQL_FTPARSER_PLUGIN</code> и структуры данных, которые
должны объявить плагин.</li>

<li>Настройте описатель библиотеки для файла библиотеки.</p>
<p>Этот описатель содержит общий описатель для плагина сервера. Для
полнотекстового плагина анализатора тип должен быть
<code>MYSQL_FTPARSER_PLUGIN</code>. Это значение, которое идентифицирует
плагин, как легальный для использования в предложении
<code>WITH PARSER</code> при создании индекса <code>FULLTEXT</code>.
Никакой другой тип плагина не является законным для этого.</p>

<p>Например, описатель для библиотеки, которая содержит единственный
полнотекстовый плагин анализатора <code>simple_parser</code>,
похож на это:
<pre>
mysql_declare_plugin(ftexample)
{
  MYSQL_FTPARSER_PLUGIN,          /* type*/
  &amp;simple_parser_descriptor,  /* descriptor  */
  "simple_parser",                /* name*/
  "Oracle Corporation",           /* author  */
  "Simple Full-Text Parser",      /* description */
  PLUGIN_LICENSE_GPL,             /* plugin license*/
  simple_parser_plugin_init,      /* init function (when loaded) */
  simple_parser_plugin_deinit,    /* deinit function (when unloaded) */
  0x0001,                         /* version */
  simple_status,                  /* status variables*/
  simple_system_variables,        /* system variables*/
  NULL, 0
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> (<code>simple_parser</code>) указывает на имя, чтобы
использовать для ссылок на плагин в запросах
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это имя также, выведено на экран <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a> или
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a>.</p>

<li>Настройте определенный для типа описатель.</p>
<p>Каждый общий описатель библиотеки указывает на определенный для типа
описатель. Для полнотекстового плагина анализатора определенный для типа
описатель является экземпляром структуры <code>st_mysql_ftparser</code>
в файле <code>plugin.h</code>:
<pre>
struct st_mysql_ftparser
{
  int interface_version;
  int (*parse)(MYSQL_FTPARSER_PARAM *param);
  int (*init)(MYSQL_FTPARSER_PARAM *param);
  int (*deinit)(MYSQL_FTPARSER_PARAM *param);
};
</pre>
Как показано в определении структуры, описатель имеет номер версии интерфейса
и содержит указатели на три функции.</p>

<p>Номер версии интерфейса определен, используя символ, который находится в
форме: <code>MYSQL_<em><code>xxx</code></em>_INTERFACE_VERSION</code>.
Для полнотекстовых плагинов анализатора символ
<code>MYSQL_FTPARSER_INTERFACE_VERSION</code>. В исходном коде Вы сочтете
фактический номер версии интерфейса для полнотекстового плагина анализатора
определенным в <code>include/mysql/plugin_ftparser.h</code>. Текущий номер
версии интерфейса <code>0x0101</code>.</p>

<p>Члены <code>init</code> и <code>deinit</code> должны указать на функцию
или быть установлены в 0, если функция не необходима. Член <code>parse</code>
должен указать на функцию, которая выполняет парсинг.</p>

<p>В декларации <code>simple_parser</code> этот описатель обозначен как
<code>&amp;simple_parser_descriptor</code>. Описатель определяет номер версии
для полнотекстового интерфейса (как дано
<code>MYSQL_FTPARSER_INTERFACE_VERSION</code>)
и функции плагина, инициализация, парсинг и завершения:
<pre>
static struct st_mysql_ftparser simple_parser_descriptor =
{
  MYSQL_FTPARSER_INTERFACE_VERSION, /* interface version*/
  simple_parser_parse,  /* parsing function */
  simple_parser_init,   /* parser init function   */
  simple_parser_deinit  /* parser deinit function */
};
</pre>

Полнотекстовый плагин анализатора используется в двух различных контекстах,
индексируя и ища. В обоих контекстах сервер вызывает функции инициализации и
завершения в начале и в конце обработки каждого запроса SQL, которое вызывает
плагин. Однако, во время обработки запроса сервер вызывает основную функцию
парсинга зависящим от контекста способом:</p>

<ul><li><p>Для того, чтобы индексировать, сервер вызывает анализатор для
каждого значения столбца, которое будет индексировано.</li>
<li>Для того, чтобы искать, сервер вызывает анализатор, чтобы разобрать
строку поиска. Анализатор можно было бы также вызвать для строк, обработанных
запросом. В режиме естественного языка нет никакой потребности в сервере,
чтобы вызвать анализатор. Для булевых поисков фразы режима или поисков
естественного языка с расширением запроса, анализатор используется, чтобы
разобрать значения столбцов для информации, которая не находится в индексе.
Кроме того, если режим булева поиска сделан для столбца, который не имеет
индекса <code>FULLTEXT</code>, встроенный анализатор вызовут. Плагины связаны
с определенным индексом. Если нет индекса, никакой плагин не используется.
</p></li></ul>

<p>Декларация в общем сменном описателе имеет члены
<code>init</code> и <code>deinit</code>, которые указывают на функции
инициализации и завершения, так же определен специфичный для типа описатель.
Однако, эти пары функций имеют различные цели и вызваны по различным причинам:
</p>

<ul><li><p>Для декларации плагина в общем описателе вызваны функции
инициализации и завершения, когда плагин загружен и выгружен.</li>
<li>Для определенного для типа описателя вызваны функции инициализации и
завершения, когда плагин при запросе SQL, для которого используется плагин.
</p></li></ul>

<p>Каждая функция интерфейса, названная в описателе, должна возвратить ноль
для успеха или отличное от нуля значение для отказа, каждая из этих функций
получает параметр, который указывает на структуру
<code>MYSQL_FTPARSER_PARAM</code>, содержащую контекст парсинга. У структуры
есть это определение:
<pre>
typedef struct st_mysql_ftparser_param
{
  int (*mysql_parse) (struct st_mysql_ftparser_param *,
                      char *doc, int doc_len);
  int (*mysql_add_word) (struct st_mysql_ftparser_param *,
                         char *word, int word_len,
                         MYSQL_FTPARSER_BOOLEAN_INFO *boolean_info);
                         void *ftparser_state;
                         void *mysql_ftparam;
                         struct charset_info_st *cs;
                         char *doc;
                         int length;
                         int flags;
                         enum enum_ftparser_mode mode;
} MYSQL_FTPARSER_PARAM;
</pre>

Члены структуры используются следующим образом:</p>
<ul><li><p><code>mysql_parse</code>: Указатель на функцию обратного вызова,
которая вызывает встроенный анализатор сервера. Используйте этот вызов, когда
плагин действует как фронтэнд к встроенному анализатору. Таким образом, когда
функция парсинга плагина вызвана, она должна обработать ввод, чтобы извлечь
текст и передать текст в <code>mysql_parse</code>.</p>

<p>Первый параметр для этой функции обратного вызова должен быть
<code>param</code>:
<pre>
param-&gt;mysql_parse(param, ...);
</pre>

Плагин фронтэнда может извлечь текст и передать все это сразу встроенному
анализатору, или извлечь и передать текст встроенному анализатору частями.
Однако, в этом случае, встроенный анализатор обрабатывает части текста, как
если бы есть неявные разрывы слова между ними.</li>

<li><code>mysql_add_word</code>: Указатель на функцию обратного вызова,
которая добавляет слово к полнотекстовому индексу или к списку критериев
поиска. Используйте этот вызов, когда плагин анализатора заменяет встроенный
анализатор. Таким образом, когда функция парсинга плагина вызвана, она должна
разобрать ввод на слова и вызвать для каждого слова
<code>mysql_add_word</code>.</p>

<p>Первый параметр для этой функции обратного вызова должен быть
<code>param</code>:
<pre>
param-&gt;mysql_add_word(param, ...);
</pre></li>

<li><code>ftparser_state</code>: Это общий указатель. Плагин может установить
это, чтобы указать на информацию, которая будет использоваться внутренне в
его собственных целях.</li>

<li><code>mysql_ftparam</code>: Это установлено сервером. Это передают как
первый параметр <code>mysql_parse</code> или <code>mysql_add_word</code>.
</li>
<li><code>cs</code>: Указатель на информацию о наборе символов текста или 0,
если никакая информация не доступна.</li>

<li><code>doc</code>: Указатель на текст, который будет разобран.</li>
<li><code>length</code>: Длина текста, который будет разобран, в байтах.</li>
<li><code>flags</code>: Флаги анализатора. Это 0, если нет никаких
специальных флагов. Единственный флаг отличный от нуля
<code>MYSQL_FTFLAGS_NEED_COPY</code>, означает что
<code>mysql_add_word()</code> должна сохранить копию слова (то есть, она не
может использовать указатель на слово, потому что слово находится в буфере,
который будет перезаписан.</p>

<p>Этот флаг мог бы быть установлен или сброшен MySQL прежде, чем вызвать
плагин анализатора, плагином анализатора непосредственно или
функцией <code>mysql_parse()</code>.</li>

<li><code>mode</code>: Режим парсинга. Это значение будет одной
из следующих констант:</p>
<ul><li><p><code>MYSQL_FTPARSER_SIMPLE_MODE</code>: Разбор в быстром и
простом режиме, который используется для того, чтобы индексировать и для
запросов естественного языка. Анализатор должен передать к серверу только те
слова, которые должны быть индексированы. Если анализатор использует пределы
длины или список стоп-слов, чтобы определить, какие слова проигнорировать, он
не должен передать такие слова серверу.</li>

<li><code>MYSQL_FTPARSER_WITH_STOPWORDS</code>: Разбор в режиме стоп-слов.
Это используется в булевых поисках соответствия фразы. Анализатор должен
передать все слова серверу, даже стоп-слова или слова, которые вне любых
нормальных пределов длины.</li>

<li><code>MYSQL_FTPARSER_FULL_BOOLEAN_INFO</code>: Разбор в булевом режиме.
Это используется для того, чтобы разобрать булевы строки запроса. Анализатор
должен признать не только слова, но также и операторы булева режима и
передать их серверу как маркеры, используя <code>mysql_add_word</code>.
Чтобы сказать сервер, какой маркер передается, плагин должен заполнить
структуру <code>MYSQL_FTPARSER_BOOLEAN_INFO</code> и передать
указатель на нее.</p></li></ul></li></ul>

<p>Для <code>MyISAM</code> список стоп-слов,
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>
и <a href="server.htm#sysvar_ft_max_word_len"><code>ft_max_word_len</code>
</a> проверены в токенизаторе. Для <code>InnoDB</code> список стоп-слов,
и эквивалентные настройки переменной длины слова
(<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a> и
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a>) проверены за пределами токенизатора.
В результате <code>InnoDB</code>-анализаторы не должны проверять список
стоп-слов, <a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a> или
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a>. Вместо этого рекомендуется, чтобы все
слова были возвращены <code>InnoDB</code>. Однако, если Вы хотите проверить
стоп-слова в пределах своего анализатора, надо использовать
<code>MYSQL_FTPARSER_SIMPLE_MODE</code> для полнотекстового поиска,
индексироваиня и поиска естественного языка. Для режимов
<code>MYSQL_FTPARSER_WITH_STOPWORDS</code> и
<code>MYSQL_FTPARSER_FULL_BOOLEAN_INFO</code> рекомендуется, чтобы все слова
были возвращены <code>InnoDB</code>, включая стоп-слова,
в случае поиска фразы.</p>

<p>Если анализатор вызывают в булевом режиме, значение
<code>param-&gt;mode</code> будет <code>MYSQL_FTPARSER_FULL_BOOLEAN_INFO
</code>. Структура <code>MYSQL_FTPARSER_BOOLEAN_INFO</code>, которую парсер
использует для передачи информации о маркере серверу похожа на это:
<pre>
typedef struct st_mysql_ftparser_boolean_info
{
  enum enum_ft_token_type type;
  int yesno;
  int weight_adjust;
  char wasign;
  char trunc;
  int position;
  /* These are parser state and must be removed. */
  char prev;
  char *quot;
} MYSQL_FTPARSER_BOOLEAN_INFO;
</pre>
Анализатор должен заполнить члены структуры следующим образом:</p>

<ul><li><p><code>type</code>: Маркерный тип. Следующая таблица
показывает допустимые типы.</p>
<a name="idm139965274000096"></a><p><b>Таблица 26.3.
Полнотекстовые маркерные типы анализатора</b></p>

<table border="1">
<thead><tr><th scope="col">Значение маркера</th><th scope="col">Смысл</th>
</tr></thead>
<tbody><tr><td scope="row"><code>FT_TOKEN_EOF</code></td><td>Конец данных
</td></tr>
<tr><td scope="row"><code>FT_TOKEN_WORD</code></td><td>Регулярное слово</td>
</tr>
<tr><td scope="row"><code>FT_TOKEN_LEFT_PAREN</code></td><td>
Начало группы или подвыражения</td></tr>
<tr><td scope="row"><code>FT_TOKEN_RIGHT_PAREN</code></td><td>
Конец группы или подвыражения</td></tr>
<tr><td scope="row"><code>FT_TOKEN_STOPWORD</code></td><td>Стоп-слово</td>
</tr></tbody></table></li>

<li><p><code>yesno</code>: Должно ли слово присутствовать для соответствия.
0 значит, что слово является дополнительным, но увеличивает уместность
соответствия, если присутствует. Значения, больше 0 значат, что слово должно
присутствовать. Значения, меньше 0 указывают, что слово
не должно присутствовать.</li>

<li><code>weight_adjust</code>: Фактор надбавки, который определяет сколько
стоит слово. Это может использоваться, чтобы увеличить или уменьшить важность
слова в вычислениях уместности. Значение 0 не указывает ни на какую
корректировку веса. Значения, больше чем или меньше чем ноль, означают
более высокий или низкий вес, соответственно. Примеры в
<a href="funct.htm#fulltext-boolean">разделе 13.9.2</a>, операторы
<code>&lt;</code> и <code>&gt;</code> иллюстрируют, как надбавка работает.
</li>

<li><code>wasign</code>: Знак фактора надбавки. Отрицательная величина
действует как оператор <code>~</code> булева поиска, который заставляет вклад
слова в уместность быть отрицательным.</li>

<li><code>trunc</code>: Должно ли соответствие быть сделано, как будто булев
режим <code>*</code> задан оператору усечения.</li>
<li><code>position</code>: Стратовая позиция слова в документе, в байтах.
Используется <code>InnoDB</code> full-text search (FTS). Для существующих
плагинов, которые вызывают в булевом режиме, поддержка должна быть добавлена
для члена position.</p></li></ul>

<p>Плагины не должны использовать члены <code>prev</code> и
<code>quot</code> структуры <code>MYSQL_FTPARSER_BOOLEAN_INFO</code>.</p>
<p>Структура анализатора не поддерживает:</p>
<ul><li><p>Булев оператор <code>@distance</code>.</li>

<li>Ведущий знак &quot;плюс&quot; (<code>+</code>) или знак &quot;минус&quot;
(<code>-</code>) булев оператор, сопровождаемый пробелом и затем словом
(<code>'+ apple'</code> или <code>'- apple'</code>). Знак "плюс" или
&quot;минус&quot; должны быть непосредственно смежным со словом, например:
<code>'+apple'</code> или <code>'-apple'</code>.</p></li></ul></li>

<li><p>Настройте функции интерфейса.</p>
<p>Общий описатель плагина в описателе библиотеки называет функции
инициализации и завершения, которые должен вызвать сервер, когда загружает и
выгружает плагин. Для <code>simple_parser</code> эти функции действительно
только возвращают ноль, чтобы указать, что они преуспели:
<pre>
static int simple_parser_plugin_init(void *arg __attribute__((unused)))
{
  return(0);
}

static int simple_parser_plugin_deinit(void *arg __attribute__((unused)))
{
  return(0);
}
</pre>
Поскольку те функции ничего фактически не делают, Вы могли опустить их и
определить 0 для каждой из них в декларации.</p>

<p>Определенный для типа описатель для <code>simple_parser</code> называет
функции инициализации и завершения, которые должен вызвать сервер, когда
использует плагин. Для <code>simple_parser</code> эти функции
ничего не делают:
<pre>
static int simple_parser_init(MYSQL_FTPARSER_PARAM *param
       __attribute__((unused)))
{
  return(0);
}

static int simple_parser_deinit(MYSQL_FTPARSER_PARAM *param
       __attribute__((unused)))
{
  return(0);
}
</pre>
Здесь также, поскольку те функции ничего не делают, Вы могли опустить их и
определить 0 для каждой из них в описателе.</p>

<p>Основная функция парсинга, <code>simple_parser_parse()</code>, действует
как замена для встроенного полнотекстового анализатора, таким образом, она
должна разделить текст на слова и передать каждое слово серверу. Первый
параметр функции парсинга указатель на структуру, которая содержит контекст
парсинга. У этой структуры есть члены <code>doc</code>, который указывает на
текст, который будет разобран, и <code>length</code>, который указывает,
какой длины текст. Простой парсинг, сделанный плагином, полагает, что
непустые цепочки символов, разделенные пробелами, это слова, таким образом,
это идентифицирует слова так:
<pre>
static int simple_parser_parse(MYSQL_FTPARSER_PARAM *param)
{
  char *end, *start, *docend= param-&gt;doc + param-&gt;length;

  for (end= start= param-&gt;doc;; end++) {
    if (end == docend) {
       if (end &gt; start) add_word(param, start, end - start);
       break;
    }
    else if (isspace(*end)) {
      if (end &gt; start) add_word(param, start, end - start);
      start= end + 1;
    }
  }
  return(0);
}
</pre>

Когда анализатор находит каждое слово, он вызывает функцию
<code>add_word()</code>, чтобы передать слово серверу.
<code>add_word()</code> только вспомогательная функция, это не часть
интерфейса плагина. Анализатор передает указатель контекста парсинга в
<code>add_word()</code>, так же как указатель на слово и значение длины:
<pre>
static void add_word(MYSQL_FTPARSER_PARAM *param, char *word, size_t len)
{
  MYSQL_FTPARSER_BOOLEAN_INFO bool_info =
    {FT_TOKEN_WORD, 0, 0, 0, 0, 0, ' ', 0};
  param-&gt;mysql_add_word(param, word, len, &amp;bool_info);
}
</pre>

Для парсинга булева режима <code>add_word()</code> заполняет членов
структуры <code>bool_info</code> как описано ранее в обсуждении структуры
<code>st_mysql_ftparser_boolean_info</code>.</li>

<li>Настройте переменные состояния. Для плагина <code>simple_parser</code>
следующий массив переменных состояния настраивает одну переменную состояния
со значением, которое является статическим текстом, а другую со значением,
которое сохранено в переменной long integer:
<pre>
long number_of_calls = 0;
struct st_mysql_show_var simple_status[] =
{
  {"static", (char *)"just a static text", SHOW_CHAR},
  {"called", (char *)&amp;number_of_calls, SHOW_LONG},
  {0,0,0}
};
</pre>

Когда плагин установлен, его имя и значение <code>name</code>
присоединяются с подчеркиванием, чтобы сформировать имя, выведенное на экран
<a href="sql.htm#show-status"><code>SHOW STATUS</code></a>. Для массива
получающиеся имена переменной состояния <code>simple_parser_static</code> и
<code>simple_parser_called</code>. Это соглашение означает, что Вы можете
легко вывести на экран переменные для плагина, используя его имя:
<pre>
mysql&gt; SHOW STATUS LIKE 'simple_parser%';
+----------------------+--------------------+
| Variable_name        | Value              |
+----------------------+--------------------+
| simple_parser_static | just a static text |
| simple_parser_called | 0                  |
+----------------------+--------------------+
</pre></li>

<li>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталоге плагинов (каталог, названный в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>). Для
плагина <code>simple_parser</code>, все собрано и установлено, когда Вы
создаете MySQL из исходных текстов. Это также включено в двоичные
дистрибутивы. Процесс сборки производит совместно используемую библиотеку
объекта с названием <code>mypluglib.so</code> (суффикс
<code>.so</code> зависит от системы).</li>

<li>Чтобы использовать плагин, зарегистрируйте его на сервере. Например,
чтобы зарегистрировать плагин во время выполнения, используйте этот запрос
(корректируйте суффикс <code>.so</code> для Вашей
платформы по мере необходимости):
<pre>
INSTALL PLUGIN simple_parser SONAME 'mypluglib.so';
</pre></li>

<li>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или используйте команду <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a>. См.
<a href="server.htm#obtaining-plugin-information">раздел 6.6.3</a>.</li>

<li>Проверьте плагин, чтобы проверить, что он работает должным образом.</p>
<p>Составьте таблицу, которая содержит строковый столбец и свяжите плагин
анализатора с индексом <code>FULLTEXT</code> на столбце:
<pre>
mysql&gt; CREATE TABLE t (c VARCHAR(255),
    -&gt;   FULLTEXT (c) WITH PARSER simple_parser
    -&gt; ) ENGINE=MyISAM;
Query OK, 0 rows affected (0.01 sec)
</pre>

Вставьте некоторый текст в таблицу и попробуйте некоторые поиски. Они должны
проверить, что плагин анализатора обрабатывает все непробельные символы
как символы слова:
<pre>
mysql&gt; INSERT INTO t VALUES
    -&gt;   ('latin1_general_cs is a case-sensitive collation'),
    -&gt;   ('I\'d like a case of oranges'),
    -&gt;   ('this is sensitive information'),
    -&gt;   ('another row'),
    -&gt;   ('yet another row');
Query OK, 5 rows affected (0.02 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql&gt; SELECT c FROM t;
+-------------------------------------------------+
| c                                               |
+-------------------------------------------------+
| latin1_general_cs is a case-sensitive collation |
| I'd like a case of oranges                      |
| this is sensitive information                   |
| another row                                     |
| yet another row                                 |
+-------------------------------------------------+
5 rows in set (0.00 sec)

mysql&gt; SELECT MATCH(c) AGAINST('case') FROM t;
+--------------------------+
| MATCH(c) AGAINST('case') |
+--------------------------+
|0                         |
|  1.2968142032623         |
|0                         |
|0                         |
|0                         |
+--------------------------+
5 rows in set (0.00 sec)

mysql&gt; SELECT MATCH(c) AGAINST('sensitive') FROM t;
+-------------------------------+
| MATCH(c) AGAINST('sensitive') |
+-------------------------------+
| 0                             |
| 0                             |
|   1.3253291845322             |
| 0                             |
| 0                             |
+-------------------------------+
5 rows in set (0.01 sec)

mysql&gt; SELECT MATCH(c) AGAINST('case-sensitive') FROM t;
+------------------------------------+
| MATCH(c) AGAINST('case-sensitive') |
+------------------------------------+
|1.3109166622162                     |
|  0                                 |
|  0                                 |
|  0                                 |
|  0                                 |
+------------------------------------+
5 rows in set (0.01 sec)

mysql&gt; SELECT MATCH(c) AGAINST('I\'d') FROM t;
+--------------------------+
| MATCH(c) AGAINST('I\'d') |
+--------------------------+
|0                         |
|  1.2968142032623         |
|0                         |
|0                         |
|0                         |
+--------------------------+
5 rows in set (0.01 sec)
</pre>

Ни <span><span>case</span></span>, ни <span><span>insensitive</span></span>
не соответствуют <span><span>case-insensitive</span></span> способу,
которым они были бы обработаны встроенным анализатором.</p></li></ol>

<h4><a name="writing-daemon-plugins"></a>26.2.4.5. Написание плагинов демона
</h4>
<p>Плагин демона простой тип плагина, используемого для кода, который должен
быть выполнен сервером, но это не общается с сервером. Этот раздел описывает,
как написать плагин сервера демона, используя в качестве примера плагин,
найденный в каталоге <code>plugin/daemon_example</code> исходных текстов
MySQL. Этот каталог содержит исходный файл <code>daemon_example.cc</code>
для плагина демона <code>daemon_example</code>, который пишет строку
в файл <code>mysql-heartbeat.log</code> в каталоге данных.</p>

<p>Чтобы написать плагин демона, включайте следующий заголовочный файл в
исходный файл плагина.
<pre>
#include &lt;mysql/plugin.h&gt;
</pre>
<code>plugin.h</code> определяет <code>MYSQL_DAEMON_PLUGIN</code>
тип плагина сервера и структуры данных, которые должны объявить плагин.</p>

<p>Файл <code>daemon_example.cc</code> настраивает описатель библиотеки
следующим образом. Описатель библиотеки включает единственный общий
описатель плагина сервера.
<pre>
mysql_declare_plugin(daemon_example)
{
  MYSQL_DAEMON_PLUGIN,
  &amp;daemon_example_plugin,
  "daemon_example",
  "Brian Aker",
  "Daemon example, creates a heartbeat beat file in mysql-heartbeat.log",
  PLUGIN_LICENSE_GPL,
  daemon_example_plugin_init,   /* Plugin Init */
  daemon_example_plugin_deinit, /* Plugin Deinit */
  0x0100  /* 1.0 */,
  NULL,   /* status variables*/
  NULL,   /* system variables*/
  NULL,   /* config options*/
  0,      /* flags   */
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> (<code>daemon_example</code>) указывает на имя, чтобы
использовать для ссылок на плагин в командах
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a> или
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a>.</p>

<p>Второй член описателя <code>daemon_example_plugin</code> указатель на
определенный для типа описатель плагина демона. Эта структура состоит только
из определенного для типа номера версии API:
<pre>
struct st_mysql_daemon daemon_example_plugin =
  {MYSQL_DAEMON_INTERFACE_VERSION};
</pre>

У определенной для типа структуры нет никаких функций интерфейса. Нет никакой
связи между сервером и плагином, за исключением того, что сервер вызывает
функции инициализации и завершения из общего описателя, чтобы
запустить и остановить плагин:</p>

<ul><li><p><code>daemon_example_plugin_init()</code> открывает файл и
порождает поток, который периодически просыпается и пишет
следующее сообщение в файл.</li>
<li><code>daemon_example_plugin_deinit()</code> закрывает файл и
выполняет другую уборку.</p></li></ul>

<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталоге плагинов (каталог, названный в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>). Для
плагина <code>daemon_example</code> это собрано и установлено, когда Вы
создаете MySQL из исходных текстов. Это также включено в двоичные
дистрибутивы. Процесс сборки производит совместно используемую библиотеку
объекта с названием <code>libdaemon_example.so</code>.
</p>

<p>Чтобы использовать плагин, зарегистрируйте его на сервере. Например, чтобы
зарегистрировать плагин во время выполнения, используйте этот запрос
(корректируйте суффикс <code>.so</code> для Вашей платформы
по мере необходимости):
<pre>
INSTALL PLUGIN daemon_example SONAME 'libdaemon_example.so';
</pre></p>

<p>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или используйте команду <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a>. См. <a href="server.htm#obtaining-plugin-information">
раздел 6.6.3</a>.</p>

<p>В то время как плагин загружен, он пишет строку равномерно в файл
<code>mysql-heartbeat.log</code> в каталоге данных. Этот файл растет без
предела, таким образом после того, как у Вас есть уверенность, что плагин
работает правильно, выгрузите его:
<pre>
UNINSTALL PLUGIN daemon_example;
</pre>

<h4><a name="writing-information-schema-plugins"></a>26.2.4.6.
Написание плагинов INFORMATION_SCHEMA</h4>
<p>Этот раздел описывает, как написать плагин <code>INFORMATION_SCHEMA</code>.
Для примера кода, который осуществляет такие плагины, см. файл
<code>sql/sql_show.cc</code> в исходных текстах MySQL. Вы можете также
в качестве примера смотреть плагины в исходных текстах <code>InnoDB</code>.
См. файлы <code>handler/i_s.cc</code> и <code>handler/ha_innodb.cc</code> в
дереве исходных текстов <code>InnoDB</code> (каталог <code>storage/innobase
</code>).</p>

<p>Чтобы написать плагин <code>INFORMATION_SCHEMA</code> включите следующие
заголовочные файлы в исходный файл:
<pre>
#include &lt;sql_class.h&gt;
#include &lt;table.h&gt;
</pre>
Эти заголовочные файлы расположены в каталоге <code>sql</code> исходных
текстов MySQL. Они содержат C++ структуры, таким образом, исходный файл для
плагина <code>INFORMATION_SCHEMA</code> должен быть собран как C++ (не C) код.
</p>

<p>Исходный файл для плагина в качестве примера, развитого здесь, называется
<code>simple_i_s_table.cc</code>. Это создает простую таблицу
<code>INFORMATION_SCHEMA</code> с именем <code>SIMPLE_I_S_TABLE</code> с
двумя столбцами <code>NAME</code> и <code>VALUE</code>. Общий описатель для
библиотеки, которая осуществляет таблицу, похож на это:
<pre>
mysql_declare_plugin(simple_i_s_library)
{
  MYSQL_INFORMATION_SCHEMA_PLUGIN,
  &amp;simple_table_info,              /* type-specific descriptor */
  "SIMPLE_I_S_TABLE",                  /* table name */
  "Author Name",                       /* author */
  "Simple INFORMATION_SCHEMA table",   /* description */
  PLUGIN_LICENSE_GPL,                  /* license type */
  simple_table_init,                   /* init function */
  NULL,
  0x0100,                              /* version = 1.0 */
  NULL,                                /* no status variables */
  NULL,                                /* no system variables */
  NULL,                                /* no reserved information */
  0                                    /* no flags */
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> member (<code>SIMPLE_I_S_TABLE</code>)
указывает на имя, чтобы использовать для ссылок на плагин в запросе
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a> или <a href="inform.htm#plugins-table"><code>
INFORMATION_SCHEMA.PLUGINS</code></a>.</p>

<p>Член <code>simple_table_info</code> общего описателя указывает на
определенный для типа описатель, который состоит только из определенного для
типа номера версии API:
<pre>
static struct st_mysql_information_schema simple_table_info =
  {MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION};
</pre>
Общий описатель указывает на функции инициализации и завершения:</p>

<ul><li><p>Функция инициализации предоставляет информацию о структуре таблицы
и функции, которая заполняет таблицу.</li>
<li>Функция завершения выполняет любую необходимую уборку. Если никакая
уборка не необходима, этот дескрипторный член может быть <code>NULL</code>
(как в показанном примере).</p></li></ul>

<p>Функция инициализации должна возвратить 0 для успеха, 1, если ошибка
происходит. Функция получает указатель, который она должна интерпретировать
как указатель на структуру таблицы:
<pre>
static int table_init(void *ptr)
{
  ST_SCHEMA_TABLE *schema_table = (ST_SCHEMA_TABLE*) ptr;
  schema_table-&gt;fields_info = simple_table_fields;
  schema_table-&gt;fill_table = simple_fill_table;
  return 0;
}
</pre>
Функция должна установить эти двух членов структуры таблицы:</p>

<ul><li><p><code>fields_info</code>: Массив структур
<code>ST_FIELD_INFO</code>, которые содержат информацию о каждом столбце.
</li>
<li><code>fill_table</code>: Функция, которая заполняет таблицу.
</p></li></ul>

<p>Массив, который указывают <code>fields_info</code>, должен содержать один
элемент на столбец <code>INFORMATION_SCHEMA</code> плюс заканчивающий
элемент. Следующий массив <code>simple_table_fields</code> для плагина в
качестве примера указывает на таблицу <code>SIMPLE_I_S_TABLE</code>, которая
имеет два столбца. <code>NAME</code> это строка с длиной 10, а
<code>VALUE</code> integer с шириной отображения 20.
Последняя структура отмечает конец массива.
<pre>
static ST_FIELD_INFO simple_table_fields[] =
{
  {"NAME", 10, MYSQL_TYPE_STRING, 0, 0 0, 0},
  {"VALUE", 6, MYSQL_TYPE_LONG, 0, MY_I_S_UNSIGNED, 0, 0},
  {0, 0, MYSQL_TYPE_NULL, 0, 0, 0, 0}
};
</pre>
Для получения дополнительной информации об информационной структуре столбца,
см. определение <code>ST_FIELD_INFO</code> в файле заголовка
<code>table.h</code>. Допустимое значения
<code>MYSQL_TYPE_<em><code>xxx</code></em></code> используемые в C API: см.
<a href="connect.htm#c-api-data-structures">раздел 25.8.5</a>.</p>

<p>Член <code>fill_table</code> должен быть установлен в функцию, которая
заполняет таблицу и возвращает 0 для успеха, 1, если ошибка происходит. Для
плагина в качестве примера, функция <code>simple_fill_table()</code>
похожа на это:
<pre>
static int simple_fill_table(THD *thd, TABLE_LIST *tables, Item *cond)
{
  TABLE *table= tables-&gt;table;

  table-&gt;field[0]-&gt;store("Name 1", 6, system_charset_info);
  table-&gt;field[1]-&gt;store(1);
  if (schema_table_store_record(thd, table)) return 1;
  table-&gt;field[0]-&gt;store("Name 2", 6, system_charset_info);
  table-&gt;field[1]-&gt;store(2);
  if (schema_table_store_record(thd, table)) return 1;
  return 0;
}
</pre>
Для каждой строки таблицы <code>INFORMATION_SCHEMA</code> эта функция
инициализирует каждый столбец, затем вызывает
<code>schema_table_store_record()</code>, чтобы установить строку. Параметры
метода <code>store()</code> зависят от типа значения, которое будет
сохранено. Для столбца 0 (<code>NAME</code>, строка), <code>store()</code>
берет указатель на строку, ее длину, и информацию о наборе символов строки:
<pre>
store(const char *to, uint length, CHARSET_INFO *cs);
</pre>

Для столбца 1 (<code>VALUE</code>, integer), <code>store()</code>
берет значение и флаг, указывающий, есть ли знак:
<pre>
store(longlong nr, bool unsigned_value);
</pre>

Для других примеров того, как заполнить таблицы
<code>INFORMATION_SCHEMA</code> ищите
<code>schema_table_store_record()</code> в <code>sql_show.cc</code>.</p>

<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (указан в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).</p>

<p>Чтобы проверить плагин, установите это:
<pre>
mysql&gt; INSTALL PLUGIN SIMPLE_I_S_TABLE SONAME 'simple_i_s_table.so';
</pre>

Проверьте, что таблица присутствует:
<pre>
mysql&gt; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES
    -&gt; WHERE TABLE_NAME = 'SIMPLE_I_S_TABLE';
+------------------+
| TABLE_NAME       |
+------------------+
| SIMPLE_I_S_TABLE |
+------------------+
</pre>

Попытайтесь выбрать данные из нее:
<pre>
mysql&gt; SELECT * FROM INFORMATION_SCHEMA.SIMPLE_I_S_TABLE;
+--------+-------+
| NAME   | VALUE |
+--------+-------+
| Name 1 | 1     |
| Name 2 | 2     |
+--------+-------+
</pre>

Удалите это:
<pre>
mysql&gt; UNINSTALL PLUGIN SIMPLE_I_S_TABLE;
</pre>

<h4><a name="writing-semisynchronous-replication-plugins"></a>26.2.4.7.
Написание полусинхронных плагинов репликации</h4>
<p>Этот раздел описывает, как написать полусинхронные плагины репликации,
используя в качестве примера плагины в каталоге
<code>plugin/semisync</code> дистрибутива исходных текстов MySQL. Этот
каталог содержит исходные файлы для основных и ведомых систем под именами
<code>rpl_semi_sync_master</code> и <code>rpl_semi_sync_slave</code>.
Информация здесь покрывает только, как настроить структуру. Для деталей о
том, как плагины осуществляют функции репликации, см. исходный текст.</p>

<p>Чтобы написать полусинхронный плагин, включите следующий заголовочный файл
в исходный файл плагина.
<pre>
#include &lt;mysql/plugin.h&gt;
</pre>
<code>plugin.h</code> определяет тип плагина сервера
<code>MYSQL_REPLICATION_PLUGIN</code> и структуры данных</p>

<p>Для основной стороны <code>semisync_master_plugin.cc</code>
содержит этот общий описатель для плагина <code>rpl_semi_sync_master</code>:
<pre>
mysql_declare_plugin(semi_sync_master)
{
  MYSQL_REPLICATION_PLUGIN,
  &amp;semi_sync_master_plugin,
  "rpl_semi_sync_master",
  "He Zhenxing",
  "Semi-synchronous replication master",
  PLUGIN_LICENSE_GPL,
  semi_sync_master_plugin_init,   /* Plugin Init */
  semi_sync_master_plugin_deinit, /* Plugin Deinit */
  0x0100 /* 1.0 */,
  semi_sync_master_status_vars, /* status variables */
  semi_sync_master_system_vars, /* system variables */
  NULL,    /* config options */
  0,       /* flags */
}
mysql_declare_plugin_end;
</pre>

Для ведомой стороны <code>semisync_slave_plugin.cc</code> содержит этот общий
описатель для плагина <code>rpl_semi_sync_slave</code>:
<pre>
mysql_declare_plugin(semi_sync_slave)
{
  MYSQL_REPLICATION_PLUGIN,
  &amp;semi_sync_slave_plugin,
  "rpl_semi_sync_slave",
  "He Zhenxing",
  "Semi-synchronous replication slave",
  PLUGIN_LICENSE_GPL,
  semi_sync_slave_plugin_init,   /* Plugin Init */
  semi_sync_slave_plugin_deinit, /* Plugin Deinit */
  0x0100 /* 1.0 */,
  semi_sync_slave_status_vars,   /* status variables */
  semi_sync_slave_system_vars,   /* system variables */
  NULL,   /* config options */
  0,      /* flags */
}
mysql_declare_plugin_end;
</pre>

Для основного и для ведомого плагинов у общего описателя есть указатели на
определенный для типа описатель, функции инициализации и завершения и
переменные состояния и системные, осуществленные плагином. Для информации об
установке переменных, см. <a href="#plugin-status-system-variables">
раздел 26.2.4.2.2</a>. Следующие замечания обсуждают определенный для типа
описатель и функции инициализации и завершения для основного плагина, но
применяются также к ведомому плагину.</p>

<p>Член <code>semi_sync_master_plugin</code> описателя общего дескриптора
указывает на определенный для типа описатель, который состоит только из
определенного для типа номера версии API:
<pre>
struct Mysql_replication semi_sync_master_plugin = {
  MYSQL_REPLICATION_INTERFACE_VERSION
};
</pre>

Функции инициализации и завершения похожи на это:
<pre>
static int semi_sync_master_plugin_init(void *p);
static int semi_sync_master_plugin_deinit(void *p);
</pre>

Функция инициализации использует указатель, чтобы зарегистрировать
наблюдатель транзакции и двоичного протокола на сервере. После успешной
инициализации сервер заботится о вызове наблюдателей в подходящее время.
Для деталей о наблюдателях см. исходные файлы. Функция завершения вычеркивает
наблюдателей из списка. Каждая функция возвращает 0 для успеха или 1,
если ошибка происходит.</p>

<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов, указанный в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.
Для плагинов <code>rpl_semi_sync_master</code> и
<code>rpl_semi_sync_slave</code> они собраны и установлены, когда Вы создаете
MySQL из исходных текстов. Они также включены в двоичные дистрибутивы.
Процесс сборки производит совместно используемые библиотеки объекта с
названиями <code>semisync_master.so</code> и
<code>semisync_slave.so</code>.</p>

<h4><a name="writing-audit-plugins"></a>26.2.4.8.
Написание плагинов аудита</h4>
<p>Этот раздел описывает, как написать плагин аудита, используя в качестве
примера плагин в каталоге <code>plugin/audit_null</code> исходных текстов
MySQL. Исходные файлы <code>audit_null.c</code> и
<code>audit_null_variables.h</code> в этом каталоге реализуют
плагин <code>NULL_AUDIT</code>.</p>

<p>Другими примерами плагинов, которые используют контрольный плагин API,
является плагин перезаписи запроса (см.
<a href="server.htm#rewriter-query-rewrite-plugin">раздел 6.6.4</a>) и
плагин маркеров версий (см.
<a href="server.htm#version-tokens">раздел 6.6.5).</p>

<p>В пределах сервера контрольный интерфейс осуществлен в файлах
<code>sql_audit.h</code> и <code>sql_audit.cc</code> каталога
<code>sql</code> дистрибутива исходных текстов MySQL. Дополнительно
несколько мест в сервере называют контрольный интерфейс, когда событие
аудита имеет место, так, чтобы зарегистрированные контрольные плагины могли
быть уведомлены в случае необходимости. Чтобы видеть, где такие требования
происходят, ищите исходные файлы сервера с вызовами функций
<code>mysql_audit_<em><code>xxx</code></em>()</code>. Контрольное
уведомление происходит для операций сервера, таких как:</p>

<ul><li><p>Клиент соединяется и отсоединяется.</li>
<li>Запись сообщения в общий журнал запроса (если журнал включен).</li>
<li>Запись сообщения в журнал ошибок.</li>
<li>Отправка результата запроса клиенту.</p></li></ul>

<p>Чтобы написать контрольный плагин, включите следующий заголовочный
файл в исходный файл:
<pre>
#include &lt;mysql/plugin_audit.h&gt;
</pre>

<code>plugin_audit.h</code> включает <code>plugin.h</code>, таким образом, Вы
не должны включать последний файл явно. <code>plugin.h</code> определяет
тип серверного плагина <code>MYSQL_AUDIT_PLUGIN</code> и структуры данных.
<code>plugin_audit.h</code> определяет структуры данных для плагина аудита.
</p>

<h5><a name="writing-audit-plugins-general-descriptor"></a>
Общий описатель плагина аудита</h5>
<p>У контрольного плагина, как у любого плагина сервера MySQL, есть общий
описатель (см. <a href="#server-plugin-descriptors">раздел
26.2.4.2.1</a>) и определенный для типа описатель. В
<code>audit_null.c</code> общий описатель похож на это:
<pre>
mysql_declare_plugin(audit_null)
{
  MYSQL_AUDIT_PLUGIN,         /* type*/
  &amp;audit_null_descriptor, /* descriptor  */
  "NULL_AUDIT",               /* name*/
  "Oracle Corp",              /* author  */
  "Simple NULL Audit",        /* description */
  PLUGIN_LICENSE_GPL,
  audit_null_plugin_init,     /* init function (when loaded) */
  audit_null_plugin_deinit,   /* deinit function (when unloaded) */
  0x0003,                     /* version */
  simple_status,              /* status variables*/
  system_variables,           /* system variables*/
  NULL, 0,
}
mysql_declare_plugin_end;
</pre>

Первый член, <code>MYSQL_AUDIT_PLUGIN</code>, идентифицирует этот плагин
как контрольный плагин.</p>
<p><code>audit_null_descriptor</code> указывает на определенный для типа
описатель, описанный позже.</p>

<p>Член <code>name</code> (<code>NULL_AUDIT</code>) указывает на имя, чтобы
использовать для ссылок на плагин в
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>.</p>

<p>Функция инициализации <code>audit_null_plugin_init</code> выполняет
инициализацию, когда плагин загружен. Функция
<code>audit_null_plugin_deinit</code> завершает плагин.</p>

<p>Общий описатель также обращается к <code>simple_status</code> и
<code>system_variables</code>, структурам, которые выставляют несколько
состояний и системных переменных. Когда плагин включен, эти переменные могут
быть просмотрены, используя <code>SHOW</code>
(<a href="sql.htm#show-status"><code>SHOW STATUS</code></a>,
<a href="sql.htm#show-variables"><code>SHOW VARIABLES</code></a>) или
соответствующие таблицы Performance Schema.</p>

<p>Структура <code>simple_status</code> объявляет несколько переменных
состояния с названиями формы
<code>Audit_null_<em><code>xxx</code></em></code>.
<code>NULL_AUDIT</code> увеличивает переменную состояния
<code>Audit_null_called</code> для каждого полученного уведомления.
Другие переменные состояния являются более специфичными и
<code>NULL_AUDIT</code> постепенно увеличивает их только для уведомлений
об определенных событиях.</p>

<p><code>system_variables</code> массив системных переменных, каждая из
которых определена, используя макрос
<code>MYSQL_THDVAR_<em><code>xxx</code></em></code>.
У этих системных переменных есть названия формы
<code>null_audit_<em><code>xxx</code></em></code>. Эти переменные могут
использоваться, чтобы общаться с плагином во время выполнения.</p>

<h5><a name="writing-audit-plugins-type-specific-descriptor"></a>
Определенный для типа описатель</h5>
<p>Значение <code>audit_null_descriptor</code> в общем описателе указывает на
определенный для типа описатель. Для контрольных плагинов у этого описателя
есть следующая структура (определенный в <code>plugin_audit.h</code>):
<pre>
struct st_mysql_audit
{
  int interface_version;
  void (*release_thd)(MYSQL_THD);
  int (*event_notify)(MYSQL_THD, mysql_event_class_t, const void *);
  unsigned long class_mask[MYSQL_AUDIT_CLASS_MASK_SIZE];
};
</pre>
У определенного для типа описателя для контрольных плагинов есть эти члены:
</p>

<ul><li><p><code>interface_version</code>: В соответствии с соглашением,
определенные для типа описатели начинаются с версии интерфейса для данного
типа плагинов. Сервер проверяет <code>interface_version</code> когда
загружает плагин, чтобы видеть, совместим ли плагин с ним. Для контрольных
плагинов значение члена <code>interface_version</code>
<code>MYSQL_AUDIT_INTERFACE_VERSION</code>
(определено в <code>plugin_audit.h</code>).</li>

<li><code>release_thd</code>: Функция, которую сервер вызывает, чтобы
сообщить плагину, что он отделяется от контекста потока. Это должно быть
<code>NULL</code>, если нет такой функции.</li>

<li><code>event_notify</code>: Функция, которую сервер вызывает, чтобы
уведомить плагин, что событие имело место. Эта функция не должна быть
<code>NULL</code>: это не имело бы смысла, потому что аудит не произойдет.
</li>

<li><code>class_mask</code>: Массив элементов
<code>MYSQL_AUDIT_CLASS_MASK_SIZE</code>. Каждый элемент определяет битовую
маску для данного класса событий, чтобы указать на подклассы, для которых
плагин хочет получить уведомление. Это то, как плагин подписывается на
интересные события. Элемент должен быть 0, чтобы проигнорировать события для
соответствующего класса событий.</p></li></ul>

<p>Сервер использует функции <code>event_notify</code> и
<code>release_thd</code> вместе. Их вызывают в пределах контекста
определенного потока, и поток производит несколько уведомлений событий. В
первый раз, когда сервер вызывает <code>event_notify</code> для потока, это
создает привязку плагина к потоку. Плагин не может быть удален, в то время
как эта привязка существует. Когда больше событий для потока не будет,
сервер сообщает плагину об этом, вызывая функцию <code>release_thd</code> и
и затем разрушает привязку. Например, когда клиент делает запрос, поток,
обрабатывающий запрос, может уведомить контрольные плагины о наборе
результатов, произведенном запросом и о зарегистрированном запросе. После
того, как эти уведомления происходят, сервер освобождает плагин прежде, чем
поместить поток в спячку, пока клиент не делает другой запрос.</p>

<p>Этот проект позволяет плагину выделить ресурсы, необходимые для данного
потока, в первом вызове функции <code>event_notify</code>
и освободить их в функции <code>release_thd</code>:
<pre>
event_notify function:
  if memory is needed to service the thread
allocate memory
  ... rest of notification processing ...

release_thd function:
  if memory was allocated
release memory
  ... rest of release processing ...
</pre>
Это более эффективно чем выделение и освобождение памяти
неоднократно в функции уведомления.</p>

<p>Для плагина <code>NULL_AUDIT</code> определенный для типа описатель
похож на это:
<pre>
static struct st_mysql_audit audit_null_descriptor =
{
  MYSQL_AUDIT_INTERFACE_VERSION,  /* interface version*/
  NULL,                           /* release_thd function */
  audit_null_notify,              /* notify function*/
  {(unsigned long) MYSQL_AUDIT_GENERAL_ALL,
   (unsigned long) MYSQL_AUDIT_CONNECTION_ALL,
   (unsigned long) MYSQL_AUDIT_PARSE_ALL,
   (unsigned long) MYSQL_AUDIT_AUTHORIZATION_ALL,
   (unsigned long) MYSQL_AUDIT_TABLE_ACCESS_ALL,
   (unsigned long) MYSQL_AUDIT_GLOBAL_VARIABLE_ALL,
   (unsigned long) MYSQL_AUDIT_SERVER_STARTUP_ALL,
   (unsigned long) MYSQL_AUDIT_SERVER_SHUTDOWN_ALL,
   (unsigned long) MYSQL_AUDIT_COMMAND_ALL,
   (unsigned long) MYSQL_AUDIT_QUERY_ALL,
   (unsigned long) MYSQL_AUDIT_STORED_PROGRAM_ALL }
};
</pre>
Сервер вызывает <code>audit_null_notify()</code>, чтобы
передать контрольную информацию о событии плагину. Функции
<code>release_thd</code> нет.</p>

<p>Член <code>class_mask</code> массив, который указывает, на какие классы
событий плагин подписывается. Как показано, содержание массива подписывается
на все подклассы всех классов событий, которые доступны. Чтобы
проигнорировать все уведомления для данного класса событий, определите
соответствующий элемент <code>class_mask</code> как 0.</p>

<p>Число элементов <code>class_mask</code> соответствует числу классов
событий, каждый из которых перечислен в <code>mysql_event_class_t</code>
перечислении определенном в <code>plugin_audit.h</code>:
<pre>
typedef enum
{
  MYSQL_AUDIT_GENERAL_CLASS  = 0,
  MYSQL_AUDIT_CONNECTION_CLASS = 1,
  MYSQL_AUDIT_PARSE_CLASS= 2,
  MYSQL_AUDIT_AUTHORIZATION_CLASS= 3,
  MYSQL_AUDIT_TABLE_ACCESS_CLASS = 4,
  MYSQL_AUDIT_GLOBAL_VARIABLE_CLASS  = 5,
  MYSQL_AUDIT_SERVER_STARTUP_CLASS   = 6,
  MYSQL_AUDIT_SERVER_SHUTDOWN_CLASS  = 7,
  MYSQL_AUDIT_COMMAND_CLASS  = 8,
  MYSQL_AUDIT_QUERY_CLASS= 9,
  MYSQL_AUDIT_STORED_PROGRAM_CLASS   = 10,
  /* This item must be last in the list. */
  MYSQL_AUDIT_CLASS_MASK_SIZE
} mysql_event_class_t;
</pre>

Для любого данного класса событий <code>plugin_audit.h</code> определяет
символы битовой маски для подклассов одиночных событий, так же как
символ <code><em><code>xxx</code></em>_ALL</code>, который является
объединением всех битовых масок подкласса. Например, для
<code>MYSQL_AUDIT_CONNECTION_CLASS</code> (класс, который покрывает события
соединения и отсоединения) <code>plugin_audit.h</code>
определяет эти символы:
<pre>
typedef enum
{
  /** occurs after authentication phase is completed. */
  MYSQL_AUDIT_CONNECTION_CONNECT  = 1 &lt;&lt; 0,
  /** occurs after connection is terminated. */
  MYSQL_AUDIT_CONNECTION_DISCONNECT = 1 &lt;&lt; 1,
  /** occurs after COM_CHANGE_USER RPC is completed. */
  MYSQL_AUDIT_CONNECTION_CHANGE_USER= 1 &lt;&lt; 2,
  /** occurs before authentication. */
  MYSQL_AUDIT_CONNECTION_PRE_AUTHENTICATE = 1 &lt;&lt; 3
} mysql_event_connection_subclass_t;

#define MYSQL_AUDIT_CONNECTION_ALL (MYSQL_AUDIT_CONNECTION_CONNECT | \
        MYSQL_AUDIT_CONNECTION_DISCONNECT | \
        MYSQL_AUDIT_CONNECTION_CHANGE_USER | \
        MYSQL_AUDIT_CONNECTION_PRE_AUTHENTICATE)
</pre>

Чтобы подписаться на все подклассы класса соединения событий
(как делает плагин <code>NULL_AUDIT</code>), плагин определяет
<code>MYSQL_AUDIT_CONNECTION_ALL</code> в соответствующем
<code>class_mask</code> элементе (<code>class_mask[1]</code> в этом случае).
Чтобы подписаться только на некоторые подклассы, плагин устанавливает
элемент <code>class_mask</code> в объединение подклассов. Например, чтобы
подписаться только на подклассы соединения и изменения пользователя, надо
установить <code>class_mask[1]</code> к этому значению:
<pre>
MYSQL_AUDIT_CONNECTION_CONNECT | MYSQL_AUDIT_CONNECTION_CHANGE_USER
</pre>

<h5><a name="writing-audit-plugins-notification-function"></a>
Функция уведомления плагина аудита</h5>
<p>Большая часть работы для контрольного плагина происходит в функции
уведомления (член <code>event_notify</code> определенного для типа описателя).
Сервер вызывает эту функцию для каждого события.
У функций уведомления есть этот прототип:
<pre>
int (*event_notify)(MYSQL_THD, mysql_event_class_t, const void *);
</pre>

Второй и третий параметры <code>event_notify</code> представляют класс
событий и указатель на структуру событий. У событий в различных классах есть
различные структуры. Функция уведомления может использовать значение класса
событий, чтобы определить, какая структура событий применяется. Функция
обрабатывает событие и возвращает состояние, указывающее, должен ли сервер
продолжить обрабатывать событие или закончить.</p>

<p>Для <code>NULL_AUDIT</code> функция уведомления
<code>audit_null_notify()</code>. Эта функция постепенно увеличивает
глобальный счетчик событий (который плагин выставляет как значение состояния
<code>Audit_null_called</code>) и затем исследует класс событий, чтобы
определить, как обработать структуру событий:
<pre>
static int audit_null_notify(MYSQL_THD thd __attribute__((unused)),
                             mysql_event_class_t event_class,
                             const void *event)
{
  ...
  number_of_calls++;

  if (event_class == MYSQL_AUDIT_GENERAL_CLASS) {
     const struct mysql_event_general *event_general =
           (const struct mysql_event_general *)event;
  ...
  }
  else if (event_class == MYSQL_AUDIT_CONNECTION_CLASS) {
    const struct mysql_event_connection *event_connection =
          (const struct mysql_event_connection *) event;
  ...
  }
  else if (event_class == MYSQL_AUDIT_PARSE_CLASS) {
    const struct mysql_event_parse *event_parse =
          (const struct mysql_event_parse *)event;
  ...
  }
  ...
}
</pre>

Функция уведомления интерпретирует параметр <code>event</code> согласно
значению <code>event_class</code>. Параметр <code>event</code> указатель на
запись события, структура которого отличается в зависимости от класса
события. Файл <code>plugin_audit.h</code> содержит структуры, которые
определяют содержание каждого класса событий. Для каждого класса
<code>audit_null_notify()</code> бросает случай к соответствующей
определенной для класса структуре и затем проверяет ее подкласс, чтобы
определить, который счетчик увеличить. Например, код, чтобы обработать
события в классе соединения похож на это:
<pre>
else if (event_class == MYSQL_AUDIT_CONNECTION_CLASS)
{
  const struct mysql_event_connection *event_connection =
        (const struct mysql_event_connection *) event;
  switch (event_connection-&gt;event_subclass)
  {
    case MYSQL_AUDIT_CONNECTION_CONNECT:
      number_of_calls_connection_connect++;
      break;
    case MYSQL_AUDIT_CONNECTION_DISCONNECT:
      number_of_calls_connection_disconnect++;
      break;
    case MYSQL_AUDIT_CONNECTION_CHANGE_USER:
      number_of_calls_connection_change_user++;
      break;
    case MYSQL_AUDIT_CONNECTION_PRE_AUTHENTICATE:
      number_of_calls_connection_pre_authenticate++;
      break;
    default:
      break;
  }
}
</pre>

<p>Общий класс событий (<code>MYSQL_AUDIT_GENERAL_CLASS</code>) устарел в
MySQL 5.7.9 и будет удален в будущем выпуске MySQL. Чтобы уменьшить
накладные расходы плагина, предпочтительно подписаться только на классы
более определенного события.</p>

<p>Для некоторых классов событий плагин <code>NULL_AUDIT</code>
выполняет другую обработку в дополнение к постепенному увеличению счетчика.
В любом случае когда функция уведомления заканчивает обрабатывать событие,
она должна возвратить состояние, указывающее, должен ли сервер продолжить
обрабатывать событие или закончить.</p>

<h5><a name="writing-audit-plugins-error-handling"></a>
Обработка ошибок плагина</h5>
<p>Функция уведомления может сообщить значение состояния для текущего
события двумя путями:</p>

<ul><li><p>Использовать возвращаемое значение функции уведомления. В этом
случае функция возвращает ноль, если сервер должен продолжить обрабатывать
событие, или отличное от нуля значение, если сервер должен закончить.</li>

<li>Вызвать <code>my_message()</code>, чтобы установить статус ошибки прежде,
чем возвратиться из функции уведомления. В этом случае возвращаемое значение
функции уведомления проигнорировано, и сервер заканчивает обработку событий с
ошибкой. Параметры <code>my_message()</code> указывают, какую ошибку объявить
и ее сообщение. Например:
<pre>
my_message(ER_AUDIT_API_ABORT, "This is my error message.", MYF(0));
</pre>

Некоторые события не могут быть прерваны. Возвращаемое значение, отличное от
нуля, не будет учтено и вызов <code>my_message()</code> должен следовать
<code>is_error()</code>. Например:
<pre>
if (!thd-&gt;get_stmt_da()-&gt;is_error())
{
  my_message(ER_AUDIT_API_ABORT, "This is my error message.", MYF(0));
}
</pre></li></ul>

<p>Некоторые события не могут быть закончены:</p>
<ul><li><p><code>MYSQL_AUDIT_CONNECTION_DISCONNECT</code>:
Сервер не может препятствовать тому, чтобы клиент отсоединился.</li>

<li><code>MYSQL_AUDIT_COMMAND_END</code>: Этот случай обеспечивает состояние
команды, которая закончила выполнение, таким образом нет никакой причины
завершать ее явно.</p></li></ul>

<p>Если контрольный плагин возвращает состояние отличное от нуля для
непрерываемого события, сервер игнорирует состояние и продолжает его
обрабатывать. Это также истина, если контрольный плагин использует функцию
<code>my_message()</code>, чтобы закончить непрерываемое событие.</p>

<h5><a name="writing-audit-plugins-usage"></a>Использование плагина аудита
</h5>
<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">раздел 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (на него указывает системная переменная
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).
Для плагина <code>NULL_AUDIT</code> это собрано и установлено, когда Вы
создаете MySQL из исходных текстов. Это также включено в двоичные
дистрибутивы. Процесс сборки производит совместно используемую библиотеку
объекта с названием <code>adt_null.so</code>.</p>

<p>Чтобы зарегистрировать плагин во время выполнения, используйте этот запрос
(корректируйте суффикс <code>.so</code> для Вашей платформы
по мере необходимости):
<pre>
INSTALL PLUGIN NULL_AUDIT SONAME 'adt_null.so';
</pre>

<p>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или используйте <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code>
</a>. См. <a href="server.htm#obtaining-plugin-information">раздел 6.6.3</a>.
</p>

<p>В то время как контрольный плагин установлен, он выставляет переменные
состояния, которые указывают на события, для которых плагин вызван:
<pre>
mysql&gt; SHOW STATUS LIKE 'Audit_null%';
+----------------------------------------+--------+
| Variable_name                          | Value  |
+----------------------------------------+--------+
| Audit_null_authorization_column        | 0      |
| Audit_null_authorization_db            | 0      |
| Audit_null_authorization_procedure     | 0      |
| Audit_null_authorization_proxy         | 0      |
| Audit_null_authorization_table         | 0      |
| Audit_null_authorization_user          | 0      |
| Audit_null_called                      | 185547 |
| Audit_null_command_end                 | 20999  |
| Audit_null_command_start               | 21001  |
| Audit_null_connection_change_user      | 0      |
| Audit_null_connection_connect          | 5823   |
| Audit_null_connection_disconnect       | 5818   |
| Audit_null_connection_pre_authenticate | 5823   |
| Audit_null_general_error               | 1      |
| Audit_null_general_log                 | 26559  |
| Audit_null_general_result              | 19922  |
| Audit_null_general_status              | 21000  |
| Audit_null_global_variable_get         | 0      |
| Audit_null_global_variable_set         | 0      |
| Audit_null_parse_postparse             | 14648  |
| Audit_null_parse_preparse              | 14648  |
| Audit_null_query_nested_start          | 6      |
| Audit_null_query_nested_status_end     | 6      |
| Audit_null_query_start                 | 14648  |
| Audit_null_query_status_end            | 14647  |
| Audit_null_server_shutdown             | 0      |
| Audit_null_server_startup              | 1      |
| Audit_null_table_access_delete         | 104    |
| Audit_null_table_access_insert         | 2839   |
| Audit_null_table_access_read           | 97842  |
| Audit_null_table_access_update         | 278    |
+----------------------------------------+--------+
</pre>

<code>Audit_null_called</code> считает все события, другие переменные считают
подклассы определенного события. Например, предыдущий запрос
<a href="sql.htm#show-status"><code>SHOW STATUS</code></a> заставляет сервер
послать результат клиенту и записать сообщение в общий журнал запроса, если
этот журнал включен. Таким образом, клиент, который делает запрос
неоднократно, вызывает увеличение каждый раз <code>Audit_null_called</code>,
<code>Audit_null_general_result</code> и <code>Audit_null_general_log</code>.
Уведомления происходят независимо от того, включен ли журнал.</p>

<p>Значения переменных состояния едины для всех сеансов. Нет никаких
счетчиков для отдельных сеансов.</p>
<p><code>NULL_AUDIT</code> выставляет несколько системных переменных, которые
включают коммуникации с плагином во время выполнения:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'null_audit%';
+------------------------------------+-------+
| Variable_name                      | Value |
+------------------------------------+-------+
| null_audit_abort_message           |       |
| null_audit_abort_value             | 1     |
| null_audit_event_order_check       |       |
| null_audit_event_order_check_exact | 1     |
| null_audit_event_order_started     | 0     |
| null_audit_event_record            |       |
| null_audit_event_record_def        |       |
+------------------------------------+-------+
</pre>

Чтобы проверить порядок вызова API аудита, установите переменную
<code>null_audit_event_order_check</code> к
ожидаемому порядку событий. Например:
<pre>
SET null_audit_event_order_check =
    'MYSQL_AUDIT_CONNECTION_PRE_AUTHENTICATE;;;'
    'MYSQL_AUDIT_GENERAL_LOG;;;'
    'MYSQL_AUDIT_CONNECTION_CONNECT;;';
</pre>
Запрос использует синтаксис SQL, который связывает смежные
строки в единственную строку.</p>

<p>Формат значения:
<pre>
'<em><code>event_name</code></em>;<em><code>event_data</code></em>;
 <em><code>command</code></em>' [';<em><code>event_name</code></em>;
 <em><code>event_data</code></em>;<em><code>command</code></em>'] ...
</pre>

После того, как порядок событий соответствует, значение
<code>null_audit_event_order_check</code>
заменено значением <code>EVENT-ORDER-OK</code>.</p>

<p>Определение значения команды <code>ABORT_RET</code> позволяет прервать
аудит для указанного случая. Следующий пример аварийно прекращает работу при
выполнении запроса <a href="sql.htm#insert"><code>INSERT</code></a>, когда
событие <code>MYSQL_AUDIT_QUERY_STATUS_END</code> имеет место:
<pre>
SET null_audit_event_order_check =
   'MYSQL_AUDIT_COMMAND_START;command_id="3";;'
   'MYSQL_AUDIT_GENERAL_LOG;;;'
   'MYSQL_AUDIT_QUERY_START;;;'
   'MYSQL_AUDIT_QUERY_STATUS_END;;ABORT_RET';
</pre>

После того, как контрольный плагин соответствует предыдущей
последовательности, он прерывает обработку событий и посылает сообщение
об ошибке клиенту:
<pre>
ERROR 3164 (HY000): Aborted by Audit API ('MYSQL_AUDIT_QUERY_STATUS_END';1).
</pre>

Возвращение ненулевого значения из API аудита стандартный способ прервать
выполнение события. Также возможно определить пользовательский код ошибки,
устанавливая переменную <code>null_audit_abort_value</code> к значению,
которое должна возвратить функция уведомления:
<pre>
SET null_audit_abort_value = 123;
</pre>

Прерывание последовательности приводит к стандартному сообщению с
пользовательским кодом ошибки. Предположите, что Вы устанавливаете
контрольные системные переменные журнала так:
<pre>
SET null_audit_abort_value = 123;
SET null_audit_event_order_check =
    'MYSQL_AUDIT_COMMAND_START;command_id="3";;'
    'MYSQL_AUDIT_GENERAL_LOG;;;'
    'MYSQL_AUDIT_QUERY_START;;ABORT_RET';
</pre>

Тогда выполнение <code>SELECT 1</code> приведет к этой ошибке:
<pre>
ERROR 3164 (HY000): Aborted by Audit API ('MYSQL_AUDIT_QUERY_START';123).
</pre>

Случай может быть также прерван с пользовательским сообщением, определенным
установкой переменной <code>null_audit_abort_message</code>. Предположите,
что Вы устанавливаете контрольные системные переменные журнала так:
<pre>
SET null_audit_abort_message = 'Custom error text.';
SET null_audit_event_order_check =
    'MYSQL_AUDIT_COMMAND_START;command_id="3";;'
    'MYSQL_AUDIT_GENERAL_LOG;;;'
    'MYSQL_AUDIT_QUERY_START;;ABORT_RET';
</pre>

Тогда прерывание последовательности приводит к следующей ошибке:
<pre>
ERROR 3164 (HY000): Custom error text.
</pre>

В испытательных целях возможно сделать запись событий, которые проходят через
плагин. Запись запускается, определяя, начало и конец события в переменной
<code>null_audit_event_record_def</code>:
<pre>
SET null_audit_event_record_def =
    'MYSQL_AUDIT_COMMAND_START;MYSQL_AUDIT_COMMAND_END';
</pre>
Выполнение запроса приводит к хранению в переменной
<code>null_audit_event_record</code> событий, которые происходят.</p>

<p>Чтобы отключить плагин после тестирования, используйте этот запрос,
чтобы выгрузить плагин:
<pre>
UNINSTALL PLUGIN NULL_AUDIT;
</pre>

<h4><a name="writing-authentication-plugins"></a>26.2.4.9.
Написание плагина аутентификации</h4>
<p>MySQL поддерживает модульную аутентификацию, в которой плагины вызваны,
чтобы подтвердить подлинность соединений клиента. Плагины аутентификации
включают использование методов аутентификации кроме встроенного метода
паролей, сохраненных в таблице <code>mysql.user</code>. Например, плагины
могут быть написаны, чтобы получить доступ к внешним методам аутентификации.
Кроме того, плагины аутентификации могут поддержать прокси. Для получения
дополнительной информации, см. разделы
<a href="security.html#pluggable-authentication">7.3.9</a> и
<a href="security.html#proxy-users">7.3.10</a>.</p>

<p>Плагин аутентификации может быть написан для стороны сервера или стороны
клиента. Серверные плагины используют тот же самый API, который используется
для других типов плагина сервера, таких как полнотекстовый анализатор или
контрольные плагины (хотя с иным определенным для типа описателем).
Клиентские плагины используют API плагина клиента.</p>

<p>Несколько заголовочных файлов содержат информацию,
относящуюся к плагинам аутентификации:</p>

<ul><li><p><code>plugin.h</code>: Определяет тип плагина сервера
<code>MYSQL_AUTHENTICATION_PLUGIN</code>.</li>
<li><code>client_plugin.h</code>: Определяет API для плагинов клиента. Это
включает описатель плагина клиента и функциональные прототипы плагина клиента
C API (см. <a href="connect.htm#c-api-plugin-functions">раздел 25.8.14</a>).
</li>

<li><code>plugin_auth.h</code>: Определяет часть API плагина сервера,
определенный для плагинов аутентификации. Это включает определенный для типа
описатель для серверных плагинов аутентификации и структуру
<code>MYSQL_SERVER_AUTH_INFO</code>.</li>

<li><code>plugin_auth_common.h</code>: Содержит общие элементы плагинов
аутентификации клиента и сервера. Это включает определения возвращаемого
значения и структуру <code>MYSQL_PLUGIN_VIO</code>.</p></li></ul>

<p>Чтобы написать плагин аутентификации, включите следующие заголовочные
файлы в исходный файл.</p>
<ul><li><p>Для исходного файла, который осуществляет плагин аутентификации
сервера, включите этот файл:
<pre>
#include &lt;mysql/plugin_auth.h&gt;
</pre></li>

<li>Для исходного файла, который осуществляет плагин аутентификации клиента,
или оба плагина (клиента и сервера), включите эти файлы:
<pre>
#include &lt;mysql/plugin_auth.h&gt;
#include &lt;mysql/client_plugin.h&gt;
#include &lt;mysql.h&gt;
</pre></li></ul>

<p><code>plugin_auth.h</code> включает <code>plugin.h</code> и
<code>plugin_auth_common.h</code>, таким образом, Вы не должны включать
последние файлы явно.</p>
<p>Этот раздел описывает, как написать пару простых плагинов аутентификации
клиента и сервера, которые сотрудничают.</p>

<p>Эти плагины принимают любой непустой пароль и посылают его открытым
текстом. Это небезопасно, таким образом, плагины
<span><em>не должны использоваться в производственных средах</em></span>.</p>

<p>Серверные и клиентские плагины оба называются <code>auth_simple</code>.
Как написано в <a href="#plugin-data-structures">
разделе 26.2.4.2</a>, у файла библиотеки должно быть то же самое базовое имя,
как у плагина клиента, таким образом, имя исходного файла
<code>auth_simple.c</code> и библиотеки <code>auth_simple.so</code>
(предполагается, что Ваша система использует <code>.so</code> как суффикс
для файлов библиотеки).</p>

<p>В дистрибутиве исходных текстов MySQL исходный текст плагина
аутентификации расположен в каталоге <code>plugin/auth</code> и может быть
исследован как руководство по написанию других плагинов аутентификации. Кроме
того, чтобы видеть, как встроенные плагины аутентификации осуществлены, см.
<code>sql/sql_acl.cc</code> для плагинов, которые встроены в сервер MySQL и
<code>sql-common/client.c</code> для плагинов, которые встроены в клиентскую
бибилотеку <code>libmysqlclient</code>. Для встроенных плагинов клиента,
отметьте что структуры <code>auth_plugin_t</code>, используемые там,
отличаются от структур, используемых с обычным макроопределением декларации
плагина клиента. В частности первые два члена указаны явно, а не
через макроопределение декларации.</p>

<h5><a name="writing-authentication-plugins-server-side"></a>26.2.4.9.1.
Написание серверного плагина аутентификации</h5>
<p>Объявите серверный плагин с обычным общим дескрипторным форматом, который
используется для всех типов плагина сервера (см.
<a href="#server-plugin-descriptors">раздел 26.2.4.2.1</a>). Для
плагина <code>auth_simple</code> описатель похож на это:
<pre>
mysql_declare_plugin(auth_simple)
{
  MYSQL_AUTHENTICATION_PLUGIN,
  &amp;auth_simple_handler,             /* type-specific descriptor */
  "auth_simple",                        /* plugin name */
  "Author Name",                        /* author */
  "Any-password authentication plugin", /* description */
  PLUGIN_LICENSE_GPL,                   /* license type */
  NULL,                                 /* no init function */
  NULL,                                 /* no deinit function */
  0x0100,                               /* version = 1.0 */
  NULL,                                 /* no status variables */
  NULL,                                 /* no system variables */
  NULL,                                 /* no reserved information */
  0                                     /* no flags */
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> (<code>auth_simple</code>) указывает на имя, чтобы
использовать для ссылок на плагин в
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a> или <a href="inform.htm#plugins-table"><code>
INFORMATION_SCHEMA.PLUGINS</code></a>.</p>

<p>Член <code>auth_simple_handler</code> общего описателя указывает на
определенный для типа описатель. Для плагина аутентификации определенный для
типа описатель экземпляр структуры <code>st_mysql_auth</code>
(определена в <code>plugin_auth.h</code>):
<pre>
struct st_mysql_auth
{
  int interface_version;
  const char *client_auth_plugin;
  int (*authenticate_user) (MYSQL_PLUGIN_VIO *vio,
                            MYSQL_SERVER_AUTH_INFO *info);
  int (*generate_authentication_string)(char *outbuf, unsigned int *outbuflen,
                                        const char *inbuf,
                                        unsigned int inbuflen);
  int (*validate_authentication_string) (char* const inbuf,
                                         unsigned int buflen);
  int (*set_salt) (const char *password, unsigned int password_len,
                   unsigned char* salt, unsigned char *salt_len);
  const unsigned long authentication_flags;
};
</pre>
Структура <code>st_mysql_auth</code> имеет члены:</p>

<ul><li><p><code>interface_version</code>: Определенный для типа номер версии
API, всегда <code>MYSQL_AUTHENTICATION_INTERFACE_VERSION</code>.</li>
<li><code>client_auth_plugin</code>: Имя плагина клиента.</li>

<li><code>authenticate_user</code>: Указатель на основную функцию,
которая общается с клиентом.</li>
<li><code>generate_authentication_string</code>: Указатель на функцию,
которая производит пароль из строки аутентификации.</li>

<li><code>validate_authentication_string</code>: Указатель на функцию,
которая утверждает пароль.</li>
<li><code>set_salt</code>: Указатель на функцию, которая преобразует
скремблированный пароль в двоичную форму.</li>
<li><code>authentication_flags</code>: Слово флагов.</p></li></ul>

<p>Член <code>client_auth_plugin</code> должен указать на название плагина
клиента, если определенный плагин требуется. Значение <code>NULL</code>
определяет "<span>любой плагин</span>". Это полезно, если плагин сервера не
заботится о плагине клиента или том, какое имя пользователя или пароль это
посылает. Например, это могло бы быть истиной, если плагин сервера
подтверждает подлинность только локальных клиентов и использует некоторое
свойство операционной системы, а не информацию, посланную плагином клиента.
</p>

<p>Для <code>auth_simple</code> определенный для типа описатель похож на это:
<pre>
static struct st_mysql_auth auth_simple_handler =
{
  MYSQL_AUTHENTICATION_INTERFACE_VERSION,
  "auth_simple",               /* required client-side plugin name */
  auth_simple_server           /* server-side plugin main function */
  generate_auth_string_hash,   /* generate digest from password string */
  validate_auth_string_hash,   /* validate password digest */
  set_salt,                    /* generate password salt value */
  AUTH_FLAG_PRIVILEGED_USER_FOR_PASSWORD_CHANGE
};
</pre>

Основная функция, <code>auth_simple_server()</code>, берет два параметра,
представляющие структуру ввода/вывода и структуру
<code>MYSQL_SERVER_AUTH_INFO</code>. Определение структуры, найденное в
<code>plugin_auth.h</code>, похоже на это:
<pre>
typedef struct st_mysql_server_auth_info
{
  char *user_name;
  unsigned int user_name_length;
  const char *auth_string;
  unsigned long auth_string_length;
  char authenticated_as[MYSQL_USERNAME_LENGTH+1];
  char external_user[512];
  int  password_used;
  const char *host_or_ip;
  unsigned int host_or_ip_length;
} MYSQL_SERVER_AUTH_INFO;
</pre>

Набор символов для строковых членов UTF-8. Если есть член
<code>_length</code>, связанный со строкой, это указывает на длину строки в
байтах. Строки также закончены нулем.</p>

<p>Когда плагин аутентификации вызван сервером, он должен интерпретировать
члены структуры <code>MYSQL_SERVER_AUTH_INFO</code>. Некоторые из них
используются, чтобы установить значение функций SQL или системных переменных
в пределах сеанса клиента, как обозначено.</p>

<ul><li><p><code>user_name</code>: Имя пользователя послано клиентом.
Значение становится значением функции
<a href="funct.htm#function_user"><code>USER()</code></a>.</li>
<li><code>user_name_length</code>: Длина <code>user_name</code> в байтах.
</li>

<li><code>auth_string</code>: Значение столбца
<code>authentication_string</code> строки таблицы <code>mysql.user</code>
для соответствующего имени учетной записи (то есть, строка, которая
соответствует имени пользователя клиента и имени хоста, которые использует
сервер, чтобы определить, как подтвердить подлинность клиента).</p>

<p>Предположите, что Вы создаете учетную запись, используя следующий запрос:
<pre>
CREATE USER 'my_user'@'localhost'
       IDENTIFIED WITH my_plugin AS 'my_auth_string';
</pre>
Когда <code>my_user</code> соединяется с локального хоста, сервер вызывает
<code>my_plugin</code> и передает ему <code>'my_auth_string'</code> как
значение <code>auth_string</code>.</li>

<li><code>auth_string_length</code>: Длина в байтах
<code>auth_string</code>.</li>
<li><code>authenticated_as</code>: Сервер устанавливает это в имя
пользователя (значение <code>user_name</code>). Плагин может изменить
это, чтобы указать, что у клиента должны быть привилегии иного пользователя.
Например, если плагин поддерживает пользователей по доверенности, начальное
значение имя соединяющегося пользователя (по доверенности), и плагин может
изменить этого участника на реальное имя пользователя. Сервер тогда
обрабатывает пользователя по доверенности с наличием привилегий реального
пользователя (предполагается, что другие условия для поддержки пользователей
по доверенности удовлетворены, см.
<a href="#writing-authentication-plugins-proxy-users">раздел
26.2.4.9.4</a>). Значение представлено как строка самое большее
<code>MYSQL_USER_NAME_LENGTH</code> байт в длину плюс заканчивающий нуль.
Значение становится значением функции
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>.
</li>

<li><code>external_user</code>: Сервер устанавливает это в пустую строку
(законченную нулем). Значение становится значением системной переменной
<a href="server.htm#sysvar_external_user"><code>external_user</code></a>.
Если плагин хочет, чтобы у этой системной переменной было иное значение, он
должен установить этот член соответственно, например, к имени соединяющегося
пользователя. Значение представлено как строка, самое большее 511 байтов
длиной, плюс заканчивающий нуль.</li>

<li><code>password_used</code>: Этот член применяется, когда аутентификация
терпит неудачу. Плагин может установить или проигнорировать это. Значение
используется, чтобы создать сообщение об ошибке отказа
<code>Authentication fails. Password used: %s</code>. Значение
<code>password_used</code> определяет, как обработан <code>%s</code>, как
показано в следующей таблице.</p>

<table border="1">
<thead><tr><th scope="col"><code>password_used</code></th>
<th scope="col">Обработка <code>%s</code></th></tr></thead>
<tbody><tr><td scope="row">0</td><td>Нет</td></tr>
<tr><td scope="row">1</td><td>Да</td></tr>
<tr><td scope="row">2</td><td>Должно быть не <code>%s</code></td>
</tr></tbody></table></li>

<li><p><code>host_or_ip</code>: Название хоста клиента, если это может быть
найдено, или IP-адрес иначе.</li>
<li><code>host_or_ip_length</code>: Длина в байтах
<code>host_or_ip</code>.</p></li></ul>

<p>Основная функция <code>auth_simple</code>,
<code>auth_simple_server()</code>, читает пароль (законченная нулем строка)
с клиента и проходит нормально, если пароль непуст (первый байт не нуль):
<pre>
static int auth_simple_server (MYSQL_PLUGIN_VIO *vio,
                               MYSQL_SERVER_AUTH_INFO *info)
{
  unsigned char *pkt;
  int pkt_len;

  /* read the password as null-terminated string, fail on error */
  if ((pkt_len = vio-&gt;read_packet(vio, &amp;pkt)) &lt; 0) return CR_ERROR;
  /* fail on empty password */
  if (!pkt_len || *pkt == '\0') {
     info-&gt;password_used= PASSWORD_USED_NO;
     return CR_ERROR;
  }
  /* accept any nonempty password */
  info-&gt;password_used= PASSWORD_USED_YES;
  return CR_OK;
}
</pre>
Основная функция должна возвратить один из кодов ошибки,
показанных в следующей таблице.</p>

<table border="1">
<thead><tr><th scope="col">Код ошибки</th><th scope="col">Значение</th></tr>
</thead>
<tbody><tr><td scope="row"><code>CR_OK</code></td><td>Успешно</td></tr>
<tr><td scope="row"><code>CR_OK_HANDSHAKE_COMPLETE</code></td>
<td>Не послан пакет состояния назад к клиенту</td></tr>
<tr><td scope="row"><code>CR_ERROR</code></td><td>Ошибка</td></tr>
<tr><td scope="row"><code>CR_AUTH_USER_CREDENTIALS</code></td>
<td>Отказ аутентификации</td></tr>
<tr><td scope="row"><code>CR_AUTH_HANDSHAKE</code></td>
<td>Отказ квитирования аутентификации</td></tr>
<tr><td scope="row"><code>CR_AUTH_PLUGIN_ERROR</code></td>
<td>Внутренняя ошибка плагина</td></tr></tbody></table>

<p>Для примера того, как квитирование работает, см. исходный файл
<code>plugin/auth/dialog.c</code>.</p>
<p>Сервер считает ошибки в таблице <a href="perfor.htm#host-cache-table">
<code>host_cache</code></a> Performance Schema.</p>

<p><code>auth_simple_server()</code> не использует информационную структуру
аутентификации кроме установки члена, который указывает, был
ли пароль получен.</p>

<p>Плагин, который поддерживает пользователей по доверенности, должен
возвратить серверу имя реального пользователя (пользователь MySQL, права
которого пользователь клиента должен получить). Чтобы сделать это, плагин
должен установить член <code>info-&gt;authenticated_as</code> в имя реального
пользователя. Для информации см. разделы
<a href="security.html#proxy-users">7.3.10</a> и
<a href="#writing-authentication-plugins-proxy-users">
26.2.4.9.4</a>.</p>

<p>Член <code>generate_authentication_string</code> описателя берет пароль и
производит хеш пароля:</p>
<ul><li><p>Первые два параметра указатели на выходной буфер и его
максимальную длину в байтах. Функция должна написать хеш пароля в выходной
буфер и сбросить длину к фактической длине хеша.</li>

<li>Вторые два параметра указывают на входной буфер пароля и
его длину в байтах.</li>
<li>Функция возвращается 0 для успеха, 1, если ошибка произошла.
</p></li></ul>

<p>Для плагина <code>auth_simple</code> функция
<code>generate_auth_string_hash()</code> осуществляет член
<code>generate_authentication_string</code>. Это только делает копию пароля,
если он не слишком длинный, чтобы поместиться в выходной буфер.
<pre>
int generate_auth_string_hash(char *outbuf, unsigned int *buflen,
const char *inbuf, unsigned int inbuflen)
{
  /* fail if buffer specified by server cannot be copied to output buffer
  */
  if (*buflen &lt; inbuflen) return 1;   /* error */
  strncpy(outbuf, inbuf, inbuflen);
  *buflen = strlen(inbuf);
  return 0; /* success */
}
</pre>

Член <code>validate_authentication_string</code> описателя
утверждает хеш пароля:</p>
<ul><li><p>Параметры указатель на хеш пароля и его длину в байтах.</li>
<li>Функция возвращает 0 для успеха, 1, если хеш пароля
не может быть утвержден.</p></li></ul>

<p>Для плагина <code>auth_simple</code> функция
<code>validate_auth_string_hash()</code> осуществляет член
<code>validate_authentication_string</code>.
Это возвращает успех безоговорочно:
<pre>
int validate_auth_string_hash(char* const inbuf  __attribute__((unused)),
    unsigned int buflen __attribute__((unused)))
{
  return 0; /* success */
}
</pre>

Член <code>set_salt</code> описателя используется только плагином
<code>mysql_native_password</code> (см.
<a href="security.html#native-authentication-plugin">раздел 7.5.1.1</a>).
Для других плагинов аутентификации Вы можете использовать
это тривиальное выполнение:
<pre>
int set_salt(const char* password __attribute__((unused)),
             unsigned int password_len __attribute__((unused)),
             unsigned char* salt __attribute__((unused)),
             unsigned char* salt_len)
{
  *salt_len= 0;
  return 0; /* success */
}
</pre>

Член <code>authentication_flags</code> описателя содержит флаги для работы
плагина аффекта. Разрешенные флаги:</p>
<ul><li><p><code>AUTH_FLAG_PRIVILEGED_USER_FOR_PASSWORD_CHANGE</code>:
Мандатные изменения привилегированная работа. Если этот флаг установлен,
сервер требует, чтобы у пользователя была глобальная привилегия
<a href="security.html#priv_create-user"><code>CREATE USER</code></a> или
<a href="security.html#priv_update"><code>UPDATE</code></a>
для базы данных <code>mysql</code>.</li>

<li><code>AUTH_FLAG_USES_INTERNAL_STORAGE</code>: Использует ли плагин
внутреннее хранение (в столбце <code>authentication_string</code> строк
<code>mysql.user</code>). Если этот флаг не установлен, попытки установить
использование пароля через <a href="sql.htm#set-password"><code>SET PASSWORD
</code></a> потерпят неудачу, а сервер произведет предупреждение.</p></li></ul>

<h5><a name="writing-authentication-plugins-client-side"></a>26.2.4.9.2.
Написание клиентского плагина аутентификации</h5>
<p>Объявите клиентский описатель плагина с макросами
<code>mysql_declare_client_plugin()</code> и
<code>mysql_end_client_plugin</code> (см.
<a href="#client-plugin-descriptors">раздел 26.2.4.2.3</a>). Для
плагина <code>auth_simple</code> описатель похож на это:
<pre>
mysql_declare_client_plugin(AUTHENTICATION)
  "auth_simple",   /* plugin name */
  "Author Name",   /* author */
  "Any-password authentication plugin", /* description */
  {1,0,0},   /* version = 1.0.0 */
  "GPL",     /* license type */
  NULL,      /* for internal use */
  NULL,      /* no init function */
  NULL,      /* no deinit function */
  NULL,      /* no option-handling function */
  auth_simple_client    /* main function */
mysql_end_client_plugin;
</pre>

Дескрипторные члены от имени плагина до обрабатывающей опцию функции
характерны для всех типов плагина клиента. Для описаний см.
<a href="#client-plugin-descriptors">раздел 26.2.4.2.3</a>.
После общих членов у описателя есть дополнительный член, определенный для
плагинов аутентификации. Это функция <span><span>main</span></span>,
которая обрабатывает коммуникацию с сервером. Функция берет два параметра,
представляющие структуру ввода/вывода и обработчик соединения. Для нашего
простого плагина любого пароля основная функция действительно только пишет
серверу пароль, обеспеченный пользователем:
<pre>
static int auth_simple_client (MYSQL_PLUGIN_VIO *vio, MYSQL *mysql)
{
  int res;

  /* send password as null-terminated string in clear text */
  res = vio-&gt;write_packet(vio, (const unsigned char *) mysql-&gt;passwd,
                             strlen(mysql-&gt;passwd) + 1);
  return res ? CR_ERROR : CR_OK;
}
</pre>
Основная функция должна возвратить один из кодов ошибки,
показанных в следующей таблице.</p>

<table border="1">
<thead><tr><th scope="col">Код ошибки</th><th scope="col">Значение</th>
</tr></thead>
<tbody><tr><td scope="row"><code>CR_OK</code></td><td>Успешно.</td></tr>
<tr><td scope="row"><code>CR_OK_HANDSHAKE_COMPLETE</code></td>
<td>Успешно, клиент готов.</td></tr>
<tr><td scope="row"><code>CR_ERROR</code></td>
<td>Ошибка.</td></tr></tbody></table>

<p><code>CR_OK_HANDSHAKE_COMPLETE</code> указывает, что клиент внес свой
вклад успешно и считал последний пакет. Плагин клиента может возвратит
<code>CR_OK_HANDSHAKE_COMPLETE</code>, если число обменов данными в протоколе
аутентификации неизвестно заранее, и плагин должен считать другой пакет,
чтобы определить, закончена ли аутентификация.</p>

<h5><a name="writing-authentication-plugins-setup"></a>26.2.4.9.3.
Использование плагина аутентификации</h5>
<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (указан в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.</p>

<p>Зарегистрируйте серверный плагин на сервере. Например, чтобы загрузить
плагин при запуске сервера, используйте опцию
<a href="server.htm#option_mysqld_plugin-load"><code>
--plugin-load=auth_simple.so</code></a> (корректируйте суффикс
<code>.so</code> для Вашей платформы по мере необходимости).</p>

<p>Создайте пользователя, для которого сервер будет использовать плагин
<code>auth_simple</code> для аутентификации:
<pre>
mysql&gt; CREATE USER 'x'@'localhost'
    -&gt; IDENTIFIED WITH auth_simple;
</pre>

Используйте программу клиента, чтобы соединиться с сервером как пользователь
<code>x</code>. Серверная часть плагина <code>auth_simple</code> общается с
программой клиента, так что это должно использовать клиентскую часть
<code>auth_simple</code> и послать пароль серверу. Плагин сервера должен
отклонить соединения, которые посылают пустой пароль и принимать соединения,
которые посылают непустой пароль. Вызовите программу клиента каждым способом,
чтобы проверить это:
<pre>
shell&gt; mysql --user=x --skip-password
ERROR 1045 (28000): Access denied for user 'x'@'localhost' (using password: NO)

shell&gt; mysql --user=x --password=abc
mysql&gt;
</pre>

Поскольку плагин сервера принимает любой непустой пароль, это нужно считать
небезопасным. После тестирования плагина, чтобы проверить, что это работает,
перезапустите сервер без опции
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code>
</a>, чтобы не оставлять сервер, работающий с загруженным опасным плагином
аутентификации. Кроме того, удалите пользователя с помощью
<a href="sql.htm#drop-user"><code>DROP USER 'x'@'localhost'</code></a>.</p>

<p>Если Вы пишете программу клиента, которая поддерживает использование
плагинов аутентификации, обычно такая программа загружает плагин, вызывая
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>, чтобы
установить опции <code>MYSQL_DEFAULT_AUTH</code> и
<code>MYSQL_PLUGIN_DIR</code>:
<pre>
char *plugin_dir = "<em><code>path_to_plugin_dir</code></em>";
char *default_auth = "<em><code>plugin_name</code></em>";

/* ... process command-line options ... */

mysql_options(&amp;mysql, MYSQL_PLUGIN_DIR, plugin_dir);
mysql_options(&amp;mysql, MYSQL_DEFAULT_AUTH, default_auth);
</pre>
Как правило, программа также примет опции <code>--plugin-dir</code> и
<code>--default-auth</code>, которые позволяют пользователям переопределить
значения по умолчанию.</p>

<p>Если программа клиента требует управления низшего уровня, библиотека
клиента содержит функции, которые берут параметр
an <code>st_mysql_client_plugin</code>. См.
<a href="connect.htm#c-api-plugin-functions">раздел 25.8.14</a>.</p>

<h5><a name="writing-authentication-plugins-proxy-users"></a>26.2.4.9.4.
Осуществление доступа пользователей по доверенности в плагинах аутентификации
</h5>
<p>Одна из способностей, которые аутентификация с помощью плагинов делает
возможными, является доступом пользователей по доверенности (см.
possible is proxy users (see <a href="security.html#proxy-users">раздел
7.3.10</a>). Для серверного плагина аутентификации, чтобы участвовать в этом,
должны быть удовлетворены эти условия:</p>

<ul><li><p>Когда соединяющийся клиент должен быть обработан как пользователь
по доверенности, плагин должен возвратить другое имя в члене
<code>authenticated_as</code> структуры <code>MYSQL_SERVER_AUTH_INFO</code>,
чтобы указать на реальное имя пользователя. Это может также произвольно
установить член <code>external_user</code>, чтобы установить значение
системной переменной <a href="server.htm#sysvar_external_user"><code>
external_user</code></a>.</li>

<li>Учетные записи пользователя по доверенности должны быть настроены так,
чтобы быть авторизованными плагином. Используйте
<a href="sql.htm#create-user"><code>CREATE USER</code></a> или
<a href="sql.htm#grant"><code>GRANT</code></a>, чтобы связать
учетные записи с плагинами.</li>

<li>Учетные записи пользователя по доверенности должны иметь привилегию
<a href="security.html#priv_proxy"><code>PROXY</code></a> для учетных
записей. Используйте <a href="sql.htm#grant"><code>GRANT</code></a>,
чтобы предоставить эту привилегию.</p></li></ul>

<p>Другими словами, единственный аспект пользовательской поддержки по
доверенности, требуемой от плагина, установить
<code>authenticated_as</code> к реальному имени пользователя. Остальное
является дополнительным (установка <code>external_user</code>)
или сделано DBA, использующей запросы SQL.</p>

<p>Как плагин аутентификации определяет, имя какого пользователя возвратить,
когда пользователь по доверенности соединяется? Это зависит от плагина. Как
правило, плагин отображает клиентов, основываясь на строке аутентификации,
переданной ему сервером. Эта строка прибывает из части <code>AS</code>
предложения <code>IDENTIFIED WITH</code> оператора
<a href="sql.htm#create-user"><code>CREATE USER</code></a>, которое
определяет использование плагина для аутентификации.</p>

<p>Разработчик определяет правила синтаксиса для строки аутентификации и
осуществляет плагин согласно тем правилам. Предположите, что плагин берет
список разделенных запятой значений пар, которые отображают внешних
пользователей на пользователей MySQL. Например:
<pre>
CREATE USER ''@'%.example.com'
  IDENTIFIED WITH my_plugin AS 'extuser1=mysqlusera, extuser2=mysqluserb'
CREATE USER ''@'%.example.org'
  IDENTIFIED WITH my_plugin AS 'extuser1=mysqluserc, extuser2=mysqluserd'
</pre>
Когда сервер вызывает плагин, чтобы подтвердить подлинность клиента, он
передает соответствующую строку аутентификации плагину. Плагин должен:</p>

<ol type="1"><li><p>Разобрать строку на компоненты, чтобы определить
отображение на использование.</li>
<li>Сравнить имя пользователя клиента с отображением.</li>
<li>Вернуть надлежащее имя пользователя MySQL.</p></li></ol>

<p>Например, если <code>extuser2</code> соединяется с хоста
<code>example.com</code>, сервер передает плагину
<code>'extuser1=mysqlusera, extuser2=mysqluserb'</code>, а плагин должен
скопировать <code>mysqluserb</code> в <code>authenticated_as</code> с
заканчивающим нулевым байтом. Если <code>extuser2</code> заходит с хоста
<code>example.org</code>, сервер передает плагину
<code>'extuser1=mysqluserc, extuser2=mysqluserd'</code>, а плагин должен
скопировать уже <code>mysqluserd</code>.</p>

<p>Если совпадений в отображении нет, действие зависит от плагина. Если
соответствие будет требоваться, то плагин, вероятно, возвратит ошибку.
Или плагин мог бы просто возвратить имя клиента: в этом случае, он не должен
изменить <code>authenticated_as</code>, и сервер не будет обрабатывать
клиента как имеющего полномочия от другого.</p>

<p>Следующий пример демонстрирует, как обработать пользователей по
доверенности, использующих плагин <code>auth_simple_proxy</code>.
Как и описанный ранее плагин <code>auth_simple</code>,
<code>auth_simple_proxy</code> принимает любой непустой пароль как допустимый
(и таким образом не должен использоваться в производственных средах). Кроме
того, он исследует член строки аутентификации <code>auth_string</code>
и использует очень простые правила для того, чтобы интерпретировать это:</p>

<ul><li><p>Если строка пуста, плагин возвращает имя пользователя как дано.
Таким образом, плагин оставляет значение
<code>authenticated_as</code> неизменным.</li>
<li>Если строка непуста, плагин обрабатывает ее как реальное имя пользователя
и копирует ее в <code>authenticated_as</code>.</p></li></ul>

<p>Для того, чтобы проверить, настройте одну учетную запись, которая не
является действующей как прокси (по доверенности), согласно предыдущим
правилам, и ту, которая является. Это означает, что одна учетная запись не
имеет предложения <code>AS</code>, а вторая имеет <code>AS</code>, которое
определяет другого пользователя:
<pre>
CREATE USER 'plugin_user1'@'localhost' IDENTIFIED WITH auth_simple_proxy;
CREATE USER 'plugin_user2'@'localhost'
            IDENTIFIED WITH auth_simple_proxy AS 'proxied_user';
</pre>

Кроме того, создайте учетку на доверенного пользователя
<code>plugin_user2</code> и привилегию
<a href="security.html#priv_proxy"><code>PROXY</code></a> для него:
<pre>
CREATE USER 'proxied_user'@'localhost' IDENTIFIED BY 'proxied_user_pass';
GRANT PROXY ON 'proxied_user'@'localhost'
            TO 'plugin_user2'@'localhost';
</pre>

Прежде, чем сервер вызывает плагин аутентификации, он устанавливает
<code>authenticated_as</code> к имени пользователя клиента. Чтобы указать,
что пользователь имеет полномочия другого, плагин должен установить
<code>authenticated_as</code> в имя реального пользователя. Для
<code>auth_simple_proxy</code> это означает, что надо смотреть значение
<code>auth_string</code> и, если значение непусто, копировать его в член
<code>authenticated_as</code>, чтобы возвратить это как реальное имя
пользователя. Кроме того, когда это происходит, плагин устанавливает член
<code>external_user</code> к имени пользователя клиента: это становится
значением системной переменной <a href="server.htm#sysvar_external_user">
<code>external_user</code></a>.
<pre>
static int auth_simple_proxy_server (MYSQL_PLUGIN_VIO *vio,
                                     MYSQL_SERVER_AUTH_INFO *info)
{
  unsigned char *pkt;
  int pkt_len;

  /* read the password as null-terminated string, fail on error */
  if ((pkt_len = vio-&gt;read_packet(vio, &amp;pkt)) &lt; 0) return CR_ERROR;
  /* fail on empty password */
  if (!pkt_len || *pkt == '\0') {
     info-&gt;password_used= PASSWORD_USED_NO;
     return CR_ERROR;
  }
  /* accept any nonempty password */
  info-&gt;password_used= PASSWORD_USED_YES;
  /* if authentication string is nonempty, use as proxied user name */
  /* and use client name as external_user value */
  if (info-&gt;auth_string_length &gt; 0) {
     strcpy (info-&gt;authenticated_as, info-&gt;auth_string);
     strcpy (info-&gt;external_user, info-&gt;user_name);
  }
  return CR_OK;
}
</pre>

После успешного соединения функция
<a href="funct.htm#function_user"><code>USER()</code></a> должна указать на
соединяющегося пользователя клиента и имя хоста, а
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
должна указать на учетную запись, привилегии которой применяются во время
сеанса. Последнее значение должно быть соединяющейся учетной записью
пользователя, если предоставления привилегий не происходит, или учетной
записью другого пользователя, если происходит.</p>

<p>Соберите и установите плагин, затем проверьте его. Во-первых, соединитесь
как <code>plugin_user1</code>:
<pre>
shell&gt; mysql --user=plugin_user1 --password=x
</pre>

В этом случае не должно быть никакого предоставления привилегий:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER(), @@proxy_user, @@external_user\G
*************************** 1. row ***************************
 USER(): plugin_user1@localhost
 CURRENT_USER(): plugin_user1@localhost
   @@proxy_user: NULL
@@external_user: NULL
</pre>

Тогда соединитесь как <code>plugin_user2</code>:
<pre>
shell&gt; mysql --user=plugin_user2 --password=x
</pre>

В этом случае <code>plugin_user2</code> должен быть отображен к
<code>proxied_user</code>:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER(), @@proxy_user, @@external_user\G
*************************** 1. row ***************************
 USER(): plugin_user2@localhost
 CURRENT_USER(): proxied_user@localhost
   @@proxy_user: 'plugin_user2'@'localhost'
@@external_user: 'plugin_user2'@'localhost'
</pre>

<h4><a name="writing-password-validation-plugins"></a>26.2.4.10.
Написание пплагинов проверки допустимости пароля</h4>
<p>Этот раздел описывает, как написать серверный плагин проверки допустимости
пароля. Инструкции основаны на исходном коде в каталоге
<code>plugin/password_validation</code> дистрибутива исходных текстов
MySQL. Файл <code>validate_password.cc</code> в этом каталоге осуществляет
плагин, названный <code>validate_password</code>.</p>

<p>Чтобы написать плагин проверки допустимости пароля, включите следующий
заголовочный файл в исходный файл.
<pre>
#include &lt;mysql/plugin_validate_password.h&gt;
</pre>

<code>plugin_validate_password.h</code> включает <code>plugin.h</code>,
таким образом, Вы не должны включать последний файл явно.
<code>plugin.h</code> определяет тип плагина сервера
<code>MYSQL_VALIDATE_PASSWORD_PLUGIN</code> и структуры данных.
<code>plugin_validate_password.h</code> определяет структуры данных,
определенные для плагинов проверки допустимости пароля.</p>

<p>У плагина проверки допустимости пароля, как и у любого плагина сервера
MySQL, есть общий описатель (см.
<a href="#server-plugin-descriptors">раздел
26.2.4.2.1</a>). В <code>validate_password.cc</code>
общий описатель похож на это:
<pre>
mysql_declare_plugin(validate_password)
{
  MYSQL_VALIDATE_PASSWORD_PLUGIN,     /*   type*/
  &amp;validate_password_descriptor,  /*   descriptor  */
  "validate_password",                /*   name*/
  "Oracle Corporation",               /*   author  */
  "check password strength",          /*   description */
  PLUGIN_LICENSE_GPL,
  validate_password_init,             /* init function (when loaded) */
  validate_password_deinit,           /* deinit function (when unloaded) */
  0x0100,                             /*   version */
  NULL,
  validate_password_system_variables, /*   system variables*/
  NULL, 0,
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> (<code>validate_password</code>)
указывает на имя, чтобы использовать для ссылок на плагин в
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>.</p>

<p>Общий описатель также обращается к структуре
<code>validate_password_system_variables</code>, которая выставляет несколько
системных переменных для запроса
<a href="sql.htm#show-variables"><code>SHOW VARIABLES</code></a>:
<pre>
static struct st_mysql_sys_var* validate_password_system_variables[]= {
  MYSQL_SYSVAR(length),
  MYSQL_SYSVAR(number_count),
  MYSQL_SYSVAR(mixed_case_count),
  MYSQL_SYSVAR(special_char_count),
  MYSQL_SYSVAR(policy),
  MYSQL_SYSVAR(dictionary_file), NULL
};
</pre>
Функция инициализации <code>validate_password_init</code> читает файл
словаря, если он был определен, а функция <code>validate_password_deinit
</code> освобождает структуры данных, связанные с файлом.</p>

<p>Значение <code>validate_password_descriptor</code> в общем описателе
указывает на определенный для типа описатель. Для плагинов проверки
допустимости пароля у этого описателя есть следующая структура:
<pre>
struct st_mysql_validate_password
{
  int interface_version;
  /*
    This function returns TRUE for passwords which satisfy the password
    policy (as chosen by plugin variable) and FALSE for
    all other password
  */
  int (*validate_password)(mysql_string_handle password);
  /*
    This function returns the password strength (0-100) depending
    upon the policies
  */
  int (*get_password_strength)(mysql_string_handle password);
};
</pre>
У определенного для типа описателя есть эти члены:</p>

<ul><li><p><code>interface_version</code>: В соответствии с соглашением,
определенные для типа описатели начинаются с версии интерфейса для данного
типа. Сервер проверяет <code>interface_version</code> когда загружает плагин,
чтобы видеть, совместим ли плагин с ним. Для плагинов проверки допустимости
пароля, значение члена <code>interface_version</code>
<code>MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION</code>
(определено в <code>plugin_validate_password.h</code>).</li>

<li><code>validate_password</code>: Функция, которую сервер вызывает, чтобы
проверить, удовлетворяет ли пароль текущую политику пароля. Это возвращает 1,
если пароль хорош и 0 иначе. Параметр пароль, который передают как значение
<code>mysql_string_handle</code>. Этот тип данных осуществлен
сервисом сервера <code>mysql_string</code>. Детали в файлах исходных текстов
<code>string_service.h</code> и <code>string_service.cc</code>
каталога <code>sql</code>.</li>

<li><code>get_password_strength</code>: Функция, которую сервер вызывает,
чтобы оценить силу пароля. Это возвращает значение от 0 (слабый) до 100
(сильный). Параметр пароль, который передают как значение
<code>mysql_string_handle</code>.</p></li></ul>

<p>Для плагина <code>validate_password</code> определенный для типа описатель
похож на это:
<pre>
static struct st_mysql_validate_password validate_password_descriptor =
{
  MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION,
  validate_password,     /* validate function  */
  get_password_strength  /* validate strength function */
};
</pre>

Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (указан в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>). Для
плагина <code>validate_password</code> это собрано и установлено, когда Вы
создаете MySQL из исходных текстов. Это также включено в двоичные
дистрибутивы. Процесс сборки производит совместно используемую библиотеку
объекта с названием <code>validate_password.so</code> (суффикс
<code>.so</code> может отличаться, в зависимости от Вашей платформы).</p>

<p>Чтобы зарегистрировать плагин во время выполнения, используйте этот запрос
(корректируйте суффикс <code>.so</code> для Вашей платформы
по мере необходимости):
<pre>
INSTALL PLUGIN validate_password SONAME 'validate_password.so';
</pre>

<p>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или примените <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code>
</a>. См. <a href="server.htm#obtaining-plugin-information">раздел 6.6.3</a>.
</p>

<p>В то время как плагин <code>validate_password</code> установлен, он
выставляет системные переменные, которые указывают на
проверяющие пароль параметры:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'validate_password%';
+--------------------------------------+--------+
| Variable_name                        | Value  |
+--------------------------------------+--------+
| validate_password_dictionary_file    |        |
| validate_password_length             | 8      |
| validate_password_mixed_case_count   | 1      |
| validate_password_number_count       | 1      |
| validate_password_policy             | MEDIUM |
| validate_password_special_char_count | 1      |
+--------------------------------------+--------+
</pre>

Для описаний этих переменных, см.
<a href="security.html#validate-password-options-variables">раздел 7.5.2.2
</a>.</p>

<p>Чтобы отключить плагин после тестирования, используйте этот запрос:
<pre>
UNINSTALL PLUGIN validate_password;
</pre>

<h4><a name="writing-protocol-trace-plugins"></a>26.2.4.11.
Написание плагинов трассировки протокола</h4>
<p>MySQL поддерживает использование плагинов трассировки протокола: это
клиентские плагины, которые осуществляют рассмотрение связи между клиентом и
сервером, которая имеет место при использовании протокола клиент-сервер.</p>

<h5><a name="test-protocol-trace-plugin"></a>26.2.4.11.1.
Использование испытательного плагина трассировки протокола</h5>
<p>MySQL включает испытательный плагин трассировки протокола, который служит,
чтобы иллюстрировать информацию, доступную от таких плагинов, и как
руководство по написанию других плагинов трассировки протокола. Чтобы видеть,
как испытательный плагин работает, используйте исходные тексты MySQL.</p>

<p>Включите испытательный плагин трассировки протокола, конфигурируя MySQL с
включенной опцией <span><strong>CMake</strong></span>
<a href="install.htm#option_cmake_with_test_trace_plugin"><code>
WITH_TEST_TRACE_PLUGIN</code></a>. Это соберет испытательный плагин
трассировки и программы клиента MySQL загрузят его, но плагин не имеет
никакого эффекта по умолчанию. Управляйте плагином, используя
эти переменные окружения:</p>

<ul><li><p><code>MYSQL_TEST_TRACE_DEBUG</code>: Установите эту переменную в
значение кроме 0, чтобы заставить испытательный плагин производить
диагностический вывод на <code>stderr</code>.</li>

<li><code>MYSQL_TEST_TRACE_CRASH</code>: Установите эту переменную в значение
кроме 0, чтобы заставить испытательный плагин прерывать программу клиента,
если это обнаруживает недопустимый случай трассировки.</p></li></ul>

<p>Диагностический вывод испытательного плагина трассировки протокола может
раскрыть пароли и другую чувствительную информацию.</p>
<p>Используя установку MySQL, созданную из исходных текстов с испытательным
плагином, Вы можете видеть трассировку связи между клиентом и сервером
MySQL следующим образом:
<pre>
shell&gt; export MYSQL_TEST_TRACE_DEBUG=1
shqll&gt; mysql
test_trace: Test trace plugin initialized
test_trace: Starting tracing in stage CONNECTING
test_trace: stage: CONNECTING, event: CONNECTING
test_trace: stage: CONNECTING, event: CONNECTED
test_trace: stage: WAIT_FOR_INIT_PACKET, event: READ_PACKET
test_trace: stage: WAIT_FOR_INIT_PACKET, event: PACKET_RECEIVED
test_trace: packet received: 87 bytes
  0A 35 2E 37 2E 33 2D 6D  31 33 2D 64 65 62 75 67   .5.7.3-m13-debug
  2D 6C 6F 67 00 04 00 00  00 2B 7C 4F 55 3F 79 67   -log.....+|OU?yg
test_trace: 004: stage: WAIT_FOR_INIT_PACKET, event: INIT_PACKET_RECEIVED
test_trace: 004: stage: AUTHENTICATE, event: AUTH_PLUGIN
test_trace: 004: Using authentication plugin: mysql_native_password
test_trace: 004: stage: AUTHENTICATE, event: SEND_AUTH_RESPONSE
test_trace: 004: sending packet: 188 bytes
  85 A6 7F 00 00 00 00 01  21 00 00 00 00 00 00 00   .?......!.......
  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ................
...
mysql&gt; quit
test_trace: 008: stage: READY_FOR_COMMAND, event: SEND_COMMAND
test_trace: 008: QUIT
test_trace: 008: stage: READY_FOR_COMMAND, event: PACKET_SENT
test_trace: 008: packet sent: 0 bytes
test_trace: 008: stage: READY_FOR_COMMAND, event: DISCONNECTED
test_trace: 008: Connection  closed
test_trace: 008: Tracing connection has ended
Bye
test_trace: Test trace plugin de-initialized
</pre>

Чтобы отключить вывод трассировки, сделайте это:
<pre>
shell&gt; MYSQL_TEST_TRACE_DEBUG=
</pre>

<h5><a name="using-own-protocol-trace-plugins"></a>26.2.4.11.2.
Применение Ваших собственных плагинов трассировки протокола</h5>
<p>Чтобы использовать Ваш собственный плагин трассировки протокола, Вы должны
сконфигурировать MySQL с опцией <span><em>выключенной</em></span>
<span><strong>CMake</strong></span>
<a href="install.htm#option_cmake_with_test_trace_plugin"><code>
WITH_TEST_TRACE_PLUGIN</code></a>, потому что только один плагин трассировки
протокола может быть загружен за один раз, и ошибка происходит для попыток
загрузить второй. Если Вы уже создали MySQL с испытательным плагином
трассировки протокола, Вы должны восстановить MySQL без этого прежде, чем Вы
сможете использовать свои собственные плагины.</p>

<p>Этот раздел обсуждает, как написать плагин <code>simple_trace</code>.
Этот плагин служит основой, показывающей, как настроить описатель плагина
клиента и создать связанные функции обратного вызова. В
<code>simple_trace</code> эти функции являются элементарными и только
иллюстрирует требуемые параметры. Чтобы видеть подробно, как плагин
трассировки может использовать информацию о событии трассировки, изучите
исходный файл для испытательного плагина
(<code>test_trace_plugin.cc</code> в каталоге <code>libmysql</code>
исходных текстов MySQL. Однако, отметьте что структура
<code>st_mysql_client_plugin_TRACE</code>, используемая там, отличается от
структур, используемых с обычным макроопределением декларации плагина
клиента. В частности, первые два члена определены явно, а не
неявно макроопределением декларации.</p>

<p>Несколько заголовочных файлов содержат информацию, относящуюся к
плагинам трассировки протокола:</p>
<ul><li><p><code>client_plugin.h</code>: Определяет API для плагинов клиента.
Это включает описатель плагина клиента и прототипы функций для C API плагина
клиента (см. <a href="connect.htm#c-api-plugin-functions">раздел 25.8.14
</a>).</li>

<li><code>plugin_trace.h</code>: Содержит декларации для клиентских плагинов
типа <code>MYSQL_CLIENT_TRACE_PLUGIN</code>. Это также содержит описания
разрешенных этапов протокола, переходов между этапами и типов событий,
разрешенных на каждом этапе.</p></li></ul>

<p>Чтобы написать плагин, включите следующие заголовочные
файлы в исходный файл:
<pre>
#include &lt;mysql/plugin_trace.h&gt;
#include &lt;mysql.h&gt;
</pre>
<code>plugin_trace.h</code> включает <code>client_plugin.h</code>,
таким образом, Вы не должны включать последний файл явно.</p>

<p>Объявите клиентский описатель плагина с макросами
<code>mysql_declare_client_plugin()</code> и
<code>mysql_end_client_plugin</code> (см.
<a href="#client-plugin-descriptors">раздел 26.2.4.2.3</a>).
Для плагина <code>simple_trace</code> описатель похож на это:
<pre>
mysql_declare_client_plugin(TRACE)
  "simple_trace",                 /* plugin name */
  "Author Name",                  /* author */
  "Simple protocol trace plugin", /* description */
  {1,0,0},                        /* version = 1.0.0 */
  "GPL",                          /* license type */
  NULL,                           /* for internal use */
  plugin_init,     /* initialization function */
  plugin_deinit,   /* deinitialization function */
  plugin_options,  /* option-handling function */
  trace_start,     /* start-trace function */
  trace_stop,      /* stop-trace function */
  trace_event      /* event-handling function */
mysql_end_client_plugin;
</pre>

Члены дескриптора от имени до обрабатывающей опции функции характерны для
всех типов плагина клиента. Члены после общих участников осуществляют
обработку трассировки событий.</p>

<p>Функциональные члены для которых плагин не нуждается ни в какой обработке,
могут быть объявлены как <code>NULL</code> в описателе, когда Вы не должны
писать соответствующую функцию. В целях иллюстрации синтаксиса параметров,
следующее обсуждение осуществляет все функции, перечисленные в описателе,
даже при том, что некоторые из них ничего не делают.</p>

<p>Функции инициализации, завершения и опций, характерные для всех плагинов
клиента, объявлены следующим образом. Для описания параметров и возвращаемых
значений, см. <a href="#client-plugin-descriptors">раздел
26.2.4.2.3</a>.
<pre>
static int plugin_init(char *errbuf, size_t errbuf_len, int argc,
                       va_list args)
{
  return 0;
}

static int plugin_deinit()
{
  return 0;
}

static int plugin_options(const char *option, const void *value)
{
  return 0;
}
</pre>

Определенные для трассировки члены описателя плагина клиента функции
обратного вызова. Следующие описания обеспечивают больше деталей о том, как
они используются. У каждой есть первый параметр, который является указателем
на событие в случае, если Ваше выполнение должно получить доступ к нему.</p>

<p><code>trace_start()</code>: Эта функция вызвана в начале каждого
прослеженного соединения (каждое соединение, которое запускается после того,
как плагин загружен). Это передает обработчик соединения и этап протокола, на
котором запускается рассмотрение. <code>trace_start()</code> выделяет память,
необходимую функции <code>trace_event()</code>, если таковая вообще имеется,
и возвращает указатель на это. Если никакая память не нужна, эта
функция возвращет <code>NULL</code>.
<pre>
static void* trace_start(struct st_mysql_client_plugin_TRACE *self,
                         MYSQL *conn, enum protocol_stage stage)
{
  struct st_trace_data *plugin_data= malloc(sizeof(struct st_trace_data));

  fprintf(stderr, "Initializing trace: stage %d\n", stage);
  if (plugin_data) {
     memset(plugin_data, 0, sizeof(struct st_trace_data));
     fprintf(stderr, "Trace initialized\n");
     return plugin_data;
  }
  fprintf(stderr, "Could not initialize trace\n");
  exit(1);
}
</pre>

<code>trace_stop()</code>: Эта функция вызвана при завершении соединения. Это
обычно происходит, когда соединение закрыто, но может произойти ранее.
Например, <code>trace_event()</code> может возвратить ненулевое значение в
любое время, и это заставляет рассмотрение соединения заканчиваться.
<code>trace_stop()</code> тогда вызывается даже при том, что
соединение не закончилось.</p>

<p><code>trace_stop()</code> передан обработчик соединения и указатель на
память, выделенную <code>trace_start()</code> (<code>NULL</code>, если нет).
Если указатель не-<code>NULL</code>, <code>trace_stop()</code>
должна освободить память. Эта функция не возвращает значения.
<pre>
static void trace_stop(struct st_mysql_client_plugin_TRACE *self,
                       MYSQL *conn, void *plugin_data)
{
  fprintf(stderr, "Terminating trace\n");
  if (plugin_data) free(plugin_data);
}
</pre>

<code>trace_event()</code>: Эта функция вызвана для каждого возникновения
событий. Ей передают указатель на память, выделенную
<code>trace_start()</code> (<code>NULL</code>, если нет), обработчик
соединения, текущий этап протокола, коды и данные событий. Эта функция
возвращает 0, чтобы продолжить прослеживать, отличное от нуля значение, если
рассмотрение должно остановиться.
<pre>
static int trace_event(struct st_mysql_client_plugin_TRACE *self,
                       void *plugin_data, MYSQL *conn,
                       enum protocol_stage stage,
                       enum trace_event event,
                       struct st_trace_event_args args)
{
  fprintf(stderr, "Trace event received: stage %d, event %d\n", stage, event);
  if (event == TRACE_EVENT_DISCONNECTED)
     fprintf(stderr, "Connection closed\n");
  return 0;
}
</pre>

Структура рассмотрения закрывает рассмотрение соединения, когда соединение
заканчивается, таким образом, <code>trace_event()</code> должна возвратить
отличное от нуля значение только, если Вы хотите закончить рассмотрение
соединения раньше. Предположите, что Вы хотите проследить только соединения
для определенной учетной записи MySQL. После аутентификации Вы можете
проверить имя пользователя на соединении и прекратить прослеживать, если это
оказался не тот пользователь, которым Вы интересуетесь.</p>

<p>Для каждого <code>trace_event()</code> структура
<code>st_trace_event_args</code> содержит данные событий.
У нее есть это определение:
<pre>
struct st_trace_event_args
{
  const char   *plugin_name;
  int cmd;
  const unsigned char  *hdr;
  size_thdr_len;
  const unsigned char  *pkt;
  size_tpkt_len;
};
</pre>

Для различных типов событий структура
<code>st_trace_event_args</code> содержит информацию, описанную ниже. Все
длины в байтах. Неиспользованные члены установлены в
<code>0</code>/<code>NULL</code>.</p>

<p>Событие <code>AUTH_PLUGIN</code>:
<pre>
plugin_name  The name of the plugin
</pre>

Событие <code>SEND_COMMAND</code>:
<pre>
cmd  The command code
hdr  Pointer to the command packet header
hdr_len Length of the header
pkt  Pointer to the command arguments
pkt_len Length of the arguments
</pre>

Другие события <code>SEND_<em><code>xxx</code></em></code>
и <code><em><code>xxx</code></em>_RECEIVED</code>:
<pre>
pkt  Pointer to the data sent or received
pkt_len Length of the data
</pre>

Событие <code>PACKET_SENT</code>:
<pre>
pkt_len Number of bytes sent
</pre>

Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (указан в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).</p>

<p>После того, как файл библиотеки собран и установлен в каталоге, Вы можете
его проверить устанавливая переменную окружения <code>LIBMYSQL_PLUGINS</code>
к имени плагина, это затрагивает любую программу клиента, которая
использует эту переменную. <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a> одна из них:
<pre>
shell&gt; export LIBMYSQL_PLUGINS=simple_trace
shqll&gt; mysql
Initializing trace: stage 0
Trace initialized
Trace event received: stage 0, event 1
Trace event received: stage 0, event 2
...
Welcome to the MySQL monitor.  Commands end with ; or \g.
Trace event received
Trace event received
...
mysql&gt; SELECT 1;
Trace event received: stage 4, event 12
Trace event received: stage 4, event 16
...
Trace event received: stage 8, event 14
Trace event received: stage 8, event 15
+---+
| 1 |
+---+
| 1 |
+---+
1 row in set (0.00 sec)

mysql&gt; quit
Trace event received: stage 4, event 12
Trace event received: stage 4, event 16
Trace event received: stage 4, event 3
Connection closed
Terminating trace
Bye
</pre>

Чтобы остановить трассировку, скомандуйте:
<pre>
shell&gt; LIBMYSQL_PLUGINS=
</pre>

Также возможно написать программы клиента, которые непосредственно загружают
плагин. Вы можете сказать клиенту, где расположен каталог плагинов, вызывая
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>, чтобы
установить опцию <code>MYSQL_PLUGIN_DIR</code>:
<pre>
char *plugin_dir = "<em><code>path_to_plugin_dir</code></em>";

/* ... process command-line options ... */

mysql_options(&amp;mysql, MYSQL_PLUGIN_DIR, plugin_dir);
</pre>
Как правило, программа также примет опцию <code>--plugin-dir</code>, которая
позволяет пользователям переопределить значение по умолчанию.</p>

<p>Если программа клиента требует управления низшего уровня, библиотека
клиента содержит функции, которые берут параметр
<code>st_mysql_client_plugin</code>. См.
<a href="connect.htm#c-api-plugin-functions">раздел 25.8.14</a>.</p>

<h4><a name="writing-keyring-plugins"></a>26.2.4.12.
Написание плагинов ключей</h4>
<p>MySQL Server поддерживает службу, которая позволяет внутренним серверным
компонентам и плагинам надежно хранить чувствительную информацию для более
позднего извлечения. Этот раздел описывает, как написать серверный плагин,
который может использоваться служебными функциями, чтобы выполнить операции
ключевого менеджмента. Для общей информации см.
<a href="security.html#keyring">раздел 7.5.3</a>.</p>

<p>Инструкции здесь основаны на исходном коде в каталоге
<code>plugin/keyring</code> исходных текстов MySQL. Исходные файлы в том
каталоге осуществляют плагин <code>keyring_file</code> это использует файл,
локальный с точки зрения сервера для хранения данных.</p>

<p>Чтобы написать плагин, включите следующий заголовочный
файл в исходный файл.
<pre>
#include &lt;mysql/plugin_keyring.h&gt;
</pre>

<code>plugin_keyring.h</code> включает <code>plugin.h</code>,
таким образом, Вы не должны включать последний файл явно.
<code>plugin.h</code> определяет тип плагина сервера
<code>MYSQL_KEYRING_PLUGIN</code> и структуры данных.
<code>plugin_keyring.h</code> определяет структуры данных,
определенные для плагинов.</p>

<p>Как любой плагин сервера MySQL, плагин ключей имеет общий описатель (см.
<a href="#server-plugin-descriptors">раздел 26.2.4.2.1</a>). В
<code>keyring.cc</code> общий описатель похож на это:
<pre>
mysql_declare_plugin(keyring_file)
{
  MYSQL_KEYRING_PLUGIN,       /* type */
  &amp;keyring_descriptor,    /* descriptor */
  "keyring_file",             /* name */
  "Oracle Corporation",       /* author   */
  "store/fetch authentication data to/from a flat file", /* description */
  PLUGIN_LICENSE_GPL,
  keyring_init,               /* init function (when loaded)  */
  keyring_deinit,             /* deinit function (when unloaded)  */
  0x0100,                     /* version  */
  NULL,                       /* status variables */
  keyring_system_variables,   /* system variables */
  NULL, 0,
}
mysql_declare_plugin_end;
</pre>

Член <code>name</code> (<code>keyring_file</code>) указывает на имя, чтобы
использовать для ссылок на плагин в
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Это также имя, выведенное на экран
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>.</p>

<p>Общий описатель также обращается к структуре
<code>keyring_system_variables</code>, которая выставляет системную
переменную для <a href="sql.htm#show-variables"><code>SHOW VARIABLES</code>
</a>:
<pre>
static struct st_mysql_sys_var *keyring_system_variables[] =
       {MYSQL_SYSVAR(data), NULL};
</pre>

Функция инициализации <code>keyring_init</code> создает файл с данными, если
он не существует, затем читает его и инициализирует хранилище ключей. Функция
<code>keyring_deinit</code> освобождает структуры данных, связанные с файлом.
</p>

<p>Значение <code>keyring_descriptor</code> в общем описателе указывает на
определенный для типа описатель. Для плагинов ключей у этого описателя
есть следующая структура:
<pre>
struct st_mysql_keyring
{
  int interface_version;
  my_bool (*mysql_key_store)(const char *key_id, const char *key_type,
           const char* user_id, const void *key, size_t key_len);
  my_bool (*mysql_key_fetch)(const char *key_id, char **key_type,
           const char *user_id, void **key, size_t *key_len);
  my_bool (*mysql_key_remove)(const char *key_id, const char *user_id);
  my_bool (*mysql_key_generate)(const char *key_id, const char *key_type,
           const char *user_id, size_t key_len);
};
</pre>
У определенного для типа описателя есть эти члены:</p>

<ul><li><p><code>interface_version</code>: В соответствии с соглашением,
определенные для типа описатели начинаются с версии интерфейса для данного
типа. Сервер проверяет <code>interface_version</code>, когда загружает
плагин, чтобы видеть, совместим ли плагин с ним. Для плагинов ключей значение
члена <code>interface_version</code>
<code>MYSQL_KEYRING_INTERFACE_VERSION</code>
(определено в <code>plugin_keyring.h</code>).</li>

<li><code>mysql_key_store</code>: Функция, которая шифрует и хранит ключ.
</li>
<li><code>mysql_key_fetch</code>:
Функция, которая дешифрует и возвращает ключ.</li>
<li><code>mysql_key_remove</code>: Функция, которая удаляет ключ.</li>
<li><code>mysql_key_generate</code>: Функция, которая производит
новый случайный ключ.</p></li></ul>

<p>Для плагина <code>keyring_file</code> определенный для типа описатель
похож на это:
<pre>
static struct st_mysql_keyring keyring_descriptor =
{
  MYSQL_KEYRING_INTERFACE_VERSION,
  mysql_key_store, mysql_key_fetch,
  mysql_key_remove, mysql_key_generate
};
</pre>

Функции <code>mysql_key_<em><code>xxx</code></em></code>, осуществленные
плагином, аналогичны функциям <code>my_key_<em><code>xxx</code></em></code>,
выставленным службой keyring API. Для информации о параметрах этих функций и
как они используются, см. <a href="#keyring-service">раздел 26.3.2
</a>.</p>

<p>Чтобы собрать и установить файл библиотеки, используйте инструкции в
<a href="#compiling-plugin-libraries">разделе 26.2.4.3</a>.
Чтобы сделать файл библиотеки доступным для использования, установите его в
каталог плагинов (указан в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>). Для
плагина <code>keyring_file</code>, это собрано и установлено, когда Вы
создаете MySQL из исходных текстов. Это также включено в двоичные
дистрибутивы. Процесс сборки производит совместно используемую библиотеку
объекта с названием <code>keyring_file.so</code> (суффикс <code>.so</code>
может отличаться в зависимости от Вашей платформы).</p>

<p>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или примените <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code>
</a> (см. <a href="server.htm#obtaining-plugin-information">раздел 6.6.3
</a>). Например:
<pre>
mysql&gt; SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS
    -&gt; WHERE PLUGIN_NAME LIKE 'keyring%';
+--------------+---------------+
| PLUGIN_NAME  | PLUGIN_STATUS |
+--------------+---------------+
| keyring_file | ACTIVE        |
+--------------+---------------+
</pre>

В то время как плагин <code>keyring_file</code> установлен, он выставляет
системную переменную, которая указывает на местоположение файла с данными,
который он использует для безопасного информационного хранения:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'keyring_file%';
+-------------------+----------------------------------+
| Variable_name     | Value                            |
+-------------------+----------------------------------+
| keyring_file_data | /usr/local/mysql/keyring/keyring |
+-------------------+----------------------------------+
</pre>

Для описания переменной
<a href="server.htm#sysvar_keyring_file_data"><code>keyring_file_data</code>
</a> см. <a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p>Чтобы отключить плагин после тестирования, перезапустите сервер без
опции <a href="server.htm#option_mysqld_early-plugin-load">
<code>--early-plugin-load</code></a>, которая вызывает плагин.</p>

<h2><a name="plugin-services"></a>26.3. Сервисы MySQL для плагинов</h2>
<p>У плагинов сервера MySQL есть доступ к <span>сервисам (службам)</span>.
Интерфейс служб выставляет функциональность сервера, которую могут вызвать
плагины. Это дополняет API и имеет эти характеристики:</p>

<ul><li><p>Службы позволяют плагинам доступ к коду сервера, используя обычные
вызовы функции. Службы также доступны определяемым
пользователем функциям (UDF).</li>

<li>Службы портативны и работают под разными платформами.</li>
<li>Интерфейс включает механизм версий, чтобы версии службы, поддержанные
сервером, могли быть проверены во время загрузки. Это защищает от
несовместимостей между версией услуги, которую сервер оказывает и версией
службы, ожидаемой или требуемой плагином.</li>

<li>Для информации о плагинах для того, чтобы проверить службы, см.
<a href="../../../dev.mysql.com/doc/mysqltest/2.0/en/service-testing-plugins.html"
target="_top">Plugins for Testing Plugin Services</a>, в
<a href="../../../dev.mysql.com/doc/mysqltest/2.0/en/default.htm" target="_top">
The MySQL Test Framework, Version 2.0</a>.</p></li></ul>

<p>Интерфейс служб отличается от API плагинов следующим образом:</p>
<ul><li><p>API позволяет плагинам использоваться сервером. Инициатива запроса
всегда на стороне с сервера. Он вызывает плагины. Это позволяет плагинам
расширить функциональность сервера или регистроваться, чтобы получить
уведомления о действиях сервера.</li>

<li>Интерфейс служб позволяет плагинам вызвать код в сервере. Инициатива
запроса на стороне плагина. Это позволяет функциональности, уже
осуществленной в сервере, использоваться многими плагинами: они не должны
индивидуально осуществить это непосредственно.</p></li></ul>

<p>Чтобы определить, какие службы существуют и что они обеспечивают,
смотрите каталог <code>include/mysql</code> в дистрибутиве исходных текстов
MySQL. Соответствующие файлы:</p>

<ul><li><p><code>plugin.h</code> включает <code>services.h</code>,
который включает все доступные определенные для служб заголовочные файлы.
</li>
<li>У определенных для служб заголовков есть названия формы
<code>service_<em><code>xxx</code></em>.h</code>.</p></li></ul>

<p>Каждый определенный для службы заголовок должен содержать комментарии,
которые обеспечивают полную документацию использования для данной службы,
включая то, какие служебные функции доступны, их последовательности
запроса и возвращаемые значения.</p>

<p>Текущие службы включают следующее, но другие могут быть добавлены:
<ul><li><p><code>locking_service</code>: Служба, которая осуществляет
блокировки с тремя признаками: пространство имен, имя и режим. Этот интерфейс
блокировки доступен на двух уровнях: 1) Как интерфейс языка C, вызываемый как
служба от плагинов сервера или определяемых пользователем функций, 2) На
уровне SQL, как ряд определяемых пользователем функций, которые отображаются
на вызовы сервисов. Для получения дополнительной информации см.
<a href="#locking-service">раздел 26.3.1</a>.</li>

<li><code>my_plugin_log_service</code>: Служба, которая позволяет плагинам
сообщить об ошибках и определить сообщения об ошибках. Сервер пишет сообщения
в свой журнал ошибок.</li>

<li><code>my_snprintf</code>: Форматирующая строку служба, которая приводит к
последовательным результатам, независимо от платформы.</li>
<li><code>my_thd_scheduler</code>: Служба для плагинов, чтобы
выбрать планировщик потока.</li>

<li><code>mysql_keyring</code>: Служба для хранения ключей.
Для получения дополнительной информации см.
<a href="#keyring-service">раздел 26.3.2</a>.</li>

<li><code>mysql_password_policy</code>: Служба для проверки допустимости
пароля и проверки его силы.</li>
<li><code>mysql_string</code>: Служба для обработки строк.</li>
<li><code>plugin_registry_service</code>: MySQL Server включает основанную на
компонентах инфраструктуру для того, чтобы улучшить расширяемость сервера,
см. <a href="server.htm#server-components">раздел 6.5</a>. Однако, плагины
MySQL используют интерфейс, который предшествует компонентному интерфейсу.
<code>plugin_registry_service</code> позволяет плагинам получить доступ к
компонентной регистрации и ее службам.</p>

<li><code>security_context</code>: Служба, которая позволяет плагинам
исследовать или управлять контекстами безопасности потока. Эта служба
обеспечивает установку и получение атрибутов получателя, чтобы получить
доступ к признакам сервера <code>Security_context</code>, который включает
такие признаки, как пользователь входа в систему и хост, доверенный
пользователь и хост, IP-адрес клиента.</li>

<li><code>thd_alloc</code>: Служба распределения памяти.</li>
<li><code>thd_wait</code>: Служба для плагинов, чтобы сообщить, когда они
засыпают или останавливаются.</p></li></ul>

<p>Исходный текст MySQL содержит внутреннюю документацию, созданную с помощью
Doxygen. Эта документация полезна для понимания, как MySQL работает с точки
зрения разработчика. Произведенный контент Doxygen доступен на
<a href="../../../dev.mysql.com/doc/dev/mysql-server/latest/default.htm" target="_top">
http://dev.mysql.com/doc/dev/mysql-server/latest/</a>.
Также возможно произвести этот контент локально из исходных текстов MySQL,
используя инструкции в
<a href="install.htm#source-installation-doxygen">разделе 2.8.7</a>.</p>

<p>Остаток этого раздела описывает, как плагин использует функциональность
сервера, которая доступна как служба. См. также в качестве примера исходный
текст для плагина <span>daemon</span>, который использует сервис
<code>my_snprintf</code>. В дистрибутиве исходных текстов MySQL плагин
находится в каталоге <code>plugin/daemon_example</code>.</p>

<p>Чтобы использовать службу или службы изнутри плагина, исходный файл должен
включать заголовочный файл <code>plugin.h</code> для доступа к связанной
со службами информации:
<pre>
#include &lt;mysql/plugin.h&gt;
</pre>

Это не представляет дополнительных проблем установки. Плагин должен включать
тот файл так или иначе, потому что это содержит определения и структуры, в
которых нуждается каждый плагин.</p>

<p>Чтобы получить доступ к службе, плагин вызывает служебные функции как
любые другие функции. Например, чтобы отформатировать строку в буфер для
того, чтобы ее напечатать, вызовите функцию <code>my_snprintf()</code>,
обеспеченную службой того же самого имени:
<pre>
char buffer[BUFFER_SIZE];
my_snprintf(buffer, sizeof(buffer), <em><code>format_string</code></em>,
            <em><code>argument_to_format</code></em>, ...);
</pre>

Чтобы сообщить ошибку, которую сервер впишет в журнал ошибок, сначала
выберите уровень ошибки. <code>mysql/service_my_plugin_log.h</code>
определяет эти уровни:
<pre>
enum plugin_log_level
{
  MY_ERROR_LEVEL, MY_WARNING_LEVEL, MY_INFORMATION_LEVEL
};
</pre>

Тогда вызовите <code>my_plugin_log_message()</code>:
<pre>
int my_plugin_log_message(MYSQL_PLUGIN *plugin, enum plugin_log_level level,
                          const char *format, ...);
</pre>

Например:
<pre>
my_plugin_log_message(plugin_ptr, MY_ERROR_LEVEL, "Cannot initialize plugin");
</pre>

Некоторые услуги <span><em>для</em></span> плагинов могут быть оказаны
<span><em>плагинами</em></span> и таким образом доступны, только если
обеспечивающий службу плагин загружен. Любой компонент MySQL, который
использует такую службу, должен проверить, доступна ли служба.</p>

<p>Когда Вы создаете свой плагин, используйте флаг
<code>-lmysqlservices</code> во время компоновки, чтобы скомпоновать с
библиотекой <code>libmysqlservices</code>. Например, для
<span><strong>CMake</strong></span> поместите это в начало файла
<code>CMakeLists.txt</code>:
<pre>
FIND_LIBRARY(MYSQLSERVICES_LIB mysqlservices
             PATHS "${MYSQL_SRCDIR}/libservices" NO_DEFAULT_PATH)
</pre>

Поместите это в файл <code>CMakeLists.txt</code>
в каталоге, содержащем исходный текст плагина:
<pre>
# the plugin needs the mysql services library for error logging
TARGET_LINK_LIBRARIES (<em><code>your_plugin_library_name</code></em> ${MYSQLSERVICES_LIB})
</pre>

<h3><a name="locking-service"></a>26.3.1. Служба блокировки</h3>
<p>Дистрибутивы обеспечивают интерфейс блокировки, который доступен
на двух уровнях:</p>

<ul><li><p>Как интерфейс языка C, вызываемый как служба из плагинов сервера
или определяемых пользователем функций.</li>
<li>На уровне SQL, как ряд определяемых пользователем функций, которые
отображаются на вызовы службы.</p></li></ul>

<p>У интерфейса блокировки есть эти характеристики:</p>
<ul><li><p>У блокировок есть три признака: пространство имен, имя и режим.</p>

<ul><li><p>Блокировки идентифицированы комбинацией пространства имен и имени.
Пространство имен позволяет различным приложениям использовать те же самые
имена блокировки, не сталкиваться, создавая блокировки в отдельных
пространствах имен. Например, если приложения A и B используют пространства
имен <code>ns1</code> и <code>ns2</code>, соответственно, каждое приложение
может использовать имена блокировки <code>lock1</code> и <code>lock2</code>
не вмешиваясь в другое приложение.</li>

<li>Режим блокировки чтение или запись. Блокировки чтения совместно
использованы: если у сеанса есть блокировка чтения и заданный идентификатор
блокировки, другие сеансы могут получить блокировку чтения, использщуя
тот же самый идентификатор. Блокировки записи исключительны: если у сеанса
есть блокировка записи, другие сеансы не могут получить блокировку чтения или
записи, используя тот же самый идентификатор.</p></li></ul>

</li><li><p>Пространство имен и имена блокировки должны быть
не-<code>NULL</code>, непустым и иметь максимальную длину 64 символа.
Пространство имен или имя блокировки, определенное как
<code>NULL</code>, пустая строка или строка длинней 64 символов, приводит к
ошибке <a href="error.htm#error_er_locking_service_wrong_name">
<code>ER_LOCKING_SERVICE_WRONG_NAME</code></a>.</li>

<li>Интерфейс блокировки обрабатывает пространство имен и имена блокировки
как двоичные строки, таким образом, сравнения
являются чувствительными к регистру.</li>

<li>Интерфейс блокировки обеспечивает функции, чтобы приобрести и освободить
блокировки. Никакая специальная привилегия не нужна, чтобы вызывать эти
функции. Проверка привилегии ответственность приложения.</li>

<li>Блокировки могут ждать ресурс, если немедленно он не доступен.
Требования приобретения блокировки берут значение тайм-аута целого числа,
которое указывает сколько секунд ждать, чтобы приобрести блокировку перед
отказом. Если тайм-аут достигнут без успешного приобретения блокировки,
будет ошибка <a href="error.htm#error_er_locking_service_timeout"><code>
ER_LOCKING_SERVICE_TIMEOUT</code></a>. Если тайм-аут 0, нет никакого
ожидания, и требование производит ошибку, если блокировки не могут
быть немедленно приобретены.</li>

<li>Интерфейс блокировки обнаруживает тупик между требованиями приобретения
блокировки в различных сеансах. В этом случае служба блокировки выбирает
вызывающего и заканчивает запрос приобретения блокировки с ошибкой
<a href="error.htm#error_er_locking_service_deadlock"><code>
ER_LOCKING_SERVICE_DEADLOCK</code></a>. Эта ошибка не заставляет транзакции
отмениться. Чтобы выбрать сеанс в случае тупика, служба блокировки
предпочитает сеансы, которые держат блокировки чтения.</li>

<li>Сеанс может приобрести много блокировок единственным требованием
приобретения блокировки. Для данного требования приобретение блокировки
является атомным: требование успешно, если все блокировки приобретены. Если
приобретение какой-либо блокировки терпит неудачу, требование не приобретает
блокировок и терпит неудачу целиком, как правило с ошибкой
<a href="error.htm#error_er_locking_service_timeout"><code>
ER_LOCKING_SERVICE_TIMEOUT</code></a> или
<a href="error.htm#error_er_locking_service_deadlock"><code>
ER_LOCKING_SERVICE_DEADLOCK</code></a>.</li>

<li>Сеанс может приобрести много блокировок для того же самого идентификатора
блокировки (комбинация пространства имен и имени). Это могут быть блокировки
чтения, записи или смесь обоих вариантов.</li>

<li>Блокировки, приобретенные в пределах сеанса, освобождаются явно, вызывая
функцию освобождения блокировок, или неявно, когда сеанс заканчивается.
Блокировки не освобождаются, когда транзакции передаются или откатываются.
</li>
<li>В пределах сеанса все блокировки для данного пространства
имен освобождаются совместно.</p></li></ul>

<p>Интерфейс, обеспеченный службой блокировки, отличен от обеспеченного
функциями SQL <a href="funct.htm#function_get-lock"><code>GET_LOCK()</code>
</a> и связанными с ней (см.
<a href="funct.htm#miscellaneous-functions">раздел 13.18</a>). Например,
<a href="funct.htm#function_get-lock"><code>GET_LOCK()</code></a>
не осуществляет пространства имен и обеспечивает
только исключительные блокировки.</p>

<h4><a name="locking-service-c-interface"></a>26.3.1.1.
C Интерфейс службы блокировки</h4>
<p>Этот раздел описывает, как использовать интерфейс языка C службы
блокировки. Чтобы использовать интерфейс UDF вместо этого, см.
<a href="#locking-service-udf-interface">раздел 26.3.1.2</a>.</p>

<p>Исходные файлы, которые используют службу блокировки, должны включать
этот заголовочный файл:
<pre>
#include &lt;mysql/service_locking.h&gt;
</pre>

Чтобы приобрести одну или более блокировок, вызовите эту функцию:
<pre>
int mysql_acquire_locking_service_locks(MYSQL_THD opaque_thd,
          const char* lock_namespace,
          const char**lock_names,
          size_t lock_num,
          enum enum_locking_service_lock_type lock_type,
          unsigned long lock_timeout);
</pre>

У параметров есть эти значения:
<ul><li><p><code>opaque_thd</code>: Дескриптор потока. Если определено как
<code>NULL</code>, дескриптор для текущего потока используется.</li>

<li><code>lock_namespace</code>: Законченная нулем строка, которая указывает
на пространство имен блокировки.</li>
<li><code>lock_names</code>: Массив законченных нулем строк, который
обеспечивает названия блокировок.</li>

<li><code>lock_num</code>: Число имен в массиве <code>lock_names</code>.</li>
<li><code>lock_type</code>: Режим блокировки:
<code>LOCKING_SERVICE_READ</code> или <code>LOCKING_SERVICE_WRITE</code>.
</li>
<li><code>lock_timeout</code>: Число (целое) секунд, сколько ждать
приобретения блокировки перед отказом.</p></li></ul>

<p>Чтобы освободить блокировки для данного пространства имен,
вызовите эту функцию:</p>

<pre>
int mysql_release_locking_service_locks(MYSQL_THD opaque_thd,
                                        const char* lock_namespace);
</pre>

У параметров есть эти значения:</p>
<ul><li><p><code>opaque_thd</code>: Дескриптор потока. Если определено как
<code>NULL</code>, дескриптор для текущего потока используется.</li>
<li><code>lock_namespace</code>: Законченная нулем строка, которая указывает
на пространство имен блокировки.</p></li></ul>

<p>Приобретенные блокировки или ждущие службу блокировки, могут быть
проверены на уровне SQL, используя Performance Schema. Подробности в
<a href="#locking-service-monitoring">разделе 26.3.1.2.3</a>.</p>

<h4><a name="locking-service-udf-interface"></a>26.3.1.2.
Служба блокировки и интерфейс UDF</h4>
<p>Этот раздел описывает, как использовать службу блокировки с интерфейсом
UDF. Чтобы использовать интерфейс языка C вместо этого, см.
<a href="#locking-service-c-interface">раздел 26.3.1.1</a>.</p>

<h5><a name="locking-service-udf-installation"></a>26.3.1.2.1.
Установка или удаление интерфейса блокировок UDF</h5>
<p>Функции службы блокировки, описанные в
<a href="#locking-service-c-interface">разделе 26.3.1.1</a>
не должны быть установлены, потому что они встроены в сервер. То же самое не
верно для определяемых пользователем функций (UDF), которые отображаются на
вызовы службы: UDF должен быть установлен перед использованием. Этот раздел
описывает, как сделать это. Для общей информации об установке UDF см.
<a href="#udf-compiling">раздел 26.4.2.5</a>.</p>

<p>Служба блокировки UDF осуществлена в файле библиотеки, расположенном в
каталоге, названном в системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.
Базовое имя файла <code>locking_service</code>. Суффикс имени файла
отличается на разных платформах (<code>.so</code> для Unix,
<code>.dll</code> для Windows).</p>

<p>Чтобы установить службу блокировки UDF, используйте запрос
<a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a>
(корректируйте суффикс <code>.so</code> для Вашей платформы
по мере необходимости):
<pre>
CREATE FUNCTION service_get_read_locks RETURNS INT SONAME 'locking_service.so';
CREATE FUNCTION service_get_write_locks RETURNS INT SONAME 'locking_service.so';
CREATE FUNCTION service_release_locks RETURNS INT SONAME 'locking_service.so';
</pre>
Если UDF используются на основном сервере репликации, установите ее на всех
ведомых серверах также, чтобы избежать проблем.</p>

<p>После того, как установлена, UDF остается установленной, пока не удалят.
Чтобы удалить ее, используйте
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>:
<pre>
DROP FUNCTION service_get_read_locks;
DROP FUNCTION service_get_write_locks;
DROP FUNCTION service_release_locks;
</pre>

<h5><a name="locking-service-udf-usage"></a>26.3.1.2.2.
Использование интерфейса блоокировок в UDF</h5>
<p>Перед использованием службы блокировки UDF, установите их согласно
инструкциям, обеспеченным в
<a href="#locking-service-udf-installation">разделе
26.3.1.2.1</a>.</p>

<p>Чтобы приобрести одну или более блокировок чтения, вызовите эту функцию:
<pre>
mysql&gt; SELECT service_get_read_locks('mynamespace', 'rlock1', 'rlock2', 10);
+---------------------------------------------------------------+
| service_get_read_locks('mynamespace', 'rlock1', 'rlock2', 10) |
+---------------------------------------------------------------+
| 1                                                             |
+---------------------------------------------------------------+
</pre>

Первый параметр пространство имен блокировки. Заключительный параметр
тайм-аут указывающий сколько секунд ждать, чтобы приобрести блокировки перед
отказом. Остальными параметрами являются имена блокировок.</p>

<p>Для показанного примера функция приобретает блокировки с идентификаторами
<code>(mynamespace, rlock1)</code> и <code>(mynamespace, rlock2)</code>.</p>
<p>Чтобы приобрести блокировки записи, а не чтения, вызывают эту функцию:
<pre>
mysql&gt; SELECT service_get_write_locks('mynamespace', 'wlock1', 'wlock2', 10);
+----------------------------------------------------------------+
| service_get_write_locks('mynamespace', 'wlock1', 'wlock2', 10) |
+----------------------------------------------------------------+
|  1                                                             |
+----------------------------------------------------------------+
</pre>
В этом случае идентификаторы блокировки
<code>(mynamespace, wlock1)</code> и <code>(mynamespace, wlock2)</code>.</p>

<p>Чтобы освободить все блокировки для пространства имен,
используйте эту функцию:
<pre>
mysql&gt; SELECT service_release_locks('mynamespace');
+--------------------------------------+
| service_release_locks('mynamespace') |
+--------------------------------------+
| 1                                    |
+--------------------------------------+
</pre>

Каждая функция блокировки возвращает отличное от нуля значение для успеха.
Если функция терпит неудачу, происходит ошибка. Например, следующая ошибка
происходит, потому что имена блокировки не могут быть пустыми:
<pre>
mysql&gt; SELECT service_get_read_locks('mynamespace', '', 10);
ERROR 3131 (42000): Incorrect locking service lock name ''.
</pre>

Сеанс может приобрести много блокировок для того же самого идентификатора
блокировки. Пока у иного сеанса нет блокировки записи для идентификатора,
сеанс может приобрести любое число блокировок чтения или записи. Каждый
запрос блокировки об идентификаторе приобретает новую блокировку. Следующие
запросы приобретают три блокировки записи с тем же самым идентификатором, а
потом три блокировки чтения для того же самого идентификатора:
<pre>
SELECT service_get_write_locks('ns', 'lock1', 'lock1', 'lock1', 0);
SELECT service_get_read_locks('ns', 'lock1', 'lock1', 'lock1', 0);
</pre>

Если Вы исследуете таблицу <code>metadata_locks</code> Performance Schema,
Вы найдете, что сеанс держит шесть отличных блокировок с тем же самым
идентификатором <code>(ns, lock1)</code>. Для деталей см.
<a href="#locking-service-monitoring">раздел 26.3.1.2.3</a>.</p>

<p>Поскольку сеанс держит минимум одну блокировку записи на
<code>(ns, lock1)</code>, никакой другой сеанс не может приобрести блокировку
чтения или записи. Если сессия хранит только блокировку чтения для
идентификатора, другие сеансы могли бы приобрести блокировки чтения, но не
записи для него.</p>

<p>Блокировки для единственного требования приобретения блокировки
приобретены атомарно, но атомичность не держится между вызовами. Таким
образом, для следующего запроса, где <code>service_get_write_locks()</code>
вызывают для каждой строки результатов, атомичность держится для каждого
отдельного требования, но не для всего запроса в целом:
<pre>
SELECT service_get_write_locks('ns', 'lock1', 'lock2', 0) FROM t1 WHERE ... ;
</pre>

<p>Поскольку служба блокировки возвращает отдельную блокировку для каждого
успешного запроса о данном идентификаторе блокировки, для единственного
запроса возможно приобрести большое количество блокировок. Например:
<pre>
INSERT INTO ... SELECT service_get_write_locks('ns', t1.col_name, 0) FROM t1;
</pre>

У этих типов запросов могут быть определенные отрицательные воздействия.
Например, если часть запроса провалилась с отменой транзакции, то блокировки,
приобретенные на грани отказа, будут все еще существовать. Кроме того, если
важно, чтобы блокировки предоставили в определенном порядке, знайте, что
порядок набора результатов может отличаться, в зависимости от плана
выполнения, выбранного оптимизатором. По этим причинам может быть лучше
ограничить приложения единственным требованием приобретения
блокировки за запрос.</p>

<h5><a name="locking-service-monitoring"></a>26.3.1.2.3.
Контроль службы блокировки</h5>
<p>Служба блокировки осуществлена, используя структуру блокировок метаданных
сервера MySQL, таким образом, Вы контролируете приобретенные или ждущие
блокировки службы, исследуя таблицу
<code>metadata_locks</code> Performance Schema.</p>

<p>Включите инструмент блокировки метаданных:
<pre>
mysql&gt; UPDATE performance_schema.setup_instruments SET ENABLED = 'YES'
    -&gt; WHERE NAME = 'wait/lock/metadata/sql/mdl';
</pre>

Приобретите некоторые блокировки и проверьте содержание
таблицы <code>metadata_locks</code>:
<pre>
mysql&gt; SELECT service_get_write_locks('mynamespace', 'lock1', 0);
+----------------------------------------------------+
| service_get_write_locks('mynamespace', 'lock1', 0) |
+----------------------------------------------------+
|  1                                                 |
+----------------------------------------------------+
mysql&gt; SELECT service_get_read_locks('mynamespace', 'lock2', 0);
+---------------------------------------------------+
| service_get_read_locks('mynamespace', 'lock2', 0) |
+---------------------------------------------------+
| 1                                                 |
+---------------------------------------------------+
mysql&gt; SELECT OBJECT_TYPE, OBJECT_SCHEMA, OBJECT_NAME, LOCK_TYPE, LOCK_STATUS
    -&gt; FROM performance_schema.metadata_locks
    -&gt; WHERE OBJECT_TYPE = 'LOCKING SERVICE'\G
*************************** 1. row ***************************
  OBJECT_TYPE: LOCKING SERVICE
OBJECT_SCHEMA: mynamespace
  OBJECT_NAME: lock1
    LOCK_TYPE: EXCLUSIVE
  LOCK_STATUS: GRANTED
*************************** 2. row ***************************
  OBJECT_TYPE: LOCKING SERVICE
OBJECT_SCHEMA: mynamespace
  OBJECT_NAME: lock2
    LOCK_TYPE: SHARED
  LOCK_STATUS: GRANTED
</pre>

Блокировки службы имеют значение <code>OBJECT_TYPE</code>
<code>LOCKING SERVICE</code>. Это отлично от, например, блокировки,
приобретенной с помощью функции <a href="funct.htm#function_get-lock">
<code>GET_LOCK()</code></a>, у которой
<code>OBJECT_TYPE</code> <code>USER LEVEL LOCK</code>.</p>

<p>Пространство имен блокировки, имя и режим появляются в столбцах
<code>OBJECT_SCHEMA</code>, <code>OBJECT_NAME</code> и
<code>LOCK_TYPE</code>. Блокировки чтения и записи имеют значения
<code>LOCK_TYPE</code> соответственно
<code>SHARED</code> и <code>EXCLUSIVE</code>.</p>

<p>Значение <code>LOCK_STATUS</code> <code>GRANTED</code>
для приобретенной блокировки и <code>PENDING</code> для ждущей.
Вы будете видеть <code>PENDING</code>, если один сеанс держит блокировку
заииси, а другой пытается приобрести блокировку, имеющую тот
же самый идентификатор.</p>

<h5><a name="locking-service-udf-reference"></a>26.3.1.2.4.
Интерфейса UDF: служба блокировок</h5>
<p>Интерфейс SQL к службе блокировки осуществляет определяемые пользователем
функции, описанные в этом разделе. Для примеров использования см.
<a href="#locking-service-udf-usage">раздел 26.3.1.2.2</a>.</p>

<p>Функции совместно используют эти характеристики:</p>
<ul><li><p>Возвращаемое значение является отличным от нуля для успеха.
Иначе происходит ошибка.</li>

<li>Пространство имен и имена блокировки должны быть не-<code>NULL</code>,
непустыми и иметь максимальную длину в 64 символа.</li>
<li>Значения тайм-аута должны быть целыми числами, указывающими сколько
секунд ждать, чтобы приобрести блокировки перед отказом с ошибкой. Если
тайм-аут 0, нет никакого ожидания, и функция производит ошибку, если
блокировки не могут быть немедленно приобретены.</p></li></ul>

<p>Служба блокировки UDF доступна:</p>
<ul><li><p><code>service_get_read_locks(<em><code>namespace</code></em>,
<em><code>lock_name</code></em>[, <em><code>lock_name</code></em>] ...,
<em><code>timeout</code></em>)</code></p>

<p>Приобретает одну или более блокировок чтения (совместно используемых) в
данном пространстве имен, используя данные имена блокировки и тайм-аут с
ошибкой, если блокировки не приобретены в пределах данного
значения тайм-аута.</li>

<li><code>service_get_write_locks(<em><code>namespace</code></em>,
<em><code>lock_name</code></em>[, <em><code>lock_name</code></em>] ...,
<em><code>timeout</code></em>)</code></p>

<p>Приобретает одну или более блокировок записи в данном пространстве имен,
используя данные имена блокировки и тайм-аут с ошибкой, если блокировки не
приобретены в пределах данного значения тайм-аута.</li></li>

<li><code>service_release_locks(<em><code>namespace</code></em>)</code></p>
<p>Для данного пространства имен освобождает все блокировки, которые были
приобретены в пределах текущего использования сеанса
<code>service_get_read_locks()</code> и
<code>service_get_write_locks()</code>.</p>
<p>Если блокировок нет в пространстве имен, это не ошибка.</p></li></ul>

<h3><a name="keyring-service"></a>26.3.2. Сервис Keyring</h3>
<p>MySQL Server поддерживает службу keyring, которая позволяет внутренним
серверным компонентам и плагинам надежно хранить чувствительную информацию
для более позднего извлечения. Этот раздел описывает, как использовать
служебные функции, чтобы сохранить, получить и удалить ключи в MySQL keyring.
Интерфейс SQL к служебным функциям также доступен как ряд определяемых
пользователем функций (UDF), см.
<a href="security.html#keyring-udfs">раздел 7.5.3.3</a>.</p>

<p><span>Запись</span> в хранилище состоит из данных (ключ непосредственно)
и уникального идентификатора, через который получают доступ к ключу. У
идентификатора есть две части:</p>

<ul><li><p><code>key_id</code>: ID или имя. Значение <code>key_id</code>,
которые начинаются с <code>mysql_</code>, зарезервированы MySQL Server.</li>
<li><code>user_id</code>: Эффективный ID сеанса. Если нет никакого
пользовательского контекста, это значение может быть <code>NULL</code>.
Значение не должно фактически быть <span>пользователем</span>: например,
<code>InnoDB</code> использует ID табличного пространства, чтобы управлять
ключами для табличных пространств.</p>

<p>Функции, которые осуществляют интерфейс UDF, передают значение
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a> как
значение <code>user_id</code> функциям сервиса keyring.</p></li></ul>

<p>У служебных функций keyring есть эти характеристики:</p>
<ul><li><p>Каждая функция возвращает 0 для успеха, 1 для отказа.</li>
<li>Параметры <code>key_id</code> и <code>user_id</code> формируют уникальную
комбинацию, указывающую который ключ использовать.</li>

<li>Параметр <code>key_type</code> обеспечивает дополнительную информацию о
ключе, такую как его метод шифрования или предназначенное использование.</li>
<li>Служебные функции Keyring обрабатывают ID ключей, имена пользователя,
типы и значения как двоичные строки , таким образом, сравнения являются
чувствительными к регистру. Например, ID <code>MyKey</code> и
<code>mykey</code> относятся к различным ключам.</p></li></ul>

<p>Эти служебные функции доступны:</p>
<ul><li><p><code>my_key_fetch()</code></p>
<p>Дешифрует и возвращает ключ, наряду с его типом. Функция выделяет память
для буферов, используемых, чтобы сохранить возвращенный ключ
и ключевой тип. Синтаксис:
<pre>
my_bool my_key_fetch(const char *key_id, const char **key_type,
                     const char* user_id, void **key, size_t *key_len)
</pre>

Параметры:
<ul><li><p><code>key_id</code>, <code>user_id</code>: Законченные нулем
строки, задают как пара уникальный идентификатор, указывающий,
который ключ принести.</li>

<li><code>key_type</code>: Адрес буферного указателя. Функция хранит в этом
указатель на законченную нулем строку, которая обеспечивает дополнительную
информацию о ключе (сохранена, когда ключ был добавлен).</li>

<li><code>key</code>: Адрес буферного указателя. Функция хранит в этом
указатель на буфер, содержащий принесенные ключевые данные.</li>
<li><code>key_len</code>: Адрес переменной, в которой функция хранит размер в
байтах буфера <code>*key</code>.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает 0 для успеха, 1 для отказа.</li>

<li><code>my_key_generate()</code></p>
<p>Производит новый случайный ключ длиной <code>key_len</code>
и связывает его с идентификатором, сформированным из <code>key_id</code> и
<code>user_id</code>. Тип и значения длины должны быть совместимыми со
значениями, поддержанными основным плагином
(<a href="#keyring-key-types-table">таблица 26.4</a> показывает
разрешенные типы). При успехе произведенный ключ должен
быть добавлен в хранилище.</p>

<a name="keyring-key-types-table"></a><p><b>Таблица 26.4.
Ключевые типы плагина</b></p>
<table>
<thead><tr><td align="center">Имя плагина</td>
<td align="center">Допустимые типы ключей</td></tr></thead>
<tbody><tr><td><code>keyring_file</code></td>
<td><code>AES</code>, <code>DSA</code>, <code>RSA</code></td>
</tr></tbody></table>

<p>Синтаксис:
<pre>
my_bool my_key_generate(const char *key_id, const char *key_type,
                        const char *user_id, size_t key_len)
</pre>
Параметры:</p>
<ul><li><p><code>key_id</code>, <code>user_id</code>:
Законченные нулем строки, как пара определяют уникальный идентификатор для
ключа, который будет произведен.</li>

<li><code>key_type</code>: Законченная нулем строка, которая обеспечивает
дополнительную информацию о ключе.</li>
<li><code>key_len</code>: Размер в байтах ключа, который будет произведен.
</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает 0 для успеха, 1 для отказа.</li>

<li><code>my_key_remove()</code></p>
<p>Удаляет ключ из хранилища.</p>
<p>Синтаксис:
<pre>
my_bool my_key_remove(const char *key_id, const char* user_id)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>, <code>user_id</code>:
Законченные нулем строки, как пара определяют уникальный идентификатор для
ключа, который будет удален.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает 0 для успеха, 1 для отказа.</li>

<li><code>my_key_store()</code>
<p>Шифрует и хранит ключ в хранилище.</p>
<p>Синтаксис:
<pre>
my_bool my_key_store(const char *key_id, const char *key_type,
                     const char* user_id, void *key, size_t key_len)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>, <code>user_id</code>:
Законченные нулем строки, как пара определяют уникальный идентификатор для
ключа, который будет сохранен.</li>

<li><code>key_type</code>: Законченная нулем строка, которая обеспечивает
дополнительную информацию о ключе.</li>
<li><code>key</code>: Буфер, содержащий ключевые данные,
которые будут сохранены.</li>
<li><code>key_len</code>: Размер в байтах <code>key</code>.</p></li></ul>

<p>Возвращаемые значения:</p>
<p>Возвращает 0 для успеха, 1 для отказа.</li></ul>

<h2><a name="adding-functions"></a>26.4. Добавление новых функций в MySQL</h2>
<p>Есть три способа добавить новые функции к MySQL:</p>
<ul><li><p>Вы можете добавить функции через определяемую пользователем
функцию (UDF). Определяемые пользователем функции собраны как файлы
библиотеки и затем добавлены или удалены динамически, используя запросы
<a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a> и
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>. См.
<a href="sql.htm#create-function-udf">раздел 14.7.3.1</a>.</li>

<li>Вы можете добавить функции как нативные (встроенные) функции MySQL.
Нативные функции собраны в сервере <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> и становятся доступными
на постоянной основе.</li>

<li>Другой способ добавить функции, это создать сохраненные функции. Они
написаны, используя запросы SQL, а не собирая код объекта. Синтаксис для
того, чтобы написать сохраненные функции не покрыт здесь. См.
<a href="stored.htm#stored-routines">раздел 21.2</a>.</p></li></ul>

<p>У каждого метода создания функций есть преимущества и недостатки:</p>
<ul><li><p>Если Вы пишете определяемые пользователем функции, Вы должны
установить файлы объекта в дополнение к серверу непосредственно. Если Вы
встраиваете свою функцию в сервер, Вы не должны сделать этого.</li>

<li>Нативные функции требуют, чтобы Вы изменили исходный текст. Вы можете
добавить UDF к двоичному дистрибутиву MySQL. Никакой доступ к исходному
тексту MySQL не нужен.</li>

<li>Если Вы обновляете MySQL, Вы можете продолжить использовать свои ранее
установленные UDF, если Вы не обновляетесь до более новой версии, для которой
UDF-интерфейс изменился. Для нативных функций Вы должны повторить свои
модификации каждый раз, когда Вы обновляете сервер.</p></li></ul>

<p>Какой бы ни был метод, который Вы используете, чтобы добавить новые
функции, они могут быть вызваны в запросах SQL точно так же, как родные
функции, такие как
<a href="funct.htm#function_abs"><code>ABS()</code></a> или
<a href="funct.htm#function_soundex"><code>SOUNDEX()</code></a>.</p>

<p>См. <a href="lang.htm#function-resolution">раздел 10.2.4</a> для правил,
описывающих, как сервер интерпретирует ссылки на различные виды функций.</p>
<p>Следующие разделы описывают особенности интерфейса UDF, обеспечивают
инструкции для того, чтобы написать UDF, обсуждают предосторожности
безопасности, которые MySQL предпринимает, чтобы предотвратить неправильное
употребление UDF, и описывают, как добавить нативные функции MySQL.</p>

<p>Например, исходный код, который иллюстрирует, как написать UDF, можно
посмотреть в файле <code>sql/udf_example.cc</code>, который обеспечен в
исходных текстах MySQL.</p>

<p>Исходный текст MySQL содержит внутреннюю документацию, созданную с
применением Doxygen. Эта документация полезна для понимания, как MySQL
работает с точки зрения разработчика. Произведенный контент Doxygen доступен
на <a href="../../../dev.mysql.com/doc/dev/mysql-server/latest/default.htm" target="_top">
http://dev.mysql.com/doc/dev/mysql-server/latest/</a>. Также возможно
произвести этот контент локально из дистрибутива исходных текстов MySQL,
используя инструкции в <a href="install.htm#source-installation-doxygen">
разделе 2.8.7</a>.</p>

<h3><a name="udf-features"></a>26.4.1. Особенности определяемого
пользователем функционального интерфейса</h3>
<p>Интерфейс MySQL для определяемых пользователем функций обеспечивает
следующие особенности и способности:</p>

<ul><li><p>Функции могут возвратить строку, целое или реальное число и могут
принять параметры тех же самых типов.</li>
<li>Вы можете определить простые функции, которые воздействуют на
единственную строку за один раз, или совокупные функции, которые воздействуют
на группы строк.</li>

<li>Информация, предоставленная функциям, позволяет им проверить число, типы
и названия переданных параметров.</li>
<li>Вы можете сказать MySQL привести параметры к заданному типу прежде, чем
передать их функции.</li>
<li>Вы можете указать, что функция возвращает <code>NULL</code>
или что ошибка произошла.</p></li></ul>

<h3><a name="adding-udf"></a>26.4.2.
Добавление новой определяемой пользователем функции</h3>
<p>Для механизма UDF функции должны быть написаны на C или C++, и Ваша
операционная система должна поддерживать динамическую загрузку. Исходные
тексты MySQL включают файл <code>sql/udf_example.cc</code>, который
определяет пять функций UDF. Консультируйтесь с этим файлом, чтобы видеть,
как работают UDF. Заголовочный файл <code>include/mysql_com.h</code>
определяет связанные с UDF символы и структуры данных, хотя Вы не должны
включать этот заголовочный файл непосредственно: это включено
<code>mysql.h</code>.</p>

<p>UDF содержит код, который становится частью рабочего сервера, так что,
когда Вы пишете UDF, Вы связаны всеми ограничениями, которые относятся к
написанию кода сервера. Например, у Вас могут быть проблемы, если Вы
пытаетесь использовать функции из библиотеки <code>libstdc++</code>. Эти
ограничения могут измениться в будущих версиях сервера, таким образом,
возможно, что обновления сервера потребуют пересмотра UDF, которые были
первоначально написаны для более старых серверов. Для информации об этих
ограничениях, см. разделы <a href="install.htm#source-configuration-options">
2.8.4</a> и <a href="install.htm#compilation-problems">2.8.5</a>.</p>

<p>Чтобы быть в состоянии использовать UDFs, Вы должны скомпоновать
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
динамически. Если Вы хотите использовать UDF, который должен получить доступ
к символам из <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> (например, функция <code>metaphone</code> в
<code>sql/udf_example.cc</code> использует
<code>default_charset_info</code>), Вы должны скомпоновать программу с
<code>-rdynamic</code> (см. <code>man dlopen</code>).</p>

<p>Для каждой функции, которую Вы хотите использовать в запросах SQL, Вы
должны определить соответствующую C (или C++) функцию. В следующем обсуждении
имя <span>xxx</span> используется для имени функции в качестве примера. Чтобы
различать SQL и C/C++ использование, <code>XXX()</code> (верхний регистр)
указывает на вызов функции SQL, а <code>xxx()</code> (нижний регистр)
указывает на C/C++ вызов функции.</p>

<p>Используя C++ Вы можете инкапсулировать свои функции C в пределах:
<pre>
extern "C" { ... }
</pre>
Это гарантирует, что Ваши C++ имена функций остаются
читаемыми в завершенном UDF.</p>

<p>Следующий список описывает C/C++ функции, которые Вы пишете, чтобы
осуществить интерфейс для названной функции <code>XXX()</code>. Основная
функция, <code>xxx()</code>, обязательна. Кроме того, UDF требует по крайней
мере одну из других функций, описанных здесь, по причинам, обсуждаемым в
<a href="#udf-security">разделе 26.4.2.6</a>.</p>

<ul><li><p><code>xxx()</code></p>
<p>Основная функция. Это то место, где функциональный результат вычислен.
Связь между типом данных функции SQL и типом возвращения Вашей C/C++
функции показывают здесь.</p>

<table border="1">
<thead><tr><th scope="col">Тип в SQL Type</th><th scope="col">Тип в C/C++
</th></tr></thead>
<tbody><tr><td scope="row"><code>STRING</code></td><td><code>char *</code>
</td></tr>
<tr><td scope="row"><a href="types.htm#integer-types"><code>INTEGER</code>
</a></td><td><code>long long</code></td></tr>
<tr><td scope="row"><a href="types.htm#floating-point-types"><code>REAL
</code></a></td><td><code>double</code></td></tr></tbody></table>

<p>Также возможно объявить функцию
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>, но в
настоящее время значение возвращено как строка, таким образом, Вы должны
написать UDF, как если бы это была функция типа <code>STRING</code>.
Функции <code>ROW</code> не реализованы.</li>

<li><code>xxx_init()</code></p>
<p>Функция инициализации для <code>xxx()</code>. Если существует, это может
использоваться в следующих целях:</p>
<ul><li><p>Проверять число параметров <code>XXX()</code>.</li>
<li>Проверить, что параметры имеют необходимый тип или, альтернативно, чтобы
сказать MySQL привести параметры к необходимым типам, когда
основная функция вызвана.</li>

<li>Выделить любую память, требуемую основной функцией.</li>
<li>Определить максимальную длину результата.</li>
<li>Определить (для функций <a href="types.htm#floating-point-types"><code>
REAL</code></a>) максимальное количество десятичных разрядов в результате.
</li>
<li>Определить, может ли результат быть <code>NULL</code>.</p></li></ul></li>

<li><p><code>xxx_deinit()</code></p>
<p>Функция завершения для <code>xxx()</code>. Если существует, это должно
освободить память, выделенную функцией инициализации.</p></li></ul>

<p>Когда запрос SQL вызывает <code>XXX()</code>, MySQL вызывает функцию
инициализации <code>xxx_init()</code>, чтобы выполнить любую необходимую
установку, такую как проверка параметров или распределение памяти. Если
<code>xxx_init()</code> вернет ошибку, MySQL прерывает запрос SQL с
сообщением об ошибке и не вызывает функции завершения или основную. Иначе,
MySQL вызывает основную функцию <code>xxx()</code> однажды для каждой строки.
После того, как все строки были обработаны, MySQL вызывает функцию
завершения <code>xxx_deinit()</code>, чтобы это могло выполнить
любую необходимую уборку.</p>

<p>Для совокупных функций, которые работают как
<a href="funct.htm#function_sum"><code>SUM()</code></a>,
Вы должны также обеспечить следующие функции:</p>

<ul><li><p><code>xxx_clear()</code></p>
<p>Сбросить текущее совокупное значение, но не вставлять параметр как
начальное совокупное значение для новой группы.</li>
<li><code>xxx_add()</code></p>
<p>Добавляет параметр к текущему совокупному значению.</p></li></ul>

<p>MySQL обрабатывает совокупный UDF следующим образом:</p>
<ol type="1"><li><p>Вызывает <code>xxx_init()</code>, чтобы позволить
совокупной функции выделить любую память, в которой она нуждается для того,
чтобы сохранить результаты.</li>

<li>Сортирует таблицу согласно выражению <code>GROUP BY</code>.</li>
<li>Вызывает <code>xxx_clear()</code> для первой строки в
каждой новой группе.</li>
<li>Вызывает <code>xxx_add()</code> для каждой строки, которая принадлежит к
той же самой группе.</li>

<li>Вызывает <code>xxx()</code>, чтобы получить результат для совокупности,
когда группа изменяется или после того, как последняя строка была обработана.
</li>
<li>Повторяет шаги 3-5, пока все строки не будут обработаны.</li>
<li>Вызывает <code>xxx_deinit()</code>, чтобы позволить UDF освободить любую
память, которую это выделило.</p></li></ol>

<p>Все функции должны быть безопасными для потока. Это включает не только
основную функцию, но и функции инициализации и завершения, а также
дополнительные функции, требуемые совокупными функциями. Последствие этого
требования то, что Вам не разрешают выделить глобальные или статические
переменные, которые изменяются. Если Вы нуждаетесь в памяти, Вы должны
выделить ее в <code>xxx_init()</code> и освободить в
<code>xxx_deinit()</code>.</p>

<h4><a name="udf-calling"></a>26.4.2.1. Вызов UDF для простых функций</h4>
<p>Этот раздел описывает различные функции, которые Вы должны определить,
когда Вы создаете простой UDF. <a href="#adding-udf">Раздел 26.4.2
</a> описывает порядок, в котором MySQL вызывает эти функции.</p>

<p>Основная <code>xxx()</code> функция должна быть объявлена как показано в
этом разделе. Отметьте, что тип возврата и параметры отличаются, в
зависимости от того, объявляете ли Вы функцию SQL <code>XXX()</code>, чтобы
возвратить <code>STRING</code>,
<a href="types.htm#integer-types"><code>INTEGER</code></a> или
<a href="types.htm#floating-point-types"><code>REAL</code></a> в запросе
<a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a>:</p>

<p>Для функций <code>STRING</code>:
<pre>
char *xxx(UDF_INIT *initid, UDF_ARGS *args,
          char *result, unsigned long *length,
          char *is_null, char *error);
</pre>

Для функций <a href="types.htm#integer-types"><code>INTEGER</code></a>:
<pre>
long long xxx(UDF_INIT *initid, UDF_ARGS *args,
              char *is_null, char *error);
</pre>

Для функций <a href="types.htm#floating-point-types"><code>REAL</code></a>:
<pre>
double xxx(UDF_INIT *initid, UDF_ARGS *args,
           char *is_null, char *error);
</pre>

Функции <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
строковые значения возвращаются и должны быть объявлены тем же самым путем,
как и функции <code>STRING</code>. Функции <code>ROW</code> не реализованы.
</p>

<p>Функции инициализации и завершения объявлены так:
<pre>
my_bool xxx_init(UDF_INIT *initid, UDF_ARGS *args, char *message);
void xxx_deinit(UDF_INIT *initid);
</pre>

Параметр <code>initid</code> передают всем трем функциям. Это указывает на
структуру <code>UDF_INIT</code>, которая используется, чтобы сообщить
информацию между функциями. Структура <code>UDF_INIT</code> имеет члены,
описанные ниже. Функция инициализации должна заполнить любые члены, которые
она хочет изменить. Чтобы использовать значение по умолчанию для члена,
оставьте это неизменным.</p>

<ul><li><p><code>my_bool maybe_null</code></p>
<p><code>xxx_init()</code> должна установить
<code>maybe_null</code> в <code>1</code>, если <code>xxx()</code>
может возвратить <code>NULL</code>. Значение по умолчанию
<code>1</code>, если какой-либо из параметров объявлен как
<code>maybe_null</code>.</li>

<li><code>unsigned int decimals</code></p>
<p>Число десятичных цифр после десятичной запятой. Значение по умолчанию
максимальное количество десятичных цифр в параметрах, которые передают
основной функции. Например, если функции передают
<code>1.34</code>, <code>1.345</code> и <code>1.3</code>,
значение по умолчанию 3, потому что <code>1.345</code>
имеет 3 десятичных цифры.</p>

<p>Для параметров, у которых нет никакого постоянного числа десятичных чисел,
значение <code>decimals</code> установлено в 31, что на 1 больше
максимального количества десятичных чисел, разрешенных для типов
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>,
<a href="types.htm#floating-point-types"><code>FLOAT</code></a> и
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>.
Это значение доступно как константа <code>NOT_FIXED_DEC</code>
в файле <code>mysql_com.h</code>.</p>

<p>Значение <code>decimals</code> 31 используется для параметров в случаях,
таких как <a href="types.htm#floating-point-types"><code>FLOAT</code></a> или
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>, когда
столбец объявлен без явного количества десятичных чисел (например,
<a href="types.htm#floating-point-types"><code>FLOAT</code></a> вместо
<code>FLOAT(10,3)</code>) и для констант с плавающей запятой таких, как
<code>1345E-3</code>. Это также используется для строк и других нечисловых
параметров, которые могли бы быть преобразованы в пределах
функции в числовую форму.</p>

<p>Значение, которым инициализирован член <code>decimals</code>, это только
значение по умолчанию. Это может быть изменено в пределах функции, чтобы
отразить фактическое выполненное вычисление. Значение по умолчанию определено
таким образом, что наибольшее количество десятичных чисел параметров
используется. Если количество десятичных чисел <code>NOT_FIXED_DEC</code>
даже для одного из параметров, это является значением,
используемым для <code>decimals</code>.</li>

<li><code>unsigned int max_length</code></p>
<p>Максимальная длина результата. Значение по умолчанию
<code>max_length</code> отличается в зависимости от типа результата функции.
Для строковых функций значение по умолчанию длина самого длинного параметра.
Для функций целого числа значение по умолчанию 21 цифра. Для реальных функций
значение по умолчанию 13 плюс число десятичных цифр, обозначенных
<code>initid-&gt;decimals</code>. Для числовых функций длина включает любой
знак или символы десятичной запятой.</p>

<p>Если Вы хотите возвратить значение blob, Вы можете установить
<code>max_length</code> в 65KB или 16MB. Эта память не выделена, но значение
используется, чтобы решить, который тип данных использовать, если есть
потребность временно хранить данные.</li>

<li><code>char *ptr</code></p>
<p>Указатель, который функция может использовать в ее собственных целях.
Например, функции могут использовать <code>initid-&gt;ptr</code>, чтобы
делить выделенную память между собой. <code>xxx_init()</code>
должна выделить память и назначить ее на этот указатель:
<pre>
initid-&gt;ptr = allocated_memory;
</pre>
В <code>xxx()</code> и <code>xxx_deinit()</code> обратитесь к
<code>initid-&gt;ptr</code>, чтобы использовать или освобождать память.</li>

<li><code>my_bool const_item</code></p>
<p><code>xxx_init()</code> должна установить <code>const_item</code> в
<code>1</code>, если <code>xxx()</code> всегда возвращает то же самое
значение, и в <code>0</code> в противном случае.</p></li></ul>

<h4><a name="udf-aggr-calling"></a>26.4.2.2. Вызовы UDF
для совокупных функций</h4>
<p>Этот раздел описывает различные функции, которые Вы должны определить,
когда Вы создаете совокупный UDF. <a href="#adding-udf">Раздел
26.4.2</a> описывает порядок, в котором MySQL вызывает эти функции.</p>

<ul><li><p><code>xxx_reset()</code></p>
<p>Эта функция вызвана, когда MySQL находит первую строку в новой группе.
Это должно сбросить любые внутренние итоговые переменные и затем использовать
данный параметр <code>UDF_ARGS</code> как первое значение в Вашем внутреннем
итоговом значении для группы. Объявите <code>xxx_reset()</code> так:
<pre>
void xxx_reset(UDF_INIT *initid, UDF_ARGS *args,
               char *is_null, char *error);
</pre>

<code>xxx_reset()</code> не используется в MySQL 8.0, в котором UDF
интерфейс использует <code>xxx_clear()</code>. Однако, Вы можете определить
<code>xxx_reset()</code> и <code>xxx_clear()</code>, если Вы хотите работать
с более старыми версиями сервера. Если Вы действительно включаете обе
функции, <code>xxx_reset()</code> во многих случаях может быть осуществлена
внутренне, вызывая <code>xxx_clear()</code>, чтобы сбрасывать все переменные,
и затем запросить <code>xxx_add()</code>, чтобы добавить параметр
<code>UDF_ARGS</code> как первое значение в группе.</li>

<li><code>xxx_clear()</code></p>
<p>Эта функция вызвана, когда MySQL должен сбросить итоговые результаты. Это
вызывают вначале для каждой новой группы, но может также быть вызвано, чтобы
сбросить значения для запроса, где не было никаких строк соответствия.
Объявите <code>xxx_clear()</code> так:
<pre>
void xxx_clear(UDF_INIT *initid, char *is_null, char *error);
</pre>
<code>is_null</code> указывает на <code>CHAR(0)</code> перед
вызовом <code>xxx_clear()</code>.</p>

<p>Если что-то пошло не так, как надо, Вы можете сохранить значение в
переменной, указанной параметром <code>error</code>. <code>error</code>
указывает на переменную одного байта, а не строковый буфер.</p>

<p><code>xxx_clear()</code> требуется в MySQL 8.0.</li>
<li><code>xxx_add()</code></p>
<p>Эта функция вызвана для всех строк, которые принадлежат к той же самой
группе. Вы должны использовать это, чтобы добавить значение
<code>UDF_ARGS</code> к внутренней итоговой переменной.
<pre>
void xxx_add(UDF_INIT *initid, UDF_ARGS *args,
             char *is_null, char *error);
</pre></li></ul>

<p>Функция <code>xxx()</code> для совокупного UDF должна быть объявлена тем
же самым путем, что касается несовокупного UDF. См.
<a href="#udf-calling">раздел 26.4.2.1</a>.</p>

<p>Для совокупного UDF MySQL вызывает <code>xxx()</code> после обработки всех
строк в группе. Вы никогда не должны обычно получать доступ к
<code>UDF_ARGS</code> здесь, вместо этого надо возвращать значение,
основанное на Ваших внутренних итоговых переменных.</p>

<p>Обработка возвращаемого значения в <code>xxx()</code> должна быть сделана
тем же самым путем, что касается несовокупного UDF. См.
<a href="#udf-return-values">раздел 26.4.2.4</a>.</p>

<p>Функции <code>xxx_reset()</code> и <code>xxx_add()</code> обрабатывают
параметр <code>UDF_ARGS</code> тем же самым путем, как функции для
несовокупного UDF. См. <a href="#udf-arguments">раздел 26.4.2.3
</a>.</p>

<p>Параметры указателя <code>is_null</code> и <code>error</code>
те же самые для всех вызовов <code>xxx_reset()</code>,
<code>xxx_clear()</code>, <code>xxx_add()</code> и <code>xxx()</code>.
Вы можете использовать это, чтобы помнить, что Вы получили ошибку или
<code>xxx()</code> должна возвратить <code>NULL</code>. Вы не должны
сохранять строку в <code>*error</code>! <code>error</code> указывает на
однобайтовую переменную, а не на строковый буфер.</p>

<p><code>*is_null</code> сброшен для каждой группы (прежде, чем вызвать
<code>xxx_clear()</code>). <code>*error</code> никогда не сбрасывается.</p>
<p>Если <code>*is_null</code> или <code>*error</code> установлены, когда
<code>xxx()</code> возвращает значение, MySQL вернет <code>NULL</code> как
результат для групповой функции.</p>

<h4><a name="udf-arguments"></a>26.4.2.3. Обработка параметров в UDF</h4>
<p>Параметр <code>args</code> указывает на на структуру
<code>UDF_ARGS</code>, члены которой показаны здесь:</p>

<ul><li><p><code>unsigned int arg_count</code></p>
<p>Число параметров. Проверьте это значение в функции инициализации, если Вы
требуете, чтобы Ваша функция была вызвана с особым
числом параметров. Например:
<pre>
if (args-&gt;arg_count != 2) {
   strcpy(message,"XXX() requires two arguments");
   return 1;
}
</pre>
Для других значений членов <code>UDF_ARGS</code>, которые в массиве,
ссылки начинаются с 0. Таким образом, их индексы от 0 до
<code>args-&gt;arg_count</code>-1.</li>

<li><code>enum Item_result *arg_type</code></p>
<p>Указатель на массив, содержащий типы для каждого параметра. Возможные
значения типов: <code>STRING_RESULT</code>, <code>INT_RESULT</code>,
<code>REAL_RESULT</code> и <code>DECIMAL_RESULT</code>.</p>

<p>Чтобы удостовериться, что параметры имеют данный тип и вернуть ошибку,
если они не такие, проверьте массив <code>arg_type</code>
в функции инициализации. Например:
<pre>
if (args-&gt;arg_type[0] != STRING_RESULT ||
    args-&gt;arg_type[1] != INT_RESULT) {
   strcpy(message,"XXX() requires a string and an integer");
   return 1;
}
</pre>

Параметры типа <code>DECIMAL_RESULT</code> переданы как строки, таким
образом, Вы должны обработать их тем же самым путем, как <code>STRING_RESULT
</code>.</p>

<p>Как альтернатива требованию, чтобы параметры Вашей функции имели особые
типы, Вы можете использовать функцию инициализации, чтобы установить
элементы <code>arg_type</code> к типам, которые Вы хотите. Это заставляет
MySQL привести параметры к тем типам для каждого вызова <code>xxx()</code>.
Например, чтобы определить, что первые два параметра должны быть
представлены в виде строки и целого числа, соответственно, сделайте в
<code>xxx_init()</code>:
<pre>
args-&gt;arg_type[0] = STRING_RESULT;
args-&gt;arg_type[1] = INT_RESULT;
</pre>
Параметры десятичного числа точного значения такие, как <code>1.3</code> или
значения столбцов <a href="types.htm#fixed-point-types"><code>DECIMAL</code>
</a> передают с типом <code>DECIMAL_RESULT</code>. Однако, значения передают
как строки. Если Вы хотите получить число, используйте функцию инициализации,
чтобы определить, что параметр должен быть приведен к
значению <code>REAL_RESULT</code>:
<pre>
args-&gt;arg_type[2] = REAL_RESULT;
</pre></li>

<li><code>char **args</code></p>
<p><code>args-&gt;args</code> связывает информацию функции инициализации об
общем характере параметров с Вашей функцией. Для постоянного параметра
<code>i</code> <code>args-&gt;args[i]</code> указывает на значение параметра.
См. позже для инструкций по тому, как получить доступ к значению должным
образом. Для непостоянного параметра <code>args-&gt;args[i]</code>
<code>0</code>. Постоянный параметр это выражение, которое использует только
константы, такое как <code>3</code>, <code>4*7-2</code> или
<a href="funct.htm#function_sin"><code>SIN(3.14)</code></a>. Непостоянный
параметр это выражение, которое обращается к значениям, которые могут
измениться, такие как имена столбцов или функции, которые
вызваны с непостоянными параметрами.</p>

<p>Для каждого вызова основной функции <code>args-&gt;args</code>
содержит фактические параметры, которые передают для строки,
обрабатываемой в настоящее время.</p>

<p>Если параметр <code>i</code> представляет <code>NULL</code>,
<code>args-&gt;args[i]</code> указатель null (0). Если параметр не
<code>NULL</code>, функции могут обратиться к этому следующим образом:</p>

<ul><li><p>Параметр типа <code>STRING_RESULT</code> дан как указатель на
строку плюс длина, чтобы позволить обработать двоичные данные или данные
произвольной длины. Строковое содержимое доступно как
<code>args-&gt;args[i]</code>, строковая длина как
<code>args-&gt;lengths[i]</code>. Не предполагайте, что
строка закончена нулем.</li>

<li>Для параметра типа <code>INT_RESULT</code>, Вы должны передать
<code>args-&gt;args[i]</code> в значение типа <code>long long</code>:
<pre>
long long int_val;
int_val = *((long long*) args-&gt;args[i]);
</pre></li>

<li>Для параметра типа <code>REAL_RESULT</code>, Вы должны передать
<code>args-&gt;args[i]</code> в значение типа <code>double</code>:
<pre>
doublereal_val;
real_val = *((double*) args-&gt;args[i]);
</pre></li>

<li><p>Для параметра типа <code>DECIMAL_RESULT</code>, Вы должны передать
значение как строку, и оно должно быть обработано как
значение <code>STRING_RESULT</code>.</li>
<li>Параметры <code>ROW_RESULT</code> не поддерживаются.</p></li></ul></li>

<li><p><code>unsigned long *lengths</code></p>
<p>Для функции инициализации массив <code>lengths</code> указывает на
максимальную строковую длину для каждого параметра. Вы не должны изменять их.
Для каждого вызова основной функции <code>lengths</code> содержит фактические
длины любых строковых параметров, которые передают для строки, в настоящее
время обрабатываемой. Для параметров типов <code>INT_RESULT</code> или
<code>REAL_RESULT</code>, <code>lengths</code> содержит максимальную длину
параметра (что касается функции инициализации).</li>

<li><code>char *maybe_null</code></p>
<p>Для функции инициализации массив <code>maybe_null</code>
указывает для каждого параметра, может ли значение параметра быть  null
(0, если нет, 1, если да).</li>

<li><code>char **attributes</code></p>
<p><code>args-&gt;attributes</code>
сообщает информацию о названиях параметров UDF. Для параметра <code>i</code>
название атрибута доступно как строка в
<code>args-&gt;attributes[i]</code>, длина атрибута в
<code>args-&gt;attribute_lengths[i]</code>.
Не предполагайте, что строка закончена нулем.</p>

<p>По умолчанию, название параметра UDF это текст выражения, используемого,
чтобы определить параметр. Для UDF у параметра может также быть
дополнительное предложение <code>[AS] <em><code>alias_name</code></em></code>,
в этом случае имя параметра <em><code>alias_name</code></em>. Значение
<code>attributes</code> для каждого параметра, таким образом, зависит от
того, был ли псевдоним задан.</p>

<p>Предположите что UDF <code>my_udf()</code> вызвана следующим образом:
<pre>
SELECT my_udf(expr1, expr2 AS alias1, expr3 alias2);
</pre>

В этом случае у массивов <code>attributes</code> и
<code>attribute_lengths</code> будут эти значения:
<pre>
args-&gt;attributes[0] = "expr1"
args-&gt;attribute_lengths[0] = 5
args-&gt;attributes[1] = "alias1"
args-&gt;attribute_lengths[1] = 6
args-&gt;attributes[2] = "alias2"
args-&gt;attribute_lengths[2] = 6
</pre></li>

<li><p><code>unsigned long *attribute_lengths</code></p>
<p>Массив <code>attribute_lengths</code> указывает на длину
каждого имени параметра.</p></li></ul>

<h4><a name="udf-return-values"></a>26.4.2.4.
Возвращаемые значения UDF и обработка ошибок</h4>
<p>Функция инициализации должна возвратить <code>0</code>,
если никакая ошибка не произошла и <code>1</code> иначе. Если ошибка
происходит, <code>xxx_init()</code> должна сохранить законченное нулем
сообщение об ошибке в параметре <code>message</code>.
Сообщение возвращено клиенту. Буфер сообщения длиной
<code>MYSQL_ERRMSG_SIZE</code> символов, но Вы должны попытаться сохранить
сообщение меньше 80 символов, чтобы оно соответствовало
ширине стандартного экрана.</p>

<p>Возвращаемое значение основной функции <code>xxx()</code> это
функциональное значение для функций <code>long long</code> и
<code>double</code>. Строковая функция должна возвратить указатель на
результат и установить <code>*length</code> в длину (в байтах)
возвращаемого значения. Например:
<pre>
memcpy(result, "result string", 13);
*length = 13;
</pre>

MySQL передает буфер функции <code>xxx()</code> используя параметр
<code>result</code>. Этот буфер достаточно длинен, чтобы содержать 255
символов, которые могут быть мультибайтными символами. Функция
<code>xxx()</code> может сохранить результат в этом буфере, если это так,
тогда возвращаемое значение должно быть указателем на буфер. Если функция
хранит результат в ином буфере, она должно возвратить указатель на тот буфер.
</p>

<p>Если Ваша строковая функция не использует поставляемый буфер (например,
если это должно возвратить строку больше 255 символов), Вы должны выделить
место для своего собственного буфера с помощью <code>malloc()</code> в
функции <code>xxx_init()</code> или <code>xxx()</code> с обязательным
освобождением в <code>xxx_deinit()</code>. Вы можете сохранить выделенную
память в слоте <code>ptr</code> структуры <code>UDF_INIT</code> для
повторного использования в будущем вызове <code>xxx()</code>. См.
<a href="#udf-calling">раздел 26.4.2.1</a>.</p>

<p>Чтобы указать на возвращаемое значение <code>NULL</code>
в основной функции, установите <code>*is_null</code> в <code>1</code>:
<pre>
*is_null = 1;
</pre>

Чтобы указать на ошибку в основной функции, установите
<code>*error</code> в <code>1</code>:
<pre>
*error = 1;
</pre>

Если <code>xxx()</code> устанавливает <code>*error</code> в <code>1</code>
для любой строки, значение функции <code>NULL</code> для текущей строки и для
любых последующих строк, обработанных запросом <code>XXX()</code>.</p>

<h4><a name="udf-compiling"></a>26.4.2.5. Компиляция и установка UDF</h4>
<p>Файлы, осуществляющие UDF, должны быть собраны и установлены на хосте,
где работает сервер. Этот процесс описан ниже для файла примера UDF
<code>sql/udf_example.cc</code>, который включен в исходные тексты MySQL.</p>

<p>Если UDF будет упомянут в запросах, которые будут копироваться к ведомым
серверам, Вы должны гарантировать, что каждое ведомое устройство также имеет
функцию в наличии. Иначе, репликация потерпит неудачу на ведомых устройствах,
когда они попытаются вызвать функцию.</p>

<p>Инструкции для Windows даны позже в этом разделе.</p>
<p>Файл <code>udf_example.cc</code> файл содержит следующие функции:</p>
<ul><li><p><code>metaphon()</code> возвращает metaphon строку строкового
параметра. Это что-то подобное строке soundex, но это более настроено
для английского языка.</li>

<li><code>myfunc_double()</code> возвращает сумму значений ASCII символов в
параметрах, разделенных на сумму длины параметров.</li>
<li><code>myfunc_int()</code> возвращает сумму длины ее параметров.</li>

<li><code>sequence([const int])</code> возвращает последовательность,
начинающуюся с данного числа или 1, если никакое число не было дано.</li>
<li><code>lookup()</code> возвращает IP-адрес для имени хоста.</li>

<li><code>reverse_lookup()</code> возвращает имя хоста для IP-адреса. Функция
может быть вызвана с единственным строковым параметром формы
<code>'xxx.xxx.xxx.xxx'</code> или с четырьмя числами.</li>
<li><code>avgcost()</code> возвращает среднюю стоимость.
Это совокупная функция.</p></li></ul>

<p>Динамически загружаемый файл должен быть собран как файл библиотеки с
обеспечением совместного доступа, используя команду вроде этой:
<pre>
shell&gt; gcc -shared -o udf_example.so udf_example.cc
</pre>

Если Вы используете <span><strong>gcc</strong></span> с
<span><strong>CMake</strong></span> (как MySQL сконфигурирован), Вы должны
быть в состоянии создать <code>udf_example.so</code> более простой командой:
<pre>
shell&gt; make udf_example
</pre>

После того, как Вы собираете совместно используемый объект, содержащий UDF,
Вы должны установить его и сказать MySQL об этом. Компилирование совместно
используемого объекта из <code>udf_example.cc</code>, используя
<span><strong>gcc</strong></span> непосредственно производит файл, названный
<code>udf_example.so</code>. Скопируйте совместно используемый объект в
каталог плагинов сервера и назовите его <code>udf_example.so</code>. Этот
каталог задан значением системной переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.</p>

<p>На некоторых системах программа <span><strong>ldconfig</strong></span>,
которая конфигурирует динамический компоновщик, не признает совместно
используемый объект, если его имя не начинается с <code>lib</code>.
В этом случае Вы должны переименовать файл <code>udf_example.so</code> в
<code>libudf_example.so</code>.</p>

<p>В Windows Вы можете собрать определяемые пользователем функции при
использовании следующей процедуры:</p>
<ol type="1"><li><p>Получите исходные тексты MySQL. См.
<a href="install.htm#getting-mysql">раздел 2.1.2</a>.</li>

<li>Получите утилиту <span><strong>CMake</strong></span> в случае
необходимости с <a href="../../../www.cmake.org/default.htm" target="_top">
http://www.cmake.org</a>. Версия 2.6 или позже.</li>

<li>В дереве исходных текстов, в каталоге <code>sql</code>, есть файлы
<code>udf_example.def</code> и <code>udf_example.cc</code>.
Скопируйте оба файла из этого каталога в Ваш рабочий каталог.</li>

<li>Создайте <span><strong>CMake</strong></span> <code>makefile</code>
(<code>CMakeLists.txt</code>):
<pre>
PROJECT(udf_example)

# Path for MySQL include directory
INCLUDE_DIRECTORIES("c:/mysql/include")

ADD_DEFINITIONS("-DHAVE_DLOPEN")
ADD_LIBRARY(udf_example MODULE udf_example.cc udf_example.def)
TARGET_LINK_LIBRARIES(udf_example wsock32)
</pre></li>

<li>Создайте проект VC и файлы решения:
<pre>
cmake -G "&lt;Generator&gt;"
</pre>
Вызов <span><strong>cmake --help</strong></span> показывает Вам
список допустимых Generators.</li>

<li>Создайте <code>udf_example.dll</code>:
<pre>
devenv udf_example.sln /build Release
</pre></li></ol>

<p>После того, как совместно используемый файл библиотеки был установлен,
сообщите <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> о новых функциях. Если у файлов библиотеки есть суффикс, отличающийся от
<code>.so</code> на Вашей системе, замените правильным суффиксом повсюду
(например, <code>.dll</code> для Windows).
<pre>
mysql&gt; CREATE FUNCTION metaphon RETURNS STRING SONAME 'udf_example.so';
mysql&gt; CREATE FUNCTION myfunc_double RETURNS REAL SONAME 'udf_example.so';
mysql&gt; CREATE FUNCTION myfunc_int RETURNS INTEGER SONAME 'udf_example.so';
mysql&gt; CREATE FUNCTION sequence RETURNS INTEGER SONAME 'udf_example.so';
mysql&gt; CREATE FUNCTION lookup RETURNS STRING SONAME 'udf_example.so';
mysql&gt; CREATE FUNCTION reverse_lookup
    -&gt;RETURNS STRING SONAME 'udf_example.so';
mysql&gt; CREATE AGGREGATE FUNCTION avgcost
    -&gt;RETURNS REAL SONAME 'udf_example.so';
</pre>
После того, как установлена, функция остается установленной, пока
она не удалена.</p>

<p>Чтобы удалить функции, используйте
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>:
<pre>
mysql&gt; DROP FUNCTION metaphon;
mysql&gt; DROP FUNCTION myfunc_double;
mysql&gt; DROP FUNCTION myfunc_int;
mysql&gt; DROP FUNCTION sequence;
mysql&gt; DROP FUNCTION lookup;
mysql&gt; DROP FUNCTION reverse_lookup;
mysql&gt; DROP FUNCTION avgcost;
</pre>

Запросы <a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a> и
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>
обновляют системную таблицу <code>func</code> в базе данных
<code>mysql</code>. Имя функции, тип и имя совместно использованной
библиотеки сохранены в таблице. Вы должны иметь привилегии
<a href="security.html#priv_insert"><code>INSERT</code></a> и
<a href="security.html#priv_delete"><code>DELETE</code></a> для базы данных
<code>mysql</code>, чтобы создать и удалить функции, соответственно.</p>

<p>Вы не должны использовать <a href="sql.htm#create-function"><code>CREATE
FUNCTION</code></a>, чтобы добавить функцию, которая была ранее создана. Если
Вы должны повторно установить функцию, Вы должны удалить ее сначала через
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a> и затем
повторно установить с <a href="sql.htm#create-function"><code>CREATE
FUNCTION</code></a>. Вы должны были бы сделать это, например, если Вы
повторно собираете новую версию своей функции, так, чтобы сервер
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
получил новую версию. Иначе, сервер продолжает использовать старую версию.
</p>

<p>Активная функция та, которая была загружена
<a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a>
и не удалена <a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>.
Все активные функции перезагружены каждый раз, когда сервер запускается, если
Вы не запускаете <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с опцией <a href="server.htm#option_mysqld_skip-grant-tables">
<code>--skip-grant-tables</code></a>. В этом случае инициализация UDF
пропущена, и UDF недоступны.</p>

<h4><a name="udf-security"></a>26.4.2.6. Предосторожности безопасности UDF
</h4>
<p>MySQL принимает несколько мер, чтобы предотвратить неправильное
употребление определяемых пользователем функций.</p>

<p>Файлы библиотеки UDF не могут быть помещены в произвольные каталоги. Они
должны быть расположены в каталоге плагинов сервера. Этот каталог задан
значением системной переменной <a href="server.htm#sysvar_plugin_dir">
<code>plugin_dir</code></a>.</p>

<p>Чтобы использовать <a href="sql.htm#create-function"><code>CREATE FUNCTION
</code></a> или <a href="sql.htm#drop-function"><code>DROP FUNCTION</code>
</a>, Вы должны иметь привилегии <a href="security.html#priv_insert"><code>
INSERT</code></a> или <a href="security.html#priv_delete"><code>DELETE</code>
</a>, соответственно, для базы данных <code>mysql</code>. Это необходимо,
потому что эти запросы добавляют и удаляют строки из
таблицы <code>mysql.func</code>.</p>

<p>У UDFs должен быть по крайней мере один символ, определенный в дополнение
к <code>xxx</code>, который соответствует основноой функции
<code>xxx()</code>. Эти вспомогательные символы соответствуют функциям
<code>xxx_init()</code>, <code>xxx_deinit()</code>, <code>xxx_reset()</code>,
<code>xxx_clear()</code> и <code>xxx_add()</code>.
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
также поддерживает опцию
<a href="server.htm#option_mysqld_allow-suspicious-udfs"><code>
--allow-suspicious-udfs</code></a>, которая управляет тем, может ли быть
загружена UDF, которая имеет только символ <code>xxx</code>. По умолчанию
опция выключена, чтобы предотвратить попытки загрузки функций из совместно
используемых файлов библиотеки кроме тех, которые содержат законный UDF.
Если у Вас есть более старые UDF, которые содержат только символ
<code>xxx</code> и они не могут быть повторно собраны, чтобы включить
вспомогательный символ, может быть необходимо определить опцию
the <a href="server.htm#option_mysqld_allow-suspicious-udfs"><code>
--allow-suspicious-udfs</code></a>. Иначе Вы должны избегать включать это.</p>

<h3><a name="adding-native-function"></a>26.4.3.
Добавление новой нативной функции</h3>
<p>Чтобы добавить новую функцию, используйте процедуру, описанную здесь,
которая требует, чтобы Вы использовали исходные тексты. Вы не можете добавить
нативные функции к двоичному дистрибутива, потому что необходимо изменить
исходный код MySQL и собрать MySQL из измененного текста. Если Вы мигрируете
на другую версию MySQL (например, когда новая версия выпущена), Вы должны
повторить процедуру с новой версией.</p>

<p>Если новая функция будет упомянута в запросах, которые будут копироваться
к ведомым серверам, Вы должны гарантировать, что каждый ведомый сервер также
имеет функцию в наличии. Иначе репликация потерпит неудачу на ведомых
устройствах, когда они попытаются вызвать функцию.</p>

<p>Чтобы добавить новую функцию, следуйте за этими шагами, чтобы изменить
исходные файлы в каталоге <code>sql</code>:</p>
<ol type="1"><li><p>Создайте подкласс для функции в
<code>item_create.cc</code>:

<ul><li><p>Если функция берет постоянное число параметров, создайте подкласс
<code>Create_func_arg0</code>, <code>Create_func_arg1</code>,
<code>Create_func_arg2</code> или <code>Create_func_arg3</code>,
соответственно, в зависимости от того, берет ли функция ноль, один, два или
три параметра. Для примеров см. классы
<code>Create_func_uuid</code>, <code>Create_func_abs</code>,
<code>Create_func_pow</code> и <code>Create_func_lpad</code>.</li>

<li>Если функция берет переменное число параметров, создайте подкласс
<code>Create_native_func</code>. Для примера см.
<code>Create_func_concat</code>.</p></li></ul>

</li><li><p>Чтобы обеспечить имя, которым функция может быть упомянута в
запросах SQL, зарегистрируйте имя в <code>item_create.cc</code>,
добавляя строку к этому массиву:
<pre>
static Native_func_registry func_array[]
</pre>
Вы можете зарегистрировать несколько названий той же самой функции. Например,
см. строки для <code>"LCASE"</code> и <code>"LOWER"</code>,
которые являются псевдонимами для <code>Create_func_lcase</code>.</li>

<li>В <code>item_func.h</code> объявите класс, наследующий
<code>Item_num_func</code> или <code>Item_str_func</code>,
в зависимости от того, возвращает ли Ваша функция число или строку.</li>

<li>В <code>item_func.cc</code> добавьте одну из следующих деклараций, в
зависимости от того, определяете ли Вы числовую или строковую функцию:
<pre>
double   Item_func_newname::val()
longlong Item_func_newname::val_int()
String  *Item_func_newname::Str(String *str)
</pre>

Если Вы наследуете свой объект от какого-либо из стандартных элементов (как
<code>Item_num_func</code>), Вы, вероятно, только должны определить одну из
этих функций и позволить родительскому объекту заботиться о других функциях.
Например, класс <code>Item_str_func</code> определяет функцию
<code>val()</code>, которая выполняет <code>atof()</code>
на значении, возвращенном <code>::str()</code>.</li>

<li>Если функция недетерминирована, включайте следующее заявление в
конструктор элемента, чтобы указать, что функциональные результаты
не должны кэшироваться:
<pre>
current_thd-&gt;lex-&gt;safe_to_cache_query=0;
</pre>
Функция недетерминирована, если, учитывая фиксированные значения для ее
параметров, она может возвратить различные результаты для различных вызовов.
</li>

<li>Вы должны, вероятно, также определить следующую функцию объекта:
<pre>
void Item_func_newname::fix_length_and_dec()
</pre>

Эта функция должна, по крайней мере, вычислить <code>max_length</code>,
основанную на данных параметрах. <code>max_length</code> это
максимальное количество символов, которые может возвратить функция. Эта
функция должна также установить <code>maybe_null = 0</code>, если основная
функция не может возвратить значение <code>NULL</code>. Функция может
проверить, может ли какой-либо из функциональных параметров возвратить
<code>NULL</code>, проверяя переменную <code>maybe_null</code> параметров.
Смотрите <code>Item_func_mod::fix_length_and_dec</code>
для типичного примера того, как сделать это.</p></li></ol>

<p>Все функции должны быть безопасными для потока. Другими словами, не
используйте глобальные или статические переменные в функциях, не
защищая их с mutexes.</p>

<p>Если Вы хотите возвратить <code>NULL</code> из <code>::val()</code>,
<code>::val_int()</code> или <code>::str()</code>, Вы должны установить
<code>null_value</code> в 1 и вернуть 0.</p>

<p>Для функций <code>::str()</code> есть дополнительные соображения:</p>
<ul><li><p>Аргумент <code>String *str</code> обеспечивает строковый буфер,
который может использоваться, чтобы сохранить результат. Для получения
дополнительной информации о типе <code>String</code>, смотрите
файл <code>sql_string.h</code>.</li>

<li>Функция <code>::str()</code> должна возвратить строку, которая содержит
результат, или <code>(char*)0</code>, если результат <code>NULL</code>.</li>
<li>Все текущие строковые функции пытаются избегать выделять память, если это
не абсолютно необходимо!</p></li></ul>

<h2><a name="porting"></a>26.5. Отладка и портирование MySQL</h2>
<p>Этот раздел помогает Вам портировать MySQL к другим операционным системам.
Проверьте список в настоящее время поддерживаемых операционных систем
сначала. См.
<a href="../../../www.mysql.com/support/supportedplatforms/database.html"
target="_top">http://www.mysql.com/support/supportedplatforms/database.html
</a>. Если Вы создали новый порт MySQL, пожалуйста, сообщите нам, чтобы мы
могли перечислить его здесь и на нашем Веб-сайте
(<a href="../../../www.mysql.com/default.htm" target="_top">http://www.mysql.com/</a>),
рекомендуя это другим пользователям.</p>

<p>Если Вы создаете новый порт MySQL, Вы свободны скопировать и
распространить его в соответствии с лицензией GPL, но он не делает
Вас правообладателем MySQL.</p>

<p>Рабочая библиотека потоков POSIX необходима для сервера.</p>
<p>Чтобы создать MySQL из исходных текстов, Ваша система должна удовлетворять
ряду требований, перечисленных в
requirements listed at <a href="install.htm#source-installation">разделе 2.8
</a>.</p>

<p>Если Вы сталкиваетесь с проблемами с новым портом, Вам, вероятно, придется
сделать некоторую отладку MySQL! См. <a href="#debugging-server">
раздел 26.5.1</a>.</p>

<p>Прежде, чем Вы начнете отлаживать
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>,
сначала получите тестовую программу <code>mysys/thr_lock</code>.
Это гарантирует, что у Вашей установки библиотеки потоков есть хотя бы
отдаленный шанс работать!</p>

<h3><a name="debugging-server"></a>26.5.1. Отладка сервера MySQL</h3>
<p>Если Вы используете некоторую функциональность, которая очень нова в
MySQL, Вы можете попытаться выполнить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
<code>--skip-new</code> (это отключает всю новую, потенциально опасную
функциональность). См. <a href="error.htm#crashing">раздел B.5.3.3</a>.</p>

<p>Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> не хочет запускаться, Вы должны проверить, что у Вас нет никаких файлов
<code>my.cnf</code>, которые вмешиваются в Вашу установку! Вы можете
проверить Ваши параметры <code>my.cnf</code> с
<a href="programs.htm#mysqld"><span><strong>mysqld
--print-defaults</strong></span></a> и избежать их использования, запускаясь
с помощью <a href="programs.htm#mysqld"><span><strong>mysqld --no-defaults
...</strong></span></a>.</p>

<p>Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> начинает съедать центральный процессор или память, Вы можете
использовать <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
processlist status</strong></span></a>, чтобы узнать, выполняет ли кто-то
запрос, который занимает много времени. Может быть хорошей идеей выполнить
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin -i10 processlist
status</strong></span></a> в некотором окне, если Вы испытываете
исполнительные проблемы или проблемы, когда новые клиенты
не могут соединиться с сервером.</p>

<p>Команда <a href="programs.htm#mysqladmin"><span><strong>mysqladmin debug
</strong></span></a> выводит некоторую информацию о блокировках,
использовании памяти и запросах к файлу системного журнала MySQL. Это может
помочь решить некоторые проблемы. Эта команда также обеспечивает немного
полезной информации, даже если Вы не собрали MySQL для того, чтобы отладить!
</p>

<p>Если проблема состоит в том, что некоторые таблицы становятся медленнее и
медленнее, Вы должны попытаться оптимизировать таблицу с помощью
<a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code></a> или
<a href="programs.htm#myisamchk"><span><strong>myisamchk</strong></span></a>.
См. <a href="server.htm">главу 6</a>. Вы должны также проверить медленные
запросы с <a href="sql.htm#explain"><code>EXPLAIN</code></a>.</p>

<p>Вы должны также прочитать определенный для OS раздел в этом руководстве
для проблем, которые могут быть уникальными для Вашей среды. См.
<a href="install.htm#general-installation-issues">раздел 2.1</a>.</p>

<h4><a name="compiling-for-debugging"></a>26.5.1.1.
Компиляция MySQL для отладки</h4>
<p>Если у Вас есть некоторая очень определенная проблема, Вы можете всегда
попытаться отладить MySQL. Чтобы сделать это, Вы должны сконфигурировать
MySQL с опцией <a href="install.htm#option_cmake_with_debug"><code>
-DWITH_DEBUG=1</code></a>. Вы можете проверить, был ли MySQL собран с
отладкой, делая <a href="programs.htm#mysqld"><span><strong>mysqld --help
</strong></span></a>. Если флаг <a href="server.htm#option_mysqld_debug">
<code>--debug</code></a> перечислен с опциями, у Вас есть включенная отладка.
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin ver</strong>
</span></a> также пишет версию <a href="programs.htm#mysqld"><span><strong>
mysqld</strong></span></a> как <a href="programs.htm#mysql"><span><strong>
mysql ... --debug</strong></span></a> в этом случае.</p>

<p>Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> падает, когда Вы конфигурируете его с опцией CMake
<a href="install.htm#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code>
</a>, Вы, вероятно, нашли ошибку компилятора или ошибку синхронизации в
пределах MySQL. В этом случае, Вы можете попытаться добавить
<code>-g</code>, используя опции CMake
<a href="install.htm#option_cmake_cmake_c_flags"><code>CMAKE_C_FLAGS</code>
</a> и <a href="install.htm#option_cmake_cmake_cxx_flags"><code>
CMAKE_CXX_FLAGS</code></a> и не использовать
<a href="install.htm#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code></a>.
Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
падает, Вы можете, по крайней мере, присоединиться к нему с
<span><strong>gdb</strong></span> или применить <span><strong>gdb</strong>
</span> на файле дампа, чтобы узнать, что произошло.</p>

<p>Когда Вы конфигурируете MySQL для того, чтобы отладить, автоматически
включается большое количество дополнительных функций проверки безопасности,
которые контролируют здоровье <a href="programs.htm#mysqld"><span><strong>
mysqld</strong></span></a>. Если они находят что-то неожиданное, будет выдана
запись в <code>stderr</code>, который
<a href="programs.htm#mysqld-safe"><span><strong>mysqld_safe</strong></span>
</a> направляет к журналу ошибок! Это также означает, что, если Вы имеете
некоторые неожиданные проблемы с MySQL и используете исходные тексты, первая
вещь, которую Вы должны сделать, это сконфигурировать MySQL для того, чтобы
отладить! Вторая вещь состоит в том, чтобы послать сообщение в список
рассылки MySQL и попросить помощи. См.
<a href="intro.htm#mailing-lists">раздел 1.6.1</a>.
Если Вы полагаете, что нашли ошибку, пожалуйста, используйте инструкции в
<a href="intro.htm#bug-reports">разделе 1.7</a>.</p>
<p>В Windows MySQL <code>mysqld.exe</code> по умолчанию собран с
поддержкой файлов трассировки.</p>

<h4><a name="making-trace-files"></a>26.5.1.2. Создание файлов трассировки
</h4>
<p>Если сервер <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> не запускается или он легко падает, Вы можете попытаться создать
файл трассировки, чтобы найти проблему.</p>

<p>Чтобы сделать это, у Вас должен быть
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>,
который был собран с поддержкой отладки. Вы можете проверить это, выполняя
<code>mysqld -V</code>. Если номер версии заканчивается <code>-debug</code>,
это собрано с поддержкой файлов трассировки. В Windows сервер отладки
называют <a href="programs.htm#mysqld"><span><strong>mysqld-debug</strong>
</span></a> вместо <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a>.</p>

<p>Запустите <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с протоколом в <code>/tmp/mysqld.trace</code> под Unix или
<code>\mysqld.trace</code> под Windows:
<pre>
shell&gt; mysqld --debug
</pre>

В Windows Вы должны также использовать флаг
<a href="server.htm#option_mysqld_standalone"><code>--standalone</code></a>,
чтобы не запустить <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> как сервис. В консоли используйте эту команду:
<pre>
C:\&gt; mysqld-debug --debug --standalone
</pre>
После этого Вы можете использовать инструмент командной строки
<code>mysql.exe</code> во второй консоли, чтобы воспроизвести проблему. Вы
можете остановить сервер <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> с помощью <a href="programs.htm#mysqladmin"><span>
<strong>mysqladmin shutdown</strong></span></a>.</p>

<p>Файл трассировки может стать <span><strong>очень большим</strong></span>!
Чтобы произвести меньший файл трассировки, Вы можете использовать опции
отладки что-то вроде этого:
<pre>
mysqld --debug=d,info,error,query,general,where:O,/tmp/mysqld.trace
</pre>

<p>Это выведет только что-нибудь интересное в трассировку.</p>
<p>Если Вы делаете отчет об ошибках, пожалуйста, пошлите в соответствующий
список рассылки только те строки файла трассировки, где что-то, кажется, идет
не так, как надо! Если Вы не можете определить местонахождение неправильного
места, Вы можете открыть отчет об ошибках и загрузить файл трассировки в
отчет так, чтобы разработчик MySQL мог смотреть на это. Для инструкций, см.
<a href="intro.htm#bug-reports">раздел 1.7</a>.</p>

<p>Файл трассировки сделан с пакетом <span><strong>DBUG</strong></span>.
См. <a href="#dbug-package">раздел 26.5.3</a>.</p>

<h4><a name="making-windows-dumps"></a>26.5.1.3.
Применение WER с PDB, чтобы создать Windows crashdump</h4>
<p>Файлы базы данных программы (расширение <code>pdb</code>) включены в
<span><strong>ZIP Archive Debug Binaries &amp; Test Suite</strong></span>
дистрибутив MySQL. Эти файлы предоставляют информацию для того, чтобы
отладить Вашу установку MySQL в случае проблемы. Это отдельная загрузка из
стандартного MSI или файла Zip.</p>

<p>Файлы PDB доступны в отдельном файле, маркированном "ZIP
Archive Debug Binaries &amp; Test Suite".</p>
<p>Файл PDB содержит более подробную информацию о <code>mysqld</code>
и другие инструменты, который позволяют более подробно отлаживать пакет.
Вы можете использовать их с <span><strong>WinDbg</strong></span> или Visual
Studio, чтобы отладить <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a>.</p>

<p>Старый отладчик <span><em>Dr. Watson</em></span> был удален в Microsoft
Vista и заменен на <span><strong>WinDbg</strong></span>.</p>
<p>Для получения дополнительной информации о файлах PDB см.
<a href="../../../support.microsoft.com/kb/121366/default.htm" target="_top">Microsoft
Knowledge Base Article 121366</a>. Для получения дополнительной информации о
доступных опциях отладки см.
<a href="../../../www.microsoft.com/whdc/devtools/debugging/default.mspx"
target="_top">Debugging Tools for Windows</a>.</p>

<p>Чтобы использовать WinDbg, или установите полный Windows Driver Kit
(WDK) или установите автономную версию.</p>
<p>Файлы <code>.exe</code> и <code>.pbd</code> должны точно совпадать (номер
версии и выпуск сервера MySQL) или WinDBG будет жаловаться,
пытаясь загрузить символы.</p>

<ol type="1"><li><p>Чтобы произвести минидамп <code>mysqld.dmp</code>,
включите опцию <a href="server.htm#option_mysqld_core-file"><code>core-file
</code></a> раздела [mysqld] в <code>my.ini</code>. Перезапустите сервер
MySQL после произведения этих изменений.</li>

<li>Создайте каталог, чтобы хранить произведенные
файлы, например, <code>c:\symbols</code></li>
<li>Определите путь к своему <span><strong>windbg.exe</strong></span>
используя Find GUI или из командной строки, например:
<code>dir /s /b windbg.exe</code>. Общее значение по умолчанию
<span><em>C:\Program Files\Debugging Tools for Windows (x64)\windbg.exe</em>
</span>.</li>

<li>Запустите <code>windbg.exe</code> и укажите ему пути к
<code>mysqld.exe</code>, <code>mysqld.pdb</code>, <code>mysqld.dmp</code> и
исходным текстам. Альтернативно, передайте каждый путь из
WinDbg GUI. Например:
<pre>
windbg.exe -i "C:\mysql-8.0.1-winx64\bin\"^
    -z "C:\mysql-8.0.1-winx64\data\mysqld.dmp"^
    -srcpath "E:\ade\mysql_archives\8.0\8.0.1\mysql-8.0.1"^
    -y "C:\mysql-8.0.1-winx64\bin;SRV*c:\symbols*http://msdl.microsoft.com/download/symbols"^
    -v -n -c "!analyze -vvvvv"
</pre>
<p>Символы <code>^</code> и новой строки удалены процессором командной строки
Windows, так убедитесь, что пробелы остаются неповрежденными.</p></li></ol>

<h4><a name="using-gdb-on-mysqld"></a>26.5.1.4. Отладка mysqld под gdb</h4>
<p>На большинстве систем Вы можете также запустить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> из
<span><strong>gdb</strong></span>, чтобы получить больше информации, если
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> падает.
</p>

<p>С некоторыми более старыми версиями <span><strong>gdb</strong></span> в
Linux Вы должны использовать <code>run --one-thread</code>, если Вы хотите
отладить потоки <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>. В этом случае у Вас может быть только один активный поток за
один раз. Лучше обновить до <span><strong>gdb</strong></span> 5.1, поскольку
отладка потоков работает намного лучше с этой версией!</p>

<p>Потоки NPTL (new thread library on Linux) могут вызвать проблемы, работая
с <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> под
<span><strong>gdb</strong></span>. Симптомы этого:</p>

<ul><li><p><a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> зависает во время запуска (прежде, чем напишет
<code>ready for connections</code>).</li>

<li><a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
отказывает во время вызова <code>pthread_mutex_lock()</code> или
<code>pthread_mutex_unlock()</code>.</p></li></ul>

<p>В этом случае Вы должны установить следующую переменную окружения в
оболочке прежде, чем запустить <span><strong>gdb</strong></span>:
<pre>
LD_ASSUME_KERNEL=2.4.1
export LD_ASSUME_KERNEL
</pre>

Запуская <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> под <span><strong>gdb</strong></span>, Вы должны отключить трассировку
стека с <a href="server.htm#option_mysqld_skip-stack-trace"><code>
--skip-stack-trace</code></a>, чтобы быть в состоянии поймать segfaults в
пределах <span><strong>gdb</strong></span>.</p>

<p>Используйте опцию <a href="server.htm#option_mysqld_gdb"><code>--gdb
</code></a> <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>, чтобы установить обработчик прерывания для <code>SIGINT</code>
(должен был остановить <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> с <code>^C</code> для установки контрольных точек) и
отключить рассмотрение стека и основную обработку файла.</p>

<p>Очень трудно отладить MySQL под <span><strong>gdb</strong></span>, если
Вы делаете много новых соединений, в то время как
<span><strong>gdb</strong></span> не освобождает память для старых потоков.
Вы можете избежать этой проблемы, запуская
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
<a href="server.htm#sysvar_thread_cache_size"><code>thread_cache_size</code>
</a> установленной к значению, равному
<a href="server.htm#sysvar_max_connections"><code>max_connections</code>
</a>+1. В большинстве случаев только использование
<a href="server.htm#sysvar_thread_cache_size"><code>--thread_cache_size=5'
</code></a> помогает!</p>

<p>Если Вы хотите получить дамп памяти в Linux, если
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
падает с сигналом SIGSEGV, Вы можете запустить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
опцией <a href="server.htm#option_mysqld_core-file"><code>--core-file</code>
</a>. Этот файл может использоваться, чтобы сделать трассировку, которая
может помочь Вам узнать, почему падает
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>:
<pre>
shell&gt; gdb mysqld core
gdb&gt;   backtrace full
gdb&gt;   quit
</pre>
См. <a href="error.htm#crashing">раздел B.5.3.3</a>.</p>

<p>Если Вы используете <span><strong>gdb</strong></span> 4.17.x
или выше на Linux, Вы должны установить файл <code>.gdb</code> со следующей
информацией в Вашем текущем каталоге:
<pre>
set print sevenbit off
handle SIGUSR1 nostop noprint
handle SIGUSR2 nostop noprint
handle SIGWAITING nostop noprint
handle SIGLWP nostop noprint
handle SIGPIPE nostop
handle SIGALRM nostop
handle SIGHUP nostop
handle SIGTERM nostop noprint
</pre>
Если у Вас есть проблемы, отладки потоков с
<span><strong>gdb</strong></span>, Вы должны загрузить gdb 5.x и попробовать
его. Новая версия <span><strong>gdb</strong></span> очень
улучшила обработку потока!</p>

<p>Вот пример, как отладить <a href="programs.htm#mysqld"><span><strong>
mysqld</strong></span></a>:
<pre>
shell&gt; gdb /usr/local/libexec/mysqld
gdb&gt; run
...
backtrace full # Do this when mysqld crashes
</pre>
Включайте предыдущий вывод в отчет об ошибках, который Вы можете
зарегистрировать, используя инструкции в
<a href="intro.htm#bug-reports">разделе 1.7</a>.</p>

<p>Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> зависает, Вы можете попытаться использовать некоторые системные
инструменты, например, <code>strace</code> или
<code>/usr/proc/bin/pstack</code>, чтобы исследовать, где проблема у
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>.
<pre>
strace /tmp/log libexec/mysqld
</pre>

<p>Если Вы используете интерфейс Perl <code>DBI</code>, Вы можете включить
информацию об отладке при использовании метода <code>trace</code> или
устанавливая переменную окружения <code>DBI_TRACE</code>.</p>

<h4><a name="using-stack-trace"></a>26.5.1.5. Использование трассировки стека
</h4>
<p>На некоторых операционных системах журнал ошибок содержит трассировку
стека, если <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> неожиданно вылетает. Вы можете использовать это, чтобы узнать,
где (и, возможно, почему) это происходит. См.
<a href="server.htm#error-log">раздел 6.4.2</a>. Чтобы получить трассировку
стека, Вы не должны собирать <a href="programs.htm#mysqld"><span><strong>
mysqld</strong></span></a> с опцией <code>-fomit-frame-pointer</code> для
gcc. См. <a href="#compiling-for-debugging">раздел 26.5.1.1</a>.
</p>

<p>Трассировка стека в журнале ошибок выглядит примерно так:
<pre>
mysqld got signal 11;
Attempting backtrace. You can use the following information
to find out where mysqld died. If you see no messages after
this, something went terribly wrong...

stack_bottom = 0x41fd0110 thread_stack 0x40000
mysqld(my_print_stacktrace+0x32)[0x9da402]
mysqld(handle_segfault+0x28a)[0x6648e9]
/lib/libpthread.so.0[0x7f1a5af000f0]
/lib/libc.so.6(strcmp+0x2)[0x7f1a5a10f0f2]
mysqld(_Z21check_change_passwordP3THDPKcS2_Pcj+0x7c)[0x7412cb]
mysqld(_ZN16set_var_password5checkEP3THD+0xd0)[0x688354]
mysqld(_Z17sql_set_variablesP3THDP4ListI12set_var_baseE+0x68)[0x688494]
mysqld(_Z21mysql_execute_commandP3THD+0x41a0)[0x67a170]
mysqld(_Z11mysql_parseP3THDPKcjPS2_+0x282)[0x67f0ad]
mysqld(_Z16dispatch_command19enum_server_commandP3THDPcj+0xbb7[0x67fdf8]
mysqld(_Z10do_commandP3THD+0x24d)[0x6811b6]
mysqld(handle_one_connection+0x11c)[0x66e05e]
</pre>

Если разрешение имен функций для трассировки терпит неудачу, трассировка
содержит меньше информации:
<pre>
mysqld got signal 11;
Attempting backtrace. You can use the following information
to find out where mysqld died. If you see no messages after
this, something went terribly wrong...

stack_bottom = 0x41fd0110 thread_stack 0x40000
[0x9da402]
[0x6648e9]
[0x7f1a5af000f0]
[0x7f1a5a10f0f2]
[0x7412cb]
[0x688354]
[0x688494]
[0x67a170]
[0x67f0ad]
[0x67fdf8]
[0x6811b6]
[0x66e05e]
</pre>
В последнем случае Вы можете использовать утилиту
<a href="programs.htm#resolve-stack-dump"><span><strong>resolve_stack_dump
</strong></span></a>, чтобы определить, где
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
упал при использовании следующей процедуры:</p>

<ol type="1"><li><p>Скопируйте числа из трассировки стека в файл, например,
<code>mysqld.stack</code>. Числа не должны включать
окружающие квадратные скобки:
<pre>
0x9da402
0x6648e9
0x7f1a5af000f0
0x7f1a5a10f0f2
0x7412cb
0x688354
0x688494
0x67a170
0x67f0ad
0x67fdf8
0x6811b6
0x66e05e
</pre></li>

<li><p>Сделайте файл символа для сервера
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>:
<pre>
shell&gt; nm -n libexec/mysqld &gt; /tmp/mysqld.sym
</pre>

Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
не скомпонован статически, используйте следующую команду вместо этого:
<pre>
shell&gt; nm -D -n libexec/mysqld &gt; /tmp/mysqld.sym
</pre>

Если Вы хотите расшифровать C++ символы, используйте
<code>--demangle</code>, при наличии для <span><strong>nm</strong></span>.
Если у Вашей версии <span><strong>nm</strong></span> нет этой опции, то Вы
должны будете использовать команду <span><strong>c++filt</strong></span>
после того, как дамп стека был произведен для имен C++.</li>

<li>Выполните следующую команду:
<pre>
shell&gt; resolve_stack_dump -s /tmp/mysqld.sym -n mysqld.stack
</pre>
Если Вы не смогли включить имена C++ в Ваш файл символа, обработайте вывод
<a href="programs.htm#resolve-stack-dump"><span><strong>resolve_stack_dump
</strong></span></a> <span><strong>c++filt</strong></span>:
<pre>
shell&gt; resolve_stack_dump -s /tmp/mysqld.sym -n mysqld.stack | c++filt
</pre>

Это распечатывает, где <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> падает. Если это не помогает Вам узнать, почему так,
Вы должны создать отчет об ошибках и включить вывод предыдущей команды.</p>

<p>Однако, в большинстве случаев это не помогает нам иметь только
трассировку стека, чтобы найти причину проблемы. Чтобы быть в состоянии
определить местонахождение ошибки или обеспечить обходное решение, в
большинстве случаев мы должны знать запрос, который уничтожил
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
и предпочтительно прецедент так, чтобы мы могли повторить проблему! См.
<a href="intro.htm#bug-reports">раздел 1.7</a>.</p></li></ol>

<p>Более новые версии функции трассировки в <code>glibc</code> также
печатают адрес относительно объекта. На <code>glibc</code>-системах (Linux),
трассировка для катастрофического отказа в пределах плагина выглядит так:
<pre>
plugin/auth/auth_test_plugin.so(+0x9a6)[0x7ff4d11c29a6]
</pre>
Преобразовать относительный адрес (<code>+0x9a6</code>) в имя файла и номер
строки можно командой:
<pre>
shell&gt; addr2line -fie auth_test_plugin.so 0x9a6
auth_test_plugin
mysql-trunk/plugin/auth/test_plugin.c:65
</pre>
Утилита <span><strong>addr2line</strong></span> часть
пакета <code>binutils</code> в Linux.</p>

<p>В Solaris процедура подобна. Solaris <code>printstack()</code>
уже печатает правильные адреса:
<pre>
plugin/auth/auth_test_plugin.so:0x1510
</pre>
Чтобы преобразовать, используйте эту команду:
<pre>
shell&gt; gaddr2line -fie auth_test_plugin.so 0x1510
mysql-trunk/plugin/auth/test_plugin.c:88
</pre>

Windows уже печатает адрес, имя функции и строку:
<pre>
000007FEF07E10A4 auth_test_plugin.dll!auth_test_plugin()[test_plugin.c:72]
</pre>

<h4><a name="using-log-files"></a>26.5.1.6. Использование журнала сервера,
чтобы найти причины ошибок в mysqld</h4>
<p>Отметьте, что прежде, чем запустить <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> с включенным общим журналом запросов, Вы
должны проверить все свои таблицы с <a href="programs.htm#myisamchk"><span>
<strong>myisamchk</strong></span></a>. См. <a href="server.htm">главу 6</a>.
</p>

<p>Если <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> падает или виснет, надо запустить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
с включенным общим журналом запросов. Когда
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
упдает снова, Вы можете исследовать конец файла системного журнала для
запроса, который уничтожил
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>.</p>

<p>Если Вы используете значение по умолчанию, общий файл системного журнала
запросов сохранен в каталоге базы данных как
<code><em><code>host_name</code></em>.log</code>. В большинстве случаев это
последний запрос в файле системного журнала, который уничтожил
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>, но
если возможно Вы должны проверить это, перезапуская
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> и
выполняя найденный запрос из <a href="programs.htm#mysql"><span><strong>
mysql</strong></span></a>. Если это работает, Вы должны также проверить все
сложные запросы, которые не завершались.</p>

<p>Вы можете также попробовать команду
<a href="sql.htm#explain"><code>EXPLAIN</code></a> для всех запросов
<a href="sql.htm#select"><code>SELECT</code></a>, которые занимают много
времени, чтобы гарантировать, что <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> использует индексы должным образом. См.
<a href="sql.htm#explain">раздел 14.8.2</a>.</p>

<p>Вы можете найти запросы, которые занимают много времени, чтобы выполнить,
запуская <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> с включенным журналом медленных запросов. См.
<a href="server.htm#slow-query-log">раздел 6.4.5</a>.</p>

<p>Если Вы находите текст <code>mysqld restarted</code> в файле журнала
ошибок (обычно называемый <code>hostname.err</code>), Вы, вероятно, нашли
запрос, который заставляет <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> падать. Если это происходит, Вы должны проверить все
свои таблицы с <a href="programs.htm#myisamchk"><span><strong>myisamchk
</strong></span></a> (см. <a href="server.htm">главу 6</a>) и проверить
запросы в файлах системного журнала MySQL. Если Вы находите такой запрос,
попытайтесь сначала обновиться до новейшей версии MySQL. Если это не
помогает, и Вы ничего не можете найти в архиве рассылок <code>mysql</code>,
Вы должны сообщить об ошибке в списке рассылки MySQL. Списки рассылки описаны
на <a href="../../../lists.mysql.com/default.htm" target="_top">http://lists.mysql.com/
</a>, там также есть ссылки к архивам списка онлайн.</p>

<p>Если Вы запустили <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> с
<a href="server.htm#option_mysqld_myisam-recover-options"><code>
--myisam-recover-options</code></a>, MySQL автоматически проверяет и пытается
восстановить таблицы <code>MyISAM</code>, если они отмечены как 'не закрыты
должным образом' или 'отказ'. Если это происходит, MySQL пишет метку в файл
<code>hostname.err</code> <code>'Warning: Checking table ...'</code>,
которая сопровождается <code>Warning: Repairing table</code>, если таблица
должна быть восстановлена. Если Вы получаете много этих ошибок, без
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
вылетевшего неожиданно как раз перед этим, то что-то тут неправильно и должно
быть исследовано далее. См. <a href="server.htm#server-options">раздел 6.1.4
</a>.</p>

<p>Когда сервер обнаруживает табличное повреждение <code>MyISAM</code>, он
пишет дополнительную информацию в журнал ошибок, такую как имя и номер строки
исходного файла и список потоков, получающих доступ к таблице. Пример:
<code>Got an error from thread_id=1, mi_dynrec.c:368</code>.
Это полезная информация, чтобы включать в отчеты об ошибках.</p>

<p>Это не хороший знак, если
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
падает неожиданно, но в этом случае, Вы не должны заняться расследованиями
сообщения <code>Checking table...</code>. Вместо этого надо попытаться
узнать, почему <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> стал падать.</p>

<h4><a name="reproducible-test-case"></a>26.5.1.7. Создание тестового случая
при повреждении таблицы</h4>
<p>Следующая процедура относится к таблицам
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.
Для информации о шагах для поврежденных таблиц <code>InnoDB</code> см.
<a href="intro.htm#bug-reports">раздел 1.7</a>.</p>

<p>Если Вы сталкиваетесь с поврежденной таблицей
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a> или
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
всегда терпит неудачу после некоторых запросов обновления, Вы можете
проверить, восстанавливаема ли проблема, делая следующее:</p>

<ol type="1"><li><p>Остановите демон MySQL:
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin shutdown</strong>
</span></a>.</li>

<li>Сделайте резервное копирование таблиц, чтобы принять меры против очень
маловероятного случая, что ремонт сделает что-то плохое.</li>
<li>Проверьте все таблицы с <a href="programs.htm#myisamchk"><span><strong>
myisamchk -s database/*.MYI</strong></span></a>. Восстановите любые
поврежденные таблицы с <a href="programs.htm#myisamchk"><span><strong>
myisamchk -r database/<em><code>table</code></em>.MYI</strong></span></a>.
</li>

<li>Сделайте второе резервное копирование таблиц.</li>
<li>Удалите (или переместите подальше) любые старые файлы системного журнала
из каталога данных MySQL, если Вы нуждаетесь в большем количестве места.</li>

<li>Запустите <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с включенным двоичным журналом. Если Вы хотите найти запрос,
который разрушает <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>, Вы должны запустить сервер также с общим журналом запросов. См.
разделы <a href="server.htm#query-log">6.4.3</a> и
<a href="server.htm#binary-log">6.4.4</a>.</li>

<li>Когда Вы получили разрушенную таблицу, остановите сервер
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>.</li>
<li>Восстановите резервную копию.</li>

<li>Перезапустите <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> <span><em>без</em></span> включенного двоичного журнала.</li>
<li>Повторно выполните запросы из <a href="programs.htm#mysqlbinlog"><span>
<strong>mysqlbinlog binary-log-file | mysql</strong></span></a>.
Двоичной журнал сохранен в каталоге базы данных MySQL с именем
<code>hostname-bin.<em><code>NNNNNN</code></em></code>.</li>

<li>Если таблицы повреждены снова, или Вы можете заставить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
упасть с вышеупомянутой командой, Вы нашли восстанавливаемую ошибку.
FTP таблицы и двоичный журнал в нашу базе данных ошибок, используя
инструкции, данные в <a href="intro.htm#bug-reports">разделе 1.7</a>.
Если Вы клиент поддержки, Вы можете использовать центр поддержки клиентов
MySQL (<a href="../../../www.mysql.com/support/default.htm" target="_top">
http://www.mysql.com/support/</a>), чтобы предупредить команду MySQL о
проблеме и получить исправление как можно скорее.</p></li></ol>

<h3><a name="debugging-client"></a>26.5.2. Отладка клиента MySQL</h3>
<p>Чтобы быть в состоянии отладить клиента MySQL с интегрированным пакетом
отладки, Вы должны сконфигурировать MySQL с
<a href="install.htm#option_cmake_with_debug"><code>-DWITH_DEBUG=1</code>
</a>. См. <a href="install.htm#source-configuration-options">раздел 2.8.4</a>.

<p>Прежде, чем выполнить клиента, Вы должны установить переменную
окружения <code>MYSQL_DEBUG</code>:
<pre>
shell&gt; MYSQL_DEBUG=d:t:O,/tmp/client.trace
shell&gt; export MYSQL_DEBUG
</pre>
Это заставляет клиентов производить файл трассировки в
<code>/tmp/client.trace</code>.</p>

<p>Если у Вас есть проблемы с Вашим собственным кодом клиента, Вы должны
попытаться соединиться с сервером и выполнить Ваш запрос, используя клиента,
который, как известно, работает. Сделайте это, работая с
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
в режиме отладки (предполагается, что Вы собрали MySQL с отладкой):
<pre>
shell&gt; mysql --debug=d:t:O,/tmp/client.trace
</pre>
Это обеспечивает полезную информацию в случае, если Вы отправляете отчет об
ошибках по почте. См. <a href="intro.htm#bug-reports">раздел 1.7</a>.</p>

<p>Если Ваш клиент отказывает в некотором легально выглядящем коде, Вы должны
проверить что Ваш файл <code>mysql.h</code> соответствует библиотеке MySQL.
Очень частая ошибка состоит в том, чтобы использовать старый файл
<code>mysql.h</code> от старой установки MySQL с новой библиотекой MySQL.</p>

<h3><a name="dbug-package"></a>26.5.3. Пакет DBUG</h3>
<p>Сервер MySQL и большинство клиентов MySQL собраны с пакетом DBUG,
первоначально созданным Fred Fish. Когда Вы сконфигурировали MySQL для того,
чтобы отладить, этот пакет позволяет получить файл трассировки того, что
делает программа. См.
<a href="#making-trace-files">раздел 26.5.1.2</a>.</p>

<p>Этот раздел суммирует значения параметра, которые Вы можете определить в
опциях отладки в командной строке для программ MySQL, которые были созданы с
поддержкой отладки. Для получения дополнительной информации о
программировании с пакетом DBUG, см. руководство DBUG в каталоге
<code>dbug</code> исходных текстов MySQL. Лучше использовать недавний
дистрибутив, чтобы получить наиболее обновленное руководство DBUG.</p>

<p>Пакет DBUG может использоваться, вызывая программу с опцией
<code>--debug[=<em><code>debug_options</code></em>]</code> или
<code>-# [<em><code>debug_options</code></em>]</code>. Если Вы определяете
опцию <code>--debug</code> или <code>-#</code> без значения
<em><code>debug_options</code></em>, большинство программ MySQL использует
значение по умолчанию. Значение по умолчанию сервера
<code>d:t:i:o,/tmp/mysqld.trace</code> в Unix и
<code>d:t:i:O,\mysqld.trace</code> в Windows. Эффект этого
значения по умолчанию:</p>

<ul><li><p><code>d</code>: Включает вывод для всего макроопределения отладки.
</li>
<li><code>t</code>: Трассирует вызовы и выходы функций.</li>
<li><code>i</code>: Добавляет PID в строки вывода.</li>
<li><code>o,/tmp/mysqld.trace</code>,
<code>O,\mysqld.trace</code>: Устанавливает выходной файл отладки.
</p></li></ul>

<p>Большинство программ клиента использует значение по умолчанию
<em><code>debug_options</code></em>
<code>d:t:o,/tmp/<em><code>program_name</code></em>.trace</code>,
независимо от платформы.</p>

<p>Вот некоторые строки управления отладкой в качестве примера, как они могли
бы быть определены на командной строке оболочки:
<pre>
--debug=d:t
--debug=d:f,main,subr1:F:L:t,20
--debug=d,input,output,files:n
--debug=d:t:i:O,\\mysqld.trace
</pre>

Для <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
также возможно изменить настройки DBUG во время выполнения, устанавливая
системную переменную <a href="server.htm#sysvar_debug"><code>debug</code></a>.
Эта переменная имеет значения глобальное и сеанса:
<pre>
mysql&gt; SET GLOBAL debug = '<em><code>debug_options</code></em>';
mysql&gt; SET SESSION debug = '<em><code>debug_options</code></em>';
</pre>

Изменения во время выполнения требуют привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>,
даже для значения сеанса.</p>

<p>Значение <em><code>debug_options</code></em> последовательность
отделенных двоеточиями полей:
<pre>
field_1:field_2:...:field_<em><code>N</code></em>
</pre>

Каждое поле в пределах значения состоит из принудительного символа флага,
которому произвольно предшествует символ <code>+</code> или <code>-</code>,
произвольно сопровождаемый разграниченным запятыми списком модификаторов:
<pre>
[+|-]flag[,modifier,modifier,...,modifier]
</pre>
Следующая таблица описывает разрешенные символы флага. Непризнанные символы
флага будут тихо проигнорированы.</p>

<table border="1">
<tbody><tr><td scope="row"><p><span><strong>Флаг</strong></span></p></td>
<td><p><span><strong>Описание</strong></span></p></td></tr>
<tr><td scope="row"><p><code>d</code></p></td>
<td><p>Включите вывод из макроса DBUG_<em><code>XXX</code></em> для текущего
состояния. Может сопровождаться списком ключевых слов, который включает вывод
только для макроопределения DBUG с тем ключевым словом. Пустой список
ключевых слов включает вывод для всего макроопределения.</p>

<p>В MySQL общий отладочный макрос включает слова
<code>enter</code>, <code>exit</code>, <code>error</code>,
<code>warning</code>, <code>info</code> и <code>loop</code>.</p></td></tr>

<tr><td scope="row"><p><code>D</code></p></td>
<td><p>Задержка после каждого вывода строку. Параметр задержка в десятых
долях секунды, согласно точности машины. Например, <code>D,20</code>
определяет задержку в две секунды.</p></td></tr>

<tr><td scope="row"><p><code>f</code></p></td>
<td><p>Ограничить отладку, трассировку и профилирование списком названных
функций. Пустой список включает все функции. Соответствующие флаги
<code>d</code> или <code>t</code> должны все еще быть даны: этот флаг только
ограничивает их действие.</p></td></tr>

<tr><td scope="row"><p><code>F</code></p></td>
<td><p>Идентифицирует название исходного файла для каждой строки отладки
или вывода трассировки.</p></td></tr>

<tr><td scope="row"><p><code>i</code></p></td>
<td><p>Идентифицирует процесс по PID или ID потока для каждой строки отладки
или вывода трассировки.</p></td></tr>

<tr><td scope="row"><p><code>L</code></p></td>
<td><p>Идентифицирует номер строки исходного файла для каждой строки отладки
или вывода трассировки.</p></td></tr>

<tr><td scope="row"><p><code>n</code></p></td>
<td><p>Напечатает текущую функциональную глубину вложения для каждой строки
отладки или вывода трассировки.</p></td></tr>

<tr><td scope="row"><p><code>N</code></p></td>
<td><p>Номер каждой строки отладки.</p></td></tr>
<tr><td scope="row"><p><code>o</code></p></td>
<td><p>Перенаправить выходной поток отладчика к указанному файлу. Вывод
значения по умолчанию <code>stderr</code>.</p></td></tr>

<tr><td scope="row"><p><code>O</code></p></td>
<td><p>Подобно <code>o</code>, но файл действительно сохраняется после каждой
записи. При необходимости, файл закрыт и вновь открыт.</p></td></tr>

<tr><td scope="row"><p><code>p</code></p></td>
<td><p>Ограничивает действия отладчика указанными процессами. Процесс должен
быть идентифицирован с макросом <code>DBUG_PROCESS</code>
и соответствовать одному в списке для действий отладчика.</p></td></tr>

<tr><td scope="row"><p><code>P</code></p></td>
<td><p>Напечатает текущее название процесса для каждой строки отладки
или вывода трассировки.</p></td></tr>

<tr><td scope="row"><p><code>r</code></p></td>
<td><p>Продвигая новое состояние, не наследует функциональный уровень
вложенности предыдущего состояния. Полезно, когда вывод должен
начаться в левом поле.</p></td></tr>

<tr><td scope="row"><p><code>S</code></p></td>
<td><p>Выполянть функцию <code>_sanity(_file_, _line_)</code> для каждой
отлаживаемой функции, пока <code>_sanity()</code> не вернет что-то,
что отличается от 0.</p></td></tr>

<tr><td scope="row"><p><code>t</code></p></td>
<td><p>Включить строки трассировки вызова и завершения функций. Может
сопровождаться списком (содержащим только один модификатор), задающим
максимальный уровень трассировки, вне которого никакой вывод не происходит
для отлаживающего или прослеживающего макроопределения. Значение по умолчанию
опция времени компиляции.</p></td></tr></tbody></table>

<p>Предваряющий символ <code>+</code> или <code>-</code> и сопровождающий
список модификаторов используются для таких символов флага, как
<code>d</code> или <code>f</code>, которые могут включить отладку для всех
применимых модификаторов или только некоторые из них:</p>

<ul><li><p>Без символа <code>+</code> или <code>-</code> значение флага
установлено точно в список модификаторов как дано.</li>
<li>С символом <code>+</code> или <code>-</code> модификаторы в
списке добавлены к (или вычтены из) текущего списка модификаторов.
</p></li></ul>

<p>Следующие примеры показывают, как это работает на флаге
<code>d</code>. Пустой список <code>d</code> включает вывод для всего
макроопределения отладки. Непустой список включает вывод только для
ключевых слов в списке.</p>

<p>Эти запросы устанавливают значение <code>d</code>
в список модификаторов как дано:
<pre>
mysql&gt; SET debug = 'd';
mysql&gt; SELECT @@debug;
+---------+
| @@debug |
+---------+
| d       |
+---------+
mysql&gt; SET debug = 'd,error,warning';
mysql&gt; SELECT @@debug;
+-----------------+
| @@debug         |
+-----------------+
| d,error,warning |
+-----------------+
</pre>

Лидирующие <code>+</code> или <code>-</code> добавляют к (или вычитают
из) текущее значение <code>d</code>:
<pre>
mysql&gt; SET debug = '+d,loop';
mysql&gt; SELECT @@debug;
+----------------------+
| @@debug              |
+----------------------+
| d,error,warning,loop |
+----------------------+
mysql&gt; SET debug = '-d,error,loop';
mysql&gt; SELECT @@debug;
+-----------+
| @@debug   |
+-----------+
| d,warning |
+-----------+
</pre>

Добавление к <span>все макросы разрешены</span> результат не меняет:
<pre>
mysql&gt; SET debug = 'd';
mysql&gt; SELECT @@debug;
+---------+
| @@debug |
+---------+
| d       |
+---------+
mysql&gt; SET debug = '+d,loop';
mysql&gt; SELECT @@debug;
+---------+
| @@debug |
+---------+
| d       |
+---------+
</pre>

Выключение всех включенных макросов отключает флаг <code>d</code> полностью:
<pre>
mysql&gt; SET debug = 'd,error,loop';
mysql&gt; SELECT @@debug;
+--------------+
| @@debug      |
+--------------+
| d,error,loop |
+--------------+
mysql&gt; SET debug = '-d,error,loop';
mysql&gt; SELECT @@debug;
+---------+
| @@debug |
+---------+
|         |
+---------+
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
