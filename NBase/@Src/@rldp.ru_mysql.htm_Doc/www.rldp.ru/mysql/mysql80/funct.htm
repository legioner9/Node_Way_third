<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <title>Глава 13. Функции и операторы</title>
<meta name="generator" content="DocBook XSL Stylesheets + chunker.py v1.9.2" />
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="functions"></a>Глава 13. Функции и операторы</h1>
<p>Выражения могут использоваться в запросах <a href="glossary.htm#glos_sql">
SQL</a>, таких как <code>ORDER BY</code> или <code>HAVING</code> в
<a href="sql.htm#select"><code>SELECT</code></a>, в предложении
<code>WHERE</code> запросов <a href="sql.htm#select"><code>SELECT</code></a>,
<a href="sql.htm#delete"><code>DELETE</code></a> или
<a href="sql.htm#update"><code>UPDATE</code></a> или в операторе
<a href="sql.htm#set-variable"><code>SET</code></a>.
Выражения могут быть написаны, используя литеральные значения, значения
столбцов, <code>NULL</code>, встроенные функции, сохраненные функции,
определяемые пользователем функции и операторы. Эта глава описывает функции и
операторы, которые разрешены для того, чтобы написать выражения в MySQL.
Инструкции для того, чтобы написать сохраненные функции и определяемые
пользователем функции даны в разделах
<a href="stored.htm#stored-routines">21.2</a> и
<a href="extend.htm#adding-functions">26.4</a>. См.
<a href="lang.htm#function-resolution">раздел 10.2.4</a> для правил,
описывающих, как сервер интерпретирует ссылки на различные виды функций.</p>

<p>Выражение, которое содержит <code>NULL</code> всегда производит
<code>NULL</code>, если иное не обозначено в документации для особой
функции или оператора.</p>

<p>По умолчанию, не должно быть никакого пробела между именем функции и
круглой скобкой после этого. Это помогает анализатору MySQL различить вызовы
функции и ссылки на таблицы или столбцы, у которых, оказывается, есть то же
самое имя, как у функции. Однако, пробелы вокруг
функциональных параметров разрешены.</p>

<p>Вы можете сказать серверу MySQL принимать пробелы после имен функций,
запуская его с опцией <a href="server.htm#option_mysqld_sql-mode"><code>
--sql-mode=IGNORE_SPACE</code></a>. См.
<a href="server.htm#sql-mode">раздел 6.1.8</a>.
Отдельные программы клиента могут просить это поведение при использовании
опции <code>CLIENT_IGNORE_SPACE</code> для
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a>. В этом случае все имена функций становятся зарезервированными словами.
</p>

<p>Ради краткости большинство примеров в этой главе выводит на экран вывод из
программы <a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
в сокращенной форме. Вместо того, чтобы показывать примеры в этом формате:
<pre>
mysql&gt; SELECT MOD(29,9);
+-----------+
| mod(29,9) |
+-----------+
|   2       |
+-----------+
1 rows in set (0.00 sec)
</pre>

<p>Этот формат используется:
<pre>
mysql&gt; SELECT MOD(29,9);
    -&gt; 2
</pre>

<h2><a name="func-op-summary-ref"></a>13.1. Обзор функций и операторов</h2>
<a name="idm139965358622352"></a><p><b>Таблица 13.1. Функции и операторы</b>
</p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_abs"><code>ABS()
</code></a></td><td>Возвращает абсолютное значение</td></tr>
<tr><td scope="row"><a href="#function_acos"><code>ACOS()</code></a>
</td><td>Возвращает арккосинус</td></tr>
<tr><td scope="row"><a href="#function_adddate"><code>ADDDATE()
</code></a></td><td>Добавляет интервал времени к значению даты</td></tr>
<tr><td scope="row"><a href="#function_addtime"><code>ADDTIME()
</code></a></td><td>Добавляет время</td></tr>
<tr><td scope="row"><a href="#function_aes-decrypt"><code>
AES_DECRYPT()</code></a></td><td>Дешифрует с использованием AES</td></tr>
<tr><td scope="row"><a href="#function_aes-encrypt"><code>
AES_ENCRYPT()</code></a></td><td>Шифрует с использованием AES</td></tr>
<tr><td scope="row"><a href="#operator_and"><code>AND</code>,
<code>&amp;&amp;</code></a></td><td>Логический AND</td></tr>
<tr><td scope="row"><a href="#function_any-value"><code>
ANY_VALUE()</code></a></td><td>Подавить отклонение значения
ONLY_FULL_GROUP_BY</td></tr>
<tr><td scope="row"><a href="#function_ascii"><code>ASCII()</code>
</a></td><td>Возвращает числовое значение крайнего левого символа</td></tr>
<tr><td scope="row"><a href="#function_asin"><code>ASIN()</code></a>
</td><td>Арксинус</td></tr>
<tr><td scope="row"><a href="#operator_assign-equal"><code>=</code>
</a></td><td>Назначает значение (как часть <a href="sql.htm#set-variable">
<code>SET</code></a>)</td></tr>
<tr><td scope="row"><a href="#operator_assign-value"><code>:=</code>
</a></td><td>Назначает значение</td></tr>
<tr><td scope="row"><code>ASYMMETRIC_DECRYPT()</code></td><td>
Дешифрует зашифрованный текст, используя частный или открытый ключ</td></tr>
<tr><td scope="row"><code>ASYMMETRIC_DERIVE()</code></td><td>
Получить симметричный ключ из асимметричных ключей</td></tr>
<tr><td scope="row"><code>ASYMMETRIC_ENCRYPT()</code></td><td>
Шифрует открытый текст, используя частный или открытый ключ</td></tr>
<tr><td scope="row"><code>ASYMMETRIC_SIGN()</code></td><td>
Генерирует сигнатуру</td></tr>
<tr><td scope="row"><code>ASYMMETRIC_VERIFY()</code></td><td>
Проверяет соответствие сигнатуры</td></tr>
<tr><td scope="row"><a href="#function_atan"><code>ATAN()</code></a>
</td><td>Арктангенс</td></tr>
<tr><td scope="row"><a href="#function_atan2"><code>ATAN2()</code>,
<code>ATAN()</code></a></td><td>Арктангенс двух параметров</td></tr>
<tr><td scope="row"><a href="#function_avg"><code>AVG()</code></a>
</td><td>Среднее значение</td></tr>
<tr><td scope="row"><a href="#function_benchmark"><code>BENCHMARK()
</code></a></td><td>Неоднократно выполняет выражение</td></tr>
<tr><td scope="row"><a href="#operator_between"><code>
BETWEEN ... AND ...</code></a></td><td>Проверяет, находится ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#function_bin"><code>BIN()</code></a>
</td><td>Строка, содержащая двоичное представление числа</td></tr>
<tr><td scope="row"><a href="#function_bin-to-uuid"><code>
BIN_TO_UUID()</code></a></td><td>Конвертирует двоичный UUID в строку
</td></tr>
<tr><td scope="row"><a href="#operator_binary"><code>BINARY</code>
</a></td><td>Преобразует обычную строку в двоичную</td></tr>
<tr><td scope="row"><a href="#function_bit-and"><code>BIT_AND()
</code></a></td><td>Битовое AND</td></tr>
<tr><td scope="row"><a href="#function_bit-count"><code>BIT_COUNT()
</code></a></td><td>Возвратить число битов, которые установлены</td></tr>
<tr><td scope="row"><a href="#function_bit-length"><code>
BIT_LENGTH()</code></a></td><td>Длина параметра в битах</td></tr>
<tr><td scope="row"><a href="#function_bit-or"><code>BIT_OR()
</code></a></td><td>Битовое OR</td></tr>
<tr><td scope="row"><a href="#function_bit-xor"><code>BIT_XOR()
</code></a></td><td>Битовое XOR</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-and"><code>&amp;
</code></a></td><td>Битовое AND</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-invert">
<code>~</code></a></td><td>Битовая инверсия</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-or"><code>|</code>
</a></td><td>Битовое OR</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-xor"><code>^</code>
</a></td><td>Битовое XOR</td></tr>
<tr><td scope="row"><a href="#operator_case"><code>CASE</code></a>
</td><td>Оператор Case</td></tr>
<tr><td scope="row"><a href="#function_cast"><code>CAST()</code></a>
</td><td>Приводит значение к определенному типу</td></tr>
<tr><td scope="row"><a href="#function_ceil"><code>CEIL()</code></a>
</td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_ceiling"><code>CEILING()
</code></a></td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_char"><code>CHAR()</code></a>
</td><td>Возвратить символ для каждого целого числа</td></tr>
<tr><td scope="row"><a href="#function_char-length"><code>
CHAR_LENGTH()</code></a></td><td>Число символов в параметре</td></tr>
<tr><td scope="row"><a href="#function_character-length"><code>
CHARACTER_LENGTH()</code></a></td><td>Синоним CHAR_LENGTH()</td></tr>
<tr><td scope="row"><a href="#function_charset"><code>CHARSET()
</code></a></td><td>Набор символов параметра</td></tr>
<tr><td scope="row"><a href="#function_coalesce"><code>COALESCE()
</code></a></td><td>Первый не-NULL параметр</td></tr>
<tr><td scope="row"><a href="#function_coercibility"><code>
COERCIBILITY()</code></a></td><td>Сопоставление значения строкового параметра
</td></tr>
<tr><td scope="row"><a href="#function_collation"><code>COLLATION()
</code></a></td><td>Сопоставление значения строкового параметра</td></tr>
<tr><td scope="row"><a href="#function_compress"><code>COMPRESS()
</code></a></td><td>Возвращает результат как двоичную строку</td></tr>
<tr><td scope="row"><a href="#function_concat"><code>CONCAT()</code>
</a></td><td>Конкатенация строк</td></tr>
<tr><td scope="row"><a href="#function_concat-ws"><code>CONCAT_WS()
</code></a></td><td>Конкатенация строк с сепаратором</td></tr>
<tr><td scope="row"><a href="#function_connection-id"><code>
CONNECTION_ID()</code></a></td><td>ID соединения (ID потока)</td></tr>
<tr><td scope="row"><a href="#function_conv"><code>CONV()</code></a>
</td><td>Преобразует числа между системами счисления</td></tr>
<tr><td scope="row"><a href="#function_convert"><code>CONVERT()
</code></a></td><td>Возвращает значение в качестве определенного типа
</td></tr>
<tr><td scope="row"><a href="#function_convert-tz"><code>
CONVERT_TZ()</code></a></td><td>Преобразует временные зоны</td></tr>
<tr><td scope="row"><a href="#function_cos"><code>COS()</code></a>
</td><td>Косинус</td></tr>
<tr><td scope="row"><a href="#function_cot"><code>COT()</code></a>
</td><td>Котангенс</td></tr>
<tr><td scope="row"><a href="#function_count"><code>COUNT()</code>
</a></td><td>Число строк</td></tr>
<tr><td scope="row"><a href="#function_count-distinct"><code>
COUNT(DISTINCT)</code></a></td><td>Число различных значений</td></tr>
<tr><td scope="row"><a href="#function_crc32"><code>CRC32()</code>
</a></td><td>Значение циклического контроля по избыточности</td></tr>
<tr><td scope="row"><code>CREATE_ASYMMETRIC_PRIV_KEY()</code></td><td>
Создает приватный ключ</td></tr>
<tr><td scope="row"><code>CREATE_ASYMMETRIC_PUB_KEY()</code></td><td>
Создает публичный ключ</td></tr>
<tr><td scope="row"><code>CREATE_DH_PARAMETERS()</code></td><td>
Генерирует разделяемый DH</td></tr>
<tr><td scope="row"><code>CREATE_DIGEST()</code></td><td>
Генерирует дайджест строки</td></tr>
<tr><td scope="row"><a href="#function_curdate"><code>CURDATE()
</code></a></td><td>Текущяя дата</td></tr>
<tr><td scope="row"><a href="#function_current-date"><code>
CURRENT_DATE()</code>, <code>CURRENT_DATE</code></a></td><td>
Синонимы для CURDATE()</td></tr>
<tr><td scope="row"><a href="#function_current-role"><code>
CURRENT_ROLE()</code></a></td><td>Текущяя активная роль</td></tr>
<tr><td scope="row"><a href="#function_current-time"><code>
CURRENT_TIME()</code>, <code>CURRENT_TIME</code></a></td><td>
Синонимы для CURTIME()</td></tr>
<tr><td scope="row"><a href="#function_current-timestamp"><code>
CURRENT_TIMESTAMP()</code>, <code>CURRENT_TIMESTAMP</code></a></td><td>
Синонимы для NOW()</td></tr>
<tr><td scope="row"><a href="#function_current-user"><code>
CURRENT_USER()</code>, <code>CURRENT_USER</code></a></td><td>
Имя пользователя и имя хоста</td></tr>
<tr><td scope="row"><a href="#function_curtime"><code>CURTIME()
</code></a></td><td>Текущее время</td></tr>
<tr><td scope="row"><a href="#function_database"><code>DATABASE()
</code></a></td><td>Имя базы данных по умолчанию</td></tr>
<tr><td scope="row"><a href="#function_date"><code>DATE()</code></a>
</td><td>Извлекает часть даты из date или datetime</td></tr>
<tr><td scope="row"><a href="#function_date-add"><code>DATE_ADD()
</code></a></td><td>Добавляет интервал к дате</td></tr>
<tr><td scope="row"><a href="#function_date-format"><code>
DATE_FORMAT()</code></a></td><td>Форматирует дату как надо</td></tr>
<tr><td scope="row"><a href="#function_date-sub"><code>DATE_SUB()
</code></a></td><td>Вычитает интервал из даты</td></tr>
<tr><td scope="row"><a href="#function_datediff"><code>DATEDIFF()
</code></a></td><td>Вычитает две даты</td></tr>
<tr><td scope="row"><a href="#function_day"><code>DAY()</code></a>
</td><td>Синоним для DAYOFMONTH()</td></tr>
<tr><td scope="row"><a href="#function_dayname"><code>DAYNAME()
</code></a></td><td>Название дня</td></tr>
<tr><td scope="row"><a href="#function_dayofmonth"><code>
DAYOFMONTH()</code></a></td><td>День месяца (0-31)</td></tr>
<tr><td scope="row"><a href="#function_dayofweek"><code>DAYOFWEEK()
</code></a></td><td>День недели (индекс)</td></tr>
<tr><td scope="row"><a href="#function_dayofyear"><code>DAYOFYEAR()
</code></a></td><td>День года (1-366)</td></tr>
<tr><td scope="row"><a href="#function_decode"><code>DECODE()</code>
</a></td><td>Декодирует строку из ENCODE()</td></tr>
<tr><td scope="row"><a href="#function_default"><code>DEFAULT()
</code></a></td><td>Значение по умолчанию для столбца таблицы</td></tr>
<tr><td scope="row"><a href="#function_degrees"><code>DEGREES()
</code></a></td><td>Конвертирует радианы в degrees</td></tr>
<tr><td scope="row"><a href="#function_des-decrypt"><code>
DES_DECRYPT()</code></a></td><td>Дешифрует строку</td></tr>
<tr><td scope="row"><a href="#function_des-encrypt"><code>
DES_ENCRYPT()</code></a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#operator_div"><code>DIV</code></a>
</td><td>Целочисленное деление</td></tr>
<tr><td scope="row"><a href="#operator_divide"><code>/</code></a>
</td><td>Оператор деления</td></tr>
<tr><td scope="row"><a href="#function_elt"><code>ELT()</code></a>
</td><td>Строка как номер в индексе</td></tr>
<tr><td scope="row"><a href="#function_encode"><code>ENCODE()</code>
</a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#function_encrypt"><code>ENCRYPT()
</code></a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#operator_equal"><code>=</code></a>
</td><td>Оператор равенства</td></tr>
<tr><td scope="row"><a href="#operator_equal-to"><code>&lt;=&gt;
</code></a></td><td>Оператор равенства, защищенный от NULL</td></tr>
<tr><td scope="row"><a href="#function_exp"><code>EXP()</code></a>
</td><td>Возведение в степень</td></tr>
<tr><td scope="row"><a href="#function_export-set"><code>
EXPORT_SET()</code></a></td><td>Возвращает строку таким образом, что для
каждого установленного бита Вы получаете строку on, а для каждого
неустановленного бита строку off</td></tr>
<tr><td scope="row"><a href="#function_extract"><code>EXTRACT()
</code></a></td><td>Извлекает часть даты</td></tr>
<tr><td scope="row"><a href="#function_extractvalue"><code>
ExtractValue()</code></a></td><td>Извлекает значение из строки XML,
используя нотацию XPath</td></tr>
<tr><td scope="row"><a href="#function_field"><code>FIELD()</code>
</a></td><td>Индекс (позиция) первого параметра в последующих параметрах
</td></tr>
<tr><td scope="row"><a href="#function_find-in-set"><code>
FIND_IN_SET()</code></a></td><td>Номер позиции первого параметра в
пределах второго параметра</td></tr>
<tr><td scope="row"><a href="#function_floor"><code>FLOOR()</code>
</a></td><td>Самое большое целочисленное значение, не больше, чем параметр
</td></tr>
<tr><td scope="row"><a href="#function_format"><code>FORMAT()</code>
</a></td><td>Число, отформатированное к конкретному
количеству десятичных разрядов</td></tr>
<tr><td scope="row"><a href="#function_found-rows"><code>
FOUND_ROWS()</code></a></td><td>Для SELECT с предложением LIMIT
число строк, которые были бы возвращены, если бы там не было LIMIT</td></tr>
<tr><td scope="row"><a href="#function_from-base64"><code>
FROM_BASE64()</code></a></td><td>Декодирует строку base-64</td></tr>
<tr><td scope="row"><a href="#function_from-days"><code>FROM_DAYS()
</code></a></td><td>Конвертирует число дней в дату</td></tr>
<tr><td scope="row"><a href="#function_from-unixtime"><code>
FROM_UNIXTIME()</code></a></td><td>Форматирует Unix timestamp в дату</td>
</tr>
<tr><td scope="row"><a href="#function_geometrycollection"><code>
GeometryCollection()</code></a></td><td>
Создает набор геометрии из конфигураций</td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT()</code></a></td><td>Дата, сформатированная в строку</td></tr>
<tr><td scope="row"><a href="#function_get-lock"><code>GET_LOCK()
</code></a></td><td>Получить названную блокировку</td></tr>
<tr><td scope="row"><a href="#operator_greater-than"><code>&gt;
</code></a></td><td>Оператор "больше чем"</td></tr>
<tr><td scope="row"><a href="#operator_greater-than-or-equal"><code>
&gt;=</code></a></td><td>Оператор "больше чем или равно"</td></tr>
<tr><td scope="row"><a href="#function_greatest"><code>GREATEST()
</code></a></td><td>Самый большой параметр</td></tr>
<tr><td scope="row"><a href="#function_group-concat"><code>
GROUP_CONCAT()</code></a></td><td>Конкатенация строк</td></tr>
<tr><td scope="row"><a href="#function_gtid-subset"><code>
GTID_SUBSET()</code></a></td><td>Возвратит истину, если все GTID в
подмножестве установлены, иначе ложь</td></tr>
<tr><td scope="row"><a href="#function_gtid-subtract"><code>
GTID_SUBTRACT()</code></a></td><td>Возвратит все GTID в наборе, которые
не находятся в подмножестве.</td></tr>
<tr><td scope="row"><a href="#function_hex"><code>HEX()</code></a>
</td><td>Возвратит шестнадцатеричное представление десятичного
числа или строки</td></tr>
<tr><td scope="row"><a href="#function_hour"><code>HOUR()</code></a>
</td><td>Извлекает час</td></tr>
<tr><td scope="row"><a href="#function_if"><code>IF()</code></a>
</td><td>Конструкция If/else</td></tr>
<tr><td scope="row"><a href="#function_ifnull"><code>IFNULL()</code>
</a></td><td>Конструкция Null If/else</td></tr>
<tr><td scope="row"><a href="#function_in"><code>IN()</code></a>
</td><td>Находится ли значение в пределах ряда значений</td></tr>
<tr><td scope="row"><a href="#function_inet-aton"><code>INET_ATON()
</code></a></td><td>Числовое значение IP-адреса</td></tr>
<tr><td scope="row"><a href="#function_inet-ntoa"><code>INET_NTOA()
</code></a></td><td>IP-адрес из числового значения</td></tr>
<tr><td scope="row"><a href="#function_inet6-aton"><code>
INET6_ATON()</code></a></td><td>Числовое значение IPv6-адреса</td></tr>
<tr><td scope="row"><a href="#function_inet6-ntoa"><code>
INET6_NTOA()</code></a></td><td>IPv6-адрес из числового значения</td></tr>
<tr><td scope="row"><a href="#function_insert"><code>INSERT()</code>
</a></td><td>Вставить подстроку в указанной позиции</td></tr>
<tr><td scope="row"><a href="#function_instr"><code>INSTR()</code>
</a></td><td>Индекс первого возникновения подстроки</td></tr>
<tr><td scope="row"><a href="#function_interval"><code>INTERVAL()
</code></a></td><td>Индекс параметра, который меньше, чем первый параметр
</td></tr>
<tr><td scope="row"><a href="#operator_is"><code>IS</code></a></td>
<td>Проверка аргумента на двоичность</td></tr>
<tr><td scope="row"><a href="#function_is-free-lock"><code>
IS_FREE_LOCK()</code></a></td><td>Свободна ли названная блокировка</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4"><code>IS_IPV4()
</code></a></td><td>Является ли параметр адресом IPv4</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4-compat"><code>
IS_IPV4_COMPAT()</code></a></td><td>Является ли параметр
IPv4-совместимым адресом</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4-mapped"><code>
IS_IPV4_MAPPED()</code></a></td><td>Является ли параметр
IPv4-отображенным адресом</td></tr>
<tr><td scope="row"><a href="#function_is-ipv6"><code>IS_IPV6()
</code></a></td><td>Является ли параметр адресом IPv6</td></tr>
<tr><td scope="row"><a href="#operator_is-not"><code>IS NOT</code>
</a></td><td>Проверка аргумента на двоичность</td></tr>
<tr><td scope="row"><a href="#operator_is-not-null"><code>
IS NOT NULL</code></a></td><td>Проверка NOT NULL</td></tr>
<tr><td scope="row"><a href="#operator_is-null"><code>IS NULL</code>
</a></td><td>Проверка на NULL</td></tr>
<tr><td scope="row"><a href="#function_is-used-lock"><code>
IS_USED_LOCK()</code></a></td><td>Используется ли названная блокировка,
возвратит идентификатор соединения, если да</td></tr>
<tr><td scope="row"><a href="#function_is-uuid"><code>IS_UUID()
</code></a></td><td>Является ли параметр допустимым UUID</td></tr>
<tr><td scope="row"><a href="#function_isnull"><code>ISNULL()</code>
</a></td><td>Является ли параметр NULL</td></tr>
<tr><td scope="row"><a href="#function_json-array"><code>
JSON_ARRAY()</code></a></td><td>Создает массив JSON</td></tr>
<tr><td scope="row"><a href="#function_json-array-append"><code>
JSON_ARRAY_APPEND()</code></a></td><td>
Добавляет данные в документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-array-insert"><code>
JSON_ARRAY_INSERT()</code></a></td><td>Вставляет в массив JSON</td></tr>
<tr><td scope="row"><a href="#function_json-arrayagg"><code>
JSON_ARRAYAGG()</code></a></td><td>Возвратит набор результатов как
единственный массив JSON</td></tr>
<tr><td scope="row"><a href="#operator_json-column-path"><code>-&gt;
</code></a></td><td>Возвращаемое значение столбца JSON после оценки пути,
эквивалент JSON_EXTRACT().</td></tr>
<tr><td scope="row"><a href="#function_json-contains"><code>
JSON_CONTAINS()</code></a></td><td>Содержит ли документ JSON указанный объект
</td></tr>
<tr><td scope="row"><a href="#function_json-contains-path"><code>
JSON_CONTAINS_PATH()</code></a></td><td>Содержит ли документ JSON
какие-либо данные в пути</td></tr>
<tr><td scope="row"><a href="#function_json-depth"><code>
JSON_DEPTH()</code></a></td><td>Максимальная глубина документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-extract"><code>
JSON_EXTRACT()</code></a></td><td>Данные из документа JSON</td></tr>
<tr><td scope="row"><a href="#operator_json-inline-path"><code>
-&gt;&gt;</code></a></td><td>Возвращаемое значение столбца JSON после оценки
пути и закрытия кавычки результат, эквивалент JSON_UNQUOTE(JSON_EXTRACT())
</td></tr>
<tr><td scope="row"><a href="#function_json-insert"><code>
JSON_INSERT()</code></a></td><td>Вставляет данные в документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-keys"><code>JSON_KEYS()
</code></a></td><td>Массив ключей из документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-length"><code>
JSON_LENGTH()</code></a></td><td>Число элементов в документе</td></tr>
<tr><td scope="row"><a href="#function_json-merge"><code>
JSON_MERGE()</code></a></td><td>Объединение документов JSON</td></tr>
<tr><td scope="row"><a href="#function_json-object"><code>
JSON_OBJECT()</code></a></td><td>Создать объект JSON</td></tr>
<tr><td scope="row"><a href="#function_json-objectagg"><code>
JSON_OBJECTAGG()</code></a></td><td>Возвратит набор результатов как
единственный объект JSON</td></tr>
<tr><td scope="row"><a href="#function_json-quote"><code>
JSON_QUOTE()</code></a></td><td>Цитировать документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-remove"><code>
JSON_REMOVE()</code></a></td><td>Удалить данные из документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-replace"><code>
JSON_REPLACE()</code></a></td><td>Заменить значения в документе JSON</td>
</tr>
<tr><td scope="row"><a href="#function_json-search"><code>
JSON_SEARCH()</code></a></td><td>Путь в пределах документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-set"><code>JSON_SET()
</code></a></td><td>Вставить данные в документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-type"><code>JSON_TYPE()
</code></a></td><td>Тип значения JSON</td></tr>
<tr><td scope="row"><a href="#function_json-unquote"><code>
JSON_UNQUOTE()</code></a></td><td>Отменить цитирование значения JSON</td>
</tr>
<tr><td scope="row"><a href="#function_json-valid"><code>
JSON_VALID()</code></a></td><td>Допустимо ли значение JSON</td></tr>
<tr><td scope="row"><a href="#function_last-day"><code>LAST_DAY
</code></a></td><td>Последний день месяца для параметра</td></tr>
<tr><td scope="row"><a href="#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a></td><td>Значение столбца AUTOINCREMENT
для последнего INSERT</td></tr>
<tr><td scope="row"><a href="#function_lcase"><code>LCASE()</code>
</a></td><td>Синоним для LOWER()</td></tr>
<tr><td scope="row"><a href="#function_least"><code>LEAST()</code>
</a></td><td>Самый маленький параметр</td></tr>
<tr><td scope="row"><a href="#function_left"><code>LEFT()</code></a>
</td><td>Крайнее левое число символов как определено</td></tr>
<tr><td scope="row"><a href="#operator_left-shift"><code>&lt;&lt;
</code></a></td><td>Сдвиг влево</td></tr>
<tr><td scope="row"><a href="#function_length"><code>LENGTH()</code>
</a></td><td>Возвратит длину строки в байтах</td></tr>
<tr><td scope="row"><a href="#operator_less-than"><code>&lt;</code>
</a></td><td>Оператор "меньше чем"</td></tr>
<tr><td scope="row"><a href="#operator_less-than-or-equal"><code>
&lt;=</code></a></td><td>Оператор "меньше чем или равно"</td></tr>
<tr><td scope="row"><a href="#operator_like"><code>LIKE</code></a>
</td><td>Простое соответствие образцу</td></tr>
<tr><td scope="row"><a href="#function_linestring"><code>
LineString()</code></a></td><td>Создает LineString из значений Point</td>
</tr>
<tr><td scope="row"><a href="#function_ln"><code>LN()</code></a>
</td><td>Натуральный логарифм</td></tr>
<tr><td scope="row"><a href="#function_load-file"><code>LOAD_FILE()
</code></a></td><td>Загрузить названный файл</td></tr>
<tr><td scope="row"><a href="#function_localtime"><code>LOCALTIME()
</code>, <code>LOCALTIME</code></a></td><td>Синоним для NOW()</td></tr>
<tr><td scope="row"><a href="#function_localtimestamp"><code>
LOCALTIMESTAMP</code>, <code>LOCALTIMESTAMP()</code></a></td><td>
Синоним для NOW()</td></tr>
<tr><td scope="row"><a href="#function_locate"><code>LOCATE()</code>
</a></td><td>Возвратит позицию первого вхождения подстроки</td></tr>
<tr><td scope="row"><a href="#function_log"><code>LOG()</code></a>
</td><td>Натуральный логарифм первого параметра</td></tr>
<tr><td scope="row"><a href="#function_log10"><code>LOG10()</code>
</a></td><td>Десятичный логарифм</td></tr>
<tr><td scope="row"><a href="#function_log2"><code>LOG2()</code></a>
</td><td>Двоичный логарифм</td></tr>
<tr><td scope="row"><a href="#function_lower"><code>LOWER()</code>
</a></td><td>Возвратит параметр в нижнем регистре</td></tr>
<tr><td scope="row"><a href="#function_lpad"><code>LPAD()</code></a>
</td><td>Возвратит строковый параметр, дополненный слева указанной строкой
</td></tr>
<tr><td scope="row"><a href="#function_ltrim"><code>LTRIM()</code>
</a></td><td>Удалить ведущие пробелы</td></tr>
<tr><td scope="row"><a href="#function_make-set"><code>MAKE_SET()
</code></a></td><td>Вернет ряд отделенных запятыми строк, у которых есть
соответствующий бит в наборе битов</td></tr>
<tr><td scope="row"><a href="#function_makedate"><code>MAKEDATE()
</code></a></td><td>Создает дату из года и дня года</td></tr>
<tr><td scope="row"><a href="#function_maketime"><code>MAKETIME()
</code></a></td><td>Создает время из часа, минуты и секунды</td></tr>
<tr><td scope="row"><a href="#function_master-pos-wait"><code>
MASTER_POS_WAIT()</code></a></td><td>Блокировка, пока ведомое устройство
считает и применит все обновления до указанной позиции</td></tr>
<tr><td scope="row"><a href="#function_match"><code>MATCH</code></a>
</td><td>Полнотекстовый поиск</td></tr>
<tr><td scope="row"><a href="#function_max"><code>MAX()</code></a>
</td><td>Максимальное значение</td></tr>
<tr><td scope="row"><a href="#function_mbrcontains"><code>
MBRContains()</code></a></td><td>Содержит ли MBR одной геометрии MBR другой
</td></tr>
<tr><td scope="row"><a href="#function_mbrcoveredby"><code>
MBRCoveredBy()</code></a></td><td>Покрыт ли один MBR другим</td></tr>
<tr><td scope="row"><a href="#function_mbrcovers"><code>MBRCovers()
</code></a></td><td>Покрывает ли один MBR другого</td></tr>
<tr><td scope="row"><a href="#function_mbrdisjoint"><code>
MBRDisjoint()</code></a></td><td>Являются ли MBR двух конфигураций несвязными
</td></tr>
<tr><td scope="row"><a href="#function_mbrequals"><code>MBREquals()
</code></a></td><td>Равны ли MBR двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_mbrintersects"><code>
MBRIntersects()</code></a></td><td>Пересекаются ли MBR двух конфигураций
</td></tr>
<tr><td scope="row"><a href="#function_mbroverlaps"><code>
MBROverlaps()</code></a></td><td>Есть ли перекрытие у двух MBR</td></tr>
<tr><td scope="row"><a href="#function_mbrtouches"><code>
MBRTouches()</code></a></td><td>Есть ли касание у двух MBR</td></tr>
<tr><td scope="row"><a href="#function_mbrwithin"><code>MBRWithin()
</code></a></td><td>Находится ли MBR одной геометрии в пределах MBR другой
</td></tr>
<tr><td scope="row"><a href="#function_md5"><code>MD5()</code></a>
</td><td>Вычисляет хэш MD5</td></tr>
<tr><td scope="row"><a href="#function_microsecond"><code>
MICROSECOND()</code></a></td><td>Возвратит микросекунды из параметра</td>
</tr>
<tr><td scope="row"><a href="#function_mid"><code>MID()</code></a>
</td><td>Возвратит подстроку, начиная с указанной позиции</td></tr>
<tr><td scope="row"><a href="#function_min"><code>MIN()</code></a>
</td><td>Минимальное значение</td></tr>
<tr><td scope="row"><a href="#operator_minus"><code>-</code></a>
</td><td>Оператор "-"</td></tr>
<tr><td scope="row"><a href="#function_minute"><code>MINUTE()</code>
</a></td><td>Минута из параметра</td></tr>
<tr><td scope="row"><a href="#function_mod"><code>MOD()</code></a>
</td><td>Остаток</td></tr>
<tr><td scope="row"><a href="#operator_mod"><code>%</code>,
<code>MOD</code></a></td><td>Модуль</td></tr>
<tr><td scope="row"><a href="#function_month"><code>MONTH()</code>
</a></td><td>Месяц из значения даты</td></tr>
<tr><td scope="row"><a href="#function_monthname"><code>MONTHNAME()
</code></a></td><td>Имя месяца</td></tr>
<tr><td scope="row"><a href="#function_multilinestring"><code>
MultiLineString()</code></a></td><td>Собирает MultiLineString из LineString
</td></tr>
<tr><td scope="row"><a href="#function_multipoint"><code>
MultiPoint()</code></a></td><td>Собирает MultiPoint из Point</td></tr>
<tr><td scope="row"><a href="#function_multipolygon"><code>
MultiPolygon()</code></a></td><td>Собирает MultiPolygon из Polygon</td></tr>
<tr><td scope="row"><a href="#function_name-const"><code>
NAME_CONST()</code></a></td><td>Присваивает имя столбцу</td></tr>
<tr><td scope="row"><a href="#operator_not"><code>NOT</code>,
<code>!</code></a></td><td>Отрицает значение</td></tr>
<tr><td scope="row"><a href="#operator_not-between"><code>NOT
BETWEEN ... AND ...</code></a></td><td>Проверяет, не находится ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#operator_not-equal"><code>!=</code>,
<code>&lt;&gt;</code></a></td><td>Оператор "не равно"</td></tr>
<tr><td scope="row"><a href="#function_not-in"><code>NOT IN()</code>
</a></td><td>Проверяет, не находится ли значение в пределах ряда значений
</td></tr>
<tr><td scope="row"><a href="#operator_not-like"><code>NOT LIKE
</code></a></td><td>Отрицание простого соответствия образца</td></tr>
<tr><td scope="row"><a href="#operator_not-regexp"><code>NOT REGEXP
</code></a></td><td>Отрицание REGEXP</td></tr>
<tr><td scope="row"><a href="#function_now"><code>NOW()</code></a>
</td><td>Возвратит текущую дату и время</td></tr>
<tr><td scope="row"><a href="#function_nullif"><code>NULLIF()</code>
</a></td><td>Вернет NULL, если expr1 = expr2</td></tr>
<tr><td scope="row"><a href="#function_oct"><code>OCT()</code></a>
</td><td>Возвратит строку, содержащую октальное представление числа
</td></tr>
<tr><td scope="row"><a href="#function_octet-length"><code>
OCTET_LENGTH()</code></a></td><td>Синоним для LENGTH()</td></tr>
<tr><td scope="row"><a href="#operator_or"><code>||</code>,
<code>OR</code></a></td><td>Логический OR</td></tr>
<tr><td scope="row"><a href="#function_ord"><code>ORD()</code></a>
</td><td>Символьный код для крайнего левого символа параметра</td></tr>
<tr><td scope="row"><a href="#function_password"><code>PASSWORD()
</code></a></td><td>Вычислит и возвратит строку пароля</td></tr>
<tr><td scope="row"><a href="#function_period-add"><code>
PERIOD_ADD()</code></a></td><td>Добавляет период к году и месяцу</td></tr>
<tr><td scope="row"><a href="#function_period-diff"><code>
PERIOD_DIFF()</code></a></td><td>Возвратит число месяцев между периодами
</td></tr>
<tr><td scope="row"><a href="#function_pi"><code>PI()</code></a>
</td><td>Значение числа pi</td></tr>
<tr><td scope="row"><a href="#operator_plus"><code>+</code></a></td>
<td>Оператор "+"</td></tr>
<tr><td scope="row"><a href="#function_point"><code>Point()</code>
</a></td><td>Собирает Point из координат</td></tr>
<tr><td scope="row"><a href="#function_polygon"><code>Polygon()
</code></a></td><td>Собирает Polygon из LineString</td></tr>
<tr><td scope="row"><a href="#function_position"><code>POSITION()
</code></a></td><td>Синоним для LOCATE()</td></tr>
<tr><td scope="row"><a href="#function_pow"><code>POW()</code></a>
</td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="#function_power"><code>POWER()</code>
</a></td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="optimiz.htm#procedure-analyse">
<code>PROCEDURE ANALYSE()</code></a></td><td>Анализирует результаты запроса
</td></tr>
<tr><td scope="row"><a href="#function_quarter"><code>QUARTER()
</code></a></td><td>Квартал из значения date</td></tr>
<tr><td scope="row"><a href="#function_quote"><code>QUOTE()</code>
</a></td><td>Экранирует параметр для использования в запросе SQL</td></tr>
<tr><td scope="row"><a href="#function_radians"><code>RADIANS()
</code></a></td><td>Конвертирует в радианы</td></tr>
<tr><td scope="row"><a href="#function_rand"><code>RAND()</code></a>
</td><td>Возвратит случайное значение с плавающей запятой</td></tr>
<tr><td scope="row"><a href="#function_random-bytes"><code>
RANDOM_BYTES()</code></a></td><td>Возвратит случайный вектор байта</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>REGEXP</code>
</a></td><td>Соответствие образца, используя регулярные выражения</td></tr>
<tr><td scope="row"><a href="#function_release-all-locks"><code>
RELEASE_ALL_LOCKS()</code></a></td>
<td>Освобождает все текущие именованные блокировки</td></tr>
<tr><td scope="row"><a href="#function_release-lock"><code>
RELEASE_LOCK()</code></a></td><td>Освобождает именованную блокировку</td>
</tr>
<tr><td scope="row"><a href="#function_repeat"><code>REPEAT()</code>
</a></td><td>Повторит строку конкретное количество раз</td></tr>
<tr><td scope="row"><a href="#function_replace"><code>REPLACE()
</code></a></td><td>Заменяет указанную строку</td></tr>
<tr><td scope="row"><a href="#function_reverse"><code>REVERSE()
</code></a></td><td>Перевернуть строку</td></tr>
<tr><td scope="row"><a href="#function_right"><code>RIGHT()</code>
</a></td><td>Самый правый символ</td></tr>
<tr><td scope="row"><a href="#operator_right-shift"><code>&gt;&gt;
</code></a></td><td>Сдвиг вправо</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>RLIKE</code>
</a></td><td>Синоним для REGEXP</td></tr>
<tr><td scope="row"><a href="#function_roles-graphml"><code>
ROLES_GRAPHML()</code></a></td><td>Возвращает документ GraphML,
представляющий ролевые подграфы памяти</td></tr>
<tr><td scope="row"><a href="#function_round"><code>ROUND()</code>
</a></td><td>Округлит параметр</td></tr>
<tr><td scope="row"><a href="#function_row-count"><code>ROW_COUNT()
</code></a></td><td>Сколько строк обновлено</td></tr>
<tr><td scope="row"><a href="#function_rpad"><code>RPAD()</code></a>
</td><td>Добавляет строку конкретное количество раз</td></tr>
<tr><td scope="row"><a href="#function_rtrim"><code>RTRIM()</code>
</a></td><td>Удалит конечные пробелы</td></tr>
<tr><td scope="row"><a href="#function_schema"><code>SCHEMA()</code>
</a></td><td>Синоним для DATABASE()</td></tr>
<tr><td scope="row"><a href="#function_sec-to-time"><code>
SEC_TO_TIME()</code></a></td><td>Конвертирует секунды в формат 'HH:MM:SS'
</td></tr>
<tr><td scope="row"><a href="#function_second"><code>SECOND()</code>
</a></td><td>Возвратит секунды (0-59)</td></tr>
<tr><td scope="row"><a href="#function_session-user"><code>
SESSION_USER()</code></a></td><td>Синоним для USER()</td></tr>
<tr><td scope="row"><a href="#function_sha1"><code>SHA1()</code>,
<code>SHA()</code></a></td><td>SHA-1 160-bit хэш</td></tr>
<tr><td scope="row"><a href="#function_sha2"><code>SHA2()</code></a>
</td><td>Хэш SHA-2</td></tr>
<tr><td scope="row"><a href="#function_sign"><code>SIGN()</code></a>
</td><td>Знак аргумента</td></tr>
<tr><td scope="row"><a href="#function_sin"><code>SIN()</code></a>
</td><td>Синус</td></tr>
<tr><td scope="row"><a href="#function_sleep"><code>SLEEP()</code>
</a></td><td>Сон в течение указанного числа секунд</td></tr>
<tr><td scope="row"><a href="#function_soundex"><code>SOUNDEX()
</code></a></td><td>Строка soundex</td></tr>
<tr><td scope="row"><a href="#operator_sounds-like"><code>
SOUNDS LIKE</code></a></td><td>Сравнивает звуки</td></tr>
<tr><td scope="row"><a href="#function_space"><code>SPACE()</code>
</a></td><td>Возвратит строку из конкретного количества пробелов</td></tr>
<tr><td scope="row"><a href="#function_sqrt"><code>SQRT()</code></a>
</td><td>Квадратный корень параметра</td></tr>
<tr><td scope="row"><a href="#function_st-area"><code>ST_Area()
</code></a></td><td>Вернет область Polygon или MultiPolygon</td></tr>
<tr><td scope="row"><a href="#function_st-asbinary"><code>
ST_AsBinary()</code>, <code>ST_AsWKB()</code></a></td><td>
Переходит от внутренней геометрии к WKB</td></tr>
<tr><td scope="row"><a href="#function_st-asgeojson"><code>
ST_AsGeoJSON()</code></a></td><td>Генерирует объект GeoJSON</td></tr>
<tr><td scope="row"><a href="#function_st-astext"><code>ST_AsText()
</code>, <code>ST_AsWKT()</code></a></td><td>Переходит от внутренней
геометрии к WKT</td></tr>
<tr><td scope="row"><a href="#function_st-buffer"><code>ST_Buffer()
</code></a></td><td>Возвратит геометрию точек в пределах данного
расстояния от геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-buffer-strategy"><code>
ST_Buffer_Strategy()</code></a></td><td>Произведет опцию стратегии для
ST_Buffer()</td></tr>
<tr><td scope="row"><a href="#function_st-centroid"><code>
ST_Centroid()</code></a></td><td>Вернет центр как точку</td></tr>
<tr><td scope="row"><a href="#function_st-contains"><code>
ST_Contains()</code></a></td><td>Содержит ли одна геометрия другую</td></tr>
<tr><td scope="row"><a href="#function_st-convexhull"><code>
ST_ConvexHull()</code></a></td><td>Возвратит выпуклый корпус геометрии</td>
</tr>
<tr><td scope="row"><a href="#function_st-crosses"><code>
ST_Crosses()</code></a></td><td>Пересекает ли одна геометрия другую</td></tr>
<tr><td scope="row"><a href="#function_st-difference"><code>
ST_Difference()</code></a></td><td>Возвратит различие в наборе
точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-dimension"><code>
ST_Dimension()</code></a></td><td>Измерение геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-disjoint"><code>
ST_Disjoint()</code></a></td><td>Является ли одна
геометрия несвязной с другой</td></tr>
<tr><td scope="row"><a href="#function_st-distance"><code>
ST_Distance()</code></a></td><td>Расстояние одной геометрии от другой</td>
</tr>
<tr><td scope="row"><a href="#function_st-distance-sphere"><code>
ST_Distance_Sphere()</code></a></td><td>Минимальное расстояние на земле
между двумя конфигурациями</td></tr>
<tr><td scope="row"><a href="#function_st-endpoint"><code>
ST_EndPoint()</code></a></td><td>Конечный Point LineString</td></tr>
<tr><td scope="row"><a href="#function_st-envelope"><code>
ST_Envelope()</code></a></td><td>MBR геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-equals"><code>ST_Equals()
</code></a></td><td>Равна ли одна геометрия другой</td></tr>
<tr><td scope="row"><a href="#function_st-exteriorring"><code>
ST_ExteriorRing()</code></a></td><td>Возвратит внешнее кольцо Polygon</td>
</tr>
<tr><td scope="row"><a href="#function_st-geohash"><code>
ST_GeoHash()</code></a></td><td>Произведит значение geohash</td></tr>
<tr><td scope="row"><a href="#function_st-geomcollfromtext"><code>
ST_GeomCollFromText()</code>, <code>ST_GeometryCollectionFromText()</code>,
<code>ST_GeomCollFromTxt()</code></a></td><td>Набор геометрии из WKT</td>
</tr>
<tr><td scope="row"><a href="#function_st-geomcollfromwkb"><code>
ST_GeomCollFromWKB()</code>, <code>ST_GeometryCollectionFromWKB()</code></a>
</td><td>Набор геометрии из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-geometryn"><code>
ST_GeometryN()</code></a></td><td>Возвратит N-ую геометрию
из набора геометрий</td></tr>
<tr><td scope="row"><a href="#function_st-geometrytype"><code>
ST_GeometryType()</code></a></td><td>Возвратит название типа геометрии</td>
</tr>
<tr><td scope="row"><a href="#function_st-geomfromgeojson"><code>
ST_GeomFromGeoJSON()</code></a></td><td>Произведет геометрию из объекта
GeoJSON</td></tr>
<tr><td scope="row"><a href="#function_st-geomfromtext"><code>
ST_GeomFromText()</code>, <code>ST_GeometryFromText()</code></a></td><td>
Набор геометрии из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-geomfromwkb"><code>
ST_GeomFromWKB()</code>, <code>ST_GeometryFromWKB()</code></a></td><td>
Набор геометрии из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-interiorringn"><code>
ST_InteriorRingN()</code></a></td><td>Вернет N-ое внутреннее кольцо Polygon
</td></tr>
<tr><td scope="row"><a href="#function_st-intersection"><code>
ST_Intersection()</code></a></td>
<td>Пересечение набора точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-intersects"><code>
ST_Intersects()</code></a></td><td>Пересекает ли одна геометрия другую
</td></tr>
<tr><td scope="row"><a href="#function_st-isclosed"><code>
ST_IsClosed()</code></a></td><td>Закрыта ли геометрия и проста</td></tr>
<tr><td scope="row"><a href="#function_st-isempty"><code>
ST_IsEmpty()</code></a></td><td>Функция заполнителя</td></tr>
<tr><td scope="row"><a href="#function_st-issimple"><code>
ST_IsSimple()</code></a></td><td>Проста ли геометрия</td></tr>
<tr><td scope="row"><a href="#function_st-isvalid"><code>
ST_IsValid()</code></a></td><td>Допустима ли геометрия</td></tr>
<tr><td scope="row"><a href="#function_st-latfromgeohash"><code>
ST_LatFromGeoHash()</code></a></td><td>Возвратит широту из значения geohash
</td></tr>
<tr><td scope="row"><a href="#function_st-length"><code>ST_Length()
</code></a></td><td>Возвратит длину LineString</td></tr>
<tr><td scope="row"><a href="#function_st-linefromtext"><code>
ST_LineFromText()</code>, <code>ST_LineStringFromText()</code></a></td><td>
Собирает LineString из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-linefromwkb"><code>
ST_LineFromWKB()</code>, <code>ST_LineStringFromWKB()</code></a></td><td>
Собирает LineString из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-longfromgeohash"><code>
ST_LongFromGeoHash()</code></a></td><td>Возвратит долготу из значения geohash
</td></tr>
<tr><td scope="row"><a href="#function_st-makeenvelope"><code>
ST_MakeEnvelope()</code></a></td><td>Прямоугольник вокруг двух точек</td>
</tr>
<tr><td scope="row"><a href="#function_st-mlinefromtext"><code>
ST_MLineFromText()</code>, <code>ST_MultiLineStringFromText()</code></a></td>
<td>Собирает MultiLineString из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mlinefromwkb"><code>
ST_MLineFromWKB()</code>, <code>ST_MultiLineStringFromWKB()</code></a></td>
<td>Собирает MultiLineString из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-mpointfromtext"><code>
ST_MPointFromText()</code>, <code>ST_MultiPointFromText()</code></a></td>
<td>Собирает MultiPoint из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mpointfromwkb"><code>
ST_MPointFromWKB()</code>, <code>ST_MultiPointFromWKB()</code></a></td>
<td>Собирает MultiPoint из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-mpolyfromtext"><code>
ST_MPolyFromText()</code>, <code>ST_MultiPolygonFromText()</code></a></td>
<td>Собирает MultiPolygon из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mpolyfromwkb"><code>
ST_MPolyFromWKB()</code>, <code>ST_MultiPolygonFromWKB()</code></a></td>
<td>Собирает MultiPolygon из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-numgeometries"><code>
ST_NumGeometries()</code></a></td><td>Число конфигураций в наборе геометрии
</td></tr>
<tr><td scope="row"><a href="#function_st-numinteriorrings"><code>
ST_NumInteriorRing()</code>, <code>ST_NumInteriorRings()</code></a></td>
<td>Число углов в Polygon</td></tr>
<tr><td scope="row"><a href="#function_st-numpoints"><code>
ST_NumPoints()</code></a></td><td>Число точек в LineString</td></tr>
<tr><td scope="row"><a href="#function_st-overlaps"><code>
ST_Overlaps()</code></a></td><td>Перекрывает ли одна геометрия другую</td>
</tr>
<tr><td scope="row"><a href="#function_st-pointfromgeohash"><code>
ST_PointFromGeoHash()</code></a></td>
<td>Конвертирует geohash в POINT</td></tr>
<tr><td scope="row"><a href="#function_st-pointfromtext"><code>
ST_PointFromText()</code></a></td><td>Собирает Point из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-pointfromwkb"><code>
ST_PointFromWKB()</code></a></td><td>Собирает Point из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-pointn"><code>ST_PointN()
</code></a></td><td>Возвратит N-ую точку LineString</td></tr>
<tr><td scope="row"><a href="#function_st-polyfromtext"><code>
ST_PolyFromText()</code>, <code>ST_PolygonFromText()</code></a></td><td>
Собирает Polygon из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-polyfromwkb"><code>
ST_PolyFromWKB()</code>, <code>ST_PolygonFromWKB()</code></a></td><td>
Собирает Polygon из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-simplify"><code>
ST_Simplify()</code></a></td><td>Возвратит упрощенную геометрию</td></tr>
<tr><td scope="row"><a href="#function_st-srid"><code>ST_SRID()
</code></a></td><td>Возвратит пространственный ссылочный системный
ID для геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-startpoint"><code>
ST_StartPoint()</code></a></td><td>Стартовая Point LineString</td></tr>
<tr><td scope="row"><a href="#function_st-symdifference"><code>
ST_SymDifference()</code></a></td><td>Возвратит набор точек
симметрического различия двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-touches"><code>
ST_Touches()</code></a></td><td>Касается ли одна геометрия другой</td></tr>
<tr><td scope="row"><a href="#function_st-union"><code>ST_Union()
</code></a></td><td>Возвратит набор общих точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-validate"><code>
ST_Validate()</code></a></td><td>Возвратит утвержденную геометрию</td></tr>
<tr><td scope="row"><a href="#function_st-within"><code>ST_Within()
</code></a></td><td>Является ли одна геометрия в пределах другой</td></tr>
<tr><td scope="row"><a href="#function_st-x"><code>ST_X()</code></a>
</td><td>Координата X Point</td></tr>
<tr><td scope="row"><a href="#function_st-y"><code>ST_Y()</code></a>
</td><td>Координата Y Point</td></tr>
<tr><td scope="row"><a href="#function_std"><code>STD()</code></a>
</td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev"><code>STDDEV()</code>
</a></td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev-pop"><code>
STDDEV_POP()</code></a></td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev-samp"><code>
STDDEV_SAMP()</code></a></td><td>Возвратит типовое стандартное отклонение
</td></tr>
<tr><td scope="row"><a href="#function_str-to-date"><code>
STR_TO_DATE()</code></a></td><td>Конвертирует строку в дату</td></tr>
<tr><td scope="row"><a href="#function_strcmp"><code>STRCMP()</code>
</a></td><td>Сравнивает две строки</td></tr>
<tr><td scope="row"><a href="#function_subdate"><code>SUBDATE()
</code></a></td><td>
Синоним для DATE_SUB(), когда вызвана с тремя параметрами</td></tr>
<tr><td scope="row"><a href="#function_substr"><code>SUBSTR()</code>
</a></td><td>Вернет подстроку как определено</td></tr>
<tr><td scope="row"><a href="#function_substring"><code>SUBSTRING()
</code></a></td><td>Вернет подстроку как определено</td></tr>
<tr><td scope="row"><a href="#function_substring-index"><code>
SUBSTRING_INDEX()</code></a></td><td>Вернет подстроку из строки
перед конкретным количеством разделителей</td></tr>
<tr><td scope="row"><a href="#function_subtime"><code>SUBTIME()
</code></a></td><td>Вычитает время</td></tr>
<tr><td scope="row"><a href="#function_sum"><code>SUM()</code></a>
</td><td>Вернет сумму</td></tr>
<tr><td scope="row"><a href="#function_sysdate"><code>SYSDATE()
</code></a></td><td>Время выполнения функции</td></tr>
<tr><td scope="row"><a href="#function_system-user"><code>
SYSTEM_USER()</code></a></td><td>Синоним для USER()</td></tr>
<tr><td scope="row"><a href="#function_tan"><code>TAN()</code></a>
</td><td>Тангенс</td></tr>
<tr><td scope="row"><a href="#function_time"><code>TIME()</code></a>
</td><td>Извлекает часть времени из выражения</td></tr>
<tr><td scope="row"><a href="#function_time-format"><code>
TIME_FORMAT()</code></a></td><td>Форматирует время</td></tr>
<tr><td scope="row"><a href="#function_time-to-sec"><code>
TIME_TO_SEC()</code></a></td>
<td>Возвратит параметр, преобразованный в секунды</td></tr>
<tr><td scope="row"><a href="#function_timediff"><code>TIMEDIFF()
</code></a></td><td>Вычитает время</td></tr>
<tr><td scope="row"><a href="#operator_times"><code>*</code></a>
</td><td>Умножение</td></tr>
<tr><td scope="row"><a href="#function_timestamp"><code>TIMESTAMP()
</code></a></td><td>С единственным параметром эта функция возвращает дату или
выражение datetime, с двумя параметрами, их сумму</td></tr>
<tr><td scope="row"><a href="#function_timestampadd"><code>
TIMESTAMPADD()</code></a></td><td>Добавляет интервал к datetime</td></tr>
<tr><td scope="row"><a href="#function_timestampdiff"><code>
TIMESTAMPDIFF()</code></a></td><td>Вычитает интервал из datetime</td></tr>
<tr><td scope="row"><a href="#function_to-base64"><code>TO_BASE64()
</code></a></td><td>Конвертирует параметр в строку base-64</td></tr>
<tr><td scope="row"><a href="#function_to-days"><code>TO_DAYS()
</code></a></td><td>Возвратит параметр даты, преобразованный в дни</td></tr>
<tr><td scope="row"><a href="#function_to-seconds"><code>
TO_SECONDS()</code></a></td><td>Возвратит параметр даты или datetime,
преобразованный в секунды с года 0</td></tr>
<tr><td scope="row"><a href="#function_trim"><code>TRIM()</code></a>
</td><td>Удаляет начальные и конечные пробелы</td></tr>
<tr><td scope="row"><a href="#function_truncate"><code>TRUNCATE()
</code></a></td><td>Урезает к конкретному количеству десятичных разрядов
</td></tr>
<tr><td scope="row"><a href="#function_ucase"><code>UCASE()</code>
</a></td><td>Синоним для UPPER()</td></tr>
<tr><td scope="row"><a href="#operator_unary-minus"><code>-</code>
</a></td><td>Меняет знак аргумента</td></tr>
<tr><td scope="row"><a href="#function_uncompress"><code>
UNCOMPRESS()</code></a></td><td>Распаковывает сжатую строку</td></tr>
<tr><td scope="row"><a href="#function_uncompressed-length"><code>
UNCOMPRESSED_LENGTH()</code></a></td><td>Возвратит длину строки перед сжатием
</td></tr>
<tr><td scope="row"><a href="#function_unhex"><code>UNHEX()</code>
</a></td><td>Строка с hex-представлением числа</td></tr>
<tr><td scope="row"><a href="#function_unix-timestamp"><code>
UNIX_TIMESTAMP()</code></a></td><td>Unix timestamp</td></tr>
<tr><td scope="row"><a href="#function_updatexml"><code>UpdateXML()
</code></a></td><td>Возвратит замененный фрагмент XML</td></tr>
<tr><td scope="row"><a href="#function_upper"><code>UPPER()</code>
</a></td><td>Конвертирует в верхний регистр</td></tr>
<tr><td scope="row"><a href="#function_user"><code>USER()</code></a>
</td><td>Имя пользователя и имя хоста клиента</td></tr>
<tr><td scope="row"><a href="#function_utc-date"><code>UTC_DATE()
</code></a></td><td>Текущая дата в UTC</td></tr>
<tr><td scope="row"><a href="#function_utc-time"><code>UTC_TIME()
</code></a></td><td>Текущее время в UTC</td></tr>
<tr><td scope="row"><a href="#function_utc-timestamp"><code>
UTC_TIMESTAMP()</code></a></td><td>Текущие дата и время в UTC</td></tr>
<tr><td scope="row"><a href="#function_uuid"><code>UUID()</code></a>
</td><td>Universal Unique Identifier (UUID)</td></tr>
<tr><td scope="row"><a href="#function_uuid-short"><code>
UUID_SHORT()</code></a></td><td>Числовое значение UUID</td></tr>
<tr><td scope="row"><a href="#function_uuid-to-bin"><code>
UUID_TO_BIN()</code></a></td><td>Конвертирует UUID в двоичную строку</td>
</tr>
<tr><td scope="row"><a href="#function_validate-password-strength">
<code>VALIDATE_PASSWORD_STRENGTH()</code></a></td><td>
Определяет силу пароля</td></tr>
<tr><td scope="row"><a href="#function_values"><code>VALUES()</code>
</a></td><td>Определяет значения, которые будут использоваться в INSERT
</td></tr>
<tr><td scope="row"><a href="#function_var-pop"><code>VAR_POP()
</code></a></td><td>Возвратит различие стандарта</td></tr>
<tr><td scope="row"><a href="#function_var-samp"><code>VAR_SAMP()
</code></a></td><td>Возвратит типовое различие</td></tr>
<tr><td scope="row"><a href="#function_variance"><code>VARIANCE()
</code></a></td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_version"><code>VERSION()
</code></a></td><td>Строка версии сервера MySQL</td></tr>
<tr><td scope="row"><a href="#function_wait-for-executed-gtid-set">
<code>WAIT_FOR_EXECUTED_GTID_SET()</code></a></td><td>Ждать, пока данные GTID
не выполнятся на ведомом устройстве</td></tr>
<tr><td scope="row">
<a href="#function_wait-until-sql-thread-after-gtids"><code>
WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()</code></a></td><td>Ждать, пока данные
GTID не выполнятся на ведомом устройстве</td></tr>
<tr><td scope="row"><a href="#function_week"><code>WEEK()</code></a>
</td><td>Номер недели</td></tr>
<tr><td scope="row"><a href="#function_weekday"><code>WEEKDAY()
</code></a></td><td>Индекс дня недели</td></tr>
<tr><td scope="row"><a href="#function_weekofyear"><code>
WEEKOFYEAR()</code></a></td><td>Календарная неделя для даты (1-53)</td></tr>
<tr><td scope="row"><a href="#function_weight-string"><code>
WEIGHT_STRING()</code></a></td><td>Возвратит строку веса для строки</td></tr>
<tr><td scope="row"><a href="#operator_xor"><code>XOR</code></a>
</td><td>Логический XOR</td></tr>
<tr><td scope="row"><a href="#function_year"><code>YEAR()</code></a>
</td><td>Год</td></tr>
<tr><td scope="row"><a href="#function_yearweek"><code>YEARWEEK()
</code></a></td><td>Год и неделя</td></tr></tbody></table>

<h2><a name="type-conversion"></a>13.2. Преобразование типов в выражениях
</h2>
<p>Когда оператор используется с операндами различных типов, происходит
преобразование, чтобы сделать операнды совместимыми. Некоторые преобразования
происходят неявно. Например, MySQL автоматически преобразовывает числа в
строки по мере необходимости, и наоборот.
<pre>
mysql&gt; SELECT 1+'1';
    -&gt; 2
mysql&gt; SELECT CONCAT(2,' test');
    -&gt; '2 test'
</pre>

<p>Также возможно преобразовать число в строку, явно используя функцию
<a href="#function_cast"><code>CAST()</code></a>.
Преобразование происходит неявно с функцией
<a href="#function_concat"><code>CONCAT()</code></a>, потому что это
ожидает строковые параметры.
<pre>
mysql&gt; SELECT 38.8, CAST(38.8 AS CHAR);
    -&gt; 38.8, '38.8'
mysql&gt; SELECT 38.8, CONCAT(38.8);
    -&gt; 38.8, '38.8'
</pre>

<p>См. ниже в этом разделе информацию о наборе символов неявных
преобразований числа в строку и измененные правила, которые относятся к
<code>CREATE TABLE ... SELECT</code>.</p>

<p>Следующие правила описывают, как преобразование происходит
для операций сравнения:</p>
<ul><li><p>Если один или оба параметра <code>NULL</code>, результат сравнения
<code>NULL</code>, за исключением <code>NULL</code>-безопасного оператора
<a href="#operator_equal-to"><code>&lt;=&gt;</code></a>. Для
<code>NULL &lt;=&gt; NULL</code> результат true.
Никакое преобразование не нужно.</li>

<li>Если оба параметра строки, они сравнены как строки.</li>
<li>Если оба параметра целые числа, они сравнены как целые числа.</li>
<li>Шестнадцатеричные значения обработаны как двоичные строки, если
не сравниваются с числом.</li>

<li>Если один из параметров столбец
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> или
<a href="types.htm#datetime"><code>DATETIME</code></a>, а другой параметр
константа, она преобразована в timestamp прежде, чем сравнение будет
выполнено. Это сделано, чтобы быть более ODBC-благоприятным. Отметьте, что
это не сделано для параметров в <a href="#function_in"><code>IN()
</code></a>! Для надежности всегда используйте полный datetime, дату или
строки времени, делая сравнения. Например, чтобы достичь лучших результатов,
используя <a href="#operator_between"><code>BETWEEN</code></a>
с датой или временем, надо использовать
<a href="#function_cast"><code>CAST()</code></a>, чтобы
явно преобразовать значения в желаемый тип данных.</p>

<p>Подзапрос единственной строки из таблицы или таблиц не считают константой.
Например, если подзапрос возвращает целое число, чтобы сравнить с
<a href="types.htm#datetime"><code>DATETIME</code></a>, сравнение сделано как
два целых числа. Целое число не преобразовано во временное значение. Сравнить
операнды как <a href="types.htm#datetime"><code>DATETIME</code></a> можно,
используя <a href="#function_cast"><code>CAST()</code></a>, чтобы
явно преобразовать значение подзапроса в
<a href="types.htm#datetime"><code>DATETIME</code></a>.</li>

<li>Если один из параметров десятичное значение, сравнение зависит от другого
параметра. Параметры сравнены как десятичные значения, если другой параметр
десятичное или целочисленное значение, или как значения с плавающей запятой,
если другой параметр - значение с плавающей запятой.</li>
<li>Во всех других случаях параметры сравнены как (реальные)
числа с плавающей запятой.</p></li></ul>

<p>Сравнение значений JSON имеет место на двух уровнях. Первый уровень
сравнения основан на типах значений JSON. Если типы отличаются, результат
сравнения определен тем, у какого типа есть более высокий приоритет. Если два
значения имеют тот же самый тип JSON, второй уровень сравнения происходит,
используя определенные для типа правила. Для сравнения JSON с не-JSON
значение не-JSON преобразовано в JSON и значения сравниваются значения JSON.
</p>

<p>Следующие примеры иллюстрируют преобразование строк к числам
для операций сравнения:
<pre>
mysql&gt; SELECT 1 &gt; '6x';
    -&gt; 0
mysql&gt; SELECT 7 &gt; '6x';
    -&gt; 1
mysql&gt; SELECT 0 &gt; 'x6';
    -&gt; 0
mysql&gt; SELECT 0 = 'x6';
    -&gt; 1
</pre>

<p>Для сравнений строкового столбца с числом MySQL не может использовать
индексирование на столбце, чтобы искать значение быстро. Если
<em><code>str_col</code></em> индексированный строковый столбец, индекс не
может использоваться, выполняя поиск в следующем запросе:
<pre>
SELECT * FROM <em><code>tbl_name</code></em> WHERE <em><code>str_col</code></em>=1;
</pre>

<p>Причина этого состоит в том, что есть много различных строк, которые можно
преобразовать в значение <code>1</code>, например,
<code>'1'</code>, <code>' 1'</code> или <code>'1a'</code>.</p>

<p>Сравнения, которые используют числа с плавающей запятой (или значения,
которые преобразованы в числа с плавающей запятой) приблизительны, потому что
такие числа неточны. Это может бы привести к результатам,
которые кажутся непоследовательными:
<pre>
mysql&gt; SELECT '18015376320243458' = 18015376320243458;
    -&gt; 1
mysql&gt; SELECT '18015376320243459' = 18015376320243459;
    -&gt; 0
</pre>

<p>Такие результаты могут произойти, потому что значения преобразованы в
числа с плавающей запятой, которые имеют только 53 бита
точности и подвергаются округлению:
<pre>
mysql&gt; SELECT '18015376320243459'+0.0;
    -&gt; 1.8015376320243e+16
</pre>

<p>Кроме того, преобразование строки в число с плавающей запятой и из целого
числа в число с плавающей запятой не обязательно проходит тот же самый путь.
Целое число может быть преобразовано в число с плавающей запятой центральным
процессором, тогда как строка преобразована посимвольно, что вовлекает
умножение с плавающей запятой.</p>

<p>Показанные результаты изменятся на различных системах, и могут быть
затронуты факторами, такими как архитектура ЭВМ, версия компилятора или
уровень оптимизации. Один способ избежать таких проблем состоит в том, чтобы
использовать <a href="#function_cast"><code>CAST()</code></a>
так, чтобы значение не было преобразовано неявно:
<pre>
mysql&gt; SELECT CAST('18015376320243459' AS UNSIGNED) = 18015376320243459;
    -&gt; 1
</pre>

<p>Сервер включает <code>dtoa</code>, конверсионную библиотеку, которая
обеспечивает улучшенное преобразование строк или значений
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> в значения
<a href="types.htm#floating-point-types"><code>FLOAT</code></a>/
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>:</p>

<ul><li><p>Преобразование одинаково для платформ.</li>
<li>Точное представление значений в случаях, где результаты ранее не
обеспечивали достаточную точность, это касается значений
близко к пределам IEEE.</li>

<li>Преобразование чисел, чтобы представить формат в виде строки с самой
лучшей точностью. Точность <code>dtoa</code> всегда та же самая или лучше,
чем у стандартных функций C-библиотеки.</p></li></ul>

<p>Поскольку преобразования, произведенные этой библиотекой, отличаются в
некоторых случаях от не<code>dtoa</code>, существует потенциал для
несовместимостей в приложениях, которые полагаются на предыдущие результаты.
Например, приложениям, которые зависят от определенного точного результата
предыдущих преобразований, возможно, понадобилась бы корректировка, чтобы
приспособить дополнительную точность.</p>

<p>Библиотека <code>dtoa</code> предоставляет преобразованиям следующие
свойства. <em><code>D</code></em> представляет значение
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
или строковое представление, <em><code>F</code></em> представляет число с
плавающей запятой в двоичном формате (IEEE).</p>

<ul><li><p><em><code>F</code></em> -&gt; <em><code>D</code></em>
преобразование сделано с самой лучшей точностью,
возвращая <em><code>D</code></em> как самую короткую строку, которая уступает
<em><code>F</code></em> когда чтение назад округляется к самому близкому
значению в родном двоичном формате как определено IEEE.</li>

<li><em><code>D</code></em> -&gt; <em><code>F</code></em>
преобразование сделано таким образом что <em><code>F</code></em>
самое близкое родное двоичное число к входной строке десятичного числа
<em><code>D</code></em>.</p></li></ul>

<p>Эти свойства подразумевают, что <em><code>F</code></em> -&gt;
<em><code>D</code></em> -&gt; <em><code>F</code></em> преобразования
без потерь, если <em><code>F</code></em> <code>-inf</code>,
<code>+inf</code> или <code>NaN</code>. Последние значения не поддержаны,
потому что стандарт SQL определяет их как недопустимые значения для
<a href="types.htm#floating-point-types"><code>FLOAT</code></a> или
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>.</p>

<p>Для <em><code>D</code></em> -&gt; <em><code>F</code></em> -&gt; <em>
<code>D</code></em> преобразования, достаточное условие для работы без потерь
это то, что <em><code>D</code></em> использует 15 или меньше цифр точности,
<code>-inf</code>, <code>+inf</code> или <code>NaN</code>.
В некоторых случаях преобразование без потерь возможно, даже если
<em><code>D</code></em> имеет больше, чем 15 цифр точности, но это не всегда.
</p>

<p>Неявное преобразование числового или временного значения, чтобы
представить в виде строки производит значение, у которого есть набор символов
и сопоставление, определенное системными переменными
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>. Эти переменные обычно устанавливаются
<a href="sql.htm#set-names"><code>SET NAMES</code></a>.</p>

<p>Это означает, что такое преобразование приводит к символьной строке
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#blob"><code>LONGTEXT</code></a>), кроме случая, в котором
установлен набор символов соединения <code>binary</code>. В этом случае
конверсионный результат двоичная строка
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> или
<a href="types.htm#blob"><code>LONGBLOB</code></a>).</p>

<p>Для выражений целого числа предыдущие замечания об
<span><em>оценке</em></span> выражения применяются несколько по-другому для
<span><em>назначения</em></span> выражения: например, в запросе
<pre>
CREATE TABLE t SELECT <em><code>integer_expr</code></em>;
</pre>

<p>В этом случае у таблицы в столбце, следующем из выражения, есть тип
<a href="types.htm#integer-types"><code>INT</code></a> или
<a href="types.htm#integer-types"><code>BIGINT</code></a>, в зависимости от
длины выражения целого числа. Если максимальная длина выражения не
вписывается в <a href="types.htm#integer-types"><code>INT</code></a>, вместо
него будет использован <a href="types.htm#integer-types"><code>BIGINT</code>
</a>. Длина взята из значения <code>max_length</code> метаданных набора
результатов <a href="sql.htm#select"><code>SELECT</code></a> (см.
<a href="connect.htm#c-api-data-structures">раздел 25.8.5</a>).
Это означает, что Вы можете вызвать
<a href="types.htm#integer-types"><code>BIGINT</code></a> вместо
<a href="types.htm#integer-types"><code>INT</code></a>
при помощи достаточно длинного выражения:
<pre>
CREATE TABLE t SELECT 000000000000000000000;
</pre>

<h2><a name="non-typed-operators"></a>13.3. Операторы</h2>
<a name="idm139965357698928"></a><p><b>Таблица 13.2. Операторы</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_and"><code>AND</code>,
<code>&amp;&amp;</code></a></td><td>Логический AND</td></tr>
<tr><td scope="row"><a href="#operator_assign-equal"><code>=</code>
</a></td><td>Назначает значение (как часть
<a href="sql.htm#set-variable"><code>SET</code></a>)</td></tr>
<tr><td scope="row"><a href="#operator_assign-value"><code>:=</code>
</a></td><td>Назначает значение</td></tr>
<tr><td scope="row"><a href="#operator_between"><code>BETWEEN ...
AND ...</code></a></td><td>Проверяет, является ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#operator_binary"><code>BINARY</code>
</a></td><td>Преобразует строку в двоичную</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-and"><code>&amp;
</code></a></td><td>Битовое AND</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-invert"><code>~
</code></a></td><td>Битовая инверсия</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-or"><code>|</code>
</a></td><td>Битовое OR</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-xor"><code>^</code>
</a></td><td>Битовое XOR</td></tr>
<tr><td scope="row"><a href="#operator_case"><code>CASE</code></a>
</td><td>Оператор Case</td></tr>
<tr><td scope="row"><a href="#operator_div"><code>DIV</code></a>
</td><td>Целочисленное деление</td></tr>
<tr><td scope="row"><a href="#operator_divide"><code>/</code></a>
</td><td>Деление</td></tr>
<tr><td scope="row"><a href="#operator_equal"><code>=</code></a>
</td><td>Равенство</td></tr>
<tr><td scope="row"><a href="#operator_equal-to"><code>&lt;=&gt;
</code></a></td><td>NULL-безопасный оператор равенства</td></tr>
<tr><td scope="row"><a href="#operator_greater-than"><code>&gt;
</code></a></td><td>Больше чем</td></tr>
<tr><td scope="row"><a href="#operator_greater-than-or-equal"><code>
&gt;=</code></a></td><td>Больше чем или равно</td></tr>
<tr><td scope="row"><a href="#operator_is"><code>IS</code></a></td>
<td>Проверка на boolean</td></tr>
<tr><td scope="row"><a href="#operator_is-not"><code>IS NOT</code>
</a></td><td>Проверка на boolean</td></tr>
<tr><td scope="row"><a href="#operator_is-not-null"><code>
IS NOT NULL</code></a></td><td>Проверка на NOT NULL</td></tr>
<tr><td scope="row"><a href="#operator_is-null"><code>IS NULL</code>
</a></td><td>Проверка на NULL</td></tr>
<tr><td scope="row"><a href="#operator_json-column-path"><code>-&gt;
</code></a></td><td>Возвращаемое значение столбца JSON после оценки пути,
эквивалент JSON_EXTRACT()</td></tr>
<tr><td scope="row"><a href="#operator_json-inline-path"><code>
-&gt;&gt;</code></a></td><td>Возвращаемое значение столбца JSON после оценки
пути и закрытия кавычки, аналог JSON_UNQUOTE(JSON_EXTRACT()).</td></tr>
<tr><td scope="row"><a href="#operator_left-shift"><code>&lt;&lt;
</code></a></td><td>Сдвиг влево</td></tr>
<tr><td scope="row"><a href="#operator_less-than"><code>&lt;</code>
</a></td><td>Меньше чем</td></tr>
<tr><td scope="row"><a href="#operator_less-than-or-equal"><code>
&lt;=</code></a></td><td>Меньше чем или равно</td></tr>
<tr><td scope="row"><a href="#operator_like"><code>LIKE</code></a>
</td><td>Простое соответствие образца</td></tr>
<tr><td scope="row"><a href="#operator_minus"><code>-</code></a>
</td><td>Минус</td></tr>
<tr><td scope="row"><a href="#operator_mod"><code>%</code>,
<code>MOD</code></a></td><td>Модуль числа</td></tr>
<tr><td scope="row"><a href="#operator_not"><code>NOT</code>,
<code>!</code></a></td><td>Отрицание</td></tr>
<tr><td scope="row"><a href="#operator_not-between"><code>NOT
BETWEEN ... AND ...</code></a></td><td>Проверяет, не является ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#operator_not-equal"><code>!=</code>,
<code>&lt;&gt;</code></a></td><td>Не равно</td></tr>
<tr><td scope="row"><a href="#operator_not-like"><code>NOT LIKE
</code></a></td><td>Отрицание простого соответствия образца</td></tr>
<tr><td scope="row"><a href="#operator_not-regexp"><code>NOT REGEXP
</code></a></td><td>Отрицание REGEXP</td></tr>
<tr><td scope="row"><a href="#operator_or"><code>||</code>,
<code>OR</code></a></td><td>Логический OR</td></tr>
<tr><td scope="row"><a href="#operator_plus"><code>+</code></a></td>
<td>Сложение</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>REGEXP</code>
</a></td><td>Соответствие образца, используя регулярные выражения</td></tr>
<tr><td scope="row"><a href="#operator_right-shift"><code>&gt;&gt;
</code></a></td><td>Сдвиг вправо</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>RLIKE</code>
</a></td><td>Синоним для REGEXP</td></tr>
<tr><td scope="row"><a href="#operator_sounds-like"><code>SOUNDS
LIKE</code></a></td><td>Сравнение звуков</td></tr>
<tr><td scope="row"><a href="#operator_times"><code>*</code></a>
</td><td>Умножение</td></tr>
<tr><td scope="row"><a href="#operator_unary-minus"><code>-</code>
</a></td><td>Смена знака параметра</td></tr>
<tr><td scope="row"><a href="#operator_xor"><code>XOR</code></a>
</td><td>Логический XOR</td></tr></tbody></table>

<h3><a name="operator-precedence"></a>13.3.1. Приоритет операторов</h3>
<p>Приоритет операторов показан в следующем списке, от самого высокого
приоритета до самого низкого. У операторов, которые показаны вместе на
строке, тот же самый приоритет.
<pre>
INTERVAL
BINARY, COLLATE
!
- (unary minus), ~ (unary bit inversion)
^
*, /, DIV, %, MOD
-, +
&lt;&lt;, &gt;&gt;
&amp;
|
= (comparison), &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN
BETWEEN, CASE, WHEN, THEN, ELSE
NOT
AND, &amp;&amp;
XOR
OR, ||
= (assignment), :=
</pre>

<p>Приоритет <code>=</code> зависит от того, используется ли это в качестве
оператора сравнения (<a href="#operator_equal"><code>=</code></a>)
или как оператор назначения (<a href="#operator_assign-equal">
<code>=</code></a>). Когда использующийся в качестве оператора сравнения,
есть тот же самый приоритет, что и у
<a href="#operator_equal-to"><code>&lt;=&gt;</code></a>,
<a href="#operator_greater-than-or-equal"><code>&gt;=</code></a>,
<a href="#operator_greater-than"><code>&gt;</code></a>,
<a href="#operator_less-than-or-equal"><code>&lt;=</code></a>,
<a href="#operator_less-than"><code>&lt;</code></a>,
<a href="#operator_not-equal"><code>&lt;&gt;</code></a>,
<a href="#operator_not-equal"><code>!=</code></a>,
<a href="#operator_is"><code>IS</code></a>,
<a href="#operator_like"><code>LIKE</code></a>,
<a href="#operator_regexp"><code>REGEXP</code></a> и
<a href="#function_in"><code>IN</code></a>.
Когда используется в качестве оператора назначения, у него есть тот же самый
приоритет, что и у <a href="#operator_assign-value"><code>:=</code>
</a>. Разделы <a href="sql.htm#set-variable">14.7.4.1</a> и
<a href="lang.htm#user-variables">10.4</a> объясняют, как MySQL определяет,
какая интерпретация <code>=</code> должна применяться.</p>

<p>Для операторов, которые на том же самом уровне приоритета в пределах
выражения, оценка происходит слева направо, за исключением того, что
присвоение происходит справа налево.</p>

<p>Значение некоторых операторов зависит от режима SQL:</p>
<ul><li><p>По умолчанию <a href="#operator_or"><code>||</code></a>
это логический <a href="#operator_or"><code>OR</code></a>. Если
включен <a href="server.htm#sqlmode_pipes_as_concat"><code>PIPES_AS_CONCAT
</code></a>, <a href="#operator_or"><code>||</code></a> объединяет
строки с приоритетом между <a href="#operator_bitwise-xor"><code>^
</code></a> и одноместными операторами.</li>

<li>По умолчанию <a href="#operator_not"><code>!</code></a>
имеет более высокий приоритет чем <code>NOT</code>. С включенным
<a href="server.htm#sqlmode_high_not_precedence"><code>HIGH_NOT_PRECEDENCE
</code></a> <a href="#operator_not"><code>!</code></a> и
<code>NOT</code> имеют тот же самый приоритет.</p></li></ul>

<p>Приоритет операторов определяет порядок оценки выражения. Чтобы
переопределить этот порядок и группировать члены явно, используйте
круглые скобки. Например:
<pre>
mysql&gt; SELECT 1+2*3;
    -&gt; 7
mysql&gt; SELECT (1+2)*3;
    -&gt; 9
</pre>

<h3><a name="comparison-operators"></a>13.3.2. Функции сравнения и операторы
</h3>
<p><b>Таблица 13.3. Операторы сравнения</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_between"><code>BETWEEN
... AND ...</code></a></td><td>Проверяет, является ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#function_coalesce"><code>COALESCE()
</code></a></td><td>Вернет первый аргумент не-NULL</td></tr>
<tr><td scope="row"><a href="#operator_equal"><code>=</code></a>
</td><td>Равенство</td></tr>
<tr><td scope="row"><a href="#operator_equal-to"><code>&lt;=&gt;
</code></a></td><td>NULL-безопасное равенство</td></tr>
<tr><td scope="row"><a href="#operator_greater-than"><code>&gt;
</code></a></td><td>Больше чем</td></tr>
<tr><td scope="row"><a href="#operator_greater-than-or-equal"><code>
&gt;=</code></a></td><td>Больше чем или равно</td></tr>
<tr><td scope="row"><a href="#function_greatest"><code>GREATEST()
</code></a></td><td>Самый большой параметр</td></tr>
<tr><td scope="row"><a href="#function_in"><code>IN()</code></a>
</td><td>Проверяет, является ли значение в пределах ряда значений</td></tr>
<tr><td scope="row"><a href="#function_interval"><code>INTERVAL()
</code></a></td><td>Индекс параметра, который меньше, чем первый параметр
</td></tr>
<tr><td scope="row"><a href="#operator_is"><code>IS</code></a></td>
<td>Проверка на boolean</td></tr>
<tr><td scope="row"><a href="#operator_is-not"><code>IS NOT</code>
</a></td><td>Проверка на boolean</td></tr>
<tr><td scope="row"><a href="#operator_is-not-null"><code>IS NOT
NULL</code></a></td><td>Проверка на NOT NULL</td></tr>
<tr><td scope="row"><a href="#operator_is-null"><code>IS NULL</code>
</a></td><td>Проверка на NULL</td></tr>
<tr><td scope="row"><a href="#function_isnull"><code>ISNULL()</code>
</a></td><td>Является ли параметром NULL</td></tr>
<tr><td scope="row"><a href="#function_least"><code>LEAST()</code>
</a></td><td>Самый маленький параметр</td></tr>
<tr><td scope="row"><a href="#operator_less-than"><code>&lt;</code>
</a></td><td>Меньше чем</td></tr>
<tr><td scope="row"><a href="#operator_less-than-or-equal"><code>
&lt;=</code></a></td><td>Меньше чем или равно</td></tr>
<tr><td scope="row"><a href="#operator_like"><code>LIKE</code></a>
</td><td>Простое соответствие образца</td></tr>
<tr><td scope="row"><a href="#operator_not-between"><code>NOT
BETWEEN ... AND ...</code></a></td><td>Проверяет, не является ли значение в
пределах диапазона значений</td></tr>
<tr><td scope="row"><a href="#operator_not-equal"><code>!=</code>,
<code>&lt;&gt;</code></a></td><td>Не равно</td></tr>
<tr><td scope="row"><a href="#function_not-in"><code>NOT IN()</code>
</a></td><td>Проверяет, не является ли значение в пределах ряда значений
</td></tr>
<tr><td scope="row"><a href="#operator_not-like"><code>NOT LIKE
</code></a></td><td>Отрицание простого соответствия образца</td></tr>
<tr><td scope="row"><a href="#function_strcmp"><code>STRCMP()</code>
</a></td><td>Сравнить две строки</td></tr></tbody></table>

<p>Операции сравнения приводят к значению <code>1</code>
(<code>TRUE</code>), <code>0</code> (<code>FALSE</code>) или
<code>NULL</code>. Эти операции работают и на числах, и на строках. Строки
автоматически преобразованы в числа, а числа в строки по мере необходимости.
</p>

<p>Следующие относительные операторы сравнения могут использоваться, чтобы
сравнить не только скалярные операнды, но и операнды строки:
<pre>
=  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt;  !=
</pre>

<p>Описания для тех операторов позже в этом разделе детализируют, как они
работают с операндами строки. Для дополнительных примеров сравнений строки в
контексте подзапросов строки, см. <a href="sql.htm#row-subqueries">раздел
14.2.10.5</a>.</p>

<p>Некоторые из функций в этом разделе возвращают значения кроме
<code>1</code> (<code>TRUE</code>), <code>0</code> (<code>FALSE</code>) или
<code>NULL</code>. Например,
<a href="#function_least"><code>LEAST()</code></a> и
<a href="#function_greatest"><code>GREATEST()</code></a>.
Однако, значение, которое они возвращают, основано на операциях сравнения,
выполненных согласно правилам, описанным в
<a href="#type-conversion">разделе 13.2</a>.</p>

<p>Чтобы преобразовать значение в определенный тип в целях сравнения, Вы
можете использовать <a href="#function_cast"><code>CAST()</code></a>.
Строковые значения могут быть преобразованы в различное использование набора
символов с помощью <a href="#function_convert"><code>CONVERT()
</code></a>.</p>

<p>По умолчанию, строковые сравнения не являются чувствительными к регистру и
используют текущий набор символов. Значение по умолчанию
<code>latin1</code> (cp1252 West European), которое также работает хорошо
на английском языке.</p>

<ul><li><a name="operator_equal"></a><p>
<a href="#operator_equal"><code>=</code></a></p>
<p>Равенство:
<pre>
mysql&gt; SELECT 1 = 0;
    -&gt; 0
mysql&gt; SELECT '0' = 0;
    -&gt; 1
mysql&gt; SELECT '0.0' = 0;
    -&gt; 1
mysql&gt; SELECT '0.01' = 0;
    -&gt; 0
mysql&gt; SELECT '.01' = 0.01;
    -&gt; 1
</pre>

<p>Для сравнений строки <code>(a, b) = (x, y)</code> эквивалентно:
<pre>
(a = x) AND (b = y)
</pre></li>

<li><a name="operator_equal-to"></a><p>
<a href="#operator_equal-to"><code>&lt;=&gt;</code></a></p>
<p><code>NULL</code>-безопасное равенство. Этот оператор выполняет сравнение
равенства как <a href="#operator_equal"><code>=</code></a>, но
возвращает <code>1</code> вместо <code>NULL</code>, если оба операнда
<code>NULL</code> и <code>0</code> вместо <code>NULL</code>, если один
операнд <code>NULL</code>.</p>

<p>Оператор <a href="#operator_equal-to"><code>&lt;=&gt;</code></a>
эквивалентен стандартному SQL <code>IS NOT DISTINCT FROM</code>.
<pre>
mysql&gt; SELECT 1 &lt;=&gt; 1, NULL &lt;=&gt; NULL, 1 &lt;=&gt; NULL;
    -&gt; 1, 1, 0
mysql&gt; SELECT 1 = 1, NULL = NULL, 1 = NULL;
    -&gt; 1, NULL, NULL
</pre>

<p>Для сравнений строк <code>(a, b) &lt;=&gt; (x, y)</code>  эквивалентно:
<pre>
(a &lt;=&gt; x) AND (b &lt;=&gt; y)
</pre></li>

<li><a name="operator_not-equal"></a><p>
<a href="#operator_not-equal"><code>&lt;&gt;</code></a>,
<a href="#operator_not-equal"><code>!=</code></a></p>

<p>Не равно:
<pre>
mysql&gt; SELECT '.01' &lt;&gt; '0.01';
  -&gt; 1
mysql&gt; SELECT .01 &lt;&gt; '0.01';
  -&gt; 0
mysql&gt; SELECT 'zapp' &lt;&gt; 'zappp';
  -&gt; 1
</pre>

<p>Для сравнений строк <code>(a, b) &lt;&gt; (x, y)</code> и
<code>(a, b) != (x, y)</code> эквивалентно:
<pre>
(a &lt;&gt; x) OR (b &lt;&gt; y)
</pre></li>

<li><a name="operator_less-than-or-equal"></a><p>
<a href="#operator_less-than-or-equal"><code>&lt;=</code></a></p>

<p>Меньше или равно:
<pre>
mysql&gt; SELECT 0.1 &lt;= 2;
  -&gt; 1
</pre>

<p>Для сравнений строк <code>(a, b) &lt;= (x, y)</code> эквивалентно:
<pre>
(a &lt; x) OR ((a = x) AND (b &lt;= y))
</pre></li>

<li><a name="operator_less-than"></a><p>
<a href="#operator_less-than"><code>&lt;</code></a></p>
<p>Меньше:
<pre>
mysql&gt; SELECT 2 &lt; 2;
  -&gt; 0
</pre>

<p>Для сравнений строк <code>(a, b) &lt; (x, y)</code> эквивалентно:
<pre>
(a &lt; x) OR ((a = x) AND (b &lt; y))
</pre></li>

<li><a name="operator_greater-than-or-equal"></a><p>
<a href="#operator_greater-than-or-equal"><code>&gt;=</code></a></p>
<p>Больше или равно:
<pre>
mysql&gt; SELECT 2 &gt;= 2;
  -&gt; 1
</pre>

<p>Для сравнений строк <code>(a, b) &gt;= (x, y)</code> эквивалентно:
<pre>
(a &gt; x) OR ((a = x) AND (b &gt;= y))
</pre></li>

<li><a name="operator_greater-than"></a><p>
<a href="#operator_greater-than"><code>&gt;</code></a></p>
<p>Больше:
<pre>
mysql&gt; SELECT 2 &gt; 2;
  -&gt; 0
</pre>

<p>Для сравнений строк <code>(a, b) &gt; (x, y)</code> эквивалентно:
<pre>
(a &gt; x) OR ((a = x) AND (b &gt; y))
</pre></li>

<li><a name="operator_is"></a><p><a href="#operator_is"><code>IS
<em><code>boolean_value</code></em></code></a></p>
<p>Сравнивает значение с булевым значением, где
<em><code>boolean_value</code></em> может быть
<code>TRUE</code>, <code>FALSE</code> или <code>UNKNOWN</code>.
<pre>
mysql&gt; SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;
  -&gt; 1, 1, 1
</pre></li>

<li><a name="operator_is-not"></a><p>
<a href="#operator_is-not"><code>IS NOT
<em><code>boolean_value</code></em></code></a></p>

<p>Сравнивает значение с булевым значением, где
<em><code>boolean_value</code></em> может быть
<code>TRUE</code>, <code>FALSE</code> или <code>UNKNOWN</code>.
<pre>
mysql&gt; SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;
  -&gt; 1, 1, 0
</pre></li>

<li><a name="operator_is-null"></a><p>
<a href="#operator_is-null"><code>IS NULL</code></a></p>
<p>Является ли значение <code>NULL</code>.
<pre>
mysql&gt; SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;
  -&gt; 0, 0, 1
</pre>

<p>Чтобы работать хорошо с программами ODBC, MySQL поддерживает следующие
дополнительные функции, используя <a href="#operator_is-null"><code>
IS NULL</code></a>:</p>

<ul><li><p>Если переменная
<a href="server.htm#sysvar_sql_auto_is_null"><code>sql_auto_is_null</code>
</a> установлена в 1, тогда после запроса, который успешно вставляет
автоматически произведенный <code>AUTO_INCREMENT</code>, Вы можете найти
это значение, делая запрос следующей формы:
<pre>
SELECT * FROM <em><code>tbl_name</code></em> WHERE <em><code>auto_col</code></em> IS NULL
</pre>

<p>Если запрос возвращает строку, значение возврата то же самое, как будто Вы
вызвали <a href="#function_last-insert-id"><code>LAST_INSERT_ID()
</code></a>. Если нет успешно вставленного значения <code>AUTO_INCREMENT
</code>, запрос <a href="sql.htm#select"><code>SELECT</code></a>
не возвращает строки.</p>

<p>Поведение получения <code>AUTO_INCREMENT</code> при использовании
<a href="#operator_is-null"><code>IS NULL</code></a>
может быть отключено, устанавливая
<a href="server.htm#sysvar_sql_auto_is_null"><code>sql_auto_is_null = 0
</code></a>.</p>
<p>Значение по умолчанию <a href="server.htm#sysvar_sql_auto_is_null"><code>
sql_auto_is_null</code></a> 0.</li>

<li>Для столбцов <a href="types.htm#datetime"><code>DATE</code></a> и
<a href="types.htm#datetime"><code>DATETIME</code></a>, которые объявлены как
<code>NOT NULL</code>, Вы можете найти специальную дату
<code>'0000-00-00'</code> при использовании запроса:
<pre>
SELECT * FROM <em><code>tbl_name</code></em> WHERE <em><code>date_column</code></em> IS NULL
</pre>

<p>Это необходимо, чтобы заставить некоторые приложения ODBC работать, потому
что ODBC не поддерживает значение даты <code>'0000-00-00'</code>.</p>
<p>См. <a href="../../../dev.mysql.com/doc/connector-odbc/en/connector-odbc-usagenotes-functionality-last-insert-id.html"
target="_top">Obtaining Auto-Increment Values</a> и описание для опции
<code>FLAG_AUTO_IS_NULL</code> на
<a href="../../../dev.mysql.com/doc/connector-odbc/en/connector-odbc-configuration-connection-parameters.html"
target="_top">Connector/ODBC Connection Parameters</a>.</p></li></ul></li>

<li><a name="operator_is-not-null"></a><p>
<a href="#operator_is-null"><code>IS NOT NULL</code></a></p>
<p>Проверяет, не является ли значение <code>NULL</code>.
<pre>
mysql&gt; SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;
  -&gt; 1, 1, 0
</pre></li>

<li><a name="operator_between"></a><p>
<a href="#operator_between"><code><em><code>expr</code></em>
BETWEEN <em><code>min</code></em> AND <em><code>max</code></em></code></a>
</p>

<p>Если <em><code>expr</code></em> больше чем или равен
<em><code>min</code></em> и <em><code>expr</code></em>
меньше чем или равно <em><code>max</code></em>,
<a href="#operator_between"><code>BETWEEN</code></a> возвращает
<code>1</code>, иначе <code>0</code>. Это эквивалентно выражению
<code>(<em><code>min</code></em> &lt;= <em><code>expr</code></em> AND
<em><code>expr</code></em> &lt;= <em><code>max</code></em>)</code>,
если все параметры имеют тот же самый тип. Иначе имеет место преобразование
типов, согласно правилам, описанным в
<a href="#type-conversion">разделе 13.2</a>, но ко всем
этим трем параметрам.
<pre>
mysql&gt; SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;
  -&gt; 1, 0
mysql&gt; SELECT 1 BETWEEN 2 AND 3;
  -&gt; 0
mysql&gt; SELECT 'b' BETWEEN 'a' AND 'c';
  -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND '3';
  -&gt; 1
mysql&gt; SELECT 2 BETWEEN 2 AND 'x-3';
  -&gt; 0
</pre>

<p>Для лучших результатов, используя
<a href="#operator_between"><code>BETWEEN</code></a>
с датой или временем, надо использовать
<a href="#function_cast"><code>CAST()</code></a>, чтобы
явно преобразовать значения в желаемый тип данных. Если Вы сравниваете
<a href="types.htm#datetime"><code>DATETIME</code></a> с двумя значениями
<a href="types.htm#datetime"><code>DATE</code></a>, преобразуйте
<a href="types.htm#datetime"><code>DATE</code></a> в
<a href="types.htm#datetime"><code>DATETIME</code></a>.
Если Вы используете такую строку, как <code>'2001-1-1'</code> в сравнении с
<a href="types.htm#datetime"><code>DATE</code></a>, преобразуйте строку к
<a href="types.htm#datetime"><code>DATE</code></a>.</p></li>

<li><a name="operator_not-between"></a><p>
<a href="#operator_not-between"><code><em><code>expr</code></em>
NOT BETWEEN <em><code>min</code></em> AND <em><code>max</code></em></code>
</a></p>
<p>Это то же самое, как <code>NOT (<em><code>expr</code></em> BETWEEN
<em><code>min</code></em> AND <em><code>max</code></em>)</code>.</p></li>

<li><a name="function_coalesce"></a><p>
<a href="#function_coalesce"><code>COALESCE(<em><code>value</code>
</em>,...)</code></a></p>

<p>Возвращает первое не-<code>NULL</code> значение в списке, или
<code>NULL</code>, если нет не-<code>NULL</code> значений.
<pre>
mysql&gt; SELECT COALESCE(NULL,1);
  -&gt; 1
mysql&gt; SELECT COALESCE(NULL,NULL,NULL);
  -&gt; NULL
</pre></li>

<li><a name="function_greatest"></a><p>
<a href="#function_greatest"><code>GREATEST(<em><code>value1</code>
</em>,<em><code>value2</code></em>,...)</code></a></p>

<p>С двумя или большим числом параметров, возвращает самый большой параметр.
Параметры сравнены, используя те же самые правила, что касаются
<a href="#function_least"><code>LEAST()</code></a>.
<pre>
mysql&gt; SELECT GREATEST(2,0);
  -&gt; 2
mysql&gt; SELECT GREATEST(34.0,3.0,5.0,767.0);
  -&gt; 767.0
mysql&gt; SELECT GREATEST('B','A','C');
  -&gt; 'C'
</pre>

<p><a href="#function_greatest"><code>GREATEST()</code></a>
возвращает <code>NULL</code>, если какой-либо параметр
<code>NULL</code>.</p></li>

<li><a name="function_in"></a><p>
<a href="#function_in"><code><em><code>expr</code></em>
IN (<em><code>value</code></em>,...)</code></a></p>

<p>Возвращает <code>1</code>, если <em><code>expr</code></em>
равно любому из значений в списке <code>IN</code>, иначе <code>0</code>.
Если все значения константы, они оценены согласно типу
<em><code>expr</code></em> и отсортированы. Поиск элемента тогда сделан,
используя двоичный поиск. Это означает, что <code>IN</code>
очень быстр, если список значений <code>IN</code> состоит полностью из
констант. Иначе имеет место преобразование типов, согласно правилам,
описанным в <a href="#type-conversion">разделе 13.2</a>, но
ко всем параметрам.
<pre>
mysql&gt; SELECT 2 IN (0,3,5,7);
  -&gt; 0
mysql&gt; SELECT 'wefwf' IN ('wee','wefwf','weg');
  -&gt; 1
</pre>

<p><code>IN</code> может использоваться, чтобы сравнить конструкторы строки:
<pre>
mysql&gt; SELECT (3,4) IN ((1,2), (3,4));
  -&gt; 1
mysql&gt; SELECT (3,4) IN ((1,2), (3,5));
  -&gt; 0
</pre>

<p>Вы никогда не должны смешивать заключенные в кавычки значения со
значениями без кавычек, потому что правила сравнения для заключенных в
кавычки значений (таких как строки) отличаются. Смешивание типов может
поэтому привести к непоследовательным результатам. Например, не пишите
такое выражение <code>IN</code>:
<pre>
SELECT val1 FROM tbl1 WHERE val1 IN (1,2,'a');
</pre>

<p>Вместо этого напишите так:
<pre>
SELECT val1 FROM tbl1 WHERE val1 IN ('1','2','a');
</pre>

<p>Число значений в списке <code>IN</code> ограничено только значением
<a href="server.htm#sysvar_max_allowed_packet"><code>max_allowed_packet
</code></a>.</p>

<p>Для выполнения стандарта SQL, <code>IN</code> вернет <code>NULL</code>
не только если выражение на левой стороне <code>NULL</code>, но также если
никакое соответствие не найдено в списке, и одно из
выражений в списке <code>NULL</code>.</p>

<p>Синтаксис <code>IN()</code> может также использоваться, чтобы написать
определенные типы подзапросов. См. <a href="sql.htm#any-in-some-subqueries">
раздел 14.2.10.3</a>.</p></li>

<li><a name="function_not-in"></a><p>
  <a href="#function_not-in"><code><em><code>expr</code></em>
  NOT IN (<em><code>value</code></em>,...)</code></a></p>
<p>Аналог <code>NOT (<em><code>expr</code></em> IN
  (<em><code>value</code></em>,...))</code>.</p></li>

<li><a name="function_isnull"></a><p>
<a href="#function_isnull"><code>ISNULL(<em><code>expr</code></em>)
</code></a></p>

<p>Если <em><code>expr</code></em> <code>NULL</code>,
<a href="#function_isnull"><code>ISNULL()</code></a> вернет
<code>1</code>, иначе <code>0</code>.
<pre>
mysql&gt; SELECT ISNULL(1+1);
  -&gt; 0
mysql&gt; SELECT ISNULL(1/0);
  -&gt; 1
</pre>

<p><a href="#function_isnull"><code>ISNULL()</code></a>
может использоваться вместо
<a href="#operator_equal"><code>=</code></a>, чтобы
проверить, является ли значение <code>NULL</code>. Сравнение значения
с <code>NULL</code>, используя <a href="#operator_equal">
<code>=</code></a> всегда вернет <code>NULL</code>.</p>

<p>Функция <a href="#function_isnull"><code>ISNULL()</code></a>
совместно использует некоторые специальные поведения с оператором
<a href="#operator_is-null"><code>IS NULL</code></a>.
См. описание <a href="#operator_is-null"><code>IS NULL</code></a>.
</p></li>

<li><a name="function_interval"></a><p>
<a href="#function_interval"><code>INTERVAL(<em><code>N</code></em>,
<em><code>N1</code></em>,<em><code>N2</code></em>,<em><code>N3</code></em>,
...)</code></a></p>

<p>Вернет <code>0</code> если <em><code>N</code></em>
  &lt; <em><code>N1</code></em>, <code>1</code> если
  <em><code>N</code></em> &lt; <em><code>N2</code></em>
и так далее или <code>-1</code> если <em><code>N</code></em>
<code>NULL</code>. Все параметры обработаны как целые числа.
Для этой функции требуется <em><code>N1</code></em>
&lt; <em><code>N2</code></em> &lt; <em><code>N3</code></em> &lt;
<code>...</code> &lt; <em><code>Nn</code></em>, чтобы работать правильно.
Это потому, что двоичный поиск используется (очень быстрый).
<pre>
mysql&gt; SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);
  -&gt; 3
mysql&gt; SELECT INTERVAL(10, 1, 10, 100, 1000);
  -&gt; 2
mysql&gt; SELECT INTERVAL(22, 23, 30, 44, 200);
  -&gt; 0
</pre></li>

<li><a name="function_least"></a><p>
<a href="#function_least"><code>LEAST(<em><code>value1</code></em>,
<em><code>value2</code></em>,...)</code></a></p>

<p>С двумя или большим числом параметров возвращает самый маленький
параметр. Параметры сравнены, используя следующие правила:</p>

<ul><li><p>Если какой-либо параметр <code>NULL</code>, результат
<code>NULL</code>. Никакое сравнение не нужно.</li>
<li>Если возвращаемое значение используется в контексте
<a href="types.htm#integer-types"><code>INTEGER</code></a> или все параметры
оценены как целые числа, они сравнены как целые числа.</li>

<li>Если возвращаемое значение используется в контексте
<a href="types.htm#floating-point-types"><code>REAL</code></a>
или все параметры оценены как реальные, они сравнены как реальные.</li>
<li>Если параметры включают соединение чисел и строк, они сравнены как числа.
</li>

<li>Если какой-либо параметр символьная строка, параметры
сравнены как строки.</li>
<li>Во всех других случаях параметры сравнены как двоичные строки.
</p></li></ul>

<pre>
mysql&gt; SELECT LEAST(2,0);
  -&gt; 0
mysql&gt; SELECT LEAST(34.0,3.0,5.0,767.0);
  -&gt; 3.0
mysql&gt; SELECT LEAST('B','A','C');
  -&gt; 'A'
</pre>

<p>Отметьте, что предыдущие конверсионные правила могут привести к странным
результатам в некоторых промежуточных случаях:
<pre>
mysql&gt; SELECT CAST(LEAST(3600, 9223372036854775808.0) AS SIGNED);
  -&gt; -9223372036854775808
</pre>

<p>Это происходит, потому что MySQL читает <code>9223372036854775808.0</code>
в контексте целого числа. Представление целого числа недостаточно хорошо,
чтобы содержать такое значение, таким образом, это превращается в целое
число со знаком.</p></li></ul>

<h3><a name="logical-operators"></a>13.3.3. Логические операторы</h3>
<a name="idm139965357115296"></a><p><b>Таблица 13.4. Логические операторы</b>
</p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_and"><code>AND</code>,
<code>&amp;&amp;</code></a></td><td>Логический AND</td></tr>
<tr><td scope="row"><a href="#operator_not"><code>NOT</code>,
<code>!</code></a></td><td>Отрицание</td></tr>
<tr><td scope="row"><a href="#operator_or"><code>||</code>,
<code>OR</code></a></td><td>Логический OR</td></tr>
<tr><td scope="row"><a href="#operator_xor"><code>XOR</code></a>
</td><td>Логический XOR</td></tr></tbody></table>

<p>В SQL все логические операторы оценивают как <code>TRUE</code>,
<code>FALSE</code> или <code>NULL</code> (<code>UNKNOWN</code>). В MySQL
они осуществлены как 1 (<code>TRUE</code>), 0 (<code>FALSE</code>) и
<code>NULL</code>. Большая часть из этого характерна для различных серверов
базы данных SQL, хотя некоторые серверы могут возвратить любое ненулевое
значение для <code>TRUE</code>.</p>

<p>MySQL оценивает любое отличное от нуля, не-<code>NULL</code> значение как
<code>TRUE</code>. Например, все следующие запросы
оцениваются как <code>TRUE</code>:
<pre>
mysql&gt; SELECT 10 IS TRUE;
    -&gt; 1
mysql&gt; SELECT -10 IS TRUE;
    -&gt; 1
mysql&gt; SELECT 'string' IS NOT NULL;
    -&gt; 1
</pre>

<ul><li><a name="operator_not"></a><p>
<a href="#operator_not"><code>NOT</code></a>,
<a href="#operator_not"><code>!</code></a></p>

<p>Логический NOT. Оценивается как <code>1</code>, если операнд
<code>0</code>, как <code>0</code>, если операнд отличен от нуля и
<code>NOT NULL</code> вернет <code>NULL</code>.
<pre>
mysql&gt; SELECT NOT 10;
  -&gt; 0
mysql&gt; SELECT NOT 0;
  -&gt; 1
mysql&gt; SELECT NOT NULL;
  -&gt; NULL
mysql&gt; SELECT ! (1+1);
  -&gt; 0
mysql&gt; SELECT ! 1+1;
  -&gt; 1
</pre>
<p>Последний пример производит <code>1</code> потому, что выражение оценивает
тем же самым путь, как <code>(!1)+1</code>.</p></li>

<li><a name="operator_and"></a><p>
<a href="#operator_and"><code>AND</code></a>,
<a href="#operator_and"><code>&amp;&amp;</code></a></p>
<p>Логический AND. Оценивается как <code>1</code>, если все операнды являются
отличными от нуля и не <code>NULL</code>, как <code>0</code>, если один или
более операндов <code>0</code>, иначе <code>NULL</code> возвращен.
<pre>
mysql&gt; SELECT 1 AND 1;
  -&gt; 1
mysql&gt; SELECT 1 AND 0;
  -&gt; 0
mysql&gt; SELECT 1 AND NULL;
  -&gt; NULL
mysql&gt; SELECT 0 AND NULL;
  -&gt; 0
mysql&gt; SELECT NULL AND 0;
  -&gt; 0
</pre></li>

<li><a name="operator_or"></a><p>
<a href="#operator_or"><code>OR</code></a>,
<a href="#operator_or"><code>||</code></a></p>

<p>Логический OR. Когда оба операнда не-<code>NULL</code>, результат
<code>1</code>, если какой-либо операнд является отличным от нуля, и
<code>0</code> иначе. Если один операнд <code>NULL</code>,
результат <code>1</code>, если другой операнд является отличным от нуля,
иначе <code>NULL</code>. Если оба операнда
<code>NULL</code>, результат <code>NULL</code>.
<pre>
mysql&gt; SELECT 1 OR 1;
  -&gt; 1
mysql&gt; SELECT 1 OR 0;
  -&gt; 1
mysql&gt; SELECT 0 OR 0;
  -&gt; 0
mysql&gt; SELECT 0 OR NULL;
  -&gt; NULL
mysql&gt; SELECT 1 OR NULL;
  -&gt; 1
</pre></li>

<li><a name="operator_xor"></a><p>
<a href="#operator_xor"><code>XOR</code></a></p>
<p>Логический XOR. Возвращает <code>NULL</code>, если любой операнд
<code>NULL</code>. Для не-<code>NULL</code> операндов, оценивает как
<code>1</code>, если нечетное число операндов является отличным от
нуля, иначе вернет <code>0</code>.
<pre>
mysql&gt; SELECT 1 XOR 1;
  -&gt; 0
mysql&gt; SELECT 1 XOR 0;
  -&gt; 1
mysql&gt; SELECT 1 XOR NULL;
  -&gt; NULL
mysql&gt; SELECT 1 XOR 1 XOR 1;
  -&gt; 1
</pre>

<p><code>a XOR b</code> математически равно
<code>(a AND (NOT b)) OR ((NOT a) and b)</code>.
</p></li></ul>

<h3><a name="assignment-operators"></a>13.3.4. Операторы присваивания</h3>
<p><b>Таблица 13.5. Операторы присваивания</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_assign-equal"><code>=
</code></a></td><td>Назначает значение (как часть
<a href="sql.htm#set-variable"><code>SET</code></a>)</td></tr>
<tr><td scope="row"><a href="#operator_assign-value"><code>:=</code>
</a></td><td>Назначает значение</td></tr></tbody></table>

<ul><li><a name="operator_assign-value"></a><p>
<a href="#operator_assign-value"><code>:=</code></a></p>
<p>Оператор назначения. Заставляет пользовательскую переменную на левой
стороне оператора брать значение с его правой стороны. Значение на правой
стороне может быть литеральным значением, другой переменной, хранящей
значение, или любым легальным выражением, которое приводит к скалярному
значению, включая результат запроса (при условии, что это значение
скалярное). Вы можете выполнить многократные назначения в том же самом
операторе <a href="sql.htm#set-variable"><code>SET</code></a>.
Вы можете выполнить многократные назначения в том же самом запросе.</p>

<p>В отличие от <a href="#operator_assign-equal"><code>=</code></a>,
<a href="#operator_assign-value"><code>:=</code></a> никогда не
интерпретируется как оператор сравнения. Это означает, что Вы можете
использовать <a href="#operator_assign-value"><code>:=</code></a> в
в любом допустимом запросе SQL (не только в
<a href="sql.htm#set-variable"><code>SET</code></a>),
чтобы назначить значение переменной.
<pre>
mysql&gt; SELECT @var1, @var2;
  -&gt; NULL, NULL
mysql&gt; SELECT @var1 := 1, @var2;
  -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2;
  -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2 := @var1;
  -&gt; 1, 1
mysql&gt; SELECT @var1, @var2;
  -&gt; 1, 1
mysql&gt; SELECT @var1:=COUNT(*) FROM t1;
  -&gt; 4
mysql&gt; SELECT @var1;
  -&gt; 4
</pre>

<p>Вы можете сделать присвоение значения, используя
<a href="#operator_assign-value"><code>:=</code></a> в
других запросах, кроме <a href="sql.htm#select"><code>SELECT</code></a>,
например, в <a href="sql.htm#update"><code>UPDATE</code></a>:
<pre>
mysql&gt; SELECT @var1;
  -&gt; 4
mysql&gt; SELECT * FROM t1;
  -&gt; 1, 3, 5, 7

mysql&gt; UPDATE t1 SET c1 = 2 WHERE c1 = @var1:= 1;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT @var1;
  -&gt; 1
mysql&gt; SELECT * FROM t1;
  -&gt; 2, 3, 5, 7
</pre>

<p>В то же время возможно установить и считать значение той же самой
переменной в единственном запросе SQL, используя
<a href="#operator_assign-value"><code>:=</code></a>, но это не
рекомендуется. <a href="lang.htm#user-variables">Раздел 10.4</a>
объясняет, почему Вы должны избегать делать это.</p></li>

<li><a name="operator_assign-equal"></a><p>
<a href="#operator_assign-equal"><code>=</code></a></p>
<p>Этот оператор используется, чтобы выполнить присвоение значения в двух
случаях, описанных в следующих двух параграфах.</p>

<p>В пределах <a href="sql.htm#set-variable"><code>SET</code></a>
<code>=</code> обработан как оператор назначения, который заставляет
пользовательскую переменную на левой стороне оператора брать значение с его
правой стороны. Другими словами, когда используется в
<a href="sql.htm#set-variable"><code>SET</code></a>, <code>=</code>
обработан тождественно <a href="#operator_assign-value"><code>:=
</code></a>. Значение на правой стороне может быть литералом, другой
переменной, хранящей значение, или любым выражением, которое приводит к
скалярному значению, включая результат запроса (при условии, что это значение
скалярное). Вы можете выполнить многократные назначения в том же самом
<a href="sql.htm#set-variable"><code>SET</code></a>.</p>

<p>В предложении <code>SET</code> запроса
<a href="sql.htm#update"><code>UPDATE</code></a> <code>=</code>
также действует как оператор назначения. В этом случае это заставляет
столбец, названный на левой стороне оператора, предполагать, что значение,
данное на правой стороне, предоставило любому <code>WHERE</code> условия,
которые являются частью <a href="sql.htm#update"><code>UPDATE</code></a>.
Вы можете сделать многократные назначения в том же самом <code>SET</code>
запроса <a href="sql.htm#update"><code>UPDATE</code></a>.</p>

<p>В любом другом контексте <code>=</code> обработан как
<a href="#operator_equal">оператор сравнения</a>.
<pre>
mysql&gt; SELECT @var1, @var2;
  -&gt; NULL, NULL
mysql&gt; SELECT @var1 := 1, @var2;
  -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2;
  -&gt; 1, NULL
mysql&gt; SELECT @var1, @var2 := @var1;
  -&gt; 1, 1
mysql&gt; SELECT @var1, @var2;
  -&gt; 1, 1
</pre></li></ul>

<h2><a name="control-flow-functions"></a>13.4. Функции управления потоком
</h2>
<a name="idm139965356927056"></a><p><b>Таблица 13.6. Операторы управления
потоком</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_case"><code>CASE
</code></a></td><td>Case</td></tr>
<tr><td scope="row"><a href="#function_if"><code>IF()</code></a>
</td><td>If/else</td></tr>
<tr><td scope="row"><a href="#function_ifnull"><code>IFNULL()</code>
</a></td><td>Null if/else</td></tr>
<tr><td scope="row"><a href="#function_nullif"><code>NULLIF()</code>
</a></td><td>NULL, если expr1 = expr2</td></tr></tbody></table>

<ul><li><a name="operator_case"></a><p>
<a href="#operator_case"><code>CASE
<em><code>value</code></em> WHEN
[<em><code>compare_value</code></em>] THEN
<em><code>result</code></em> [WHEN
[<em><code>compare_value</code></em>] THEN
<em><code>result</code></em> ...] [ELSE
<em><code>result</code></em>] END</code></a></p>

<p><a href="#operator_case"><code>CASE WHEN
[<em><code>condition</code></em>] THEN
<em><code>result</code></em> [WHEN
[<em><code>condition</code></em>] THEN
<em><code>result</code></em> ...] [ELSE
<em><code>result</code></em>] END</code></a></p>

<p>Первая версия возвращает <em><code>result</code></em>, где
<code><em><code>value</code></em>=<em><code>compare_value</code></em></code>.
Вторая версия возвращает результат для первого условия, которое является
истиной. Если не было никакого значения результата соответствия, вернется
результат после <code>ELSE</code> или <code>NULL</code>,
если нет <code>ELSE</code>.
<pre>
mysql&gt; SELECT CASE 1 WHEN 1 THEN 'one'
  -&gt; WHEN 2 THEN 'two' ELSE 'more' END;
  -&gt; 'one'
mysql&gt; SELECT CASE WHEN 1&gt;0 THEN 'true' ELSE 'false' END;
  -&gt; 'true'
mysql&gt; SELECT CASE BINARY 'B'
  -&gt; WHEN 'a' THEN 1 WHEN 'b' THEN 2 END;
  -&gt; NULL
</pre>

<p>Тип возвращения <a href="#operator_case"><code>CASE</code></a>
совместимый тип всех возвращаемых значений, но также зависит от контекста, в
котором это используется. Если используется в строковом контексте, результат
возвращен как строка. Если в числовом контексте, результат возвращен как
десятичное, реальное или целочисленное значение.</p>

<p>Синтаксис <a href="#operator_case"><code>CASE</code></a>
<span><em>expression</em></span>, показанный здесь, отличается немного от
SQL <a href="sql.htm#case"><code>CASE</code></a>
<span><em>statement</em></span>, описанного в <a href="sql.htm#case">разделе
14.6.5.1</a> для использования в сохраненных программах. Оператор
<a href="sql.htm#case"><code>CASE</code></a> не может иметь
<code>ELSE NULL</code> и это закончено <code>END CASE</code> вместо
<code>END</code>.</p></li>

<li><a name="function_if"></a><p>
<a href="#function_if"><code>IF(<em><code>expr1</code></em>,
<em><code>expr2</code></em>,<em><code>expr3</code></em>)</code></a></p>

<p>Если <em><code>expr1</code></em> <code>TRUE</code>
(<code><em><code>expr1</code></em> &lt;&gt;
0</code> и <code><em><code>expr1</code></em>
&lt;&gt; NULL</code>), то
<a href="#function_if"><code>IF()</code></a> вернет
<em><code>expr2</code></em>, иначе вернет <em><code>expr3</code></em>.
<a href="#function_if"><code>IF()</code></a> возвращает числовое или
строковое значение, в зависимости от контекста, в котором используется.
<pre>
mysql&gt; SELECT IF(1&gt;2,2,3);
  -&gt; 3
mysql&gt; SELECT IF(1&lt;2,'yes','no');
  -&gt; 'yes'
mysql&gt; SELECT IF(STRCMP('test','test1'),'no','yes');
  -&gt; 'no'
</pre>

<p>Если только один из <em><code>expr2</code></em> или
<em><code>expr3</code></em> явно <code>NULL</code>, тип результата функции
<a href="#function_if"><code>IF()</code></a> будет типом
выражения не-<code>NULL</code>.</p>

<p>Тип возврата по умолчанию <a href="#function_if"><code>IF()
</code></a> (который может иметь значение, когда это сохранено во временную
таблицу), вычислен следующим образом.</p>

<table border="1">
<thead><tr><th scope="col">Выражение</th><th scope="col">Возвращаемое
значение</th></tr></thead>
<tbody><tr><td scope="row"><em><code>expr2</code></em> или
<em><code>expr3</code></em> возвращает строку</td><td>Строка</td></tr>
<tr><td scope="row"><em><code>expr2</code></em> или <em><code>expr3</code>
</em> возвращает значение с плавающей запятой</td>
<td>Значение с плавающей запятой</td></tr>
<tr><td scope="row"><em><code>expr2</code></em> или <em><code>expr3</code>
</em> возвращает целое число</td><td>integer</td></tr></tbody></table>

<p>Если <em><code>expr2</code></em> и <em><code>expr3</code></em> строки,
результат является чувствительным к регистру, если любая строка является
чувствительной к регистру.</p>

<p>Есть также команда <a href="sql.htm#if"><code>IF</code></a>,
которая отличается от функции <a href="#function_if"><code>IF()
</code></a>. См. <a href="sql.htm#if">раздел 14.6.5.2</a>.</p></li>

<li><a name="function_ifnull"></a><p>
<a href="#function_ifnull"><code>IFNULL(<em><code>expr1</code></em>,
<em><code>expr2</code></em>)</code></a></p>

<p>Если <em><code>expr1</code></em> не <code>NULL</code>,
<a href="#function_ifnull"><code>IFNULL()</code></a> вернет
<em><code>expr1</code></em>, иначе <em><code>expr2</code></em>.
<a href="#function_ifnull"><code>IFNULL()</code></a>
возвращает числовое или строковое значение, в зависимости от контекста, в
котором оно используется.
<pre>
mysql&gt; SELECT IFNULL(1,0);
  -&gt; 1
mysql&gt; SELECT IFNULL(NULL,10);
  -&gt; 10
mysql&gt; SELECT IFNULL(1/0,10);
  -&gt; 10
mysql&gt; SELECT IFNULL(1/0,'yes');
  -&gt; 'yes'
</pre>

<p>Значение результата по умолчанию
<a href="#function_ifnull"><code>IFNULL(<em><code>expr1</code></em>,
<em><code>expr2</code></em>)</code></a> более
<span>общее</span> из двух выражений в следующем порядке:
<code>STRING</code>, <a href="types.htm#floating-point-types"><code>REAL
</code></a> или <a href="types.htm#integer-types"><code>INTEGER</code></a>.
Считайте случай таблицы основанным на выражениях или где MySQL должен
внутренне сохранить значение, возвращенное
<a href="#function_ifnull"><code>IFNULL()</code></a>
во временной таблице:
<pre>
mysql&gt; CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;
mysql&gt; DESCRIBE tmp;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| test  | varbinary(4) | NO   |     |         |       |
+-------+--------------+------+-----+---------+-------+
</pre>
<p>В этом примере тип столбца <code>test</code>
<a href="types.htm#binary-varbinary"><code>VARBINARY(4)</code></a>.</p></li>

<li><a name="function_nullif"></a><p>
<a href="#function_nullif"><code>NULLIF(<em><code>expr1</code></em>,
<em><code>expr2</code></em>)</code></a></p>

<p>Вернет <code>NULL</code>, если
<code><em><code>expr1</code></em> = <em><code>expr2</code></em></code> true,
иначе вернет <em><code>expr1</code></em>. Это то же самое, как
<a href="#operator_case"><code>CASE WHEN
<em><code>expr1</code></em> = <em><code>expr2</code></em> THEN NULL ELSE
<em><code>expr1</code></em> END</code></a>.
<pre>
mysql&gt; SELECT NULLIF(1,1);
  -&gt; NULL
mysql&gt; SELECT NULLIF(1,2);
  -&gt; 1
</pre>
<p>Отметьте, что MySQL оценивает <em><code>expr1</code></em>
дважды, если параметры не равны.</p></li></ul>

<h2><a name="string-functions"></a>13.5. Строковые функции</h2>
<a name="idm139965356787968"></a><p><b>Таблица 13.7. Строковые функции</b>
</p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_ascii"><code>ASCII()
</code></a></td><td>Возвращает числовое значение крайнего левого символа
</td></tr>
<tr><td scope="row"><a href="#function_bin"><code>BIN()</code></a>
</td><td>Строка, содержащая двоичное представление числа</td></tr>
<tr><td scope="row"><a href="#function_bit-length"><code>
BIT_LENGTH()</code></a></td><td>Длина параметра в битах</td></tr>
<tr><td scope="row"><a href="#function_char"><code>CHAR()</code></a>
</td><td>Возвратить символ для каждого целого числа</td></tr>
<tr><td scope="row"><a href="#function_char-length"><code>
CHAR_LENGTH()</code></a></td><td>Число символов в параметре</td></tr>
<tr><td scope="row"><a href="#function_character-length"><code>
CHARACTER_LENGTH()</code></a></td><td>Синоним для CHAR_LENGTH()</td></tr>
<tr><td scope="row"><a href="#function_concat"><code>CONCAT()</code>
</a></td><td>Конкатенация строк</td></tr>
<tr><td scope="row"><a href="#function_concat-ws"><code>CONCAT_WS()
</code></a></td><td>Конкатенация строк с сепаратором</td></tr>
<tr><td scope="row"><a href="#function_elt"><code>ELT()</code></a>
</td><td>Строка как номер в индексе</td></tr>
<tr><td scope="row"><a href="#function_export-set"><code>
EXPORT_SET()</code></a></td><td>Возвращает строку таким образом, что для
каждого установленного бита Вы получаете строку on, а для каждого
неустановленного бита строку off</td></tr>
<tr><td scope="row"><a href="#function_field"><code>FIELD()</code>
</a></td><td>Индекс (позиция) первого параметра в последующих параметрах
</td></tr>
<tr><td scope="row"><a href="#function_find-in-set"><code>
FIND_IN_SET()</code></a></td><td>Номер позиции первого параметра в
пределах второго параметра</td></tr>
<tr><td scope="row"><a href="#function_format"><code>FORMAT()</code>
</a></td><td>Число, отформатированное к конкретному
количеству десятичных разрядов</td></tr>
<tr><td scope="row"><a href="#function_from-base64"><code>
FROM_BASE64()</code></a></td><td>Декодирует строку base-64</td></tr>
<tr><td scope="row"><a href="#function_hex"><code>HEX()</code></a>
</td><td>Возвратит шестнадцатеричное представление десятичного
числа или строки</td></tr>
<tr><td scope="row"><a href="#function_insert"><code>INSERT()</code>
</a></td><td>Вставить подстроку в указанной позиции</td></tr>
<tr><td scope="row"><a href="#function_instr"><code>INSTR()</code>
</a></td><td>Индекс первого возникновения подстроки</td></tr>
<tr><td scope="row"><a href="#function_lcase"><code>LCASE()</code>
</a></td><td>Синоним для LOWER()</td></tr>
<tr><td scope="row"><a href="#function_left"><code>LEFT()</code></a>
</td><td>Крайнее левое число символов как определено</td></tr>
<tr><td scope="row"><a href="#function_length"><code>LENGTH()</code>
</a></td><td>Возвратит длину строки в байтах</td></tr>
<tr><td scope="row"><a href="#operator_like"><code>LIKE</code></a>
</td><td>Простое соответствие образцу</td></tr>
<tr><td scope="row"><a href="#function_load-file"><code>LOAD_FILE()
</code></a></td><td>Загрузить названный файл</td></tr>
<tr><td scope="row"><a href="#function_locate"><code>LOCATE()</code>
</a></td><td>Возвратит позицию первого вхождения подстроки</td></tr>
<tr><td scope="row"><a href="#function_lower"><code>LOWER()</code>
</a></td><td>Возвратит параметр в нижнем регистре</td></tr>
<tr><td scope="row"><a href="#function_lpad"><code>LPAD()</code></a>
</td><td>Возвратит строковый параметр, дополненный слева указанной строкой
</td></tr>
<tr><td scope="row"><a href="#function_ltrim"><code>LTRIM()</code>
</a></td><td>Удалить ведущие пробелы</td></tr>
<tr><td scope="row"><a href="#function_make-set"><code>MAKE_SET()
</code></a></td><td>Вернет ряд отделенных запятыми строк, у которых есть
соответствующий бит в наборе битов</td></tr>
<tr><td scope="row"><a href="#function_match"><code>MATCH</code></a>
</td><td>Полнотекстовый поиск</td></tr>
<tr><td scope="row"><a href="#function_mid"><code>MID()</code></a>
</td><td>Возвратит подстроку, начиная с указанной позиции</td></tr>
<tr><td scope="row"><a href="#operator_not-like"><code>NOT LIKE
</code></a></td><td>Отрицание простого соответствия образца</td></tr>
<tr><td scope="row"><a href="#operator_not-regexp"><code>NOT REGEXP
</code></a></td><td>Отрицание REGEXP</td></tr>
<tr><td scope="row"><a href="#function_oct"><code>OCT()</code></a>
</td><td>Возвратит строку, содержащую октальное представление числа</td></tr>
<tr><td scope="row"><a href="#function_octet-length"><code>
OCTET_LENGTH()</code></a></td><td>Синоним для LENGTH()</td></tr>
<tr><td scope="row"><a href="#function_ord"><code>ORD()</code></a>
</td><td>Символьный код для крайнего левого символа параметра</td></tr>
<tr><td scope="row"><a href="#function_position"><code>POSITION()
</code></a></td><td>Синоним для LOCATE()</td></tr>
<tr><td scope="row"><a href="#function_quote"><code>QUOTE()</code>
</a></td><td>Экранирует параметр для использования в запросе SQL</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>REGEXP</code>
</a></td><td>Соответствие образца, используя регулярные выражения</td></tr>
<tr><td scope="row"><a href="#function_repeat"><code>REPEAT()</code>
</a></td><td>Повторит строку конкретное количество раз</td></tr>
<tr><td scope="row"><a href="#function_replace"><code>REPLACE()
</code></a></td><td>Заменяет указанную строку</td></tr>
<tr><td scope="row"><a href="#function_reverse"><code>REVERSE()
</code></a></td><td>Перевернуть строку</td></tr>
<tr><td scope="row"><a href="#function_right"><code>RIGHT()</code>
</a></td><td>Самый правый символ</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>RLIKE</code>
</a></td><td>Синоним для REGEXP</td></tr>
<tr><td scope="row"><a href="#function_rpad"><code>RPAD()</code></a>
</td><td>Добавляет строку конкретное количество раз</td></tr>
<tr><td scope="row"><a href="#function_rtrim"><code>RTRIM()</code>
</a></td><td>Удалит конечные пробелы</td></tr>
<tr><td scope="row"><a href="#function_soundex"><code>SOUNDEX()
</code></a></td><td>Строка soundex</td></tr>
<tr><td scope="row"><a href="#operator_sounds-like"><code>SOUNDS
LIKE</code></a></td><td>Сравнивает звуки</td></tr>
<tr><td scope="row"><a href="#function_space"><code>SPACE()</code>
</a></td><td>Возвратит строку из конкретного количества пробелов</td></tr>
<tr><td scope="row"><a href="#function_strcmp"><code>STRCMP()</code>
</a></td><td>Сравнивает две строки</td></tr>
<tr><td scope="row"><a href="#function_substr"><code>SUBSTR()</code>
</a></td><td>Вернет подстроку как определено</td></tr>
<tr><td scope="row"><a href="#function_substring"><code>SUBSTRING()
</code></a></td><td>Вернет подстроку как определено</td></tr>
<tr><td scope="row"><a href="#function_substring-index"><code>
SUBSTRING_INDEX()</code></a></td><td>Вернет подстроку из строки
перед конкретным количеством разделителей</td></tr>
<tr><td scope="row"><a href="#function_to-base64"><code>TO_BASE64()
</code></a></td><td>Конвертирует параметр в строку base-64</td></tr>
<tr><td scope="row"><a href="#function_trim"><code>TRIM()</code></a>
</td><td>Удаляет начальные и конечные пробелы</td></tr>
<tr><td scope="row"><a href="#function_ucase"><code>UCASE()</code>
</a></td><td>Синоним для UPPER()</td></tr>
<tr><td scope="row"><a href="#function_unhex"><code>UNHEX()</code>
</a></td><td>Строка с hex-представлением числа</td></tr>
<tr><td scope="row"><a href="#function_upper"><code>UPPER()</code>
</a></td><td>Конвертирует в верхний регистр</td></tr>
<tr><td scope="row"><a href="#function_weight-string"><code>
WEIGHT_STRING()</code></a></td><td>Возвратит строку веса для строки
</td></tr></tbody></table>

<p>Функции, возвращающие строки, вернут <code>NULL</code>, если длина
результата больше, чем значение системной переменной
<a href="server.htm#sysvar_max_allowed_packet"><code>max_allowed_packet
</code></a>. См. <a href="server.htm#server-configuration">раздел 6.1.1</a>.
</p>

<p>Для функций, которые воздействуют на строковые позиции, первая позиция 1.
</p>
<p>Для функций, которые берут параметры длины, параметры нецелого числа
округлены к самому близкому целому числу.</p>

<ul><li><a name="function_ascii"></a><p>
<a href="#function_ascii"><code>ASCII(<em><code>str</code></em>)
</code></a></p>
<p>Возвращает числовое значение крайнего левого символа строки <em><code>str
</code></em>. Возвращает <code>0</code>, если <em><code>str</code></em>
пустая строка. Возвращает <code>NULL</code>, если <em><code>str</code></em>
<code>NULL</code>. <a href="#function_ascii"><code>ASCII()</code>
</a> работает для 8-битовых символов.
<pre>
mysql&gt; SELECT ASCII('2');
  -&gt; 50
mysql&gt; SELECT ASCII(2);
  -&gt; 50
mysql&gt; SELECT ASCII('dx');
  -&gt; 100
</pre></li>

<li><a name="function_bin"></a><p>
<a href="#function_bin"><code>BIN(<em><code>N</code></em>)
</code></a></p>
<p>Возвращает строковое представление двоичного значения
<em><code>N</code></em>, где <em><code>N</code></em> число типа longlong
(<a href="types.htm#integer-types"><code>BIGINT</code></a>).
Это эквивалентно <a href="#function_conv"><code>CONV(<em><code>N
</code></em>, 10, 2)</code></a>. Вернет <code>NULL</code>, если
<em><code>N</code></em> <code>NULL</code>.
<pre>
mysql&gt; SELECT BIN(12);
    -&gt; '1100'
</pre></li>

<li><a name="function_bit-length"></a><p>
<a href="#function_bit-length"><code>BIT_LENGTH(<em><code>str</code>
</em>)</code></a></p>

<p>Возвращает длину строки <em><code>str</code></em> в битах.
<pre>
mysql&gt; SELECT BIT_LENGTH('text');
    -&gt; 32
</pre></li>

<li><a name="function_char"></a><p>
<a href="#function_char"><code>CHAR(<em><code>N</code></em>,...
[USING <em><code>charset_name</code></em>])</code></a></p>

<p><a href="#function_char"><code>CHAR()</code></a>
интерпретирует каждый параметр <em><code>N</code></em> как integer
и возвращает строку, состоящую из символов, данных кодовыми обозначениями тех
целых чисел. <code>NULL</code> пропущены.
<pre>
mysql&gt; SELECT CHAR(77,121,83,81,'76');
  -&gt; 'MySQL'
mysql&gt; SELECT CHAR(77,77.3,'77.3');
  -&gt; 'MMM'
</pre>

<p>Параметры <a href="#function_char"><code>CHAR()</code></a>,
больше чем 255, преобразованы в многобайтные результаты. Например,
<a href="#function_char"><code>CHAR(256)</code></a> аналог
<a href="#function_char"><code>CHAR(1,0)</code></a>, а
<a href="#function_char"><code>CHAR(256*256)</code></a> аналог
<a href="#function_char"><code>CHAR(1,0,0)</code></a>:
<pre>
mysql&gt; SELECT HEX(CHAR(1,0)), HEX(CHAR(256));
+----------------+----------------+
| HEX(CHAR(1,0)) | HEX(CHAR(256)) |
+----------------+----------------+
| 0100           | 0100           |
+----------------+----------------+

mysql&gt; SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));
+------------------+--------------------+
| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |
+------------------+--------------------+
| 010000           | 010000             |
+------------------+--------------------+
</pre>

<p>По умолчанию <a href="#function_char"><code>CHAR()</code></a>
возвращает двоичную строку. Чтобы произвести строку в заданном наборе
символов, используйте дополнительное определение <code>USING</code>:
<pre>
mysql&gt; SELECT CHARSET(CHAR(X'65')), CHARSET(CHAR(X'65' USING utf8));
+----------------------+---------------------------------+
| CHARSET(CHAR(X'65')) | CHARSET(CHAR(X'65' USING utf8)) |
+----------------------+---------------------------------+
| binary               | utf8                            |
+----------------------+---------------------------------+
</pre>

<p>Если <code>USING</code> задан, а строка результата незаконна для данного
набора символов, выдается предупреждение. Кроме того, если строгий режим SQL
включен, результатом <a href="#function_char"><code>CHAR()</code>
</a> будет <code>NULL</code>.</p></li>

<li><a name="function_char-length"></a><p>
<a href="#function_char-length"><code>CHAR_LENGTH(<em><code>str
</code></em>)</code></a></p>
<p>Возвращает длину строки <em><code>str</code></em> в символах.
Мультибайтный символ считается единственным символом. Это означает, что для
строки, содержащей пять 2-байтовых символов,
<a href="#function_length"><code>LENGTH()</code></a> вернет
<code>10</code>, а <a href="#function_char-length"><code>
CHAR_LENGTH()</code></a> <code>5</code>.</p></li>

<li><a name="function_character-length"></a><p>
<a href="#function_character-length"><code>CHARACTER_LENGTH(<em>
<code>str</code></em>)</code></a></p>

<p><a href="#function_character-length"><code>CHARACTER_LENGTH()
</code></a> синоним для <a href="#function_char-length"><code>
CHAR_LENGTH()</code></a>.</p></li>

<li><a name="function_concat"></a><p>
<a href="#function_concat"><code>CONCAT(<em><code>str1</code></em>,
<em><code>str2</code></em>,...)</code></a></p>

<p>Возвращает строку, которая следует из связывания параметров. Может иметь
один или более параметров. Если все параметры недвоичные строки, результат
недвоичная строка. Если параметры включают какие-либо двоичные строки,
результат двоичная строка. Числовой параметр преобразован в его эквивалентную
недвоичную строковую форму.</p>

<p><a href="#function_concat"><code>CONCAT()</code></a> вернет
<code>NULL</code>, если какой-либо параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT CONCAT('My', 'S', 'QL');
    -&gt; 'MySQL'
mysql&gt; SELECT CONCAT('My', NULL, 'QL');
    -&gt; NULL
mysql&gt; SELECT CONCAT(14.3);
    -&gt; '14.3'
</pre>

<p>Для заключенных в кавычки строк связь может быть выполнена, помещая строки
рядом друг с другом:
<pre>
mysql&gt; SELECT 'My' 'S' 'QL';
    -&gt; 'MySQL'
</pre></li>

<li><a name="function_concat-ws"></a><p>
<a href="#function_concat-ws"><code>CONCAT_WS(<em><code>separator
</code></em>,<em><code>str1</code></em>,<em><code>str2</code></em>,...)
</code></a></p>

<p><a href="#function_concat-ws"><code>CONCAT_WS()</code></a>
специальная форма <a href="#function_concat"><code>CONCAT()</code>
</a>. Первый параметр разделитель для остальной части параметров. Разделитель
добавлен между строками, которые будут связаны. Разделитель может быть
строкой. Если разделитель <code>NULL</code>, результат <code>NULL</code>.
<pre>
mysql&gt; SELECT CONCAT_WS(',','First name','Second name','Last Name');
    -&gt; 'First name,Second name,Last Name'
mysql&gt; SELECT CONCAT_WS(',','First name',NULL,'Last Name');
    -&gt; 'First name,Last Name'
</pre>

<p><a href="#function_concat-ws"><code>CONCAT_WS()</code></a>
не пропускает пустые строки. Однако, это действительно пропускает любой
<code>NULL</code> после параметра разделителя.</p></li>

<li><a name="function_elt"></a><p>
<a href="#function_elt"><code>ELT(<em><code>N</code></em>,
<em><code>str1</code></em>,<em><code>str2</code></em>,
<em><code>str3</code></em>,...)</code></a></p>

<p><a href="#function_elt"><code>ELT()</code></a> вернет
<em><code>N</code></em>-ый списка строк: <em><code>str1</code></em>, если
<em><code>N</code></em> = <code>1</code>,
<em><code>str2</code></em>, если
<em><code>N</code></em> = <code>2</code> и т.д. <code>NULL</code>, если
<em><code>N</code></em> меньше <code>1</code> или больше, чем число
параметров. <a href="#function_elt"><code>ELT()</code></a>
дополнение <a href="#function_field"><code>FIELD()</code></a>.
<pre>
mysql&gt; SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');
  -&gt; 'ej'
mysql&gt; SELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');
  -&gt; 'foo'
</pre></li>

<li><a name="function_export-set"></a><p>
<a href="#function_export-set"><code>EXPORT_SET(<em><code>bits
</code></em>,<em><code>on</code></em>,<em><code>off</code></em>[,
<em><code>separator</code></em>[,<em><code>number_of_bits</code></em>]])
</code></a></p>

<p>Возвращает строку, где для каждого установленного бита в значении
<em><code>bits</code></em> будет значение <em><code>on</code></em>, а для
каждого не установленного <em><code>off</code></em>.
Биты в <em><code>bits</code></em> исследованы справа налево (от младшего
разряда до старшего). Строки добавлены к результату слева направо и отделены
параметром <em><code>separator</code></em> (значение по умолчанию: символ
запятой <code>,</code>). Числом исследуемых битов задано
<em><code>number_of_bits</code></em>, по умолчанию 64, если не определено.
<em><code>number_of_bits</code></em> тихо усечено до 64, если больше, чем 64.
Это обработано как целое число без знака, таким образом, значение
-1 является эффективно тем же самым, что и 64.
<pre>
mysql&gt; SELECT EXPORT_SET(5,'Y','N',',',4);
    -&gt; 'Y,N,Y,N'
mysql&gt; SELECT EXPORT_SET(6,'1','0',',',10);
    -&gt; '0,1,1,0,0,0,0,0,0,0'
</pre></li>

<li><a name="function_field"></a><p>
<a href="#function_field"><code>FIELD(<em><code>str</code></em>,
<em><code>str1</code></em>,<em><code>str2</code></em>,<em><code>str3</code>
</em>,...)</code></a></p>

<p>Возвращает индекс (позицию) <em><code>str</code></em>
в списке <em><code>str1</code></em>, <em><code>str2</code></em>,
<em><code>str3</code></em>, <code>...</code>. <code>0</code>, если
<em><code>str</code></em> не найдена.</p>

<p>Если все параметры <a href="#function_field"><code>FIELD()</code>
</a> строки, все параметры сравнены как строки. Если все параметры числа, они
сравнены как числа. Иначе, параметры сравнены как double.</p>

<p>Если <em><code>str</code></em> <code>NULL</code>, вернет <code>0</code>
потому, что <code>NULL</code> подводит сравнение равенства с любым значением.
<a href="#function_field"><code>FIELD()</code></a> дополняет
<a href="#function_elt"><code>ELT()</code></a>.
<pre>
mysql&gt; SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo');
    -&gt; 2
mysql&gt; SELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo');
    -&gt; 0
</pre></li>

<li><a name="function_find-in-set"></a><p>
<a href="#function_find-in-set"><code>FIND_IN_SET(<em><code>str
</code></em>,<em><code>strlist</code></em>)</code></a></p>

<p>Возвращает значение в диапазоне от 1 до <em><code>N</code></em>,
если строка <em><code>str</code></em> находится в строковом списке
<em><code>strlist</code></em> из <em><code>N</code></em> подстрок.
Строковый список это строка, составленная из подстрок, отделенных
символом <code>,</code>. Если первый параметр постоянная строка, а вторым
является столбец типа <a href="types.htm#set"><code>SET</code></a>, функция
<a href="#function_find-in-set"><code>FIND_IN_SET()</code></a>
оптимизирована, чтобы использовать разрядную арифметику. Возвращает
<code>0</code>, если <em><code>str</code></em> не в <em><code>strlist</code>
</em> или <em><code>strlist</code></em> пустая строка. Возвращает
<code>NULL</code>, если любой параметр <code>NULL</code>. Эта функция не
работает должным образом, если первый параметр содержит запятую
(<code>,</code>).
<pre>
mysql&gt; SELECT FIND_IN_SET('b','a,b,c,d');
  -&gt; 2
</pre></li>

<li><a name="function_format"></a><p>
<a href="#function_format"><code>FORMAT(<em><code>X</code></em>,
<em><code>D</code></em>[,<em><code>locale</code></em>])</code></a></p>

<p>Форматирует число <em><code>X</code></em> как <code>'#,###,###.##'</code>,
округляя к <em><code>D</code></em> десятичных разрядов и возвращая результат
как строку. Если <em><code>D</code></em> <code>0</code>, у результата нет
никакой десятичной запятой или дробной части.</p>

<p>Дополнительный третий параметр позволяет определить локаль, из которой
брать символы для десятичной запятой, разделителя тысяч и групп. Допустимые
значения такие же, как и для системной переменной
<a href="server.htm#sysvar_lc_time_names"><code>lc_time_names</code></a> (см.
<a href="global.htm#locale-support">раздел 11.7</a>). Если локаль не
определена, значение по умолчанию <code>'en_US'</code>.
<pre>
mysql&gt; SELECT FORMAT(12332.123456, 4);
  -&gt; '12,332.1235'
mysql&gt; SELECT FORMAT(12332.1,4);
  -&gt; '12,332.1000'
mysql&gt; SELECT FORMAT(12332.2,0);
  -&gt; '12,332'
mysql&gt; SELECT FORMAT(12332.2,2,'de_DE');
  -&gt; '12.332,20'
</pre></li>

<li><a name="function_from-base64"></a><p>
<a href="#function_from-base64"><code>FROM_BASE64(<em><code>str
</code></em>)</code></a></p>

<p>Берет строку, закодированную base-64 (например, с помощью
<a href="#function_to-base64"><code>TO_BASE64()</code></a>)
и возвращает расшифрованный результат как двоичную строку. Результат
<code>NULL</code>, если параметр <code>NULL</code> или не допустимая строка
base-64. См. описание <a href="#function_to-base64"><code>
TO_BASE64()</code></a>.
<pre>
mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));
    -&gt; 'JWJj', 'abc'
</pre></li>

<li><a name="function_hex"></a><p>
<a href="#function_hex"><code>HEX(<em><code>str</code></em>)</code>
</a>, <a href="#function_hex"><code>HEX(<em><code>N</code></em>)
</code></a></p>

<p>Для строкового параметра <em><code>str</code></em>,
<a href="#function_hex"><code>HEX()</code></a> возвращает
шестнадцатеричное строковое представление <em><code>str</code></em>, где
каждый байт каждого символа в <em><code>str</code></em> преобразован в две
шестнадцатеричных цифры. Мультибайтные символы поэтому становятся больше, чем
двумя цифрами. Инверсия этой работы выполнена функцией
<a href="#function_unhex"><code>UNHEX()</code></a>.</p>

<p>Для числового параметра <em><code>N</code></em>,
<a href="#function_hex"><code>HEX()</code></a>
возвращает шестнадцатеричное строковое представление значения
<em><code>N</code></em> как число longlong
(<a href="types.htm#integer-types"><code>BIGINT</code></a>). Это эквивалентно
<a href="#function_conv"><code>CONV(<em><code>N</code></em>,10,16)
</code></a>. Инверсия этой работы выполнена
<a href="#function_conv"><code>CONV(HEX(<em><code>N</code></em>),
16,10)</code></a>.
<pre>
mysql&gt; SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));
    -&gt; 'abc', 616263, 'abc'
mysql&gt; SELECT HEX(255), CONV(HEX(255),16,10);
    -&gt; 'FF', 255
</pre></li>

<li><a name="function_insert"></a><p>
<a href="#function_insert"><code>INSERT(<em><code>str</code></em>,
<em><code>pos</code></em>,<em><code>len</code></em>,<em><code>newstr</code>
</em>)</code></a></p>

<p>Возвращает строку <em><code>str</code></em> с подстрокой, начинающейся в
позиции <em><code>pos</code></em> и <em><code>len</code></em> символов
длиной замененных строкой <em><code>newstr</code></em>. Возвращает
оригинальную строку, если <em><code>pos</code></em> не в пределах длины
строки. Заменяет остаток строки с позиции <em><code>pos</code></em>, если
<em><code>len</code></em> не в пределах длины остальной части строки.
Возвращает <code>NULL</code>, если какой-либо параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT INSERT('Quadratic', 3, 4, 'What');
    -&gt; 'QuWhattic'
mysql&gt; SELECT INSERT('Quadratic', -1, 4, 'What');
    -&gt; 'Quadratic'
mysql&gt; SELECT INSERT('Quadratic', 3, 100, 'What');
    -&gt; 'QuWhat'
</pre>
<p>Нормально работает с мультибайтными символами.</p></li>

<li><a name="function_instr"></a><p>
<a href="#function_instr"><code>INSTR(<em><code>str</code></em>,
<em><code>substr</code></em>)</code></a></p>

<p>Возвращает позицию первого возникновения подстроки
<em><code>substr</code></em> в строке <em><code>str</code></em>. Это то же
самое, что и форма с двумя параметрами
<a href="#function_locate"><code>LOCATE()</code></a>,
за исключением того, что порядок параметров полностью изменен.
<pre>
mysql&gt; SELECT INSTR('foobarbar', 'bar');
    -&gt; 4
mysql&gt; SELECT INSTR('xbar', 'foobar');
    -&gt; 0
</pre>
<p>Нормально работает с мультибайтными символами и является чувствительной к
регистру, только если по крайней мере один параметр двоичная строка.</p></li>

<li><a name="function_lcase"></a><p>
<a href="#function_lcase"><code>LCASE(<em><code>str</code></em>)
</code></a></p>
<p><a href="#function_lcase"><code>LCASE()</code></a> синоним для
<a href="#function_lower"><code>LOWER()</code></a>.</p>

<p><code>LCASE()</code> используемая в представлении переписана как
<code>LOWER()</code> при сохранении определения представления (Bug #12844279).
</p></li>

<li><a name="function_left"></a><p>
<a href="#function_left"><code>LEFT(<em><code>str</code></em>,
<em><code>len</code></em>)</code></a></p>

<p>Возвращает крайние левые <em><code>len</code></em> символы строки
<em><code>str</code></em> или <code>NULL</code>, если
какой-либо параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT LEFT('foobarbar', 5);
    -&gt; 'fooba'
</pre>
<p>Нормально работает с мультибайтными символами.</p></li>

<li><a name="function_length"></a><p>
<a href="#function_length"><code>LENGTH(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает длину строки <em><code>str</code></em> в байтах.
Мультибайтный символ считается несколькими байтами. Это означает, что для
строки, содержащей пять 2-байтовых символов,
<a href="#function_length"><code>LENGTH()</code></a> вернет
<code>10</code>, а
<a href="#function_char-length"><code>CHAR_LENGTH()</code></a>
<code>5</code>.
<pre>
mysql&gt; SELECT LENGTH('text');
    -&gt; 4
</pre>

<p>Пространственная функция <code>Length()</code> OpenGIS называется
<a href="#function_st-length"><code>ST_Length()</code></a> в MySQL.
</p></li>

<li><a name="function_load-file"></a><p>
<a href="#function_load-file"><code>LOAD_FILE(<em><code>file_name
</code></em>)</code></a></p>

<p>Читает файл и возвращает содержание файла как строку. Чтобы использовать
эту функцию, файл должен быть расположен на хосте сервера, Вы должны
определить полный путь к файлу и иметь привилегию
<a href="security.html#priv_file"><code>FILE</code></a>. Файл должен быть
читаемым всеми и его размер меньше, чем
<a href="server.htm#sysvar_max_allowed_packet"><code>max_allowed_packet
</code></a> байт. Если системная переменная
<a href="server.htm#sysvar_secure_file_priv"><code>secure_file_priv</code>
</a> установлена в непустое имя каталога, файл, который будет загружен,
должен быть расположен в том каталоге.</p>

<p>Если файл не существует или не может быть считан, потому что одно из
предыдущих условий не удовлетворено, функция вернет <code>NULL</code>.</p>
<p>Системная переменная <a href="server.htm#sysvar_character_set_filesystem">
<code>character_set_filesystem</code></a> управляет интерпретацией имен
файлов, которые даны как буквальные строки.
<pre>
mysql&gt; UPDATE t SET blob_col=LOAD_FILE('/tmp/picture') WHERE id=1;
</pre></li>

<li><a name="function_locate"></a><p>
<a href="#function_locate"><code>LOCATE(<em><code>substr</code>
</em>,<em><code>str</code></em>)</code></a>,
<a href="#function_locate"><code>LOCATE(<em><code>substr</code>
</em>,<em><code>str</code></em>,<em><code>pos</code></em>)</code></a></p>

<p>Первый синтаксис возвращает позицию первого возникновения подстроки
<em><code>substr</code></em> в <em><code>str</code></em>.
Второй синтаксис возвращает позицию первого возникновения подстроки
<em><code>substr</code></em> в <em><code>str</code></em>, начиная с позиции
<em><code>pos</code></em>. Вернет <code>0</code>, если
<em><code>substr</code></em> нет в <em><code>str</code></em>. Вернет
<code>NULL</code>, если какой-либо параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT LOCATE('bar', 'foobarbar');
  -&gt; 4
mysql&gt; SELECT LOCATE('xbar', 'foobar');
  -&gt; 0
mysql&gt; SELECT LOCATE('bar', 'foobarbar', 5);
  -&gt; 7
</pre>
<p>Функция является чувствительной к регистру, только если по крайней мере
один параметр двоичная строка.</p></li>

<li><a name="function_lower"></a><p>
<a href="#function_lower"><code>LOWER(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку <em><code>str</code></em> со всеми символами,
измененными на нижний регистр согласно текущему отображению наборов символов.
Значение по умолчанию <code>latin1</code> (cp1252 West European).
<pre>
mysql&gt; SELECT LOWER('QUADRATICALLY');
  -&gt; 'quadratically'
</pre>

<p><a href="#function_lower"><code>LOWER()</code></a> (и
<a href="#function_upper"><code>UPPER()</code></a>)
неэффективны, когда применяются к двоичным строкам
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> и
<a href="types.htm#blob"><code>BLOB</code></a>). Чтобы выполнить
преобразование в нижний регистр для них, сначала преобразуйте
такую строку в недвоичную:
<pre>
mysql&gt; SET @str = BINARY 'New York';
mysql&gt; SELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));
+-------------+-----------------------------------+
| LOWER(@str) | LOWER(CONVERT(@str USING latin1)) |
+-------------+-----------------------------------+
| New York    | new york                          |
+-------------+-----------------------------------+
</pre>

<p>Для сопоставлений наборов символов Unicode
<a href="#function_lower"><code>LOWER()</code></a> и
<a href="#function_upper"><code>UPPER()</code></a>
работают согласно Unicode Collation Algorithm (UCA) в версии для имени
сопоставления, если оно задано, и UCA 4.0.0, если версия не указана.
Например, <code>utf8mb4_0900_ai_ci</code> и <code>utf8_unicode_520_ci</code>
работают согласно UCA 9.0.0 и 5.2.0, соответственно, тогда как
<code>utf8_unicode_ci</code> работает по UCA 4.0.0. См.
<a href="global.htm#charset-unicode-sets">раздел 11.1.10.1</a>.</p>
<p><code>LCASE()</code>, используемая в пределах представлений,
переписана как <code>LOWER()</code>.</p></li>

<li><a name="function_lpad"></a><p>
<a href="#function_lpad"><code>LPAD(<em><code>str</code></em>,
<em><code>len</code></em>,<em><code>padstr</code></em>)</code></a></p>

<p>Возвращает строку <em><code>str</code></em>, доплненную слева строкой
<em><code>padstr</code></em> до длины <em><code>len</code></em> символов.
Если <em><code>str</code></em> длинней, чем
<em><code>len</code></em>, возвращаемое значение сокращено до
<em><code>len</code></em> символов.
<pre>
mysql&gt; SELECT LPAD('hi',4,'??');
  -&gt; '??hi'
mysql&gt; SELECT LPAD('hi',1,'??');
  -&gt; 'h'
</pre></li>

<li><a name="function_ltrim"></a><p>
<a href="#function_ltrim"><code>LTRIM(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку <em><code>str</code></em> из которой
удалены лидирующие пробелы.
<pre>
mysql&gt; SELECT LTRIM('  barbar');
    -&gt; 'barbar'
</pre></li>

<li><a name="function_make-set"></a>
<p><a href="#function_make-set"><code>MAKE_SET(<em><code>bits</code>
</em>, <em><code>str1</code></em>, <em><code>str2</code></em>, ...)
</code></a></p>

<p>Возвращает значение набора (строка, содержащая подстроки, отделенные
<code>,</code>) состоящее из строк, у которых есть соответствующий бит в
<em><code>bits</code></em>. <em><code>str1</code></em> соответствует биту 0,
<em><code>str2</code></em> 1 и т.д. Значения <code>NULL</code> в
<em><code>str1</code></em>, <em><code>str2</code></em>, <code>...</code>
не добавлены к результату.
<pre>
mysql&gt; SELECT MAKE_SET(1,'a','b','c');
  -&gt; 'a'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice','world');
  -&gt; 'hello,world'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');
  -&gt; 'hello'
mysql&gt; SELECT MAKE_SET(0,'a','b','c');
  -&gt; ''
</pre></li>

<li><a name="function_mid"></a><p>
<a href="#function_mid"><code>MID(<em><code>str</code></em>,
<em><code>pos</code></em>,<em><code>len</code></em>)</code></a></p>

<p><a href="#function_mid"><code>MID(<em><code>str</code></em>,
<em><code>pos</code></em>,<em><code>len</code></em>)</code></a> синоним для
<a href="#function_substring"><code>SUBSTRING(<em><code>str</code>
</em>,<em><code>pos</code></em>,<em><code>len</code></em>)</code></a>.</li>

<li><a name="function_oct"></a><p>
<a href="#function_oct"><code>OCT(<em><code>N</code></em>)</code>
</a></p>

<p>Возвращает строковое представление октального значения
<em><code>N</code></em>, где <em><code>N</code></em> число longlong
(<a href="types.htm#integer-types"><code>BIGINT</code></a>).
Это эквивалентно <a href="#function_conv"><code>CONV(<em>
<code>N</code></em>,10,8)</code></a>. Вернет <code>NULL</code>, если
<em><code>N</code></em> <code>NULL</code>.
<pre>
mysql&gt; SELECT OCT(12);
  -&gt; '14'
</pre></li>

<li><a name="function_octet-length"></a><p>
<a href="#function_octet-length"><code>OCTET_LENGTH(<em><code>str
</code></em>)</code></a></p>

<p><a href="#function_octet-length"><code>OCTET_LENGTH()</code></a>
синоним для <a href="#function_length"><code>LENGTH()</code></a>.
</p></li>

<li><a name="function_ord"></a><p>
<a href="#function_ord"><code>ORD(<em><code>str</code></em>)</code>
</a></p>

<p>Если крайний левый символ строки <em><code>str</code></em> мультибайтный,
возвращает код для этого символа, вычисленный из числовых значений его
составляющих байтов, используя эту формулу:
<pre>
  (1st byte code)
+ (2nd byte code * 256)
+ (3rd byte code * 256<sup>2</sup>) ...
</pre>

<p>Если крайний левый символ однобайтный,
<a href="#function_ord"><code>ORD()</code></a> возвращает то же
самое значение, как функция
<a href="#function_ascii"><code>ASCII()</code></a>.
<pre>
mysql&gt; SELECT ORD('2');
    -&gt; 50
</pre></li>

<li><a name="function_position"></a><p>
<a href="#function_position"><code>POSITION(<em><code>substr</code>
</em> IN <em><code>str</code></em>)</code></a>
</p>

<p><a href="#function_position"><code>POSITION(<em><code>substr
</code></em> IN <em><code>str</code></em>)</code></a> синоним для
<a href="#function_locate"><code>LOCATE(<em><code>substr</code>
</em>,<em><code>str</code></em>)</code></a>.</p></li>

<li><a name="function_quote"></a><p>
<a href="#function_quote"><code>QUOTE(<em><code>str</code></em>)
</code></a></p>

<p>Заключает строку в кавычки, чтобы привести к результату, который может
использоваться в качестве должным образом составленного значения данных в
запросе SQL. Строка заключается в одинарные кавычки, каждый экземпляр
обратного слэша (<code>\</code>), одинарной кавычки
(<code>'</code>), ASCII <code>NUL</code> и Control+Z предваряются
наклонной чертой влево. Если параметр
<code>NULL</code>, возвращаемое значение слово <span>NULL</span>
без одинарных кавычек.
<pre>
mysql&gt; SELECT QUOTE('Don\'t!');
  -&gt; 'Don\'t!'
mysql&gt; SELECT QUOTE(NULL);
  -&gt; NULL
</pre>

<p>Для сравнения, см. правила заключения в кавычки для буквальных строк и в
C API в разделах <a href="lang.htm#string-literals">10.1.1</a> и
<a href="connect.htm#mysql-real-escape-string-quote">25.8.7.56</a>.</p></li>

<li><a name="function_repeat"></a><p>
<a href="#function_repeat"><code>REPEAT(<em><code>str</code></em>,
<em><code>count</code></em>)</code></a></p>

<p>Возвращает строку, состоящую из строки
<em><code>str</code></em>, повторенной
<em><code>count</code></em> раз. Если
<em><code>count</code></em> меньше 1, вернется пустая строка. Вернет
<code>NULL</code>, если <em><code>str</code></em> или
<em><code>count</code></em> <code>NULL</code>.
<pre>
mysql&gt; SELECT REPEAT('MySQL', 3);
  -&gt; 'MySQLMySQLMySQL'
</pre></li>

<li><a name="function_replace"></a><p>
<a href="#function_replace"><code>REPLACE(<em><code>str</code></em>,
<em><code>from_str</code></em>,<em><code>to_str</code></em>)</code></a></p>

<p>Возвращает строку <em><code>str</code></em>, в которой все вхождения
<em><code>from_str</code></em> заменены строкой <em><code>to_str</code></em>.
<a href="#function_replace"><code>REPLACE()</code></a> выполняет
чувствительное к регистру соответствие, ища <em><code>from_str</code></em>.
<pre>
mysql&gt; SELECT REPLACE('www.mysql.com', 'w', 'Ww');
  -&gt; 'WwWwWw.mysql.com'
</pre></li>

<li><a name="function_reverse"></a><p>
<a href="#function_reverse"><code>REVERSE(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку <em><code>str</code></em>, у которой
порядок символов перевернут.
<pre>
mysql&gt; SELECT REVERSE('abc');
  -&gt; 'cba'
</pre></li>

<li><a name="function_right"></a><p>
<a href="#function_right"><code>RIGHT(<em><code>str</code></em>,
<em><code>len</code></em>)</code></a></p>

<p>Возвращает самые правые <em><code>len</code></em> символы строки
characters from the string <em><code>str</code></em> или <code>NULL</code>,
если какой-либо параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT RIGHT('foobarbar', 4);
  -&gt; 'rbar'
</pre></li>

<li><a name="function_rpad"></a><p>
<a href="#function_rpad"><code>RPAD(<em><code>str</code></em>,
<em><code>len</code></em>,<em><code>padstr</code></em>)</code></a></p>

<p>Возвращает строку <em><code>str</code></em>, к которой справа добавлена
<em><code>padstr</code></em> до длины в <em><code>len</code></em> символов.
Если <em><code>str</code></em> длинней <em><code>len</code></em>,
возвращаемое значение сокращено до <em><code>len</code></em> символов.
<pre>
mysql&gt; SELECT RPAD('hi',5,'?');
  -&gt; 'hi???'
mysql&gt; SELECT RPAD('hi',1,'?');
  -&gt; 'h'
</pre></li>

<li><a name="function_rtrim"></a><p>
<a href="#function_rtrim"><code>RTRIM(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку <em><code>str</code></em>
с удаленными символами конечного пробела.
<pre>
mysql&gt; SELECT RTRIM('barbar   ');
  -&gt; 'barbar'
</pre></li>

<li><a name="function_soundex"></a><p>
<a href="#function_soundex"><code>SOUNDEX(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку soundex из <em><code>str</code></em>.
У двух строк, которые кажутся почти теми же самыми, должны быть идентичные
строки soundex. Стандарт soundex строка имеет длину 4 байта, но функция
<a href="#function_soundex"><code>SOUNDEX()</code></a>
возвращает произвольно длинную строку. Вы можете использовать
<a href="#function_substring"><code>SUBSTRING()</code></a>
на результате, чтобы получить стандартную soundex-строку. Все небуквенные
символы в <em><code>str</code></em> проигнорированы. Все международные
буквенные символы вне диапазона A-Z обработаны как гласные.</p>

<p>Используя <a href="#function_soundex"><code>SOUNDEX()</code></a>,
Вы должны знать о следующих ограничениях:</p>

<ul><li><p>Эта функция, как в настоящее время осуществлено, предназначена,
чтобы работать хорошо со строками, которые только на английском языке.
Строки на других языках, возможно, не приводят к надежным результатам.</li>

<li>Эта функция, как гарантируют, не предоставит последовательный результат
для строк, которые используют многобайтовые наборы
символов, включая <code>utf-8</code>.</p>
<p>Мы надеемся удалить эти ограничения в будущем выпуске. См. Bug #22638.
</p></li></ul>

<pre>
mysql&gt; SELECT SOUNDEX('Hello');
  -&gt; 'H400'
mysql&gt; SELECT SOUNDEX('Quadratically');
  -&gt; 'Q36324'
</pre>

<p>Эта функция осуществляет оригинальный алгоритм Soundex, а не более
популярную улучшенную версию (также описанный D. Knuth). Различие в том, что
оригинальная версия отказывается от первой гласной и дублирует вторую, тогда
как улучшенная пропускает дубликаты первой и второй гласной.</p></li>

<li><a name="operator_sounds-like"></a><p>
<a href="#operator_sounds-like"><code><em><code>expr1</code></em>
SOUNDS LIKE <em><code>expr2</code></em></code></a></p>

<p>Аналог <a href="#function_soundex"><code>SOUNDEX(<em><code>expr1
</code></em>) = SOUNDEX(<em><code>expr2</code></em>)</code></a>.</p></li>

<li><a name="function_space"></a><p>
<a href="#function_space"><code>SPACE(<em><code>N</code></em>)
</code></a></p>

<p>Возвращает строку, состоящую из <em><code>N</code></em> пробелов.
<pre>
mysql&gt; SELECT SPACE(6);
    -&gt; '      '
</pre></li>

<li><a name="function_substr"></a><p>
<a href="#function_substr"><code>SUBSTR(<em><code>str</code></em>,
<em><code>pos</code></em>)</code></a>,
<a href="#function_substr"><code>SUBSTR(<em><code>str</code></em>
FROM <em><code>pos</code></em>)</code></a>,
<a href="#function_substr"><code>SUBSTR(<em><code>str</code></em>,
<em><code>pos</code></em>,<em><code>len</code></em>)</code></a>,
<a href="#function_substr"><code>SUBSTR(<em><code>str</code></em>
FROM <em><code>pos</code></em> FOR <em><code>len</code></em>)</code></a></p>
<p><a href="#function_substr"><code>SUBSTR()</code></a> синоним для
<a href="#function_substring"><code>SUBSTRING()</code></a>.</p></li>

<li><a name="function_substring"></a><p>
<a href="#function_substring"><code>SUBSTRING(<em><code>str</code>
</em>,<em><code>pos</code></em>)</code></a>,
<a href="#function_substring"><code>SUBSTRING(<em><code>str</code>
</em> FROM <em><code>pos</code></em>)</code></a>,
<a href="#function_substring"><code>SUBSTRING(<em><code>str</code>
</em>,<em><code>pos</code></em>,<em><code>len</code></em>)</code></a>,
<a href="#function_substring"><code>SUBSTRING(<em><code>str</code>
</em> FROM <em><code>pos</code></em> FOR <em><code>len</code></em>)</code>
</a></p>

<p>Формы без <em><code>len</code></em> возвращают подстроку из
<em><code>str</code></em>, начиная с позиции <em><code>pos</code></em>.
Формы с <em><code>len</code></em> возвращают подстроку длиной
<em><code>len</code></em> символов из <em><code>str</code></em>, начиная с
позиции <em><code>pos</code></em>. Формы, которые используют
<code>FROM</code>, это стандартный синтаксис SQL.
Также возможно использовать отрицательную величину для
<em><code>pos</code></em>. В этом случае подстрока начинается с
<em><code>pos</code></em> символа от конца строки, а не начала.
Отрицательная величина может использоваться для <em><code>pos</code></em>
в любой из форм этой функции.</p>

<p>Для всех форм <a href="#function_substring"><code>SUBSTRING()
</code></a> позицию первого символа в строке, из которой должна быть
извлечена подстрока, считают как <code>1</code>.
<pre>
mysql&gt; SELECT SUBSTRING('Quadratically',5);
  -&gt; 'ratically'
mysql&gt; SELECT SUBSTRING('foobarbar' FROM 4);
  -&gt; 'barbar'
mysql&gt; SELECT SUBSTRING('Quadratically',5,6);
  -&gt; 'ratica'
mysql&gt; SELECT SUBSTRING('Sakila', -3);
  -&gt; 'ila'
mysql&gt; SELECT SUBSTRING('Sakila', -5, 3);
  -&gt; 'aki'
mysql&gt; SELECT SUBSTRING('Sakila' FROM -4 FOR 2);
  -&gt; 'ki'
</pre>
<p>Если <em><code>len</code></em> меньше 1, результат пустая строка.</p></li>

<li><a name="function_substring-index"></a><p>
<a href="#function_substring-index"><code>SUBSTRING_INDEX(<em><code>
str</code></em>,<em><code>delim</code></em>,<em><code>count</code></em>)
</code></a></p>

<p>Возвращает подстроку из строки <em><code>str</code></em> до
<em><code>count</code></em> возникновения разделителя
<em><code>delim</code></em>. Если <em><code>count</code></em>
положительно, возвращено все слева от заключительного разделителя (счет слева
направо). Если <em><code>count</code></em> отрицательно, возвращено все
справа от заключительного разделителя (считая справа).
<a href="#function_substring-index"><code>SUBSTRING_INDEX()</code>
</a> выполняет чувствительное к регистру соответствие, ища
<em><code>delim</code></em>.
<pre>
mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);
  -&gt; 'www.mysql'
mysql&gt; SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);
  -&gt; 'mysql.com'
</pre></li>

<li><a name="function_to-base64"></a><p>
<a href="#function_to-base64"><code>TO_BASE64(<em><code>str</code>
</em>)</code></a></p>

<p>Преобразовывает строковый параметр в base-64 и возвращает результат как
строку символов с набором символов соединения и сопоставлением. Если параметр
не строка, он преобразован в строку прежде, чем преобразование будет иметь
место. Результат <code>NULL</code> если параметр <code>NULL</code>.
Строки Base-64 могут быть расшифрованы, используя функцию
<a href="#function_from-base64"><code>FROM_BASE64()</code></a>.
<pre>
mysql&gt; SELECT TO_BASE64('abc'), FROM_BASE64(TO_BASE64('abc'));
  -&gt; 'JWJj', 'abc'
</pre>

<p>Существуют различные схемы кодировки Base 64.
<a href="#function_to-base64"><code>TO_BASE64()</code></a> и
<a href="#function_from-base64"><code>FROM_BASE64()</code></a>
используют следующие правила:</p>

<ul><li><p>Кодирование для алфавитного значения 62 <code>'+'</code>.</li>
<li>Кодирование для алфавитного значения 63 <code>'/'</code>.</li>
<li>Закодированный вывод состоит из групп по 4 пригодных для печати символа.
Каждый 3 байта входных данных закодированы, используя 4 символа.
Если последняя группа является неполной, она дополнена символами
<code>'='</code> до длины 4.</li>

<li>Новая строка добавлена после каждого 76 символа закодированного вывода,
чтобы делить длинный на много строк.</li>
<li>Расшифровка признает и игнорирует новую строку, возврат
каретки, табуляцию и пробел.</p></li></ul></li>

<li><a name="function_trim"></a><p>
<a href="#function_trim"><code>TRIM([{BOTH | LEADING | TRAILING}
[<em><code>remstr</code></em>] FROM]
<em><code>str</code></em>)</code></a>,
<a href="#function_trim"><code>TRIM([<em><code>remstr</code></em>
FROM] <em><code>str</code></em>)</code></a></p>

<p>Возвращает строку <em><code>str</code></em> со всеми удаленными
префиксами или суффиксами <em><code>remstr</code></em>.
Если ни один из спецификаторов <code>BOTH</code>,
<code>LEADING</code> или <code>TRAILING</code> не задан, предполагается
<code>BOTH</code>. <em><code>remstr</code></em>
является дополнительной и, если не определена, будут удалены пробелы.
<pre>
mysql&gt; SELECT TRIM('  bar   ');
  -&gt; 'bar'
mysql&gt; SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
  -&gt; 'barxxx'
mysql&gt; SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
  -&gt; 'bar'
mysql&gt; SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
  -&gt; 'barx'
</pre></li>

<li><a name="function_ucase"></a><p>
<a href="#function_ucase"><code>UCASE(<em><code>str</code></em>)
</code></a></p>
<p><a href="#function_ucase"><code>UCASE()</code></a> синоним для
<a href="#function_upper"><code>UPPER()</code></a>.</p>
<p><code>UCASE()</code>, используемая в пределах представлений переписана как
<code>UPPER()</code>.</p></li>

<li><a name="function_unhex"></a><p>
<a href="#function_unhex"><code>UNHEX(<em><code>str</code></em>)
</code></a></p>

<p>Для строкового параметра <em><code>str</code></em>
<a href="#function_unhex"><code>UNHEX(<em><code>str</code></em>)
</code></a> интерпретирует каждую пару символов в параметре как
шестнадцатеричное число и преобразовывает это в байт, представленный числом.
Возвращаемое значение двоичная строка.
<pre>
mysql&gt; SELECT UNHEX('4D7953514C');
    -&gt; 'MySQL'
mysql&gt; SELECT X'4D7953514C';
    -&gt; 'MySQL'
mysql&gt; SELECT UNHEX(HEX('string'));
    -&gt; 'string'
mysql&gt; SELECT HEX(UNHEX('1267'));
    -&gt; '1267'
</pre>

<p>Символы в строке параметра должны быть шестнадцатеричными цифрами:
<code>'0'</code> .. <code>'9'</code>, <code>'A'</code> .. <code>'F'</code>,
<code>'a'</code> .. <code>'f'</code>. Если параметр содержит какие-либо
нешестнадцатеричные цифры, результат <code>NULL</code>:
<pre>
mysql&gt; SELECT UNHEX('GG');
+-------------+
| UNHEX('GG') |
+-------------+
| NULL        |
+-------------+
</pre>

<p>Результат <code>NULL</code> может произойти, если параметр
<a href="#function_unhex"><code>UNHEX()</code></a> столбец
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>, потому что
значения дополнены байтами 0x00 когда сохранены, но эти байты при извлечении
не удаляются. Например, <code>'41'</code> сохранена в столбце
<code>CHAR(3)</code> как <code>'41 '</code> и получена как <code>'41'</code>
(без хвостового пробела, таким образом <a href="#function_unhex">
<code>UNHEX()</code></a> для значения столбца вернет <code>'A'</code>.
При сохранении <code>'41'</code> в столбец
<code>BINARY(3)</code> сохранится и вернется <code>'41\0'</code>
(<code>0x00</code> в конце останется). <code>'\0'</code> не
шестнадцатеричная цифра, таким образом,
<a href="#function_unhex"><code>UNHEX()</code></a>
для значения столбца вернет <code>NULL</code>.</p>

<p>Для числового параметра <em><code>N</code></em>, инверсия
<a href="#function_hex"><code>HEX(<em><code>N</code></em>)</code>
</a> не выполнена <a href="#function_unhex"><code>UNHEX()</code>
</a>. Используйте <a href="#function_conv"><code>CONV(HEX(<em>
<code>N</code></em>), 16, 10)</code></a>.</p></li>

<li><a name="function_upper"></a><p>
<a href="#function_upper"><code>UPPER(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает строку <em><code>str</code></em> со всеми символами,
измененными в верхний регистр согласно текущему отображению набора символов.
Значение по умолчанию <code>latin1</code> (cp1252 West European).
<pre>
mysql&gt; SELECT UPPER('Hej');
  -&gt; 'HEJ'
</pre>
<p><code>UCASE()</code>, используемая в пределах представлений,
переписана как <code>UPPER()</code>.</p></li>

<li><a name="function_weight-string"></a><p>
<a href="#function_weight-string"><code>WEIGHT_STRING(<em><code>str
</code></em> [AS {CHAR|BINARY}(<em><code>N</code></em>)] [LEVEL
<em><code>levels</code></em>] [<em><code>flags</code></em>])</code></a></p>

<p><code><em><code>levels</code></em>:
<em><code>N</code></em> [ASC|DESC|REVERSE] [,
<em><code>N</code></em> [ASC|DESC|REVERSE]] ...</code></p>

<p>Эта функция возвращает строку веса для строки ввода. Возвращаемое значение
двоичная строка, которая представляет сравнение и значение сортировки строки.
У нее есть эти свойства:</p>

<ul><li><p>Если <a href="#function_weight-string"><code>
WEIGHT_STRING(<em><code>str1</code></em>)</code></a> =
<a href="#function_weight-string"><code>WEIGHT_STRING(<em><code>str2
</code></em>)</code></a>, то <code><em><code>str1</code></em> =
<em><code>str2</code></em></code> (<em><code>str1</code></em> и
<em><code>str2</code></em> считаются равными).</li>

<li>Если <a href="#function_weight-string"><code>WEIGHT_STRING(<em>
<code>str1</code></em>)</code></a>
&lt; <a href="#function_weight-string"><code>WEIGHT_STRING(<em>
<code>str2</code></em>)</code></a>,
то <code><em><code>str1</code></em> &lt; <em><code>str2</code></em></code>
(<em><code>str1</code></em> в сортировке будет до
<em><code>str2</code></em>).</p></li></ul>

<p><a href="#function_weight-string"><code>WEIGHT_STRING()</code>
</a> может использоваться для тестирования и отладки сопоставлений, особенно
если Вы добавляете новое сопоставление. См.
<a href="global.htm#adding-collation">раздел 11.4</a>.</p>

<p>Строка ввода <em><code>str</code></em> это строковое выражение. Если ввод
недвоичная (символьная) строка, такая как
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>,
возвращаемое значение содержит вес сопоставления для строки. Если ввод
двоичная строка, такая как
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> или
<a href="types.htm#blob"><code>BLOB</code></a>,
возвращаемое значение то же самое, как и ввод (вес для каждого байта в
двоичной строке это значение байта). Если ввод <code>NULL</code>,
<a href="#function_weight-string"><code>WEIGHT_STRING()</code></a>
тоже вернет <code>NULL</code>. Например:

<pre>
mysql&gt; SET @s = _latin1 'AB' COLLATE latin1_swedish_ci;
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+----+---------+------------------------+
| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+----+---------+------------------------+
| AB | 4142    | 4142                   |
+----+---------+------------------------+

mysql&gt; SET @s = _latin1 'ab' COLLATE latin1_swedish_ci;
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+----+---------+------------------------+
| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+----+---------+------------------------+
| ab | 6162    | 4142                   |
+----+---------+------------------------+

mysql&gt; SET @s = CAST('AB' AS BINARY);
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+----+---------+------------------------+
| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+----+---------+------------------------+
| AB | 4142    | 4142                   |
+----+---------+------------------------+

mysql&gt; SET @s = CAST('ab' AS BINARY);
mysql&gt; SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));
+----+---------+------------------------+
| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |
+----+---------+------------------------+
| ab | 6162    | 6162                   |
+----+---------+------------------------+
</pre>

<p>Предыдущее использование в качестве примера
<a href="#function_hex"><code>HEX()</code></a> отобразит результат
<a href="#function_weight-string"><code>WEIGHT_STRING()</code></a>.
Поскольку результат двоичное значение,
<a href="#function_hex"><code>HEX()</code></a>
может быть особенно полезной, когда результат содержит непечатаемые значения,
чтобы вывести на экран это в пригодной для печати форме:
<pre>
mysql&gt; SET @s = CONVERT(X'C39F' USING utf8) COLLATE utf8_czech_ci;
mysql&gt; SELECT HEX(WEIGHT_STRING(@s));
+------------------------+
| HEX(WEIGHT_STRING(@s)) |
+------------------------+
| 0FEA0FEA               |
+------------------------+
</pre>

<p>Для возвращаемых значений не-<code>NULL</code> тип данных значения
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>, если его
длина в пределах максимальной длины для
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
иначе тип данных <a href="types.htm#blob"><code>BLOB</code></a>.</p>

<p><code>AS</code> может быть дан, чтобы привести строку ввода к недвоичной
или двоичной строке и нужной длине:</p>
<ul><li><p><code>AS CHAR(<em><code>N</code></em>)</code> приводит
строку к недвоичной строке и дополняет справа пробелами до длины
<em><code>N</code></em> символов. <em><code>N</code></em> должен быть по
крайней мере 1. Если <em><code>N</code></em> меньше, чем длина строки ввода,
строка будет усечена до <em><code>N</code></em> символов. Никакого
предупреждения не происходит для усечения.</li>

<li><code>AS BINARY(<em><code>N</code></em>)</code> подобно, но приводит
строку к двоичной строке <em><code>N</code></em> измерен в байтах (не
символах!), и дополнение использует байт <code>0x00</code> (не пробелы!).
</p></li></ul>

<pre>
mysql&gt; SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));
+-------------------------------------+
| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |
+-------------------------------------+
| 41422020                            |
+-------------------------------------+

mysql&gt; SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));
+---------------------------------------+
| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |
+---------------------------------------+
| 61620000                              |
+---------------------------------------+
</pre>

<p><code>LEVEL</code> может быть дан, чтобы определить, что возвращаемое
значение должно содержать веса для определенных уровней сопоставления.</p>
<p>Спецификатор <em><code>levels</code></em> после ключевого слова
<code>LEVEL</code> может быть дан как список из одного или более целых чисел,
отделенных запятыми, или как диапазон двух целых чисел, отделенных тире.
Пробелы вокруг символов пунктуации не имеют значения.</p>

<p>Примеры:
<pre>
LEVEL 1
LEVEL 2, 3, 5
LEVEL 1-3
</pre>

<p>Любой уровень меньше 1 обработан как 1. Любой уровень больше, чем максимум
для сопоставления строки ввода, обработан как максимум для сопоставления.
Максимум изменяется в зависимости от сопоставление, но никогда не больше 6.
</p>

<p>В списке уровни должны быть даны в увеличивающемся порядке. В диапазоне
уровней, если второе число меньше, чем первое, оно обработано как первое
число (например, 4-2 то же самое, что и 4-4).</p>

<p>Если пропущен <code>LEVEL</code>, MySQL принимает
<code>LEVEL 1 - <em><code>max</code></em></code>, где
<em><code>max</code></em> максимальный уровень для сопоставления.</p>

<p>Если <code>LEVEL</code> определен, используя синтаксис списка (не
диапазон), любое число уровня может сопровождаться этими модификаторами:</p>
<ul><li><p><code>ASC</code>: Возвратить веса без модификации.
Это значение по умолчанию.</li>

<li><code>DESC</code>: Вернуть поразрядно инвертированные веса (например,
<code>0x78f0 DESC</code> = <code>0x870f</code>).</li>
<li><code>REVERSE</code>: Вернуть веса в обратном порядке (то есть, веса для
полностью измененной строки, с первым символом на последнем месте).
</p></li></ul>

<p>Примеры:
<pre>
mysql&gt; SELECT HEX(WEIGHT_STRING(0x007fff LEVEL 1));
+--------------------------------------+
| HEX(WEIGHT_STRING(0x007fff LEVEL 1)) |
+--------------------------------------+
| 007FFF                               |
+--------------------------------------+

mysql&gt; SELECT HEX(WEIGHT_STRING(0x007fff LEVEL 1 DESC));
+-------------------------------------------+
| HEX(WEIGHT_STRING(0x007fff LEVEL 1 DESC)) |
+-------------------------------------------+
| FF8000                                    |
+-------------------------------------------+

mysql&gt; SELECT HEX(WEIGHT_STRING(0x007fff LEVEL 1 REVERSE));
+----------------------------------------------+
| HEX(WEIGHT_STRING(0x007fff LEVEL 1 REVERSE)) |
+----------------------------------------------+
| FF7F00                                       |
+----------------------------------------------+

mysql&gt; SELECT HEX(WEIGHT_STRING(0x007fff LEVEL 1 DESC REVERSE));
+---------------------------------------------------+
| HEX(WEIGHT_STRING(0x007fff LEVEL 1 DESC REVERSE)) |
+---------------------------------------------------+
| 0080FF                                            |
+---------------------------------------------------+
</pre>
<p><em><code>flags</code></em> в настоящее время не используется.
</p></li></ul>

<h3><a name="string-comparison-functions"></a>13.5.1. Функции сравнения строк
</h3>
<a name="idm139965355763136"></a><p><b>Таблица 13.8.
Функции сравнения строк</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_like"><code>LIKE
</code></a></td><td>Простое соответствие образцу</td></tr>
<tr><td scope="row"><a href="#operator_not-like"><code>NOT LIKE
</code></a></td><td>Отрицание простого соответствия образца</td></tr>
<tr><td scope="row"><a href="#function_strcmp"><code>STRCMP()</code>
</a></td><td>Сравнивает две строки</td></tr></tbody></table>

<p>Если строковой функции дают двоичную строку как параметр, получающаяся
строка также двоичная. Число, преобразованное в строку, обработано как
двоичная строка. Это затрагивает только сравнения.</p>

<p>Обычно если какое-либо выражение в строковом сравнении является
чувствительным к регистру, сравнение выполнено
чувствительным к регистру способом.</p>

<ul><li><a name="operator_like"></a><p>
<a href="#operator_like"><code><em><code>expr</code></em>
LIKE <em><code>pat</code></em> [ESCAPE '<em><code>escape_char</code>
</em>']</code></a></p>

<p>Соответствие образца, используя образец SQL. Возвращает
<code>1</code> (<code>TRUE</code>) или <code>0</code> (<code>FALSE</code>).
Если <em><code>expr</code></em> или <em><code>pat</code></em>
<code>NULL</code>, результат <code>NULL</code>.</p>

<p>Образец не должен быть буквальной строкой. Например, это может быть
определено как строковое выражение или столбец таблицы.</p>
<p>По стандарту SQL <a href="#operator_like"><code>LIKE</code></a>
выполняет соответствие на посимвольном основании, таким образом это может
привести к результатам, отличающимся от оператора сравнения
<a href="#operator_equal"><code>=</code></a>:
<pre>
mysql&gt; SELECT 'ц╓' LIKE 'ae' COLLATE latin1_german2_ci;
+-----------------------------------------+
| 'ц╓' LIKE 'ae' COLLATE latin1_german2_ci |
+-----------------------------------------+
|   0                                     |
+-----------------------------------------+

mysql&gt; SELECT 'ц╓' = 'ae' COLLATE latin1_german2_ci;
+--------------------------------------+
| 'ц╓' = 'ae' COLLATE latin1_german2_ci |
+--------------------------------------+
| 1                                    |
+--------------------------------------+
</pre>

<p>В частности конечные пробелы являются существенными, что неверно для
сравнения <a href="types.htm#char"><code>CHAR</code></a> или
<a href="types.htm#char"><code>VARCHAR</code></a> с помощью
<a href="#operator_equal"><code>=</code></a>:
<pre>
mysql&gt; SELECT 'a' = 'a ', 'a' LIKE 'a ';
+------------+---------------+
| 'a' = 'a ' | 'a' LIKE 'a ' |
+------------+---------------+
| 1          |   0           |
+------------+---------------+
1 row in set (0.00 sec)
</pre>

<p>С <a href="#operator_like"><code>LIKE</code></a>
Вы можете использовать следующие два подстановочных символа в образце:</p>
<ul><li><p><code>%</code> соответствует любому числу символов, даже нулевых.
</li>
<li><code>_</code> соответствует точно одному символу.</p></li></ul>
<pre>
mysql&gt; SELECT 'David!' LIKE 'David_';
  -&gt; 1
mysql&gt; SELECT 'David!' LIKE '%D%v%';
  -&gt; 1
</pre>

<p>Чтобы проверить на буквальные случаи подстановочного символа, поставьте
перед ним символ экранирования. Если Вы не определяете символ
<code>ESCAPE</code>, по умолчанию используется <code>\</code>.</p>
<ul><li><p><code>\%</code> соответствует одному символу <code>%</code>.</li>
<li><code>\_</code> соответствует одному символу <code>_</code>.</p></li></ul>

<pre>
mysql&gt; SELECT 'David!' LIKE 'David\_';
  -&gt; 0
mysql&gt; SELECT 'David_' LIKE 'David\_';
  -&gt; 1
</pre>

<p>Чтобы определить иной символ ESC,
используйте определение <code>ESCAPE</code>:
<pre>
mysql&gt; SELECT 'David_' LIKE 'David|_' ESCAPE '|';
  -&gt; 1
</pre>

<p>Escape-последовательность должна быть пустой или одним символом. Выражение
должно оцениваться как константа во время выполнения. Если режим SQL
<a href="server.htm#sqlmode_no_backslash_escapes"><code>NO_BACKSLASH_ESCAPES
</code></a> включен, последовательность не может быть пустой.</p>

<p>Следующие два запроса иллюстрируют, что строковые сравнения не являются
чувствительными к регистру, если один из операндов не чувствителен к регистру
(использует чувствительное к регистру сопоставление или двоичную строку):
<pre>
mysql&gt; SELECT 'abc' LIKE 'ABC';
  -&gt; 1
mysql&gt; SELECT 'abc' LIKE _latin1 'ABC' COLLATE latin1_general_cs;
  -&gt; 0
mysql&gt; SELECT 'abc' LIKE _latin1 'ABC' COLLATE latin1_bin;
  -&gt; 0
mysql&gt; SELECT 'abc' LIKE BINARY 'ABC';
  -&gt; 0
</pre>

<p>Как расширение к стандартному SQL, MySQL допускает
<a href="#operator_like"><code>LIKE</code></a>
по числовым выражениям.
<pre>
mysql&gt; SELECT 10 LIKE '1%';
    -&gt; 1
</pre>

<p>Поскольку MySQL использует синтаксис escape C в строках (например,
<code>\n</code> кодирует символ новой строки), Вы должны удвоить любой
<code>\</code>, который используете в строке
<a href="#operator_like"><code>LIKE</code></a>.
Например, чтобы искать <code>\n</code>, укажите <code>\\n</code>.
Чтобы искать <code>\</code>, определите это как <code>\\\\</code>,
это потому что наклонные черты влево обрезаны сначала анализатором, а потом
когда соответствие образца сделано, оставляя единственную наклонную черту
влево, которая будет соответствующей.</p>

<p>Исключение: В конце строки образца наклонная черта влево может быть
определена как <code>\\</code>. В конце строки наклонная черта влево
обозначает себя, потому что нет ничего после нее. Предположите, что таблица
содержит следующие значения:
<pre>
mysql&gt; SELECT filename FROM t1;
+--------------+
| filename     |
+--------------+
| C:           |
| C:\          |
| C:\Programs  |
| C:\Programs\ |
+--------------+
</pre>

<p>Чтобы проверить на значения, которые заканчиваются наклонной чертой влево,
Вы можете соответствовать значениям, используя любой из следующих образцов:
<pre>
mysql&gt; SELECT filename, filename LIKE '%\\' FROM t1;
+--------------+---------------------+
| filename     | filename LIKE '%\\' |
+--------------+---------------------+
| C:           |   0                 |
| C:\          |   1                 |
| C:\Programs  |   0                 |
| C:\Programs\ |   1                 |
+--------------+---------------------+

mysql&gt; SELECT filename, filename LIKE '%\\\\' FROM t1;
+--------------+-----------------------+
| filename     | filename LIKE '%\\\\' |
+--------------+-----------------------+
| C:           | 0                     |
| C:\          | 1                     |
| C:\Programs  | 0                     |
| C:\Programs\ | 1                     |
+--------------+-----------------------+
</pre></li>

<li><a name="operator_not-like"></a><p>
<a href="#operator_not-like"><code><em><code>expr</code></em>
NOT LIKE <em><code>pat</code></em> [ESCAPE
'<em><code>escape_char</code></em>']</code></a></p>

<p>Это аналогично <code>NOT (<em><code>expr</code></em> LIKE
<em><code>pat</code></em> [ESCAPE '<em><code>escape_char</code></em>'])
</code>.</p>

<p>Совокупное вовлечение запросов <a href="#operator_not-like">
<code>NOT LIKE</code></a> сравнения со столбцами, содержащими
<code>NULL</code> может привести к неожиданным результатам.
Например, рассмотрите следующую таблицу и данные:
<pre>
CREATE TABLE foo (bar VARCHAR(10));
INSERT INTO foo VALUES (NULL), (NULL);
</pre>

<p>Запрос <code>SELECT COUNT(*) FROM foo WHERE bar LIKE '%baz%';</code>
вернет <code>0</code>. Вы могли бы принять, что <code>SELECT COUNT(*) FROM
foo WHERE bar NOT LIKE '%baz%';</code> должен вернуть <code>2</code>.
Однако, дело обстоит не так: второй запрос вернет <code>0</code>.
Это потому, что <code>NULL NOT LIKE
<em><code>expr</code></em></code> всегда возвращает <code>NULL</code>,
независимо от значения <em><code>expr</code></em>.
То же самое истина для совокупного вовлечения запросов
<code>NULL</code> и использования сравнений
<a href="#operator_not-regexp"><code>NOT
RLIKE</code></a> или <a href="#operator_not-regexp"><code>NOT
REGEXP</code></a>. В таких случаях Вы должны проверить явно на <code>NOT
NULL</code> с помощью <a href="#operator_or"><code>OR</code></a> (но
не <a href="#operator_and"><code>AND</code></a>):
<pre>
SELECT COUNT(*) FROM foo WHERE bar NOT LIKE '%baz%' OR bar IS NULL;
</pre></li>

<li><a name="function_strcmp"></a><p>
<a href="#function_strcmp"><code>STRCMP(<em><code>expr1</code></em>,
<em><code>expr2</code></em>)</code></a></p>

<p><a href="#function_strcmp"><code>STRCMP()</code></a> вернет
<code>0</code>, если строки одинаковы, <code>-1</code>, если первый параметр
меньше второго, согласно текущему порядку сортировки, иначе <code>1</code>.
<pre>
mysql&gt; SELECT STRCMP('text', 'text2');
  -&gt; -1
mysql&gt; SELECT STRCMP('text2', 'text');
  -&gt; 1
mysql&gt; SELECT STRCMP('text', 'text');
  -&gt; 0
</pre>

<p><a href="#function_strcmp"><code>STRCMP()</code></a>
выполняет сравнение, используя сопоставление параметров.
<pre>
mysql&gt; SET @s1 = _latin1 'x' COLLATE latin1_general_ci;
mysql&gt; SET @s2 = _latin1 'X' COLLATE latin1_general_ci;
mysql&gt; SET @s3 = _latin1 'x' COLLATE latin1_general_cs;
mysql&gt; SET @s4 = _latin1 'X' COLLATE latin1_general_cs;
mysql&gt; SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);
+------------------+------------------+
| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |
+------------------+------------------+
| 0                |     1            |
+------------------+------------------+
</pre>

<p>Если сопоставления являются несовместимыми, один из параметров должен быть
преобразован, чтобы быть совместимым с другим. См.
<a href="global.htm#charset-collation-expressions">раздел 11.1.8.4</a>.
<pre>

mysql&gt; SELECT STRCMP(@s1, @s3);
ERROR 1267 (HY000): Illegal mix of collations (latin1_general_ci,IMPLICIT)
and (latin1_general_cs,IMPLICIT) for operation 'strcmp'
mysql&gt; SELECT STRCMP(@s1, @s3 COLLATE latin1_general_ci);
+--------------------------------------------+
| STRCMP(@s1, @s3 COLLATE latin1_general_ci) |
+--------------------------------------------+
|  0                                         |
+--------------------------------------------+
</pre></li></ul>

<h3><a name="regexp"></a>13.5.2. Регулярные выражения</h3>
<a name="idm139965355622448"></a><p><b>Таблица 13.9.
Строки регулярных выражений</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_not-regexp"><code>NOT
REGEXP</code></a></td><td>Отрицание REGEXP</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>REGEXP</code>
</a></td><td>Соответствие образца, используя регулярные выражения</td></tr>
<tr><td scope="row"><a href="#operator_regexp"><code>RLIKE</code>
</a></td><td>Синоним для REGEXP</td></tr></tbody></table>

<p>Регулярное выражение сильный способ определить образец для сложного поиска.
</p>
<p>MySQL применяет реализацию регулярных выражений от Henry Spencer,
которая нацелена на соответствие POSIX 1003.2. MySQL использует расширенную
версию, чтобы поддержать соответствующие образцы, выполненные оператором
<a href="#operator_regexp"><code>REGEXP</code></a> в запросах SQL.
</p>

<p>Этот раздел подводит итог, с примерами, специальными символами и
конструкциями, которые могут использоваться в MySQL для
<a href="#operator_regexp"><code>REGEXP</code></a>.
Это не содержит все детали, которые могут быть найдены в
Henry Spencer's <code>regex(7)</code> manual page. Эта документация есть в
дистрибутиве исходных текстов MySQL в файле <code>regex.7</code> каталога
<code>regex</code>. Также изучите
<a href="tutorial.html#pattern-matching">раздел 4.3.4.7</a>.</p>

<h4><a name="idm139965355605904"></a>Операторы регулярных выражений</h4>
<ul><li><a name="operator_not-regexp"></a><p>
<a href="#operator_not-regexp"><code><em><code>expr</code></em>
NOT REGEXP <em><code>pat</code></em></code></a>,
<a href="#operator_not-regexp"><code><em><code>expr</code></em>
NOT RLIKE <em><code>pat</code></em></code></a></p>
<p>Аналог <code>NOT (<em><code>expr</code></em> REGEXP
<em><code>pat</code></em>)</code>.</p></li>

<li><a name="operator_regexp"></a><p>
<a href="#operator_regexp"><code><em><code>expr</code></em>
REGEXP <em><code>pat</code></em></code></a>,
<a href="#operator_regexp"><code><em><code>expr</code></em>
RLIKE <em><code>pat</code></em></code></a></p>

<p>Выполняет соответствие образца строкового выражения
<em><code>expr</code></em> шаблону <em><code>pat</code></em>.
Образец может быть расширенным регулярным выражением, синтаксис для которого
рассмотрен позже в этом разделе. Возвращает
<code>1</code>, если <em><code>expr</code></em> соответствует
<em><code>pat</code></em>, иначе <code>0</code>. Если
<em><code>expr</code></em> или <em><code>pat</code></em> <code>NULL</code>,
результат <code>NULL</code>. <a href="#operator_regexp"><code>RLIKE
</code></a> синоним для <a href="#operator_regexp"><code>REGEXP
</code></a> для совместимости с <code>mSQL</code>.</p>

<p>Образец не должен быть буквальной строкой. Например, это может быть
определено как строковое выражение или столбец таблицы.</p>
<p>Поскольку MySQL использует синтаксис escape C в строках (например,
<code>\n</code> означает новую строку), Вы должны удвоить любой
<code>\</code>, который Вы используете в Вашей строке
<a href="#operator_regexp"><code>REGEXP</code></a>.</p>

<p><a href="#operator_regexp"><code>REGEXP</code></a>
не является чувствительной к регистру, кроме тех случаев, когда
используется с двоичными строками.
<pre>
mysql&gt; SELECT 'Monty!' REGEXP '.*';
  -&gt; 1
mysql&gt; SELECT 'new*\n*line' REGEXP 'new\\*.\\*line';
  -&gt; 1
mysql&gt; SELECT 'a' REGEXP 'A', 'a' REGEXP BINARY 'A';
  -&gt; 1  0
mysql&gt; SELECT 'a' REGEXP '^[a-d]';
  -&gt; 1
</pre>

<p><a href="#operator_regexp"><code>REGEXP</code></a> и
<a href="#operator_regexp"><code>RLIKE</code></a>
используют набор символов и сопоставления параметров, определяя тип символа и
выполняя сравнение. Если у параметров есть различные наборы символов или
сопоставления, правила применяются как описано в
<a href="global.htm#charset-collation-expressions">разделе 11.1.8.4</a>.</p>

<p>Операторы <a href="#operator_regexp"><code>REGEXP</code></a> и
<a href="#operator_regexp"><code>RLIKE</code></a>
работают побайтно, таким образом, они не безопасны для мультибайтных символов
и могут привести к неожиданным результатам с многобайтовыми символами. Кроме
того, эти операторы сравнивают символы по их байтовым значениям и некоторые
символы, возможно, не сравниваются как равные, даже если данное сопоставление
обрабатывает их как равных.</p></li></ul>

<h4><a name="idm139965355553888"></a>Синтаксис регулярных выражений</h4>
<p>Регулярное выражение описывает ряд строк. Самое простое регулярное
выражение то, у которого нет никаких специальных символов в нем. Например,
регулярное выражение <code>hello</code> соответствует только
<code>hello</code> и ничему больше.</p>

<p>Нетривиальные регулярные выражения используют определенные специальные
конструкции так, чтобы они могли соответствовать больше, чем одной строке.
Например, регулярное выражение <code>hello|word</code> соответствует любой
строке <code>hello</code> или <code>word</code>.</p>

<p>Как более сложный пример, регулярное выражение
<code>B[an]*s</code> соответствует любой из строк
<code>Bananas</code>, <code>Baaaaas</code>, <code>Bs</code> и
любой другой строке, начинающейся с <code>B</code>, заканчивающейся на
<code>s</code> и включающей любое число символов <code>a</code>
или <code>n</code> между ними.</p>

<p>Регулярное выражение для <a href="#operator_regexp">
<code>REGEXP</code></a> может использовать любой из следующих
специальных символов и конструкций:</p>

<ul><li><p><code>^</code></p>
<p>Соответствует началу строки.
<pre>
mysql&gt; SELECT 'fo\nfo' REGEXP '^fo$';
  -&gt; 0
mysql&gt; SELECT 'fofo' REGEXP '^fo';
  -&gt; 1
</pre></li>

<li><code>$</code></p>
<p>Конец строки.
<pre>
mysql&gt; SELECT 'fo\no' REGEXP '^fo\no$';
  -&gt; 1
mysql&gt; SELECT 'fo\no' REGEXP '^fo$';
  -&gt; 0
</pre></li>

<li><code>.</code></p>
<p>Соответствует любому символу (включая возврат каретки и новую строку).
<pre>
mysql&gt; SELECT 'fofo' REGEXP '^f.*$';
  -&gt; 1
mysql&gt; SELECT 'fo\r\nfo' REGEXP '^f.*$';
  -&gt; 1
</pre></li>

<li><code>a*</code></p>
<p>Соответствует любой последовательности из ноля или больше символов
<code>a</code>.
<pre>
mysql&gt; SELECT 'Ban' REGEXP '^Ba*n';
  -&gt; 1
mysql&gt; SELECT 'Baaan' REGEXP '^Ba*n';
  -&gt; 1
mysql&gt; SELECT 'Bn' REGEXP '^Ba*n';
  -&gt; 1
</pre></li>

<li><code>a+</code></p>
<p>Соответствует любой последовательности из одного или больше символов
<code>a</code>.
<pre>
mysql&gt; SELECT 'Ban' REGEXP '^Ba+n';
  -&gt; 1
mysql&gt; SELECT 'Bn' REGEXP '^Ba+n';
  -&gt; 0
</pre></li>

<li><code>a?</code></p>
<p>Соответствует нолю или одному символу <code>a</code>.
<pre>
mysql&gt; SELECT 'Bn' REGEXP '^Ba?n';
  -&gt; 1
mysql&gt; SELECT 'Ban' REGEXP '^Ba?n';
  -&gt; 1
mysql&gt; SELECT 'Baan' REGEXP '^Ba?n';-&gt; 0
</pre></li>

<li><code>de|abc</code></p>
<p>Соответствует любой из последовательностей
<code>de</code> или <code>abc</code>.
<pre>
mysql&gt; SELECT 'pi' REGEXP 'pi|apa';
  -&gt; 1
mysql&gt; SELECT 'axe' REGEXP 'pi|apa';
  -&gt; 0
mysql&gt; SELECT 'apa' REGEXP 'pi|apa';
  -&gt; 1
mysql&gt; SELECT 'apa' REGEXP '^(pi|apa)$';
  -&gt; 1
mysql&gt; SELECT 'pi' REGEXP '^(pi|apa)$';
  -&gt; 1
mysql&gt; SELECT 'pix' REGEXP '^(pi|apa)$';
  -&gt; 0
</pre></li>

<li><code>(abc)*</code></p>
<p>Соответствует нолю или больше экземпляров последовательности
<code>abc</code>.
<pre>
mysql&gt; SELECT 'pi' REGEXP '^(pi)*$';
  -&gt; 1
mysql&gt; SELECT 'pip' REGEXP '^(pi)*$';
  -&gt; 0
mysql&gt; SELECT 'pipi' REGEXP '^(pi)*$';
  -&gt; 1
</pre></li>

<li><code>{1}</code>, <code>{2,3}</code></p>
<p>Нотация <code>{n}</code> или <code>{m,n}</code>
обеспечивает более общий способ написать регулярные выражения, которые
соответствуют нескольким возникновениям предыдущего атома (или
<span>куска</span>) шаблона. <code>m</code> и <code>n</code> целые числа.</p>

<ul><li><p><code>a*</code></p>
<p>Может быть написан как <code>a{0,}</code>.</li>
<li><code>a+</code></p>
<p>Может быть написан как <code>a{1,}</code>.</li>
<li><code>a?</code></p>
<p>Может быть написан как <code>a{0,1}</code>.</p></li></ul>

<p>Более точно <code>a{n}</code> соответствует
<code>n</code> экземплярам <code>a</code>. <code>a{n,}</code> соответствует
<code>n</code> или больше экземплярам <code>a</code>.
<code>a{m,n}</code> соответствует от <code>m</code>
до <code>n</code> экземплярам <code>a</code>, включительно.</p>

<p><code>m</code> и <code>n</code> должны быть в диапазоне от
<code>0</code> до <code>RE_DUP_MAX</code> (значение по умолчанию 255),
включительно. Если оба <code>m</code> и <code>n</code> заданы,
<code>m</code> должно быть меньше или равным <code>n</code>.
<pre>
mysql&gt; SELECT 'abcde' REGEXP 'a[bcd]{2}e';
  -&gt; 0
mysql&gt; SELECT 'abcde' REGEXP 'a[bcd]{3}e';
  -&gt; 1
mysql&gt; SELECT 'abcde' REGEXP 'a[bcd]{1,10}e';
  -&gt; 1
</pre></li>

<li><code>[a-dX]</code>, <code>[^a-dX]</code></p>
<p>Соответствует любому символу, который является (или нет, если ^
используется), <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>
или <code>X</code>. Символ <code>-</code> между двумя другими символами
формирует диапазон, который соответствует всем символам от первого до
второго. Например, <code>[0-9]</code> соответствует любой десятичной цифре.
Чтобы включить символ <code>]</code>, он должен немедленно следовать за
вводной скобкой <code>[</code>. Чтобы включить символ <code>-</code>, он
должен быть написан сначала или последним. Любой символ, у которого нет
определенного особого значения внутри пары <code>[]</code> соответствует
только себе самому.
<pre>
mysql&gt; SELECT 'aXbc' REGEXP '[a-dXYZ]';
  -&gt; 1
mysql&gt; SELECT 'aXbc' REGEXP '^[a-dXYZ]$';
  -&gt; 0
mysql&gt; SELECT 'aXbc' REGEXP '^[a-dXYZ]+$';
  -&gt; 1
mysql&gt; SELECT 'aXbc' REGEXP '^[^a-dXYZ]+$';
  -&gt; 0
mysql&gt; SELECT 'gheis' REGEXP '^[^a-dXYZ]+$';
  -&gt; 1
mysql&gt; SELECT 'gheisa' REGEXP '^[^a-dXYZ]+$';
  -&gt; 0
</pre></li>

<li><code>[.characters.]</code></p>
<p>В пределах выражения скобки (<code>[</code> и <code>]</code>)
соответствует последовательности символов того элемента сопоставления.
<code>characters</code> единственный символ или имя символа, например,
<code>newline</code>. Следующая таблица приводит допустимые имена.</p>

<p>Следующая таблица показывает допустимые имена и символы, которым
они соответствуют. Для символов, данных как числовые значения, их значения
представлены как октальные.</p>

<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Символ</th>
<th scope="col">Имя</th><th scope="col">Символ</th></tr></thead>
<tbody><tr><td scope="row"><code>NUL</code></td><td><code>0</code></td>
<td><code>SOH</code></td><td><code>001</code></td></tr>
<tr><td scope="row"><code>STX</code></td><td><code>002</code></td>
<td><code>ETX</code></td><td><code>003</code></td></tr>
<tr><td scope="row"><code>EOT</code></td><td><code>004</code></td>
<td><code>ENQ</code></td><td><code>005</code></td></tr>
<tr><td scope="row"><code>ACK</code></td><td><code>006</code></td>
<td><code>BEL</code></td><td><code>007</code></td></tr>
<tr><td scope="row"><code>alert</code></td><td><code>007</code></td>
<td><code>BS</code></td><td><code>010</code></td></tr>
<tr><td scope="row"><code>backspace</code></td><td><code>'\b'</code></td>
<td><code>HT</code></td><td><code>011</code></td></tr>
<tr><td scope="row"><code>tab</code></td><td><code>'\t'</code></td>
<td><code>LF</code></td><td><code>012</code></td></tr>
<tr><td scope="row"><code>newline</code></td><td><code>'\n'</code></td>
<td><code>VT</code></td><td><code>013</code></td></tr>
<tr><td scope="row"><code>vertical-tab</code></td><td><code>'\v'</code></td>
<td><code>FF</code></td><td><code>014</code></td></tr>
<tr><td scope="row"><code>form-feed</code></td><td><code>'\f'</code></td>
<td><code>CR</code></td><td><code>015</code></td></tr>
<tr><td scope="row"><code>carriage-return</code></td>
<td><code>'\r'</code></td><td><code>SO</code></td>
<td><code>016</code></td></tr>
<tr><td scope="row"><code>SI</code></td><td><code>017</code></td>
<td><code>DLE</code></td><td><code>020</code></td></tr>
<tr><td scope="row"><code>DC1</code></td><td><code>021</code></td>
<td><code>DC2</code></td><td><code>022</code></td></tr>
<tr><td scope="row"><code>DC3</code></td><td><code>023</code></td>
<td><code>DC4</code></td><td><code>024</code></td></tr>
<tr><td scope="row"><code>NAK</code></td><td><code>025</code></td>
<td><code>SYN</code></td><td><code>026</code></td></tr>
<tr><td scope="row"><code>ETB</code></td><td><code>027</code></td>
<td><code>CAN</code></td><td><code>030</code></td></tr>
<tr><td scope="row"><code>EM</code></td><td><code>031</code></td>
<td><code>SUB</code></td><td><code>032</code></td></tr>
<tr><td scope="row"><code>ESC</code></td><td><code>033</code></td>
<td><code>IS4</code></td><td><code>034</code></td></tr>
<tr><td scope="row"><code>FS</code></td><td><code>034</code></td>
<td><code>IS3</code></td><td><code>035</code></td></tr>
<tr><td scope="row"><code>GS</code></td><td><code>035</code></td>
<td><code>IS2</code></td><td><code>036</code></td></tr>
<tr><td scope="row"><code>RS</code></td><td><code>036</code></td>
<td><code>IS1</code></td><td><code>037</code></td></tr>
<tr><td scope="row"><code>US</code></td><td><code>037</code></td>
<td><code>space</code></td><td><code>' '</code></td></tr>
<tr><td scope="row"><code>exclamation-mark</code></td>
<td><code>'!'</code></td><td><code>quotation-mark</code></td>
<td><code>'"'</code></td></tr>
<tr><td scope="row"><code>number-sign</code></td><td><code>'#'</code></td>
<td><code>dollar-sign</code></td><td><code>'$'</code></td></tr>
<tr><td scope="row"><code>percent-sign</code></td><td><code>'%'</code></td>
<td><code>ampersand</code></td><td><code>'&amp;'</code></td></tr>
<tr><td scope="row"><code>apostrophe</code></td><td><code>'\''</code></td>
<td><code>left-parenthesis</code></td><td><code>'('</code></td></tr>
<tr><td scope="row"><code>right-parenthesis</code></td>
<td><code>')'</code></td><td><code>asterisk</code></td>
<td><code>'*'</code></td></tr>
<tr><td scope="row"><code>plus-sign</code></td><td><code>'+'</code></td>
<td><code>comma</code></td><td><code>','</code></td></tr>
<tr><td scope="row"><code>hyphen</code></td><td><code>'-'</code></td>
<td><code>hyphen-minus</code></td><td><code>'-'</code></td></tr>
<tr><td scope="row"><code>period</code></td><td><code>'.'</code></td>
<td><code>full-stop</code></td><td><code>'.'</code></td></tr>
<tr><td scope="row"><code>slash</code></td><td><code>'/'</code></td>
<td><code>solidus</code></td><td><code>'/'</code></td></tr>
<tr><td scope="row"><code>zero</code></td><td><code>'0'</code></td>
<td><code>one</code></td><td><code>'1'</code></td></tr>
<tr><td scope="row"><code>two</code></td><td><code>'2'</code></td>
<td><code>three</code></td><td><code>'3'</code></td></tr>
<tr><td scope="row"><code>four</code></td><td><code>'4'</code></td>
<td><code>five</code></td><td><code>'5'</code></td></tr>
<tr><td scope="row"><code>six</code></td><td><code>'6'</code></td>
<td><code>seven</code></td><td><code>'7'</code></td></tr>
<tr><td scope="row"><code>eight</code></td><td><code>'8'</code></td>
<td><code>nine</code></td><td><code>'9'</code></td></tr>
<tr><td scope="row"><code>colon</code></td><td><code>':'</code></td>
<td><code>semicolon</code></td><td><code>';'</code></td></tr>
<tr><td scope="row"><code>less-than-sign</code></td>
<td><code>'&lt;'</code></td><td><code>equals-sign</code></td>
<td><code>'='</code></td></tr>
<tr><td scope="row"><code>greater-than-sign</code></td>
<td><code>'&gt;'</code></td><td><code>question-mark</code></td>
<td><code>'?'</code></td></tr>
<tr><td scope="row"><code>commercial-at</code></td><td><code>'@'</code></td>
<td><code>left-square-bracket</code></td><td><code>'['</code></td></tr>
<tr><td scope="row"><code>backslash</code></td><td><code>'\\'</code></td>
<td><code>reverse-solidus</code></td><td><code>'\\'</code></td></tr>
<tr><td scope="row"><code>right-square-bracket</code></td>
<td><code>']'</code></td><td><code>circumflex</code></td>
<td><code>'^'</code></td></tr>
<tr><td scope="row"><code>circumflex-accent</code></td>
<td><code>'^'</code></td><td><code>underscore</code></td>
<td><code>'_'</code></td></tr>
<tr><td scope="row"><code>low-line</code></td><td><code>'_'</code></td>
<td><code>grave-accent</code></td><td><code>'`'</code></td></tr>
<tr><td scope="row"><code>left-brace</code></td><td><code>'{'</code></td>
<td><code>left-curly-bracket</code></td><td><code>'{'</code></td></tr>
<tr><td scope="row"><code>vertical-line</code></td><td><code>'|'</code></td>
<td><code>right-brace</code></td><td><code>'}'</code></td></tr>
<tr><td scope="row"><code>right-curly-bracket</code></td>
<td><code>'}'</code></td><td><code>tilde</code></td><td><code>'~'</code></td>
</tr>
<tr><td scope="row"><code>DEL</code></td><td><code>177</code></td><td> </td>
<td> </td></tr></tbody></table>
<pre>
mysql&gt; SELECT '~' REGEXP '[[.~.]]';
    -&gt; 1
mysql&gt; SELECT '~' REGEXP '[[.tilde.]]';
    -&gt; 1
</pre></li>

<li><code>[=character_class=]</code></p>
<p>В пределах выражения скобки (<code>[</code> и <code>]</code>)
<code>[=character_class=]</code> представляет класс эквивалентности. Это
соответствует все символы с тем же самым значением сопоставления, включая
себя. Например, если <code>o</code> и <code>(+)</code> члены класса
эквивалентности, <code>[[=o=]]</code>, <code>[[=(+)=]]</code> и
<code>[o(+)]</code> синонимы. Класс эквивалентности не может использоваться в
качестве конечной точки диапазона.</li>

<li><code>[:character_class:]</code></p>
<p>В пределах выражения скобки (<code>[</code> и <code>]</code>)
<code>[:character_class:]</code> представляет символьный класс, который
соответствует всем символам, принадлежащим этому классу. Следующая таблица
приводит стандартные названия классов. Эти имена обозначают символьные
классы, определенные в <code>ctype(3)</code>. Особое место действия
может обеспечить другие названия классов. Символьный класс не может
использоваться в качестве конечной точки диапазона.</p>

<table border="1">
<thead><tr><th scope="col">Имя класса символов</th><th scope="col">Смысл</th>
</tr></thead>
<tbody><tr><td scope="row"><code>alnum</code></td><td>Алфавитно-цифровые
символы</td></tr>
<tr><td scope="row"><code>alpha</code></td><td>Буквенные символы</td></tr>
<tr><td scope="row"><code>blank</code></td><td>Пробелы</td></tr>
<tr><td scope="row"><code>cntrl</code></td><td>Символы управления</td></tr>
<tr><td scope="row"><code>digit</code></td><td>Цифры</td></tr>
<tr><td scope="row"><code>graph</code></td><td>Графические символы</td></tr>
<tr><td scope="row"><code>lower</code></td><td>Строчные буквенные символы
</td></tr>
<tr><td scope="row"><code>print</code></td><td>Графические символы или пробелы
</td></tr>
<tr><td scope="row"><code>punct</code></td><td>Символы пунктуации</td></tr>
<tr><td scope="row"><code>space</code></td><td>Пробел, табуляция, новая
строка и возврат каретки</td></tr>
<tr><td scope="row"><code>upper</code></td>
<td>Буквенные символы верхнего регистра</td></tr>
<tr><td scope="row"><code>xdigit</code></td><td>Шестнадцатеричные цифры
</td></tr></tbody></table>
<pre>
mysql&gt; SELECT 'justalnums' REGEXP '[[:alnum:]]+'; -&gt; 1
mysql&gt; SELECT '!!' REGEXP '[[:alnum:]]+'; -&gt; 0
</pre></li>

<li><code>[[:&lt;:]]</code>, <code>[[:&gt;:]]</code></p>
<p>Эти маркеры обозначают границы слова. Они соответствуют началу
и концу слов, соответственно. Слово последовательность символов слова,
которой не предшествуют или сопровождается символами слова. Символ слова
буквенно-цифровой знак в классе <code>alnum</code> или подчеркивание
(<code>_</code>).
<pre>
mysql&gt; SELECT 'a word a' REGEXP '[[:&lt;:]]word[[:&gt;:]]';
    -&gt; 1
mysql&gt; SELECT 'a xword a' REGEXP '[[:&lt;:]]word[[:&gt;:]]';
    -&gt; 0
</pre></li></ul>

<p>Чтобы использовать буквальный случай специального символа в регулярном
выражении, предварите его двумя наклонными чертами влево (\\). Анализатор
MySQL интерпретирует одну из наклонных черт влево, а библиотека регулярных
выражений интерпретирует другую. Например, чтобы соответствовать строке
<code>1+2</code>, которая содержит специальный символ
<code>+</code>, только последнее из следующих регулярных
выражений является правильным:
<pre>
mysql&gt; SELECT '1+2' REGEXP '1+2';
    -&gt; 0
mysql&gt; SELECT '1+2' REGEXP '1\+2';
    -&gt; 0
mysql&gt; SELECT '1+2' REGEXP '1\\+2';
    -&gt; 1
</pre>

<h3><a name="string-functions-charset"></a>13.5.3.
Набор символов и сопоставление функциональных результатов</h3>
<p>У MySQL есть много операторов и функций, которые возвращают строку. Этот
раздел отвечает на вопрос: каков набор символов и сопоставление такой строки?
</p>

<p>Для простых функций, которые берут строковый ввод и возвращают строковый
результат как выход, набор символов вывода и сопоставление те же самые, что и
таковые из входного значения. Например,
<a href="#function_upper"><code>UPPER(<em><code>X</code></em>)
</code></a> возвращает строку с той же самой строкой символов и
сопоставлением как было в <em><code>X</code></em>.
То же самое касается функций
<a href="#function_instr"><code>INSTR()</code></a>,
<a href="#function_lcase"><code>LCASE()</code></a>,
<a href="#function_lower"><code>LOWER()</code></a>,
<a href="#function_ltrim"><code>LTRIM()</code></a>,
<a href="#function_mid"><code>MID()</code></a>,
<a href="#function_repeat"><code>REPEAT()</code></a>,
<a href="#function_replace"><code>REPLACE()</code></a>,
<a href="#function_reverse"><code>REVERSE()</code></a>,
<a href="#function_right"><code>RIGHT()</code></a>,
<a href="#function_rpad"><code>RPAD()</code></a>,
<a href="#function_rtrim"><code>RTRIM()</code></a>,
<a href="#function_soundex"><code>SOUNDEX()</code></a>,
<a href="#function_substring"><code>SUBSTRING()</code></a>,
<a href="#function_trim"><code>TRIM()</code></a>,
<a href="#function_ucase"><code>UCASE()</code></a> и
<a href="#function_upper"><code>UPPER()</code></a>.</p>

<p>Функция <a href="#function_replace"><code>REPLACE()</code></a>,
в отличие от всех других функций, всегда игнорирует сопоставление строкового
ввода и выполняет чувствительное к регистру сравнение.</p>

<p>Если строковый ввод или функциональный результат двоичная строка, она
имеет набор символов и сопоставление <code>binary</code>.
Это может быть проверено при использовании функций
<a href="#function_charset"><code>CHARSET()</code></a> и
<a href="#function_collation"><code>COLLATION()</code></a>,
обе из которых возвращают <code>binary</code>
для двоичного строкового параметра:
<pre>
mysql&gt; SELECT CHARSET(BINARY 'a'), COLLATION(BINARY 'a');
+---------------------+-----------------------+
| CHARSET(BINARY 'a') | COLLATION(BINARY 'a') |
+---------------------+-----------------------+
| binary              | binary                |
+---------------------+-----------------------+
</pre>

<p>Для операций, которые комбинируют много строк и возвращают единственный
строковый вывод, используются <span>правила агрегации</span>
стандартного SQL для определения сопоставления результата:</p>

<ul><li><p>Если есть явное <code>COLLATE
<em><code>Y</code></em></code>, использовать <em><code>Y</code></em>.</li>
<li>Если есть явное <code>COLLATE <em><code>Y</code></em></code> и
<code>COLLATE <em><code>Z</code></em></code>, выдать ошибку.</li>

<li>Иначе, если все сопоставления <em><code>Y</code></em>, использовать
<em><code>Y</code></em>.</li>
<li>Иначе у результата нет никакого сопоставления.</p></li></ul>

<p>Например, с <code>CASE ... WHEN a THEN b WHEN b THEN c
COLLATE <em><code>X</code></em> END</code>, получающееся сопоставление
<em><code>X</code></em>. То же самое касается
<a href="sql.htm#union"><code>UNION</code></a>,
<a href="#operator_or"><code>||</code></a>,
<a href="#function_concat"><code>CONCAT()</code></a>,
<a href="#function_elt"><code>ELT()</code></a>,
<a href="#function_greatest"><code>GREATEST()</code></a>,
<a href="#function_if"><code>IF()</code></a> и
<a href="#function_least"><code>LEAST()</code></a>.</p>

<p>Для операций, которые преобразовывают в символьные данные, набор символов
и сопоставление строк, которые следуют из операций, определены переменными
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, которые определяют набор символов и сопоставление соединения по
умолчанию (см. <a href="global.htm#charset-connection">раздел 11.1.4</a>).
Это применяется только к
<a href="#function_cast"><code>CAST()</code></a>,
<a href="#function_conv"><code>CONV()</code></a>,
<a href="#function_format"><code>FORMAT()</code></a>,
<a href="#function_hex"><code>HEX()</code></a> и
<a href="#function_space"><code>SPACE()</code></a>.</p>

<p>Если есть вопрос о наборе символов или сопоставлении результата,
возвращенного строковой функцией, используйте функцию
<a href="#function_charset"><code>CHARSET()</code></a> или
<a href="#function_collation"><code>COLLATION()</code>
</a>, чтобы узнать:
<pre>
mysql&gt; SELECT USER(), CHARSET(USER()), COLLATION(USER());
+----------------+-----------------+-------------------+
| USER()         | CHARSET(USER()) | COLLATION(USER()) |
+----------------+-----------------+-------------------+
| test@localhost | utf8            | utf8_general_ci   |
+----------------+-----------------+-------------------+

mysql&gt; SELECT CHARSET(COMPRESS('abc')), COLLATION(COMPRESS('abc'));
+--------------------------+----------------------------+
| CHARSET(COMPRESS('abc')) | COLLATION(COMPRESS('abc')) |
+--------------------------+----------------------------+
| binary                   | binary                     |
+--------------------------+----------------------------+
</pre>

<h2><a name="numeric-functions"></a>13.6. Числовые функции и операторы</h2>
<p><b>Таблица 13.10. Числовые функции и операторы</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_abs"><code>ABS()
</code></a></td><td>Возвращает абсолютное значение</td></tr>
<tr><td scope="row"><a href="#function_acos"><code>ACOS()</code></a>
</td><td>Возвращает арккосинус</td></tr>
<tr><td scope="row"><a href="#function_asin"><code>ASIN()</code></a>
</td><td>Арксинус</td></tr>
<tr><td scope="row"><a href="#function_atan"><code>ATAN()</code></a>
</td><td>Арктангенс</td></tr>
<tr><td scope="row"><a href="#function_atan2"><code>ATAN2()</code>,
<code>ATAN()</code></a></td><td>Арктангенс двух параметров</td></tr>
<tr><td scope="row"><a href="#function_ceil"><code>CEIL()</code></a>
</td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_ceiling"><code>CEILING()
</code></a></td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_conv"><code>CONV()</code></a>
</td><td>Преобразует числа между системами счисления</td></tr>
<tr><td scope="row"><a href="#function_cos"><code>COS()</code></a>
</td><td>Косинус</td></tr>
<tr><td scope="row"><a href="#function_cot"><code>COT()</code></a>
</td><td>Котангенс</td></tr>
<tr><td scope="row"><a href="#function_crc32"><code>CRC32()</code>
</a></td><td>Значение циклического контроля по избыточности</td></tr>
<tr><td scope="row"><a href="#function_degrees"><code>DEGREES()
</code></a></td><td>Конвертирует радианы в degrees</td></tr>
<tr><td scope="row"><a href="#operator_div"><code>DIV</code></a>
</td><td>Целочисленное деление</td></tr>
<tr><td scope="row"><a href="#operator_divide"><code>/</code></a>
</td><td>Оператор деления</td></tr>
<tr><td scope="row"><a href="#function_exp"><code>EXP()</code></a>
</td><td>Возведение в степень</td></tr>
<tr><td scope="row"><a href="#function_floor"><code>FLOOR()</code>
</a></td><td>Самое большое целочисленное значение, не больше, чем параметр
</td></tr>
<tr><td scope="row"><a href="#function_ln"><code>LN()</code></a>
</td><td>Натуральный логарифм</td></tr>
<tr><td scope="row"><a href="#function_log"><code>LOG()</code></a>
</td><td>Натуральный логарифм первого параметра</td></tr>
<tr><td scope="row"><a href="#function_log10"><code>LOG10()</code>
</a></td><td>Десятичный логарифм</td></tr>
<tr><td scope="row"><a href="#function_log2"><code>LOG2()</code></a>
</td><td>Двоичный логарифм</td></tr>
<tr><td scope="row"><a href="#operator_minus"><code>-</code></a>
</td><td>Оператор "-"</td></tr>
<tr><td scope="row"><a href="#function_mod"><code>MOD()</code></a>
</td><td>Остаток</td></tr>
<tr><td scope="row"><a href="#operator_mod"><code>%</code>,
<code>MOD</code></a></td><td>Модуль</td></tr>
<tr><td scope="row"><a href="#function_pi"><code>PI()</code></a>
</td><td>Значение числа pi</td></tr>
<tr><td scope="row"><a href="#operator_plus"><code>+</code></a></td>
<td>Оператор "+"</td></tr>
<tr><td scope="row"><a href="#function_pow"><code>POW()</code></a>
</td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="#function_power"><code>POWER()</code>
</a></td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="#function_radians"><code>RADIANS()
</code></a></td><td>Конвертирует в радианы</td></tr>
<tr><td scope="row"><a href="#function_rand"><code>RAND()</code></a>
</td><td>Возвратит случайное значение с плавающей запятой</td></tr>
<tr><td scope="row"><a href="#function_round"><code>ROUND()</code>
</a></td><td>Округлит параметр</td></tr>
<tr><td scope="row"><a href="#function_sign"><code>SIGN()</code></a>
</td><td>Знак аргумента</td></tr>
<tr><td scope="row"><a href="#function_sin"><code>SIN()</code></a>
</td><td>Синус</td></tr>
<tr><td scope="row"><a href="#function_sqrt"><code>SQRT()</code></a>
</td><td>Квадратный корень параметра</td></tr>
<tr><td scope="row"><a href="#function_tan"><code>TAN()</code></a>
</td><td>Тангенс</td></tr>
<tr><td scope="row"><a href="#operator_times"><code>*</code></a>
</td><td>Умножение</td></tr>
<tr><td scope="row"><a href="#function_truncate"><code>TRUNCATE()
</code></a></td><td>Урезает к конкретному количеству десятичных разрядов
</td></tr>
<tr><td scope="row"><a href="#operator_unary-minus"><code>-</code>
</a></td><td>Меняет знак аргумента</td></tr></tbody></table>

<h3><a name="arithmetic-functions"></a>13.6.1. Арифметические операторы</h3>
<p><b>Таблица 13.11. Арифметические операторы</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_div"><code>DIV</code>
</a></td><td>Целочисленное деление</td></tr>
<tr><td scope="row"><a href="#operator_divide"><code>/</code></a>
</td><td>Оператор деления</td></tr>
<tr><td scope="row"><a href="#operator_minus"><code>-</code></a>
</td><td>Оператор "-"</td></tr>
<tr><td scope="row"><a href="#operator_mod"><code>%</code>,
<code>MOD</code></a></td><td>Модуль</td></tr>
<tr><td scope="row"><a href="#operator_plus"><code>+</code></a></td>
<td>Оператор "+"</td></tr>
<tr><td scope="row"><a href="#operator_times"><code>*</code></a>
</td><td>Умножение</td></tr>
<tr><td scope="row"><a href="#operator_unary-minus"><code>-</code>
</a></td><td>Меняет знак аргумента</td></tr></tbody></table>

<p>Обычные арифметические операторы доступны. Результат определен
согласно следующим правилам:</p>
<ul><li><p>В случае <a href="#operator_minus"><code>-</code></a>,
<a href="#operator_plus"><code>+</code></a> и
<a href="#operator_times"><code>*</code></a>, результат вычислен с
точностью <a href="types.htm#integer-types"><code>BIGINT</code></a>
(64-bit), если оба операнда целые числа.</li>

<li>Если оба операнда целые числа и любой из них без знака результат целое
число без знака. Для вычитания если включен режим SQL
<a href="server.htm#sqlmode_no_unsigned_subtraction"><code>
NO_UNSIGNED_SUBTRACTION</code></a>, результат со знаком, даже если какой-либо
операнд без знака.</li>

<li>Если любой из операндов
<a href="#operator_plus"><code>+</code></a>,
<a href="#operator_minus"><code>-</code></a>,
<a href="#operator_divide"><code>/</code></a>,
<a href="#operator_times"><code>*</code></a>,
<a href="#operator_mod"><code>%</code></a>
реальное число или строковое значение, точность результата это точность
операнда с максимальной точностью.</li>

<li>В делении, выполненном
<a href="#operator_divide"><code>/</code></a>, масштаб результата,
когда использованы два операнда точного значения является масштабом первого
операнда плюс значение системной переменной
<a href="server.htm#sysvar_div_precision_increment"><code>
div_precision_increment</code></a> (по умолчанию 4). Например, результат
выражения <code>5.05/0.014</code> имеет масштаб шести десятичных разрядов
(<code>360.714286</code>).</p></li></ul>

<p>Эти правила применены для каждой операции так, что вложенные вычисления
подразумевают точность каждого компонента. Следовательно,
<code>(14620 / 9432456) / (24250 / 9432456)</code> сначала сведется к
<code>(0.0014) / (0.0026)</code> с окончательным результатом, имеющим 8
десятичных разрядов (<code>0.60288653</code>).</p>

<p>Из-за этих правил надо следить за тем, что компоненты и субкомпоненты
вычисления используют соответствующий уровень точности. См.
<a href="#cast-functions">раздел 13.10</a>.</p>

<p>Арифметические операторы обращаются к числам. Для других типов значений
альтернативные операции могут быть доступны. Например, чтобы добавить
значения даты, используйте <a href="#function_date-add"><code>
DATE_ADD()</code></a>.</p>

<ul><li><a name="operator_plus"></a><p>
<a href="#operator_plus"><code>+</code></a></p>
<p>Сложение:
<pre>
mysql&gt; SELECT 3+5;
  -&gt; 8
</pre></li>

<li><a name="operator_minus"></a><p>
<a href="#operator_minus"><code>-</code></a></p>
<p>Вычитание:
<pre>
mysql&gt; SELECT 3-5;
  -&gt; -2
</pre></li>

<li><a name="operator_unary-minus"></a><p>
<a href="#operator_unary-minus"><code>-</code></a></p>
<p>Одноместный минус. Этот оператор изменяет знак операнда.
<pre>
mysql&gt; SELECT - 2;
  -&gt; -2
</pre>

<p>Если этот оператор используется с
<a href="types.htm#integer-types"><code>BIGINT</code></a>,
возвращаемое значение также <a href="types.htm#integer-types"><code>BIGINT
</code></a>. Это означает, что Вы должны избегать использования
<code>-</code> на целых числах, у которых может быть значение 2<sup>63</sup>.
</p></li>

<li><a name="operator_times"></a><p>
<a href="#operator_times"><code>*</code></a></p>
<p>Умножение:
<pre>
mysql&gt; SELECT 3*5;
  -&gt; 15
mysql&gt; SELECT 18014398509481984*18014398509481984.0;
  -&gt; 324518553658426726783156020576256.0
mysql&gt; SELECT 18014398509481984*18014398509481984;
  -&gt; out-of-range error
</pre>

<p>Последнее выражение производит ошибку, потому что результат умножения
целого числа превышает 64-битный диапазон
<a href="types.htm#integer-types"><code>BIGINT</code></a>. См.
<a href="types.htm#numeric-types">раздел 12.2</a>.</p></li>

<li><a name="operator_divide"></a><p>
<a href="#operator_divide"><code>/</code></a></p>
<p>Деление:
<pre>
mysql&gt; SELECT 3/5;
  -&gt; 0.60
</pre>

<p>Деление на ноль вернет <code>NULL</code>:
<pre>
mysql&gt; SELECT 102/(1-1);
  -&gt; NULL
</pre>

<p>Деление вычислено с арифметикой
<a href="types.htm#integer-types"><code>BIGINT</code></a>
только если выполнено в контексте, где его результат
преобразован в целое число.</p></li>

<li><a name="operator_div"></a><p>
<a href="#operator_div"><code>DIV</code></a></p>
<p>Деление целого числа. Результат заканчивается любой дробной частью справа
от десятичной запятой.</p>

<p>Если у любого операнда есть тип нецелого числа, операнды преобразованы в
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> и делятся с
использованием арифметики <a href="types.htm#fixed-point-types"><code>DECIMAL
</code></a> прежде, чем преобразовать результат в
<a href="types.htm#integer-types"><code>BIGINT</code></a>.
Если результат превышает диапазон <code>BIGINT</code>, будет ошибка.
<pre>
mysql&gt; SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;
  -&gt; 2, -2, -2, 2
</pre></li>

<li><a name="operator_mod"></a><p>
<a href="#operator_mod"><code><em><code>N</code></em>
% <em><code>M</code></em></code></a>,
<a href="#operator_mod"><code><em><code>N</code></em>
MOD <em><code>M</code></em></code></a></p>
<p>Остаток. Возвращает остаток от деления <em><code>N</code></em> на
<em><code>M</code></em>.</p></li></ul>

<h3><a name="mathematical-functions"></a>13.6.2. Математические функции</h3>
<a name="idm139965354921920"></a><p><b>Таблица 13.12. Математические функции
</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_abs"><code>ABS()
</code></a></td><td>Возвращает абсолютное значение</td></tr>
<tr><td scope="row"><a href="#function_acos"><code>ACOS()</code></a>
</td><td>Возвращает арккосинус</td></tr>
<tr><td scope="row"><a href="#function_asin"><code>ASIN()</code></a>
</td><td>Арксинус</td></tr>
<tr><td scope="row"><a href="#function_atan"><code>ATAN()</code></a>
</td><td>Арктангенс</td></tr>
<tr><td scope="row"><a href="#function_atan2"><code>ATAN2()</code>,
<code>ATAN()</code></a></td><td>Арктангенс двух параметров</td></tr>
<tr><td scope="row"><a href="#function_ceil"><code>CEIL()</code></a>
</td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_ceiling"><code>CEILING()
</code></a></td><td>Возвратить самое маленькое целочисленное значение
не меньше, чем параметр</td></tr>
<tr><td scope="row"><a href="#function_conv"><code>CONV()</code></a>
</td><td>Преобразует числа между системами счисления</td></tr>
<tr><td scope="row"><a href="#function_cos"><code>COS()</code></a>
</td><td>Косинус</td></tr>
<tr><td scope="row"><a href="#function_cot"><code>COT()</code></a>
</td><td>Котангенс</td></tr>
<tr><td scope="row"><a href="#function_crc32"><code>CRC32()</code>
</a></td><td>Значение циклического контроля по избыточности</td></tr>
<tr><td scope="row"><a href="#function_degrees"><code>DEGREES()
</code></a></td><td>Конвертирует радианы в degrees</td></tr>
<tr><td scope="row"><a href="#function_exp"><code>EXP()</code></a>
</td><td>Возведение в степень</td></tr>
<tr><td scope="row"><a href="#function_floor"><code>FLOOR()</code>
</a></td><td>Самое большое целочисленное значение, не больше, чем параметр
</td></tr>
<tr><td scope="row"><a href="#function_ln"><code>LN()</code></a>
</td><td>Натуральный логарифм</td></tr>
<tr><td scope="row"><a href="#function_log"><code>LOG()</code></a>
</td><td>Натуральный логарифм первого параметра</td></tr>
<tr><td scope="row"><a href="#function_log10"><code>LOG10()</code>
</a></td><td>Десятичный логарифм</td></tr>
<tr><td scope="row"><a href="#function_log2"><code>LOG2()</code></a>
</td><td>Двоичный логарифм</td></tr>
<tr><td scope="row"><a href="#function_mod"><code>MOD()</code></a>
</td><td>Остаток</td></tr>
<tr><td scope="row"><a href="#function_pi"><code>PI()</code></a>
</td><td>Значение числа pi</td></tr>
<tr><td scope="row"><a href="#function_pow"><code>POW()</code></a>
</td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="#function_power"><code>POWER()</code>
</a></td><td>Возводит в указанную степень</td></tr>
<tr><td scope="row"><a href="#function_radians"><code>RADIANS()
</code></a></td><td>Конвертирует в радианы</td></tr>
<tr><td scope="row"><a href="#function_rand"><code>RAND()</code></a>
</td><td>Возвратит случайное значение с плавающей запятой</td></tr>
<tr><td scope="row"><a href="#function_round"><code>ROUND()</code>
</a></td><td>Округлит параметр</td></tr>
<tr><td scope="row"><a href="#function_sign"><code>SIGN()</code></a>
</td><td>Знак аргумента</td></tr>
<tr><td scope="row"><a href="#function_sin"><code>SIN()</code></a>
</td><td>Синус</td></tr>
<tr><td scope="row"><a href="#function_sqrt"><code>SQRT()</code></a>
</td><td>Квадратный корень параметра</td></tr>
<tr><td scope="row"><a href="#function_tan"><code>TAN()</code></a>
</td><td>Тангенс</td></tr>
<tr><td scope="row"><a href="#function_truncate"><code>TRUNCATE()
</code></a></td><td>Урезает к конкретному количеству десятичных разрядов
</td></tr></tbody></table>

<p>Все математические функции вернут <code>NULL</code> в случае ошибки.</p>
<ul><li><a name="function_abs"></a><p>
<a href="#function_abs"><code>ABS(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает абсолютное значение <em><code>X</code></em>.
<pre>
mysql&gt; SELECT ABS(2);
    -&gt; 2
mysql&gt; SELECT ABS(-32);
    -&gt; 32
</pre>
<p>Эту функцию безопасно использовать с
<a href="types.htm#integer-types"><code>BIGINT</code></a>.</p></li>

<li><a name="function_acos"></a><p>
<a href="#function_acos"><code>ACOS(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает арккосинус <em><code>X</code></em> то есть, значение, косинус
которого <em><code>X</code></em>. Вернет <code>NULL</code>, если
<em><code>X</code></em> не находится в диапазоне
от <code>-1</code> до <code>1</code>.
<pre>
mysql&gt; SELECT ACOS(1);
    -&gt; 0
mysql&gt; SELECT ACOS(1.0001);
    -&gt; NULL
mysql&gt; SELECT ACOS(0);
    -&gt; 1.5707963267949
</pre></li>

<li><a name="function_asin"></a><p>
<a href="#function_asin"><code>ASIN(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает арксинус <em><code>X</code></em> то есть, значение, синус
которого <em><code>X</code></em>. Вернет <code>NULL</code>, если
<em><code>X</code></em> не находится в диапазоне
от <code>-1</code> до <code>1</code>.
<pre>
mysql&gt; SELECT ASIN(0.2);
    -&gt; 0.20135792079033
mysql&gt; SELECT ASIN('foo');
+-------------+
| ASIN('foo') |
+-------------+
| 0           |
+-------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+-----------------------------------------+
| Level   | Code | Message                                 |
+---------+------+-----------------------------------------+
| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |
+---------+------+-----------------------------------------+
</pre></li>

<li><a name="function_atan"></a><p>
<a href="#function_atan"><code>ATAN(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает арктангенс <em><code>X</code></em>,
то есть, значение, тангенс которого <em><code>X</code></em>.
<pre>
mysql&gt; SELECT ATAN(2);
    -&gt; 1.1071487177941
mysql&gt; SELECT ATAN(-2);
    -&gt; -1.1071487177941
</pre></li>

<li><a name="function_atan2"></a><p>
<a href="#function_atan2"><code>ATAN(<em><code>Y</code></em>,
<em><code>X</code></em>)</code></a>,
<a href="#function_atan2"><code>ATAN2(<em><code>Y</code></em>,
<em><code>X</code></em>)</code></a></p>
<p>Возвращает арктангенс этих двух переменных
<em><code>X</code></em> и <em><code>Y</code></em>.
Это подобно вычислению арктангенса
<code><em><code>Y</code></em>/<em><code>X</code></em></code>,
за исключением того, что знаки обоих параметров используются, чтобы
определить сектор результата.
<pre>
mysql&gt; SELECT ATAN(-2,2);
    -&gt; -0.78539816339745
mysql&gt; SELECT ATAN2(PI(),0);
    -&gt; 1.5707963267949
</pre></li>

<li><a name="function_ceil"></a><p>
<a href="#function_ceil"><code>CEIL(<em><code>X</code></em>)</code>
</a></p>
<p><a href="#function_ceil"><code>CEIL()</code></a> синоним для
<a href="#function_ceiling"><code>CEILING()</code></a>.</p></li>

<li><a name="function_ceiling"></a><p>
<a href="#function_ceiling"><code>CEILING(<em><code>X</code></em>)
</code></a></p>
<p>Возвращает самое маленькое целочисленное значение не меньше
<em><code>X</code></em>.
<pre>
mysql&gt; SELECT CEILING(1.23);
  -&gt; 2
mysql&gt; SELECT CEILING(-1.23);
  -&gt; -1
</pre>

<p>Для числовых параметров точного значения у возвращаемого значения будет
числовой тип точного значения. Для строки или параметров с плавающей запятой
у возвращаемого значения будет тип с плавающей запятой.</p></li>

<li><a name="function_conv"></a><p>
<a href="#function_conv"><code>CONV(<em><code>N</code></em>,<em>
<code>from_base</code></em>,<em><code>to_base</code></em>)</code></a></p>
<p>Конвертирует между различными основаниями системы счисления. Возвращает
строковое представление числа <em><code>N</code></em>,
преобразованного из основы <em><code>from_base</code></em> в
<em><code>to_base</code></em>. Возвращает <code>NULL</code>,
если какой-либо параметр <code>NULL</code>. Параметр <em><code>N</code></em>
интерпретируется как целое число, но может быть определен как целое число или
строка. Минимальная основа <code>2</code> максимальная <code>36</code>.
Если <em><code>from_base</code></em> отрицательное число,
<em><code>N</code></em> расценено как число со знаком. Иначе
<em><code>N</code></em> как без знака. <a href="#function_conv">
<code>CONV()</code></a> работает с 64-битной точностью.
<pre>
mysql&gt; SELECT CONV('a',16,2);
    -&gt; '1010'
mysql&gt; SELECT CONV('6E',18,8);
    -&gt; '172'
mysql&gt; SELECT CONV(-17,10,-18);
    -&gt; '-H'
mysql&gt; SELECT CONV(10+'10'+'10'+X'0a',10,10);
    -&gt; '40'
</pre></li>

<li><a name="function_cos"></a><p>
<a href="#function_cos"><code>COS(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает косинус <em><code>X</code></em>, где <em><code>X</code>
</em> задан в радианах.
<pre>
mysql&gt; SELECT COS(PI());
    -&gt; -1
</pre></li>

<li><a name="function_cot"></a><p>
<a href="#function_cot"><code>COT(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает котангенс <em><code>X</code></em>.
<pre>
mysql&gt; SELECT COT(12);
    -&gt; -1.5726734063977
mysql&gt; SELECT COT(0);
    -&gt; NULL
</pre></li>

<li><a name="function_crc32"></a><p>
<a href="#function_crc32"><code>CRC32(<em><code>expr</code></em>)
</code></a></p>

<p>Вычисляет значение циклического контроля по избыточности и возвращает
32-битное значение без знака. Результат <code>NULL</code>, если параметр
<code>NULL</code>. Параметром, как ожидают, будет строка.
<pre>
mysql&gt; SELECT CRC32('MySQL');
    -&gt; 3259397556
mysql&gt; SELECT CRC32('mysql');
    -&gt; 2501908538
</pre></li>

<li><a name="function_degrees"></a><p>
<a href="#function_degrees"><code>DEGREES(<em><code>X</code></em>)
</code></a></p>

<p>Возвращает параметр <em><code>X</code></em>, преобразованный
из радиан в градусы.
<pre>
mysql&gt; SELECT DEGREES(PI());
  -&gt; 180
mysql&gt; SELECT DEGREES(PI() / 2);
  -&gt; 90
</pre></li>

<li><a name="function_exp"></a><p>
<a href="#function_exp"><code>EXP(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает значение <span><em>e</em></span> (основание натуральных
логарифмов), возведенное в степень <em><code>X</code></em>.
Инверсия этой функции <a href="#function_log"><code>LOG()</code></a>
(с использованием единственного параметра) или
<a href="#function_ln"><code>LN()</code></a>.
<pre>
mysql&gt; SELECT EXP(2);
  -&gt; 7.3890560989307
mysql&gt; SELECT EXP(-2);
  -&gt; 0.13533528323661
mysql&gt; SELECT EXP(0);
  -&gt; 1
</pre></li>

<li><a name="function_floor"></a><p>
<a href="#function_floor"><code>FLOOR(<em><code>X</code></em>)
</code></a></p>
<p>Возвращает самое большое целочисленное значение, не больше
<em><code>X</code></em>.
<pre>
mysql&gt; SELECT FLOOR(1.23), FLOOR(-1.23);
  -&gt; 1, -2
</pre>

<p>Для числовых параметров точного значения у возвращаемого значения будет
числовой тип точного значения. Для строки или параметров с плавающей запятой
у возвращаемого значения будет тип с плавающей запятой.</p></li>

<li><a href="#function_format"><code>FORMAT(<em><code>X</code></em>,
<em><code>D</code></em>)</code></a></p>
<p>Форматирует число <em><code>X</code></em> как <code>'#,###,###.##'</code>,
округляя до <em><code>D</code></em> десятичных разрядов и возвращая результат
как строку. Для деталей см. <a href="#string-functions">раздел 13.5
</a>.</li>

<li><a href="#function_hex"><code>HEX(N_or_S)</code></a></p>
<p>Эта функция может использоваться, чтобы получить шестнадцатеричное
представление десятичного числа или строки. Алгоритм изменяется, согласно
типу параметра. См. описание этой функции в
<a href="#string-functions">разделе 13.5</a>.</p></li>

<li><a name="function_ln"></a><p>
<a href="#function_ln"><code>LN(<em><code>X</code></em>)
</code></a></p>
<p>Возвращает натуральный логарифм <em><code>X</code></em>, то есть логарифм
<em><code>X</code></em> по основанию <span><em>e</em></span>. Если
<em><code>X</code></em> меньше или равно 0.0E0, функция вернет
<code>NULL</code> и выдаст предупреждение
<span>Invalid argument for logarithm</span>.
<pre>
mysql&gt; SELECT LN(2);
  -&gt; 0.69314718055995
mysql&gt; SELECT LN(-2);
  -&gt; NULL
</pre>

<p>Эта функция синонимична
<a href="#function_log"><code>LOG(<em><code>X</code></em>)</code>
</a>. Инверсия этой функции <a href="#function_exp"><code>EXP()
</code></a>.</p></li>

<li><a name="function_log"></a><p>
<a href="#function_log"><code>LOG(<em><code>X</code></em>)</code>
</a>, <a href="#function_log"><code>LOG(<em><code>B</code></em>,
<em><code>X</code></em>)</code></a></p>

<p>Если вызвана с одним параметром, эта функция возвращает натуральный
логарифм <em><code>X</code></em>. Если <em><code>X</code></em> меньше или
равно 0.0E0, функция вернет <code>NULL</code> и выдаст предупреждение
<span>Invalid argument for logarithm</span>.</p>

<p>Инверсия этой функции (когда вызвана с единственным параметром)
<a href="#function_exp"><code>EXP()</code></a>.
<pre>
mysql&gt; SELECT LOG(2);
  -&gt; 0.69314718055995
mysql&gt; SELECT LOG(-2);
  -&gt; NULL
</pre>

<p>Если вызвана с двумя параметрами, эта функция возвращает логарифм
<em><code>X</code></em> по основанию <em><code>B</code></em>. Если
<em><code>X</code></em> меньше или равно 0 или <em><code>B</code></em>
меньше или равно 1, вернется <code>NULL</code>.
<pre>
mysql&gt; SELECT LOG(2,65536);
  -&gt; 16
mysql&gt; SELECT LOG(10,100);
  -&gt; 2
mysql&gt; SELECT LOG(1,100);
  -&gt; NULL
</pre>

<p><a href="#function_log"><code>LOG(<em><code>B</code></em>,
<em><code>X</code></em>)</code></a> эквивалентна
<a href="#function_log"><code>LOG(<em><code>X</code></em>) /
LOG(<em><code>B</code></em>)</code></a>.</p></li>

<li><a name="function_log2"></a><p>
<a href="#function_log2"><code>LOG2(<em><code>X</code></em>)
</code></a></p>

<p>Возвращает логарифм <code><em><code>X</code></em></code> по основанию
2. Если <em><code>X</code></em> меньше или
равно 0.0E0, функция вернет <code>NULL</code> и выдаст предупреждение
<span>Invalid argument for logarithm</span>.
<pre>
mysql&gt; SELECT LOG2(65536);
  -&gt; 16
mysql&gt; SELECT LOG2(-100);
  -&gt; NULL
</pre>

<p><a href="#function_log2"><code>LOG2()</code></a>
полезна для обнаружения, какое количество битов число требует для хранения.
Эта функция эквивалентна выражению
<a href="#function_log"><code>LOG(<em><code>X</code></em>) /
LOG(2)</code></a>.</p></li>

<li><a name="function_log10"></a><p>
<a href="#function_log10"><code>LOG10(<em><code>X</code></em>)
</code></a></p>

<p>Возвращает логарифм <code><em><code>X</code></em></code> по основанию
10. Если <em><code>X</code></em> меньше или
равно 0.0E0, функция вернет <code>NULL</code> и выдаст предупреждение
<span>Invalid argument for logarithm</span>.
<pre>
mysql&gt; SELECT LOG10(2);
    -&gt; 0.30102999566398
mysql&gt; SELECT LOG10(100);
    -&gt; 2
mysql&gt; SELECT LOG10(-100);
    -&gt; NULL
</pre>

<p><a href="#function_log10"><code>LOG10(<em><code>X</code></em>)
</code></a> эквивалентна <a href="#function_log"><code>LOG(10,
<em><code>X</code></em>)</code></a>.</p></li>

<li><a name="function_mod"></a><p>
<a href="#function_mod"><code>MOD(<em><code>N</code></em>,
<em><code>M</code></em>)</code></a>,
<a href="#operator_mod"><code><em><code>N</code></em>
% <em><code>M</code></em></code></a>,
<a href="#operator_mod"><code><em><code>N</code></em>
MOD <em><code>M</code></em></code></a></p>

<p>Возвращает остаток от деления <em><code>N</code></em> на
<em><code>M</code></em>.
<pre>
mysql&gt; SELECT MOD(234, 10);
  -&gt; 4
mysql&gt; SELECT 253 % 7;
  -&gt; 1
mysql&gt; SELECT MOD(29,9);
  -&gt; 2
mysql&gt; SELECT 29 MOD 9;
  -&gt; 2
</pre>
<p>Эту функцию безопасно использовать с
<a href="types.htm#integer-types"><code>BIGINT</code></a>.</p>

<p><a href="#function_mod"><code>MOD()</code></a>
также работает с значениями, которые имеют дробную часть, и возвращает точный
остаток после деления:
<pre>
mysql&gt; SELECT MOD(34.5,3);
    -&gt; 1.5
</pre>
<p><a href="#function_mod"><code>MOD(<em><code>N</code></em>,0)
</code></a> вернет <code>NULL</code>.</p></li>

<li><a name="function_pi"></a><p>
<a href="#function_pi"><code>PI()</code></a></p>
<p>Возвращает значение pi. По умолчанию количество выведенных десятичных
разрядов семь, но MySQL использует полное значение точности double внутренне.
<pre>
mysql&gt; SELECT PI();
  -&gt; 3.141593
mysql&gt; SELECT PI()+0.000000000000000000;
  -&gt; 3.141592653589793116
</pre></li>

<li><a name="function_pow"></a><p>
<a href="#function_pow"><code>POW(<em><code>X</code></em>,
<em><code>Y</code></em>)</code></a></p>

<p>Возвращает значение <em><code>X</code></em> возведенное в степень
<em><code>Y</code></em>.
<pre>
mysql&gt; SELECT POW(2,2);
  -&gt; 4
mysql&gt; SELECT POW(2,-2);
  -&gt; 0.25
</pre></li>

<li><a name="function_power"></a><p>
<a href="#function_power"><code>POWER(<em><code>X</code></em>,
<em><code>Y</code></em>)</code></a></p>
<p>Синоним для <a href="#function_pow"><code>POW()</code></a>.
</p></li>

<li><a name="function_radians"></a><p>
<a href="#function_radians"><code>RADIANS(<em><code>X</code></em>)
</code></a></p>
<p>Возвращает параметр <em><code>X</code></em>, преобразованный из градусов
в радианы. Отметьте, что 0 радиан равняется 180 градусов.
<pre>
mysql&gt; SELECT RADIANS(90);
  -&gt; 1.5707963267949
</pre></li>

<li><a name="function_rand"></a><p>
<a href="#function_rand"><code>RAND()</code></a>,
<a href="#function_rand"><code>RAND(<em><code>N</code></em>)
</code></a></p>
<p>Возвращает случайное значение с плавающей запятой
<em><code>v</code></em> в диапазоне
<code>0</code> &lt;= <em><code>v</code></em> &lt; <code>1.0</code>.
Если постоянный параметр целого числа <em><code>N</code></em> указан,
это используется в качестве стартового значения, которое производит
повторимую последовательность значений столбцов. В следующем примере
отметьте, что последовательности значений, произведенных
<code>RAND(3)</code> те же самые.
<pre>
mysql&gt; CREATE TABLE t (i INT);
Query OK, 0 rows affected (0.42 sec)

mysql&gt; INSERT INTO t VALUES(1),(2),(3);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT i, RAND() FROM t;
+---+------------------+
| i | RAND()           |
+---+------------------+
| 1 | 0.61914388706828 |
| 2 | 0.93845168309142 |
| 3 | 0.83482678498591 |
+---+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND(3) FROM t;
+---+------------------+
| i | RAND(3)          |
+---+------------------+
| 1 | 0.90576975597606 |
| 2 | 0.37307905813035 |
| 3 | 0.14808605345719 |
+---+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND() FROM t;
+---+------------------+
| i | RAND()           |
+---+------------------+
| 1 | 0.35877890638893 |
| 2 | 0.28941420772058 |
| 3 | 0.37073435016976 |
+---+------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT i, RAND(3) FROM t;
+---+------------------+
| i | RAND(3)          |
+---+------------------+
| 1 | 0.90576975597606 |
| 2 | 0.37307905813035 |
| 3 | 0.14808605345719 |
+---+------------------+
3 rows in set (0.01 sec)
</pre>

<p>С постоянным инициализатором, настройка происходит однократно, до
выполнения запроса. Если непостоянный инициализатор (такой, как имя столбца)
используется в качестве параметра, настройка происходит со значением для
каждого вызова <a href="#function_rand"><code>RAND()</code></a>.
Одно значение этого то, что для равных значений параметра
<a href="#function_rand"><code>RAND()</code></a>
возвратит то же самое значение каждый раз.</p>

<p>Получить случайное целое число <em><code>R</code></em> в диапазоне
<em><code>i</code></em> &lt;= <em><code>R</code></em> &lt;
<em><code>j</code></em> можно, используя выражение
<a href="#function_floor"><code>FLOOR(<em><code>i</code></em>
+ RAND() * (<em><code>j</code></em></code></a>
<code><em><code>i</code></em>))</code>. Например, чтобы получить случайное
целое число в диапазоне
<code>7</code> &lt;= <em><code>R</code></em> &lt; <code>12</code>,
Вы можете использовать следующий запрос:
<pre>
SELECT FLOOR(7 + (RAND() * 5));
</pre>

<p><a href="#function_rand"><code>RAND()</code></a> в предложении
<code>WHERE</code> переоценено каждый раз,
когда выполняется <code>WHERE</code>.</p>

<p>Использование столбца с <a href="#function_rand"><code>RAND()
</code></a> в предложении <code>ORDER BY</code> или <code>GROUP BY</code>
может привести к неожиданным результатам потому что для любого запроса
<a href="#function_rand"><code>RAND()</code></a>
может быть оценено несколько раз для той же самой строки, каждый раз
возвращая различный результат. Однако, Вы можете получить
строки в случайном порядке:
<pre>
mysql&gt; SELECT * FROM <em><code>tbl_name</code></em> ORDER BY RAND();
</pre>

<p><code>ORDER BY RAND()</code> объединенный с <code>LIMIT</code> полезен
для случайной выборки из ряда строк:
<pre>
mysql&gt; SELECT * FROM table1, table2 WHERE a=b AND c&lt;d
                   ORDER BY RAND() LIMIT 1000;
</pre>

<p><a href="#function_rand"><code>RAND()</code></a>
не предназначен, чтобы быть прекрасным случайным генератором. Это быстрый
способ произвести случайные числа по требованию, который портативен между
платформами для той же самой версии MySQL.</p>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
установлено в <code>STATEMENT</code> (Bug #49222).</p></li>

<li><a name="function_round"></a><p>
<a href="#function_round"><code>ROUND(<em><code>X</code></em>)
</code></a>, <a href="#function_round"><code>ROUND(<em><code>X
</code></em>, <em><code>D</code></em>)</code></a></p>

<p>Округляет параметр <em><code>X</code></em> до <em><code>D</code></em>
десятичных разрядов. Округляющий алгоритм зависит от типа данных
<em><code>X</code></em>. <em><code>D</code></em> по умолчанию 0, если не
определен. <em><code>D</code></em> может быть отрицательным, чтобы
<em><code>D</code></em> цифр в <em><code>X</code></em> слева от десятичной
точки стали нулями.
<pre>
mysql&gt; SELECT ROUND(-1.23);
  -&gt; -1
mysql&gt; SELECT ROUND(-1.58);
  -&gt; -2
mysql&gt; SELECT ROUND(1.58);
  -&gt; 2
mysql&gt; SELECT ROUND(1.298, 1);
  -&gt; 1.3
mysql&gt; SELECT ROUND(1.298, 0);
  -&gt; 1
mysql&gt; SELECT ROUND(23.298, -1);
  -&gt; 20
</pre>

<p>Тип возврата тот же самый тип как у первого параметра (предполагается,
что это целое число, double или decimal). Это означает, что для параметра
целого числа, результат целое число:
<pre>
mysql&gt; SELECT ROUND(150.000,2), ROUND(150,2);
+------------------+--------------+
| ROUND(150.000,2) | ROUND(150,2) |
+------------------+--------------+
| 150.00           | 150          |
+------------------+--------------+
</pre>

<p><a href="#function_round"><code>ROUND()</code></a>
использует следующие правила в зависимости от типа первого параметра:</p>
<ul><li><p>Для чисел точного значения
<a href="#function_round"><code>ROUND()</code></a>
использует правило <span>round half away from zero</span> или <span>round
toward nearest</span>: значение с дробной частью .5 или больше округлено к
следующему целому числу, если положительное, или вниз к следующему целому
числу, если отрицательное. Другими словами, это округлено дальше от ноля.
Значение с дробной частью меньше .5 округлено в меньшую сторону к следующему
целому числу, если положительное, или до следующего целого
числа, если отрицательное.</li>

<li>Для чисел приблизительной точности результат зависит от библиотеки C. На
многих системах это означает, что
<a href="#function_round"><code>ROUND()</code></a> использует
правило "round to nearest even": значение с любой дробной частью округлено к
самому близкому целому числу.</p></li></ul>

<p>Следующие примеры показывают, как округление отличается для
точных и приблизительных чисел:
<pre>
mysql&gt; SELECT ROUND(2.5), ROUND(25E-1);
+------------+--------------+
| ROUND(2.5) | ROUND(25E-1) |
+------------+--------------+
| 3          | 2            |
+------------+--------------+
</pre></li>

<li><a name="function_sign"></a><p>
<a href="#function_sign"><code>SIGN(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает знак параметра как <code>-1</code>, <code>0</code> или
<code>1</code>, в зависимости от того, каким является <em><code>X</code>
</em>: отрицательным, нулем или положительным.
<pre>
mysql&gt; SELECT SIGN(-32);
  -&gt; -1
mysql&gt; SELECT SIGN(0);
  -&gt; 0
mysql&gt; SELECT SIGN(234);
  -&gt; 1
</pre></li>

<li><a name="function_sin"></a><p>
<a href="#function_sin"><code>SIN(<em><code>X</code></em>)</code>
</a></p>
<p>Возвращает синус <em><code>X</code></em>,
где <em><code>X</code></em> дан в радианах.
<pre>
mysql&gt; SELECT SIN(PI());
  -&gt; 1.2246063538224e-16
mysql&gt; SELECT ROUND(SIN(PI()));
  -&gt; 0
</pre></li>

<li><a name="function_sqrt"></a><p>
<a href="#function_sqrt"><code>SQRT(<em><code>X</code></em>)</code>
</a></p>

<p>Возвращает квадратный корень неотрицательного числа
<em><code>X</code></em>.
<pre>
mysql&gt; SELECT SQRT(4);
  -&gt; 2
mysql&gt; SELECT SQRT(20);
  -&gt; 4.4721359549996
mysql&gt; SELECT SQRT(-16);
  -&gt; NULL
</pre></li>

<li><a name="function_tan"></a><p>
<a href="#function_tan"><code>TAN(<em><code>X</code></em>)
</code></a></p>

<p>Возвращает тангенс <em><code>X</code></em>, где
<em><code>X</code></em> дан в радианах.
<pre>
mysql&gt; SELECT TAN(PI());
  -&gt; -1.2246063538224e-16
mysql&gt; SELECT TAN(PI()+1);
  -&gt; 1.5574077246549
</pre></li>

<li><a name="function_truncate"></a><p>
<a href="#function_truncate"><code>TRUNCATE(<em><code>X</code></em>,
<em><code>D</code></em>)</code></a></p>
<p>Возвращает число <em><code>X</code></em>, усеченное до
<em><code>D</code></em> десятичных разрядов. Если
<em><code>D</code></em> <code>0</code>, у результата нет никакой десятичной
запятой или дробной части. <em><code>D</code></em> может быть отрицательным,
чтобы <em><code>D</code></em> цифр <em><code>X</code></em> слева от
запятой стали нулями.
<pre>
mysql&gt; SELECT TRUNCATE(1.223,1);
  -&gt; 1.2
mysql&gt; SELECT TRUNCATE(1.999,1);
  -&gt; 1.9
mysql&gt; SELECT TRUNCATE(1.999,0);
  -&gt; 1
mysql&gt; SELECT TRUNCATE(-1.999,1);
  -&gt; -1.9
mysql&gt; SELECT TRUNCATE(122,-2);
 -&gt; 100
mysql&gt; SELECT TRUNCATE(10.28*100,0);
 -&gt; 1028
</pre>
<p>Все числа округлены к нолю.</p></li></ul>

<h2><a name="date-and-time-functions"></a>13.7. Функции даты и времени</h2>
<a name="idm139965354377648"></a><p><b>Таблица 13.13. Функции Date/Time</b>
</p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_adddate"><code>
ADDDATE()</code></a></td><td>Добавляет интервал времени к значению даты
</td></tr>
<tr><td scope="row"><a href="#function_addtime"><code>ADDTIME()
</code></a></td><td>Добавляет время</td></tr>
<tr><td scope="row"><a href="#function_convert-tz"><code>
CONVERT_TZ()</code></a></td><td>Преобразует временные зоны</td></tr>
<tr><td scope="row"><a href="#function_curdate"><code>CURDATE()
</code></a></td><td>Текущяя дата</td></tr>
<tr><td scope="row"><a href="#function_current-date"><code>
CURRENT_DATE()</code>, <code>CURRENT_DATE</code></a></td><td>
Синоним для CURDATE()</td></tr>
<tr><td scope="row"><a href="#function_current-time"><code>
CURRENT_TIME()</code>, <code>CURRENT_TIME</code></a></td><td>
Синоним для CURTIME()</td></tr>
<tr><td scope="row"><a href="#function_current-timestamp"><code>
CURRENT_TIMESTAMP()</code>, <code>CURRENT_TIMESTAMP</code></a></td><td>
Синоним для NOW()</td></tr>
<tr><td scope="row"><a href="#function_curtime"><code>CURTIME()
</code></a></td><td>Текущее время</td></tr>
<tr><td scope="row"><a href="#function_date"><code>DATE()</code></a>
</td><td>Извлекает часть даты из date или datetime</td></tr>
<tr><td scope="row"><a href="#function_date-add"><code>DATE_ADD()
</code></a></td><td>Добавляет интервал к дате</td></tr>
<tr><td scope="row"><a href="#function_date-format"><code>
DATE_FORMAT()</code></a></td><td>Форматирует дату как надо</td></tr>
<tr><td scope="row"><a href="#function_date-sub"><code>DATE_SUB()
</code></a></td><td>Вычитает интервал из даты</td></tr>
<tr><td scope="row"><a href="#function_datediff"><code>DATEDIFF()
</code></a></td><td>Вычитает две даты</td></tr>
<tr><td scope="row"><a href="#function_day"><code>DAY()</code></a>
</td><td>Синоним для DAYOFMONTH()</td></tr>
<tr><td scope="row"><a href="#function_dayname"><code>DAYNAME()
</code></a></td><td>Название дня</td></tr>
<tr><td scope="row"><a href="#function_dayofmonth"><code>
DAYOFMONTH()</code></a></td><td>День месяца (0-31)</td></tr>
<tr><td scope="row"><a href="#function_dayofweek"><code>DAYOFWEEK()
</code></a></td><td>День недели (индекс)</td></tr>
<tr><td scope="row"><a href="#function_dayofyear"><code>DAYOFYEAR()
</code></a></td><td>День года (1-366)</td></tr>
<tr><td scope="row"><a href="#function_extract"><code>EXTRACT()
</code></a></td><td>Извлекает часть даты</td></tr>
<tr><td scope="row"><a href="#function_from-days"><code>FROM_DAYS()
</code></a></td><td>Конвертирует число дней в дату</td></tr>
<tr><td scope="row"><a href="#function_from-unixtime"><code>
FROM_UNIXTIME()</code></a></td><td>Форматирует Unix timestamp в дату</td>
</tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT()</code></a></td><td>Дата, сформатированная в строку</td></tr>
<tr><td scope="row"><a href="#function_hour"><code>HOUR()</code></a>
</td><td>Извлекает час</td></tr>
<tr><td scope="row"><a href="#function_last-day"><code>LAST_DAY
</code></a></td><td>Последний день месяца для параметра</td></tr>
<tr><td scope="row"><a href="#function_localtime"><code>LOCALTIME()
</code>, <code>LOCALTIME</code></a></td><td>Синоним для NOW()</td></tr>
<tr><td scope="row"><a href="#function_localtimestamp"><code>
LOCALTIMESTAMP</code>, <code>LOCALTIMESTAMP()</code></a></td><td>
Синоним для NOW()</td></tr>
<tr><td scope="row"><a href="#function_makedate"><code>MAKEDATE()
</code></a></td><td>Создает дату из года и дня года</td></tr>
<tr><td scope="row"><a href="#function_maketime"><code>MAKETIME()
</code></a></td><td>Создает время из часа, минуты и секунды</td></tr>
<tr><td scope="row"><a href="#function_microsecond"><code>
MICROSECOND()</code></a></td><td>Возвратит микросекунды из параметра</td>
</tr>
<tr><td scope="row"><a href="#function_minute"><code>MINUTE()</code>
</a></td><td>Минута из параметра</td></tr>
<tr><td scope="row"><a href="#function_month"><code>MONTH()</code>
</a></td><td>Месяц из значения даты</td></tr>
<tr><td scope="row"><a href="#function_monthname"><code>MONTHNAME()
</code></a></td><td>Имя месяца</td></tr>
<tr><td scope="row"><a href="#function_now"><code>NOW()</code></a>
</td><td>Возвратит текущую дату и время</td></tr>
<tr><td scope="row"><a href="#function_period-add"><code>
PERIOD_ADD()</code></a></td><td>Добавляет период к году и месяцу</td></tr>
<tr><td scope="row"><a href="#function_period-diff"><code>
PERIOD_DIFF()</code></a></td><td>Возвратит число месяцев между периодами</td>
</tr>
<tr><td scope="row"><a href="#function_quarter"><code>QUARTER()
</code></a></td><td>Квартал из значения date</td></tr>
<tr><td scope="row"><a href="#function_sec-to-time"><code>
SEC_TO_TIME()</code></a></td><td>Конвертирует секунды в формат 'HH:MM:SS'
</td></tr>
<tr><td scope="row"><a href="#function_second"><code>SECOND()</code>
</a></td><td>Возвратит секунды (0-59)</td></tr>
<tr><td scope="row"><a href="#function_str-to-date"><code>
STR_TO_DATE()</code></a></td><td>Конвертирует строку в дату</td></tr>
<tr><td scope="row"><a href="#function_subdate"><code>SUBDATE()
</code></a></td><td>Синоним для DATE_SUB(), когда вызвана с тремя параметрами
</td></tr>
<tr><td scope="row"><a href="#function_subtime"><code>SUBTIME()
</code></a></td><td>Вычитает время</td></tr>
<tr><td scope="row"><a href="#function_sysdate"><code>SYSDATE()
</code></a></td><td>Время выполнения функции</td></tr>
<tr><td scope="row"><a href="#function_time"><code>TIME()</code></a>
</td><td>Извлекает часть времени из выражения</td></tr>
<tr><td scope="row"><a href="#function_time-format"><code>
TIME_FORMAT()</code></a></td><td>Форматирует время</td></tr>
<tr><td scope="row"><a href="#function_time-to-sec"><code>
TIME_TO_SEC()</code></a></td><td>
Возвратит параметр, преобразованный в секунды</td></tr>
<tr><td scope="row"><a href="#function_timediff"><code>TIMEDIFF()
</code></a></td><td>Вычитает время</td></tr>
<tr><td scope="row"><a href="#function_timestamp"><code>TIMESTAMP()
</code></a></td><td>С единственным параметром эта функция возвращает дату или
выражение datetime, с двумя параметрами, их сумму</td></tr>
<tr><td scope="row"><a href="#function_timestampadd"><code>
TIMESTAMPADD()</code></a></td><td>Добавляет интервал к datetime</td></tr>
<tr><td scope="row"><a href="#function_timestampdiff"><code>
TIMESTAMPDIFF()</code></a></td><td>Вычитает интервал из datetime</td></tr>
<tr><td scope="row"><a href="#function_to-days"><code>TO_DAYS()
</code></a></td><td>Возвратит параметр даты, преобразованный в дни</td></tr>
<tr><td scope="row"><a href="#function_to-seconds"><code>
TO_SECONDS()</code></a></td><td>Возвратит параметр даты или datetime,
преобразованный в секунды с года 0</td></tr>
<tr><td scope="row"><a href="#function_unix-timestamp"><code>
UNIX_TIMESTAMP()</code></a></td><td>Unix timestamp</td></tr>
<tr><td scope="row"><a href="#function_utc-date"><code>UTC_DATE()
</code></a></td><td>Текущая дата в UTC</td></tr>
<tr><td scope="row"><a href="#function_utc-time"><code>UTC_TIME()
</code></a></td><td>Текущее время в UTC</td></tr>
<tr><td scope="row"><a href="#function_utc-timestamp"><code>
UTC_TIMESTAMP()</code></a></td><td>Текущие дата и время в UTC</td></tr>
<tr><td scope="row"><a href="#function_week"><code>WEEK()</code></a>
</td><td>Номер недели</td></tr>
<tr><td scope="row"><a href="#function_weekday"><code>WEEKDAY()
</code></a></td><td>Индекс дня недели</td></tr>
<tr><td scope="row"><a href="#function_weekofyear"><code>
WEEKOFYEAR()</code></a></td><td>Календарная неделя для даты (1-53)</td></tr>
<tr><td scope="row"><a href="#function_year"><code>YEAR()</code></a>
</td><td>Год</td></tr>
<tr><td scope="row"><a href="#function_yearweek"><code>YEARWEEK()
</code></a></td><td>Год и неделя</td></tr></tbody></table>

<p>Вот пример, который использует функции даты. Следующий запрос выбирает все
строки с <em><code>date_col</code></em> в пределах прошлых 30 дней:
<pre>
mysql&gt; SELECT <em><code>something</code></em> FROM <em><code>tbl_name</code></em>
    -&gt;        WHERE DATE_SUB(CURDATE(),INTERVAL 30 DAY) &lt;= <em><code>date_col</code></em>;
</pre>

<p>Запрос также выбирает строки с датами, которые лежат в будущем.</p>
<p>Функции, которые ожидают значения даты, обычно принимают значения datetime
и игнорируют часть времени. Функции, которые ожидают временные значения,
обычно принимают значения datetime и игнорируют часть даты.</p>

<p>Функции, которые возвращают текущую дату или время, оцениваются
только однажды в начале выполнения запроса. Это означает, что многократные
ссылки на функцию такие, как <a href="#function_now"><code>NOW()
</code></a> в пределах единственного запроса всегда приводят к тому же самому
результату. В наших целях единственный запрос также включает вызов
сохраненной программы и всех подпрограмм, вызванных той программой.
Этот принцип также относится к <a href="#function_curdate"><code>
CURDATE()</code></a>,
<a href="#function_curtime"><code>CURTIME()</code></a>,
<a href="#function_utc-date"><code>UTC_DATE()</code></a>,
<a href="#function_utc-time"><code>UTC_TIME()</code></a>,
<a href="#function_utc-timestamp"><code>UTC_TIMESTAMP()</code></a>
и к любому из их синонимов.</p>

<p><a href="#function_current-timestamp"><code>CURRENT_TIMESTAMP()
</code></a>,
<a href="#function_current-time"><code>CURRENT_TIME()</code></a>,
<a href="#function_current-date"><code>CURRENT_DATE()</code></a> и
<a href="#function_from-unixtime"><code>FROM_UNIXTIME()</code></a>
возвращают значения функций в зоне текущего времени соединения, которая
доступна как значение системной переменной
<a href="server.htm#sysvar_time_zone"><code>time_zone</code></a>.
Кроме того, <a href="#function_unix-timestamp"><code>
UNIX_TIMESTAMP()</code></a> предполагает, что параметр значение datetime в
зоне текущего времени. См.
<a href="global.htm#time-zone-support">раздел 11.6</a>.</p>

<p>Некоторые функции даты могут использоваться с
<span>нулевыми</span> или неполными датами, например, <code>'2001-11-00'
</code>, тогда как другие не могут. Функции, которые извлекают части дат,
как правило, работают с неполными датами и таким образом могут возвратить 0,
когда Вы могли бы ожидать ненулевое значение. Например:
<pre>
mysql&gt; SELECT DAYOFMONTH('2001-11-00'), MONTH('2005-00-00');
  -&gt; 0, 0
</pre>

<p>Другие функции ожидают полные даты и возвращают
<code>NULL</code> для неполных дат. Они включают функции, которые выполняют
арифметику даты или отображают части дат к именам. Например:
<pre>
mysql&gt; SELECT DATE_ADD('2006-05-00',INTERVAL 1 DAY);
  -&gt; NULL
mysql&gt; SELECT DAYNAME('2006-05-00');
  -&gt; NULL
</pre>

<p>Несколько функций более строги, когда передано значение
<a href="#function_date"><code>DATE()</code></a>
как их параметр и отклонят неполные даты с дневной частью 0. Эти функции:
<a href="#function_convert-tz"><code>CONVERT_TZ()</code></a>,
<a href="#function_date-add"><code>DATE_ADD()</code></a>,
<a href="#function_date-sub"><code>DATE_SUB()</code></a>,
<a href="#function_dayofyear"><code>DAYOFYEAR()</code></a>,
<a href="#function_last-day"><code>LAST_DAY()</code></a>
(разрешает дневную часть 0),
<a href="#function_timestampdiff"><code>TIMESTAMPDIFF()</code></a>,
<a href="#function_to-days"><code>TO_DAYS()</code></a>,
<a href="#function_to-seconds"><code>TO_SECONDS()</code></a>,
<a href="#function_week"><code>WEEK()</code></a>,
<a href="#function_weekday"><code>WEEKDAY()</code></a>,
<a href="#function_weekofyear"><code>WEEKOFYEAR()</code></a>,
<a href="#function_yearweek"><code>YEARWEEK()</code></a>.</p>

<p>Дробные секунды для <code>TIME</code>,
<code>DATETIME</code> и <code>TIMESTAMP</code> поддержаны до точности
микросекунды. Функции, которые берут временные параметры, принимают значения
с дробными секундами. Возвращаемые значения от временных функций
включают дробные секунды.</p>

<ul><li><a name="function_adddate"></a><p>
<a href="#function_adddate"><code>ADDDATE(<em><code>date</code>
</em>, INTERVAL<em><code>expr</code></em>
<em><code>unit</code></em>)</code></a>,
<a href="#function_adddate"><code>ADDDATE(<em><code>expr</code>
</em>, <em><code>days</code></em>)</code></a></p>

<p>Когда вызвано с формой <code>INTERVAL</code> второго параметра,
<a href="#function_adddate"><code>ADDDATE()</code></a>
синоним для <a href="#function_date-add"><code>DATE_ADD()</code>
</a>. Связанная функция <a href="#function_subdate"><code>SUBDATE()
</code></a> синоним для <a href="#function_date-sub"><code>
DATE_SUB()</code></a>. Для информации о параметре
<code>INTERVAL</code> <em><code>unit</code></em> см. функцию
<a href="#function_date-add"><code>DATE_ADD()</code></a>.
<pre>
mysql&gt; SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);
  -&gt; '2008-02-02'
mysql&gt; SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);
  -&gt; '2008-02-02'
</pre>

<p>Когда вызвано с формой <em><code>days</code></em> второго параметра, MySQL
обрабатывает это как целое число дней, которые будут добавлены к
<em><code>expr</code></em>.
<pre>
mysql&gt; SELECT ADDDATE('2008-01-02', 31);
  -&gt; '2008-02-02'
</pre></li>

<li><a name="function_addtime"></a><p>
<a href="#function_addtime"><code>ADDTIME(<em><code>expr1</code>
</em>,<em><code>expr2</code></em>)</code></a></p>

<p><a href="#function_addtime"><code>ADDTIME()</code></a> добавляет
<em><code>expr2</code></em> к <em><code>expr1</code></em> и возвращает
результат. <em><code>expr1</code></em> выражение time или datetime, а
<em><code>expr2</code></em> выражение time.
<pre>
mysql&gt; SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');
  -&gt; '2008-01-02 01:01:01.000001'
mysql&gt; SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');
  -&gt; '03:00:01.999997'
</pre></li>

<li><a name="function_convert-tz"></a><p>
<a href="#function_convert-tz"><code>CONVERT_TZ(<em><code>dt</code>
</em>, <em><code>from_tz</code></em>,<em><code>to_tz</code></em>)</code>
</a></p>

<p><a href="#function_convert-tz"><code>CONVERT_TZ()</code></a>
конвертирует значение datetime <em><code>dt</code></em> из часового пояса,
данного <em><code>from_tz</code></em> к часовому поясу, данному
<em><code>to_tz</code></em> и возвращает получающееся значение. Часовые пояса
определены как описано в <a href="global.htm#time-zone-support">разделе 11.6
</a>. Эта функция возвращает <code>NULL</code>, если параметры недопустимы.
</p>

<p>Если значение выходит из поддержанного диапазона
<a href="types.htm#datetime"><code>TIMESTAMP</code></a>, когда преобразовано
из <em><code>from_tz</code></em> в UTC, не происходит никакого
преобразования. Диапазон <a href="types.htm#datetime"><code>TIMESTAMP</code>
</a> описан в <a href="types.htm#date-and-time-type-overview">разделе 12.1.2
</a>.
<pre>
mysql&gt; SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');
    -&gt; '2004-01-01 13:00:00'
mysql&gt; SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');
    -&gt; '2004-01-01 22:00:00'
</pre>

<p>Чтобы использовать названный часовыми пояс, например, <code>'MET'</code>
или <code>'Europe/Moscow'</code>, таблицы часового пояса должны быть должным
образом настроены. См. <a href="global.htm#time-zone-support">раздел 11.6
</a>.</p></li>

<li><a name="function_curdate"></a><p>
<a href="#function_curdate"><code>CURDATE()</code></a></p>
<p>Возвращает текущую дату как значение в формате
<code>'YYYY-MM-DD'</code> или <code>YYYYMMDD</code>, в зависимости от того,
используется ли функция в строковом или числовом контексте.
<pre>
mysql&gt; SELECT CURDATE();
    -&gt; '2008-06-13'
mysql&gt; SELECT CURDATE() + 0;
    -&gt; 20080613
</pre></li>

<li><a name="function_current-date"></a><p>
<a href="#function_current-date"><code>CURRENT_DATE</code></a>,
<a href="#function_current-date"><code>CURRENT_DATE()</code></a></p>

<p><a href="#function_current-date"><code>CURRENT_DATE</code></a> и
<a href="#function_current-date"><code>CURRENT_DATE()</code></a>
синонимы для <a href="#function_curdate"><code>CURDATE()</code></a>.
</p></li>

<li><a name="function_current-time"></a><p>
<a href="#function_current-time"><code>CURRENT_TIME</code></a>,
<a href="#function_current-time"><code>CURRENT_TIME([<em><code>fsp
</code></em>])</code></a></p>

<p><a href="#function_current-time"><code>CURRENT_TIME</code></a> и
<a href="#function_current-time"><code>CURRENT_TIME()</code></a>
синонимы для <a href="#function_curtime"><code>CURTIME()</code></a>.
</p></li>

<li><a name="function_current-timestamp"></a><p>
<a href="#function_current-timestamp"><code>CURRENT_TIMESTAMP</code>
</a>, <a href="#function_current-timestamp"><code>
CURRENT_TIMESTAMP([<em><code>fsp</code></em>])</code></a></p>

<p><a href="#function_current-timestamp"><code>CURRENT_TIMESTAMP
</code></a> и <a href="#function_current-timestamp"><code>
CURRENT_TIMESTAMP()</code></a> синонимы для
<a href="#function_now"><code>NOW()</code></a>.</p></li>

<li><a name="function_curtime"></a><p>
<a href="#function_curtime"><code>CURTIME([<em><code>fsp</code>
</em>])</code></a></p>

<p>Возвращает текущее время как значение в формате
<code>'HH:MM:SS'</code> или <code>HHMMSS</code>, в зависимости от того,
используется ли функция в строковом или числовом контексте. Значение выражено
в зоне текущего времени.</p>

<p>Если параметр <em><code>fsp</code></em> дан, чтобы определить дробную
точность секунд от 0 до 6, возвращаемое значение включает
дробную часть секунд.
<pre>
mysql&gt; SELECT CURTIME();
    -&gt; '23:50:26'
mysql&gt; SELECT CURTIME() + 0;
    -&gt; 235026.000000
</pre></li>

<li><a name="function_date"></a><p>
<a href="#function_date"><code>DATE(<em><code>expr</code></em>)
</code></a></p>

<p>Извлекает часть даты из выражения <em><code>expr</code></em> типа
date или datetime.
<pre>
mysql&gt; SELECT DATE('2003-12-31 01:02:03');
    -&gt; '2003-12-31'
</pre></li>

<li><a name="function_datediff"></a><p>
<a href="#function_datediff"><code>DATEDIFF(<em><code>expr1</code>
</em>,<em><code>expr2</code></em>)</code></a></p>

<p><a href="#function_datediff"><code>DATEDIFF()</code></a>
возвращает <em><code>expr1</code></em> - <em><code>expr2</code></em>,
выраженное как значение в днях от одной даты до другой.
<em><code>expr1</code></em> и <em><code>expr2</code></em> выражения
дата или &quot;дата и время&quot;. Только части даты
значений используются в вычислении.
<pre>
mysql&gt; SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');
    -&gt; 1
mysql&gt; SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');
    -&gt; -31
</pre></li>

<li><a name="function_date-add"></a><p>
<a href="#function_date-add"><code>DATE_ADD(<em><code>date</code>
</em>, INTERVAL <em><code>expr</code></em> <em><code>unit</code></em>)</code>
</a>, <a href="#function_date-sub"><code>DATE_SUB(<em><code>date
</code></em>, INTERVAL <em><code>expr</code></em> <em><code>unit</code></em>)
</code></a></p>

<p>Эти функции выполняют арифметику даты. Параметр
<em><code>date</code></em> определяет стартовую дату или значение datetime.
<em><code>expr</code></em> выражение, определяющее значение интервала,
которое будет добавлено или вычтено из даты. <em><code>expr</code></em>
строка, она может начинаться с <code>-</code>
для отрицательных интервалов. <em><code>unit</code></em>
ключевое слово, указывающее на величину, в которой
должно интерпретироваться выражение.</p>

<p>Ключевое слово <code>INTERVAL</code> и спецификатор
<em><code>unit</code></em> не является чувствительными к регистру.</p>
<p>Следующая таблица показывает ожидаемую форму параметра
<em><code>expr</code></em> для каждого значения <em><code>unit</code></em>.
</p>

<table border="1">
<thead><tr><th scope="col"><em>Значение <code>unit</code></em></th>
<th scope="col">Ожидаемый формат <em><code>expr</code></em></th></tr></thead>
<tbody><tr><td scope="row"><code>MICROSECOND</code></td><td><code>
MICROSECONDS</code></td></tr>
<tr><td scope="row"><code>SECOND</code></td><td><code>SECONDS</code></td></tr>
<tr><td scope="row"><code>MINUTE</code></td><td><code>MINUTES</code></td></tr>
<tr><td scope="row"><code>HOUR</code></td><td><code>HOURS</code></td></tr>
<tr><td scope="row"><code>DAY</code></td><td><code>DAYS</code></td></tr>
<tr><td scope="row"><code>WEEK</code></td><td><code>WEEKS</code></td></tr>
<tr><td scope="row"><code>MONTH</code></td><td><code>MONTHS</code></td></tr>
<tr><td scope="row"><code>QUARTER</code></td><td><code>QUARTERS</code></td>
</tr>
<tr><td scope="row"><code>YEAR</code></td><td><code>YEARS</code></td></tr>
<tr><td scope="row"><code>SECOND_MICROSECOND</code></td><td><code>
'SECONDS.MICROSECONDS'</code></td></tr>
<tr><td scope="row"><code>MINUTE_MICROSECOND</code></td><td><code>
'MINUTES:SECONDS.MICROSECONDS'</code></td></tr>
<tr><td scope="row"><code>MINUTE_SECOND</code></td><td><code>
'MINUTES:SECONDS'</code></td></tr>
<tr><td scope="row"><code>HOUR_MICROSECOND</code></td><td><code>
'HOURS:MINUTES:SECONDS.MICROSECONDS'</code></td></tr>
<tr><td scope="row"><code>HOUR_SECOND</code></td><td><code>
'HOURS:MINUTES:SECONDS'</code></td></tr>
<tr><td scope="row"><code>HOUR_MINUTE</code></td><td><code>'HOURS:MINUTES'
</code></td></tr>
<tr><td scope="row"><code>DAY_MICROSECOND</code></td><td><code>
'DAYS HOURS:MINUTES:SECONDS.MICROSECONDS'</code></td></tr>
<tr><td scope="row"><code>DAY_SECOND</code></td><td><code>
'DAYS HOURS:MINUTES:SECONDS'</code></td></tr>
<tr><td scope="row"><code>DAY_MINUTE</code></td><td><code>
'DAYS HOURS:MINUTES'</code></td></tr>
<tr><td scope="row"><code>DAY_HOUR</code></td><td><code>'DAYS HOURS'</code>
</td></tr>
<tr><td scope="row"><code>YEAR_MONTH</code></td><td><code>'YEARS-MONTHS'
</code></td></tr></tbody></table>

<p>Возвращаемое значение зависит от параметров:</p>
<ul><li><p><a href="types.htm#datetime"><code>DATETIME</code></a>,
если первый параметр <a href="types.htm#datetime"><code>DATETIME</code></a>
(или <a href="types.htm#datetime"><code>TIMESTAMP</code></a>),
или если первый параметр <a href="types.htm#datetime"><code>DATE</code></a>
и значение <em><code>unit</code></em> использует
<code>HOURS</code>, <code>MINUTES</code> или <code>SECONDS</code>.</li>
<li>Строка иначе.</p></li></ul>

<p>Чтобы гарантировать, что результат будет
<a href="types.htm#datetime"><code>DATETIME</code></a>, Вы можете
использовать <a href="#function_cast"><code>CAST()</code></a>,
чтобы преобразовать первый параметр в <a href="types.htm#datetime"><code>
DATETIME</code></a>.</p>

<p>MySQL разрешает любой разделитель пунктуации в формате
<em><code>expr</code></em>. Показанные в таблице являются предложенными
разделителями. Если параметр <em><code>date</code></em> типа
<a href="types.htm#datetime"><code>DATE</code></a> и Ваши вычисления
вовлекают только части <code>YEAR</code>, <code>MONTH</code> и
<code>DAY</code> (без частей времени), результат будет типа
<a href="types.htm#datetime"><code>DATE</code></a>. Иначе типа
<a href="types.htm#datetime"><code>DATETIME</code></a>.</p>

<p>Арифметика даты также может быть выполнена, используя
<code>INTERVAL</code> вместе с оператором
<a href="#operator_plus"><code>+</code></a>
<a href="#operator_minus"><code>-</code></a>:
<pre>
<code>date</code> + INTERVAL <em><code>expr</code></em> <em><code>unit</code></em>
<code>date</code> - INTERVAL <em><code>expr</code></em> <em><code>unit</code></em>
</pre>

<p><code>INTERVAL <em><code>expr</code></em>
<em><code>unit</code></em></code> разрешен по обе стороны от оператора
<a href="#operator_plus"><code>+</code></a>, если выражение с другой
стороны значение datetime или дата. Для оператора
<a href="#operator_minus"><code>-</code></a> <code>INTERVAL
<em><code>expr</code></em> <em><code>unit</code></em></code>
разрешен только на правой стороне, потому что не имеет никакого смысла
вычитать дату или значение datetime из интервала.
<pre>
mysql&gt; SELECT '2008-12-31 23:59:59' + INTERVAL 1 SECOND;
    -&gt; '2009-01-01 00:00:00'
mysql&gt; SELECT INTERVAL 1 DAY + '2008-12-31';
    -&gt; '2009-01-01'
mysql&gt; SELECT '2005-01-01' - INTERVAL 1 SECOND;
    -&gt; '2004-12-31 23:59:59'
mysql&gt; SELECT DATE_ADD('2000-12-31 23:59:59',
    -&gt; INTERVAL 1 SECOND);
    -&gt; '2001-01-01 00:00:00'
mysql&gt; SELECT DATE_ADD('2010-12-31 23:59:59',
    -&gt; INTERVAL 1 DAY);
    -&gt; '2011-01-01 23:59:59'
mysql&gt; SELECT DATE_ADD('2100-12-31 23:59:59',
    -&gt; INTERVAL '1:1' MINUTE_SECOND);
    -&gt; '2101-01-01 00:01:00'
mysql&gt; SELECT DATE_SUB('2005-01-01 00:00:00',
    -&gt; INTERVAL '1 1:1:1' DAY_SECOND);
    -&gt; '2004-12-30 22:58:59'
mysql&gt; SELECT DATE_ADD('1900-01-01 00:00:00',
    -&gt; INTERVAL '-1 10' DAY_HOUR);
    -&gt; '1899-12-30 14:00:00'
mysql&gt; SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);
    -&gt; '1997-12-02'
mysql&gt; SELECT DATE_ADD('1992-12-31 23:59:59.000002',
    -&gt;  INTERVAL '1.999999' SECOND_MICROSECOND);
    -&gt; '1993-01-01 00:00:01.000001'
</pre>

<p>Если Вы определяете значение интервала, которое слишком коротко (не
включает все части интервала, которые ожидались бы от
<em><code>unit</code></em>), MySQL предполагает, что Вы не учли крайние левые
части значения интервала. Например, если Вы определяете
<em><code>unit</code></em> <code>DAY_SECOND</code>, значение
<em><code>expr</code></em> будет иметь дни, часы, минуты и
части секунд. Если Вы определяете значение как <code>'1:10'</code>, MySQL
предполагает, что дни и часы отсутствуют, а значение представляет минуты и
секунды. Другими словами, <code>'1:10' DAY_SECOND</code> интерпретируется
таким способом, по которому это эквивалентно
<code>'1:10' MINUTE_SECOND</code>. Это походит на способ, которым MySQL
интерпретирует значения <a href="types.htm#time"><code>TIME</code></a>
как представляющие прошедшее время, а не как время суток.</p>

<p>Поскольку <em><code>expr</code></em> обработан как строка, надо быть
осторожным, если Вы определяете нестроковое значение с
<code>INTERVAL</code>. Например, со спецификатором интервала
<code>HOUR_MINUTE</code>, <code>6/4</code> оценивается как
<code>1.5000</code> и будет обработано как 1 час 5000 минут:
<pre>
mysql&gt; SELECT 6/4;
    -&gt; 1.5000
mysql&gt; SELECT DATE_ADD('2009-01-01', INTERVAL 6/4 HOUR_MINUTE);
    -&gt; '2009-01-04 12:20:00'
</pre>

<p>Чтобы гарантировать интерпретацию интервала как Вы ожидаете, используйте
<a href="#function_cast"><code>CAST()</code></a>.
Чтобы <code>6/4</code> было понято как 1 час 5 минут, приведите это к типу
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> с
единственной дробной цифрой:
<pre>
mysql&gt; SELECT CAST(6/4 AS DECIMAL(3,1));
  -&gt; 1.5
mysql&gt; SELECT DATE_ADD('1970-01-01 12:00:00',
  -&gt; INTERVAL CAST(6/4 AS DECIMAL(3,1)) HOUR_MINUTE);
  -&gt; '1970-01-01 13:05:00'
</pre>

<p>Если Вы добавляете к или вычитаете из даты что-то, что содержит часть
времени, результат автоматически преобразован в значение datetime:
<pre>
mysql&gt; SELECT DATE_ADD('2013-01-01', INTERVAL 1 DAY);
    -&gt; '2013-01-02'
mysql&gt; SELECT DATE_ADD('2013-01-01', INTERVAL 1 HOUR);
    -&gt; '2013-01-01 01:00:00'
</pre>

<p>Если Вы добавляете <code>MONTH</code>,
<code>YEAR_MONTH</code> или <code>YEAR</code>
и у получающейся даты есть день, который больше, чем максимальный день в
новом месяце, день скорректирован к максимальному дню в новом месяце:
<pre>
mysql&gt; SELECT DATE_ADD('2009-01-30', INTERVAL 1 MONTH);
    -&gt; '2009-02-28'
</pre>

<p>Операции арифметики даты требуют полных дат и не работают с неполными
датами вроде <code>'2006-07-00'</code> или ужасно уродливыми датами:
<pre>
mysql&gt; SELECT DATE_ADD('2006-07-00', INTERVAL 1 DAY);
  -&gt; NULL
mysql&gt; SELECT '2005-03-32' + INTERVAL 1 MONTH;
  -&gt; NULL
</pre></li>

<li><a name="function_date-format"></a><p>
<a href="#function_date-format"><code>DATE_FORMAT(<em><code>date
</code></em>,<em><code>format</code></em>)</code></a></p>

<p>Форматирует значение <em><code>date</code></em> согласно строке
<em><code>format</code></em>.</p>
<p>Следующие спецификаторы могут использоваться в строке
<em><code>format</code></em>. Символ <code>%</code> требуется перед
символами спецификатора формата.</p>

<table border="1">
<thead><tr><th scope="col">Спецификатор</th><th scope="col">Описание</th>
</tr></thead>
<tbody><tr><td scope="row"><code>%a</code></td><td>
Сокращенное имя дня (<code>Sun</code>..<code>Sat</code>)</td></tr>
<tr><td scope="row"><code>%b</code></td><td>Сокращенное имя месяца
(<code>Jan</code>..<code>Dec</code>)</td></tr>
<tr><td scope="row"><code>%c</code></td><td>Месяц, числовое представление
(<code>0</code>..<code>12</code>)</td></tr>
<tr><td scope="row"><code>%D</code></td><td>День месяца с английским
суффиксом (<code>0th</code>, <code>1st</code>, <code>2nd</code>,
<code>3rd</code>, ...)</td></tr>
<tr><td scope="row"><code>%d</code></td><td>День месяца, числовой вид
(<code>00</code>..<code>31</code>)</td></tr>
<tr><td scope="row"><code>%e</code></td><td>День месяца, числовой вид
(<code>0</code>..<code>31</code>)</td></tr>
<tr><td scope="row"><code>%f</code></td><td>Микросекунды
(<code>000000</code>..<code>999999</code>)</td></tr>
<tr><td scope="row"><code>%H</code></td><td>Час (<code>00</code>..<code>23
</code>)</td></tr>
<tr><td scope="row"><code>%h</code></td><td>Час (<code>01</code>..<code>12
</code>)</td></tr>
<tr><td scope="row"><code>%I</code></td><td>Час (<code>01</code>..<code>12
</code>)</td></tr>
<tr><td scope="row"><code>%i</code></td><td>Минуты, числовой вид
(<code>00</code>..<code>59</code>)</td></tr>
<tr><td scope="row"><code>%j</code></td><td>День года
(<code>001</code>..<code>366</code>)</td></tr>
<tr><td scope="row"><code>%k</code></td><td>Час
(<code>0</code>..<code>23</code>)</td></tr>
<tr><td scope="row"><code>%l</code></td><td>Час
(<code>1</code>..<code>12</code>)</td></tr>
<tr><td scope="row"><code>%M</code></td><td>Имя месяца
Month name (<code>January</code>..<code>December</code>)</td></tr>
<tr><td scope="row"><code>%m</code></td><td>Месяц, числовой вид
(<code>00</code>..<code>12</code>)</td></tr>
<tr><td scope="row"><code>%p</code></td><td><code>AM</code> или
<code>PM</code></td></tr>
<tr><td scope="row"><code>%r</code></td><td>Время, 12-часовой формат
(<code>hh:mm:ss</code>, сопровождаемый <code>AM</code> или <code>PM</code>)
</td></tr>
<tr><td scope="row"><code>%S</code></td><td>Секунды (<code>00</code>..<code>
59</code>)</td></tr>
<tr><td scope="row"><code>%s</code></td><td>Секунды (<code>00</code>..<code>
59</code>)</td></tr>
<tr><td scope="row"><code>%T</code></td><td>Время, 24-часовой формат
(<code>hh:mm:ss</code>)</td></tr>
<tr><td scope="row"><code>%U</code></td><td>Недели (<code>00</code>..<code>
53</code>), где Sunday первый день недели,
<a href="#function_week"><code>WEEK()</code></a> режим 0</td></tr>
<tr><td scope="row"><code>%u</code></td><td>Недели (<code>00</code>..<code>
53</code>), Monday первый день недели,
<a href="#function_week"><code>WEEK()</code></a> режим 1</td></tr>
<tr><td scope="row"><code>%V</code></td><td>Недели (<code>01</code>..<code>
53</code>), Sunday первый день недели,
<a href="#function_week"><code>WEEK()</code></a> режим 2,
используется с <code>%X</code></td></tr>
<tr><td scope="row"><code>%v</code></td><td>Недели (<code>01</code>..<code>53
</code>), Monday первый день недели, <a href="#function_week"><code>
WEEK()</code></a> режим 3, используется с <code>%x</code></td></tr>
<tr><td scope="row"><code>%W</code></td><td>Имя дня
(<code>Sunday</code>..<code>Saturday</code>)</td></tr>
<tr><td scope="row"><code>%w</code></td><td>День недели
(<code>0</code>=Sunday..<code>6</code>=Saturday)</td></tr>
<tr><td scope="row"><code>%X</code></td><td>Год для недели, где воскресенье
первый день недели, числовой вид, четыре цифры, применяется с <code>%V</code>
</td></tr>
<tr><td scope="row"><code>%x</code></td><td>Год для недели, где понедельник
первый день недели, числовой вид, четыре цифры, применяется с
<code>%v</code></td></tr>
<tr><td scope="row"><code>%Y</code></td><td>Год, числовой тип, четыре цифры
</td></tr>
<tr><td scope="row"><code>%y</code></td><td>Год, числовой тип, две цифры</td>
</tr>
<tr><td scope="row"><code>%%</code></td><td>Символ <code>%</code></td></tr>
<tr><td scope="row"><code>%<em><code>x</code></em></code></td>
<td><em><code>x</code></em> для любого
<span><em><code>x</code></em></span> не упомянутого выше
</td></tr></tbody></table>

<p>Диапазоны для спецификаторов месяца и дня начинаются с ноля вследствие
того, что MySQL разрешает хранение неполных дат вроде
<code>'2014-00-00'</code>.</p>

<p>Языком, используемым для имен дня и месяца и сокращений, управляет
значение системной переменной <a href="server.htm#sysvar_lc_time_names">
<code>lc_time_names</code></a>
(<a href="global.htm#locale-support">раздел 11.7</a>).</p>

<p>Для <code>%U</code>, <code>%u</code>, <code>%V</code> и <code>%v</code>
см. описание функции <a href="#function_week"><code>WEEK()</code>
</a> для информации о значениях режима. Режим затрагивает нумерацию недели.
</p>

<p><a href="#function_date-format"><code>DATE_FORMAT()</code></a>
возвращает строку с набором символов и сопоставлением, данным
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a> так, чтобы это могло возвратить имена месяца и дня, содержащие
символы не-ASCII.
<pre>
mysql&gt; SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');
  -&gt; 'Sunday October 2009'
mysql&gt; SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');
  -&gt; '22:23:00'
mysql&gt; SELECT DATE_FORMAT('1900-10-04 22:23:00',
  -&gt; '%D %y %a %d %m %b %j');
  -&gt; '4th 00 Thu 04 10 Oct 277'
mysql&gt; SELECT DATE_FORMAT('1997-10-04 22:23:00',
  -&gt; '%H %k %I %r %T %S %w');
  -&gt; '22 22 10 10:23:00 PM 22:23:00 00 6'
mysql&gt; SELECT DATE_FORMAT('1999-01-01', '%X %V');
  -&gt; '1998 52'
mysql&gt; SELECT DATE_FORMAT('2006-06-00', '%d');
  -&gt; '00'
</pre></li>

<li><a name="function_date-sub"></a><p>
<a href="#function_date-sub"><code>DATE_SUB(<em><code>date</code>
</em>, INTERVAL <em><code>expr</code></em> <em><code>unit</code></em>)
</code></a></p>
<p>См. описание для <a href="#function_date-add"><code>DATE_ADD()
</code></a>.</p></li>

<li><a name="function_day"></a><p>
<a href="#function_day"><code>DAY(<em><code>date</code></em>)</code>
</a></p>
<p><a href="#function_day"><code>DAY()</code></a> синоним для
<a href="#function_dayofmonth"><code>DAYOFMONTH()</code></a>.
</p></li>

<li><a name="function_dayname"></a><p>
<a href="#function_dayname"><code>DAYNAME(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращает название дня для <em><code>date</code></em>. Языком,
используемым для имени, управляет значение
<a href="server.htm#sysvar_lc_time_names"><code>lc_time_names</code></a>
(<a href="global.htm#locale-support">раздел 11.7</a>).
<pre>
mysql&gt; SELECT DAYNAME('2007-02-03');
  -&gt; 'Saturday'
</pre></li>

<li><a name="function_dayofmonth"></a><p>
<a href="#function_dayofmonth"><code>DAYOFMONTH(<em><code>date
</code></em>)</code></a></p>
<p>Возвращает день месяца для <em><code>date</code></em> в диапазоне от
<code>1</code> до <code>31</code> или
<code>0</code> для дат вроде <code>'0000-00-00'</code> или
<code>'2008-00-00'</code>, в которых есть часть нулевого дня.
<pre>
mysql&gt; SELECT DAYOFMONTH('2007-02-03');
  -&gt; 3
</pre></li>

<li><a name="function_dayofweek"></a><p>
<a href="#function_dayofweek"><code>DAYOFWEEK(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращается индекс дня <em><code>date</code></em>
(<code>1</code> = Sunday, <code>2</code> = Monday,
..., <code>7</code> = Saturday). Значения соответствуют стандарту ODBC.
<pre>
mysql&gt; SELECT DAYOFWEEK('2007-02-03');
  -&gt; 7
</pre></li>

<li><a name="function_dayofyear"></a><p>
<a href="#function_dayofyear"><code>DAYOFYEAR(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращает день года для <em><code>date</code></em> в диапазоне от
<code>1</code> до <code>366</code>.
<pre>
mysql&gt; SELECT DAYOFYEAR('2007-02-03');
  -&gt; 34
</pre></li>

<li><a name="function_extract"></a><p>
<a href="#function_extract"><code>EXTRACT(<em><code>unit</code></em>
FROM <em><code>date</code></em>)</code></a></p>

<p>Функция <a href="#function_extract"><code>EXTRACT()</code></a>
использует те же самые виды спецификаторов, что и
<a href="#function_date-add"><code>DATE_ADD()</code></a> или
<a href="#function_date-sub"><code>DATE_SUB()</code></a>, но
извлекает части из даты.
<pre>
mysql&gt; SELECT EXTRACT(YEAR FROM '2009-07-02');
  -&gt; 2009
mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM '2009-07-02 01:02:03');
  -&gt; 200907
mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM '2009-07-02 01:02:03');
  -&gt; 20102
mysql&gt; SELECT EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123');
  -&gt; 123
</pre></li>

<li><a name="function_from-days"></a><p>
<a href="#function_from-days"><code>FROM_DAYS(<em><code>N</code>
</em>)</code></a></p>

<p>Учитывая номер дня <em><code>N</code></em>, вернет значение
<a href="types.htm#datetime"><code>DATE</code></a>.
<pre>
mysql&gt; SELECT FROM_DAYS(730669);
  -&gt; '2007-07-03'
</pre>

<p>Используйте <a href="#function_from-days"><code>FROM_DAYS()
</code></a> с осторожностью для старых дат. Это не предназначено для
использования со значениями, которые предшествуют появлению Григорианского
календаря (1582 г.). См. <a href="#mysql-calendar">
раздел 13.8</a>.</p></li>

<li><a name="function_from-unixtime"></a><p>
<a href="#function_from-unixtime"><code>FROM_UNIXTIME(<em><code>
unix_timestamp</code></em>)</code></a>,
<a href="#function_from-unixtime"><code>FROM_UNIXTIME(<em><code>
unix_timestamp</code></em>,<em><code>format</code></em>)</code></a></p>

<p>Возвращает представление <em><code>unix_timestamp</code></em>
как значение в виде in <code>'YYYY-MM-DD HH:MM:SS'</code> или
<code>YYYYMMDDHHMMSS</code> в зависимости от того, используется ли функция в
строковом или числовом контексте. Значение выражено в зоне текущего времени.
<em><code>unix_timestamp</code></em> внутреннее значение, которое произведено
функцией <a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()
</code></a>.</p>

<p>Если задан <em><code>format</code></em>, результат отформатирован согласно
строке <em><code>format</code></em>, которая используется как в функции
<a href="#function_date-format"><code>DATE_FORMAT()</code></a>.
<pre>
mysql&gt; SELECT FROM_UNIXTIME(1447430881);
    -&gt; '2015-11-13 10:08:01'
mysql&gt; SELECT FROM_UNIXTIME(1447430881) + 0;
    -&gt; 20151113100801
mysql&gt; SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(), '%Y %D %M %h:%i:%s %x');
    -&gt; '2015 13th November 10:08:01 2015'
</pre>

<p>Отметьте: Если Вы используете
<a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code></a>
и <a href="#function_from-unixtime"><code>FROM_UNIXTIME()</code>
</a>, чтобы преобразовать между значениями <a href="types.htm#datetime">
<code>TIMESTAMP</code></a> и Unix timestamp, преобразование будет с потерями,
потому что отображение не является непосредственным в обоих направлениях.
Для деталей см. описание <a href="#function_unix-timestamp"><code>
UNIX_TIMESTAMP()</code></a>.</p></li>

<li><a name="function_get-format"></a><p>
<a href="#function_get-format"><code>GET_FORMAT({DATE|TIME|DATETIME},
{'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})</code></a></p>

<p>Возвращает строку формата. Эта функция полезна в комбинации с функциями
<a href="#function_date-format"><code>DATE_FORMAT()</code></a> и
<a href="#function_str-to-date"><code>STR_TO_DATE()</code></a>.</p>

<p>Возможные значения для первого и второго параметров в нескольких возможных
строках формата (для используемых спецификаторов см. таблицу в описании
функции <a href="#function_date-format"><code>DATE_FORMAT()</code>
</a>). Формат ISO обращается к ISO 9075, а не ISO 8601.</p>

<table border="1">
<thead><tr><th scope="col">Вызов функции</th><th scope="col">Результат</th>
</tr></thead>
<tbody><tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATE,'USA')</code></a></td><td><code>'%m.%d.%Y'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATE,'JIS')</code></a></td><td><code>'%Y-%m-%d'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATE,'ISO')</code></a></td><td><code>'%Y-%m-%d'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATE,'EUR')</code></a></td><td><code>'%d.%m.%Y'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATE,'INTERNAL')</code></a></td><td><code>'%Y%m%d'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATETIME,'USA')</code></a></td><td><code>'%Y-%m-%d %H.%i.%s'
</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATETIME,'JIS')</code></a></td><td><code>'%Y-%m-%d %H:%i:%s'
</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATETIME,'ISO')</code></a></td><td><code>'%Y-%m-%d %H:%i:%s'
</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATETIME,'EUR')</code></a></td><td><code>'%Y-%m-%d %H.%i.%s'
</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(DATETIME,'INTERNAL')</code></a></td><td><code>'%Y%m%d%H%i%s'
</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(TIME,'USA')</code></a></td><td><code>'%h:%i:%s %p'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(TIME,'JIS')</code></a></td><td><code>'%H:%i:%s'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(TIME,'ISO')</code></a></td><td><code>'%H:%i:%s'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(TIME,'EUR')</code></a></td><td><code>'%H.%i.%s'</code></td></tr>
<tr><td scope="row"><a href="#function_get-format"><code>
GET_FORMAT(TIME,'INTERNAL')</code></a></td><td><code>'%H%i%s'</code></td>
</tr></tbody></table>

<p><a href="types.htm#datetime"><code>TIMESTAMP</code></a>
может также использоваться в качестве первого параметра
<a href="#function_get-format"><code>GET_FORMAT()</code></a>,
когда функция возвращает те же самые значения, что
<a href="types.htm#datetime"><code>DATETIME</code></a>.
<pre>
mysql&gt; SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));
  -&gt; '03.10.2003'
mysql&gt; SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));
  -&gt; '2003-10-31'
</pre></li>

<li><a name="function_hour"></a><p>
<a href="#function_hour"><code>HOUR(<em><code>time</code></em>)
</code></a></p>
<p>Возвращает час для <em><code>time</code></em>. Диапазон возвращаемого
значения от <code>0</code> до <code>23</code> для значений времени суток.
Однако, диапазон значений <a href="types.htm#time"><code>TIME</code></a>
фактически намного больше, таким образом, <code>HOUR</code>
может возвращать значения больше, чем <code>23</code>.
<pre>
mysql&gt; SELECT HOUR('10:05:03');
  -&gt; 10
mysql&gt; SELECT HOUR('272:59:59');
  -&gt; 272
</pre></li>

<li><a name="function_last-day"></a><p>
<a href="#function_last-day"><code>LAST_DAY(<em><code>date</code>
</em>)</code></a></p>

<p>Берет дату или значение datetime и возвращает соответствующее значение
для последнего дня месяца. Возвращает <code>NULL</code>,
если параметр недопустим.
<pre>
mysql&gt; SELECT LAST_DAY('2003-02-05');
  -&gt; '2003-02-28'
mysql&gt; SELECT LAST_DAY('2004-02-05');
  -&gt; '2004-02-29'
mysql&gt; SELECT LAST_DAY('2004-01-01 01:01:01');
  -&gt; '2004-01-31'
mysql&gt; SELECT LAST_DAY('2003-03-32');
  -&gt; NULL
</pre></li>

<li><a name="function_localtime"></a><p>
<a href="#function_localtime"><code>LOCALTIME</code></a>,
<a href="#function_localtime"><code>LOCALTIME([<em><code>fsp</code>
</em>])</code></a></p>

<p><a href="#function_localtime"><code>LOCALTIME</code></a> и
<a href="#function_localtime"><code>LOCALTIME()</code></a> синонимы
для <a href="#function_now"><code>NOW()</code></a>.</p></li>

<li><a name="function_localtimestamp"></a><p>
<a href="#function_localtimestamp"><code>LOCALTIMESTAMP</code></a>,
<a href="#function_localtimestamp"><code>LOCALTIMESTAMP([<em><code>
fsp</code></em>])</code></a></p>

<p><a href="#function_localtimestamp"><code>LOCALTIMESTAMP</code>
</a> и <a href="#function_localtimestamp"><code>LOCALTIMESTAMP()
</code></a> синонимы для <a href="#function_now"><code>NOW()</code>
</a>.</p></li>

<li><a name="function_makedate"></a><p>
<a href="#function_makedate"><code>MAKEDATE(<em><code>year</code>
</em>,<em><code>dayofyear</code></em>)</code></a></p>

<p>Возвращает дату, данную значениями года и дня года.
<em><code>dayofyear</code></em> должно быть больше 0,
или результат <code>NULL</code>.
<pre>
mysql&gt; SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);
  -&gt; '2011-01-31', '2011-02-01'
mysql&gt; SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);
  -&gt; '2011-12-31', '2014-12-31'
mysql&gt; SELECT MAKEDATE(2011,0);
  -&gt; NULL
</pre></li>

<li><a name="function_maketime"></a><p>
<a href="#function_maketime"><code>MAKETIME(<em><code>hour</code>
</em>,<em><code>minute</code></em>,<em><code>second</code></em>)</code>
</a></p>

<p>Возвращает время, вычисленное из параметров
<em><code>hour</code></em>, <em><code>minute</code></em> и
<em><code>second</code></em>. У параметра <em><code>second</code></em> может
быть дробная часть.
<pre>
mysql&gt; SELECT MAKETIME(12,15,30);
  -&gt; '12:15:30'
</pre></li>

<li><a name="function_microsecond"></a><p>
<a href="#function_microsecond"><code>MICROSECOND(<em><code>expr
</code></em>)</code></a></p>

<p>Возвращает микросекунды из выражения time или datetime
<em><code>expr</code></em> как число в диапазоне от
<code>0</code> до <code>999999</code>.
<pre>
mysql&gt; SELECT MICROSECOND('12:00:00.123456');
  -&gt; 123456
mysql&gt; SELECT MICROSECOND('2009-12-31 23:59:59.000010');
  -&gt; 10
</pre></li>

<li><a name="function_minute"></a><p>
<a href="#function_minute"><code>MINUTE(<em><code>time</code></em>)
</code></a></p>

<p>Возвращает минуту для <em><code>time</code></em> в диапазоне от
<code>0</code> до <code>59</code>.
<pre>
mysql&gt; SELECT MINUTE('2008-02-03 10:05:03');
  -&gt; 5
</pre></li>

<li><a name="function_month"></a><p>
<a href="#function_month"><code>MONTH(<em><code>date</code></em>)
</code></a></p>

<p>Возвращает месяц для  <em><code>date</code></em> в диапазоне от
<code>1</code> до <code>12</code> или <code>0</code> для дат вроде
<code>'0000-00-00'</code> или <code>'2008-00-00'</code> с
нулевым значением месяца.
<pre>
mysql&gt; SELECT MONTH('2008-02-03');
  -&gt; 2
</pre></li>

<li><a name="function_monthname"></a><p>
<a href="#function_monthname"><code>MONTHNAME(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращает полное имя месяца для
<em><code>date</code></em>. Языком, используемым для имени, управляет
значение <a href="server.htm#sysvar_lc_time_names"><code>lc_time_names
</code></a> (<a href="global.htm#locale-support">раздел 11.7</a>).
<pre>
mysql&gt; SELECT MONTHNAME('2008-02-03');
  -&gt; 'February'
</pre></li>

<li><a name="function_now"></a><p>
<a href="#function_now"><code>NOW([<em><code>fsp</code></em>])
</code></a></p>

<p>Возвращает текущую дату и время как значение в формате
<code>'YYYY-MM-DD HH:MM:SS'</code> или <code>YYYYMMDDHHMMSS</code>
в зависимости от того, используется ли функция в строковом или числовом
контексте. Значение выражено в зоне текущего времени.</p>

<p>Если параметр <em><code>fsp</code></em> дан, чтобы определить дробную
точность секунд от 0 до 6, возвращаемое значение включает
дробную часть секунд.
<pre>
mysql&gt; SELECT NOW();
  -&gt; '2007-12-15 23:50:26'
mysql&gt; SELECT NOW() + 0;
  -&gt; 20071215235026.000000
</pre>

<p><a href="#function_now"><code>NOW()</code></a>
возвращает постоянное время, которое указывает время, в которое запрос
начал выполняться. В пределах сохраненной функции или триггера
<a href="#function_now"><code>NOW()</code></a>
возвращает время, в которое функция или запрос вызова начали выполняться.
Это отличается от поведения для
<a href="#function_sysdate"><code>SYSDATE()</code></a>,
который возвращает точное время, в которое выполняется.
<pre>
mysql&gt; SELECT NOW(), SLEEP(2), NOW();
+---------------------+----------+---------------------+
| NOW()               | SLEEP(2) | NOW()               |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:36 |  0       | 2006-04-12 13:47:36 |
+---------------------+----------+---------------------+

mysql&gt; SELECT SYSDATE(), SLEEP(2), SYSDATE();
+---------------------+----------+---------------------+
| SYSDATE()           | SLEEP(2) | SYSDATE()           |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:44 |  0       | 2006-04-12 13:47:46 |
+---------------------+----------+---------------------+
</pre>

<p>Кроме того, <code>SET TIMESTAMP</code> затрагивает значение, возвращенное
<a href="#function_now"><code>NOW()</code></a>, но не
<a href="#function_sysdate"><code>SYSDATE()</code></a>.
Это означает, что настройки timestamp в двоичном журнале не имеют никакого
эффекта на вызовы <a href="#function_sysdate"><code>SYSDATE()</code>
</a>. Установка timestamp к ненулевому значению предписывает каждому
последующему вызову <a href="#function_now"><code>NOW()</code></a>
возвратить то значение. Установка timestamp к нулю отменяет этот эффект,
чтобы <a href="#function_now"><code>NOW()</code></a>
возвращал текущую дату и время.</p></li>

<li><a name="function_period-add"></a><p>
<a href="#function_period-add"><code>PERIOD_ADD(<em><code>P</code>
</em>,<em><code>N</code></em>)</code></a></p>

<p>Добавляет <em><code>N</code></em> месяцев к периоду
<em><code>P</code></em> (в формате <code>YYMM</code> или
<code>YYYYMM</code>). Возвращает значение в формате <code>YYYYMM</code>.
Отметьте что параметр периода <em><code>P</code></em>
<span><em>не</em></span> значение date.
<pre>
mysql&gt; SELECT PERIOD_ADD(200801,2);
  -&gt; 200803
</pre></li>

<li><a name="function_period-diff"></a><p>
<a href="#function_period-diff"><code>PERIOD_DIFF(<em><code>P1
</code></em>,<em><code>P2</code></em>)</code></a></p>

<p>Возвращает число месяцев между периодами
<em><code>P1</code></em> и <em><code>P2</code></em>. <em><code>P1</code></em>
и <em><code>P2</code></em> должны быть в формате <code>YYMM</code> или
<code>YYYYMM</code>. Отметьте, что параметры периода <em><code>P1</code></em>
и <em><code>P2</code></em> <span><em>не</em></span> значения date.
<pre>
mysql&gt; SELECT PERIOD_DIFF(200802,200703);
    -&gt; 11
</pre></li>

<li><a name="function_quarter"></a><p>
<a href="#function_quarter"><code>QUARTER(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращает четверть (квартал) года для
<em><code>date</code></em> в диапазоне от
<code>1</code> до <code>4</code>.
<pre>
mysql&gt; SELECT QUARTER('2008-04-01');
  -&gt; 2
</pre></li>

<li><a name="function_second"></a><p>
<a href="#function_second"><code>SECOND(<em><code>time</code></em>)
</code></a></p>

<p>Возвращает секунды для <em><code>time</code></em> в диапазоне от
<code>0</code> до <code>59</code>.
<pre>
mysql&gt; SELECT SECOND('10:05:03');
  -&gt; 3
</pre></li>

<li><a name="function_sec-to-time"></a><p>
<a href="#function_sec-to-time"><code>SEC_TO_TIME(<em><code>seconds
</code></em>)</code></a></p>

<p>Возвращает параметр <em><code>seconds</code></em>, преобразованный в часы,
минуты и секунды, как значение
<a href="types.htm#time"><code>TIME</code></a>.
Диапазон результата ограничен диапазоном типа
<a href="types.htm#time"><code>TIME</code></a>. Предупреждение происходит,
если параметр соответствует значению вне этого диапазона.
<pre>
mysql&gt; SELECT SEC_TO_TIME(2378);
  -&gt; '00:39:38'
mysql&gt; SELECT SEC_TO_TIME(2378) + 0;
  -&gt; 3938
</pre></li>

<li><a name="function_str-to-date"></a><p>
<a href="#function_str-to-date"><code>STR_TO_DATE(<em><code>str
</code></em>,<em><code>format</code></em>)</code></a></p>

<p>Это инверсия функции
<a href="#function_date-format"><code>DATE_FORMAT()</code></a>.
Это берет строку <em><code>str</code></em> и строку формата
<em><code>format</code></em>.
<a href="#function_str-to-date"><code>STR_TO_DATE()</code></a>
возвращает значение <a href="types.htm#datetime"><code>DATETIME</code></a>,
если строка формата содержит части даты и времени, значения
<a href="types.htm#datetime"><code>DATE</code></a> или
<a href="types.htm#time"><code>TIME</code></a>, если строка содержит только
части даты или времени. Если значение date, time или datetime, извлеченное из
<em><code>str</code></em> неправильно,
<a href="#function_str-to-date"><code>STR_TO_DATE()</code></a>
вернет <code>NULL</code> и произведет предупреждение.</p>

<p>Сервер сканирует <em><code>str</code></em> и пытается соответствовать
<em><code>format</code></em>. Строка формата может содержать буквальные
символы и спецификаторы, начинающиеся с <code>%</code>.
Буквальные символы в <em><code>format</code></em>
должны соответствовать буквально <em><code>str</code></em>. Спецификаторы
формата в <em><code>format</code></em> должны соответствовать части даты или
времени в <em><code>str</code></em>. Для спецификаторов, которые могут
использоваться в <em><code>format</code></em>, см. описание функции
<a href="#function_date-format"><code>DATE_FORMAT()</code></a>.
<pre>
mysql&gt; SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');
  -&gt; '2013-05-01'
mysql&gt; SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');
  -&gt; '2013-05-01'
</pre>

<p>Просмотр запускается в начале <em><code>str</code></em> и терпит неудачу,
если <em><code>format</code></em> не соответствует. Дополнительные символы в
конце <em><code>str</code></em> проигнорированы.
<pre>
mysql&gt; SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');
  -&gt; '09:30:17'
mysql&gt; SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');
  -&gt; NULL
mysql&gt; SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');
  -&gt; '09:30:17'
</pre>

<p>У неуказанных частей даты или времени есть значение 0, так что не
полностью определенные значения в <em><code>str</code></em> приведут к
результату с некоторыми или всеми частями, установленными в 0:
<pre>
mysql&gt; SELECT STR_TO_DATE('abc','abc');
  -&gt; '0000-00-00'
mysql&gt; SELECT STR_TO_DATE('9','%m');
  -&gt; '0000-09-00'
mysql&gt; SELECT STR_TO_DATE('9','%s');
  -&gt; '00:00:09'
</pre>

<p>Диапазон, проверяющий части значений даты, описан в
<a href="types.htm#datetime">разделе 12.3.1</a>. Это означает, например, что
<span>нулевые</span> или даты со значениями части 0 разрешены, если режим SQL
не установлен так, чтобы отвергнуть такие значения.
<pre>
mysql&gt; SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');
  -&gt; '0000-00-00'
mysql&gt; SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');
  -&gt; '2004-04-31'
</pre>

<p>Если включен режим SQL <a href="server.htm#sqlmode_no_zero_date"><code>
NO_ZERO_DATE</code></a> или <a href="server.htm#sqlmode_no_zero_in_date">
<code>NO_ZERO_IN_DATE</code></a> нулевые или частичные даты отвергнуты. В
этом случае <a href="#function_str-to-date"><code>STR_TO_DATE()
</code></a> вернет <code>NULL</code> с предупреждением:
<pre>
mysql&gt; SET sql_mode = '';
mysql&gt; SELECT STR_TO_DATE('15:35:00', '%H:%i:%s');
+-------------------------------------+
| STR_TO_DATE('15:35:00', '%H:%i:%s') |
+-------------------------------------+
| 15:35:00                            |
+-------------------------------------+

mysql&gt; SET sql_mode = 'NO_ZERO_IN_DATE';
mysql&gt; SELECT STR_TO_DATE('15:35:00', '%h:%i:%s');
+-------------------------------------+
| STR_TO_DATE('15:35:00', '%h:%i:%s') |
+-------------------------------------+
| NULL                                |
+-------------------------------------+

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1411
Message: Incorrect datetime value: '15:35:00' for function str_to_date
</pre>

<p>Вы не можете использовать формат <code>"%X%V"</code> для конвертации
строки года и недели в дату, потому что комбинация года и недели уникально не
идентифицирует год и месяц, если неделя пересекает границу месяца. Чтобы
преобразовать такое значение в дату, Вы должны также определить день:
<pre>
mysql&gt; SELECT STR_TO_DATE('200442 Monday', '%X%V %W');
  -&gt; '2004-10-18'
</pre></li>

<li><a name="function_subdate"></a><p>
<a href="#function_subdate"><code>SUBDATE(<em><code>date</code>
</em>, INTERVAL <em><code>expr</code></em>
<em><code>unit</code></em>)</code></a>,
<a href="#function_subdate"><code>SUBDATE(<em><code>expr</code>
</em>, <em><code>days</code></em>)</code></a></p>

<p>Когда вызвано с формой <code>INTERVAL</code> второго параметра,
<a href="#function_subdate"><code>SUBDATE()</code></a> синоним для
<a href="#function_date-sub"><code>DATE_SUB()</code></a>.
<pre>
mysql&gt; SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);
  -&gt; '2007-12-02'
mysql&gt; SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);
  -&gt; '2007-12-02'
</pre>

<p>Вторая форма включает использование целочисленного значения для
<em><code>days</code></em>. В таких случаях это интерпретируется как число
дней, которые будут вычтены из даты или datetime-выражения
<em><code>expr</code></em>.
<pre>
mysql&gt; SELECT SUBDATE('2008-01-02 12:00:00', 31);
    -&gt; '2007-12-02 12:00:00'
</pre></li>

<li><a name="function_subtime"></a><p>
<a href="#function_subtime"><code>SUBTIME(<em><code>expr1</code>
</em>,<em><code>expr2</code></em>)</code></a></p>

<p>
<a href="#function_subtime"><code>SUBTIME()</code></a> вернет
<em><code>expr1</code></em> - <em><code>expr2</code></em>
выраженное как значение в том же самом формате, что и
<em><code>expr1</code></em>. <em><code>expr1</code></em> выражение time или
datetime, <em><code>expr2</code></em> выражение time.
<pre>
mysql&gt; SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');
  -&gt; '2007-12-30 22:58:58.999997'
mysql&gt; SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');
  -&gt; '-00:59:59.999999'
</pre></li>

<li><a name="function_sysdate"></a><p>
<a href="#function_sysdate"><code>SYSDATE([<em><code>fsp</code>
</em>])</code></a></p>

<p>Возвращает текущую дату и время как значение в формате
<code>'YYYY-MM-DD HH:MM:SS'</code> или <code>YYYYMMDDHHMMSS</code>
в зависимости от того, используется ли функция в строковом
или числовом контексте.</p>

<p>Если параметр <em><code>fsp</code></em>
задан, чтобы определить дробную точность секунд от 0 до 6, возвращаемое
значение включает дробную часть секунд.</p>

<p><a href="#function_sysdate"><code>SYSDATE()</code></a>
возвращает время, в которое выполняется. Это отличается от поведения для
<a href="#function_now"><code>NOW()</code></a>,
который возвращает постоянное время, которое указывает на время, в которое
запрос начал выполняться. В пределах сохраненной функции или триггера
<a href="#function_now"><code>NOW()</code></a>
возвращает время, в которое функция или триггер начали выполняться.
<pre>
mysql&gt; SELECT NOW(), SLEEP(2), NOW();
+---------------------+----------+---------------------+
| NOW()               | SLEEP(2) | NOW()               |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:36 |  0       | 2006-04-12 13:47:36 |
+---------------------+----------+---------------------+

mysql&gt; SELECT SYSDATE(), SLEEP(2), SYSDATE();
+---------------------+----------+---------------------+
| SYSDATE()           | SLEEP(2) | SYSDATE()           |
+---------------------+----------+---------------------+
| 2006-04-12 13:47:44 |  0       | 2006-04-12 13:47:46 |
+---------------------+----------+---------------------+
</pre>

<p>Кроме того, <code>SET TIMESTAMP</code> затрагивает значение, возвращенное
<a href="#function_now"><code>NOW()</code></a>, но не
<a href="#function_sysdate"><code>SYSDATE()</code></a>.
Это означает, что настройки timestamp в двоичном журнале не имеют никакого
эффекта на <a href="#function_sysdate"><code>SYSDATE()</code></a>.
</p>

<p>Поскольку <a href="#function_sysdate"><code>SYSDATE()</code></a>
может возвратить различные значения даже в пределах того же самого запроса и
не затронут <code>SET TIMESTAMP</code>, это недетерминировано и поэтому
опасно для репликации, если используется основанное на запросах двоичное
журналирование. Если это проблема, Вы можете использовать основанное
на строке журналирование.</p>

<p>Альтернативно, Вы можете использовать опцию
<a href="server.htm#option_mysqld_sysdate-is-now"><code>--sysdate-is-now
</code></a>, чтобы вызвать
<a href="#function_sysdate"><code>SYSDATE()</code></a>
как псевдоним для
<a href="#function_now"><code>NOW()</code></a>. Это работает, если
опция используется на ведущем и на ведомом устройствах.</p>

<p>Недетерминированная природа
<a href="#function_sysdate"><code>SYSDATE()</code></a>
также означает, что индекс не может использоваться для того, чтобы оценить
выражения, которые обращаются к нему.</p></li>

<li><a name="function_time"></a><p>
<a href="#function_time"><code>TIME(<em><code>expr</code></em>)
</code></a></p>

<p>Извлекает часть времени из выражения <em><code>expr</code></em> типа time
или datetime и возвращает это как строку. Эта функция опасна для основанной
на запросах репликации. Предупреждение зарегистрировано, если Вы используете
эту функцию, когда <a href="replica.htm#sysvar_binlog_format"><code>
binlog_format</code></a> установлена в <code>STATEMENT</code>.
<pre>
mysql&gt; SELECT TIME('2003-12-31 01:02:03');
  -&gt; '01:02:03'
mysql&gt; SELECT TIME('2003-12-31 01:02:03.000123');
  -&gt; '01:02:03.000123'
</pre></li>

<li><a name="function_timediff"></a><p>
<a href="#function_timediff"><code>TIMEDIFF(<em><code>expr1</code>
</em>,<em><code>expr2</code></em>)</code></a></p>

<p><a href="#function_timediff"><code>TIMEDIFF()</code></a> вернет
<em><code>expr1</code></em> - <em><code>expr2</code></em> как значение time.
<em><code>expr1</code></em> и <em><code>expr2</code></em> выражения типа
time или date-and-time, но оба должны иметь тот же самый тип.</p>

<p>Результат, возвращенный <code>TIMEDIFF()</code> ограничен учтенным
диапазоном <a href="types.htm#time"><code>TIME</code></a>.
Альтернативно, Вы можете использовать любую из функций
<a href="#function_timestampdiff"><code>TIMESTAMPDIFF()</code></a>
и <a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code>
</a>, они обе возвращают целые числа.
<pre>
mysql&gt; SELECT TIMEDIFF('2000:01:01 00:00:00',
  -&gt; '2000:01:01 00:00:00.000001');
  -&gt; '-00:00:00.000001'
mysql&gt; SELECT TIMEDIFF('2008-12-31 23:59:59.000001',
  -&gt; '2008-12-30 01:01:01.000002');
  -&gt; '46:58:57.999999'
</pre></li>

<li><a name="function_timestamp"></a><p>
<a href="#function_timestamp"><code>TIMESTAMP(<em><code>expr</code>
</em>)</code></a>,
<a href="#function_timestamp"><code>TIMESTAMP(<em><code>expr1</code>
</em>,<em><code>expr2</code></em>)</code></a></p>

<p>С единственным параметром эта функция возвращает выражение
<em><code>expr</code></em> как значение datetime. С двумя параметрами это
добавляет выражение времени <em><code>expr2</code></em> к
<em><code>expr1</code></em> и возвращает результат как значение datetime.
<pre>
mysql&gt; SELECT TIMESTAMP('2003-12-31');
  -&gt; '2003-12-31 00:00:00'
mysql&gt; SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');
  -&gt; '2004-01-01 00:00:00'
</pre></li>

<li><a name="function_timestampadd"></a><p>
<a href="#function_timestampadd"><code>TIMESTAMPADD(<em><code>unit
</code></em>,<em><code>interval</code></em>,<em><code>datetime_expr</code>
</em>)</code></a></p>

<p>Добавляет выражение целого числа
<em><code>interval</code></em> к date или datetime
<em><code>datetime_expr</code></em>. Модуль для
<em><code>interval</code></em> дан параметром <em><code>unit</code></em>,
который должен быть одним из следующих значений:
<code>MICROSECOND</code>, <code>SECOND</code>, <code>MINUTE</code>,
<code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>MONTH</code>,
<code>QUARTER</code> или <code>YEAR</code>.</p>

<p>Значение <em><code>unit</code></em> может быть определено, используя одно
из ключевых слов как показано, или с приставкой <code>SQL_TSI_</code>.
Например, <code>DAY</code> и <code>SQL_TSI_DAY</code> оба допустимы.
<pre>
mysql&gt; SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');
    -&gt; '2003-01-02 00:01:00'
mysql&gt; SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');
    -&gt; '2003-01-09'
</pre></li>

<li><a name="function_timestampdiff"></a><p>
<a href="#function_timestampdiff"><code>TIMESTAMPDIFF(<em><code>unit
</code></em>,<em><code>datetime_expr1</code></em>,<em><code>datetime_expr2
</code></em>)</code></a></p>

<p>Вернет <em><code>datetime_expr2</code></em> - <em><code>datetime_expr1
</code></em>, где <em><code>datetime_expr1</code></em> и
<em><code>datetime_expr2</code></em> выражения date или datetime.
Одно выражение может быть датой, другое datetime, значение даты обработано
как datetime с частью времени <code>'00:00:00'</code> где необходимо. Модуль
для результата (целое число) дан параметром <em><code>unit</code></em>.
Допустимые значения для <em><code>unit</code></em> перечислены в описании
<a href="#function_timestampadd"><code>TIMESTAMPADD()</code></a>.
<pre>
mysql&gt; SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');
  -&gt; 3
mysql&gt; SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');
  -&gt; -1
mysql&gt; SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');
  -&gt; 128885
</pre>

<p>Порядок параметров date или datetime в этой функции противоположность
используемого с <a href="#function_timestamp"><code>TIMESTAMP()
</code></a>, когда она вызвана с 2 параметрами.</p></li>

<li><a name="function_time-format"></a><p>
<a href="#function_time-format"><code>TIME_FORMAT(<em><code>time
</code></em>,<em><code>format</code></em>)</code></a></p>

<p>Это используется как функция
<a href="#function_date-format"><code>DATE_FORMAT()</code></a>,
но строка <em><code>format</code></em> может содержать спецификаторы формата
только для часов, минут, секунд и микросекунд. Другие спецификаторы
производят <code>NULL</code> или <code>0</code>.</p>

<p>Если <em><code>time</code></em> содержит часть часа, которая больше, чем
<code>23</code>, спецификаторы формата часа <code>%H</code> и <code>%k</code>
производят значение, больше чем обычный диапазон
<code>0..23</code>. Другие спецификаторы формата часа производят значение
часа не более 12.
<pre>
mysql&gt; SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');
  -&gt; '100 100 04 04 4'
</pre></li>

<li><a name="function_time-to-sec"></a><p>
<a href="#function_time-to-sec"><code>TIME_TO_SEC(<em><code>time
</code></em>)</code></a></p>

<p>Вернет параметр <em><code>time</code></em>, конвертированный в секунды.
<pre>
mysql&gt; SELECT TIME_TO_SEC('22:23:00');
  -&gt; 80580
mysql&gt; SELECT TIME_TO_SEC('00:39:38');
  -&gt; 2378
</pre></li>

<li><a name="function_to-days"></a><p>
<a href="#function_to-days"><code>TO_DAYS(<em><code>date</code>
</em>)</code></a></p>
<p>Учитывая дату <em><code>date</code></em>, возвращает
число дней с года 0.
<pre>
mysql&gt; SELECT TO_DAYS(950501);
  -&gt; 728779
mysql&gt; SELECT TO_DAYS('2007-10-07');
  -&gt; 733321
</pre>

<p><a href="#function_to-days"><code>TO_DAYS()</code></a>
не предназначен для использования со значениями, которые предшествуют
появлению Григорианского календаря (1582 г.), потому что это не принимает во
внимание дни, которые были потеряны, когда календарь был изменен. Для дат до
1582 г. (и возможно более поздних в других местах действия), следствия этой
функции ненадежны. См. <a href="#mysql-calendar">раздел 13.8</a>.
</p>

<p>Помните, что MySQL преобразовывает значения года с двумя цифрами в датах к
форме с четырьмя цифрами, используя правила в
<a href="types.htm#date-and-time-types">разделе 12.3</a>.
Например, <code>'2008-10-07'</code> и <code>'08-10-07'</code>
обработаны как идентичные даты:
<pre>
mysql&gt; SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');
  -&gt; 733687, 733687
</pre>

<p>В MySQL нулевая дата определена как <code>'0000-00-00'</code>, даже при
том, что эту дату самостоятельно считают недопустимой. Это означает что, для
<code>'0000-00-00'</code> и <code>'0000-01-01'</code>
<a href="#function_to-days"><code>TO_DAYS()</code></a>
возвращает значения, показанные здесь:
<pre>
mysql&gt; SELECT TO_DAYS('0000-00-00');
+-----------------------+
| to_days('0000-00-00') |
+-----------------------+
|  NULL                 |
+-----------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+----------------------------------------+
| Level   | Code | Message                                |
+---------+------+----------------------------------------+
| Warning | 1292 | Incorrect datetime value: '0000-00-00' |
+---------+------+----------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT TO_DAYS('0000-01-01');
+-----------------------+
| to_days('0000-01-01') |
+-----------------------+
| 1                     |
+-----------------------+
1 row in set (0.00 sec)
</pre>

<p>Это верно независимо от режима SQL
<a href="server.htm#sqlmode_allow_invalid_dates"><code>ALLOW_INVALID_DATES
</code></a>.</p></li>

<li><a name="function_to-seconds"></a><p>
<a href="#function_to-seconds"><code>TO_SECONDS(<em><code>expr
</code></em>)</code></a></p>

<p>Учитывая дату или datetime <em><code>expr</code></em>, возвращает число
секунд с года 0. Если <em><code>expr</code></em> не допустимая дата или
значение datetime, возвращет <code>NULL</code>.
<pre>
mysql&gt; SELECT TO_SECONDS(950501);
  -&gt; 62966505600
mysql&gt; SELECT TO_SECONDS('2009-11-29');
  -&gt; 63426672000
mysql&gt; SELECT TO_SECONDS('2009-11-29 13:43:32');
  -&gt; 63426721412
mysql&gt; SELECT TO_SECONDS( NOW() );
  -&gt; 63426721458
</pre>

<p>Подобно <a href="#function_to-days"><code>TO_DAYS()</code></a>,
<code>TO_SECONDS()</code> не предназначен для использования со значениями,
которые предшествуют появлению Григорианского календаря (1582), потому что
это не принимает во внимание дни, которые были потеряны, когда календарь был
изменен. Для дат до 1582 (и возможно более поздний год в других местах),
следствия этой функции ненадежны. См.
<a href="#mysql-calendar">раздел 13.8</a>.</p>

<p>Подобно <a href="#function_to-days"><code>TO_DAYS()</code></a>,
<code>TO_SECONDS()</code> преобразовывает значения года с двумя цифрами в
датах к форме с четырьмя цифрами, используя правила в
<a href="types.htm#date-and-time-types">разделе 12.3</a>.</p>

<p>В MySQL нулевая дата определена как <code>'0000-00-00'</code>, даже при
том, что эту дату самостоятельно считают недопустимой. Это означает, что для
<code>'0000-00-00'</code> и <code>'0000-01-01'</code>
<a href="#function_to-seconds"><code>TO_SECONDS()</code></a>
возвращает такие значения:
<pre>
mysql&gt; SELECT TO_SECONDS('0000-00-00');
+--------------------------+
| TO_SECONDS('0000-00-00') |
+--------------------------+
| NULL                     |
+--------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+---------+------+----------------------------------------+
| Level   | Code | Message                                |
+---------+------+----------------------------------------+
| Warning | 1292 | Incorrect datetime value: '0000-00-00' |
+---------+------+----------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT TO_SECONDS('0000-01-01');
+--------------------------+
| TO_SECONDS('0000-01-01') |
+--------------------------+
| 86400                    |
+--------------------------+
1 row in set (0.00 sec)
</pre>

<p>Это верно независимо от режима SQL
<a href="server.htm#sqlmode_allow_invalid_dates"><code>ALLOW_INVALID_DATES
</code></a>.</p></li>

<li><a name="function_unix-timestamp"></a><p>
<a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code>
</a>, <a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP(<em>
<code>date</code></em>)</code></a></p>

<p>Если вызвано без параметра, возвращает Unix timestamp (секунды с
<code>'1970-01-01 00:00:00'</code> UTC). Возвращаемое значение целое число,
если никакой параметр не дан или параметр не включает дробную часть секунд,
или <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>,
если параметр включает дробную часть секунд.</p>

<p>Если <a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()
</code></a> вызвана с параметром <em><code>date</code></em>,
это возвращает значение параметра как секунды с
<code>'1970-01-01 00:00:00'</code> UTC. <em><code>date</code></em> может
быть строкой <a href="types.htm#datetime"><code>DATE</code></a>,
<a href="types.htm#datetime"><code>DATETIME</code></a>,
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> или числом в формате
<code>YYMMDD</code> или <code>YYYYMMDD</code>, произвольно включая дробную
часть секунд. Сервер интерпретирует <em><code>date</code></em>
как значение в зоне текущего времени и преобразует это к внутреннему значению
в UTC. Клиенты могут установить свой часовой пояс как описано в
<a href="global.htm#time-zone-support">разделе 11.6</a>.
<pre>
mysql&gt; SELECT UNIX_TIMESTAMP();
    -&gt; 1447431666
mysql&gt; SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');
    -&gt; 1447431619
mysql&gt; SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');
    -&gt; 1447431619.012
</pre>

<p>Когда <a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()
</code></a> используется на столбце <a href="types.htm#datetime"><code>
TIMESTAMP</code></a>, функция возвращает внутреннее значение timestamp
непосредственно, без неявного преобразования <span>string-to-Unix-timestamp
</span>. Если Вы передаете дату не из диапазона
<a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code>
</a>, это возвращает <code>0</code>.</p>

<p>Отметьте: Если Вы используете
<a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code></a>
и <a href="#function_from-unixtime"><code>FROM_UNIXTIME()</code>
</a>, чтобы преобразовать между значениями <a href="types.htm#datetime">
<code>TIMESTAMP</code></a> и Unix timestamp, преобразование будет с потерями,
потому что отображение не является непосредственным в обоих направлениях.
Например, из-за соглашений для изменений зоны местного времени, возможно
отобразить два значения
<a href="#function_unix-timestamp"><code>UNIX_TIMESTAMP()</code></a>
на два <a href="types.htm#datetime"><code>TIMESTAMP</code></a> с одним и тем
же временем. <a href="#function_from-unixtime"><code>FROM_UNIXTIME()
</code></a> отобразит значение назад только на одно из оригинальных значений
<a href="types.htm#datetime"><code>TIMESTAMP</code></a>.
Вот пример, использования значений
<a href="types.htm#datetime"><code>TIMESTAMP</code></a>
в часовом поясе <code>CET</code>:
<pre>
mysql&gt; SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');
+---------------------------------------+
| UNIX_TIMESTAMP('2005-03-27 03:00:00') |
+---------------------------------------+
|  1111885200                           |
+---------------------------------------+

mysql&gt; SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');
+---------------------------------------+
| UNIX_TIMESTAMP('2005-03-27 02:00:00') |
+---------------------------------------+
|  1111885200                           |
+---------------------------------------+

mysql&gt; SELECT FROM_UNIXTIME(1111885200);
+---------------------------+
| FROM_UNIXTIME(1111885200) |
+---------------------------+
| 2005-03-27 03:00:00       |
+---------------------------+
</pre></li>

<li><a name="function_utc-date"></a><p>
<a href="#function_utc-date"><code>UTC_DATE</code></a>,
<a href="#function_utc-date"><code>UTC_DATE()</code></a></p>

<p>Возвращает текущую дату UTC как значение в формате
<code>'YYYY-MM-DD'</code> или <code>YYYYMMDD</code> в зависимости от того,
используется ли функция в строковом или числовом контексте.
<pre>
mysql&gt; SELECT UTC_DATE(), UTC_DATE() + 0;
    -&gt; '2003-08-14', 20030814
</pre></li>

<li><a name="function_utc-time"></a><p>
<a href="#function_utc-time"><code>UTC_TIME</code></a>,
<a href="#function_utc-time"><code>UTC_TIME([<em><code>fsp</code>
</em>])</code></a></p>

<p>Возвращает текущее время UTC как значение в формате
<code>'HH:MM:SS'</code> или <code>HHMMSS</code> в зависимости от того,
используется ли функция в строковом или числовом контексте.</p>

<p>Если параметр <em><code>fsp</code></em> задан, чтобы определить дробную
точность секунд от 0 до 6, возвращаемое значение включает
дробную часть секунд.
<pre>
mysql&gt; SELECT UTC_TIME(), UTC_TIME() + 0;
    -&gt; '18:07:53', 180753.000000
</pre></li>

<li><a name="function_utc-timestamp"></a><p>
<a href="#function_utc-timestamp"><code>UTC_TIMESTAMP</code></a>,
<a href="#function_utc-timestamp"><code>UTC_TIMESTAMP([<em><code>
fsp</code></em>])</code></a></p>

<p>Возвращает текущую дату UTC и время как значение в формате
<code>'YYYY-MM-DD HH:MM:SS'</code> или <code>YYYYMMDDHHMMSS</code>
в зависимости от того, используется ли функция в строковом
или числовом контексте.</p>

<p>Если параметр <em><code>fsp</code></em> задан, чтобы определить дробную
точность секунд от 0 до 6, возвращаемое значение включает
дробную часть секунд.
<pre>
mysql&gt; SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;
    -&gt; '2003-08-14 18:08:04', 20030814180804.000000
</pre></li>

<li><a name="function_week"></a><p>
<a href="#function_week"><code>WEEK(<em><code>date</code></em>[,
<em><code>mode</code></em>])</code></a></p>

<p>Эта функция возвращает номер недели для
<em><code>date</code></em>. Двухаргументная форма
<a href="#function_week"><code>WEEK()</code></a>
позволяет Вам определить, запускается ли неделя в воскресенье или в
понедельник и должно ли возвращаемое значение быть в диапазоне от
<code>0</code> до <code>53</code> или от <code>1</code> до
<code>53</code>. Если параметр <em><code>mode</code></em> опущен, значение
используется значение из системной переменной
<a href="server.htm#sysvar_default_week_format"><code>
default_week_format</code></a>. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p>Следующая таблица описывает как работает параметр <em><code>mode</code>
</em>.</p>
<table border="1">
<thead><tr><th scope="col">Режим</th><th scope="col">Первый день недели</th>
<th scope="col">Диапазон</th><th scope="col">Неделя 1 является первой неделей
</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>Sunday</td><td>0-53</td>
<td>с Sunday в этом году</td></tr>
<tr><td scope="row">1</td><td>Monday</td><td>0-53</td>
<td>с 4 или больше днями в этом году</td></tr>
<tr><td scope="row">2</td><td>Sunday</td><td>1-53</td>
<td>с Sunday в этом году</td></tr>
<tr><td scope="row">3</td><td>Monday</td><td>1-53</td>
<td>с 4 или больше днями в этом году</td></tr>
<tr><td scope="row">4</td><td>Sunday</td><td>0-53</td>
<td>с 4 или больше днями в этом году</td></tr>
<tr><td scope="row">5</td><td>Monday</td><td>0-53</td>
<td>с Monday в этом году</td></tr>
<tr><td scope="row">6</td><td>Sunday</td><td>1-53</td>
<td>с 4 или больше днями в этом году</td></tr>
<tr><td scope="row">7</td><td>Monday</td><td>1-53</td>
<td>с Monday в этом году</td></tr></tbody></table>

<p>Для значений <em><code>mode</code></em> со смыслом
"<span>с 4 или больше днями в этом году</span>"
недели пронумерованы согласно ISO 8601:1988.</p>

<ul><li><p>Если у недели, содержащей 1 января, есть 4 или больше дня в новом
году, это неделя 1.</li>
<li>Иначе, это прошлая неделя предыдущего года, а следующая неделя как
раз и есть неделя 1.</p></li></ul>

<pre>
mysql&gt; SELECT WEEK('2008-02-20');
    -&gt; 7
mysql&gt; SELECT WEEK('2008-02-20',0);
    -&gt; 7
mysql&gt; SELECT WEEK('2008-02-20',1);
    -&gt; 8
mysql&gt; SELECT WEEK('2008-12-31',1);
    -&gt; 53
</pre>

<p>Отметьте что, если дата на прошлой неделе предыдущего года, MySQL
возвращает <code>0</code>, если Вы не используете
<code>2</code>, <code>3</code>, <code>6</code> или <code>7</code>
как параметр <em><code>mode</code></em>:
<pre>
mysql&gt; SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);
    -&gt; 2000, 0
</pre>

<p>Можно было бы обсудить, что
<a href="#function_week"><code>WEEK()</code></a> должна возвратить
<code>52</code>, потому что данная дата фактически происходит на 52-ой неделе
1999. <a href="#function_week"><code>WEEK()</code></a> вместо этого
вернет <code>0</code> так, чтобы возвращаемое значение было
<span>номером недели в данном году</span>. Это делает функцию
<a href="#function_week"><code>WEEK()</code></a> надежной, когда
она объединена с другими функциями, которые извлекают часть даты.</p>

<p>Если Вы предпочитаете результат, оцененный относительно года, который
содержит первый день недели для данной даты, надо использовать
<code>0</code>, <code>2</code>, <code>5</code> или <code>7</code>
для параметра <em><code>mode</code></em>.
<pre>
mysql&gt; SELECT WEEK('2000-01-01',2);
    -&gt; 52
</pre>

<p>Альтернативно, используйте функцию
<a href="#function_yearweek"><code>YEARWEEK()</code></a>:
<pre>
mysql&gt; SELECT YEARWEEK('2000-01-01');
    -&gt; 199952
mysql&gt; SELECT MID(YEARWEEK('2000-01-01'),5,2);
    -&gt; '52'
</pre></li>

<li><a name="function_weekday"></a><p>
<a href="#function_weekday"><code>WEEKDAY(<em><code>date</code>
</em>)</code></a></p>

<p>Возвращается индекс дня для <em><code>date</code></em>
(<code>0</code> = Monday, <code>1</code> = Tuesday, ...,
<code>6</code> = Sunday).
<pre>
mysql&gt; SELECT WEEKDAY('2008-02-03 22:23:00');
    -&gt; 6
mysql&gt; SELECT WEEKDAY('2007-11-06');
    -&gt; 1
</pre></li>

<li><a name="function_weekofyear"></a><p>
<a href="#function_weekofyear"><code>WEEKOFYEAR(<em><code>date
</code></em>)</code></a></p>

<p>Возвращает календарную неделю даты как число в диапазоне от
<code>1</code> до <code>53</code>.
<a href="#function_weekofyear"><code>WEEKOFYEAR()</code></a>
функция совместимости, которая эквивалентна
<a href="#function_week"><code>WEEK(<em><code>date</code></em>,3)
</code></a>.
<pre>
mysql&gt; SELECT WEEKOFYEAR('2008-02-20');
  -&gt; 8
</pre></li>

<li><a name="function_year"></a><p>
<a href="#function_year"><code>YEAR(<em><code>date</code></em>)
</code></a></p>

<p>Возвращает год для <em><code>date</code></em> в диапазоне
от <code>1000</code> до <code>9999</code> или
<code>0</code> для <span>нулевой</span> даты.
<pre>
mysql&gt; SELECT YEAR('1987-01-01');
    -&gt; 1987
</pre></li>

<li><a name="function_yearweek"></a><p>
<a href="#function_yearweek"><code>YEARWEEK(<em><code>date</code>
</em>)</code></a>,
<a href="#function_yearweek"><code>YEARWEEK(<em><code>date</code>
</em>,<em><code>mode</code></em>)</code></a></p>
<p>Год и неделя для даты. Год в результате может отличаться от
года в параметре даты для первой и последней недель года.</p>

<p>Параметр <em><code>mode</code></em> работает точно как в функции
<a href="#function_week"><code>WEEK()</code></a>.
Для синтаксиса единственного параметра используется значение
<em><code>mode</code></em> 0. В отличие от
<a href="#function_week"><code>WEEK()</code></a>, значение
<a href="server.htm#sysvar_default_week_format"><code>default_week_format
</code></a> не влияет на
<a href="#function_yearweek"><code>YEARWEEK()</code></a>.
<pre>
mysql&gt; SELECT YEARWEEK('1987-01-01');
  -&gt; 198652
</pre>

<p>Отметьте, что номер недели отличается от номера из функции
<a href="#function_week"><code>WEEK()</code></a>
(<code>0</code>) для дополнительных параметров <code>0</code> или
<code>1</code>, поскольку <a href="#function_week"><code>WEEK()
</code></a> тогда возвращает неделю в контексте данного года.</p></li></ul>

<h2><a name="mysql-calendar"></a>13.8. Какой календарь использует MySQL?</h2>
<p>MySQL использует то, что известно как <span>старый Григорианский календарь
</span>.</p>

<p>Каждая страна, которая переключилась с Юлианского на Григорианский
календарь, должна была отказаться по крайней мере от десяти дней. Чтобы
видеть, как это работает, рассмотрите месяц октября 1582, когда первый
такой переход произошел.</p>

<table border="1">
<thead><tr><th scope="col">Monday</th><th scope="col">Tuesday</th>
<th scope="col">Wednesday</th><th scope="col">Thursday</th>
<th scope="col">Friday</th><th scope="col">Saturday</th>
<th scope="col">Sunday</th></tr></thead>
<tbody><tr><td scope="row">1</td><td>2</td><td>3</td><td>4</td><td>15</td>
<td>16</td><td>17</td></tr>
<tr><td scope="row">18</td><td>19</td><td>20</td><td>21</td><td>22</td>
<td>23</td><td>24</td></tr>
<tr><td scope="row">25</td><td>26</td><td>27</td><td>28</td><td>29</td>
<td>30</td><td>31</td></tr></tbody></table>

<p>Нет никаких дат между 4 октября и 15 октября. Эту неоднородность называют
<span>cutover</span>. Любые даты перед ней Юлианские, а любые даты после
cutover являются Грегорианскими. Даты во время
cutover являются несуществующими.</p>

<p>Календарь относящийся к датам, когда он не было фактически использован,
назван <span>старым</span>. Таким образом, если мы предполагаем, что никогда
не было cutover, и Грегорианские правила всегда работали, у нас есть старый
Григорианский календарь. Это то, что используется MySQL, как требуется
стандартным SQL. Поэтому даты до cutover, сохраненные как значения MySQL
<a href="types.htm#datetime"><code>DATE</code></a> или
<a href="types.htm#datetime"><code>DATETIME</code></a>
должны быть скорректированы, чтобы дать компенсацию за различие.
Важно понять, что cutover не происходил в то же самое время во всех странах,
и что, чем позже это произошло, тем больше было потеряно дней.
Например, в Великобритании, это имело место в 1752, когда среда 2 сентября
сопровождалась четвергом 14 сентября. Россия оставалась на юлианском
календаре до 1918, теряя 13 дней в процессе, и именно поэтому Октябрьская
революция произошла в ноябре, согласно Григорианскому календарю.</p>

<h2><a name="fulltext-search"></a>13.9. Функции полнотекстового поиска</h2>
<p>
<a href="#function_match"><code>MATCH
(<em><code>col1</code></em>,<em><code>col2</code></em>,...)
AGAINST (<em><code>expr</code></em>
[<em><code>search_modifier</code></em>])</code></a>
<pre>
<em><code>search_modifier:</code></em>
  {IN NATURAL LANGUAGE MODE
   | IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION
   | IN BOOLEAN MODE
   | WITH QUERY EXPANSION
  }
</pre>

<p>У MySQL есть поддержка полнотекстовой индексации и поиска:</p>
<ul><li><p>Полнотекстовое индексирование в MySQL это индекс типа
<code>FULLTEXT</code>.</li>

<li>Полнотекстовый индекс может использоваться только с таблицами
<a href="innodb.htm"><code>InnoDB</code></a> или
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
и может быть составлен только для столбцов
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>.</li>

<li><code>MySQL</code> обеспечивает встроенный полнотекстовый анализатор
ngram, который поддерживает китайский, японский и корейский (CJK) языки, а
также устанавливаемый полнотекстовый плагин анализатора MeCab для японского
языка. Различия обрисованы в общих чертах в разделах
<a href="#fulltext-search-ngram">13.9.8</a> и
<a href="#fulltext-search-mecab">13.9.9</a>.</li>

<li>Индекс <code>FULLTEXT</code> может быть определен в
<a href="sql.htm#create-table"><code>CREATE TABLE</code></a>, когда таблица
составлена, или добавлен позднее, используя
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a> или
<a href="sql.htm#create-index"><code>CREATE INDEX</code></a>.</li>

<li>Для больших наборов данных это намного быстрее, чтобы загрузить Ваши
данные в таблицу, которая не имеет индекса <code>FULLTEXT</code> и создать
индекс после этого, чем загрузить данные в таблицу, у которой он уже есть.
</p></li></ul>

<p>Полнотекстовый поиск выполнен, используя синтаксис
<a href="#function_match"><code>MATCH() ... AGAINST</code></a>.
<a href="#function_match"><code>MATCH()</code></a> берет
список разделенных запятой значений, который называет столбцы, которые будут
просмотрены. <code>AGAINST</code> берет строку, чтобы искать и дополнительный
модификатор, который указывает какой поиск использовать. Строка поиска должна
быть строковым значением, которое является постоянным во время оценки
запроса. Это исключает, например, столбец таблицы, потому что это может
отличаться для каждой строки.</p>

<p>Есть три типа полнотекстовых поисков:</p>
<ul><li><p>Поиск естественного языка интерпретирует строку поиска как фразу
на естественном языке (фраза в свободном тексте). Нет никаких специальных
операторов. Список стоп-слов применяется. Для получения дополнительной
информации о списках стоп-слов см.
<a href="#fulltext-stopwords">раздел 13.9.4</a>.</p>

<p>Полнотекстовые поискы естественного языка, если модификатор дан
<code>IN NATURAL LANGUAGE MODE</code> или если никакой модификатор не дан.
Для получения дополнительной информации см.
<a href="#fulltext-natural-language">раздел 13.9.1</a>.</li>

<li>Булев поиск интерпретирует строку поиска, используя правила специального
языка запроса. Строка содержит слова для поиска. Это может также содержать
операторы, которые определяют требования, таким образом, что слово должно
присутствовать или отсутствовать в соответствующих строках, или что это
должно иметь больший или меньший вес, чем обычно. Определенные общие слова
(стоп-слов) опущены во время поиска по индексу и не соответствуют, если
существуют в строке поиска. Модификатор <code>IN BOOLEAN MODE</code>
определяет булев поиск.</li>

<li>Поиск расширения запроса модификация поиска естественного языка. Строка
поиска используется, чтобы выполнить поиск естественного языка. Тогда слова
самых соответствующих строк, возвращенных поиском, добавлены к строке поиска,
и поиск сделан снова. Запрос возвращает строки из второго поиска. Модификатор
<code>IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION</code> или <code>WITH
QUERY EXPANSION</code> определяет поиск расширения запроса.</p></li></ul>

<p><a href="programs.htm#myisam-ftdump"><span><strong>myisam_ftdump</strong>
</span></a> выводит содержание полнотекстового индекса <code>MyISAM</code>.
Это может быть полезно для того, чтобы отладить полнотекстовые запросы.</p>

<h3><a name="fulltext-natural-language"></a>13.9.1.
Полнотекстовые поиски на естественном языке</h3>
<p>По умолчанию или с модификатором <code>IN NATURAL LANGUAGE MODE</code>
<a href="#function_match"><code>MATCH()</code></a> выполняет поиск
естественного языка строки для <span>текстового набора</span>. Набор один или
большее количество столбцов, включенных в индекс <code>FULLTEXT</code>.
Строка поиска дана как параметр <code>AGAINST()</code>. Для каждой строки
в таблице <a href="#function_match"><code>MATCH()</code></a>
возвращает значение уместности, то есть, мера подобия между строкой поиска и
текстом в строке в столбцах, названных в списке
<a href="#function_match"><code>MATCH()</code></a>.
<pre>
mysql&gt; CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT, FULLTEXT (title,body)) ENGINE=InnoDB;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO articles (title,body) VALUES
  ('MySQL Tutorial','DBMS stands for DataBase ...'),
  ('How To Use MySQL Well','After you went through a ...'),
  ('Optimizing MySQL','In this tutorial we will show ...'),
  ('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
  ('MySQL vs. YourSQL','In the following database comparison ...'),
  ('MySQL Security','When configured properly, MySQL ...');
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
                   AGAINST ('database' IN NATURAL LANGUAGE MODE);
+----+-------------------+------------------------------------------+
| id | title             | body                                     |
+----+-------------------+------------------------------------------+
|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |
|  5 | MySQL vs. YourSQL | In the following database comparison ... |
+----+-------------------+------------------------------------------+
2 rows in set (0.00 sec)
</pre>

<p>По умолчанию, поиск выполнен нечувствительным к регистру способом. Чтобы
выполнить чувствительный к регистру полнотекстовый поиск, используйте
двоичное сопоставление для индексированных столбцов. Например, столбцу,
который использует набор символов <code>latin1</code> можно назначить
сопоставление <code>latin1_bin</code>, чтобы сделать это чувствительным к
регистру для полнотекстовых поисков.</p>

<p>Когда <a href="#function_match"><code>MATCH()</code></a>
используется в <code>WHERE</code>, как в примере, показанном ранее, строки
будут автоматически отсортированы с самой высокой уместностью сначала.
Значения уместности неотрицательные числа с плавающей запятой. Нулевая
уместность не означает подобия. Уместность вычислена основываясь на числе
слов в строке (документе), числе уникальных слов в строке, общем количестве
слов в наборе и числе строк, которые содержат особое слово.</p>

<p>Термин <span>документ</span> может быть использован попеременно с термином
<span>строка</span>, и оба термина относятся к индексированной части строки.
Термин <span>набор</span> относится к индексированным столбцам и
охватывает все строки.</p>

<p>Чтобы просто посчитать соответствия, Вы можете использовать такой запрос:
<pre>
mysql&gt; SELECT COUNT(*) FROM articles
                 WHERE MATCH (title,body)
                 AGAINST ('database' IN NATURAL LANGUAGE MODE);
+----------+
| COUNT(*) |
+----------+
|  2       |
+----------+
1 row in set (0.00 sec)
</pre>

<p>Вы могли бы счесть более быстрым переписать запрос следующим образом:
<pre>
mysql&gt; SELECT COUNT(IF(MATCH (title,body)
                 AGAINST ('database' IN NATURAL LANGUAGE MODE), 1, NULL))
                 AS count FROM articles;
+-------+
| count |
+-------+
| 2     |
+-------+
1 row in set (0.03 sec)
</pre>

<p>Первый запрос делает некоторую дополнительную работу (сортирует
результаты по уместности), но также может использовать поиск по индексу,
основанный на <code>WHERE</code>. Индексированный поиск мог бы сделать
первый запрос быстрее, если поиску соответствует немного строк. Второй запрос
выполняет полное сканирование таблицы, которое могло бы быть быстрее, чем
поиск по индексу, если бы критерий поиска присутствовал в большинстве строк.
</p>

<p>Для естественного языка полнотекстовые поиска, столбцы, названные в
<a href="#function_match"><code>MATCH()</code></a>
должны быть теми же самыми столбцами, которые включены в индекс
<code>FULLTEXT</code>. Для предыдущего запроса, отметьте, что столбцы,
названные в <a href="#function_match"><code>MATCH()</code></a>
(<code>title</code> и <code>body</code>) те же самые, что и названные в
определении индекса <code>FULLTEXT</code> таблицы <code>article</code>.
Чтобы искать <code>title</code> или <code>body</code> отдельно, Вы создали бы
отдельный индекс <code>FULLTEXT</code> для каждого столбца.</p>

<p>Вы можете также выполнить булев поиск или поиск с расширением запроса. Эти
типы поиска описаны в разделах
<a href="#fulltext-boolean">13.9.2</a> и
<a href="#fulltext-query-expansion">13.9.3</a>.</p>

<p>Полнотекстовый поиск, который использует индексирование, может назвать
столбцы только единственной таблицы в
<a href="#function_match"><code>MATCH()</code></a>, потому что
индексирование не может охватить много таблиц. Для таблиц
<code>MyISAM</code> булев поиск может быть сделан в отсутствие индексирования
(хотя более медленно), тогда возможно назвать столбцы разных таблиц.</p>

<p>Предыдущий пример основная иллюстрация, которая показывает, как
использовать <a href="#function_match"><code>MATCH()</code></a>,
когда строки возвращены в порядке уменьшающейся уместности. Следующий пример
показывает, как получить значения уместности явно. Возвращенные строки не
упорядочены потому, что <a href="sql.htm#select"><code>SELECT</code></a>
не включает ни одного <code>WHERE</code> или <code>ORDER BY</code>:
<pre>
mysql&gt; SELECT id, MATCH (title,body)
                 AGAINST ('Tutorial' IN NATURAL LANGUAGE MODE) AS score
                 FROM articles;
+----+---------------------+
| id | score               |
+----+---------------------+
|  1 | 0.22764469683170319 |
|  2 |   0                 |
|  3 | 0.22764469683170319 |
|  4 |   0                 |
|  5 |   0                 |
|  6 |   0                 |
+----+---------------------+
6 rows in set (0.00 sec)
</pre>

<p>Следующий пример более сложен. Запрос возвращает значения уместности, а
также сортирует строки в порядке уменьшающейся уместности.
Чтобы достигчь этого результата, определите
<a href="#function_match"><code>MATCH()</code></a> дважды:
первый в списке <a href="sql.htm#select"><code>SELECT</code></a>, второй
в предложении <code>WHERE</code>. Это не вызывает проблем, потому что
оптимизатор MySQL замечает два идентичиных вызова
<a href="#function_match"><code>MATCH()</code></a>
и вызывает полнотекстовый код поиска только однажды.
<pre>
mysql&gt; SELECT id, body, MATCH (title,body) AGAINST
                 ('Security implications of running MySQL as root'
                 IN NATURAL LANGUAGE MODE) AS score
                 FROM articles WHERE MATCH (title,body) AGAINST
                 ('Security implications of running MySQL as root'
                 IN NATURAL LANGUAGE MODE);
+----+-------------------------------------+-----------------+
| id | body                                | score           |
+----+-------------------------------------+-----------------+
|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |
|  6 | When configured properly, MySQL ... | 1.3114095926285 |
+----+-------------------------------------+-----------------+
2 rows in set (0.00 sec)
</pre>

<p>В MySQL <code>FULLTEXT</code> расценивает любую последовательность
истинных символов слова (буквы, цифры и подчеркивания) как слово. Та
последовательность может также содержать апострофы (<code>'</code>), но не
больше, чем один подряд. Это означает, что <code>aaa'bbb</code> расценено как
одно слово, но <code>aaa''bbb</code> как два. Апострофы в начале или конце
слова игнорируются анализатором в любом количестве:
<code>'aaa'bbb'</code> обрабатывается как <code>aaa'bbb</code>.</p>

<p>Встроенный анализатор <code>FULLTEXT</code> определяет, где слова
начинаются и заканчиваются, ища определенные символы-разделители,
например, <code> </code> (пробел), <code>,</code> (запятая) и <code>.</code>
(точка). Если слова не отделены разделителями (как в, например, китайском
языке), встроенный анализатор <code>FULLTEXT</code> не может определить, где
слово начинается или заканчивается. Чтобы добавить слова или другие
индексированные термины на таких языках к индексу <code>FULLTEXT</code>,
который использует встроенный анализатор <code>FULLTEXT</code>,
Вы должны предварительно обработать их так, чтобы они были отделены некоторым
произвольным разделителем, например, <code>"</code>.
Альтернативно, Вы можете создать индексы <code>FULLTEXT</code>,
используя плагин анализатора ngram (для китайского, японского или корейского
языка) или плагин анализатора MeCab (для японского языка).</p>

<p>Возможно написать плагин, который заменяет встроенный полнотекстовый
анализатор. Для деталей см. <a href="extend.htm#plugin-api">раздел 26.2</a>.
Например исходный код плагина анализатора есть в каталоге
<code>plugin/fulltext</code> исходных текстов MySQL.</p>

<p>Некоторые слова проигнорированы в полнотекстовых поисках:</p>
<ul><li><p>Любое слово, которое слишком коротко, проигнорировано. Длина
минимума значения по умолчанию слов, которые найдены полнотекстовыми
поисками, является тремя символами для <code>InnoDB</code> и четыремя
символами для <code>MyISAM</code>. Вы можете управлять сокращением,
устанавливая параметр конфигурации прежде, чем создать индекс:
параметр конфигурации для <code>InnoDB</code>
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a> или
<a href="server.htm#sysvar_ft_min_word_len">
<code>ft_min_word_len</code></a> для <code>MyISAM</code>.</p>

<p>Это поведение не относится к индексам
<code>FULLTEXT</code>, которые используют ngram. Для него
маркерная длина определена опцией
<a href="server.htm#sysvar_ngram_token_size">
<code>ngram_token_size</code></a>.</p></li>

<li><p>Слова в списке стоп-слов проигнорированы. Стоп-слово такое слово, как
<span>the</span> или <span>some</span>, которое настолько распространено, что
у него, как полагают, есть нулевое семантическое значение. Есть встроенный
список стоп-слов, но он может быть перекрыт определяемым пользователем
списком. Списки стоп-слов и связанные параметры конфигурации отличаются для
<code>InnoDB</code> и <code>MyISAM</code>. Обработкой стоп-слов управляют
параметры конфигурации <a href="innodb.htm#sysvar_innodb_ft_enable_stopword">
<code>innodb_ft_enable_stopword</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_server_stopword_table"><code>
innodb_ft_server_stopword_table</code></a> и
<a href="innodb.htm#sysvar_innodb_ft_user_stopword_table"><code>
innodb_ft_user_stopword_table</code></a> для for <code>InnoDB</code> и
<a href="server.htm#sysvar_ft_stopword_file"><code>ft_stopword_file</code>
</a> для <code>MyISAM</code>.</p></li></ul>

<p>См. <a href="#fulltext-stopwords">раздел 13.9.4</a>
для значения по умолчанию списка стоп-слов и как изменить их.
Минимум длины слова по умолчанию может быть изменен как описано в
<a href="#fulltext-fine-tuning">разделе 13.9.6</a>.</p>

<p>Каждое правильное слово в наборе и в запросе взвешено,
согласно его значению в наборе или запросе. Таким образом, у слова, которое
присутствует во многих документах, есть более низкий вес, потому что у него
есть более низкое семантическое значение в этом особом наборе. Наоборот, если
слово редко, оно получает более высокий вес. Веса слов объединены, чтобы
вычислить уместность строки. Этот метод работает лучше всего с
большим количеством слов.</p>

<p>Ограничения MyISAM.
<p>Для очень маленьких таблиц распределение слов не
отражает их семантическое значение, и эта модель может иногда приводить к
причудливым результатам для поиска в таблицах <code>MyISAM</code>.
Например, хотя слово <span>MySQL</span> присутствует в каждой строке
таблицы <code>articles</code> выше, поиск слова в <code>MyISAM</code>
не даст результатов:
<pre>
mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
                   AGAINST ('MySQL' IN NATURAL LANGUAGE MODE);
Empty set (0.00 sec)
</pre>

<p>Результат поиска пуст, потому что <span>MySQL</span>
присутствует по крайней мере в 50% строк и поэтому эффективно обработано
как стоп-слово. Этот метод фильтрации является более подходящим для больших
наборов данных, где Вы не могли бы хотеть, чтобы набор результатов возвратил
каждую вторую строку из таблицы в 1GB, чем для маленьких наборов данных, где
это могло бы вызвать маленькие результаты для популярных слов.</p>

<p>50% порог может удивить Вас, когда Вы сначала пробуете полнотекстовый
поиск, чтобы видеть, как это работает, и делает таблицы <code>InnoDB</code>
более подходящими для экспериментирования с полнотекстовыми поисками. Если Вы
создаете таблицу <code>MyISAM</code> и вставляете только одну или две строки
текста в нее, каждое слово в тексте будет по крайней мере в 50% строк.
В результате никакой поиск не возвращает результатов, пока таблица не
содержит больше строк. Пользователи, которые должны обойти 50% ограничение,
могут создать поисковые индексы на таблицах <code>InnoDB</code>
или использовать булев режим поиска, объясненный в
<a href="#fulltext-boolean">разделе 13.9.2</a>.</p>

<h3><a name="fulltext-boolean"></a>13.9.2. Булев полнотекстовый поиск</h3>
<p>MySQL может выполнить булев полнотекстовый поиск, используя
модификатор <code>IN BOOLEAN MODE</code>. С этим модификатором у
определенных символов есть особое значение в начале или конце слов в строке
поиска. В следующем запросе операторы <code>+</code> и <code>-</code>
указывают, что слово должно присутствовать или отсутствовать, соответственно,
для соответствия. Таким образом, запрос получает все строки, которые содержат
слово <span>MySQL</span>, но <span><em>не</em></span> содержат слово
<span>YourSQL</span>:
<pre>
mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
                   AGAINST ('+MySQL -YourSQL' IN BOOLEAN MODE);
+----+-----------------------+-------------------------------------+
| id | title                 | body                                |
+----+-----------------------+-------------------------------------+
|  1 | MySQL Tutorial        | DBMS stands for DataBase ...        |
|  2 | How To Use MySQL Well | After you went through a ...        |
|  3 | Optimizing MySQL      | In this tutorial we will show ...   |
|  4 | 1001 MySQL Tricks     | 1. Never run mysqld as root. 2. ... |
|  6 | MySQL Security        | When configured properly, MySQL ... |
+----+-----------------------+-------------------------------------+
</pre>

<p>В реализации этой опции MySQL использует то, что иногда упоминается как
<span>подразумеваемая Булева логика</span>, в которой:</p>
<ul><li><p><code>+</code> означает <code>AND</code>.</li>
<li><code>-</code> означает <code>NOT</code>.</li>
<li>[<span><em>отсутствие оператора</em></span>] означает <code>OR</code>.
</p></li></ul>

<p>У булевых полнотекстовых поисков есть эти характеристики:</p>
<ul><li><p>Они автоматически не сортируют строки в
порядке уменьшающейся уместности.</li>

<li>Таблицы <code>InnoDB</code> требуют индекс <code>FULLTEXT</code>
на всех столбцах выражения <a href="#function_match"><code>MATCH()
</code></a>, чтобы выполнить булевы запросы. Булевы запросы на поисковых
индексах <code>MyISAM</code> могут работать даже без индекса
<code>FULLTEXT</code>, хотя поиск, выполненный этим способом,
был бы довольно медленным.</li>

<li>Минимальная и максимальная длина слова полнотекстовых параметров
относится к индексам <code>FULLTEXT</code>, создаваемым с использованием
встроенного анализатора <code>FULLTEXT</code> и плагина анализатора MeCab.
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a> и
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a> используются для поисковых индексов
<code>InnoDB</code>. <a href="server.htm#sysvar_ft_min_word_len"><code>
ft_min_word_len</code></a> и <a href="server.htm#sysvar_ft_max_word_len">
<code>ft_max_word_len</code></a> используются для поисковых
индексов <code>MyISAM</code>.</p>

<p>Минимальная и максимальная длина слова в параметрах не относится к
индексам <code>FULLTEXT</code>, создаваемым с использованием анализатора
ngram. Маркерный размер ngram определен опцией
<a href="server.htm#sysvar_ngram_token_size"><code>
ngram_token_size</code></a>.</li>

<li>Список стоп-слов применяется, управляемый
<a href="innodb.htm#sysvar_innodb_ft_enable_stopword"><code>
innodb_ft_enable_stopword</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_server_stopword_table">
<code>innodb_ft_server_stopword_table</code></a>
и <a href="innodb.htm#sysvar_innodb_ft_user_stopword_table"><code>
innodb_ft_user_stopword_table</code></a> для <code>InnoDB</code> или
<a href="server.htm#sysvar_ft_stopword_file"><code>ft_stopword_file
</code></a> для <code>MyISAM</code>.</li>

<li>Полнотекстовый поиск <code>InnoDB</code> не поддерживает использование
нескольких операторов на единственном слове поиска, как в этом примере:
<code>'++apple'</code>. Использование нескольких операторов на единственном
слове поиска возвращает синтаксическую ошибку. Полнотекстовый поиск MyISAM
успешно обработает тот же самый поиск, игнорируя все операторы за исключением
оператора, смежного со словом поиска.</li>

<li>Полнотекстовый поиск <code>InnoDB</code> поддерживает только символы
плюс или минус. Например, <code>InnoDB</code> поддерживает
<code>'+apple'</code>, но не <code>'apple+'</code>.
Определение плюса или минуса в конце приводит к синтаксической ошибке.</li>

<li>Полнотекстовый поиск <code>InnoDB</code> не поддерживает использование
ведущего знака плюс с подстановочным знаком (<code>'+*'</code>) и
комбинацию знак плюс и минус (<code>'+-'</code>).
Эти недопустимые запросы возвращают синтаксическую ошибку.</li>

<li>Полнотекстовый поиск <code>InnoDB</code> не поддерживает
использование символа <code>@</code> в булевых полнотекстовых поисках.
Символ <code>@</code> зарезервирован для использования в операторе
поиска близости <code>@distance</code>.</li>
<li>Они не используют 50% порог, который относится к
поисковым индексам <code>MyISAM</code>.</p></li></ul>

<p>Булев полнотекстовый поиск поддерживает следующие операторы:</p>
<ul><li><p><code>+</code></p>
<p>Знак плюс указывают, что это слово
<span><em>должно</em></span> присутствовать в каждой строке, которая
возвращена. <code>InnoDB</code> поддерживает только знак плюс в начале.</li>

<li><code>-</code></p>
<p>Знак минус указывают, что это слово <span><em>не</em></span> должно
присутствовать в каждой строке, которая возвращена.
<code>InnoDB</code> поддерживает только знак плюс в начале.</p>

<p>Отметьте: оператор <code>-</code> действует только, чтобы
исключить строки, которые являются иначе соответствующими другими критериями
поиска. Таким образом, поиск булева режима, который содержит только
термины, которым предшествует <code>-</code> возвращает пустой результат. Это
не возвращает <span>все строки кроме тех, которые содержат любой
из исключенных терминов</span>.</li>

<li>(no operator)</p>
<p>По умолчанию (когда ни <code>+</code> ни <code>-</code> не заданы),
слово является дополнительным, но строки, которые содержат его, оценены выше.
Это подражает поведению <a href="#function_match"><code>MATCH() ...
AGAINST()</code></a> без модификатора <code>IN BOOLEAN MODE</code>.</li>

<li><code>@<em><code>distance</code></em></code></p>
<p>Этот оператор работает только на таблицах <code>InnoDB</code>.
Это проверяет, начинаются ли два или больше слов в пределах указанного
расстояния друг от друга, измеренного в словах. Определите слова поиска в
двойных кавычках немедленно перед оператором <code>@<em><code>distance</code>
</em></code>, например, <code>MATCH(col1) AGAINST('"word1 word2 word3" @8'
IN BOOLEAN MODE)</code>.</li>

<li><code>&gt; &lt;</code></p>
<p>Эти два оператора используются, чтобы изменить вклад слова в значение
уместности, которое назначено строке. Оператор <code>&gt;</code> увеличивает
вклад, а <code>&lt;</code> уменьшает.</li>

<li><code>( )</code></p>
<p>Слова в круглых скобках группируются в подвыражения. Могут быть вложены.
</li>

<li><code>~</code></p>
<p>Ведущая тильда действует как оператор отрицания, делая вклад слова в
уместность строки отрицательным. Это полезно для маркировки слов.
Строка, содержащая такое слово, оценена ниже чем другие, но не исключена в
целом, как это было бы с оператором <code>-</code>.</li>

<li><code>*</code></p>
<p>Звездочка служит усечением (или подстановочным знаком).
В отличие от других операторов, это <span><em>добавлено</em></span> к слову,
которое будет затронуто. Слова соответствуют, если они начинаются
со слова, предшествующего <code>*</code>.</p>

<p>Если слово определено с оператором усечения, он не обрезается от булева
запроса, даже если это слишком коротко или стоп-слово. Слишком короткое
слово, определено в <a href="innodb.htm#sysvar_innodb_ft_min_token_size">
<code>innodb_ft_min_token_size</code></a> для <code>InnoDB</code> или
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>
для <code>MyISAM</code>. Эти опции неприменимы к индексам
<code>FULLTEXT</code>, использующим анализатор ngram.</p>

<p>Слово со звездочкой рассматривают как приставку, которая должна
присутствовать в начале одного или более слов. Если минимальная длина слова
4, поиск <code>'+<em><code>слово</code></em> +the*'</code>
может возвратить меньше строк, чем поиск
<code>'+<em><code>слово</code></em> +the'</code>, потому что второй запрос
игнорирует также короткий критерий поиска <code>the</code>.</li>

<li><code>"</code></p>
<p>Фразе, которая указана в пределах двоичной кавычки (<code>"</code>)
соответствуют только строки, которые содержат фразу
<span><em>как она написана</em></span>.
Полнотекстовый механизм разделяет фразу на слова и выполняет поиск в индексах
<code>FULLTEXT</code> для всех слов.
Символы, не являющиеся словами, не должны быть соответствующими точно: поиск
фразы требует, чтобы соответствия содержали точно те же самые слова, что и
фраза, и в том же самом порядке. Например, <code>"test phrase"</code>
соответствует <code>"test, phrase"</code>.</p>

<p>Если фраза не содержит слов, которые находятся в индексе, результат пуст.
Слова могут не быть в индексе из-за комбинации факторов: если они не
существуют в тексте, являются стоп-словами или короче, чем минимальная
длина индексированных слов.</p></li></ul>

<p>Следующие примеры демонстрируют некоторые строки поиска, которые
используют булевы полнотекстовые операторы:</p>
<ul><li><p><code>'apple banana'</code></p>
<p>Найдет строки, которые содержат по крайней мере одно из этих двух слов.
</li>

<li><code>'+apple +juice'</code></p>
<p>Найдет строки, которые содержат оба слова.</li>
<li><code>'+apple macintosh'</code></p>
<p>Найдет строки, которые содержат слово <span>apple</span>, но вес строк
выше, если они также содержат <span>macintosh</span>.</li>

<li><code>'+apple -macintosh'</code></p>
<p>Найдет строки, которые содержат слово <span>apple</span>,
но не <span>macintosh</span>.</li>

<li><code>'+apple ~macintosh'</code></p>
<p>Найдет строки, которые содержат слово <span>apple</span>, но если строка
также содержит <span>macintosh</span>, ее вес ниже, чем если бы строка его не
включала. Это <span>мягче</span>, чем поиск <code>'+apple -macintosh'</code>,
для которого присутствие <span>macintosh</span> не вернет строку вообще.</li>

<li><code>'+apple +(&gt;turnover &lt;strudel)'</code></p>
<p>Найдет строки, которые содержат слова <span>apple</span> и
<span>turnover</span>, или <span>apple</span> и <span>strudel</span> (в любом
порядке), но вес <span>apple turnover</span> выше, чем <span>apple strudel
</span>.</li>

<li><code>'apple*'</code></p>
<p>Найдет строки, которые содержат слова, такие как <span>apple</span>,
<span>apples</span>, <span>applesauce</span> или <span>applet</span>.</li>

<li><code>'"some words"'</code></p>
<p>Найдет строки, которые содержат точную фразу <span>some words</span>
(например, строки, которые содержат <span>some words of wisdom</span>, но не
<span>some noise words</span>). Отметьте, что символы <code>"</code>
являются символами оператора, которые разграничивают фразу. Они не кавычки,
которые прилагают строку поиска непосредственно.</p></li></ul>

<h4><a name="fulltext-boolean-innodb-relevancy-ranking"></a>
Ранжирование уместности для режима InnoDB булева поиска</h4>
<p>Полнотекстовый поиск <a href="innodb.htm"><code>InnoDB</code></a>
смоделирован на полнотекстовой поисковой системе
<a href="../../../sphinxsearch.com/default.htm" target="_top">Sphinx</a>, используемые
алгоритмы основаны на алгоритма ранжирования
<a href="../../../en.wikipedia.org/wiki/Okapi_BM25" target="_top">BM25</a> и
<a href="../../../en.wikipedia.org/wiki/TF-IDF" target="_top">TF-IDF</a>.
По этим причинам, ранжирование уместности для булева полнотекстового поиска
<code>InnoDB</code> может отличаться от ранжирования уместности
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.</p>

<p><code>InnoDB</code> использует вариант системы взвешивания <span>term
frequency-inverse document frequency</span> (<code>TF-IDF</code>), чтобы
оценить уместность документа для данного полнотекстового запроса поиска.
<code>TF-IDF</code> основана на том, как часто слово появляется в документе,
с поправкой на то, как часто слово появляется во всех документах в наборе.
Другими словами, чем более часто слово появляется в документе, и чем менее
часто слово появляется в наборе документа, тем выше документ оценивается.</p>

<h5><a name="idm139965352518224"></a>Как ранжирование уместности вычислено
</h5>
<p>Значение частоты термина (<code>term frequency, TF</code>)
число раз, которые слово появляется в документе. Обратная частота документа
(<code>IDF</code>) слова вычислено, используя следующую формулу, где
<code>total_records</code> число записей в наборе, а
<code>matching_records</code> число записей, в которых
появляется критерий поиска.
<pre>
${IDF} = log10( ${total_records} / ${matching_records} )
</pre>

<p>Когда документ содержит слово многократно, значение IDF умножено
на значение TF:
<pre>
${TF} * ${IDF}
</pre>

<p>Используя значения <code>TF</code> и <code>IDF</code>, уместность
для документа вычислена, используя эту формулу:
<pre>
${rank} = ${TF} * ${IDF} * ${IDF}
</pre>
<p>Формула продемонстрирована в следующих примерах.</p>

<h5><a name="idm139965352508912"></a>Уместность для поиска отдельного слова
</h5>
<p>Этот пример демонстрирует вычисление ранжирования уместности для
поиска изолированного слова.
<pre>
mysql&gt; CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT, FULLTEXT (title,body)) ENGINE=InnoDB;
Query OK, 0 rows affected (1.04 sec)

mysql&gt; INSERT INTO articles (title,body) VALUES
  ('MySQL Tutorial','This database tutorial ...'),
  ("How To Use MySQL",'After you went through a ...'),
  ('Optimizing Your Database','In this database tutorial ...'),
  ('MySQL vs. YourSQL','When comparing databases ...'),
  ('MySQL Security','When configured properly, MySQL ...'),
  ('Database, Database, Database','database database database'),
  ('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'),
  ('MySQL Full-Text Indexes', 'MySQL fulltext indexes use a ..');
Query OK, 8 rows affected (0.06 sec)
Records: 8  Duplicates: 0  Warnings: 0

mysql&gt; SELECT id, title, body, MATCH (title,body)
                 AGAINST ('database' IN BOOLEAN MODE)
AS score FROM articles ORDER BY score DESC;
+----+------------------------------+-------------------------------------+---------------------+
| id | title                        | body                                | score               |
+----+------------------------------+-------------------------------------+---------------------+
|  6 | Database, Database, Database | database database database          |  1.0886961221694946 |
|  3 | Optimizing Your Database     | In this database tutorial ...       | 0.36289870738983154 |
|  1 | MySQL Tutorial               | This database tutorial ...          | 0.18144935369491577 |
|  2 | How To Use MySQL             | After you went through a ...        |   0                 |
|  4 | MySQL vs. YourSQL            | When comparing databases ...        |   0                 |
|  5 | MySQL Security               | When configured properly, MySQL ... |   0                 |
|  7 | 1001 MySQL Tricks            | 1. Never run mysqld as root. 2. ... |   0                 |
|  8 | MySQL Full-Text Indexes      | MySQL fulltext indexes use a ..     |   0                 |
+----+------------------------------+-------------------------------------+---------------------+
8 rows in set (0.00 sec)
</pre>

<p>Есть 8 записей всего, с 3, которые соответствуют поисковому термину
<span>database</span>. Первая запись (<code>id 6</code>) содержит поисковый
термин 6 раз и имеет ранжирование уместности <code>1.0886961221694946</code>.
Это значение ранжирования вычислено, используя значение <code>TF</code> 6
критерий поиска появляется 6 раз в записи <code>id 6</code>)
и <code>IDF</code> 0.42596873216370745, который вычислен следующим образом
(здесь 8 общее количество записей, 3 число записей, в которых
критерий поиска появляется):
<pre>
${IDF} = log10( 8 / 3 ) = 0.42596873216370745
</pre>

<p>Значения <code>TF</code> и <code>IDF</code> тогда вводятся в формулу:
<pre>
{rank} = ${TF} * ${IDF} * ${IDF}
</pre>

<p>Выполнение вычисления в клиенте командной строки MySQL возвращает значение
1.088696164686938.
<pre>
mysql&gt; SELECT 6*log10(8/3)*log10(8/3);
+-------------------------+
| 6*log10(8/3)*log10(8/3) |
+-------------------------+
| 1.088696164686938       |
+-------------------------+
1 row in set (0.00 sec)
</pre>

<p>Вы можете заметить незначительные различия в значениях, возвращенных
запросом <code>SELECT ... MATCH ... AGAINST</code> и клиентом командной
строки MySQL (<code>1.0886961221694946</code> и
<code>1.088696164686938</code>). Различие происходит из-за проблем округления
между целыми числами и floats/doubles, которое выполнено внутренне
<code>InnoDB</code> (наряду со связанной точностью и округлением решений) и
тем, как оно выполнено в другом месте (в клиенте командной строки MySQL или
других типах вычислителей).</p>

<h5><a name="idm139965352488080"></a>Уместность для поиска нескольких слов
</h5>
<p>Этот пример демонстрирует вычисление ранжирования уместности для
полнотекстового поиска нескольких слов, основанного на таблице
<code>articles</code> и данных, которые используются в предыдущем примере.
</p>

<p>Если Вы ищете больше, чем одно слово, значение ранжирования уместности
сумма значений ранжирования уместности для каждого слова, как
показано в этой формуле:
<pre>
${rank} = ${TF} * ${IDF} * ${IDF} + ${TF} * ${IDF} * ${IDF}
</pre>

<p>Выполнение поиска на двух условиях ('mysql tutorial')
возвращает следующие результаты:
<pre>
mysql&gt; SELECT id, title, body, MATCH (title,body)
                 AGAINST ('mysql tutorial' IN BOOLEAN MODE)
                 AS score FROM articles ORDER BY score DESC;
+----+------------------------------+-------------------------------------+----------------------+
| id | title                        | body                                | score                |
+----+------------------------------+-------------------------------------+----------------------+
|  1 | MySQL Tutorial               | This database tutorial ...          |   0.7405621409416199 |
|  3 | Optimizing Your Database     | In this database tutorial ...       |   0.3624762296676636 |
|  5 | MySQL Security               | When configured properly, MySQL ... | 0.031219376251101494 |
|  8 | MySQL Full-Text Indexes      | MySQL fulltext indexes use a ..     | 0.031219376251101494 |
|  2 | How To Use MySQL             | After you went through a ...        | 0.015609688125550747 |
|  4 | MySQL vs. YourSQL            | When comparing databases ...        | 0.015609688125550747 |
|  7 | 1001 MySQL Tricks            | 1. Never run mysqld as root. 2. ... | 0.015609688125550747 |
|  6 | Database, Database, Database | database database database          | 0                    |
+----+------------------------------+-------------------------------------+----------------------+
8 rows in set (0.00 sec)
</pre>

<p>В первой записи (<code>id 8</code>) 'mysql' появляется однажды, а
'tutorial' два раза. Есть шесть соответствующих записей для 'mysql' и две
для 'tutorial'. Клиент командной строки MySQL возвращает ожидаемое значение
ранжирования, вставляя эти значения в формулу для многократного поиска слова:
<pre>
mysql&gt; SELECT (1*log10(8/6)*log10(8/6)) + (2*log10(8/2)*log10(8/2));
+-------------------------------------------------------+
| (1*log10(8/6)*log10(8/6)) + (2*log10(8/2)*log10(8/2)) |
+-------------------------------------------------------+
| 0.7405621541938003                                    |
+-------------------------------------------------------+
1 row in set (0.00 sec)
</pre>

<p>Незначительные различия в значениях, возвращенных
<code>SELECT ... MATCH ... AGAINST</code> и клиентом командной
строки MySQL объяснены в предыдущем примере.</p>

<h3><a name="fulltext-query-expansion"></a>13.9.3.
Полнотекстовые поиски с расширением запроса</h3>
<p>Полнотекстовый поиск поддерживает расширение запроса (и, в частности,
его разновидность <span>blind query expansion</span>).
Это вообще полезно, когда фраза поиска слишком коротка, что часто означает,
что пользователь полагается на подразумеваемое знание, которого
полнотекстовой поисковой системе недостает. Например, пользователь, ищущий
<span>database</span> может действительно подразумевать, что
<span>MySQL</span>, <span>Oracle</span>, <span>DB2</span>,
и <span>RDBMS</span> являются фразами, которые должны соответствовать
<span>databases</span> и должны быть возвращены. Это подразумеваемое знание.
</p>

<p>Blind query expansion (также известн, как автоматическая обратная связь
уместности) включен, добавляя <code>WITH QUERY EXPANSION</code> или
<code>IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION</code>
после фразы поиска. Это работает, выполняя поиск дважды, поисковая фраза для
второго поиска, это оригинальная фраза поиска, связанная с немногими наиболее
соответствующими документами из первого поиска. Таким образом, если один из
этих документов содержит слова <span>databases</span> и <span>MySQL</span>,
второй поиск находит документы, которые содержат <span>MySQL</span>, даже
если они не содержат <span>database</span>. Следующий пример
показывает это различие:
<pre>
mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
                   AGAINST ('database' IN NATURAL LANGUAGE MODE);
+----+-------------------+------------------------------------------+
| id | title             | body                                     |
+----+-------------------+------------------------------------------+
|  1 | MySQL Tutorial    | DBMS stands for DataBase ...             |
|  5 | MySQL vs. YourSQL | In the following database comparison ... |
+----+-------------------+------------------------------------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT * FROM articles WHERE MATCH (title,body)
                   AGAINST ('database' WITH QUERY EXPANSION);
+----+-----------------------+------------------------------------------+
| id | title                 | body                                     |
+----+-----------------------+------------------------------------------+
|  5 | MySQL vs. YourSQL     | In the following database comparison ... |
|  1 | MySQL Tutorial        | DBMS stands for DataBase ...             |
|  3 | Optimizing MySQL      | In this tutorial we will show ...        |
|  6 | MySQL Security        | When configured properly, MySQL ...      |
|  2 | How To Use MySQL Well | After you went through a ...             |
|  4 | 1001 MySQL Tricks     | 1. Never run mysqld as root. 2. ...      |
+----+-----------------------+------------------------------------------+
6 rows in set (0.00 sec)
</pre>

<p>Другой пример мог искать книги Georges Simenon о Maigret, когда
пользователь не уверен, как писать <span>Maigret</span>. Поиск
<span>Megre and the reluctant witnesses</span> найдет только
<span>Maigret and the Reluctant Witnesses</span>
без расширения запроса. Поиск с расширением запроса считает все книги со
словом <span>Maigret</span> на втором проходе.</p>

<p>Поскольку расширение запроса имеет тенденцию значительно увеличивать шум,
возвращая несоответствующие документы, используйте это только, когда
фраза поиска коротка.</p>

<h3><a name="fulltext-stopwords"></a>13.9.4. Полнотекстовые стоп-слова</h3>
<p>Список стоп-слов загружен и просматривается для полнотекстовых запросов,
используя набор символов сервера и сопоставление (значения переменных
<a href="server.htm#sysvar_character_set_server"><code>character_set_server
</code></a> и <a href="server.htm#sysvar_collation_server"><code>
collation_server</code></a>). Ложные хиты или промахи могли бы произойти
для стоп-слов поисков, если у стоп-слов файла или столбцов, используемых для
полнотекстовой индексации или поисков, есть набор символов или сопоставление,
отличающееся от
<a href="server.htm#sysvar_character_set_server"><code>character_set_server
</code></a> или <a href="server.htm#sysvar_collation_server"><code>
collation_server</code></a>.</p>

<p>Чувствительность к регистру стоп-слов поисков зависит от сопоставления
сервера. Например, поиски являются нечувствительными к регистру, если
сопоставление <code>latin1_swedish_ci</code>, тогда как поиски являются
чувствительными к регистру, если сопоставление
<code>latin1_general_cs</code> или <code>latin1_bin</code>.</p>

<h4><a name="idm139965352442832"></a>Стоп-слова для поисковых индексов InnoDB
</h4>
<p><code>InnoDB</code> имеет относительно короткий список стоп-слов
по умолчанию, потому что документы из технических, литературных и других
источников часто используют короткие слова в качестве ключевых слов или в
существенных фразах. Например, Вы могли бы искать <span>to be or not
to be</span> и ожидать получения заметного результата, вместо того, чтобы
игнорировать все эти слова.</p>

<p>Чтобы посмотреть список стоп-слов в <code>InnoDB</code> по умолчанию,
запросите таблицу <a href="inform.htm#innodb-ft-default-stopword-table">
<code>INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD</code></a>.
<pre>
mysql&gt; SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD;
+-------+
| value |
+-------+
| a     |
| about |
| an    |
| are   |
| as    |
| at    |
| be    |
| by    |
| com   |
| de    |
| en    |
| for   |
| from  |
| how   |
| i     |
| in    |
| is    |
| it    |
| la    |
| of    |
| on    |
| or    |
| that  |
| the   |
| this  |
| to    |
| was   |
| what  |
| when  |
| where |
| who   |
| will  |
| with  |
| und   |
| the   |
| www   |
+-------+
36 rows in set (0.00 sec)</pre>

<p>Определить Ваш собственный список стоп-слов для всех таблиц
<code>InnoDB</code> можно, определив таблицу с той же самой структурой, как у
<a href="inform.htm#innodb-ft-default-stopword-table"><code>
INNODB_FT_DEFAULT_STOPWORD</code></a>, заполнив ее стоп-словами и установив
значение <a href="innodb.htm#sysvar_innodb_ft_server_stopword_table"><code>
innodb_ft_server_stopword_table</code></a> в форме
<code><em><code>db_name</code></em>/<em><code>table_name</code></em></code>
прежде, чем создать полнотекстовый индекс. У таблицы стоп-слов должен быть
один столбец <a href="types.htm#char"><code>VARCHAR</code></a> с именем
<code>value</code>. Следующий пример демонстрирует создание и
конфигурирование новой глобальной таблицы стоп-слов для <code>InnoDB</code>.
<pre>
-- Create a new stopword table

mysql&gt; CREATE TABLE my_stopwords(value VARCHAR(30)) ENGINE = INNODB;
Query OK, 0 rows affected (0.01 sec)

-- Insert stopwords (for simplicity, a single stopword is used in this example)

mysql&gt; INSERT INTO my_stopwords(value) VALUES ('Ishmael');
Query OK, 1 row affected (0.00 sec)

-- Create the table

mysql&gt; CREATE TABLE opening_lines (
            id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
            opening_line TEXT(500), author VARCHAR(200),
            title VARCHAR(200)) ENGINE=InnoDB;
Query OK, 0 rows affected (0.01 sec)

-- Insert data into the table

mysql&gt; INSERT INTO opening_lines(opening_line,author,title) VALUES
  ('Call me Ishmael.','Herman Melville','Moby-Dick'),
  ('A screaming comes across the sky.','Thomas Pynchon','Gravity\'s Rainbow'),
  ('I am an invisible man.','Ralph Ellison','Invisible Man'),
  ('Where now? Who now? When now?','Samuel Beckett','The Unnamable'),
  ('It was love at first sight.','Joseph Heller','Catch-22'),
  ('All this happened, more or less.','Kurt Vonnegut','Slaughterhouse-Five'),
  ('Mrs. Dalloway said she would buy the flowers herself.','Virginia Woolf','Mrs. Dalloway'),
  ('It was a pleasure to burn.','Ray Bradbury','Fahrenheit 451');
Query OK, 8 rows affected (0.00 sec)
Records: 8  Duplicates: 0  Warnings: 0

-- Set the innodb_ft_server_stopword_table option to the new stopword table

mysql&gt; SET GLOBAL innodb_ft_server_stopword_table = 'test/my_stopwords';
Query OK, 0 rows affected (0.00 sec)

-- Create the full-text index (which rebuilds the table if no FTS_DOC_ID column is defined)

mysql&gt; CREATE FULLTEXT INDEX idx ON opening_lines(opening_line);
Query OK, 0 rows affected, 1 warning (1.17 sec)
Records: 0  Duplicates: 0  Warnings: 1
</pre>

<p>Проверьте, что указанное стоп-слово ('Ishmael') не появляется, запрашивая
слова в <a href="inform.htm#innodb-ft-index-table-table">
<code>INFORMATION_SCHEMA.INNODB_FT_INDEX_TABLE</code></a>.</p>

<p>По умолчанию, слова меньше, чем 3 символа в длину или больше, чем 84
символа не появляются в полнотекстовом индексе <code>InnoDB</code>.
Максимальные и минимальные значения длины слова конфигурируются с применеием
переменных <a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a> и
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a>. Это поведение не относится к плагину
анализатора ngram. Маркерный размер ngram определен опцией
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a>.</p>
<pre>
mysql&gt; SET GLOBAL innodb_ft_aux_table='test/opening_lines';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT word FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_TABLE LIMIT 15;
+-----------+
| word      |
+-----------+
| across    |
| all       |
| burn      |
| buy       |
| call      |
| comes     |
| dalloway  |
| first     |
| flowers   |
| happened  |
| herself   |
| invisible |
| less      |
| love      |
| man       |
+-----------+
15 rows in set (0.00 sec)</pre>

<p>Чтобы создать списки стоп-слов на основе таблицы, составьте другие таблицы
стоп-слов и используйте опцию
<a href="innodb.htm#sysvar_innodb_ft_user_stopword_table"><code>
innodb_ft_user_stopword_table</code></a>, чтобы определить таблицу стоп-слов,
которую Вы хотите использовать прежде, чем Вы
создадите полнотекстовый индекс.</p>

<h4><a name="idm139965352412480"></a>Стоп-слова для поиска в MyISAM</h4>
<p>Файл загружен стоп-слов загружен с использованием
<code>latin1</code>, если <code>character_set_server</code>
<code>ucs2</code>, <code>utf16</code>,
<code>utf16le</code> или <code>utf32</code>.</p>

<p>Чтобы переопределить значение по умолчанию списка стоп-слов для таблиц
MyISAM, установите переменную <a href="server.htm#sysvar_ft_stopword_file">
<code>ft_stopword_file</code></a>. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.
Значение должно быть путем к файлу, содержащему список стоп-слов, или пустой
строкой, чтобы отключить фильтрацию стоп-слов. Сервер ищет файл в каталоге
данных, если абсолютный путь не дан, чтобы определить иной каталог. После
изменения значения этой переменной или содержания файла стоп-слов,
перезапустите сервер и восстановите Ваши индексы <code>FULLTEXT</code>.</p>

<p>Список стоп-слов имеет свободную форму. Слова разделяются любым знаком
(не буквой и не цифрой). Годятся пробелы, запятые или перевод строки.
Исключения символ подчеркивания (<code>_</code>) и единственный апостроф
(<code>'</code>), которые обработаны как часть слова. Набор символов списка
стоп-слов это набор символов сервера, см.
<a href="global.htm#charset-server">раздел 11.1.3.2</a>.</p>

<p>Следующая таблица показывает список стоп-слов по умолчанию для
<code>MyISAM</code>. В исходных текстах MySQL он находится в файле
<code>storage/myisam/ft_static.c</code>.</p>

<table border="1">
<tbody><tr><td scope="row">a's</td><td>able</td><td>about</td><td>above</td>
<td>according</td></tr>
<tr><td scope="row">accordingly</td><td>across</td><td>actually</td>
<td>after</td><td>afterwards</td></tr>
<tr><td scope="row">again</td><td>against</td><td>ain't</td><td>all</td>
<td>allow</td></tr>
<tr><td scope="row">allows</td><td>almost</td><td>alone</td><td>along</td>
<td>already</td></tr>
<tr><td scope="row">also</td><td>although</td><td>always</td><td>am</td>
<td>among</td></tr>
<tr><td scope="row">amongst</td><td>an</td><td>and</td><td>another</td>
<td>any</td></tr>
<tr><td scope="row">anybody</td><td>anyhow</td><td>anyone</td>
<td>anything</td><td>anyway</td></tr>
<tr><td scope="row">anyways</td><td>anywhere</td><td>apart</td>
<td>appear</td><td>appreciate</td></tr>
<tr><td scope="row">appropriate</td><td>are</td><td>aren't</td>
<td>around</td><td>as</td></tr>
<tr><td scope="row">aside</td><td>ask</td><td>asking</td><td>associated</td>
<td>at</td></tr>
<tr><td scope="row">available</td><td>away</td><td>awfully</td>
<td>be</td><td>became</td></tr>
<tr><td scope="row">because</td><td>become</td><td>becomes</td>
<td>becoming</td><td>been</td></tr>
<tr><td scope="row">before</td><td>beforehand</td><td>behind</td>
<td>being</td><td>believe</td></tr>
<tr><td scope="row">below</td><td>beside</td><td>besides</td><td>best</td>
<td>better</td></tr>
<tr><td scope="row">between</td><td>beyond</td><td>both</td><td>brief</td>
<td>but</td></tr>
<tr><td scope="row">by</td><td>c'mon</td><td>c's</td><td>came</td>
<td>can</td></tr>
<tr><td scope="row">can't</td><td>cannot</td><td>cant</td><td>cause</td>
<td>causes</td></tr>
<tr><td scope="row">certain</td><td>certainly</td><td>changes</td>
<td>clearly</td><td>co</td></tr>
<tr><td scope="row">com</td><td>come</td><td>comes</td><td>concerning</td>
<td>consequently</td></tr>
<tr><td scope="row">consider</td><td>considering</td><td>contain</td>
<td>containing</td><td>contains</td></tr>
<tr><td scope="row">corresponding</td><td>could</td><td>couldn't</td>
<td>course</td><td>currently</td></tr>
<tr><td scope="row">definitely</td><td>described</td><td>despite</td>
<td>did</td><td>didn't</td></tr>
<tr><td scope="row">different</td><td>do</td><td>does</td><td>doesn't</td>
<td>doing</td></tr>
<tr><td scope="row">don't</td><td>done</td><td>down</td><td>downwards</td>
<td>during</td></tr>
<tr><td scope="row">each</td><td>edu</td><td>eg</td><td>eight</td>
<td>either</td></tr>
<tr><td scope="row">else</td><td>elsewhere</td><td>enough</td>
<td>entirely</td><td>especially</td></tr>
<tr><td scope="row">et</td><td>etc</td><td>even</td><td>ever</td>
<td>every</td></tr>
<tr><td scope="row">everybody</td><td>everyone</td><td>everything</td>
<td>everywhere</td><td>ex</td></tr>
<tr><td scope="row">exactly</td><td>example</td><td>except</td><td>far</td>
<td>few</td></tr>
<tr><td scope="row">fifth</td><td>first</td><td>five</td><td>followed</td>
<td>following</td></tr>
<tr><td scope="row">follows</td><td>for</td><td>former</td><td>formerly</td>
<td>forth</td></tr>
<tr><td scope="row">four</td><td>from</td><td>further</td><td>furthermore</td>
<td>get</td></tr>
<tr><td scope="row">gets</td><td>getting</td><td>given</td><td>gives</td>
<td>go</td></tr>
<tr><td scope="row">goes</td><td>going</td><td>gone</td><td>got</td>
<td>gotten</td></tr>
<tr><td scope="row">greetings</td><td>had</td><td>hadn't</td><td>happens</td>
<td>hardly</td></tr>
<tr><td scope="row">has</td><td>hasn't</td><td>have</td><td>haven't</td>
<td>having</td></tr>
<tr><td scope="row">he</td><td>he's</td><td>hello</td><td>help</td>
<td>hence</td></tr>
<tr><td scope="row">her</td><td>here</td><td>here's</td><td>hereafter</td>
<td>hereby</td></tr>
<tr><td scope="row">herein</td><td>hereupon</td><td>hers</td><td>herself</td>
<td>hi</td></tr>
<tr><td scope="row">him</td><td>himself</td><td>his</td><td>hither</td>
<td>hopefully</td></tr>
<tr><td scope="row">how</td><td>howbeit</td><td>however</td><td>i'd</td>
<td>i'll</td></tr>
<tr><td scope="row">i'm</td><td>i've</td><td>ie</td><td>if</td>
<td>ignored</td></tr>
<tr><td scope="row">immediate</td><td>in</td><td>inasmuch</td><td>inc</td>
<td>indeed</td></tr>
<tr><td scope="row">indicate</td><td>indicated</td><td>indicates</td>
<td>inner</td><td>insofar</td></tr>
<tr><td scope="row">instead</td><td>into</td><td>inward</td><td>is</td>
<td>isn't</td></tr>
<tr><td scope="row">it</td><td>it'd</td><td>it'll</td><td>it's</td>
<td>its</td></tr>
<tr><td scope="row">itself</td><td>just</td><td>keep</td><td>keeps</td>
<td>kept</td></tr>
<tr><td scope="row">know</td><td>known</td><td>knows</td><td>last</td>
<td>lately</td></tr>
<tr><td scope="row">later</td><td>latter</td><td>latterly</td><td>least</td>
<td>less</td></tr>
<tr><td scope="row">lest</td><td>let</td><td>let's</td><td>like</td>
<td>liked</td></tr>
<tr><td scope="row">likely</td><td>little</td><td>look</td><td>looking</td>
<td>looks</td></tr>
<tr><td scope="row">ltd</td><td>mainly</td><td>many</td><td>may</td>
<td>maybe</td></tr>
<tr><td scope="row">me</td><td>mean</td><td>meanwhile</td><td>merely</td>
<td>might</td></tr>
<tr><td scope="row">more</td><td>moreover</td><td>most</td><td>mostly</td>
<td>much</td></tr>
<tr><td scope="row">must</td><td>my</td><td>myself</td><td>name</td>
<td>namely</td></tr>
<tr><td scope="row">nd</td><td>near</td><td>nearly</td><td>necessary</td>
<td>need</td></tr>
<tr><td scope="row">needs</td><td>neither</td><td>never</td>
<td>nevertheless</td><td>new</td></tr>
<tr><td scope="row">next</td><td>nine</td><td>no</td><td>nobody</td>
<td>non</td></tr>
<tr><td scope="row">none</td><td>noone</td><td>nor</td><td>normally</td>
<td>not</td></tr>
<tr><td scope="row">nothing</td><td>novel</td><td>now</td><td>nowhere</td>
<td>obviously</td></tr>
<tr><td scope="row">of</td><td>off</td><td>often</td><td>oh</td><td>ok</td>
</tr>
<tr><td scope="row">okay</td><td>old</td><td>on</td><td>once</td><td>one</td>
</tr>
<tr><td scope="row">ones</td><td>only</td><td>onto</td><td>or</td>
<td>other</td></tr>
<tr><td scope="row">others</td><td>otherwise</td><td>ought</td><td>our</td>
<td>ours</td></tr>
<tr><td scope="row">ourselves</td><td>out</td><td>outside</td><td>over</td>
<td>overall</td></tr>
<tr><td scope="row">own</td><td>particular</td><td>particularly</td>
<td>per</td><td>perhaps</td></tr>
<tr><td scope="row">placed</td><td>please</td><td>plus</td><td>possible</td>
<td>presumably</td></tr>
<tr><td scope="row">probably</td><td>provides</td><td>que</td><td>quite</td>
<td>qv</td></tr>
<tr><td scope="row">rather</td><td>rd</td><td>re</td><td>really</td>
<td>reasonably</td></tr>
<tr><td scope="row">regarding</td><td>regardless</td><td>regards</td>
<td>relatively</td><td>respectively</td></tr>
<tr><td scope="row">right</td><td>said</td><td>same</td><td>saw</td>
<td>say</td></tr>
<tr><td scope="row">saying</td><td>says</td><td>second</td><td>secondly</td>
<td>see</td></tr>
<tr><td scope="row">seeing</td><td>seem</td><td>seemed</td><td>seeming</td>
<td>seems</td></tr>
<tr><td scope="row">seen</td><td>self</td><td>selves</td><td>sensible</td>
<td>sent</td></tr>
<tr><td scope="row">serious</td><td>seriously</td><td>seven</td><td>several
</td><td>shall</td></tr>
<tr><td scope="row">she</td><td>should</td><td>shouldn't</td><td>since</td>
<td>six</td></tr>
<tr><td scope="row">so</td><td>some</td><td>somebody</td><td>somehow</td>
<td>someone</td></tr>
<tr><td scope="row">something</td><td>sometime</td><td>sometimes</td>
<td>somewhat</td><td>somewhere</td></tr>
<tr><td scope="row">soon</td><td>sorry</td><td>specified</td><td>specify</td>
<td>specifying</td></tr>
<tr><td scope="row">still</td><td>sub</td><td>such</td><td>sup</td><td>sure
</td></tr>
<tr><td scope="row">t's</td><td>take</td><td>taken</td><td>tell</td><td>tends
</td></tr>
<tr><td scope="row">th</td><td>than</td><td>thank</td><td>thanks</td>
<td>thanx</td></tr>
<tr><td scope="row">that</td><td>that's</td><td>thats</td><td>the</td>
<td>their</td></tr>
<tr><td scope="row">theirs</td><td>them</td><td>themselves</td><td>then</td>
<td>thence</td></tr>
<tr><td scope="row">there</td><td>there's</td><td>thereafter</td><td>thereby
</td><td>therefore</td></tr>
<tr><td scope="row">therein</td><td>theres</td><td>thereupon</td><td>these
</td><td>they</td></tr>
<tr><td scope="row">they'd</td><td>they'll</td><td>they're</td><td>they've
</td><td>think</td></tr>
<tr><td scope="row">third</td><td>this</td><td>thorough</td><td>thoroughly
</td><td>those</td></tr>
<tr><td scope="row">though</td><td>three</td><td>through</td><td>throughout
</td><td>thru</td></tr>
<tr><td scope="row">thus</td><td>to</td><td>together</td><td>too</td><td>took
</td></tr>
<tr><td scope="row">toward</td><td>towards</td><td>tried</td><td>tries</td>
<td>truly</td></tr>
<tr><td scope="row">try</td><td>trying</td><td>twice</td><td>two</td><td>un
</td></tr>
<tr><td scope="row">under</td><td>unfortunately</td><td>unless</td>
<td>unlikely</td><td>until</td></tr>
<tr><td scope="row">unto</td><td>up</td><td>upon</td><td>us</td><td>use</td>
</tr>
<tr><td scope="row">used</td><td>useful</td><td>uses</td><td>using</td>
<td>usually</td></tr>
<tr><td scope="row">value</td><td>various</td><td>very</td><td>via</td>
<td>viz</td></tr>
<tr><td scope="row">vs</td><td>want</td><td>wants</td><td>was</td><td>wasn't
</td></tr>
<tr><td scope="row">way</td><td>we</td><td>we'd</td><td>we'll</td><td>we're
</td></tr>
<tr><td scope="row">we've</td><td>welcome</td><td>well</td><td>went</td>
<td>were</td></tr>
<tr><td scope="row">weren't</td><td>what</td><td>what's</td><td>whatever</td>
<td>when</td></tr>
<tr><td scope="row">whence</td><td>whenever</td><td>where</td><td>where's
</td><td>whereafter</td></tr>
<tr><td scope="row">whereas</td><td>whereby</td><td>wherein</td><td>whereupon
</td><td>wherever</td></tr>
<tr><td scope="row">whether</td><td>which</td><td>while</td><td>whither</td>
<td>who</td></tr>
<tr><td scope="row">who's</td><td>whoever</td><td>whole</td><td>whom</td>
<td>whose</td></tr>
<tr><td scope="row">why</td><td>will</td><td>willing</td><td>wish</td>
<td>with</td></tr>
<tr><td scope="row">within</td><td>without</td><td>won't</td><td>wonder</td>
<td>would</td></tr>
<tr><td scope="row">wouldn't</td><td>Да</td><td>yet</td><td>you</td>
<td>you'd</td></tr>
<tr><td scope="row">you'll</td><td>you're</td><td>you've</td><td>your</td>
<td>yours</td></tr>
<tr><td scope="row">yourself</td><td>yourselves</td><td>zero</td><td> </td>
<td> </td></tr></tbody></table>

<h3><a name="fulltext-restrictions"></a>13.9.5. Полнотекстовые ограничения
</h3>
<ul><li><p>Полнотекстовые поиски поддержаны только для таблиц типов
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.</li>

<li>Полнотекстовые поиски не поддержаны для разделенных таблиц. См.
<a href="partit.htm#partitioning-limitations">раздел 20.6</a>.</li>
<li>Полнотекстовые поиски могут использоваться с большинством многобайтовых
наборов символов. Исключение то, что для Unicode может использоваться набор
символов <code>utf8</code>, но не <code>ucs2</code>. Хотя индексы
<code>FULLTEXT</code> на столбцах <code>ucs2</code> не могут использоваться,
Вы можете применить поиск <code>IN BOOLEAN MODE</code> на столбцах
<code>ucs2</code> без индекса.</p>

<p>Замечания для <code>utf8</code> также касаются
<code>utf8mb4</code>, а для <code>ucs2</code> применимы к
<code>utf16</code>, <code>utf16le</code> и <code>utf32</code>.</li>

<li>У идеографических языков, таких как китайский и японский язык нет
разделителей слова. Поэтому, встроенный полнотекстовый анализатор
<span><em>не может определить, где слова начинаются и заканчиваются на этих и
других таких же языках</em></span>.</p>

<p>Символьно-ориентированный полнотекстовый анализатор ngram, который
поддерживает китайский, японский и корейский (CJK) язык, и основанный на
слове плагин анализатора MeCab, который поддерживает японский язык,
обеспечены для использования с
таблицами <code>InnoDB</code>и <code>MyISAM</code>.</li>

<li>Хотя использование нескольких наборов символов в пределах единственной
таблицы поддержано, все столбцы в индексе <code>FULLTEXT</code>
должны использовать тот же самый набор символов и сопоставление.</li>

<li>Список столбцов в <a href="#function_match"><code>MATCH()</code>
</a> должен точно соответствовать списку столбцов в некоторых индексах
<code>FULLTEXT</code> определенных для таблицы, если это
<a href="#function_match"><code>MATCH()</code></a> в
<code>IN BOOLEAN MODE</code> на таблице <code>MyISAM</code>.  Для таблиц
<code>MyISAM</code> поиски в режиме boolean могут быть сделаны на
неиндексированных столбцах, хотя они, вероятно, будут медленными.</li>

<li>Параметром <code>AGAINST()</code> должно быть строковое значение, которое
является постоянным во время оценки запроса. Это исключает, например, столбец
таблицы, потому что это может отличаться для каждой строки.</li>

<li>Индексные подсказки более ограничены для поисков <code>FULLTEXT</code>,
чем для не-<code>FULLTEXT</code>. См.
<a href="optimiz.htm#index-hints">раздел 9.9.4</a>.</li>

<li>Для <code>InnoDB</code> все операции DML
(<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a>,
<a href="sql.htm#delete"><code>DELETE</code></a>) с
вовлечением столбцов с полнотекстовым индексом обработаны в момент закрытия
транзакции. Например, для <code>INSERT</code> вставленная строка размечена на
отдельные слова и анализируется. Отдельные слова добавлены к полнотекстовому
индексу таблицы, когда транзакция закрыта. В результате полнотекстовые поиски
возвращают только переданные данные.</li>
<li>Символ '%' не поддержан для полнотекстовых поисков.</p></li></ul>

<h3><a name="fulltext-fine-tuning"></a>13.9.6.
Точная настройка полнотекстового поиска в MySQL</h3>
<p>У полнотекстового поиска MySQL есть немного настраиваемых пользователем
параметров. Вы можете осуществить больший контроль над поведением
полнотекстового поиска, если у Вас есть исходные тексты
MySQL, потому что некоторые изменения требуют модификаций исходного кода. См.
<a href="install.htm#source-installation">раздел 2.8</a>.</p>

<p>Полнотекстовый поиск тщательно настроен для эффективности. Изменение
поведения по умолчанию в большинстве случаев может фактически уменьшить
эффективность. Не изменяйте исходные тексты MySQL, если Вы не знаете
точно, что делаете!</p>

<p>Во время запуска сервера должно быть установлено большинство
полнотекстовых переменных, описанных в этом разделе. Перезапуск сервера
обязан изменять их, они не могут быть изменены в то время,
когда сервер работает.</p>

<p>Некоторые переменные требуют, чтобы Вы пересоздали индексы
<code>FULLTEXT</code> в Ваших таблицах. Инструкции для этого даны
позже в этом разделе.</p>






7084
<h4><a name="fulltext-word-length"></a>Конфигурирование минимальной и
максимальной длины слова</h4>
<p>Минимальные и максимальные длины слов, которые будут индексированы,
определены <a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a> и
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a> для <code>InnoDB</code> или
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>
и <a href="server.htm#sysvar_ft_max_word_len"><code>ft_max_word_len</code>
</a> для <code>MyISAM</code>.</p>

<p>Минимальная и максимальная длина слова не относится к индексам
<code>FULLTEXT</code> создаваемым с использованием анализатора ngram.
Маркерный размер для него определен опцией
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a>.</p>

<p>После изменения любой из этих опций пересоздайте индексы
<code>FULLTEXT</code>, чтобы вступили в силу изменения.
Например, чтобы сделать двухсимвольные слова доступными для поиска,
Вы могли поместить следующие строки в файл опции:
<pre>
[mysqld]
innodb_ft_min_token_size=2
ft_min_word_len=2
</pre>

<p>Теперь перезапустите сервер и пересоздайте индексы <code>FULLTEXT</code>.
Для таблиц <code>MyISAM</code> отметьте замечания относительно
<a href="programs.htm#myisamchk"><span><strong>myisamchk</strong></span></a>
в инструкциях ниже для того, чтобы пересоздать индексы <code>MyISAM</code>.
</p>

<h4><a name="fulltext-natural-language-threshold"></a>
Конфигурирование порога поиска естественного языка</h4>
<p>Для поисковых индексов <code>MyISAM</code> 50% порог для поисков
естественного языка определен особой выбранной схемой.
Чтобы отключить это, ищите следующую строку в
<code>storage/myisam/ftdefs.h</code>:
<pre>
#define GWS_IN_USE GWS_PROB
</pre>

<p>Замените ее на:
<pre>
#define GWS_IN_USE GWS_FREQ
</pre>
<p>Повторно соберите MySQL. Нет никакой потребности пересоздавать
индексы в этом случае.</p>

<p>Производя это изменение, Вы <span><em>строго</em></span>
уменьшаете способность MySQL обеспечить соответствующие значения уместности
для функции <a href="#function_match"><code>MATCH()</code></a>.
Если Вы действительно должны искать такие общие слова, было бы лучше искать
с использованием <code>IN BOOLEAN MODE</code>, который не имеет 50% порога.
</p>

<h4><a name="fulltext-modify-boolean-operators"></a>
Изменение булевых полнотекстовых операторов поиска</h4>
<p>Чтобы изменить операторы, используемые для булевых полнотекстовых поисков
в таблицах <code>MyISAM</code>, установите переменную
<a href="server.htm#sysvar_ft_boolean_syntax"><code>ft_boolean_syntax</code>
</a>. <code>InnoDB</code> не имеет эквивалентной установки. Эта переменная
может быть изменена в то время, как сервер работает, но Вы должны иметь
привилегию <a href="security.html#priv_super"><code>SUPER</code></a>. Никакое
пересоздание индексов не нужно в этом случае. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>,
который описывает правила, как установить эту переменную.</p>

<h4><a name="fulltext-modify-character-set"></a>Модификации набора символов
</h4>
<p>Для встроенного полнотекстового анализатора Вы можете изменить набор
символов, которые считаются символами слова, несколькими способами, как
описано в следующем списке. После создания модификации, восстановите
индексирование для каждой таблицы, которая содержит любой индекс
<code>FULLTEXT</code>. Предположите, что Вы хотите обработать символ дефиса
('-') как символ слова. Используйте один из этих методов:</p>

<ul><li><p>Модификация исходных текстов MySQL: в
<code>storage/innobase/handler/ha_innodb.cc</code> (для <code>InnoDB</code>)
или в <code>storage/myisam/ftdefs.h</code> (для <code>MyISAM</code>) найдите
макросы <code>true_word_char()</code> и <code>misc_word_char()</code>.
Добавьте <code>'-'</code> к одному из них и пересоберите MySQL.</li>

<li>Измените файл набора символов: это не требует никакой перекомпиляции.
Макрос <code>true_word_char()</code> использует таблицу
<span>character type</span>, чтобы отличить буквы и цифры от других символов.
Вы может отредактировать содержание массива
<code>&lt;ctype&gt;&lt;map&gt;</code> в одном из XML-файлов набора символов,
чтобы определить <code>'-'</code> как <span>букву</span>.
Тогда используйте данный набор символов для Вашего индекса
<code>FULLTEXT</code>. Для информации о формате массива
<code>&lt;ctype&gt;&lt;map&gt;</code> см.
<a href="global.htm#character-arrays">раздел 11.3.1</a>.</li>

<li>Добавьте новое сопоставление для набора символов, используемого
индексированными столбцами, и измените столбцы, чтобы использовать это
сопоставление. Для общей информации о добавлении сопоставлений см.
<a href="global.htm#adding-collation">раздел 11.4</a>. Для примера,
определенного для полнотекстовой индексации, см.
<a href="#full-text-adding-collation">раздел 13.9.7</a>.
</p></li></ul>

<h4><a name="fulltext-rebuild-innodb-indexes"></a>
Пересоздание полнотекстового индекса InnoDB</h4>
<p>Если Вы изменяете полнотекстовые переменные
(<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_server_stopword_table">
<code>innodb_ft_server_stopword_table</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_user_stopword_table"><code>
innodb_ft_user_stopword_table</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_enable_stopword"><code>
innodb_ft_enable_stopword</code></a>,
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a> Вы должны восстановить Ваш индекс <code>FULLTEXT</code>
после произведения изменений. Изменение переменных
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a> или
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a>, которые не могут быть установлены динамически, требует перезапуска
сервера и восстановления индекса.</p>

<p>Для пересоздания индекса <code>FULLTEXT</code> таблицы
<code>InnoDB</code>, используйте
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a> с опциями
<code>DROP INDEX</code> и <code>ADD INDEX</code>, чтобы удалить и
обновить каждый индекс.</p>

<h4><a name="fulltext-optimize"></a>Оптимизация полнотекстового
индексирования InnoDB</h4>
<p>Выполнение <a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code>
</a> на таблице с полнотекстовым индексом восстанавливает полнотекстовое
индексирование, физически удаляя удаленные логически Document ID
и объединяя записи для того же самого слова, где только возможно.</p>

<p>Чтобы оптимизировать полнотекстовый индекс, включите
<a href="innodb.htm#sysvar_innodb_optimize_fulltext_only"><code>
innodb_optimize_fulltext_only</code></a> и выполните
<code>OPTIMIZE TABLE</code>.
<pre>
mysql&gt; set GLOBAL innodb_optimize_fulltext_only=ON;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; OPTIMIZE TABLE opening_lines;
+--------------------+----------+----------+----------+
| Table              | Op       | Msg_type | Msg_text |
+--------------------+----------+----------+----------+
| test.opening_lines | optimize | status   | OK       |
+--------------------+----------+----------+----------+
1 row in set (0.01 sec)
</pre>

<p>Чтобы избежать длинного пересоздания полнотекстового индекса
на больших таблицах, Вы можете использовать опцию
<a href="innodb.htm#sysvar_innodb_ft_num_word_optimize"><code>
innodb_ft_num_word_optimize</code></a>, чтобы выполнить оптимизацию шаг за
шагом. Опция <code>innodb_ft_num_word_optimize</code> определяет число слов,
которые оптимизированы каждый раз при запуске
<a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code></a>.
Настройка по умолчанию 2000, что означает, что 2000 слов оптимизированы
каждый раз при запуске <a href="sql.htm#optimize-table"><code>OPTIMIZE
TABLE</code></a>. Последующий запуск
<a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code></a>
продолжит работу с того места, где завершился предыдущий.</p>

<h4><a name="fulltext-rebuild-myisam-indexes"></a>Восстановление
полнотекстового индекса MyISAM</h4>
<p>Если Вы изменяете полнотекстовые переменные
(<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code>
</a>,
<a href="server.htm#sysvar_ft_max_word_len"><code>ft_max_word_len</code></a>
или <a href="server.htm#sysvar_ft_stopword_file"><code>ft_stopword_file
</code></a>), или если Вы изменяете файл стоп-слов непосредственно,
Вы должны восстановить Ваш индекс <code>FULLTEXT</code>
после произведения изменений и перезапуска сервера.</p>

<p>Для этого на таблице <code>MyISAM</code>
достаточно сделать восстановление в режиме <code>QUICK</code>:
<pre>
mysql&gt; REPAIR TABLE <em><code>tbl_name</code></em> QUICK;
</pre>

<p>Альтернативно, можно использовать
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a>. В некоторых
случаях, это может быть быстрее, чем работа восстановления.</p>

<p>Каждая таблица, которая содержит любой индекс <code>FULLTEXT</code>,
должна быть восстановлена. Иначе запросы к таблице могут привести
к неправильным результатам, и модификации к таблице заставят сервер
рассматривать таблицу как поврежденную и нуждающуюся в ремонте.

<p>Если Вы используете <a href="programs.htm#myisamchk"><span><strong>
myisamchk</strong></span></a>, чтобы выполнить работу, которая изменяет
индексы таблицы <code>MyISAM</code> (например, repair или analyze),
индексы <code>FULLTEXT</code> должны быть восстановлены, используя
<span><em>значения по умолчанию</em></span> параметров для минимальной длины
слова, максимальной длины слова и файла стоп-слов, если Вы не определяете
иное. Это может привести к провалу попытки запросов.</p>

<p>Проблема происходит, потому что эти параметры известны только серверу.
Они не сохранены в индексных файлах <code>MyISAM</code>. Чтобы избежать
проблемы, если Вы изменили минимальную или максимальную длину слова или
значения файла стоп-слов, используемые сервером, определите те же самые
значения для переменных
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>,
<a href="server.htm#sysvar_ft_max_word_len"><code>ft_max_word_len</code></a>
и <a href="server.htm#sysvar_ft_stopword_file"><code>ft_stopword_file</code>
</a> для программы <a href="programs.htm#myisamchk"><span><strong>myisamchk
</strong></span></a>, которые Вы используете для
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>.
Например, если Вы установили минимальную длину слова 3, Вы можете
восстановить таблицу с <a href="programs.htm#myisamchk"><span><strong>
myisamchk</strong></span></a> так:
<pre>
shell&gt; myisamchk --recover --ft_min_word_len=3 <em><code>tbl_name</code></em>.MYI
</pre>

<p>Чтобы гарантировать, что <a href="programs.htm#myisamchk"><span><strong>
myisamchk</strong></span></a> и сервер используют те же самые значения для
полнотекстовых параметров, разместите их в обоих секциях
<code>[mysqld]</code> и <code>[myisamchk]</code> файла опций:
<pre>
[mysqld]
ft_min_word_len=3

[myisamchk]
ft_min_word_len=3
</pre>

<p>Альтернатива использованию <a href="programs.htm#myisamchk"><span><strong>
myisamchk</strong></span></a> для модификации табличных индексов
<code>MyISAM</code> состоит в применении запросов
the <a href="sql.htm#repair-table"><code>REPAIR TABLE</code></a>,
<a href="sql.htm#analyze-table"><code>ANALYZE TABLE</code></a>,
<a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code></a> или
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a>. Они
выполнены сервером, который знает надлежащие значения параметров.</p>

<h3><a name="full-text-adding-collation"></a>13.9.7.
Добавление сопоставления для полнотекстовой индексации</h3>
<p>Этот раздел описывает, как добавить новое сопоставление для полнотекстовых
поисков, используя встроенный полнотекстовый анализатор. Типовое
сопоставление походит на <code>latin1_swedish_ci</code>, но обработает
символ <code>'-'</code> как букву, а не символ пунктуации так, чтобы это
могло быть индексировано как символ слова. Общая информация о добавлении
сопоставлений дана в <a href="global.htm#adding-collation">разделе 11.4</a>.
Предполагается, что Вы читали это и знакомы с вовлеченными файлами.</p>

<p>Чтобы добавить сопоставление для полнотекстовой индексации,
используйте эту процедуру:</p>
<ol type="1"><li><p>Добавьте сопоставление к файлу <code>Index.xml</code>.
ID сопоставления должен быть уникальным.
<pre>
&lt;charset name="latin1"&gt;
...
&lt;collation name="latin1_fulltext_ci" id="1000"/&gt;
&lt;/charset&gt;
</pre></li>

<li>Объявите порядок сортировки для сопоставления в файле
<code>latin1.xml</code>. В этом случае порядок может быть скопирован с
<code>latin1_swedish_ci</code>:
<pre>
&lt;collation name="latin1_fulltext_ci"&gt;
&lt;map&gt;
00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F
20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F
30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F
40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F
60 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F
50 51 52 53 54 55 56 57 58 59 5A 7B 7C 7D 7E 7F
80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F
A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF
B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF
41 41 41 41 5C 5B 5C 43 45 45 45 45 49 49 49 49
44 4E 4F 4F 4F 4F 5D D7 D8 55 55 55 59 59 DE DF
41 41 41 41 5C 5B 5C 43 45 45 45 45 49 49 49 49
44 4E 4F 4F 4F 4F 5D F7 D8 55 55 55 59 59 DE FF
&lt;/map&gt;
&lt;/collation&gt;
</pre></li>

<li>Измените массив <code>ctype</code> в <code>latin1.xml</code>.
Измените значение, соответствующее 0x2D (код символа <code>'-'</code>)
с 10 (пунктуация) на 01 (строчная буква). В следующем массиве это элемент в
четвертой строке, третье значение от конца.
<pre>
&lt;ctype&gt;
&lt;map&gt;
00
20 20 20 20 20 20 20 20 20 28 28 28 28 28 20 20
20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
48 10 10 10 10 10 10 10 10 10 10 10 10 <span><strong>01</strong></span> 10 10
84 84 84 84 84 84 84 84 84 84 10 10 10 10 10 10
10 81 81 81 81 81 81 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 10 10 10 10 10
10 82 82 82 82 82 82 02 02 02 02 02 02 02 02 02
02 02 02 02 02 02 02 02 02 02 02 10 10 10 10 20
10 00 10 02 10 10 10 10 10 10 01 10 01 00 01 00
00 10 10 10 10 10 10 10 10 10 02 10 02 00 02 01
48 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 10 01 01 01 01 01 01 01 02
02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
02 02 02 02 02 02 02 10 02 02 02 02 02 02 02 02
&lt;/map&gt;
&lt;/ctype&gt;
</pre></li>

<li>Перезапустите сервер.</li>
<li>Чтобы использовать новое сопоставление, включите это в определение
столбцов, которые должны его использовать:
<pre>
mysql&gt; DROP TABLE IF EXISTS t1;
Query OK, 0 rows affected (0.13 sec)

mysql&gt; CREATE TABLE t1 (
  a TEXT CHARACTER SET latin1 COLLATE latin1_fulltext_ci,
  FULLTEXT INDEX(a)) ENGINE=InnoDB;
Query OK, 0 rows affected (0.47 sec)
</pre></li>

<li>Проверьте сопоставление, чтобы проверить, что дефис рассматривают
как символ слова:
<pre>
mysql&gt; INSERT INTO t1 VALUEs ('----'),('....'),('abcd');
Query OK, 3 rows affected (0.22 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM t1 WHERE MATCH a AGAINST ('----' IN BOOLEAN MODE);
+------+
| a    |
+------+
| ---- |
+------+
1 row in set (0.00 sec)
</pre></li></ol>

<h3><a name="fulltext-search-ngram"></a>13.9.8.
Полнотекстовый анализатор ngram</h3>
<p>Полнотекстовый анализатор MySQL использует пробел между словами как
разделитель, чтобы определить, где слова начинаются и заканчиваются. Это
является ограничением, работая с идеографическими языками, которые не
используют разделители слова. Чтобы обойти это ограничение, MySQL
обеспечивает полнотекстовый анализатор ngram, который поддерживает китайский,
японский и корейский язык (CJK). ngram поддержан для использования с
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.</p>

<p>MySQL также предоставляет полнотекстовый плагин MeCab анализатора
японского языка, который размечает документы на значащие слова. Для получения
дополнительной информации см. <a href="#fulltext-search-mecab">
раздел 13.9.9</a>.</p>

<p>ngram это непрерывная последовательность из
<em><code>n</code></em> символов данной последовательности текста.
ngram анализатор размечает последовательность текста в непрерывную
последовательность <em><code>n</code></em> символов. Например, Вы можете
разметить <span>abcd</span> для различных значений <em><code>n</code></em>:
<pre>
n=1: 'a', 'b', 'c', 'd'
n=2: 'ab', 'bc', 'cd'
n=3: 'abc', 'bcd'
n=4: 'abcd'
</pre>

<p>Полнотекстовый анализатор ngram встроенный плагин сервера. Как и с другими
встроенными плагинами сервера, это автоматически загружено,
когда сервер запущен.</p>

<p>Полнотекстовый синтаксис поиска, описанный в
<a href="#fulltext-search">разделе 13.9</a> относится к плагину
анализатора ngram. Различия в поведении парсинга описаны в этом разделе.
Связанные параметры конфигурации, за исключением минимальных и максимальных
длин слова также применимы.</p>

<h4><a name="idm139965351906624"></a>
Конфигурирование маркерного размера ngram</h4>
<p>У анализатора ngram есть значение по умолчанию маркерного размера 2
(bigram). Например, с маркерным размером 2, ngram разбирает строку
<span>abc def</span> на четыре маркера:
<span>ab</span>, <span>bc</span>, <span>de</span> и <span>ef</span>.</p>

<p>Маркерный размер ngram конфигурируется опцией
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a>, у которой есть минимальное значение 1 и максимальное 10.</p>

<p>Как правило, <a href="server.htm#sysvar_ngram_token_size"><code>
ngram_token_size</code></a> установлен в размер самого большого маркера,
который Вы хотите искать. Если Вы намереваетесь искать только единственные
символы, надо установить <a href="server.htm#sysvar_ngram_token_size"><code>
ngram_token_size</code></a> в 1. Меньший маркерный размер производит меньший
полнотекстовый индекс и более быстрые поиски. Если Вы должны искать слова,
состоявшие больше, чем из одного символа, стоит установить
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a> соответственно. Например, <span>Happy Birthday</span>
<span>Г■÷Ф≈╔Е©╚Д╧░</span> в простом китайском, где <span>Г■÷Ф≈╔</span>
<span>birthday</span>, а <span>Е©╚Д╧░</span> переводится как
<span>happy</span>. Чтобы искать на двухсимвольных словах, установите
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a> в 2 или выше.</p>

<p>Как переменная только для чтения,
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a> может быть установлена как часть строки запуска
или в конфигурационном файле:</p>

<ul><li><p>Строка запуска:
<pre>
mysqld --ngram_token_size=2
</pre></li>

<li>Конфигурационный файл:
<pre>
[mysqld]
ngram_token_size=2
</pre></li></ul>

<p>Следующие параметры конфигурации длины слова проигнорированы для индексов
<code>FULLTEXT</code> анализатором ngram:
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a>,
<a href="innodb.htm#sysvar_innodb_ft_max_token_size"><code>
innodb_ft_max_token_size</code></a>,
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>
и <a href="server.htm#sysvar_ft_max_word_len"><code>ft_max_word_len</code>
</a>.</p>

<h4><a name="idm139965351881040"></a>Создание индексов FULLTEXT для ngram
</h4>
<p>Чтобы создать индекс <code>FULLTEXT</code>, который использует анализатор
ngram, определите <code>WITH PARSER ngram</code> в
<a href="sql.htm#create-table"><code>CREATE TABLE</code></a>,
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a> или
<a href="sql.htm#create-index"><code>CREATE INDEX</code></a>.</p>

<p>Следующий пример демонстрирует составление таблицы с индексом
<code>ngram</code> <code>FULLTEXT</code>, вставляя типовые данные (текст на
упрощенном китайском) и рассматривая размеченные данные в таблице
<a href="inform.htm#innodb-ft-index-cache-table">
<code>INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE</code></a>.
<pre>
mysql&gt; USE test;
mysql&gt; CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT, FULLTEXT (title,body)
  WITH PARSER ngram) ENGINE=InnoDB CHARACTER SET utf8mb4;
mysql&gt; SET NAMES utf8mb4;

INSERT INTO articles (title,body) VALUES
('Ф∙╟Ф█╝Е╨⌠Г╝║Г░├','Е°╗Ф°╛Ф∙≥Г╗▀Д╦╜Ф┬▒Е╟├Е░▒Д╫═Е╠∙Г╓╨Е╕┌Д╫∙Г╝║Г░├Ф∙╟Ф█╝Е╨⌠'),
('Ф∙╟Ф█╝Е╨⌠Е╨■Г■╗Е╪─Е▐▒','Е╜╕Д╧═Е╪─Е▐▒Ф∙╟Ф█╝Е╨⌠Е╨■Г■╗Г╗▀Е╨▐');

mysql&gt; SET GLOBAL innodb_ft_aux_table="test/articles";
mysql&gt; SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE
                   ORDER BY doc_id, position;
</pre>

<p>Добавить индекс <code>FULLTEXT</code> к существующей таблице Вы можете,
используя <a href="sql.htm#alter-table"><code>ALTER TABLE</code></a> или
<a href="sql.htm#create-index"><code>CREATE INDEX</code></a>. Например:
<pre>
CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT) ENGINE=InnoDB CHARACTER SET utf8;
ALTER TABLE articles ADD FULLTEXT INDEX ft_index (title, body)
      WITH PARSER ngram;
# Или:
CREATE FULLTEXT INDEX ft_index ON articles (title, body) WITH PARSER ngram;
</pre>

<h4><a name="idm139965351864640"></a>Обработка пробелов в ngram</h4>
<p>Анализатор ngram устраняет пробелы, разбирая текст. Например:</p>
<ul><li><p><span>ab cd</span> разобрано как <span>ab</span>, <span>cd</span>.
</li>
<li><span>a bc</span> разобрано как <span>bc</span>.</p></li></ul>

<h4><a name="idm139965351859392"></a>Обработка стоп-слов в ngram</h4>
<p>Встроенный в MySQL полнотекстовый анализатор сравнивает слова с записями в
списке стоп-слов. Если слово равно записи в списке стоп-слов, оно будет
исключено из индексирования. Для анализатора ngram обработка стоп-слов
выполнена по-другому. Вместо исключения маркеров, которые равны записям в
списке стоп-слов, анализатор ngram исключает маркеры, которые
<span><em>содержат</em></span> стоп-слова. Например, приняв
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size=2</code>
</a>, документ, который содержит <span>a,b</span> разберется как
<span>a,</span> и <span>,b</span>. Если запятая (<span>,</span>)
определена как стоп-слово, <span>a,</span> и <span>,b</span>
исключены из индексирования, потому что они содержат запятую.</p>

<p>По умолчанию, ngram использует список стоп-слов, который содержит список
английского стоп-слов. Для списка стоп-слов применимого к китайскому,
японскому или корейскому языку Вы должны создать свой собственный. Для
информации о создании списка стоп-слов см.
<a href="#fulltext-stopwords">раздел 13.9.4</a>.</p>

<p>Игнорируются стоп-слова с длиной больше
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size</code>
</a>.</p>

<h4><a name="idm139965351850352"></a>Поиск терминов в ngram</h4>
<p>Для поиска в режиме <span><em>режиме естественного языка</em></span>
критерий поиска преобразован в союз слов в ngram. Например, строка
<span>abc</span> (<a href="server.htm#sysvar_ngram_token_size"><code>
ngram_token_size=2</code></a>) станет <span>ab bc</span>.
Учитывая два документа, один содержащий <span>ab</span>, другой
<span>abc</span>, критерий поиска <span>ab bc</span>
соответствует обоим документам.</p>

<p>Для <span><em>режима boolean search</em></span>
критерий поиска преобразован в поисковую фразу ngram. Например, строка
'abc' (<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size=2
</code></a>) разберется на '<span>ab bc</span>'. Учитывая два документа, один
содержащий 'ab' и другой содержащий 'abc', фраза поиска
'<span>ab bc</span>' соответствует только документу, содержащему 'abc'.</p>

<h4><a name="idm139965351841952"></a>Подстановочный поиск анализатора ngram
</h4>
<p>Поскольку индекс ngram <code>FULLTEXT</code> содержит только токены и
не содержит информацию о начале слов, подстановочные поиски могут возвратить
неожиданные результаты. Следующие примеры поведения относятся к
подстановочным поискам, использующим индексы ngram <code>FULLTEXT</code>:</p>

<ul><li><p>Если понятие приставки подстановочного поиска короче маркерного
размера ngram, запрос возвращает все индексированные строки, которые содержат
маркеры ngram, начинающиеся с термина приставки. Например, при
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size=2</code>
</a> поиск <span>a*</span> возвращает все строки, начинающиеся с
<span>a</span>.</li>

<li>Если понятие приставки подстановочного поиска более длинно чем
маркерный размер, термин приставки преобразован в ngram-фразу, а
подстановочный оператор проигнорирован. Например, при
<a href="server.htm#sysvar_ngram_token_size"><code>ngram_token_size=2</code>
</a> <span>abc*</span> превратится в <span>ab bc</span>.</p></li></ul>

<h4><a name="idm139965351832432"></a>Поиск фразы в ngram</h4>
<p>Поисковые фразы преобразованы в поисковые фразы ngram. Например, фраза
поиска <span>abc</span> преобразована в <span>ab bc</span>, которая
возвращает документы, содержащие <span>abc</span> и <span>ab bc</span>.</p>

<p>Фраза поиска <span>abc def</span> преобразована в <span>ab bc de ef
</span>, которая возвращает документы, содержащие <span>abc def</span> и
<span>ab bc de ef</span>. Документ, который содержит <span>abcdef</span>
не будет возвращен.</p>

<h3><a name="fulltext-search-mecab"></a>13.9.9.
Полнотекстовый плагин анализатора MeCab</h3>
<p>Полнотекстовый анализатор встроенного MySQL использует пробел между
словами как разделитель, чтобы определить, где слова начинаются и
заканчиваются. Это является ограничением, работая с идеографическими языками,
которые не используют разделители слова. Чтобы обойти это ограничение для
японского языка, MySQL предоставляет полнотекстовый плагин анализатора MeCab.
Он поддержан для использования с <a href="innodb.htm"><code>InnoDB</code></a>
и <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.</p>

<p>Полнотекстовый плагин анализатора MeCab это плагин для японского
языка, который размечает последовательность текста на значащие слова.
Например, MeCab размечает <span>Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├</span>
(<span>Database Management</span>) в <span>Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧</span>
(<span>Database</span>) и <span>Г╝║Г░├</span> (<span>Management</span>).
В сравнении с <a href="#fulltext-search-ngram">ngram</a>
полнотекстовый анализатор размечает текст в непрерывную последовательность из
<em><code>n</code></em> символов, где <em><code>n</code></em> от 1 до 10.</p>

<p>В дополнение к разметке текста на значащие слова MeCab индексирует, как
правило, меньше, чем ngram, а полнотекстовые поиски MeCab вообще быстрее.
Один недостаток состоит в том, что разметка документа может занять больше
времени у MeCab, чем у ngram.</p>

<p>Для дополнительной информации об анализаторе MeCab обратитесь к ресурсу
<a href="../../../mecab.googlecode.com/svn/trunk/mecab/doc/index.html"
target="_top">MeCab Documentation</a>.</p>

<h4><a name="idm139965351811424"></a>Установка плагина анализатора MeCab</h4>
<p>Плагин анализатора MeCab требует <code>mecab</code> и
<code>mecab-ipadic</code>.</p>

<p>На Fedora, Debian и Ubuntu (кроме Ubuntu 12.04, где версия системы
<code>mecab</code> слишком стара) MySQL динамически соединяется с системной
установкой <code>mecab</code>, если это установлено по умолчанию. На других
поддерживаемых Unix-подобных платформах <code>libmecab.so</code> статически
скомпонована с <code>libpluginmecab.so</code>, которая расположена в каталоге
плагина MySQL. <code>mecab-ipadic</code> включен в исполняемый код MySQL и
находится в <code><em><code>MYSQL_HOME</code></em>\lib\mecab</code>.</p>

<p>Вы можете установить <code>mecab</code> и <code>mecab-ipadic</code>
используя утилиту управления пакетами (в Fedora, Debian или Ubuntu) или
собрать <code>mecab</code> и <code>mecab-ipadic</code> из исходных текстов.
</p>

<p>В Windows <code>libmecab.dll</code> находится в каталоге
MySQL <code>bin</code>, а <code>mecab-ipadic</code> в
<code><em><code>MYSQL_HOME</code></em>/lib/mecab</code>.</p>

<p>Чтобы установить и сконфигурировать плагин анализатора MeCab,
выполните следующие шаги:</p>
<ol type="1"><li><p>В конфигурационном файле MySQL установите опцию
<a href="server.htm#sysvar_mecab_rc_file"><code>mecab_rc_file</code></a>
к местоположению конфигурационного файла <code>mecabrc</code> для MeCab.
Если Вы используете пакет MeCab, распределенный с MySQL
<code>mecabrc</code> находится в <code>MYSQL_HOME/lib/mecab/etc/</code>.
<pre>
[mysqld]
loose-mecab-rc-file=MYSQL_HOME/lib/mecab/etc/mecabrc
</pre>

<p>Префикс <code>loose</code> это
<a href="programs.htm#option-modifiers">модификатор опции</a>. Опция
<a href="server.htm#sysvar_mecab_rc_file"><code>mecab_rc_file</code></a>
не признана MySQL, пока плагин анализатора MeCaB не установлен, но это
должно быть установлено прежде, чем попытаться установить плагин анализатора.
Префикс <code>loose</code> позволяет Вам перезапустить MySQL, не сталкиваясь
с ошибкой из-за непризнанной переменной.</p>

<p>Если Вы используете свою собственную установку MeCab или создаете MeCab из
исходных текстов, местоположение файла опций <code>mecabrc</code>
может быть другим.</p></li>

<li>Также в конфигурационном файле MySQL установите минимальный маркерный
размер в 1 или 2, которые являются значениями, рекомендуемыми для
использования с анализатором MeCab. Для таблиц <code>InnoDB</code>
минимальный маркерный размер определен опцией
<a href="innodb.htm#sysvar_innodb_ft_min_token_size"><code>
innodb_ft_min_token_size</code></a>, у которой есть значение по умолчанию 3.
Для таблиц <code>MyISAM</code> минимальный маркерный размер определен опцией
<a href="server.htm#sysvar_ft_min_word_len"><code>ft_min_word_len</code></a>
(значение по умолчанию 4).
<pre>
[mysqld]
innodb_ft_min_token_size=1
</pre></li>

<li>Измените конфигурационный файл <code>mecabrc</code>, чтобы определить
словарь, который Вы хотите использовать. Пакет <code>mecab-ipadic</code>
включает три словаря (<code>ipadic_euc-jp</code>, <code>ipadic_sjis</code> и
<code>ipadic_utf-8</code>). Конфигурационный файл <code>mecabrc</code>,
поставляемый с MySQL содержит запись, подобную следующему:
<pre>
dicdir = /path/to/mysql/lib/mecab/lib/mecab/dic/ipadic_euc-jp
</pre>

<p>Чтобы использовать словарь <code>ipadic_utf-8</code>,
модифицируйте запись так:
<pre>
dicdir=<em><code>MYSQL_HOME</code></em>/lib/mecab/dic/ipadic_utf-8
</pre>

<p>Если Вы используете свою собственную установку MeCab или создали MeCab из
исходных текстов, значение по умолчанию <code>dicdir</code> в файле
<code>mecabrc</code> будет отличаться, соответственно координатам словарей.
</p>

<p>После того, как плагин анализатора MeCab установлен, Вы можете
использовать статусную переменную
<a href="server.htm#statvar_mecab_charset"><code>mecab_charset</code></a>,
чтобы просмотреть набор символов, используемый MeCab. Три словаря MeCab,
представленные в MySQL, поддерживают следующие наборы символов.</p>

<ul><li><p>Словарь <code>ipadic_euc-jp</code> поддерживает наборы
символов <code>ujis</code> и <code>eucjpms</code>.</li>
<li>Словарь <code>ipadic_sjis</code> поддерживает наборы
символов <code>sjis</code> и <code>cp932</code>.</li>
<li>Словарь <code>ipadic_utf-8</code> поддерживает наборы
символов <code>utf8</code> и <code>utf8mb4</code>.</p></li></ul>

<p><a href="server.htm#statvar_mecab_charset"><code>mecab_charset</code></a>
только сообщает о первом поддержанном наборе символов. Например,
словарь <code>ipadic_utf-8</code> поддерживает
<code>utf8</code> и <code>utf8mb4</code>.
<a href="server.htm#statvar_mecab_charset"><code>mecab_charset</code></a>
всегда сообщает о <code>utf8</code>, когда этот словарь используется.
</p></li>

<li><p>Перезапустите MySQL.</li>
<li>Установите плагин анализатора MeCab:</p>
<p>Плагин анализатора MeCab установлен, используя синтаксис
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>.
Имя плагина <code>mecab</code>, совместно используемое имя
библиотеки <code>libpluginmecab.so</code>.
<pre>
INSTALL PLUGIN mecab SONAME 'libpluginmecab.so';
</pre>
<p>После того, как установлен, плагин анализатора MeCab загружается
при каждом нормальном перезапуске MySQL.</li>

<li>Проверьте, что плагин анализатора MeCab загружен, используя
<a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>.
<pre>
mysql&gt; SHOW PLUGINS;
</pre>
<p>Плагин <code>mecab</code> должен появиться в списке плагинов.
</p></li></ol>

<h4><a name="idm139965351733296"></a>Создание индекса FULLTEXT, который
использует анализатор MeCab</h4>
<p>Чтобы создать индекс <code>FULLTEXT</code>, который использует
анализатор mecab, определите <code>WITH PARSER ngram</code> с
<a href="sql.htm#create-table"><code>CREATE TABLE</code></a>,
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a> или
<a href="sql.htm#create-index"><code>CREATE INDEX</code></a>.</p>

<p>Этот пример демонстрирует составление таблицы с индексом
<code>mecab</code> <code>FULLTEXT</code>, вставляя типовые данные и
рассматривая размеченные данные в таблице
<a href="inform.htm#innodb-ft-index-cache-table">
<code>INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE</code></a>:
<pre>
mysql&gt; USE test;
mysql&gt; CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT,
  FULLTEXT (title,body) WITH PARSER mecab) ENGINE=InnoDB CHARACTER SET utf8;

mysql&gt; SET NAMES utf8;
mysql&gt; INSERT INTO articles (title,body) VALUES
('Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├','Ц│⌠Ц│╝Ц┐│Ц┐╔Ц┐╪Ц┐┬Ц┐╙Ц┌╒Ц┐╚Ц│╖Ц│╞Ц─│Г╖│Ц│╞Ц│╘Ц│╝Ц┌┬Ц│├Ц│╚Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Ц┌▓Г╝║Г░├Ц│≥Ц┌▀Ф√╧ФЁ∙Ц┌▓Г╢╧Д╩▀Ц│≈Ц│╬Ц│≥'),
('Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Ц┌╒Ц┐≈Ц┐╙Ц┌╠Ц┐╪Ц┌╥Ц┐╖Ц┐ЁИ√▀Г≥╨','Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Ц┌╒Ц┐≈Ц┐╙Ц┌╠Ц┐╪Ц┌╥Ц┐╖Ц┐ЁЦ┌▓И√▀Г≥╨Ц│≥Ц┌▀Ц│⌠Ц│╗Ц┌▓Е╜╕Ц│╤');

mysql&gt; SET GLOBAL innodb_ft_aux_table="test/articles";
mysql&gt; SELECT * FROM INFORMATION_SCHEMA.INNODB_FT_INDEX_CACHE
                   ORDER BY doc_id, position;
</pre>

<p>Чтобы добавить индекс <code>FULLTEXT</code> к существующей таблице, Вы
можете использовать <a href="sql.htm#alter-table"><code>ALTER TABLE</code>
</a> или <a href="sql.htm#create-index"><code>CREATE INDEX</code></a>:
<pre>
CREATE TABLE articles (
  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
  title VARCHAR(200), body TEXT) ENGINE=InnoDB CHARACTER SET utf8;
ALTER TABLE articles ADD FULLTEXT INDEX ft_index (title,body)
      WITH PARSER mecab;

# или:
CREATE FULLTEXT INDEX ft_index ON articles (title,body) WITH PARSER mecab;
</pre>

<h4><a name="idm139965351716720"></a>Обработка пробелов анализатором MeCab
</h4>
<p>Анализатор MeCab использует пробелы в качестве разделителей в строках
запроса. Например, анализатор MeCab размечает 'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧ Г╝║Г░├'
как 'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧' и 'Г╝║Г░├'.</p>

<h4><a name="idm139965351715200"></a>Обработка стоп-слов анализатором MeCab
</h4>
<p>По умолчанию анализатор MeCab использует короткий список английских
стоп-слов. Поскольку список стоп-слов перечисляет применимые к японскому
языку слова, Вы должны создать свой собственный. Для информации о создании
списка стоп-слов см.
<a href="#fulltext-stopwords">раздел 13.9.4</a>.</p>

<h4><a name="idm139965351713136"></a>Поиск термина анализатором MeCab</h4>
<p>Для поиска в режиме естественного языка критерий поиска преобразован в
союз маркеров. Например, 'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├' преобразуется в
'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧ Г╝║Г░├'.
<pre>
SELECT COUNT(*) FROM articles WHERE MATCH(title,body)
       AGAINST('Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├' IN NATURAL LANGUAGE MODE);
</pre>

<p>Для булева поиска критерий преобразован во фразу поиска. Например,
'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├' преобразуется в
'"Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧ Г╝║Г░├"'.
<pre>
SELECT COUNT(*) FROM articles WHERE MATCH(title,body)
       AGAINST('Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├' IN BOOLEAN MODE);
</pre>

<h4><a name="idm139965351709056"></a>Подстановочный поиск анализатором MeCab
</h4>
<p>Подстановочные критерии поиска не размечены. Поиск
'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├*' выполнен на префиксе
'Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├'.
<pre>
SELECT COUNT(*) FROM articles WHERE MATCH(title,body)
       AGAINST('Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧*' IN BOOLEAN MODE);
</pre>

<h4><a name="idm139965351706720"></a>Поиск фразы анализатором MeCab</h4>
<p>Фразы размечены. Например, "Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├" размечена как
"Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧ Г╝║Г░├".
<pre>
SELECT COUNT(*) FROM articles WHERE MATCH(title,body)
       AGAINST('"Ц┐┤Ц┐╪Ц┌©Ц┐≥Ц┐╪Ц┌╧Г╝║Г░├"' IN BOOLEAN MODE);
</pre>

<h4><a name="install-mecab-binary"></a>
Установка MeCab из двоичного дистрибутива</h4>
<p>Этот раздел описывает, как установить <code>mecab</code>
и <code>mecab-ipadic</code> из двоичного дистрибутива, используя утилиту
управления пакетами. Например, на Fedora Вы можете использовать Yum,
чтобы выполнить установку:
<pre>
yum mecab-devel
</pre>

<p>На Debian или Ubuntu Вы можете выполнить установку через APT:
<pre>
apt-get install mecab
apt-get install mecab-ipadic
</pre>

<h4><a name="build-mecab-from-source"></a>Установка MeCab из исходных текстов
</h4>
<p>Если Вы хотите создать <code>mecab</code> и
<code>mecab-ipadic</code> из исходных текстов,
основные шаги установки обеспечены ниже. Для дополнительной информации
обратитесь к документации MeCab.</p>

<ol type="1"><li><p>Загрузите tar.gz пакеты для <code>mecab</code> и
<code>mecab-ipadic</code> с
<a href="../../../taku910.github.io/mecab/#download" target="_top">
http://taku910.github.io/mecab/#download</a>.</li>

<li>Установите <code>mecab</code>:
<pre>
tar zxfv mecab-0.996.tar
cd mecab-0.996
./configure
make
make check
su
make install
</pre></li>

<li>Установите <code>mecab-ipadic</code>:
<pre>
tar zxfv mecab-ipadic-2.7.0-20070801.tar
cd mecab-ipadic-2.7.0-20070801
./configure
make
su
make install
</pre></li>

<li>Соберите MySQL, используя опцию
<a href="install.htm#option_cmake_with_mecab"><code>WITH_MECAB</code></a> для
CMake. Установите опцию
<a href="install.htm#option_cmake_with_mecab"><code>WITH_MECAB</code></a>
в <code>system</code>, если Вы установили
<code>mecab</code> и <code>mecab-ipadic</code> в места по умолчанию.
<pre>
-DWITH_MECAB=system
</pre>

<p>Если Вы определили пользовательский каталог установки, установите
<a href="install.htm#option_cmake_with_mecab"><code>WITH_MECAB</code></a>
к пользовательскому каталогу. Например:
<pre>
-DWITH_MECAB=/path/to/mecab
</pre></li></ol>

<h2><a name="cast-functions"></a>13.10. Функции и операторы преобразования
</h2>
<a name="idm139965351671024"></a><p><b>Таблица 13.14.
Функции и операторы преобразования</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#operator_binary"><code>BINARY
</code></a></td><td>Преобразует обычную строку в двоичную</td></tr>
<tr><td scope="row"><a href="#function_cast"><code>CAST()</code></a>
</td><td>Приводит значение к определенному типу</td></tr>
<tr><td scope="row"><a href="#function_convert"><code>CONVERT()
</code></a></td><td>Возвращает значение в качестве определенного типа
</td></tr></tbody></table>

<p>Функции и операторы преобразования включают преобразование значений одного
типа данных в другой.</p>
<p><a href="#function_convert"><code>CONVERT()</code></a> с
параметром <code>USING</code> обеспечивает способ преобразовать данные между
различными наборами символов:
<pre>
CONVERT(<em><code>expr</code></em> USING <em><code>transcoding_name</code></em>)
</pre>

<p>В MySQL транскодирующие имена то же самое, что и соответствующие
имена набора символов. Примеры:
<pre>
SELECT CONVERT(_latin1'Mц╪ller' USING utf8);
INSERT INTO utf8_table (utf8_column)
SELECT CONVERT(latin1_column USING utf8) FROM latin1_table;
</pre>

<p>Вы можете также использовать <a href="#function_convert"><code>
CONVERT()</code></a> без <code>USING</code> или
<a href="#function_cast"><code>CAST()</code></a>, чтобы
преобразовать строки между различными наборами символов:
<pre>
CONVERT(<em><code>string</code></em>, CHAR[(<em><code>N</code></em>)]
        CHARACTER SET <em><code>charset_name</code></em>)
CAST(<em><code>string</code></em> AS CHAR[(<em><code>N</code></em>)]
     CHARACTER SET <em><code>charset_name</code></em>)
</pre>

<p>Примеры:
<pre>
SELECT CONVERT('test', CHAR CHARACTER SET utf8);
SELECT CAST('test' AS CHAR CHARACTER SET utf8);
</pre>

<p>Если Вы определяете <code>CHARACTER SET
<em><code>charset_name</code></em></code> как показано,
получающийся набор символов и сопоставление
<em><code>charset_name</code></em>
и сопоставление по умолчанию для <em><code>charset_name</code></em>.
Если Вы опускаете <code>CHARACTER SET <em><code>charset_name</code></em>
</code>, получающийся набор символов и сопоставление определены переменными
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, которые определяют набор символов соединения и сопоставление
по умолчанию (см. <a href="global.htm#charset-connection">раздел 11.1.4</a>).
</p>

<p>Пункт <code>COLLATE</code> не разрешен в пределах вызова
<a href="#function_convert"><code>CONVERT()</code></a> или
<a href="#function_cast"><code>CAST()</code></a>, но Вы можете
применить это к функциональному результату. Например, это является законным:
<pre>
SELECT CAST('test' AS CHAR CHARACTER SET utf8) COLLATE utf8_bin;
</pre>

<p>Но это незаконно:
<pre>
SELECT CAST('test' AS CHAR CHARACTER SET utf8 COLLATE utf8_bin);
</pre>

<p>Обычно Вы не можете сравнить значения <a href="types.htm#blob"><code>BLOB
</code></a> или другие двоичные строки нечувствительным к регистру способом,
потому что двоичные строки используют набор символов <code>binary</code>,
у которого нет никакого сопоставления с понятием регистра символов.
Чтобы выполнить нечувствительное к регистру сравнение, используйте функцию
<a href="#function_convert"><code>CONVERT()</code></a> или
<a href="#function_cast"><code>CAST()</code></a>, чтобы
преобразовать значение в недвоичную строку. Сравнения получающейся строки
используют ее сопоставление. Например, если у конверсионного набора символов
результата есть нечувствительное к регистру сопоставление, операция
<a href="#operator_like"><code>LIKE</code></a>
не является чувствительной к регистру:
<pre>
SELECT 'A' LIKE CONVERT(<em><code>blob_col</code></em> USING latin1)
           FROM <em><code>tbl_name</code></em>;
</pre>

<p>Чтобы использовать иной набор символов, замените его именем
<code>latin1</code> в предыдущем запросе. Чтобы определить особое
сопоставление для переделанной строки, используйте предложение
<code>COLLATE</code> после вызова
<a href="#function_convert"><code>CONVERT()</code></a>:
<pre>
SELECT 'A' LIKE CONVERT(<em><code>blob_col</code></em> USING latin1)
           COLLATE latin1_german1_ci
           FROM <em><code>tbl_name</code></em>;
</pre>

<p><a href="#function_convert"><code>CONVERT()</code></a> и
<a href="#function_cast"><code>CAST()</code></a> могут
использоваться более широко для того, чтобы сравнить строки, которые
представлены в различных наборах символов.</p>

<p>Преобразование набора символов также полезное преобразование двоичных
строк. <a href="#function_lower"><code>LOWER()</code></a> и
<a href="#function_upper"><code>UPPER()</code></a> неэффективны,
когда применено непосредственно к двоичным строкам, потому что понятие
регистра не применяется. Чтобы выполнить смену регистра двоичной строки,
сначала преобразуйте это в недвоичную строку:
<pre>
mysql&gt; SET @str = BINARY 'New York';
mysql&gt; SELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));
+-------------+-----------------------------------+
| LOWER(@str) | LOWER(CONVERT(@str USING latin1)) |
+-------------+-----------------------------------+
| New York    | new york                          |
+-------------+-----------------------------------+
</pre>

<p>Если Вы преобразовываете индексированные столбцы, применяя
<a href="#operator_binary"><code>BINARY</code></a>,
<a href="#function_cast"><code>CAST()</code></a> или
<a href="#function_convert"><code>CONVERT()</code></a>,
MySQL, возможно, не в состоянии использовать индексирование эффективно.</p>

<p>Функции конвертации полезны для создания столбца с определенным типом в
<a href="sql.htm#create-table"><code>CREATE TABLE ... SELECT</code></a>:
<pre>
mysql&gt; CREATE TABLE new_table SELECT CAST('2000-01-01' AS DATE) AS c1;
mysql&gt; SHOW CREATE TABLE new_table\G
*************************** 1. row ***************************
 Table: new_table
Create Table: CREATE TABLE `new_table` (`c1` date DEFAULT NULL)
                     ENGINE=InnoDB DEFAULT CHARSET=latin1
</pre>

<p>Функции конвертации также могут быть полезными для сортировки столбцов
<a href="types.htm#enum"><code>ENUM</code></a> в лексическом порядке. Обычно
сортировка <a href="types.htm#enum"><code>ENUM</code></a> происходит,
используя внутренние числовые значения. Преобразование значений в
<a href="types.htm#char"><code>CHAR</code></a>
дает результаты в лексическом виде:
<pre>
SELECT <em><code>enum_col</code></em> FROM <em><code>tbl_name</code></em>
       ORDER BY CAST(<em><code>enum_col</code></em> AS CHAR);
</pre>

<p><a href="#function_cast"><code>CAST()</code></a>
также изменяет результат, если Вы используете его в качестве части более
сложного выражения, например, <a href="#function_concat">
<code>CONCAT('Date: ',CAST(NOW() AS DATE))</code></a>.</p>

<p>Для временных значений есть небольшая потребность использовать
<a href="#function_cast"><code>CAST()</code></a>, чтобы
извлечь данные в различных форматах. Вместо этого используйте такие функции:
<a href="#function_extract"><code>EXTRACT()</code></a>,
<a href="#function_date-format"><code>DATE_FORMAT()</code></a> или
<a href="#function_time-format"><code>TIME_FORMAT()</code></a>.</p>

<p>Чтобы преобразовать строку к числу, Вы обычно должны просто использовать
строковое значение в числовом контексте:
<pre>
mysql&gt; SELECT 1+'1';
    -&gt; 2
</pre>

<p>Это также истина для шестнадцатеричных и двоичных литералов, которые
являются двоичными строками по умолчанию:
<pre>
mysql&gt; SELECT X'41', X'41'+0;
    -&gt; 'A', 65
mysql&gt; SELECT b'1100001', b'1100001'+0;
    -&gt; 'a', 97
</pre>

<p>Строка, используемая в арифметической работе, преобразована в число с
плавающей запятой во время оценки выражения.</p>
<p>Число, используемое в строковом контексте, преобразовано в строку:
<pre>
mysql&gt; SELECT CONCAT('hello you ',2);
    -&gt; 'hello you 2'
</pre>

<p>MySQL поддерживает арифметику 64-bit для значений со знаком и без него.
Если Вы используете числовые операторы
(<a href="#operator_plus"><code>+</code></a> или
<a href="#operator_minus"><code>-</code></a>, например)
и один из операндов целое число без знака, результат без знака
по умолчанию. Вы можете переопределить это при использовании оператора
<code>SIGNED</code> или <code>UNSIGNED</code>, чтобы привести значение к
соответствующему 64-bit целому числу.
<pre>
mysql&gt; SELECT 1 - 2;
    -&gt; -1
mysql&gt; SELECT CAST(1 - 2 AS UNSIGNED);
    -&gt; 18446744073709551615
mysql&gt; SELECT CAST(CAST(1 - 2 AS UNSIGNED) AS SIGNED);
    -&gt; -1
</pre>

<p>Если любой операнд значение с плавающей запятой, результат значение с
плавающей запятой и не затронут предыдущим правилом. В этом контексте
значения столбцов <a href="types.htm#fixed-point-types"><code>DECIMAL</code>
</a> расценены как значения с плавающей запятой.
<pre>
mysql&gt; SELECT CAST(1 AS UNSIGNED) - 2.0;
    -&gt; -1.0
</pre>

<p>Режим SQL затрагивает результат конверсионных операций (см.
<a href="server.htm#sql-mode">раздел 6.1.8</a>). Например:</p>
<ul><li><p>Если Вы преобразовываете <span>нулевую</span> строку даты к дате,
<a href="#function_convert"><code>CONVERT()</code></a> и
<a href="#function_cast"><code>CAST()</code></a> возвратят
<code>NULL</code> с предупреждением, когда включен режим SQL
<a href="server.htm#sqlmode_no_zero_date"><code>NO_ZERO_DATE</code></a>.</li>

<li>Для вычитания целого числа, если включен режим SQL
<a href="server.htm#sqlmode_no_unsigned_subtraction"><code>
NO_UNSIGNED_SUBTRACTION</code></a>, результат вычитания со знаком, даже если
какой-либо операнд без знака.</p></li></ul>

<p>Следующий список описывает доступные функции конвертации:</p>
<ul><li><a name="operator_binary"></a><p>
<a href="#operator_binary"><code>BINARY</code></a>
<em><code>expr</code></em></p>

<p>Оператор <a href="#operator_binary"><code>BINARY</code></a>
преобразовывает выражение в двоичную строку. Обычное использование для
<a href="#operator_binary"><code>BINARY</code></a>
это вынудить сравнение строки символов быть сделанным побайтно, а не
посимвольно, в действительности становясь чувствительным к регистру.
Оператор <a href="#operator_binary"><code>BINARY</code></a>
также заставляет конечные пробелы в сравнениях быть существенными.
<pre>
mysql&gt; SELECT 'a' = 'A';
  -&gt; 1
mysql&gt; SELECT BINARY 'a' = 'A';
  -&gt; 0
mysql&gt; SELECT 'a' = 'a ';
  -&gt; 1
mysql&gt; SELECT BINARY 'a' = 'a ';
  -&gt; 0
</pre>

<p>В сравнении <a href="#operator_binary"><code>BINARY</code></a>
затрагивает всю работу: это может быть задано перед любым операндом с тем
же самым результатом.</p>

<p>В целях преобразования строковое выражение в двоичную строку,
эти конструкции эквивалентны:
<pre>
BINARY <em><code>expr</code></em>
CAST(<em><code>expr</code></em> AS BINARY)
CONVERT(<em><code>expr</code></em> USING BINARY)
</pre>

<p>Если значение буквальная строка, это может определяться как двоичная
строка, не выполняя преобразования при использовании префикса
набора символов <code>_binary</code>:
<pre>
mysql&gt; SELECT 'a' = 'A';
  -&gt; 1
mysql&gt; SELECT _binary 'a' = 'A';
  -&gt; 0
</pre>

<p>Оператор <a href="#operator_binary"><code>BINARY</code></a>
в выражениях отличается в действительности от признака <code>BINARY</code>
в символьных определениях столбца. Символьный столбец, определенный с
признаком <code>BINARY</code> имеет назначенный табличный набор символов
по умолчанию и двоичное (<code>_bin</code>) сопоставление для того набора
символов. У каждого недвоичного набора символов есть сопоставление
<code>_bin</code>. Например, двоичное сопоставление для набора символов
<code>utf8</code> <code>utf8_bin</code>, так, если табличный набор символов
по умолчанию <code>utf8</code>, эти определения двух столбцов эквивалентны:
<pre>
CHAR(10) BINARY
CHAR(10) CHARACTER SET utf8 COLLATE utf8_bin
</pre>

<p>Использование <code>CHARACTER SET binary</code> в определении
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>
заставляет столбец быть обработанным как соответствующий двоичной строковый
тип данных. Например, следующие пары определений эквивалентны:
<pre>
CHAR(10) CHARACTER SET binary
BINARY(10)

VARCHAR(10) CHARACTER SET binary
VARBINARY(10)

TEXT CHARACTER SET binary
BLOB
</pre></li>

<li><a name="function_cast"></a><p>
<a href="#function_cast"><code>CAST(<em><code>expr</code></em> AS
<em><code>type</code></em>)</code></a>
</p>

<p>Функция <a href="#function_cast"><code>CAST()</code></a>
берет выражение любого типа и производит значение результата указанного типа,
подобно <a href="#function_convert"><code>CONVERT()</code></a>.</p>
<p><a href="#function_cast"><code>CAST()</code></a>
стандартный синтаксис SQL.</p></li>

<li><a name="function_convert"></a><p>
<a href="#function_convert"><code>CONVERT(<em><code>expr</code></em>,
<em><code>type</code></em>)</code></a>,
<a href="#function_convert"><code>CONVERT(<em><code>expr</code></em>
USING <em><code>transcoding_name</code></em>)</code></a></p>

<p>Функция <a href="#function_convert"><code>CONVERT()</code></a>
берет выражение любого типа и производит значение результата указанного типа.
</p>

<p>Обсуждение синтаксиса <a href="#function_convert"><code>
CONVERT(<em><code>expr</code></em>,
<em><code>type</code></em>)</code></a> также относится к
<a href="#function_cast"><code>CAST(<em><code>expr</code></em> AS
<em><code>type</code></em>)</code></a>, которая эквивалентна.</p>

<p><a href="#function_convert"><code>CONVERT(... USING ...)</code>
</a> стандартный синтаксис SQL. Форма <a href="#function_convert">
<code>CONVERT()</code></a> без <code>USING</code> синтаксис ODBC.</p>

<p><a href="#function_convert"><code>CONVERT()</code></a> с
<code>USING</code> переводит между различными наборами символов. В MySQL
транскодирующие имена то же самое, что и  соответствующие имена набора
символов. Например, этот запрос преобразовывает строку <code>'abc'</code>
в наборе символов по умолчанию к соответствующей строке в
наборе символов <code>utf8</code>:
<pre>
SELECT CONVERT('abc' USING utf8);
</pre>

<p><a href="#function_convert"><code>CONVERT()</code></a> без
<code>USING</code> и <a href="#function_cast"><code>CAST()</code>
</a> берут выражение и значение <em><code>type</code></em>, определяющее тип
результата. Здесь такие <em><code>type</code></em> допустимы:</p>

<ul><li><p><code>BINARY[(<em><code>N</code></em>)]</code></p>
<p>Производит строку с типом данных
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>. См.
<a href="types.htm#binary-varbinary">раздел 12.4.2</a>
для описания того, как это затрагивает сравнения. Если длина
<em><code>N</code></em> задана, <code>BINARY(<em><code>N</code></em>)</code>
заставляет преобразование использовать не больше, чем
<em><code>N</code></em> байтов параметра. Значения короче, чем
<em><code>N</code></em> байтов дополнены
with <code>0x00</code> до длины <em><code>N</code></em>.</li>

<li><code>CHAR[(<em><code>N</code></em>)]
[<em><code>charset_info</code></em>]</code></p>
<p>Производит строку типа
<a href="types.htm#char"><code>CHAR</code></a>. Если длина
optional length <em><code>N</code></em> задана,
<code>CHAR(<em><code>N</code></em>)</code>
заставляет преобразование использовать не больше, чем
<em><code>N</code></em> байтов параметра. Никакого дополнения не происходит
для значений короче, чем <em><code>N</code></em>.</p>

<p>Без <em><code>charset_info</code></em> <code>CHAR</code>
производит строку с набором символов по умолчанию. Чтобы определить набор
символов явно, значения <em><code>charset_info</code></em> разрешены:</p>

<ul><li><p><code>CHARACTER SET <em><code>charset_name</code></em></code>:
Производит строку с данным набором символов.</li>
<li><code>ASCII</code>: Сокращение для <code>CHARACTER SET latin1</code>.
</li>
<li><code>UNICODE</code>: Сокращение для <code>CHARACTER SET ucs2</code>.
</p></li></ul>
<p>Во всех случаях у строки есть сопоставление
по умолчанию для набора символов.</li>

<li><code>DATE</code></p>
<p>Производит значение <a href="types.htm#datetime"><code>DATE</code></a>.
</li>

<li><code>DATETIME</code></p>
<p>Производит значение <a href="types.htm#datetime"><code>DATETIME</code>
</a>.</li>

<li><code>DECIMAL[(<em><code>M</code></em>[,<em><code>D</code></em>])]</code>
</p>
<p>Производит значение <a href="types.htm#fixed-point-types"><code>DECIMAL
</code></a>. Если дополнительные параметры
<em><code>M</code></em> и <em><code>D</code></em> заданы,
они определяют максимальное количество цифр (точность) и число цифр после
десятичной запятой (масштаб).</li>

<li><code>JSON</code></p>
<p>Производит значение <a href="types.htm#json"><code>JSON</code></a>.</li>

<li><code>NCHAR[(<em><code>N</code></em>)]</code></p>
<p>Аналогично <code>CHAR</code>, но производит строку с национальным набором
символов. См. <a href="global.htm#charset-national">раздел 11.1.3.7</a>.</p>
<p>В отличие от <code>CHAR</code>, <code>NCHAR</code> не разрешает
сопроводительную информацию о наборе символов, которая будет определена.</li>

<li><code>SIGNED [INTEGER]</code></p>
<p>Производит значение signed integer.</li>
<li><code>TIME</code></p>
<p>Производит значение <a href="types.htm#time"><code>TIME</code></a>.</li>
<li><code>UNSIGNED [INTEGER]</code></p>
<p>Производит значение unsigned integer.</p></li></ul></li></ul>

<h2><a name="xml-functions"></a>13.11. Функции XML</h2>
<a name="idm139965351424064"></a><p><b>Таблица 13.15. Функции XML</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_extractvalue"><code>
ExtractValue()</code></a></td><td>Извлекает значение из строки XML,
используя нотацию XPath</td></tr>
<tr><td scope="row"><a href="#function_updatexml"><code>UpdateXML()
</code></a></td><td>Возвратит замененный фрагмент XML
</td></tr></tbody></table>

<p>Этот раздел обсуждает XML и связанную функциональность в MySQL.</p>
<p>Возможно получить XML-отформатированный вывод из MySQL в клиентах
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a> и
<a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span></a>,
вызывая их с опцией <a href="programs.htm#option_mysql_xml"><code>--xml
</code></a>.</p>

<p>Две функции, обеспечивающие основные возможности XPath 1.0 (XML Path
Language, version 1.0) доступны. Некоторая основная информация о синтаксисе
XPath и использовании обеспечена позже в этом разделе, однако, всестороннее
обсуждение этих тем находится вне контекста этого Руководства, и Вы должны
изучить <a href="../../../www.w3.org/TR/xpath" target="_top">XML Path Language
(XPath) 1.0 standard</a> для получения нужной информации. Полезный ресурс для
плохо знакомых с XPath или кто желает получить базовые знания:
<a href="../../../www.zvon.org/xxl/XPathTutorial/default.htm" target="_top">Zvon.org
XPath Tutorial</a>, который доступен на нескольких языках.</p>

<p>Эти функции остаются разрабатываемыми. Мы продолжаем улучшать эти и другие
аспекты XML и функциональности XPath в MySQL 8.0. Вы можете обсудить их,
задать вопросы о них и получить справку от других пользователей на
<a href="../../../forums.mysql.com/list.php@44" target="_top">
MySQL XML User Forum</a>.</p>

<p>Выражения XPath, используемые с этими функциями, поддерживают
пользовательские переменные и местные сохраненные переменные программы.
Пользовательские переменные слабо проверены, локальные переменные сохраненных
программ проверены хорошо (см. также Bug #26518):</p>

<ul><li><p><b>Пользовательские переменные (слабая проверка). </b>
Переменные, использующие синтаксис <code>$@<em><code>variable_name</code>
</em></code> (то есть, пользовательские переменные), не проверены. Никакие
предупреждения или ошибки не созданы сервером, если переменная имеет
неправильный тип или не было ранее значение назначено. Это также означает,
что пользователь полностью ответственен за любые типографские ошибки, так как
никакие предупреждения не будут даны если (например)
<code>$@myvariabl</code> используется вместо <code>$@myvariable</code>.</p>

<p>Пример:
<pre>
mysql&gt; SET @xml = '&lt;a&gt;&lt;b&gt;X&lt;/b&gt;&lt;b&gt;Y&lt;/b&gt;&lt;/a&gt;';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SET @i =1, @j = 2;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @i, ExtractValue(@xml, '//b[$@i]');
+----+--------------------------------+
| @i | ExtractValue(@xml, '//b[$@i]') |
+----+--------------------------------+
| 1  | X                              |
+----+--------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT @j, ExtractValue(@xml, '//b[$@j]');
+----+--------------------------------+
| @j | ExtractValue(@xml, '//b[$@j]') |
+----+--------------------------------+
| 2  | Y                              |
+----+--------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT @k, ExtractValue(@xml, '//b[$@k]');
+------+--------------------------------+
| @k   | ExtractValue(@xml, '//b[$@k]') |
+------+--------------------------------+
| NULL |                                |
+------+--------------------------------+
1 row in set (0.00 sec)
</pre></li>

<li><b>Переменные в сохраненных программах (сильная проверка). </b>
Переменные, использующие синтаксис
<code>$<em><code>variable_name</code></em></code>
могут быть объявлены и использоваться с этими функциями, когда их называют
внутренними сохраненными программами. Такие переменные являются локальными
к сохраненной программе, в которой они определены, они сильно проверены
на тип и значение.</p>

<p>Пример:
<pre>
mysql&gt; DELIMITER |
mysql&gt; CREATE PROCEDURE myproc ()
    -&gt; BEGIN
    -&gt;   DECLARE i INT DEFAULT 1;
    -&gt;   DECLARE xml VARCHAR(25) DEFAULT '&lt;a&gt;X&lt;/a&gt;&lt;a&gt;Y&lt;/a&gt;&lt;a&gt;Z&lt;/a&gt;';
    -&gt;
    -&gt;   WHILE i &lt; 4 DO
    -&gt; SELECT xml, i, ExtractValue(xml, '//a[$i]');
    -&gt; SET i = i+1;
    -&gt;   END WHILE;
    -&gt; END |
Query OK, 0 rows affected (0.01 sec)

mysql&gt; DELIMITER ;
mysql&gt; CALL myproc();
+--------------------------+---+------------------------------+
| xml                      | i | ExtractValue(xml, '//a[$i]') |
+--------------------------+---+------------------------------+
| &lt;a&gt;X&lt;/a&gt;&lt;a&gt;Y&lt;/a&gt;&lt;a&gt;Z&lt;/a&gt; | 1 | X  |
+--------------------------+---+------------------------------+
1 row in set (0.00 sec)

+--------------------------+---+------------------------------+
| xml                      | i | ExtractValue(xml, '//a[$i]') |
+--------------------------+---+------------------------------+
| &lt;a&gt;X&lt;/a&gt;&lt;a&gt;Y&lt;/a&gt;&lt;a&gt;Z&lt;/a&gt; | 2 | Y  |
+--------------------------+---+------------------------------+
1 row in set (0.01 sec)

+--------------------------+---+------------------------------+
| xml                      | i | ExtractValue(xml, '//a[$i]') |
+--------------------------+---+------------------------------+
| &lt;a&gt;X&lt;/a&gt;&lt;a&gt;Y&lt;/a&gt;&lt;a&gt;Z&lt;/a&gt; | 3 | Z  |
+--------------------------+---+------------------------------+
1 row in set (0.01 sec)
</pre>

<p><b>Параметры. </b>Переменные использованные в выражениях XPath в
сохраненных функциях, которые передают как параметры, также
подвергаются сильной проверке.</p></li></ul>

<p>Выражения, содержащие пользовательские переменные или переменные,
локальные к сохраненным программам, должны (за исключением нотации)
соответствовать правилам для выражений XPath, содержащих переменные, как
дано в спецификации XPath 1.0.</p>

<p>Пользовательская переменная, используемая, чтобы сохранить выражение
XPath, обработана как пустая строка. Из-за этого не возможно сохранить
выражение XPath как пользовательскую переменную (Bug #32911).</p>

<ul><li><a name="function_extractvalue"></a><p>
<a href="#function_extractvalue"><code>ExtractValue(<em><code>
xml_frag</code></em>, <em><code>xpath_expr</code></em>)</code></a></p>

<p><a href="#function_extractvalue"><code>ExtractValue()</code></a>
берет два строковых параметра, фрагмент разметки XML
<em><code>xml_frag</code></em> и выражение XPath
<em><code>xpath_expr</code></em> (также именуемое <span>locator</span>).
Это возвращает текст (<code>CDATA</code>) из первого текстового узла, который
является дочерним элементом или элементом, соответствующим выражениею XPath.
</p>

<p>Использование этой функции эквивалентно выполнению соответствия, используя
<em><code>xpath_expr</code></em> после добавления <code>/text()</code>.
Другими словами, <a href="#function_extractvalue"><code>
ExtractValue('&lt;a&gt;&lt;b&gt;Sakila&lt;/b&gt;&lt;/a&gt;', '/a/b')</code>
</a> и <a href="#function_extractvalue"><code>
ExtractValue('&lt;a&gt;&lt;b&gt;Sakila&lt;/b&gt;&lt;/a&gt;', '/a/b/text()')
</code></a> приведут к тому же самому результату.</p>

<p>Если многократные соответствия найдены, контент первого дочернего
текстового узла каждого элемента соответствия возвращен (в соответствующем
порядке) как единственная, разграниченная пробелами строка.</p>

<p>Если никакой текстовый узел соответствия не найден для выражения
(включая неявное <code>/text()</code>) по любой причине, пока
<em><code>xpath_expr</code></em> верно, а <em><code>xml_frag</code></em>
состоит из элементов, которые должным образом вложены и закрыты, вернется
пустая строка. Никакое различие не сделано между соответствием на пустом
элементе и никаким соответствием вообще.</p>

<p>Если Вы должны определить, не был ли элемент соответствия найден в
in <em><code>xml_frag</code></em> или такой элемент был найден, но не
содержал дочерних текстовых узлов, Вы должны проверить результат выражения,
которое использует функция XPath <code>count()</code>. Например, оба эти
запроса возвращают пустую строку, как показано:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', '/a/b');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', '/a/b') |
+-------------------------------------+
|                                     |
+-------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', '/a/b');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', '/a/b') |
+-------------------------------------+
|                                     |
+-------------------------------------+
1 row in set (0.00 sec)
</pre>

<p>Однако, Вы можете определить, был ли фактически соответствующий
элемент, используя следующее:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', 'count(/a/b)');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b/&gt;&lt;/a&gt;', 'count(/a/b)') |
+-------------------------------------+
| 1                                   |
+-------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', 'count(/a/b)');
+-------------------------------------+
| ExtractValue('&lt;a&gt;&lt;c/&gt;&lt;/a&gt;', 'count(/a/b)') |
+-------------------------------------+
| 0                                   |
+-------------------------------------+
1 row in set (0.01 sec)
</pre>

<p><a href="#function_extractvalue"><code>ExtractValue()</code></a>
возвращает только <code>CDATA</code>, и не возвращает ни тегов, которые
могли бы содержаться в пределах соответствующего тега, ни любого их контента
(результат возвратится как <code>val1</code> в следующем примере).</p>

<pre>
mysql&gt; SELECT
  -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/a') AS val1,
  -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/a/b') AS val2,
  -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '//b') AS val3,
  -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;/a&gt;', '/b') AS val4,
  -&gt;   ExtractValue('&lt;a&gt;ccc&lt;b&gt;ddd&lt;/b&gt;&lt;b&gt;eee&lt;/b&gt;&lt;/a&gt;', '//b') AS val5;
+------+------+------+------+---------+
| val1 | val2 | val3 | val4 | val5    |
+------+------+------+------+---------+
| ccc  | ddd  | ddd  |      | ddd eee |
+------+------+------+------+---------+
</pre>

<p>Эта функция использует текущее сопоставление SQL для того, чтобы сделать
сравнения с <code>contains()</code>,
выполняя тоже самое сопоставление как другие строковые функции (такие, как
<a href="#function_concat"><code>CONCAT()</code></a>),
принимая во внимание сопоставление их аргументов, см.
<a href="global.htm#charset-collation-expressions">раздел 11.1.8.4</a> для
объяснения правил, управляющих этим поведением.</p>

<p><code>NULL</code> возвращен, если <em><code>xml_frag</code></em>
содержит элементы, которые должным образом не вложены или закрыты, и
предупреждение произведено, как показано в этом примере:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b', '//a');
+-----------------------------------+
| ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b', '//a') |
+-----------------------------------+
| NULL                              |
+-----------------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1525
Message: Incorrect XML value: 'parse error at line 1 pos 11:
   END-OF-INPUT unexpected ('&gt;' wanted)'
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b/&gt;', '//a');
+-------------------------------------+
| ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b/&gt;', '//a') |
+-------------------------------------+
| c                                   |
+-------------------------------------+
1 row in set (0.00 sec)
</pre></li>

<li><a name="function_updatexml"></a><p>
<a href="#function_updatexml"><code>UpdateXML(<em><code>xml_target
</code></em>, <em><code>xpath_expr</code></em>,
<em><code>new_xml</code></em>)</code></a></p>

<p>Эта функция заменяет единственную часть данного фрагмента XML
<em><code>xml_target</code></em> на новый <em><code>new_xml</code></em>
и затем возвращает измененный XML. Часть <em><code>xml_target</code></em>
соответствует выражению XPath <em><code>xpath_expr</code></em>.</p>

<p>Если никакое соответствие выражения <em><code>xpath_expr</code></em>
не найдено, или если многократные соответствия найдены, функция возвращает
оригинальный фрагмент <em><code>xml_target</code></em>.
Все три параметра должны быть строками.
<pre>
mysql&gt; SELECT
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a', '&lt;e&gt;fff&lt;/e&gt;') AS val1,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/b', '&lt;e&gt;fff&lt;/e&gt;') AS val2,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '//b', '&lt;e&gt;fff&lt;/e&gt;') AS val3,
    -&gt;   UpdateXML('&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a/d', '&lt;e&gt;fff&lt;/e&gt;') AS val4,
    -&gt;   UpdateXML('&lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;', '/a/d', '&lt;e&gt;fff&lt;/e&gt;') AS val5
    -&gt; \G

*************************** 1. row ***************************
val1: &lt;e&gt;fff&lt;/e&gt;
val2: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
val3: &lt;a&gt;&lt;e&gt;fff&lt;/e&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
val4: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;e&gt;fff&lt;/e&gt;&lt;/a&gt;
val5: &lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;
</pre></li></ul>

<p>Обсуждение подробно синтаксиса XPath и его использования вне контекста
этого руководства. Пожалуйста, см.
<a href="../../../www.w3.org/TR/xpath" target="_top">XML Path Language
(XPath) 1.0 specification</a>.</p>

<p>Описания и примеры некоторых основных выражений XPath:</p>
<ul><li><p><code>/<em><code>tag</code></em></code></p>
<p>Соответствует <code>&lt;<em><code>tag</code></em>/&gt;</code>, если и
только если <code>&lt;<em><code>tag</code></em>/&gt;</code> элемент корня.
</p>

<p>Пример: <code>/a</code> имеет соответствие в
<code>&lt;a&gt;&lt;b/&gt;&lt;/a&gt;</code>
потому что это соответствует наиболее удаленному (корневому) тегу. Это не
соответствует внутреннему элементу <em><code>a</code></em> в
<code>&lt;b&gt;&lt;a/&gt;&lt;/b&gt;</code> потому что в этом случае это
дочерний элемент другого элемента.</li>

<li><code>/<em><code>tag1</code></em>/<em><code>tag2</code></em></code></p>
<p>Соответствует <code>&lt;<em><code>tag2</code></em>/&gt;</code>, если и
только если это дочерний элемент <code>&lt;<em><code>tag1</code></em>/&gt;
</code> и <code>&lt;<em><code>tag1</code></em>/&gt;</code> элемент корня.</p>

<p>Пример: <code>/a/b</code> соответствует элементу
<em><code>b</code></em> в фрагменте XML
<code>&lt;a&gt;&lt;b/&gt;&lt;/a&gt;</code> потому что это дочерний элемент
элемента корня <em><code>a</code></em>. У этого нет соответствия в
<code>&lt;b&gt;&lt;a/&gt;&lt;/b&gt;</code> потому что в этом случае
<em><code>b</code></em> элемент корня (и следовательно дочерний элемент
никакого другого элемента). И при этом у выражения XPath нет соответствия в
<code>&lt;a&gt;&lt;c&gt;&lt;b/&gt;&lt;/c&gt;&lt;/a&gt;</code>: здесь
<em><code>b</code></em> потомок <em><code>a</code></em>,
но не фактический дочерний элемент <em><code>a</code></em>.</p>

<p>Эта конструкция является растяжимой к трем или больше элементам.
Например, выражение XPath <code>/a/b/c</code> соответствует элементу
<em><code>c</code></em> во фрагменте
<code>&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/a&gt;</code>.</li>

<li><code>//<em><code>tag</code></em></code></p>
<p>Соответствует любому экземпляру
<code>&lt;<em><code>tag</code></em>&gt;</code>.</p>

<p>Пример: <code>//a</code> соответствует элементу
<em><code>a</code></em> в любом из:
<code>&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/a&gt;</code>;
<code>&lt;c&gt;&lt;a&gt;&lt;b/&gt;&lt;/a&gt;&lt;/b&gt;</code>;
<code>&lt;c&gt;&lt;b&gt;&lt;a/&gt;&lt;/b&gt;&lt;/c&gt;</code>.</p>

<p><code>//</code> может быть объединен с
<code>/</code>. Например, <code>//a/b</code> соответствует
элементу <em><code>b</code></em> в любом из фрагментов
<code>&lt;a&gt;&lt;b/&gt;&lt;/a&gt;</code> или
<code>&lt;a&gt;&lt;b&gt;&lt;c/&gt;&lt;/b&gt;&lt;/a&gt;</code>.</p>

<p>  <code>//<em><code>tag</code></em></code> эквивалент
<code>/descendant-or-self::*/<em><code>tag</code></em></code>.
Распространенная ошибка состоит в том, чтобы перепутать это с
<code>/descendant-or-self::<em><code>tag</code></em></code>,
хотя последнее выражение может фактически привести к
совсем другим результатам:
<pre>
mysql&gt; SET @xml = '&lt;a&gt;&lt;b&gt;&lt;c&gt;w&lt;/c&gt;&lt;b&gt;x&lt;/b&gt;&lt;d&gt;y&lt;/d&gt;z&lt;/b&gt;&lt;/a&gt;';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @xml;
+-----------------------------------------+
| @xml                                    |
+-----------------------------------------+
| &lt;a&gt;&lt;b&gt;&lt;c&gt;w&lt;/c&gt;&lt;b&gt;x&lt;/b&gt;&lt;d&gt;y&lt;/d&gt;z&lt;/b&gt;&lt;/a&gt; |
+-----------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue(@xml, '//b[1]');
+------------------------------+
| ExtractValue(@xml, '//b[1]') |
+------------------------------+
| x z                          |
+------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue(@xml, '//b[2]');
+------------------------------+
| ExtractValue(@xml, '//b[2]') |
+------------------------------+
|                              |
+------------------------------+
1 row in set (0.01 sec)

mysql&gt; SELECT ExtractValue(@xml, '/descendant-or-self::*/b[1]');
+---------------------------------------------------+
| ExtractValue(@xml, '/descendant-or-self::*/b[1]') |
+---------------------------------------------------+
| x z                                               |
+---------------------------------------------------+
1 row in set (0.06 sec)

mysql&gt; SELECT ExtractValue(@xml, '/descendant-or-self::*/b[2]');
+---------------------------------------------------+
| ExtractValue(@xml, '/descendant-or-self::*/b[2]') |
+---------------------------------------------------+
|                                                   |
+---------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue(@xml, '/descendant-or-self::b[1]');
+-------------------------------------------------+
| ExtractValue(@xml, '/descendant-or-self::b[1]') |
+-------------------------------------------------+
| z                                               |
+-------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue(@xml, '/descendant-or-self::b[2]');
+-------------------------------------------------+
| ExtractValue(@xml, '/descendant-or-self::b[2]') |
+-------------------------------------------------+
| x                                               |
+-------------------------------------------------+
1 row in set (0.00 sec)
</pre></li>

<li><p>Оператор <code>*</code> действует как <span>подстановка</span>,
которая соответствует любому элементу. Например, выражение
<code>/*/b</code> соответствует элементу <em><code>b</code></em>
в любом из фрагментов XML <code>&lt;a&gt;&lt;b/&gt;&lt;/a&gt;</code> или
<code>&lt;c&gt;&lt;b/&gt;&lt;/c&gt;</code>. Однако, выражение не производит
соответствие во фрагменте <code>&lt;b&gt;&lt;a/&gt;&lt;/b&gt;</code>
потому что <em><code>b</code></em> должен быть дочерним элементом
некоторого другого элемента. Подстановочный знак может использоваться в любой
позиции: выражение <code>/*/b/*</code> будет соответствовать любому дочернему
элементу <em><code>b</code></em>, который является самостоятельно
не элементом корня.</li>

<li>Вы можете соответствовать любому из нескольких локаторов, используя
оператор <code>|</code> (<a href="sql.htm#union"><code>UNION</code></a>).
Например, выражение <code>//b|//c</code> соответствует всем элементам
<em><code>b</code></em> и <em><code>c</code></em> в цели XML.</li>

<li>Также возможно соответствовать элементу, основываясь на значении одного
или больше его признаков. Это сделано через использование синтаксиса
<code><em><code>tag</code></em>[@<em><code>attribute</code></em>="<em>
<code>value</code></em>"]</code>. Например, выражение
<code>//b[@id="idB"]</code> соответствует второму элементу
<em><code>b</code></em> во фрагменте
<code>&lt;a&gt;&lt;b id="idA"/&gt;&lt;c/&gt;&lt;b id="idB"/&gt;&lt;/a&gt;
</code>. Чтобы соответствовать <span><em>любому</em></span> элементу,
имеющему <code><em><code>attribute</code></em>="<em><code>value</code></em>"
</code>, используйте выражение XPath
<code>//*[<em><code>attribute</code></em>="<em><code>value</code></em>"]
</code>.</p>

<p>Чтобы фильтровать многократные значения атрибута, просто используйте
многократные пункты сравнения признака по очереди. Например, выражение
<code>//b[@c="x"][@d="y"]</code> соответствует элементу
<code>&lt;b c="x" d="y"/&gt;</code> где угодно в данном фрагменте XML.</p>

<p>Чтобы найти элементы, для которых тот же самый признак соответствует
любому из нескольких значений, Вы можете использовать много локаторов,
к которым присоединяется оператор <code>|</code>.
Например, чтобы соответствовать всем элементам
<em><code>b</code></em>, чей признак <em><code>c</code></em>
имеет значение 23 или 17, используют выражение
<code>//b[@c="23"]|//b[@c="17"]</code>. Вы можете также использовать
логический оператор <code>or</code>: <code>//b[@c="23" or @c="17"]</code>.
</p>
<p>Различие между <code>or</code> и <code>|</code> в том, что <code>or</code>
объединяет условия, а <code>|</code> наборы результатов.</p></li></ul>

<p><b>XPath Limitations. </b>
Синтаксис XPath, поддержанный этими функциями, в настоящее время
подвергается следующим ограничениям:</p>

<ul><li><p>Сравнение Nodeset-to-nodeset (такое, как
<code>'/a/b[@c=@d]'</code>) не поддержано.</li>
<li>Все стандартные операторы сравнения XPath поддержаны (Bug #22823).</li>

<li>Относительные выражения локатора решены в контексте корневого узла.
Например, рассмотрите следующий запрос и результат:
<pre>
mysql&gt; SELECT ExtractValue(
    -&gt;   '&lt;a&gt;&lt;b c="1"&gt;X&lt;/b&gt;&lt;b c="2"&gt;Y&lt;/b&gt;&lt;/a&gt;',
    -&gt;'a/b'
    -&gt; ) AS result;
+--------+
| result |
+--------+
| X Y    |
+--------+
1 row in set (0.03 sec)
</pre>
<p>В этом случае локатор <code>a/b</code> приведет к <code>/a/b</code>.</p>

<p>Относительные локаторы также поддержаны в пределах предикатов.
В следующем примере <code>d[../@c="1"]</code> решен как
<code>/a/b[@c="1"]/d</code>:
<pre>
mysql&gt; SELECT ExtractValue(
    -&gt;'&lt;a&gt;
    -&gt;  &lt;b c="1"&gt;&lt;d&gt;X&lt;/d&gt;&lt;/b&gt;
    -&gt;  &lt;b c="2"&gt;&lt;d&gt;X&lt;/d&gt;&lt;/b&gt;
    -&gt;&lt;/a&gt;',
    -&gt;'a/b/d[../@c="1"]')
    -&gt; AS result;
+--------+
| result |
+--------+
| X      |
+--------+
1 row in set (0.00 sec)
</pre></li>

<li>Префиксы локаторов с выражениями, которые оценивают как скалярные
значения, включая ссылки на переменные, литералы, числа и вызовы скалярных
функций, не разрешены, и их результаты ошибочны.</li>

<li>Оператор <code>::</code> не поддержан в комбинации с типами узла,
такими как следующие:</p>
<ul><li><p><code><em><code>axis</code></em>::comment()</code></li>
<li><code><em><code>axis</code></em>::text()</code></li>
<li><code><em><code>axis</code></em>::processing-instructions()</code></li>
<li><code><em><code>axis</code></em>::node()</code></p></li></ul>

<p>Однако, имена тестов (такие, как
<code><em><code>axis</code></em>::<em><code>name</code></em></code>
и <code><em><code>axis</code></em>::*</code>)
поддержаны, как показано в этих примерах:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b&gt;x&lt;/b&gt;&lt;c&gt;y&lt;/c&gt;&lt;/a&gt;','/a/child::b');
+-------------------------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b&gt;x&lt;/b&gt;&lt;c&gt;y&lt;/c&gt;&lt;/a&gt;','/a/child::b') |
+-------------------------------------------------------+
| x                                                     |
+-------------------------------------------------------+
1 row in set (0.02 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;&lt;b&gt;x&lt;/b&gt;&lt;c&gt;y&lt;/c&gt;&lt;/a&gt;','/a/child::*');
+-------------------------------------------------------+
| ExtractValue('&lt;a&gt;&lt;b&gt;x&lt;/b&gt;&lt;c&gt;y&lt;/c&gt;&lt;/a&gt;','/a/child::*') |
+-------------------------------------------------------+
| x y                                                   |
+-------------------------------------------------------+
1 row in set (0.01 sec)
</pre></li>

<li>Навигация <span>Up-and-down</span> не поддержана в случаях, когда
путь привел бы в элемент корня. Таким образом, Вы не можете использовать
выражения, которые соответствуют на потомках предков данного элемента, где
один или больше предков текущего элемента также предок элемента
корня (см. Bug #16321).</li>

<li>Следующие функции XPath не поддержаны или имеют проблемы:</p>
<ul><li><p><code>id()</code></li>
<li><code>lang()</code></li>
<li><code>local-name()</code></li>
<li><code>name()</code></li>
<li><code>namespace-uri()</code></li>
<li><code>normalize-space()</code></li>
<li><code>starts-with()</code></li>
<li><code>string()</code></li>
<li><code>substring-after()</code></li>
<li><code>substring-before()</code></li>
<li><code>translate()</code></p></li></ul></li>

<li><p>Следующие axes не поддержаны:</p>
<ul><li><p><code>following-sibling</code></li>
<li><code>following</code></li>
<li><code>preceding-sibling</code></li>
<li><code>preceding</code></p></li></ul></li></ul>

<p>Выражения XPath, переданные как параметры в
<a href="#function_extractvalue"><code>ExtractValue()</code></a> и
<a href="#function_updatexml"><code>UpdateXML()</code></a>,
могут содержать символ двоеточия (<code>:</code>) в селекторах элемента,
который включает их с разметкой, использующей нотацию пространств
имен XML. Например:
<pre>
mysql&gt; SET @xml = '&lt;a&gt;111&lt;b:c&gt;222&lt;d&gt;333&lt;/d&gt;&lt;e:f&gt;444&lt;/e:f&gt;&lt;/b:c&gt;&lt;/a&gt;';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT ExtractValue(@xml, '//e:f');
+-----------------------------+
| ExtractValue(@xml, '//e:f') |
+-----------------------------+
| 444                         |
+-----------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT UpdateXML(@xml, '//b:c', '&lt;g:h&gt;555&lt;/g:h&gt;');
+--------------------------------------------+
| UpdateXML(@xml, '//b:c', '&lt;g:h&gt;555&lt;/g:h&gt;') |
+--------------------------------------------+
| &lt;a&gt;111&lt;g:h&gt;555&lt;/g:h&gt;&lt;/a&gt;   |
+--------------------------------------------+
1 row in set (0.00 sec)
</pre>

<p>Это подобно в некотором отношении тому, что разрешено
<a href="../../../xalan.apache.org/default.htm" target="_top">Apache Xalan</a> и
и некоторыми другими анализаторами, и намного проще, чем требование
деклараций пространства имен или использования функций
<code>namespace-uri()</code> и <code>local-name()</code>.</p>

<p><b>Обработка ошибок. </b>Для <a href="#function_extractvalue">
<code>ExtractValue()</code></a> и
<a href="#function_updatexml"><code>UpdateXML()</code></a>
используемый локатор XPath должен быть допустимым, и XML, который будет
искаться, должен состоять из элементов, которые должным образом вложены и
закрыты. Если локатор недопустим, ошибка произведена:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b/&gt;', '/&amp;a');
<span>ERROR 1105 (HY000): XPATH syntax error: '&amp;a'</span>
</pre>

<p>Если <em><code>xml_frag</code></em> не состоит из элементов, которые
должным образом вложены и закрыты, <code>NULL</code>
возвращен и предупреждение произведено, как показано в этом примере:
<pre>
mysql&gt; SELECT ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b', '//a');
+-----------------------------------+
| ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b', '//a') |
+-----------------------------------+
| NULL                              |
+-----------------------------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1525
Message: Incorrect XML value: 'parse error at line 1 pos 11:
   END-OF-INPUT unexpected ('&gt;' wanted)'
1 row in set (0.00 sec)

mysql&gt; SELECT ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b/&gt;', '//a');
+-------------------------------------+
| ExtractValue('&lt;a&gt;c&lt;/a&gt;&lt;b/&gt;', '//a') |
+-------------------------------------+
| c                                   |
+-------------------------------------+
1 row in set (0.00 sec)
</pre>

<p>Заменяющий XML, используемый в качестве третьего параметра
<a href="#function_updatexml"><code>UpdateXML()</code></a>
<span><em>не</em></span> проверен, чтобы определить, состоит ли это
исключительно из элементов, которые должным образом вложены и закрыты.</p>

<p><b>Инъекция XPath. </b>Инъекция кода происходит, когда вредоносный код
введен в систему, чтобы получить несанкционированный доступ к привилегиям и
данным. Это основано на эксплуатации предположений, сделанных разработчиками
о типе и контенте ввода данных от пользователей.
XPath не исключение в этом отношении.</p>

<p>Общий сценарий, в котором это может произойти: приложение обрабатывает
авторизацию на основе комбинации имени для входа в систему и пароля, которые
берутся из файла XML, используя выражение XPath наподобие:
<pre>
//user[login/text()='neapolitan' and password/text()='1c3cr34m']/attribute::id
</pre>

<p>Это XPath-эквивалент SQL-запроса:
<pre>
SELECT id FROM users WHERE login='neapolitan' AND password='1c3cr34m';
</pre>

<p>Приложение PHP, использующее XPath, могло бы обработать процесс
входа в систему так:
<pre>
&lt;?php
  $file =   "users.xml";
  $login=   $POST["login"];
  $password =   $POST["password"];
  $xpath = "//user[login/text()=$login and password/text()=$password]/attribute::id";

  if (file_exists($file)) {
     $xml = simplexml_load_file($file);
     if ($result = $xml-&gt;xpath($xpath))
        echo "You are now logged in as user $result[0].";
     else echo "Invalid login name or password.";
  }
  else exit("Failed to open $file.");
?&gt;
</pre>

<p>Никакие проверки не выполнены на вводе. Это означает, что пользователь
может ввести <code>' or 1=1</code> для имени для входа в систему и для
пароля, в итоге <code>$xpath</code> будет оценен как показано здесь:
<pre>
//user[login/text()='' or 1=1 and password/text()='' or 1=1]/attribute::id
</pre>

<p>Так как выражение в квадратных скобках всегда оценивается как
<code>true</code>, это эффективно то же самое, как будто признак
<code>id</code> каждого элемента <code>user</code>
соответствет в XML-документе:
<pre>
//user/attribute::id
</pre>

<p>Один путь, которым можно обойти это особое нападение: просто заключить
имена переменной в кавычки, которые будут интерполированы в определении
<code>$xpath</code>, принудительно конвертируя значение из Web-формы в строку:
<pre>
$xpath = "//user[login/text()='$login' and password/text()='$password']/attribute::id";
</pre>

<p>Это та же самая стратегия, которая часто рекомендуется для того, чтобы
предотвратить атаки с использованием кода SQL. Вообще, методы, которым Вы
должны следовать для того, чтобы предотвратить нападения инъекции XPath,
являются теми же самыми, что касаются предотвращения инъекции SQL:</p>

<ul><li><p>Никогда не принимайте непроверенные данные от
пользователей в Вашем приложении.</li>
<li>Проверьте все представленные пользователем данные на тип,
отклоните или преобразуйте данные, которые имеют неправильный тип.</li>

<li>Проверьте числовые данные на выход из значений диапазона:
усеките, округлите или отклоните значения, которые вне диапазона.
Тестируйте строки для выявления недопустимых символов и обрезайте их или
отклоняйте ввод, их содержащий.</li>

<li>Не выводите явные сообщения об ошибках, которые могли бы предоставить
неправомочному пользователю подсказки, которые могут использоваться, чтобы
поставить под угрозу систему, зарегистрируйте их в файле или таблице базы
данных вместо этого.</p></li></ul>

<p>Так же, как атаки с использованием кода на SQL могут использоваться, чтобы
получить информацию о схемах базы данных, так может использоваться и инъекция
XPath: <a href="../../../www.packetstormsecurity.org/papers/bypass/Blind_XPath_Injection_20040518.pdf"
target="_top">Blind XPath Injection</a> (PDF file, 46KB).</p>

<p>Также важно проверить вывод, отсылаемый назад к клиенту. Рассмотрите то,
что может произойти, когда мы используем MySQL
<a href="#function_extractvalue"><code>ExtractValue()</code></a>:
<pre>
mysql&gt; SELECT ExtractValue(LOAD_FILE('users.xml'),
    -&gt; '//user[login/text()="" or 1=1 and password/text()="" or 1=1]/attribute::id'
    -&gt; ) AS id;
+-------------------------------+
| id                            |
+-------------------------------+
| 00327 13579 02403 42354 28570 |
+-------------------------------+
1 row in set (0.01 sec)
</pre>

<p>Поскольку <a href="#function_extractvalue"><code>ExtractValue()
</code></a> возвращает многократные соответствия как разграниченную одинарным
интервалом строку, это нападение инъекции обеспечивает передачу всех
допустимых ID в пределах <code>users.xml</code> пользователю как единственную
строка вывода. Как дополнительная гарантия, Вы должны также проверить вывод
прежде, чем возвратить это пользователю. Вот простой пример:
<pre>
mysql&gt; SELECT @id = ExtractValue(
    -&gt; LOAD_FILE('users.xml'),
    -&gt; '//user[login/text()="" or 1=1 and password/text()="" or 1=1]/attribute::id'
    -&gt; );
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT IF (
    -&gt; INSTR(@id, ' ') = 0, @id,
    -&gt; 'Unable to retrieve user ID') AS singleID;
+----------------------------+
| singleID                   |
+----------------------------+
| Unable to retrieve user ID |
+----------------------------+
1 row in set (0.00 sec)
</pre>

<p>Вообще, основные направления для того, чтобы возвратить данные
пользователям надежно являются теми же самыми, что касаются принятия ввода
данных от пользователя. Им можно подвести итог так:</p>

<ul><li><p>Всегда тестируйте исходящие данные для проверки
типа и допустимых значений.</li>
<li>Никогда не разрешайте неправомочным пользователям рассматривать сообщения
об ошибках, которые могли бы предоставить информацию о приложении.
</p></li></ul>

<h2><a name="bit-functions"></a>13.12. Битовые функции и операторы</h2>
<a name="idm139965351092160"></a><p><b>Таблица 13.16.
Битовые функции и операторы</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_bit-count"><code>
BIT_COUNT()</code></a></td><td>Возвратить число битов, которые установлены
</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-and"><code>&amp;
</code></a></td><td>Битовое AND</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-invert"><code>~
</code></a></td><td>Битовая инверсия</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-or"><code>|</code>
</a></td><td>Битовое OR</td></tr>
<tr><td scope="row"><a href="#operator_bitwise-xor"><code>^</code>
</a></td><td>Битовое XOR</td></tr>
<tr><td scope="row"><a href="#operator_left-shift"><code>&lt;&lt;
</code></a></td><td>Сдвиг влево</td></tr>
<tr><td scope="row"><a href="#operator_right-shift"><code>&gt;&gt;
</code></a></td><td>Сдвиг вправо</td></tr></tbody></table>

<p>Разрядные функции и операторы включают
<a href="#function_bit-count"><code>BIT_COUNT()</code></a>,
<a href="#function_bit-and"><code>BIT_AND()</code></a>,
<a href="#function_bit-or"><code>BIT_OR()</code></a>,
<a href="#function_bit-xor"><code>BIT_XOR()</code></a>,
<a href="#operator_bitwise-and"><code>&amp;</code></a>,
<a href="#operator_bitwise-or"><code>|</code></a>,
<a href="#operator_bitwise-xor"><code>^</code></a>,
<a href="#operator_bitwise-invert"><code>~</code></a>,
<a href="#operator_left-shift"><code>&lt;&lt;</code></a> и
<a href="#operator_right-shift"><code>&gt;&gt;</code></a>.
<a href="#function_bit-and"><code>BIT_AND()</code></a>,
<a href="#function_bit-or"><code>BIT_OR()</code></a> и
<a href="#function_bit-xor"><code>BIT_XOR()</code></a> это
совокупные функции, описанные в <a href="#group-by-functions">
разделе 13.19.1</a>. До MySQL 8.0 разрядные функции и операторы требовали
параметры <a href="types.htm#integer-types"><code>BIGINT</code></a> (64-bit
integer) и возвращали значения <a href="types.htm#integer-types"><code>BIGINT
</code></a>. Не-<a href="types.htm#integer-types"><code>BIGINT</code></a>
параметры были преобразованы в <a href="types.htm#integer-types"><code>BIGINT
</code></a> до выполнения работы, и усечение могло произойти.</p>

<p>В MySQL 8.0 разрядные функции и операторы разрешают двоичные строковые
параметры типа <a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> и
<a href="types.htm#blob"><code>BLOB</code></a>
и возвращают значение подобного типа, что позволяет им взять параметры и
произвести возвращаемые значения больше, чем 64 бита.</p>

<p>Значение этого изменения в поведении: битовые операции на двоичных
параметрах могли бы привести к различному результату в MySQL 8.0 и 5.7. Для
получения дополнительной информации об изменении, включая то, как
подготовиться в MySQL 5.7 для потенциальных несовместимостей между MySQL 5.7
и 8.0 см. <a href="../../../dev.mysql.com/doc/refman/5.7/en/bit-funct.htm"
target="_top">Bit Functions and Operators</a> в
<a href="../../../dev.mysql.com/doc/refman/5.7/en/default.htm" target="_top">
MySQL 5.7 Reference Manual</a>.</p>

<p>Следующий список описывает доступные разрядные функции и операторы:</p>
<ul><li><a name="operator_bitwise-or"></a><p>
<a href="#operator_bitwise-or"><code>|</code></a></p>

<p>Поразрядный OR:
<pre>
mysql&gt; SELECT 29 | 15;
    -&gt; 31
</pre>
<p>Результат unsigned 64-bit integer.</p></li>

<li><a name="operator_bitwise-and"></a><p>
<a href="#operator_bitwise-and"><code>&amp;</code></a></p>
<p>Поразрядный AND:
<pre>
mysql&gt; SELECT 29 &amp; 15;
    -&gt; 13
</pre>
<p>Результат unsigned 64-bit integer.</p></li>

<li><a name="operator_bitwise-xor"></a><p>
<a href="#operator_bitwise-xor"><code>^</code></a></p>
<p>Поразрядный XOR:
<pre>
mysql&gt; SELECT 1 ^ 1;
  -&gt; 0
mysql&gt; SELECT 1 ^ 0;
  -&gt; 1
mysql&gt; SELECT 11 ^ 3;
  -&gt; 8
</pre>
<p>Результат unsigned 64-bit integer.</p></li>

<li><a name="operator_left-shift"></a><p>
<a href="#operator_left-shift"><code>&lt;&lt;</code></a></p>
<p>Смещает longlong число (<a href="types.htm#integer-types"><code>BIGINT
</code></a>) влево.
<pre>
mysql&gt; SELECT 1 &lt;&lt; 2;
  -&gt; 4
</pre>

<p>Результат unsigned 64-bit integer. Значение является усеченным к 64 битам.
В частности, если количество сдвига больше или равно ширине числа unsigned
64-bit, результатом будет 0.</p></li>

<li><a name="operator_right-shift"></a><p>
<a href="#operator_right-shift"><code>&gt;&gt;</code></a></p>
<p>Смещает longlong число (<a href="types.htm#integer-types"><code>BIGINT
</code></a>) вправо.
<pre>
mysql&gt; SELECT 4 &gt;&gt; 2;
  -&gt; 1
</pre>

<p>Результат unsigned 64-bit integer. Значение является усеченным к 64 битам.
В частности, если количество сдвига больше или равно ширине числа unsigned
64-bit, результатом будет 0.</p></li>

<li><a name="operator_bitwise-invert"></a><p>
<a href="#operator_bitwise-invert"><code>~</code></a></p>
<p>Инвертирует все биты.
<pre>
mysql&gt; SELECT 5 &amp; ~1;
  -&gt; 4
</pre>
<p>Результат unsigned 64-bit integer.</p></li>

<li><a name="function_bit-count"></a><p>
<a href="#function_bit-count"><code>BIT_COUNT(<em><code>N</code>
</em>)</code></a></p>

<p>Возвращает число битов, которые установлены в параметре
<em><code>N</code></em>.
<pre>
mysql&gt; SELECT BIT_COUNT(29), BIT_COUNT(b'101010');
    -&gt; 4, 3
</pre></li></ul>

<h2><a name="encryption-functions"></a>13.13. Функции шифрования и сжатия</h2>
<p><b>Таблица 13.17. Функции шифрования и сжатия</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_aes-decrypt"><code>
AES_DECRYPT()</code></a></td><td>Дешифрует с использованием AES</td></tr>
<tr><td scope="row"><a href="#function_aes-encrypt"><code>
AES_ENCRYPT()</code></a></td><td>Шифрует с использованием AES</td></tr>
<tr><td scope="row"><a href="#function_compress"><code>COMPRESS()
</code></a></td><td>Возвращает результат как двоичную строку</td></tr>
<tr><td scope="row"><a href="#function_decode"><code>DECODE()</code>
</a></td><td>Декодирует строку из ENCODE()</td></tr>
<tr><td scope="row"><a href="#function_des-decrypt"><code>
DES_DECRYPT()</code></a></td><td>Дешифрует строку</td></tr>
<tr><td scope="row"><a href="#function_des-encrypt"><code>
DES_ENCRYPT()</code></a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#function_encode"><code>ENCODE()</code>
</a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#function_encrypt"><code>ENCRYPT()
</code></a></td><td>Шифрует строку</td></tr>
<tr><td scope="row"><a href="#function_md5"><code>MD5()</code></a>
</td><td>Вычисляет хэш MD5</td></tr>
<tr><td scope="row"><a href="#function_password"><code>PASSWORD()
</code></a></td><td>Вычислит и возвратит строку пароля</td></tr>
<tr><td scope="row"><a href="#function_random-bytes"><code>
RANDOM_BYTES()</code></a></td><td>Возвратит случайный вектор байта</td></tr>
<tr><td scope="row"><a href="#function_sha1"><code>SHA1()</code>,
<code>SHA()</code></a></td><td>SHA-1 160-bit хэш</td></tr>
<tr><td scope="row"><a href="#function_sha2"><code>SHA2()</code></a>
</td><td>Хэш SHA-2</td></tr>
<tr><td scope="row"><a href="#function_uncompress"><code>
UNCOMPRESS()</code></a></td><td>Распаковывает сжатую строку</td></tr>
<tr><td scope="row"><a href="#function_uncompressed-length"><code>
UNCOMPRESSED_LENGTH()</code></a></td><td>Возвратит длину строки перед сжатием
</td></tr>
<tr><td scope="row"><a href="#function_validate-password-strength">
<code>VALIDATE_PASSWORD_STRENGTH()</code></a></td><td>Определяет силу пароля
</td></tr></tbody></table>

<p>Многие функции шифрования и сжатия возвращают строки в которых результат
мог бы содержать произвольные значения байта. Если Вы хотите сохранить эти
результаты, используйте столбец с типом двоичной строки
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> или
<a href="types.htm#blob"><code>BLOB</code></a>. Это позволит избежать
потенциальных проблем с удалением конечного пробела или преобразованием
набора символов, которое изменило бы значения данных, которые могут
произойти, если Вы используете недвоичной строковый тип данных
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>).</p>

<p>Некоторое функции шифрования возвращают строки символов ASCII:
<a href="#function_md5"><code>MD5()</code></a>,
<a href="#function_password"><code>PASSWORD()</code></a>,
<a href="#function_sha1"><code>SHA()</code></a>,
<a href="#function_sha1"><code>SHA1()</code></a>,
<a href="#function_sha2"><code>SHA2()</code></a>.
Их возвращаемое значение - недвоичная строка, у которой есть набор символов
и сопоставление, определенные системными переменными
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_collation_connection"><code>
collation_connection</code></a>.</p>

<p>Для ситуаций, в которых функции, подобные <code>MD5()</code> или
<code>SHA1()</code>, вернут строку шестнадцатеричных цифр как двоичную,
возвращаемое значение не может быть преобразовано в верхний регистр или
сравнено нечувствительным к регистру способом. Вы должны преобразовать
значение в недвоичную строку. См. обсуждение двоичного строкового
преобразования в <a href="#cast-functions">разделе 13.10</a>.</p>

<p>Если приложение хранит значения функции
<a href="#function_md5"><code>MD5()</code></a> или
<a href="#function_sha1"><code>SHA1()</code></a>, которые
возвращают строку шестнадцатеричных цифр, более эффективное хранение и
сравнения могут быть получены, преобразовывая  шестнадцатеричное
представление в двоичное, используя
<a href="#function_unhex"><code>UNHEX()</code></a> и
сохраняя результат в столбце <a href="types.htm#binary-varbinary"><code>
BINARY(<em><code>N</code></em>)</code></a>.
Каждая пара шестнадцатеричных цифр требует одного байта в двоичной форме,
таким образом, значение <em><code>N</code></em> зависит от длины строки.
<em><code>N</code></em> 16 для
<a href="#function_md5"><code>MD5()</code></a> и 20 для
<a href="#function_sha1"><code>SHA1()</code></a>. Для
<a href="#function_sha2"><code>SHA2()</code></a>
<em><code>N</code></em> от 28 до 32в зависимости от параметра, определяющего
желаемую длину результата в битах.</p>

<p>Накладные расходы для хранения шестнадцатеричных строк в столбце
<a href="types.htm#char"><code>CHAR</code></a> от 2 до 8 раз, если значение
сохранено в столбце, который использует набор символов
<code>utf8</code> (где каждый символ использует 4 байта). Хранение строки
также приводит к более медленным сравнениям из-за больших значений и
потребности принять правила сопоставления набора символов во внимание.</p>

<p>Предположите, что приложение хранит значение
<a href="#function_md5"><code>MD5()</code></a> в столбце
<a href="types.htm#char"><code>CHAR(32)</code></a>:
<pre>
CREATE TABLE md5_tbl (md5_val CHAR(32), ...);
INSERT INTO md5_tbl (md5_val, ...) VALUES(MD5('abcdef'), ...);
</pre>

<p>Чтобы преобразовать строки в более компактную форму, измените приложение,
чтобы использовать <a href="#function_unhex"><code>UNHEX()</code>
</a> и <a href="types.htm#binary-varbinary"><code>BINARY(16)</code></a>:
<pre>
CREATE TABLE md5_tbl (md5_val BINARY(16), ...);
INSERT INTO md5_tbl (md5_val, ...) VALUES(UNHEX(MD5('abcdef')), ...);
</pre>

<p>Приложения должны быть подготовлены обработать очень редкий случай,
когда хеширующая функция производит то же самое значение для двух различных
входных значений. Один способ сделать обнаруживаемые столкновения состоит в
том, чтобы сделать столбец хеша первичным ключом.</p>

<p>Пароли или другие чувствительные значения, поставляемые как параметры
функциям шифрования, посылают открытым текстом серверу MySQL, если соединение
SSL не используется. Кроме того, такие значения появятся в любых журналах
MySQL. Чтобы избежать этих типов проблем, приложения могут зашифровать
чувствительные значения на стороне клиента прежде, чем послать их серверу. Те
же самые соображения относятся к ключам шифрования. Чтобы избежать выставлять
их, приложения могут использовать хранимые процедуры, чтобы зашифровать и
дешифровать значения на стороне сервера.</p>

<ul><li><a name="function_aes-decrypt"></a><p>
<a href="#function_aes-decrypt"><code>AES_DECRYPT(<em>
<code>crypt_str</code></em>,<em><code>key_str</code></em>[,
<em><code>init_vector</code></em>])</code></a></p>

<p>Эта функция дешифрует данные, используя официальный алгоритм AES (Advanced
Encryption Standard).</p>
<p>Дополнительный векторный параметр инициализации
<em><code>init_vector</code></em>. Запросы, применяющие
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>,
опасны для репликации на основе запросов и не могут быть
сохранены в кэше запроса.</p></li>

<li><a name="function_aes-encrypt"></a><p>
<a href="#function_aes-encrypt"><code>AES_ENCRYPT(<em><code>str
</code></em>,<em><code>key_str</code></em>[,<em><code>init_vector</code>
</em>])</code></a></p>

<p><a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>
реализуют шифрование и дешифрование данных, используя официальный алгоритм
AES (Advanced Encryption Standard), ранее известный как
<span>Rijndael</span>. Стандарт AES разрешает различные длины ключа. По
умолчанию эти функции осуществляют AES с 128-битной длиной ключа.
Длины ключа 196 или 256 битов могут использоваться, как описано позже.
Длина ключа компромисс между скоростью работы и безопасностью.</p>

<p><a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a>
шифрует строку <em><code>str</code></em> с использованием ключевой строки
<em><code>key_str</code></em> и возвращает двоичную строку, содержащую
зашифрованный вывод. <a href="#function_aes-decrypt"><code>
AES_DECRYPT()</code></a> дешифрует зашифрованную строку
<em><code>crypt_str</code></em> с использованием ключевой строки
<em><code>key_str</code></em> и возвращает оригинальную строку открытого
текста. Если любой функциональный параметр <code>NULL</code>,
функция вернет <code>NULL</code>.</p>

<p>Параметры <em><code>str</code></em> и <em><code>crypt_str</code></em>
могут быть любой длины, дополнение автоматически добавлено к
<em><code>str</code></em>, чтобы это было кратным числом блоков,
как требуется основанными на блоке алгоритмами, такими как AES.
Это дополнение автоматически удалено
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>.
Длина <em><code>crypt_str</code></em> может быть вычислена,
используя эту формулу:
<pre>
16 * (trunc(<em><code>string_length</code></em> / 16) + 1)
</pre>

<p>Для длины ключа 128 бит самый безопасный способ передать ключ в
<em><code>key_str</code></em> это создать действительно случайную 128-битную
последовательность и передать это как двоичное значение. Например:
<pre>
INSERT INTO t VALUES (1,AES_ENCRYPT('text',
       UNHEX('F3229A0B371ED2D9441B830D21A390C3')));
</pre>

<p>Пароль может использоваться, чтобы произвести ключ AES,
хешируя пароль. Например:
<pre>
INSERT INTO t VALUES (1,AES_ENCRYPT('text',
       UNHEX(SHA2('My secret passphrase',512))));
</pre>

<p>Не передавайте пароль непосредственно к
<em><code>crypt_str</code></em>, хешируйте это сначала. Предыдущие версии
этой документации предложили прежний подход, но это больше не рекомендуется,
поскольку примеры, показанные здесь, более безопасны.</p>

<p>Если <a href="#function_aes-decrypt"><code>AES_DECRYPT()</code>
</a> обнаруживает недопустимые данные или неправильное дополнение, она
возвращает <code>NULL</code>. Однако, возможно для
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>
возвратить не <code>NULL</code>, если входные данные или ключ недопустимы.
</p>

<p><a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>
допускают управление режимом блочного шифрования и берут дополнительный
векторный параметр инициализации <em><code>init_vector</code></em>:</p>

<ul><li><p>Системная переменная
<a href="server.htm#sysvar_block_encryption_mode"><code>block_encryption_mode
</code></a> управляет режимом для основанных на блоке алгоритмов шифрования.
Ее значение по умолчанию <code>aes-128-ecb</code>, которое показывает
шифрование, используя длину ключа 128 битов и режим ECB. Для описания
разрешенных значений этой переменной см.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</li>

<li>Дополнительный параметр <em><code>init_vector</code></em>
обеспечивает вектор инициализации для режимов блочного шифрования,
которые требуют этого.</p></li></ul>

<p>Для режимов, которые требуют дополнительного параметра
<em><code>init_vector</code></em>, это должны быть 16 байт или больше (байты
сверх 16 проигнорированы). Ошибка происходит, если
<em><code>init_vector</code></em> отсутствует.</p>
<p>Для режимов, которые не требуют <em><code>init_vector</code></em>, это
проигнорировано, и предупреждение произведено, если это определено.</p>

<p>Случайная строка байт, чтобы использовать для вектора инициализации, может
быть произведена вызовом
<a href="#function_random-bytes"><code>RANDOM_BYTES(16)</code></a>.
Для режимов шифрования, которые требуют вектор инициализации, тот же самый
вектор должен использоваться для шифрования и дешифрования.
<pre>
mysql&gt; SET block_encryption_mode = 'aes-256-cbc';
mysql&gt; SET @key_str = SHA2('My secret passphrase',512);
mysql&gt; SET @init_vector = RANDOM_BYTES(16);
mysql&gt; SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);
mysql&gt; SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector);
+-----------------------------------------------+
| AES_DECRYPT(@crypt_str,@key_str,@init_vector) |
+-----------------------------------------------+
| text                                          |
+-----------------------------------------------+
</pre>

<p>Следующая таблица приводит каждый разрешенный режим блочного шифрования,
библиотеки SSL, которые поддерживают это, и требуется ли
векторный параметр инициализации.</p>

<table border="1">
<thead><tr><th scope="col">Режим блочного шифрования</th>
<th scope="col">Поддерживается библиотеками SSL</th>
<th scope="col">Нужен ли вектор инициализации?</th></tr></thead>
<tbody><tr><td scope="row">ECB</td><td>OpenSSL, yaSSL</td><td>Нет</td></tr>
<tr><td scope="row">CBC</td><td>OpenSSL, yaSSL</td><td>Да</td></tr>
<tr><td scope="row">CFB1</td><td>OpenSSL</td><td>Да</td></tr>
<tr><td scope="row">CFB8</td><td>OpenSSL</td><td>Да</td></tr>
<tr><td scope="row">CFB128</td><td>OpenSSL</td><td>Да</td></tr>
<tr><td scope="row">OFB</td><td>OpenSSL</td><td>Да</td></tr></tbody></table>

<p>Запросы, использующие
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> или
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>
опасны для основанной на запросах репликации и не могут быть
сохранены в кэше запроса.</p></li>

<li><a name="function_compress"></a><p>
<a href="#function_compress"><code>COMPRESS(<em><code>
string_to_compress</code></em>)</code></a></p>

<p>Сжимает строку и возвращает результат как двоичную строку.
Эта функция требует, чтобы MySQL был собран с библиотекой сжатия такой, как
<code>zlib</code>. Иначе, возвращаемое значение всегда <code>NULL</code>.
Сжатая строка может быть расжата
<a href="#function_uncompress"><code>UNCOMPRESS()</code></a>.
<pre>
mysql&gt; SELECT LENGTH(COMPRESS(REPEAT('a',1000)));
  -&gt; 21
mysql&gt; SELECT LENGTH(COMPRESS(''));
  -&gt; 0
mysql&gt; SELECT LENGTH(COMPRESS('a'));
  -&gt; 13
mysql&gt; SELECT LENGTH(COMPRESS(REPEAT('a',16)));
  -&gt; 15
</pre>

<p>Сжатое строковое содержание сохранено следующим путем:</p>
<ul><li><p>Пустые строки сохранены как пустые строки.</li>
<li>Непустые строки сохранены как 4-байтовая длина несжатой строки (младший
байт сначала), сопровождаемая сжатой строкой. Если строка заканчивается
пробелом, дополнительный символ <code>.</code> добавлен, чтобы избежать
проблемы с обрезкой концевых пробелов, если результат будет сохранен в
столбце <a href="types.htm#char"><code>CHAR</code></a> или
<a href="types.htm#char"><code>VARCHAR</code></a>. Однако, использование
недвоичных строковых типов данных <a href="types.htm#char"><code>CHAR</code>
</a> или <a href="types.htm#char"><code>VARCHAR</code></a>, чтобы
сохранить сжатые строки не рекомендуется потому, что преобразование набора
символов может произойти. Используйте двоичной строковый столбец
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> или
<a href="types.htm#blob"><code>BLOB</code></a> вместо этого.
</p></li></ul></li>

<li><a name="function_decode"></a><p>
<a href="#function_decode"><code>DECODE(<em><code>crypt_str</code>
</em>,<em><code>pass_str</code></em>)</code></a></p>

<p><a href="#function_decode"><code>DECODE()</code></a>
дешифрует зашифрованную строку <em><code>crypt_str</code></em> с
использованием <em><code>pass_str</code></em> как пароля.
<em><code>crypt_str</code></em> должна быть строкой, возвращенной из
<a href="#function_encode"><code>ENCODE()</code></a>.</p>

<p>Функции <a href="#function_encode"><code>ENCODE()</code></a> и
<a href="#function_decode"><code>DECODE()</code></a> устарели в
MySQL 8.0, будут удалены в будущем выпуске MySQL и больше не должны
использоваться. Рассмотрите использование вместо них
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>.
</p></li>

<li><a name="function_des-decrypt"></a><p>
<a href="#function_des-decrypt"><code>DES_DECRYPT(<em><code>
crypt_str</code></em>[,<em><code>key_str</code></em>])</code></a></p>

<p>Дешифрует строку, зашифрованную с помощью
<a href="#function_des-encrypt"><code>DES_ENCRYPT()</code></a>.
Если ошибка происходит, эта функция возвращает <code>NULL</code>.</p>

<p>Эта функция работает, только если MySQL был сконфигурирован с поддержкой
SSL. См. <a href="security.html#secure-connections">раздел 7.4</a>.</p>
<p>Если нет параметра <em><code>key_str</code></em>,
<a href="#function_des-decrypt"><code>DES_DECRYPT()</code></a>
исследует первый байт зашифрованной строки, чтобы определить ключевое число
DES, которое использовалось, чтобы зашифровать оригинальную строку, затем
читает ключ из ключевого файла DES, чтобы дешифровать сообщение. Для того,
чтобы работать, пользователь должен иметь привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>.
Ключевой файл может быть определен с помощью опции сервера
<a href="server.htm#option_mysqld_des-key-file"><code>--des-key-file
</code></a>.</p>

<p>Если Вы передаете этой функции параметр <em><code>key_str</code></em>,
эта строка используется в качестве ключа, чтобы дешифровать сообщение.</p>
<p>Если параметр <em><code>crypt_str</code></em> не зашифрованная строка,
MySQL возвращает <em><code>crypt_str</code></em>.</p>

<p>Функции <a href="#function_des-encrypt"><code>DES_ENCRYPT()
</code></a> и <a href="#function_des-decrypt"><code>DES_DECRYPT()
</code></a> устарели, будут удалены в будущем выпуске MySQL и больше не
должны использоваться. Рассмотрите использование вместо них
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>.
</p></li>

<li><a name="function_des-encrypt"></a><p>
<a href="#function_des-encrypt"><code>DES_ENCRYPT(<em><code>str
</code></em>[,{<em><code>key_num</code></em>|<em><code>key_str</code></em>}])
</code></a></p>

<p>Шифрует строку с данным ключом, используя алгоритм Triple-DES.</p>
<p>Эта функция работает, только если MySQL был сконфигурирован с поддержкой
SSL. См. <a href="security.html#secure-connections">раздел 7.4</a>.</p>

<p>Ключ шифрования выбирается на основании второго параметра
<a href="#function_des-encrypt"><code>DES_ENCRYPT()</code></a>,
если он задан. Без параметра используется первый ключ из ключевого файла
DES. С параметром <em><code>key_num</code></em> данное ключевое число (от 0
до 9) из ключевого файла DES используется. С параметром
<em><code>key_str</code></em> данная ключевая строка используется,
чтобы зашифровать <em><code>str</code></em>.</p>

<p>Ключевой файл может быть определен с помощью опции сервера
<a href="server.htm#option_mysqld_des-key-file"><code>--des-key-file</code>
</a>.</p>

<p>Строка возвращения двоичная строка, где первый символ
<a href="#function_char"><code>CHAR(128 | <em><code>key_num</code>
</em>)</code></a>. Если ошибка происходит,
<a href="#function_des-encrypt"><code>DES_ENCRYPT()</code>
</a> вернет <code>NULL</code>.</p>

<p>Эти 128 добавлены, чтобы облегчить распознавание зашифрованного ключа.
Если Вы используете строковый ключ, <em><code>key_num</code></em> 127.</p>
<p>Строковая длина для результата дана этой формулой:
<pre>
<em><code>new_len</code></em> = <em><code>orig_len</code></em> +
                                (8-(<em><code>orig_len</code></em> % 8))+1
</pre>

<p>У каждой строки в ключевом файле DES есть следующий формат:
<pre>
<em><code>key_num</code></em> <em><code>des_key_str</code></em>
</pre>

<p>Каждое значение <em><code>key_num</code></em> должно быть числом в
диапазоне от <code>0</code> до <code>9</code>. Строки в файле могут быть в
любом порядке. <em><code>des_key_str</code></em> строка, которая
используется, чтобы зашифровать сообщение. Должен быть по крайней мере один
пробел между числом и ключом. Первый ключ задает значение по умолчанию,
которое используется, если Вы не определяете ключевого параметра
<a href="#function_des-encrypt"><code>DES_ENCRYPT()</code></a>.</p>

<p>Вы можете сказать MySQL читать новые значения ключа из ключевого файла
запросом <a href="sql.htm#flush"><code>FLUSH DES_KEY_FILE</code></a>. Это
требует привилегию <a href="security.html#priv_reload"><code>RELOAD</code>
</a>.</p>

<p>Одна выгода наличия ряда ключей по умолчанию то, что это дает приложениям
способ проверить существование зашифрованных значений столбцов, не давая
конечному пользователю право дешифровать эти значения.</p>

<p>Функции <a href="#function_des-encrypt"><code>DES_ENCRYPT()
</code></a> и <a href="#function_des-decrypt"><code>DES_DECRYPT()
</code></a> устарели будут удалены в будущем выпуске MySQL и больше не должны
использоваться. Рассмотрите использование вместо них
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a>.</p>

<pre>
mysql&gt; SELECT customer_address FROM customer_table
     &gt;        WHERE crypted_credit_card = DES_ENCRYPT('credit_card_number');
</pre></li>

<li><a name="function_encode"></a><p>
<a href="#function_encode"><code>ENCODE(<em><code>str</code></em>,
<em><code>pass_str</code></em>)</code></a></p>

<p><a href="#function_encode"><code>ENCODE()</code></a> шифрует
<em><code>str</code></em> с использованием
<em><code>pass_str</code></em> как пароля. Результат двоичная строка той же
самой длины, что и <em><code>str</code></em>. Чтобы дешифровать результат,
надо использовать <a href="#function_decode"><code>DECODE()</code>
</a>.</p>

<p>Функции <a href="#function_encode"><code>ENCODE()</code></a> и
<a href="#function_decode"><code>DECODE()</code></a> устарели в
MySQL 8.0 будут удалены в будущем выпуске MySQL и больше
не должны использоваться.</p>

<p>Если Вы все еще должны использовать
<a href="#function_encode"><code>ENCODE()</code></a>,
значение salt должно использоваться с ней, чтобы уменьшить риск. Например:
<pre>
ENCODE('cleartext', CONCAT('my_random_salt','my_secret_password'))
</pre>
<p>Новое случайное значение должно использоваться всякий раз,
когда пароль обновлен.</p></li>

<li><a name="function_encrypt"></a><p>
<a href="#function_encrypt"><code>ENCRYPT(<em><code>str</code></em>[,
<em><code>salt</code></em>])</code></a></p>

<p>Шифрует <em><code>str</code></em> с использование системного вызова Unix
<code>crypt()</code> и возвращает двоичную строку. Параметр
<em><code>salt</code></em> должен быть строкой по крайней мере с двумя
символами, или результат будет <code>NULL</code>. Если нет параметра
<em><code>salt</code></em>, случайное значение используется.</p>

<p>Функция <a href="#function_encrypt"><code>ENCRYPT()</code></a>
устарела будет удалена в будущем выпуске MySQL и больше не должна
использоваться. Рассмотрите использование вместо нее
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a>.</p>
<pre>
mysql&gt; SELECT ENCRYPT('hello');
    -&gt; 'VxuFAJXVARROc'
</pre>

<p><a href="#function_encrypt"><code>ENCRYPT()</code></a>
игнорирует все кроме первых восьми символов <em><code>str</code></em>,
по крайней мере, на некоторых системах. Это поведение определено выполнением
основного системного вызова <code>crypt()</code>.</p>

<p>Использование <a href="#function_encrypt"><code>ENCRYPT()</code>
</a> с многобайтовыми наборами символов <code>ucs2</code>,
<code>utf16</code>, <code>utf16le</code> или <code>utf32</code> не
рекомендуются, потому что системный вызов ожидает строку,
законченную нулевым байтом.</p>

<p>Если <code>crypt()</code> не доступно на Вашей системе (как имеет место в
Windows), <a href="#function_encrypt"><code>ENCRYPT()</code></a>
всегда возвращает <code>NULL</code>.</p></li>

<li><a name="function_md5"></a><p>
<a href="#function_md5"><code>MD5(<em><code>str</code></em>)</code>
</a></p>

<p>Вычисляет 128-битную контрольную сумму MD5 для строки. Значение возвращено
как строка из 32 шестнадцатеричных цифр или <code>NULL</code>, если параметр
был <code>NULL</code>. Возвращаемое значение может, например, использоваться
в качестве ключа хеша. См. примечания в начале этого раздела о хранении
значений хеша эффективно.</p>

<p>Возвращаемое значение недвоичная строка в наборе символов соединения.
<pre>
mysql&gt; SELECT MD5('testing');
  -&gt; 'ae2b1fca515949e5d54fb22b8ed95575'
</pre>
<p>Это <span>RSA Data Security, Inc. MD5 Message-Digest Algorithm</span>.</p>
</li>

<li><a name="function_password"></a><p>
<a href="#function_password"><code>PASSWORD(<em><code>str</code>
</em>)</code></a></p>
<p>Эта функция устарела и будет удалена в будущем выпуске MySQL.</p>

<p>Возвращает хешированную строку пароля, вычисленную из пароля открытого
текста <em><code>str</code></em>. Возвращаемое значение недвоичная строка в
наборе символов соединения или <code>NULL</code>, если параметр
<code>NULL</code>. Эта функция интерфейс SQL к алгоритму, используемому
сервером, чтобы зашифровать пароли MySQL для хранения в
таблице <code>mysql.user</code>.</p>

<p>Переменная <a href="server.htm#sysvar_old_passwords"><code>old_passwords
</code></a> управляет методом хеширования пароля, используемым функцией
<a href="#function_password"><code>PASSWORD()</code></a>.
Это также влияет на пароль, выполненный
<a href="sql.htm#create-user"><code>CREATE USER</code></a> и
<a href="sql.htm#grant"><code>GRANT</code></a>, которые определяют пароль,
используя пункт <code>IDENTIFIED BY</code>.</p>

<p>Следующая таблица показывает разрешенные значения
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>,
метод хеширования пароля для каждого значения и какие плагины аутентификации
используют пароли, хешированные каждым методом.</p>

<table border="1">
<thead><tr><th scope="col">Значение</th><th scope="col">Метод хэширования
</th><th scope="col">Связанный плагин аутентификации</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>MySQL 4.1 native hashing</td>
<td><code>mysql_native_password</code></td></tr>
<tr><td scope="row">2</td><td>SHA-256 hashing</td>
<td><code>sha256_password</code></td></tr></tbody></table>

<p>SHA-256 password hashing
(<a href="server.htm#sysvar_old_passwords"><code>old_passwords=2</code></a>)
использует случайное значение salt, которое делает результат
<a href="#function_password"><code>PASSWORD()</code></a>
недетерминированным. Следовательно, запросы, которые используют эту функцию,
небезопасны для основанной на запросах репликации и не могут быть
сохранены в кэше запроса.</p>

<p>Шифрование, выполненное
<a href="#function_password"><code>PASSWORD()</code></a>,
однонаправленное. Это не тот же самый тип шифрования, используемого для
паролей Unix, для него надо использовать
<a href="#function_encrypt"><code>ENCRYPT()</code></a>.</p>

<p><a href="#function_password"><code>PASSWORD()</code></a>
используется системой аутентификации в сервере MySQL, Вы не должны
<span><em>not</em></span> использовать это в своих собственных приложениях. С
этой целью рассмотрите
<a href="#function_md5"><code>MD5()</code></a> или
<a href="#function_sha2"><code>SHA2()</code></a>. Также см.
<a href="../../../www.faqs.org/rfcs/rfc2195.html" target="_top">RFC 2195,
section 2 (Challenge-Response Authentication Mechanism (CRAM))</a>.</p>

<p>При некоторых обстоятельствах, запросы, которые вызывают
<a href="#function_password"><code>PASSWORD()</code></a>
могут быть зарегистрированы в журналах сервера или на стороне клиента в файле
истории, например, <code>~/.mysql_history</code>,
что означает, что пароли открытого текста могут быть считаны любым имеющим
доступ к той информации. Для информации об условиях, при которых это
происходит для журналов сервера и как управлять ею, см.
<a href="security.html#password-logging">раздел 7.1.2.3</a>.</p></li>

<li><a name="function_random-bytes"></a><p>
<a href="#function_random-bytes"><code>RANDOM_BYTES(<em><code>len
</code></em>)</code></a></p>

<p>Эта функция возвращает двоичную строку из
<em><code>len</code></em> случайных байт из
генератора случайных чисел библиотеки SSL (OpenSSL или yaSSL). Разрешенные
значения <em><code>len</code></em> от 1 до 1024. Для значений вне диапазона
<a href="#function_random-bytes"><code>RANDOM_BYTES()</code></a>
производит предупреждение и возвращает <code>NULL</code>.</p>

<p><a href="#function_random-bytes"><code>RANDOM_BYTES()</code></a>
может использоваться, чтобы обеспечить вектор инициализации для
<a href="#function_aes-decrypt"><code>AES_DECRYPT()</code></a> и
<a href="#function_aes-encrypt"><code>AES_ENCRYPT()</code></a>.
Для использования в этом контексте <em><code>len</code></em> должен быть по
крайней мере 16. Большие значения разрешены, но
байты сверх 16 проигнорированы.</p>

<p><a href="#function_random-bytes"><code>RANDOM_BYTES()</code></a>
производит случайное значение, которое делает его результат
недетерминированным. Следовательно, запросы, которые используют эту функцию,
опасны для основанной на запросах репликации и не могут быть
сохранены в кэше запроса.</p></li>

<li><a name="function_sha1"></a><p>
<a href="#function_sha1"><code>SHA1(<em><code>str</code></em>)
</code></a>, <a href="#function_sha1"><code>SHA(<em><code>str</code>
</em>)</code></a></p>

<p>Вычисляет 160-битовую контрольную сумму SHA-1 для строки, как описано в
RFC 3174 (безопасный алгоритм хеша). Значение возвращено как строка из 40
шестнадцатеричных цифр или <code>NULL</code>, если параметр был
<code>NULL</code>. Одно из возможных применений для этой функции как ключ
хеша. См. примечания в начале этого раздела о хранении значений хеша
эффективно. Вы можете также использовать
<a href="#function_sha1"><code>SHA1()</code></a>
как шифровальную функция для того, чтобы сохранить пароли.
<a href="#function_sha1"><code>SHA()</code></a> синоним для
<a href="#function_sha1"><code>SHA1()</code></a>.</p>

<p>Возвращаемое значение недвоичная строка в наборе символов соединения.
<pre>
mysql&gt; SELECT SHA1('abc');
    -&gt; 'a9993e364706816aba3e25717850c26c9cd0d89d'
</pre>

<p><a href="#function_sha1"><code>SHA1()</code></a>
может считаться более безопасным эквивалентом
<a href="#function_md5"><code>MD5()</code></a>.</p></li>

<li><a name="function_sha2"></a><p>
<a href="#function_sha2"><code>SHA2(<em><code>str</code></em>,
<em><code>hash_length</code></em>)</code></a></p>

<p>Вычисляет семейство функций хеша SHA-2 (SHA-224, SHA-256, SHA-384 и
SHA-512). Первый параметр строка открытого текста, которая будет хеширована.
Второй параметр указывает на желаемую длину в битах результата, у него
должно быть значение 224, 256, 384, 512 или 0 (эквивалентен 256).
Если любой параметр <code>NULL</code> или длина хеша не одно из разрешенных
значений, возвращаемое значение <code>NULL</code>. Иначе функциональный
результат значение хеша, содержащее желаемое число битов.</p>

<p>Возвращаемое значение недвоичная строка в наборе символов соединения.
<pre>
mysql&gt; SELECT SHA2('abc', 224);
    -&gt; '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'
</pre>

<p>Эта функция работает, только если MySQL был сконфигурирован с поддержкой
SSL. См. <a href="security.html#secure-connections">раздел 7.4</a>.</p>
<p><a href="#function_sha2"><code>SHA2()</code></a>
более надежна криптографически, чем
<a href="#function_md5"><code>MD5()</code></a> или
<a href="#function_sha1"><code>SHA1()</code></a>.</p></li>

<li><a name="function_uncompress"></a><p>
<a href="#function_uncompress"><code>UNCOMPRESS(<em><code>
string_to_uncompress</code></em>)</code></a></p>

<p>Разжимает строку, сжатую
<a href="#function_compress"><code>COMPRESS()</code></a>.
Если параметр не сжатое значение, результат <code>NULL</code>. Эта функция
требует, чтобы MySQL был собран с библиотекой сжатия такой, как
<code>zlib</code>. Иначе возвращаемое значение всегда <code>NULL</code>.
<pre>
mysql&gt; SELECT UNCOMPRESS(COMPRESS('any string'));
    -&gt; 'any string'
mysql&gt; SELECT UNCOMPRESS('any string');
    -&gt; NULL
</pre></li>

<li><a name="function_uncompressed-length"></a><p>
<a href="#function_uncompressed-length"><code>
UNCOMPRESSED_LENGTH(<em><code>compressed_string</code></em>)</code></a></p>

<p>Возвращает длину, которую сжатая строка имела прежде, чем быть сжатой.
<pre>
mysql&gt; SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));
    -&gt; 30
</pre></li>

<li><a name="function_validate-password-strength"></a><p>
<a href="#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH(<em><code>str</code></em>)</code></a></p>

<p>Учитывая параметр, представляющий пароль открытого текста, эта функция
возвращает целое число, чтобы указать, насколько сильный пароль.
Возвращаемое значение колеблется от 0 (слабый) до 100 (сильный).</p>

<p>Оценка пароля <a href="#function_validate-password-strength">
<code>VALIDATE_PASSWORD_STRENGTH()</code></a> сделана плагином
<code>validate_password</code>. Если плагин не установлен, функция всегда
возвращает 0. Для информации об установке плагина <code>validate_password
</code> см. <a href="security.html#validate-password-plugin">раздел 7.5.2
</a>. Чтобы исследовать или сконфигурировать параметры, которые затрагивают
тестирование пароля, проверьте или установите системные переменные,
осуществленные плагином <code>validate_password</code>. См.
<a href="security.html#validate-password-options-variables">
раздел 7.5.2.2</a>.</p>

<p>Пароль подвергнут все более и более строгим тестам, и возвращаемое
значение показывает, какие тесты были удовлетворены, как показано в следующей
таблице. Кроме того, если переменная
<a href="security.html#sysvar_validate_password_check_user_name"><code>
validate_password_check_user_name</code></a> включена, и пароль соответствует
имени пользователя, <a href="#function_validate-password-strength">
<code>VALIDATE_PASSWORD_STRENGTH()</code></a> возвращает 0, независимо от
настроек других переменных <code>validate_password</code>.</p>

<table border="1">
<thead><tr><th scope="col">Тест пароля</th><th scope="col">Возвращаемое
значение</th></tr></thead>
<tbody><tr><td scope="row">Длина &lt; 4</td><td>0</td></tr>
<tr><td scope="row">Длина = 4 и &lt;
<a href="security.html#sysvar_validate_password_length"><code>
validate_password_length</code></a></td><td>25</td></tr>
<tr><td scope="row">Удовлетворяет политике 1 (<code>LOW</code>)</td>
<td>50</td></tr>
<tr><td scope="row">Удовлетворяет политике 2 (<code>MEDIUM</code>)</td>
<td>75</td></tr>
<tr><td scope="row">Удовлетворяет политике 3 (<code>STRONG</code>)</td>
<td>100</td></tr></tbody></table></li></ul>

<h2><a name="information-functions"></a>13.14. Информационные функции</h2>
<a name="idm139965350472912"></a><p><b>Таблица 13.18. Информационные функции
</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_benchmark"><code>
BENCHMARK()</code></a></td><td>Неоднократно выполняет выражение</td></tr>
<tr><td scope="row"><a href="#function_charset"><code>CHARSET()
</code></a></td><td>Набор символов параметра</td></tr>
<tr><td scope="row"><a href="#function_coercibility"><code>
COERCIBILITY()</code></a></td><td>Сопоставление значения строкового параметра
</td></tr>
<tr><td scope="row"><a href="#function_collation"><code>COLLATION()
</code></a></td><td>Сопоставление значения строкового параметра</td></tr>
<tr><td scope="row"><a href="#function_connection-id"><code>
CONNECTION_ID()</code></a></td><td>ID соединения (ID потока)</td></tr>
<tr><td scope="row"><a href="#function_current-role"><code>
CURRENT_ROLE()</code></a></td><td>Текущяя активная роль</td></tr>
<tr><td scope="row"><a href="#function_current-user"><code>
CURRENT_USER()</code>, <code>CURRENT_USER</code></a></td><td>
Имя пользователя и имя хоста</td></tr>
<tr><td scope="row"><a href="#function_database"><code>DATABASE()
</code></a></td><td>Имя базы данных по умолчанию</td></tr>
<tr><td scope="row"><a href="#function_found-rows"><code>
FOUND_ROWS()</code></a></td><td>Для SELECT с предложением LIMIT
число строк, которые были бы возвращены, если бы там не было LIMIT</td></tr>
<tr><td scope="row"><a href="#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a></td><td>Значение столбца AUTOINCREMENT
для последнего INSERT</td></tr>
<tr><td scope="row"><a href="#function_roles-graphml"><code>
ROLES_GRAPHML()</code></a></td><td>Возвращает документ GraphML,
представляющий ролевые подграфы памяти</td></tr>
<tr><td scope="row"><a href="#function_row-count"><code>ROW_COUNT()
</code></a></td><td>Сколько строк обновлено</td></tr>
<tr><td scope="row"><a href="#function_schema"><code>SCHEMA()</code>
</a></td><td>Синоним для DATABASE()</td></tr>
<tr><td scope="row"><a href="#function_session-user"><code>
SESSION_USER()</code></a></td><td>Синоним для USER()</td></tr>
<tr><td scope="row"><a href="#function_system-user"><code>
SYSTEM_USER()</code></a></td><td>Синоним для USER()</td></tr>
<tr><td scope="row"><a href="#function_user"><code>USER()</code></a>
</td><td>Имя пользователя и имя хоста клиента</td></tr>
<tr><td scope="row"><a href="#function_version"><code>VERSION()
</code></a></td><td>Строка версии сервера MySQL</td></tr></tbody></table>

<ul><li><a name="function_benchmark"></a><p>
<a href="#function_benchmark"><code>BENCHMARK(<em><code>count</code>
</em>,<em><code>expr</code></em>)</code></a></p>

<p>Функция <a href="#function_benchmark"><code>BENCHMARK()</code>
</a> выполняет выражение <em><code>expr</code></em> <em><code>count</code>
</em> раз. Это может использоваться, чтобы оценить, как быстро MySQL
обрабатывает выражение. Значение результата всегда <code>0</code>.
Намеченное использование в клиенте
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>,
который сообщает о времени выполнения запроса:
<pre>
mysql&gt; SELECT BENCHMARK(1000000,ENCODE('hello','goodbye'));
+----------------------------------------------+
| BENCHMARK(1000000,ENCODE('hello','goodbye')) |
+----------------------------------------------+
| 0                                            |
+----------------------------------------------+
1 row in set (4.74 sec)
</pre>

<p>Время показывает прошедшее время на клиенте, а не время центрального
процессора на сервере. Желательно выполнить
<a href="#function_benchmark"><code>BENCHMARK()</code></a> несколько
раз и интерпретировать результат относительно того, как загржен сервер.</p>

<p><a href="#function_benchmark"><code>BENCHMARK()</code></a>
предназначена для того, чтобы определить эксплуатационные качества во время
выполнения скалярных выражений, у которых есть некоторые существенные
значения для способа, которым Вы используете их и интерпретируете результаты:
</p>

<ul><li><p>Только скалярные выражения могут использоваться. Хотя выражение
может быть подзапросом, оно должно возвратить единственный столбец и самое
большее единственную строку. Например,
<a href="#function_benchmark"><code>BENCHMARK(10, (SELECT * FROM
t))</code></a> потерпит неудачу, если таблица <code>t</code>
имеет больше, чем один столбец или больше, чем одну строку.</li>

<li>Выполнение <code>SELECT <em><code>expr</code></em></code>
<em><code>N</code></em> раз отличается от выполнения
<code>SELECT BENCHMARK(<em><code>N</code></em>, <em><code>expr</code></em>)
</code> с точки зрения количества вовлеченных ресурсов. У этих двух запросов
есть совсем другие профили выполнения, и Вы не должны ожидать, что они займут
то же самое количество времени. В первом случае работают оптимизатор,
анализатор, блокировка таблиц, причем все это работает каждый из
<em><code>N</code></em> раз. Во втором случае структуры памяти, локальное
кэширование и оптимизация отрабатывают только однажды, после чего
<em><code>N</code></em> раз оценивается только само выражение.
Результаты <a href="#function_benchmark"><code>BENCHMARK()</code>
</a> определяют эксплуатационные качества компонента во время выполнения,
давая больше веса тому компоненту и удаляя шум, внесенный сетью,
оптимизатором, анализатором и другими компонентами.</p></li></ul></li>

<li><a name="function_charset"></a><p>
<a href="#function_charset"><code>CHARSET(<em><code>str</code></em>)
</code></a></p>

<p>Возвращает набор символов строкового параметра.
<pre>
mysql&gt; SELECT CHARSET('abc');
  -&gt; 'latin1'
mysql&gt; SELECT CHARSET(CONVERT('abc' USING utf8));
  -&gt; 'utf8'
mysql&gt; SELECT CHARSET(USER());
  -&gt; 'utf8'
</pre></li>

<li><a name="function_coercibility"></a><p>
<a href="#function_coercibility"><code>COERCIBILITY(<em><code>str
</code></em>)</code></a></p>

<p>Возвращает сопоставление строкового параметра.
<pre>
mysql&gt; SELECT COERCIBILITY('abc' COLLATE latin1_swedish_ci);
    -&gt; 0
mysql&gt; SELECT COERCIBILITY(USER());
    -&gt; 3
mysql&gt; SELECT COERCIBILITY('abc');
    -&gt; 4
</pre>
<p>Возвращаемые значения расшифрованы в следующей таблице. У меньших значений
есть более высокий приоритет.</p>

<table border="1">
<thead><tr><th scope="col">Значение</th><th scope="col">Смысл</th>
<th scope="col">Пример</th></tr></thead>
<tbody><tr><td scope="row"><code>0</code></td><td>Явное сопоставление</td>
<td>Значение с <code>COLLATE</code></td></tr>
<tr><td scope="row"><code>1</code></td><td>Никакого сопоставления</td>
<td>Связь строк с различными сопоставлениями</td></tr>
<tr><td scope="row"><code>2</code></td><td>Неявное сопоставление</td>
<td>Значение столбца, параметр сохраненной процедуры или локальная переменная
</td></tr>
<tr><td scope="row"><code>3</code></td><td>Постоянная системы</td>
<td>Возвращаемое значение <a href="#function_user"><code>USER()
</code></a></td></tr>
<tr><td scope="row"><code>4</code></td><td>Сопоставление</td>
<td>Буквальная строка</td></tr>
<tr><td scope="row"><code>5</code></td><td>Игнорируемое</td>
<td><code>NULL</code> или выражение произошло из <code>NULL</code></td></tr>
</tbody></table></li>

<li><a name="function_collation"></a><p>
<a href="#function_collation"><code>COLLATION(<em><code>str</code>
</em>)</code></a></p>

<p>Возвращает сопоставление строкового параметра.
<pre>
mysql&gt; SELECT COLLATION('abc');
    -&gt; 'latin1_swedish_ci'
mysql&gt; SELECT COLLATION(_utf8'abc');
    -&gt; 'utf8_general_ci'
</pre></li>

<li><a name="function_connection-id"></a><p>
<a href="#function_connection-id"><code>CONNECTION_ID()</code>
</a></p>

<p>Возвращает ID соединения (ID потока). У каждого соединения есть ID,
который уникален среди группы в настоящее время присоединенных клиентов.</p>
<p>Значение, возвращенное
<a href="#function_connection-id"><code>CONNECTION_ID()</code></a>,
то же самое, как в столбце <code>ID</code> таблицы
<a href="inform.htm#processlist-table"><code>INFORMATION_SCHEMA.PROCESSLIST
</code></a>, столбце <code>Id</code> вывода
<a href="sql.htm#show-processlist"><code>SHOW PROCESSLIST</code></a> и
столбце <code>PROCESSLIST_ID</code> таблицы
<a href="perfor.htm#threads-table"><code>threads</code></a>
в Performance Schema.
<pre>
mysql&gt; SELECT CONNECTION_ID();
  -&gt; 23786
</pre></li>

<li><a name="function_current-role"></a><p>
<a href="#function_current-role"><code>CURRENT_ROLE()</code></a></p>
<p>Возвращает двоичную строку, содержащую текущие активные роли для текущего
сеанса, отделенного запятыми или <code>NONE</code>, если нет ролей.</p>

<p>Предположите, что учетной записи предоставляют роли следующим образом:
<pre>
GRANT 'r1', 'r2' TO 'u1'@'localhost';
</pre>

<p>В сеансах для <code>u1</code> стартовое значение <code>CURRENT_USER()
</code> роль учетной записи по умолчанию или роли. Используя
<a href="sql.htm#set-role"><code>SET ROLE</code></a> можно менять:
<pre>
mysql&gt; SET ROLE ALL; SELECT CURRENT_ROLE();
+-------------------+
| CURRENT_ROLE()    |
+-------------------+
| `r1`@`%`,`r2`@`%` |
+-------------------+

mysql&gt; SET ROLE 'r1'; SELECT CURRENT_ROLE();
+----------------+
| CURRENT_ROLE() |
+----------------+
| `r1`@`%`       |
+----------------+
</pre></li>

<li><a name="function_current-user"></a><p>
<a href="#function_current-user"><code>CURRENT_USER</code></a>,
<a href="#function_current-user"><code>CURRENT_USER()</code></a></p>

<p>Возвращает имя пользователя и комбинацию имени хоста для учетной записи
MySQL. Эта учетная запись определяет Ваши привилегии доступа. Возвращаемое
значение строка в наборе символов <code>utf8</code>.</p>

<p>Значение <a href="#function_current-user"><code>CURRENT_USER()
</code></a> может отличаться от значения
<a href="#function_user"><code>USER()</code></a>.
<pre>
mysql&gt; SELECT USER();
    -&gt; 'davida@localhost'

mysql&gt; SELECT * FROM mysql.user;
ERROR 1044: Access denied for user ''@'localhost' to
database 'mysql'

mysql&gt; SELECT CURRENT_USER();
    -&gt; '@localhost'
</pre>

<p>Пример иллюстрирует это: хотя клиент определил имя пользователя
<code>davida</code> (как обозначено значением функции
<a href="#function_user"><code>USER()</code></a>),
сервер подтверждает подлинность клиента, использующего анонимную учетную
запись пользователя (как обозначено пустой частью имени пользователя в
значении <a href="#function_current-user"><code>CURRENT_USER()
</code></a>).</p>

<p>В пределах сохраненной программы или представления
<a href="#function_current-user"><code>CURRENT_USER()</code></a>
возвращает пользователя, который определил объект (как дано значением
<code>DEFINER</code>), если не определено с параметром
<code>SQL SECURITY INVOKER</code>. В последнем случае
<a href="#function_current-user"><code>CURRENT_USER()</code></a>
возвращает того, кто вызвал обхект.</p>

<p>У триггеров и событий нет никакой опции, чтобы определить <code>SQL
SECURITY</code>, таким образом, для этих объектов
<a href="#function_current-user"><code>CURRENT_USER()</code></a>
возвращает пользователя, который определил объект. Чтобы возвратить
вызвашего, надо использовать <a href="#function_user"><code>USER()
</code></a> или <a href="#function_session-user"><code>
SESSION_USER()</code></a>.</p>

<p>Следующие запросы поддерживают использование
<a href="#function_current-user"><code>CURRENT_USER()</code></a>,
чтобы взять имя (возможно, и хост) текущего пользователя или определителя,
в таких случаях <a href="#function_current-user"><code>
CURRENT_USER()</code></a> расширен как и где необходимо:</p>

<ul><li><p><a href="sql.htm#drop-user"><code>DROP USER</code></a></li>
<li><a href="sql.htm#rename-user"><code>RENAME USER</code></a></li>
<li><a href="sql.htm#grant"><code>GRANT</code></a></li>
<li><a href="sql.htm#revoke"><code>REVOKE</code></a></li>
<li><a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a></li>
<li><a href="sql.htm#create-procedure"><code>CREATE PROCEDURE</code></a></li>
<li><a href="sql.htm#create-trigger"><code>CREATE TRIGGER</code></a></li>
<li><a href="sql.htm#create-event"><code>CREATE EVENT</code></a></li>
<li><a href="sql.htm#create-view"><code>CREATE VIEW</code></a></li>
<li><a href="sql.htm#alter-event"><code>ALTER EVENT</code></a></li>
<li><a href="sql.htm#alter-view"><code>ALTER VIEW</code></a></li>
<li><a href="sql.htm#set-password"><code>SET PASSWORD</code></a>
</p></li></ul>

<p>Для информации о значениях, что это расширение
<a href="#function_current-user"><code>CURRENT_USER()</code></a>
имеет для репликации в различных выпусках MySQL 8.0 см.
see <a href="replica.htm#replication-features-current-user">раздел 19.4.1.8
</a>.</p></li>

<li><a name="function_database"></a><p>
<a href="#function_database"><code>DATABASE()</code></a></p>
<p>Возвращает значение по умолчанию имени базы данных как строка в
<code>utf8</code>. Если нет никакой базы данных по умолчанию,
<a href="#function_database"><code>DATABASE()</code></a> вернет
<code>NULL</code>. В пределах сохраненной процедуры база данных
по умолчанию это база данных, с которой связана процедура, который не
обязательно является той же самой базой данных, которая значение по
умолчанию в контексте запроса.
<pre>
mysql&gt; SELECT DATABASE();
    -&gt; 'test'
</pre>

<p>Если нет никакой базы данных по умолчанию,
<a href="#function_database"><code>DATABASE()</code></a> вернет
<code>NULL</code>.</p></li>

<li><a name="function_found-rows"></a><p>
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a></p>
<p>Запрос <a href="sql.htm#select"><code>SELECT</code></a> может включать
пункт <code>LIMIT</code>, чтобы ограничить число строк, которые сервер
возвращает клиенту. В некоторых случаях желательно знать, сколько строк
запрос возвратил бы без <code>LIMIT</code>, но не выполняя запрос снова.
Чтобы получить это количество строк, включите опцию
<code>SQL_CALC_FOUND_ROWS</code> в
<a href="sql.htm#select"><code>SELECT</code></a> и затем вызовите
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a> позже:
<pre>
mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM <em><code>tbl_name</code></em>
    -&gt;        WHERE id &gt; 100 LIMIT 10;
mysql&gt; SELECT FOUND_ROWS();
</pre>

<p>Второй <a href="sql.htm#select"><code>SELECT</code></a> возвращает число,
указывающее сколько строк первый
<a href="sql.htm#select"><code>SELECT</code></a>
возвратил бы без <code>LIMIT</code>.</p>

<p>В отсутствие опции <code>SQL_CALC_FOUND_ROWS</code> и наличии успешного
<a href="sql.htm#select"><code>SELECT</code></a>
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
возвращает число строк в наборе результатов, возвращенном этим запросом. Если
запрос включает <code>LIMIT</code>,
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
возвращает число строк до limit. Например,
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
возвращает 10 или 60, соответственно, если запрос включает
respectively, if the statement includes <code>LIMIT 10</code> или
<code>LIMIT 50, 10</code>.</p>

<p>Количество строк, доступное через
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
является переходным и не предназначено быть доступным после
<code>SELECT SQL_CALC_FOUND_ROWS</code>.
Если Вы должны обратиться к значению позже, сохраните его:
<pre>
mysql&gt; SELECT SQL_CALC_FOUND_ROWS * FROM ... ;
mysql&gt; SET @rows = FOUND_ROWS();
</pre>

<p>Если Вы используете <code>SELECT SQL_CALC_FOUND_ROWS</code>, MySQL
должен вычислить, сколько строк находится в полном наборе результатов.
Однако, это быстрее, чем выполнение запроса снова без <code>LIMIT</code>,
потому что набор результатов не надо посылать клиенту.</p>

<p><code>SQL_CALC_FOUND_ROWS</code> и
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
могут быть полезными в ситуациях, когда Вы хотите ограничить число строк,
которые возвращает запрос, но также и определить число строк в полном наборе
результатов, не выполняя запрос снова. Пример: Веб-сценарий, который
представляет пронумерованные страницы, содержащие ссылки к страницам, которые
показывают другие разделы результата поиска. Использование
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
позволяет Вам определить, сколько других страниц необходимо для
остальной части результата.</p>

<p>Использование <code>SQL_CALC_FOUND_ROWS</code> и
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
более сложно для for <a href="sql.htm#union"><code>UNION</code></a>, чем для
простого <a href="sql.htm#select"><code>SELECT</code></a>, поскольку
<code>LIMIT</code> может произойти в многих местах в
<a href="sql.htm#union"><code>UNION</code></a>. Это может быть применено к
отдельному запросу <a href="sql.htm#select"><code>SELECT</code></a> в
<a href="sql.htm#union"><code>UNION</code></a> или глобально к результату
<a href="sql.htm#union"><code>UNION</code></a> в целом.</p>

<p>Смысл <code>SQL_CALC_FOUND_ROWS</code> для
<a href="sql.htm#union"><code>UNION</code></a> в том, что
это должно возвратить количество строк, которое было бы возвращено без
глобального <code>LIMIT</code>. Условия для использования
<code>SQL_CALC_FOUND_ROWS</code> с
<a href="sql.htm#union"><code>UNION</code></a>:</p>

<ul><li><p>Ключевое слово <code>SQL_CALC_FOUND_ROWS</code> должно появиться в
первом <a href="sql.htm#select"><code>SELECT</code></a>
в <a href="sql.htm#union"><code>UNION</code></a>.</li>

<li>Значение <a href="#function_found-rows"><code>FOUND_ROWS()
</code></a> точно только если используется
<a href="sql.htm#union"><code>UNION ALL</code></a>. Если
<a href="sql.htm#union"><code>UNION</code></a> без <code>ALL</code>,
удаление дубликатов происходит и значение
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
оценено только приблизительно.</li>

<li>Если <code>LIMIT</code> не присутствует в
<a href="sql.htm#union"><code>UNION</code></a>,
<code>SQL_CALC_FOUND_ROWS</code> проигнорирован и возвращается число строк во
временной таблице, которая составлена, чтобы обработать
<a href="sql.htm#union"><code>UNION</code></a>.</p></li></ul>

<p>Вне случаев, описанных здесь, поведение
<a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
не определено (например, его значение после запроса
<a href="sql.htm#select"><code>SELECT</code></a>, который
терпит неудачу с ошибкой).</p>

<p><a href="#function_found-rows"><code>FOUND_ROWS()</code></a>
не копируется, достоверно используя основанную на запросах репликацию. Эта
функция автоматически копируется, используя основанную на строках репликацию.
</p></li>

<li><a name="function_last-insert-id"></a><p>
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>, <a href="#function_last-insert-id"><code>LAST_INSERT_ID(<em>
<code>expr</code></em>)</code></a></p>

<p>Без параметра <a href="#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a> вернет <code>BIGINT UNSIGNED</code> (64-bit)
число, представляющее первое автоматически произведенное значение, успешно
вставленное для столбца <code>AUTO_INCREMENT</code> в результате выполненного
последним запроса <a href="sql.htm#insert"><code>INSERT</code></a>.
Значение <a href="#function_last-insert-id"><code>LAST_INSERT_ID()
</code></a> остается неизменным, если никакие строки успешно не вставлены.</p>

<p>С параметром <a href="#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a> возвращает unsigned integer.</p>
<p>Например, после вставки строки, которая производит значение
<code>AUTO_INCREMENT</code>, Вы можете получить значение так:
<pre>
mysql&gt; SELECT LAST_INSERT_ID();
    -&gt; 195
</pre>

<p>В настоящее время выполняющийся запрос не затрагивает значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>. Предположите, что Вы производите значение <code>AUTO_INCREMENT</code>
с одним запросом, а затем обращаетесь к
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
при вставке нескольих строк <a href="sql.htm#insert"><code>INSERT</code></a>,
которое вставляет строки в таблицу с его собственным столбцом
<code>AUTO_INCREMENT</code>. Значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
останется устойчивым во втором запросе: его значение для второй и более
поздних строк не затронуто более ранними вставками строки. Однако, если Вы
смешиваете ссылки на
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
и <a href="#function_last-insert-id"><code>LAST_INSERT_ID(<em><code>
expr</code></em>)</code></a>, эффект неопределен.</p>

<p>Если предыдущий запрос возвратил ошибку, значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
не определено. Для транзакционных таблиц, если запрос откатился из-за ошибки,
значение <a href="#function_last-insert-id"><code>LAST_INSERT_ID()
</code></a> не определено. Для ручного <a href="sql.htm#commit"><code>
ROLLBACK</code></a> значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
не восстановлен к тому, что было перед транзакцией, это остается, как было в
точке <a href="sql.htm#commit"><code>ROLLBACK</code></a>.</p>

<p>В пределах тела сохраненной процедуры, функции или триггера, значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
изменяется тем же самым путем, что касается запросов, выполненных вне этих
видов объектов. Эффект сохраненной процедуры или триггера на значение
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>,
зависит от вида процедуры:</p>

<ul><li><p>Если хранимая процедура выполняет запросы, которые изменяют
значение <a href="#function_last-insert-id"><code>LAST_INSERT_ID()
</code></a>, измененное значение замечено запросами, которые следуют
за вызовом процедуры.</li>

<li>Для сохраненных функций и триггеров, которые изменяют значение,
восстановлено значение, когда функция или триггера завершилась, так
последующие запросы не будут видеть измененное значение.</p></li></ul>

<p>ID, который был произведен, поддержан в сервере на основе соединения.
Это означает, что значение, возвращенное функцией данному клиенту, является
первым значением <code>AUTO_INCREMENT</code>, произведенным для нового
запроса, затрагивающего столбец <code>AUTO_INCREMENT</code> <span><em>этим
клиентом</em></span>. Это значение не может быть затронуто другими клиентами,
даже если они производят свои значения <code>AUTO_INCREMENT</code>.
Это поведение гарантирует, что каждый клиент может получить его собственный
ID без беспокойства о деятельности других клиентов, и без потребности в
блокировках или транзакциях.</p>

<p>Значение <a href="#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a> не изменено, если Вы устанавливаете столбец
<code>AUTO_INCREMENT</code> строки в значение, которое не является
<code>NULL</code> или <code>0</code>.</p>

<p>Если Вы вставляете много строк, используя одиночный
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
возвращает значение, произведенное для <span><em>первой</em></span>
вставленной строки. Причина этого состоит в том, чтобы позволить легко
воспроизвести тот же самый <a href="sql.htm#insert"><code>INSERT</code></a>
для другого сервера.</p>

<p>Например:
<pre>
mysql&gt; USE test;
Database changed
mysql&gt; CREATE TABLE t (
    -&gt;   id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    -&gt;   name VARCHAR(10) NOT NULL);
Query OK, 0 rows affected (0.09 sec)

mysql&gt; INSERT INTO t VALUES (NULL, 'Bob');
Query OK, 1 row affected (0.01 sec)

mysql&gt; SELECT * FROM t;
+----+------+
| id | name |
+----+------+
|  1 | Bob  |
+----+------+
1 row in set (0.01 sec)

mysql&gt; SELECT LAST_INSERT_ID();
+------------------+
| LAST_INSERT_ID() |
+------------------+
| 1                |
+------------------+
1 row in set (0.00 sec)

mysql&gt; INSERT INTO t VALUES
    -&gt; (NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM t;
+----+------+
| id | name |
+----+------+
|  1 | Bob  |
|  2 | Mary |
|  3 | Jane |
|  4 | Lisa |
+----+------+
4 rows in set (0.01 sec)

mysql&gt; SELECT LAST_INSERT_ID();
+------------------+
| LAST_INSERT_ID() |
+------------------+
| 2                |
+------------------+
1 row in set (0.00 sec)
</pre>

<p>Хотя второй запрос <a href="sql.htm#insert"><code>INSERT</code></a>
вставил три новых строки в <code>t</code>, ID, произведенный для первой из
этих строк, был <code>2</code>, и именно это значение возвращено
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
для следующего <a href="sql.htm#select"><code>SELECT</code></a>.</p>

<p>Если Вы используете <a href="sql.htm#insert"><code>INSERT
IGNORE</code></a> и строка проигнорирована,
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
остается неизменным (или 0 возвращен, если соединение еще не выполнило
успешно <code>INSERT</code>) и, для нетранзакционных таблиц, счетчик
<code>AUTO_INCREMENT</code> не увеличен. Для таблиц <code>InnoDB</code>
счетчик <code>AUTO_INCREMENT</code> увеличен, если
<a href="innodb.htm#sysvar_innodb_autoinc_lock_mode"><code>
innodb_autoinc_lock_mode</code></a> установлена в
<code>1</code> или <code>2</code>:
<pre>
mysql&gt; USE test;
Database changed

mysql&gt; SELECT @@innodb_autoinc_lock_mode;
+----------------------------+
| @@innodb_autoinc_lock_mode |
+----------------------------+
| 1                          |
+----------------------------+
1 row in set (0.00 sec)

mysql&gt; CREATE TABLE `t` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `val` INT(11) DEFAULT NULL, PRIMARY KEY (`id`),
  UNIQUE KEY `i1` (`val`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Query OK, 0 rows affected (0.02 sec)

-- Insert two rows

mysql&gt; INSERT INTO t (val) VALUES (1),(2);
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

-- With auto_increment_offset=1, the inserted rows
-- result in an AUTO_INCREMENT value of 3

mysql&gt; SHOW CREATE TABLE t\G
*************************** 1. row ***************************
 Table: t
Create Table: CREATE TABLE `t` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `val` int(11) DEFAULT NULL, PRIMARY KEY (`id`),
  UNIQUE KEY `i1` (`val`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=latin1
1 row in set (0.00 sec)

-- LAST_INSERT_ID() returns the first automatically generated
-- value that is successfully inserted for the AUTO_INCREMENT column

mysql&gt; SELECT LAST_INSERT_ID();
+------------------+
| LAST_INSERT_ID() |
+------------------+
| 1                |
+------------------+
1 row in set (0.00 sec)

-- The attempted insertion of duplicate rows fail but errors are ignored

mysql&gt; INSERT IGNORE INTO t (val) VALUES (1),(2);
Query OK, 0 rows affected (0.00 sec)
Records: 2  Duplicates: 2  Warnings: 0

-- With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter
-- is incremented for the ignored rows

mysql&gt; SHOW CREATE TABLE t\G
*************************** 1. row ***************************
 Table: t
Create Table: CREATE TABLE `t` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `val` int(11) DEFAULT NULL, PRIMARY KEY (`id`),
  UNIQUE KEY `i1` (`val`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1
1 row in set (0.00 sec)

-- The LAST_INSERT_ID is unchanged becuase the previous insert was unsuccessful

mysql&gt; SELECT LAST_INSERT_ID();
+------------------+
| LAST_INSERT_ID() |
+------------------+
| 1                |
+------------------+
1 row in set (0.00 sec)  </pre>

<p>Если <em><code>expr</code></em> дан как параметр
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>, значение параметра возвращено функцией и помнится как следующее
значение, которое будет возвращено
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>. Это может использоваться, чтобы моделировать последовательности:</p>

<ol type="1"><li><p>Составьте таблицу, чтобы сохранить
последовательность и инициализируйте это:
<pre>
mysql&gt; CREATE TABLE sequence (id INT NOT NULL);
mysql&gt; INSERT INTO sequence VALUES (0);
</pre></li>

<li>Используйте таблицу, чтобы произвести порядковые номера:
<pre>
mysql&gt; UPDATE sequence SET id=LAST_INSERT_ID(id+1);
mysql&gt; SELECT LAST_INSERT_ID();
</pre>

<p><a href="sql.htm#update"><code>UPDATE</code></a> постепенно увеличивает
счетчик последовательности и вызывает следующий вызов
<a href="#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>, чтобы возвратить обновленное значение. Запрос
<a href="sql.htm#select"><code>SELECT</code></a> получает это значение.
Функция C API <a href="connect.htm#mysql-insert-id"><code>mysql_insert_id()
</code></a> может также использоваться, чтобы получить значение. См.
<a href="connect.htm#mysql-insert-id">раздел 25.8.7.38</a>.</p></li></ol>

<p>Отметьте, что <a href="connect.htm#mysql-insert-id"><code>
mysql_insert_id()</code></a> обновлен только после
<a href="sql.htm#insert"><code>INSERT</code></a> и
<a href="sql.htm#update"><code>UPDATE</code></a>,
таким образом, Вы не можете использовать функцию C API, чтобы получить
значение для <a href="#function_last-insert-id"><code>
LAST_INSERT_ID(<em><code>expr</code></em>)</code></a> после выполнения других
запросов SQL, подобных
<a href="sql.htm#select"><code>SELECT</code></a> или
<a href="sql.htm#set-variable"><code>SET</code></a>.</p></li>

<li><a name="function_roles-graphml"></a><p>
<a href="#function_roles-graphml"><code>ROLES_GRAPHML()</code>
</a></p>
<p>Возвращает двоичную строку, содержащую документ GraphML, представляющий
ролевые подграфики памяти.</p></li>

<li><a name="function_row-count"></a><p>
<a href="#function_row-count"><code>ROW_COUNT()</code></a></p>
<p><code>ROW_COUNT()</code> возвращает значение следующим образом:</p>

<ul><li><p>DDL-запросы: 0. Это относится к таким заявлениям, как
<a href="sql.htm#create-table"><code>CREATE TABLE</code></a> или
<a href="sql.htm#drop-table"><code>DROP TABLE</code></a>.</li>

<li>DML-запросы кроме <a href="sql.htm#select"><code>SELECT</code></a>:
Число затронутых строк. Это относится к таким запросам, как
<a href="sql.htm#update"><code>UPDATE</code></a>,
<a href="sql.htm#insert"><code>INSERT</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a> (как прежде),
но теперь также к таким запросам, как <a href="sql.htm#alter-table"><code>
ALTER TABLE</code></a> и
<a href="sql.htm#load-data"><code>LOAD DATA INFILE</code></a>.</li>

<li><a href="sql.htm#select"><code>SELECT</code></a>: -1,
если запрос возвращает набор результатов, или число строк, если он этого не
делает. Например, для <code>SELECT * FROM t1</code>
<a href="#function_row-count"><code>ROW_COUNT()</code></a> вернет
-1. Для <code>SELECT * FROM t1 INTO OUTFILE
'<em><code>file_name</code></em>'</code>
<a href="#function_row-count"><code>ROW_COUNT()</code></a> вернет
число строк, записанных в файл.</li>
<li><a href="sql.htm#signal"><code>SIGNAL</code></a>: 0.</p></li></ul>

<p>Для <a href="sql.htm#update"><code>UPDATE</code></a> значение затронутых
строк по умолчанию число строк, фактически измененных. Если Вы определяете
флаг <code>CLIENT_FOUND_ROWS</code> для
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a> соединяясь с <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>, значение затронутых строк число найденных строк, то есть,
соответствующее предложение <code>WHERE</code>.</p>

<p>Для <a href="sql.htm#replace"><code>REPLACE</code></a> значение затронутых
строк 2, если новая строка заменяла старую строку, потому что в этом случае
одна строка была вставлена после того, как дубликат был удален.</p>

<p>Для <a href="sql.htm#insert-on-duplicate"><code>INSERT
... ON DUPLICATE KEY UPDATE</code></a> значение затронутых строк для каждой
строки 1, если строка вставлена как новая строка, 2, если существующая строка
обновлена, и 0, если существующая строка установлена в ее текущее
состояние. Если Вы определяете флаг <code>CLIENT_FOUND_ROWS</code>,
значение затронутых строк 1 (не 0), если существующая строка установлена в
ее текущее состояние.</p>

<p>Значение <a href="#function_row-count"><code>ROW_COUNT()</code>
</a> подобно значению функции C API
<a href="connect.htm#mysql-affected-rows"><code>mysql_affected_rows()</code>
</a> и количеству строк, которое выводит на экран клиент
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>.
<pre>
mysql&gt; INSERT INTO t VALUES(1),(2),(3);
Query OK, 3 rows affected (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql&gt; SELECT ROW_COUNT();
+-------------+
| ROW_COUNT() |
+-------------+
| 3           |
+-------------+
1 row in set (0.00 sec)

mysql&gt; DELETE FROM t WHERE i IN(1,2);
Query OK, 2 rows affected (0.00 sec)

mysql&gt; SELECT ROW_COUNT();
+-------------+
| ROW_COUNT() |
+-------------+
| 2           |
+-------------+
1 row in set (0.00 sec)
</pre>

<p><a href="#function_row-count"><code>ROW_COUNT()</code></a>
не копируется достоверно, используя основанную на запросе репликацию. Эта
функция автоматически копируется, используя основанную на строке репликацию.
</p></li>

<li><a name="function_schema"></a><p>
<a href="#function_schema"><code>SCHEMA()</code></a></p>
<p>Синоним для <a href="#function_database"><code>DATABASE()</code>
</a>.</p></li>

<li><a name="function_session-user"></a><p>
<a href="#function_session-user"><code>SESSION_USER()</code></a>
<p><a href="#function_session-user"><code>SESSION_USER()</code></a>
синоним для <a href="#function_user"><code>USER()</code></a>.
</p></li>

<li><a name="function_system-user"></a><p>
<a href="#function_system-user"><code>SYSTEM_USER()</code></a></p>
<p><a href="#function_system-user"><code>SYSTEM_USER()</code></a>
синоним для <a href="#function_user"><code>USER()</code></a>.
</p></li>

<li><a name="function_user"></a><p>
<a href="#function_user"><code>USER()</code></a></p>
<p>Возвращает текущее имя пользователя MySQL и имя хоста
как строку в <code>utf8</code>.
<pre>
mysql&gt; SELECT USER();
    -&gt; 'davida@localhost'
</pre>

<p>Значение указывает на имя пользователя, которое Вы определили, соединяясь
с сервером, и хост клиента, с которого Вы соединялись. Значение может
отличаться от значения из <a href="#function_current-user"><code>
CURRENT_USER()</code></a>.</p></li>

<li><a name="function_version"></a><p>
<a href="#function_version"><code>VERSION()</code></a></p>
<p>Возвращает строку, которая указывает на версию сервера MySQL.
Строка использует <code>utf8</code>. У значения может быть суффикс в
дополнение к номеру версии. См. описание системной переменной
<a href="server.htm#sysvar_version"><code>version</code></a> в
<a href="server.htm#server-system-variables">разделе 6.1.5</a>.</p>

<p>Эта функция опасна для основанной на запросах репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
установлена в <code>STATEMENT</code>.
<pre>
mysql&gt; SELECT VERSION();
    -&gt; '8.0.1-standard'
</pre></li></ul>

<h2><a name="spatial-analysis-functions"></a>13.15.
Пространственные аналитические функции</h2>
<p>MySQL обеспечивает функции, чтобы выполнить различные операции на
пространственных данных. Эти функции могут быть сгруппированы в несколько
главных категорий согласно типу работы, которую они выполняют:</p>

<ul><li><p>Функции, которые создают конфигурации в различных форматах
(WKT, WKB, internal).</li>
<li>Функции, которые преобразовывают конфигурации между форматами.</li>
<li>Функции, которые предоставляют доступ к качественным или
количественным свойствам геометрии.</li>
<li>Функции, которые описывают отношения между двумя конфигурациями.</li>
<li>Функции, которые создают новые конфигурации из существующих.
</p></li></ul>
<p>Для общего обзора о поддержке MySQL использования пространственных данных
см. <a href="types.htm#spatial-extensions">раздел 12.5</a>.</p>

<h3><a name="spatial-function-reference"></a>13.15.1.
Обзор пространственных функций</h3>
<p>Следующая таблица приводит каждую пространственную функцию и обеспечивает
краткое описание каждой.</p>

<a name="idm139965349930624"></a><p><b>
Таблица 13.19. Пространственные функции</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_geometrycollection">
<code>GeometryCollection()</code></a></td><td>
Создает набор геометрии из конфигураций</td></tr>
<tr><td scope="row"><a href="#function_linestring"><code>
LineString()</code></a></td><td>Создает LineString из значений Point
</td></tr>
<tr><td scope="row"><a href="#function_mbrcontains"><code>
MBRContains()</code></a></td><td>Содержит ли MBR одной геометрии MBR другой
</td></tr>
<tr><td scope="row"><a href="#function_mbrcoveredby"><code>
MBRCoveredBy()</code></a></td><td>Покрыт ли один MBR другим</td></tr>
<tr><td scope="row"><a href="#function_mbrcovers"><code>MBRCovers()
</code></a></td><td>Покрывает ли один MBR другого</td></tr>
<tr><td scope="row"><a href="#function_mbrdisjoint"><code>
MBRDisjoint()</code></a></td><td>Являются ли MBR двух конфигураций несвязными
</td></tr>
<tr><td scope="row"><a href="#function_mbrequals"><code>MBREquals()
</code></a></td><td>Равны ли MBR двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_mbrintersects"><code>
MBRIntersects()</code></a></td><td>Пересекаются ли MBR двух конфигураций
</td></tr>
<tr><td scope="row"><a href="#function_mbroverlaps"><code>
MBROverlaps()</code></a></td><td>Есть ли перекрытие у двух MBR</td></tr>
<tr><td scope="row"><a href="#function_mbrtouches"><code>
MBRTouches()</code></a></td><td>Есть ли касание у двух MBR</td></tr>
<tr><td scope="row"><a href="#function_mbrwithin"><code>MBRWithin()
</code></a></td><td>Находится ли MBR одной геометрии в пределах MBR другой
</td></tr>
<tr><td scope="row"><a href="#function_multilinestring"><code>
MultiLineString()</code></a></td><td>Собирает MultiLineString из LineString
</td></tr>
<tr><td scope="row"><a href="#function_multipoint"><code>
MultiPoint()</code></a></td><td>Собирает MultiPoint из Point</td></tr>
<tr><td scope="row"><a href="#function_multipolygon"><code>
MultiPolygon()</code></a></td><td>Собирает MultiPolygon из Polygon</td></tr>
<tr><td scope="row"><a href="#function_point"><code>Point()</code>
</a></td><td>Собирает Point из координат</td></tr>
<tr><td scope="row"><a href="#function_polygon"><code>Polygon()
</code></a></td><td>Собирает Polygon из LineString</td></tr>
<tr><td scope="row"><a href="#function_st-area"><code>ST_Area()
</code></a></td><td>Вернет область Polygon или MultiPolygon</td></tr>
<tr><td scope="row"><a href="#function_st-asbinary"><code>
ST_AsBinary()</code>, <code>ST_AsWKB()</code></a></td><td>
Переходит от внутренней геометрии к WKB</td></tr>
<tr><td scope="row"><a href="#function_st-asgeojson"><code>
ST_AsGeoJSON()</code></a></td><td>Генерирует объект GeoJSON</td></tr>
<tr><td scope="row"><a href="#function_st-astext"><code>ST_AsText()
</code>, <code>ST_AsWKT()</code></a></td><td>Переходит от внутренней
геометрии к WKT</td></tr>
<tr><td scope="row"><a href="#function_st-buffer"><code>ST_Buffer()
</code></a></td><td>Возвратит геометрию точек в пределах данного
расстояния от геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-buffer-strategy"><code>
ST_Buffer_Strategy()</code></a></td><td>Произведет опцию стратегии для
ST_Buffer()</td></tr>
<tr><td scope="row"><a href="#function_st-centroid"><code>
ST_Centroid()</code></a></td><td>Вернет центр как точку</td></tr>
<tr><td scope="row"><a href="#function_st-contains"><code>
ST_Contains()</code></a></td><td>Содержит ли одна геометрия другую</td></tr>
<tr><td scope="row"><a href="#function_st-convexhull"><code>
ST_ConvexHull()</code></a></td><td>Возвратит выпуклый корпус геометрии</td>
</tr>
<tr><td scope="row"><a href="#function_st-crosses"><code>
ST_Crosses()</code></a></td><td>Пересекает ли одна геометрия другую</td></tr>
<tr><td scope="row"><a href="#function_st-difference"><code>
ST_Difference()</code></a></td><td>Возвратит различие в наборе
точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-dimension"><code>
ST_Dimension()</code></a></td><td>Измерение геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-disjoint"><code>
ST_Disjoint()</code></a></td><td>Является ли одна
геометрия несвязной с другой</td></tr>
<tr><td scope="row"><a href="#function_st-distance"><code>
ST_Distance()</code></a></td><td>Расстояние одной геометрии от другой</td>
</tr>
<tr><td scope="row"><a href="#function_st-distance-sphere"><code>
ST_Distance_Sphere()</code></a></td><td>Минимальное расстояние на земле
между двумя конфигурациями</td></tr>
<tr><td scope="row"><a href="#function_st-endpoint"><code>
ST_EndPoint()</code></a></td><td>Конечный Point LineString</td></tr>
<tr><td scope="row"><a href="#function_st-envelope"><code>
ST_Envelope()</code></a></td><td>MBR геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-equals"><code>ST_Equals()
</code></a></td><td>Равна ли одна геометрия другой</td></tr>
<tr><td scope="row"><a href="#function_st-exteriorring"><code>
ST_ExteriorRing()</code></a></td><td>Возвратит внешнее кольцо Polygon</td>
</tr>
<tr><td scope="row"><a href="#function_st-geohash"><code>
ST_GeoHash()</code></a></td><td>Произведит значение geohash</td></tr>
<tr><td scope="row"><a href="#function_st-geomcollfromtext"><code>
ST_GeomCollFromText()</code>, <code>ST_GeometryCollectionFromText()</code>,
<code>ST_GeomCollFromTxt()</code></a></td><td>Набор геометрии из WKT</td>
</tr>
<tr><td scope="row"><a href="#function_st-geomcollfromwkb"><code>
ST_GeomCollFromWKB()</code>, <code>ST_GeometryCollectionFromWKB()</code></a>
</td><td>Набор геометрии из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-geometryn"><code>
ST_GeometryN()</code></a></td><td>Возвратит N-ую геометрию
из набора геометрий</td></tr>
<tr><td scope="row"><a href="#function_st-geometrytype"><code>
ST_GeometryType()</code></a></td><td>Возвратит название типа геометрии</td>
</tr>
<tr><td scope="row"><a href="#function_st-geomfromgeojson"><code>
ST_GeomFromGeoJSON()</code></a></td><td>Произведет геометрию из объекта
GeoJSON</td></tr>
<tr><td scope="row"><a href="#function_st-geomfromtext"><code>
ST_GeomFromText()</code>, <code>ST_GeometryFromText()</code></a></td><td>
Набор геометрии из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-geomfromwkb"><code>
ST_GeomFromWKB()</code>, <code>ST_GeometryFromWKB()</code></a></td><td>
Набор геометрии из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-interiorringn"><code>
ST_InteriorRingN()</code></a></td><td>Вернет N-ое внутреннее кольцо Polygon
</td></tr>
<tr><td scope="row"><a href="#function_st-intersection"><code>
ST_Intersection()</code></a></td>
<td>Пересечение набора точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-intersects"><code>
ST_Intersects()</code></a></td><td>Пересекает ли одна геометрия другую
</td></tr>
<tr><td scope="row"><a href="#function_st-isclosed"><code>
ST_IsClosed()</code></a></td><td>Закрыта ли геометрия и проста</td></tr>
<tr><td scope="row"><a href="#function_st-isempty"><code>
ST_IsEmpty()</code></a></td><td>Функция заполнителя</td></tr>
<tr><td scope="row"><a href="#function_st-issimple"><code>
ST_IsSimple()</code></a></td><td>Проста ли геометрия</td></tr>
<tr><td scope="row"><a href="#function_st-isvalid"><code>
ST_IsValid()</code></a></td><td>Допустима ли геометрия</td></tr>
<tr><td scope="row"><a href="#function_st-latfromgeohash"><code>
ST_LatFromGeoHash()</code></a></td><td>Возвратит широту из значения geohash
</td></tr>
<tr><td scope="row"><a href="#function_st-length"><code>ST_Length()
</code></a></td><td>Возвратит длину LineString</td></tr>
<tr><td scope="row"><a href="#function_st-linefromtext"><code>
ST_LineFromText()</code>, <code>ST_LineStringFromText()</code></a></td><td>
Собирает LineString из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-linefromwkb"><code>
ST_LineFromWKB()</code>, <code>ST_LineStringFromWKB()</code></a></td><td>
Собирает LineString из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-longfromgeohash"><code>
ST_LongFromGeoHash()</code></a></td><td>Возвратит долготу из значения geohash
</td></tr>
<tr><td scope="row"><a href="#function_st-makeenvelope"><code>
ST_MakeEnvelope()</code></a></td><td>Прямоугольник вокруг двух точек</td>
</tr>
<tr><td scope="row"><a href="#function_st-mlinefromtext"><code>
ST_MLineFromText()</code>, <code>ST_MultiLineStringFromText()</code></a></td>
<td>Собирает MultiLineString из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mlinefromwkb"><code>
ST_MLineFromWKB()</code>, <code>ST_MultiLineStringFromWKB()</code></a></td>
<td>Собирает MultiLineString из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-mpointfromtext"><code>
ST_MPointFromText()</code>, <code>ST_MultiPointFromText()</code></a></td>
<td>Собирает MultiPoint из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mpointfromwkb"><code>
ST_MPointFromWKB()</code>, <code>ST_MultiPointFromWKB()</code></a></td>
<td>Собирает MultiPoint из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-mpolyfromtext"><code>
ST_MPolyFromText()</code>, <code>ST_MultiPolygonFromText()</code></a></td>
<td>Собирает MultiPolygon из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-mpolyfromwkb"><code>
ST_MPolyFromWKB()</code>, <code>ST_MultiPolygonFromWKB()</code></a></td>
<td>Собирает MultiPolygon из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-numgeometries"><code>
ST_NumGeometries()</code></a></td><td>Число конфигураций в наборе геометрии
</td></tr>
<tr><td scope="row"><a href="#function_st-numinteriorrings"><code>
ST_NumInteriorRing()</code>, <code>ST_NumInteriorRings()</code></a></td>
<td>Число углов в Polygon</td></tr>
<tr><td scope="row"><a href="#function_st-numpoints"><code>
ST_NumPoints()</code></a></td><td>Число точек в LineString</td></tr>
<tr><td scope="row"><a href="#function_st-overlaps"><code>
ST_Overlaps()</code></a></td><td>Перекрывает ли одна геометрия другую</td>
</tr>
<tr><td scope="row"><a href="#function_st-pointfromgeohash"><code>
ST_PointFromGeoHash()</code></a></td>
<td>Конвертирует geohash в POINT</td></tr>
<tr><td scope="row"><a href="#function_st-pointfromtext"><code>
ST_PointFromText()</code></a></td><td>Собирает Point из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-pointfromwkb"><code>
ST_PointFromWKB()</code></a></td><td>Собирает Point из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-pointn"><code>ST_PointN()
</code></a></td><td>Возвратит N-ую точку LineString</td></tr>
<tr><td scope="row"><a href="#function_st-polyfromtext"><code>
ST_PolyFromText()</code>, <code>ST_PolygonFromText()</code></a></td><td>
Собирает Polygon из WKT</td></tr>
<tr><td scope="row"><a href="#function_st-polyfromwkb"><code>
ST_PolyFromWKB()</code>, <code>ST_PolygonFromWKB()</code></a></td><td>
Собирает Polygon из WKB</td></tr>
<tr><td scope="row"><a href="#function_st-simplify"><code>
ST_Simplify()</code></a></td><td>Возвратит упрощенную геометрию</td></tr>
<tr><td scope="row"><a href="#function_st-srid"><code>ST_SRID()
</code></a></td><td>Возвратит пространственный ссылочный системный
ID для геометрии</td></tr>
<tr><td scope="row"><a href="#function_st-startpoint"><code>
ST_StartPoint()</code></a></td><td>Стартовая Point LineString</td></tr>
<tr><td scope="row"><a href="#function_st-symdifference"><code>
ST_SymDifference()</code></a></td><td>Возвратит набор точек
симметрического различия двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-touches"><code>
ST_Touches()</code></a></td><td>Касается ли одна геометрия другой</td></tr>
<tr><td scope="row"><a href="#function_st-union"><code>ST_Union()
</code></a></td><td>Возвратит набор общих точек двух конфигураций</td></tr>
<tr><td scope="row"><a href="#function_st-validate"><code>
ST_Validate()</code></a></td><td>Возвратит утвержденную геометрию</td></tr>
<tr><td scope="row"><a href="#function_st-within"><code>ST_Within()
</code></a></td><td>Является ли одна геометрия в пределах другой</td></tr>
<tr><td scope="row"><a href="#function_st-x"><code>ST_X()</code></a>
</td><td>Координата X Point</td></tr>
<tr><td scope="row"><a href="#function_st-y"><code>ST_Y()</code></a>
</td><td>Координата Y Point</td></tr></tbody></table>

<h3><a name="spatial-function-argument-handling"></a>13.15.2.
Обработка параметров пространственными функциями</h3>
<p>Пространственные значения, или конфигурации, имеют свойства, описанные в
<a href="types.htm#gis-class-geometry">разделе 12.5.2.2</a>.
Следующее обсуждение рассматривает общие пространственные функциональные
характеристики параметров. У определенных функций или групп функций могут
быть дополнительные характеристики, как обсуждается в разделах, где
те функции описаны.</p>

<p>Пространственные функции определены только для допустимых значений
геометрии. Если недопустимую геометрию передают к пространственной
функции, результат неопределен.
</p>

<p>Spatial Reference Identifier (SRID) идентифицирует координатное
пространство, в котором определена геометрия. В MySQL значение SRID целое
число, связанное со значением геометрии. Однако, все вычисления сделаны,
принимая SRID 0, представляя декартовские (плоские) координаты, независимо от
фактического значения SRID. В будущем вычисления могут использовать указанные
значения SRID. Чтобы гарантировать поведение для SRID 0, создавайте
конфигурации, используя SRID 0. SRID 0 является значением по умолчанию для
новых конфигураций, если никакой SRID не определен.</p>

<p>Максимальное применимое значение SRID 2<sup>32</sup>-1.
Если большее значение дано, используются только первые 32 бита.</p>
<p>Значения геометрии, произведенные любой пространственной функцией,
наследуют SRID параметров геометрии.</p>

<p>Пространственные функции, которые берут много параметров геометрии,
требуют, чтобы у тех параметров было то же самое значение SRID. Предполагая,
что SRIDs равны, пространственные функции ничего не делают с ними после
выполнения проверки равенства, значения геометрии неявно обработаны,
используя декартовские координаты. Если пространственная функция возвращает
<a href="error.htm#error_er_gis_different_srids"><code>ER_GIS_DIFFERENT_SRIDS
</code></a>, это означает, что у параметров геометрии не было того же самого
SRID. Вы должны изменить их, чтобы иметь тот же самый SRID.</p>

<p>Пространственные функции возвращают ошибку
<a href="error.htm#error_er_gis_invalid_data"><code>ER_GIS_INVALID_DATA
</code></a>, если передан недопустимый параметр геометрии.</p>

<p>Open Geospatial Consortium требует, чтобы вводные многоугольники
уже были закрытыми, таким образом, открытые многоугольники отклонены как
недопустимые вместо того, чтобы закрыть.</p>

<p>Пустая обработка набора геометрии следующяя:
пустой входной набор геометрии WKT может быть определен как
<code>'GEOMETRYCOLLECTION()'</code>. Это также вывод WKT, следующий из
пространственной работы, которая производит пустой набор геометрии.</p>

<p>Во время парсинга вложенного набора геометрии набор обработан, и его
основные компоненты используются в различных операциях GIS, чтобы вычислить
результаты. Это предоставляет дополнительную гибкость пользователям, потому
что не нужно касаться уникальности данных о геометрии. Вложенные наборы
геометрии могут быть произведены из вложенных вызовов функции GIS.</p>

<h3><a name="gis-wkt-functions"></a>13.15.3.
Функции, которые создают значения геометрии из значений WKT</h3>
<p>Эти функции берут в качестве параметров представление Well-Known Text
(WKT) и, произвольно, SRID. Они возвращают соответствующую геометрию.</p>

<p><a href="#function_st-geomfromtext"><code>ST_GeomFromText()
</code></a> принимает значение WKT любого типа геометрии как первый параметр.
Другие функции обеспечивают определенные для типа функции конструкции для
значений геометрии каждого типа геометрии.</p>

<p>Функции, которые принимают параметры набора геометрии WKT, понимают оба
синтаксиса: стандартный OpenGIS <code>'GEOMETRYCOLLECTION EMPTY'</code> и
нестандартный MySQL <code>'GEOMETRYCOLLECTION()'</code>. Функции, которые
производят значения WKT, производят стандартный
синтаксис <code>'GEOMETRYCOLLECTION EMPTY'</code>:
<pre>
mysql&gt; SET @s1 = ST_GeomFromText('GEOMETRYCOLLECTION()');
mysql&gt; SET @s2 = ST_GeomFromText('GEOMETRYCOLLECTION EMPTY');
mysql&gt; SELECT ST_AsWKT(@s1), ST_AsWKT(@s2);
+--------------------------+--------------------------+
| ST_AsWKT(@s1)            | ST_AsWKT(@s2)            |
+--------------------------+--------------------------+
| GEOMETRYCOLLECTION EMPTY | GEOMETRYCOLLECTION EMPTY |
+--------------------------+--------------------------+
</pre>
<p>Для описания формата WKT см. <a href="types.htm#gis-wkt-format">раздел
12.5.3.1.1</a>.</p>

<ul><li><a name="function_st-geomcollfromtext"></a><p>
<a href="#function_st-geomcollfromtext"><code>ST_GeomCollFromText(
<em><code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-geomcollfromtext"><code>
ST_GeometryCollectionFromText(<em><code>wkt</code></em>[,<em><code>srid
</code></em>])</code></a>,
<a href="#function_st-geomcollfromtext"><code>ST_GeomCollFromTxt(
<em><code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>

<p>Конструирует значение <code>GeometryCollection</code>,
используя его представление WKT и SRID.
<pre>
mysql&gt; SET @g = "MULTILINESTRING((10 10, 11 11), (9 9, 10 10))";
mysql&gt; SELECT ST_AsText(ST_GeomCollFromText(@g));
+--------------------------------------------+
| ST_AsText(ST_GeomCollFromText(@g))         |
+--------------------------------------------+
| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |
+--------------------------------------------+
</pre></li>

<li><a name="function_st-geomfromtext"></a><p>
<a href="#function_st-geomfromtext"><code>ST_GeomFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-geomfromtext"><code>ST_GeometryFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует значение геометрии любого типа, используя его
представление WKT и SRID.</p></li>

<li><a name="function_st-linefromtext"></a><p>
<a href="#function_st-linefromtext"><code>ST_LineFromText(<em><code>
wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-linefromtext"><code>ST_LineStringFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует значение <code>LineString</code>, используя его
представление WKT и SRID.</p></li>

<li><a name="function_st-mlinefromtext"></a><p>
<a href="#function_st-mlinefromtext"><code>ST_MLineFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mlinefromtext"><code>
ST_MultiLineStringFromText(<em><code>wkt</code></em>[,<em><code>srid</code>
</em>])</code></a></p>
<p>Конструирует <code>MultiLineString</code>
используя его представление WKT и SRID.</p></li>

<li><a name="function_st-mpointfromtext"></a><p>
<a href="#function_st-mpointfromtext"><code>ST_MPointFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mpointfromtext"><code>ST_MultiPointFromText(
<em><code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>MultiPoint</code>
используя его представление WKT и SRID.</p>

<p>В MySQL 8.0 пространственные функции вроде
<a href="#function_st-mpointfromtext"><code>ST_MPointFromText()
</code></a> и <a href="#function_st-geomfromtext"><code>
ST_GeomFromText()</code></a>, которые принимают представления WKT-формата
<code>MultiPoint</code> разрешают отдельным пунктам в пределах значений быть
окруженными круглыми скобками. Например, оба из следующих
вызовов функции допустимы:
<pre>
ST_MPointFromText('MULTIPOINT (1 1, 2 2, 3 3)')
ST_MPointFromText('MULTIPOINT ((1 1), (2 2), (3 3))')
</pre></li>

<li><a name="function_st-mpolyfromtext"></a><p>
<a href="#function_st-mpolyfromtext"><code>ST_MPolyFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mpolyfromtext"><code>ST_MultiPolygonFromText(
<em><code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>MultiPolygon</code>
используя его представление WKT и SRID.</p></li>

<li><a name="function_st-pointfromtext"></a><p>
<a href="#function_st-pointfromtext"><code>ST_PointFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>Point</code> используя его представление WKT и SRID.
</p></li>

<li><a name="function_st-polyfromtext"></a><p>
<a href="#function_st-polyfromtext"><code>ST_PolyFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-polyfromtext"><code>ST_PolygonFromText(<em>
<code>wkt</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>Polygon</code> используя его представление WKT и SRID.
</p></li></ul>

<h3><a name="gis-wkb-functions"></a>13.15.4. Функции, которые создают
значения геометрии из значений WKB</h3>
<p>Эти функции берут в качестве параметров
<a href="types.htm#blob"><code>BLOB</code></a>, содержащий представление
Well-Known Binary (WKB) и, произвольно, пространственный ссылочный системный
идентификатор (SRID). Они возвращают соответствующую геометрию.</p>

<p>Эти функции также принимают объекты геометрии для совместимости с
возвращаемым значением функций в
<a href="#gis-mysql-specific-functions">разделе 13.15.5</a>.
Таким образом, те функции могут использоваться, чтобы обеспечить первый
параметр функциям в этом разделе.</p>

<p><a href="#function_st-geomfromwkb"><code>ST_GeomFromWKB()</code>
</a> принимает значение WKB любого типа геометрии как
первый параметр. Другие функции обеспечивают определенные для типа функции
для конструкции значений геометрии каждого типа.</p>

<ul><li><a name="function_st-geomcollfromwkb"></a><p>
<a href="#function_st-geomcollfromwkb"><code>ST_GeomCollFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-geomcollfromwkb"><code>
ST_GeometryCollectionFromWKB(<em><code>wkb</code></em>[,
<em><code>srid</code></em>])</code></a></p>

<p>Конструирует <code>GeometryCollection</code>
используя его представление WKB и SRID.</p></li>
<li><a name="function_st-geomfromwkb"></a><p>
<a href="#function_st-geomfromwkb"><code>ST_GeomFromWKB(<em><code>
wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-geomfromwkb"><code>ST_GeometryFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует значение геометрии любого типа, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-linefromwkb"></a><p>
<a href="#function_st-linefromwkb"><code>ST_LineFromWKB(<em><code>
wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-linefromwkb"><code>ST_LineStringFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>LineString</code>, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-mlinefromwkb"></a><p>
<a href="#function_st-mlinefromwkb"><code>ST_MLineFromWKB(<em><code>
wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mlinefromwkb"><code>
ST_MultiLineStringFromWKB(<em><code>wkb</code></em>[,
<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>MultiLineString</code>, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-mpointfromwkb"></a><p>
<a href="#function_st-mpointfromwkb"><code>ST_MPointFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mpointfromwkb"><code>ST_MultiPointFromWKB(
<em><code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>MultiPoint</code>, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-mpolyfromwkb"></a><p>
<a href="#function_st-mpolyfromwkb"><code>ST_MPolyFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-mpolyfromwkb"><code>ST_MultiPolygonFromWKB(
<em><code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>MultiPolygon</code>, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-pointfromwkb"></a><p>
<a href="#function_st-pointfromwkb"><code>ST_PointFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>Point</code>, используя его
представление WKB и SRID.</p></li>

<li><a name="function_st-polyfromwkb"></a><p>
<a href="#function_st-polyfromwkb"><code>ST_PolyFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a>,
<a href="#function_st-polyfromwkb"><code>ST_PolygonFromWKB(<em>
<code>wkb</code></em>[,<em><code>srid</code></em>])</code></a></p>
<p>Конструирует <code>Polygon</code>, используя его
представление WKB и SRID.</p></li></ul>

<h3><a name="gis-mysql-specific-functions"></a>13.15.5.
Функции MySQL, которые создают значения геометрии</h3>
<p>MySQL обеспечивает ряд полезных нестандартных функций для того, чтобы
создать значения геометрии. Функции, описанные в этом разделе, являются
расширениями MySQL к спецификации OpenGIS.</p>

<p>Эти функции производят объекты геометрии или из значений WKB или из
объектов геометрии как параметры. Если какой-либо параметр не надлежащий WKB
или представление геометрии надлежащего типа объекта,
возвращаемое значение <code>NULL</code>.</p>

<p>Например, Вы можете вставить возвращаемое значение геометрии из
<a href="#function_point"><code>Point()</code></a>
непосредственно в столбец <code>POINT</code>:
<pre>
INSERT INTO t1 (pt_col) VALUES(Point(1,2));
</pre>

<ul><li><a name="function_geometrycollection"></a><p>
<a href="#function_geometrycollection"><code>GeometryCollection(<em>
<code>g1</code></em>,<em><code>g2</code></em>,...)</code></a></p>
<p>Конструирует <code>GeometryCollection</code>.</p>

<p><a href="#function_geometrycollection"><code>GeometryCollection()
</code></a> возвращает все надлежащие конфигурации в параметре, даже если
присутствует неподдержанная геометрия.</p>

<p><a href="#function_geometrycollection"><code>GeometryCollection()
</code></a> без параметров разрешена как способ создать пустую геометрию.
</p></li>

<li><a name="function_linestring"></a><p>
<a href="#function_linestring"><code>LineString(<em><code>pt1
</code></em>,<em><code>pt2</code></em>,...)</code></a></p>

<p>Конструирует <code>LineString</code> значение из многих параметров
<code>Point</code> или WKB <code>Point</code>. Если число параметров меньше,
чем два, возвращаемое значение <code>NULL</code>.</p></li>

<li><a name="function_multilinestring"></a><p>
<a href="#function_multilinestring"><code>MultiLineString(<em><code>
ls1</code></em>,<em><code>ls2</code></em>,...)</code></a></p>
<p>Конструирует <code>MultiLineString</code> с использованием значения
<code>LineString</code> или WKB <code>LineString</code>.</p></li>

<li><a name="function_multipoint"></a><p>
<a href="#function_multipoint"><code>MultiPoint(<em><code>pt1</code>
</em>, <em><code>pt2</code></em>,...)</code></a></p>
<p>Конструирует <code>MultiPoint</code> с использованием значения
<code>Point</code> или WKB <code>Point</code>.</p></li>

<li><a name="function_multipolygon"></a><p>
<a href="#function_multipolygon"><code>MultiPolygon(<em><code>
poly1</code></em>,<em><code>poly2</code></em>,...)</code></a></p>
<p>Конструирует <code>MultiPolygon</code> из ряда параметров
<code>Polygon</code> или WKB <code>Polygon</code>.</p></li>

<li><a name="function_point"></a><p>
<a href="#function_point"><code>Point(<em><code>x</code></em>,
<em><code>y</code></em>)</code></a></p>
<p>Конструирует <code>Point</code> с использованием его координат.</p></li>

<li><a name="function_polygon"></a><p>
<a href="#function_polygon"><code>Polygon(<em><code>ls1</code></em>,
<em><code>ls2</code></em>,...)</code></a></p>

<p>Конструирует <code>Polygon</code> значение из многих параметров
<code>LineString</code> или WKB <code>LineString</code>.
Если какой-либо параметр не представляет <code>LinearRing</code>
(то есть, не закрытый и простое <code>LineString</code>),
возвращаемое значение <code>NULL</code>.</p></li></ul>

<h3><a name="gis-format-conversion-functions"></a>13.15.6.
Конверсионные функции формата геометрии</h3>
<p>MySQL поддерживает функции, перечисленные в этом разделе для того, чтобы
преобразовать значения геометрии из внутреннего формата геометрии в формат
WKB или WKT.</p>

<p>Кроме того, есть функции, чтобы преобразовать строку из WKT или WKB
к внутреннему формату геометрии. См. разделы
<a href="#gis-wkt-functions">13.15.3</a> и
<a href="#gis-wkb-functions">13.15.4</a>.</p>

<p>Функции, которые принимают параметры набора геометрии WKT, понимают оба
синтаксиса: OpenGIS <code>'GEOMETRYCOLLECTION EMPTY'</code> и MySQL
<code>'GEOMETRYCOLLECTION()'</code>. Функции, которые производят значения
WKT, производят стандартный синтаксис <code>'GEOMETRYCOLLECTION EMPTY'</code>:
<pre>
mysql&gt; SET @s1 = ST_GeomFromText('GEOMETRYCOLLECTION()');
mysql&gt; SET @s2 = ST_GeomFromText('GEOMETRYCOLLECTION EMPTY');
mysql&gt; SELECT ST_AsWKT(@s1), ST_AsWKT(@s2);
+--------------------------+--------------------------+
| ST_AsWKT(@s1)            | ST_AsWKT(@s2)            |
+--------------------------+--------------------------+
| GEOMETRYCOLLECTION EMPTY | GEOMETRYCOLLECTION EMPTY |
+--------------------------+--------------------------+
</pre>

<ul><li><a name="function_st-asbinary"></a><p>
<a href="#function_st-asbinary"><code>ST_AsBinary(<em><code>g</code>
</em>)</code></a>,
<a href="#function_st-asbinary"><code>ST_AsWKB(<em><code>g</code>
</em>)</code></a></p>

<p>Преобразовывает значение во внутреннем формате геометрии к его
представлению WKB и возвращает двоичный результат.
<pre>
SELECT ST_AsBinary(g) FROM geom;
</pre></li>

<li><a name="function_st-astext"></a><p>
<a href="#function_st-astext"><code>ST_AsText(<em><code>g</code>
</em>)</code></a>,
<a href="#function_st-astext"><code>ST_AsWKT(<em><code>g</code>
</em>)</code></a></p>

<p>Преобразовывает значение во внутреннем формате геометрии к его
представлению WKT и возвращает строковый результат.
<pre>
mysql&gt; SET @g = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_GeomFromText(@g));
+--------------------------------+
| ST_AsText(ST_GeomFromText(@g)) |
+--------------------------------+
| LINESTRING(1 1,2 2,3 3)        |
+--------------------------------+
</pre>

<p>Вывод для значения <code>MultiPoint</code>
включает круглые скобки вокруг каждого пункта. Например:
<pre>
mysql&gt; SELECT ST_AsText(ST_GeomFromText(@mp));
+---------------------------------+
| ST_AsText(ST_GeomFromText(@mp)) |
+---------------------------------+
| MULTIPOINT((1 1),(2 2),(3 3))   |
+---------------------------------+
</pre></li></ul>

<h3><a name="gis-property-functions"></a>13.15.7.
Функции свойства геометрии</h3>
<p>Каждая функция, которая принадлежит этой группе, берет значение геометрии
в качестве своего параметра и возвращает некоторое количественное или
качественное свойство геометрии. Некоторые функции ограничивают свой тип
параметра. Такие функции возвращают <code>NULL</code>, если параметр имеет
неправильный тип геометрии. Например,
<a href="#function_st-area"><code>ST_Area()</code></a>
вернет <code>NULL</code>, если тип объекта не
<code>Polygon</code> или <code>MultiPolygon</code>.</p>

<h4><a name="gis-general-property-functions"></a>13.15.7.1.
Общие функции свойства геометрии</h4>
<p>Функции, перечисленные в этом разделе, не ограничивают свой параметр
и принимают значение геометрии любого типа.</p>

<ul><li><a name="function_st-dimension"></a><p>
<a href="#function_st-dimension"><code>ST_Dimension(<em><code>g
</code></em>)</code></a></p>

<p>Возвращает врожденное измерение значения геометрии
<em><code>g</code></em> или <code>NULL</code>, если параметр
<code>NULL</code>. Измерение может быть -1, 0, 1 или 2. Смысл этих значений
дан в <a href="types.htm#gis-class-geometry">разделе 12.5.2.2</a>.
<pre>
mysql&gt; SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));
+------------------------------------------------------+
| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |
+------------------------------------------------------+
|  1                                                   |
+------------------------------------------------------+
</pre></li>

<li><a name="function_st-envelope"></a><p>
<a href="#function_st-envelope"><code>ST_Envelope(<em><code>g
</code></em>)</code></a></p>

<p>Возвращает минимальный ограничительный прямоугольник (MBR) для значения
геометрии <em><code>g</code></em> или <code>NULL</code>, если параметр
<code>NULL</code>. Результат возвращен как значение <code>Polygon</code>,
которое определено угловыми точками ограничивающего прямоугольника:
<pre>
POLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))

mysql&gt; SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));
+----------------------------------------------------------------+
| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |
+----------------------------------------------------------------+
| POLYGON((1 1, 2 1, 2 2, 1 2, 1 1))                             |
+----------------------------------------------------------------+
</pre>

<p>Если параметр точка или вертикальный (или горизонтальный) линейный
сегмент, <a href="#function_st-envelope"><code>ST_Envelope()</code>
</a> возвращает точку или линейный сегмент как его MBR вместо того, чтобы
возвратить недопустимый многоугольник:
<pre>
mysql&gt; SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));
+----------------------------------------------------------------+
| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |
+----------------------------------------------------------------+
| LINESTRING(1 1, 1 2)                                           |
+----------------------------------------------------------------+
</pre></li>

<li><a name="function_st-geometrytype"></a><p>
<a href="#function_st-geometrytype"><code>ST_GeometryType(<em>
<code>g</code></em>)</code></a></p>

<p>Возвращает двоичную строку, указывающую на название типа геометрии,
к которой принадлежит <em><code>g</code></em> или <code>NULL</code>, если
параметр <code>NULL</code>. Имя соответствует одному
из подклассов <code>Geometry</code>.
<pre>
mysql&gt; SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));
+------------------------------------------------+
| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |
+------------------------------------------------+
| POINT                                          |
+------------------------------------------------+
</pre></li>

<li><a name="function_st-isempty"></a><p>
<a href="#function_st-isempty"><code>ST_IsEmpty(<em><code>g
</code></em>)</code></a></p>

<p>Эта функция заполнитель, который возвращает 0 для любого допустимого
значения геометрии, 1 для любого недопустимого значения геометрии или
<code>NULL</code>, если параметр <code>NULL</code>.</p>
<p>MySQL не поддерживает значения GIS <code>EMPTY</code>, такие
как <code>POINT EMPTY</code>.</p></li>

<li><a name="function_st-issimple"></a><p>
<a href="#function_st-issimple"><code>ST_IsSimple(<em><code>g
</code></em>)</code></a></p>

<p>Возвращает 1, если значение геометрии <em><code>g</code></em>
не имеет никаких аномальных геометрических пунктов, таких как
самопересечение или самокасание.
<a href="#function_st-issimple"><code>ST_IsSimple()</code></a>
возвращает 0, если параметр не прост и <code>NULL</code>,
если параметр <code>NULL</code>.</p>

<p>Описание каждого геометрического класса, данного ранее в главе, включает
особые условия, которые заставляют случай того класса быть классифицированным
как не простой. См. <a href="types.htm#gis-geometry-class-hierarchy">раздел
12.5.2.1</a>.</p></li>

<li><a name="function_st-srid"></a><p>
<a href="#function_st-srid"><code>ST_SRID(<em><code>g</code></em>[,
<em><code>new_srid_val</code></em>])</code></a></p>

<p>В MySQL значение SRID только целое число, связанное со значением
геометрии. Все вычисления сделаны, принимая Евклидову (плоскую) геометрию.</p>
<p>С единственным параметром, представляющим допустимый объект геометрии
<em><code>g</code></em>, <a href="#function_st-srid"><code>ST_SRID()
</code></a> возвращает целое число, указывающее на Spatial Reference System
ID для <em><code>g</code></em> или <code>NULL</code>, если параметр
<code>NULL</code>.</p>

<p>Если параметр не синтаксически правильно построенная геометрия, происходит
ошибка <a href="error.htm#error_er_gis_invalid_data">
<code>ER_GIS_INVALID_DATA</code></a>.</p>

<p>Если дополнительный второй параметр, представляющий допустимое значение
SRID дан, <a href="#function_st-srid"><code>ST_SRID()</code></a>
возвращает объект с тем же самым типом, как его первый параметр, имеющий
значение SRID, равное второму параметру, или <code>NULL</code>, если любой
параметр <code>NULL</code>. Эти условия применяются:</p>

<ul><li><p>Обработка ошибок для первого параметра, что касается синтаксиса
единственного параметра, сделана, как описано ранее.</li>
<li>Если значение SRID во втором параметре не в пределах диапазона
32-битного целого числа без знака, происходит ошибка
<a href="error.htm#error_er_data_out_of_range"><code>ER_DATA_OUT_OF_RANGE
</code></a>.</li>

<li>Если значение SRID во втором параметре не обращается к
пространственной ссылочной системе, происходит ошибка
<a href="error.htm#error_er_srs_not_found"><code>ER_SRS_NOT_FOUND
</code></a>.</p></li></ul>
<pre>
mysql&gt; SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);
mysql&gt; SELECT ST_SRID(@g);
+-------------+
| ST_SRID(@g) |
+-------------+
| 0           |
+-------------+
mysql&gt; SET @g2 = ST_SRID(@g, 4326);
mysql&gt; SELECT ST_SRID(@g2);
+--------------+
| ST_SRID(@g2) |
+--------------+
|   4326       |
+--------------+
</pre></li></ul>

<h4><a name="gis-point-property-functions"></a>13.15.7.2.
Функции и свойства точки</h4>
<p><code>Point</code> состоит из координат X и Y, которые могут быть
получены, используя функции <a href="#function_st-x"><code>ST_X()
</code></a> и <a href="#function_st-y"><code>ST_Y()</code></a>,
соответственно. Эти функции также разрешают дополнительный второй параметр,
который определяет X или значение координаты Y, когда функциональный
результат <code>Point</code> является объектом от первого параметра с
соответствующей измененной координатой, чтобы быть равным второму параметру.
</p>

<ul><li><a name="function_st-x"></a><p>
<a href="#function_st-x"><code>ST_X(<em><code>p</code></em>[,
<em><code>new_x_val</code></em>])</code></a></p>

<p>С единственным параметром, представляющим допустимый объект
<code>Point</code> object <em><code>p</code></em>
<a href="#function_st-x"><code>ST_X()</code></a>
возвращает значение X-координаты <em><code>p</code></em> как число двойной
точности или <code>NULL</code>, если параметр <code>NULL</code>.
Эти условия применяются:</p>

<ul><li><p>Если параметр допустимая геометрия, но не объект
<code>Point</code>, происходит ошибка
<a href="error.htm#error_er_unexpected_geometry_type"><code>
ER_UNEXPECTED_GEOMETRY_TYPE</code></a>.</li>

<li>Если параметр не допустимая геометрия, происходит ошибка
<a href="error.htm#error_er_gis_invalid_data"><code>ER_GIS_INVALID_DATA
</code></a>.</p></li></ul>

<p>Если дополнительный второй параметр, представляющий допустимое значение
X-координаты, дан, <a href="#function_st-x"><code>ST_X()</code></a>
возвращает объект <code>Point</code> с X-координатой, равной второму
параметру, или <code>NULL</code>, если любой параметр <code>NULL</code>.
Эти условия применяются:</p>

<ul><li><p>Обработка ошибок для первого параметра, что касается синтаксиса
единственного параметра, сдалана, как описано ранее.</li>
<li>Если координатное значение во втором параметре
<code>-inf</code>, <code>+inf</code> или <code>NaN</code>, происходит ошибка
<a href="error.htm#error_er_data_out_of_range"><code>ER_DATA_OUT_OF_RANGE
</code></a>.</p></li></ul>

<pre>
mysql&gt; SELECT ST_X(POINT(56.7, 53.34));
+--------------------------+
| ST_X(POINT(56.7, 53.34)) |
+--------------------------+
| 56.7                     |
+--------------------------+

mysql&gt; SELECT ST_AsText(ST_X(POINT(56.7, 53.34), 10.5));
+-------------------------------------------+
| ST_AsText(ST_X(POINT(56.7, 53.34), 10.5)) |
+-------------------------------------------+
| POINT(10.5 53.34)                         |
+-------------------------------------------+
</pre></li>

<li><a name="function_st-y"></a><p>
<a href="#function_st-y"><code>ST_Y(<em><code>p</code></em>[,
<em><code>new_y_val</code></em>])</code></a></p>

<p>С единственным параметром, представляющим допустимый объект
<code>Point</code> <em><code>p</code></em>,
<a href="#function_st-y"><code>ST_Y()</code></a>
возвращает значение Y-координаты <em><code>p</code></em> как число
двойной точности или <code>NULL</code>, если параметр <code>NULL</code>.
Эти условия применяются:</p>

<ul><li><p>Если параметр допустимая геометрия, но не объект
<code>Point</code>, произойдет ошибка
<a href="error.htm#error_er_unexpected_geometry_type"><code>
ER_UNEXPECTED_GEOMETRY_TYPE</code></a>.</li>

<li>Если параметр не допустимая геометрия, произойдет ошибка
<a href="error.htm#error_er_gis_invalid_data"><code>ER_GIS_INVALID_DATA
</code></a>.</p></li></ul>

<p>Если дополнительный второй параметр, представляющий допустимое значение
Y-координаты, дан, <a href="#function_st-y"><code>ST_Y()</code></a>
возвращает объект <code>Point</code> с Y-координатой, равной второму
параметру, или <code>NULL</code>, если любой параметр <code>NULL</code>.
Эти условия применяются:</p>

<ul><li><p>Обработка ошибок для первого параметра, что касается синтаксиса
единственного параметра, сделана как описано ранее.</li>
<li>Если координатное значение во втором параметре <code>-inf</code>,
<code>+inf</code> или <code>NaN</code>, произойдет ошибка
<a href="error.htm#error_er_data_out_of_range"><code>ER_DATA_OUT_OF_RANGE
</code></a>.</p></li></ul>

<pre>
mysql&gt; SELECT ST_Y(POINT(56.7, 53.34));
+--------------------------+
| ST_Y(POINT(56.7, 53.34)) |
+--------------------------+
| 53.34                    |
+--------------------------+

mysql&gt; SELECT ST_AsText(ST_Y(POINT(56.7, 53.34), 10.5));
+-------------------------------------------+
| ST_AsText(ST_Y(POINT(56.7, 53.34), 10.5)) |
+-------------------------------------------+
| POINT(56.7 10.5)                          |
+-------------------------------------------+
</pre></li></ul>

<h4><a name="gis-linestring-property-functions"></a>13.15.7.3.
Функции и свойства LineString и MultiLineString</h4>
<p><code>LineString</code> состоит из значений <code>Point</code>.
Вы можете извлечь особые точки <code>LineString</code>,
посчитайте число точек, которое это содержит, или получить его длину.</p>
<p>Некоторые функции в этом разделе также работают на значениях
<code>MultiLineString</code>.</p>

<ul><li><a name="function_st-endpoint"></a><p>
<a href="#function_st-endpoint"><code>ST_EndPoint(<em><code>ls
</code></em>)</code></a></p>

<p>Возвращает <code>Point</code>, конечную точку значения
<code>LineString</code> <em><code>ls</code></em>.
<pre>
mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));
+----------------------------------------------+
| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |
+----------------------------------------------+
| POINT(3 3)                                   |
+----------------------------------------------+
</pre></li>

<li><a name="function_st-isclosed"></a><p>
<a href="#function_st-isclosed"><code>ST_IsClosed(<em><code>ls
</code></em>)</code></a></p>

<p>Для значения <code>LineString</code> <em><code>ls</code></em>
<a href="#function_st-isclosed"><code>ST_IsClosed()</code></a>
возвращает 1, если <em><code>ls</code></em> закрыт (то есть, значения
<a href="#function_st-startpoint"><code>ST_StartPoint()</code></a> и
<a href="#function_st-endpoint"><code>ST_EndPoint()</code></a>
то же самое).</p>

<p>Для значения <code>MultiLineString</code> <em><code>ls</code></em>
<a href="#function_st-isclosed"><code>ST_IsClosed()</code></a>
возвращает 1, если <em><code>ls</code></em> закрыт (то есть, значения
<a href="#function_st-startpoint"><code>ST_StartPoint()</code></a> и
<a href="#function_st-endpoint"><code>ST_EndPoint()</code></a> те же
самые для каждой <code>LineString</code> в <em><code>ls</code></em>).</p>

<p><a href="#function_st-isclosed"><code>ST_IsClosed()</code></a>
возвращает 0, если <em><code>ls</code></em> не закрыт, и
<code>NULL</code>, если <em><code>ls</code></em> <code>NULL</code>.
<pre>
mysql&gt; SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';
mysql&gt; SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';
mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls1));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls1)) |
+------------------------------------+
| 0                                  |
+------------------------------------+

mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls2));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls2)) |
+------------------------------------+
| 1                                  |
+------------------------------------+
mysql&gt; SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';
mysql&gt; SELECT ST_IsClosed(ST_GeomFromText(@ls3));
+------------------------------------+
| ST_IsClosed(ST_GeomFromText(@ls3)) |
+------------------------------------+
| 0                                  |
+------------------------------------+
</pre></li>

<li><a name="function_st-length"></a><p>
<a href="#function_st-length"><code>ST_Length(<em><code>ls</code>
</em>)</code></a></p>

<p>Возвращает число двойной точности, указывающее на длину
значения <code>LineString</code> или <code>MultiLineString</code>
<em><code>ls</code></em> в его связанной пространственной ссылке. Длина
<code>MultiLineString</code> равна сумме длин элементов.
<pre>
mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_Length(ST_GeomFromText(@ls));
+---------------------------------+
| ST_Length(ST_GeomFromText(@ls)) |
+---------------------------------+
| 2.8284271247461903              |
+---------------------------------+

mysql&gt; SET @mls = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';
mysql&gt; SELECT ST_Length(ST_GeomFromText(@mls));
+----------------------------------+
| ST_Length(ST_GeomFromText(@mls)) |
+----------------------------------+
| 4.242640687119286                |
+----------------------------------+
</pre></li>

<li><a name="function_st-numpoints"></a><p>
<a href="#function_st-numpoints"><code>ST_NumPoints(<em><code>ls
</code></em>)</code></a></p>

<p>Возвращает число объектов <code>Point</code> в значении
<code>LineString</code> <em><code>ls</code></em>.
<pre>
mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_NumPoints(ST_GeomFromText(@ls));
+------------------------------------+
| ST_NumPoints(ST_GeomFromText(@ls)) |
+------------------------------------+
| 3                                  |
+------------------------------------+
</pre></li>

<li><a name="function_st-pointn"></a><p>
<a href="#function_st-pointn"><code>ST_PointN(<em><code>ls
</code></em>,<em><code>N</code></em>)</code></a></p>

<p>Возвращает <em><code>N</code></em>-ый <code>Point</code> в
<code>Linestring</code> <em><code>ls</code></em>.
Точки пронумерованы, начиная с 1.
<pre>
mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));
+----------------------------------------------+
| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |
+----------------------------------------------+
| POINT(2 2)                                   |
+----------------------------------------------+
</pre></li>

<li><a name="function_st-startpoint"></a><p>
<a href="#function_st-startpoint"><code>ST_StartPoint(<em>
<code>ls</code></em>)</code></a></p>

<p>Возвращает <code>Point</code>, который является стартовой точкой
<code>LineString</code> <em><code>ls</code></em>.
<pre>
mysql&gt; SET @ls = 'LineString(1 1,2 2,3 3)';
mysql&gt; SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));
+------------------------------------------------+
| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |
+------------------------------------------------+
| POINT(1 1)                                     |
+------------------------------------------------+
</pre></li></ul>

<h4><a name="gis-polygon-property-functions"></a>13.15.7.4.
Функции и свойства Polygon и MultiPolygon</h4>
<p>Эти функции возвращают свойства значения <code>Polygon</code>
или <code>MultiPolygon</code>.</p>

<ul><li><a name="function_st-area"></a><p>
<a href="#function_st-area"><code>ST_Area(<em><code>poly</code>
</em>)</code></a></p>

<p>Возвращает число двойной точности, указывающее на область параметра, как
измерено в его пространственной ссылочной системе.
Для параметров измерения 0 или 1 результат 0.</p>

<p>Результат сумма значений областей всех компонентов для набора геометрии.
Если набор геометрии пуст, его область возвращена как 0.
<pre>
mysql&gt; SET @poly = 'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';
mysql&gt; SELECT ST_Area(ST_GeomFromText(@poly));
+---------------------------------+
| ST_Area(ST_GeomFromText(@poly)) |
+---------------------------------+
| 4                               |
+---------------------------------+

mysql&gt; SET @mpoly =
    -&gt;     'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';
mysql&gt; SELECT ST_Area(ST_GeomFromText(@mpoly));
+----------------------------------+
| ST_Area(ST_GeomFromText(@mpoly)) |
+----------------------------------+
|  8                               |
+----------------------------------+
</pre></li>

<li><a name="function_st-centroid"></a><p>
<a href="#function_st-centroid"><code>ST_Centroid(<em><code>mpoly
</code></em>)</code></a></p>
<p>Возвращает математическую среднюю точку для
<code>MultiPolygon</code> <em><code>mpoly</code></em> как <code>Point</code>.
</p>

<p>Эта функция обрабатывает наборы геометрии, вычисляя центроидный пункт для
компонентов самого высокого измерения в наборе. Такие компоненты извлечены и
превращены в <code>MultiPolygon</code>, <code>MultiLineString</code> или
<code>MultiPoint</code> для центроидного вычисления. Если параметр пустой
набор геометрии, возвращаемое значение <code>NULL</code>.
<pre>
mysql&gt; SET @poly = ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),
    -&gt;             (5 5,7 5,7 7,5 7,5 5))');
mysql&gt; SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));
+------------------------+--------------------------------------------+
| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |
+------------------------+--------------------------------------------+
| POLYGON                | POINT(4.958333333333333 4.958333333333333) |
+------------------------+--------------------------------------------+
</pre></li>

<li><a name="function_st-exteriorring"></a><p>
<a href="#function_st-exteriorring"><code>ST_ExteriorRing(<em>
<code>poly</code></em>)</code></a></p>

<p>Возвращает внешнее кольцо <code>Polygon</code>
<em><code>poly</code></em> как <code>LineString</code>.
<pre>
mysql&gt; SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),
    -&gt;             (1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));
+----------------------------------------------------+
| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |
+----------------------------------------------------+
| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |
+----------------------------------------------------+
</pre></li>

<li><a name="function_st-interiorringn"></a><p>
<a href="#function_st-interiorringn"><code>ST_InteriorRingN(<em>
<code>poly</code></em>,<em><code>N</code></em>)</code></a></p>

<p>Возвращает <em><code>N</code></em>-ое кольцо для <code>Polygon</code>
<em><code>poly</code></em> как <code>LineString</code>.
Кольца пронумерованы, начиная с 1.
<pre>
mysql&gt; SET @poly = 'Polygon((0 0,0 3,3 3,3 0,0 0),
    -&gt;             (1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));
+-------------------------------------------------------+
| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |
+-------------------------------------------------------+
| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |
+-------------------------------------------------------+
</pre></li>

<li><a name="function_st-numinteriorrings"></a><p>
<a href="#function_st-numinteriorrings"><code>ST_NumInteriorRing(
<em><code>poly</code></em>)</code></a>,
<a href="#function_st-numinteriorrings"><code>ST_NumInteriorRings(
<em><code>poly</code></em>)</code></a></p>

<p>Возвращается число колец для <code>Polygon</code>
<em><code>poly</code></em>.
<pre>
mysql&gt; SET @poly =
    -&gt;     'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';
mysql&gt; SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));
+---------------------------------------------+
| ST_NumInteriorRings(ST_GeomFromText(@poly)) |
+---------------------------------------------+
|   1                                         |
+---------------------------------------------+
</pre></li></ul>

<h4><a name="gis-geometrycollection-property-functions"></a>13.15.7.5.
Функции и свойства GeometryCollection</h4>
<p>Эти функции возвращают свойства значения <code>GeometryCollection</code>.
</p>

<ul><li><a name="function_st-geometryn"></a><p>
<a href="#function_st-geometryn"><code>ST_GeometryN(<em><code>gc
</code></em>,<em><code>N</code></em>)</code></a></p>

<p>Возвращает <em><code>N</code></em>-ую геометрию в
<code>GeometryCollection</code> <em><code>gc</code></em>.
Геометрии нумерованы, начиная с 1.
<pre>
mysql&gt; SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';
mysql&gt; SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));
+-------------------------------------------------+
| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |
+-------------------------------------------------+
| POINT(1 1)                                      |
+-------------------------------------------------+
</pre></li>

<li><a name="function_st-numgeometries"></a><p>
<a href="#function_st-numgeometries"><code>ST_NumGeometries(<em>
<code>gc</code></em>)</code></a></p>

<p>Возвращает число конфигураций в <code>GeometryCollection</code>
<em><code>gc</code></em>.
<pre>
mysql&gt; SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';
mysql&gt; SELECT ST_NumGeometries(ST_GeomFromText(@gc));
+----------------------------------------+
| ST_NumGeometries(ST_GeomFromText(@gc)) |
+----------------------------------------+
|  2                                     |
+----------------------------------------+
</pre></li></ul>

<h3><a name="spatial-operator-functions"></a>13.15.8.
Пространственные функции и операторы</h3>
<p>OpenGIS предлагает много функций, которые могут произвести конфигурации.
Они разработаны, чтобы осуществить пространственные операторы.</p>

<p>Эти функции поддерживают все комбинации типа параметра кроме тех, которые
являются неподходящими согласно спецификации Open Geospatial Consortium.</p>
<ul><li><a name="function_st-buffer"></a><p>
<a href="#function_st-buffer"><code>ST_Buffer(<em><code>g</code>
</em>,<em><code>d</code></em>[,<em><code>strategy1</code></em>[,<em><code>
strategy2</code></em>[,<em><code>strategy3</code></em>]]])</code></a></p>

<p>Возвращает геометрию, которая представляет все пункты, расстояние которых
от геометрии <em><code>g</code></em> меньше или равно
<em><code>d</code></em>, или <code>NULL</code>, если какой-либо параметр
<code>NULL</code>. SRID параметра геометрии должен быть 0, потому что
<a href="#function_st-buffer"><code>ST_Buffer()</code></a>
поддерживает только декартову систему координат. Для недопустимого параметра
геометрии будет ошибка
<a href="error.htm#error_er_gis_invalid_data"><code>ER_GIS_INVALID_DATA
</code></a>.</p>

<p>Если параметр геометрии пуст,
<a href="#function_st-buffer"><code>ST_Buffer()</code></a>
возвращает пустую геометрию.</p>

<p>Если расстояние 0,
<a href="#function_st-buffer"><code>ST_Buffer()</code></a>
возвращает неизменный параметр геометрии:
<pre>
mysql&gt; SET @pt = ST_GeomFromText('POINT(0 0)');
mysql&gt; SELECT ST_AsText(ST_Buffer(@pt, 0));
+------------------------------+
| ST_AsText(ST_Buffer(@pt, 0)) |
+------------------------------+
| POINT(0 0)                   |
+------------------------------+
</pre>

<p><a href="#function_st-buffer"><code>ST_Buffer()</code></a>
поддерживает отрицательные расстояния для <code>Polygon</code> и
<code>MultiPolygon</code> и для наборов геометрии, содержащих значения
<code>Polygon</code> или <code>MultiPolygon</code>.
Результат может быть пустой геометрией. Ошибка
<a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS</code>
</a> происходит для <a href="#function_st-buffer"><code>ST_Buffer()
</code></a> с отрицательным расстоянием для <code>Point</code>,
<code>MultiPoint</code>, <code>LineString</code> и
<code>MultiLineString</code> и для наборов геометрии, не содержащих любого
значения <code>Polygon</code> или <code>MultiPolygon</code>.</p>

<p><a href="#function_st-buffer"><code>ST_Buffer()</code></a>
разрешает до трех дополнительных параметров стратегии после параметра
расстояния. Стратегии влияют на буферное вычисление. Эти параметры строковые
значения байта, произведенные
<a href="#function_st-buffer-strategy"><code>ST_Buffer_Strategy()
</code></a>, чтобы использовать для стратегий точки, соединения и завершения:
</p>

<ul><li><p>Стратегии точки относятся к конфигурации <code>Point</code> и
<code>MultiPoint</code>. Если никакая стратегия точки не определена, значение
по умолчанию <a href="#function_st-buffer-strategy"><code>
ST_Buffer_Strategy('point_circle', 32)</code></a>.</li>

<li>Стратегии соединения относятся к <code>LineString</code>,
<code>MultiLineString</code>, <code>Polygon</code> и
<code>MultiPolygon</code>. Если никакая стратегия не определена, значение
по умолчанию <a href="#function_st-buffer-strategy"><code>
ST_Buffer_Strategy('join_round', 32)</code></a>.</li>

<li>Стратегии завершения относятся к <code>LineString</code> и
<code>MultiLineString</code>. Если никакая стратегия не определена, значение
по умолчанию <a href="#function_st-buffer-strategy">
<code>ST_Buffer_Strategy('end_round', 32)</code></a>.</p></li></ul>

<p>До одной стратегии каждого типа может быть определено, и их можно задать
в любом порядке. Если много стратегий данного типа определено, происходит
ошибка <a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS
</code></a>.
<pre>
mysql&gt; SET @pt = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt_strategy = ST_Buffer_Strategy('point_square');
mysql&gt; SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));
+--------------------------------------------+
| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |
+--------------------------------------------+
| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |
+--------------------------------------------+

mysql&gt; SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');
mysql&gt; SET @end_strategy = ST_Buffer_Strategy('end_flat');
mysql&gt; SET @join_strategy = ST_Buffer_Strategy('join_round', 10);
mysql&gt; SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))
+---------------------------------------------------------------+
| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |
+---------------------------------------------------------------+
| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |
| -5 5,-5 0,0 0,5 0,5 5))                                       |
+---------------------------------------------------------------+
</pre></li>

<li><a name="function_st-buffer-strategy"></a><p>
<a href="#function_st-buffer-strategy"><code>ST_Buffer_Strategy(
<em><code>strategy</code></em>[,<em><code>points_per_circle</code></em>])
</code></a></p>

<p>Эта функция возвращает строку байтов стратегии для использования с
<a href="#function_st-buffer"><code>ST_Buffer()</code></a>, чтобы
влиять на буферное вычисление. Результат <code>NULL</code>, если какой-либо
параметр <code>NULL</code>. Если какой-либо параметр недопустим, происходит
ошибка <a href="error.htm#error_er_wrong_arguments">
<code>ER_WRONG_ARGUMENTS</code></a>.</p>

<p>Информация о стратегиях доступна на
<a href="../../../www.boost.org/default.htm" target="_top">Boost.org</a>.</p>
<p>Первый параметр должен быть строкой, указывающей на опцию стратегии:</p>

<ul><li><p>Для стратегий точки разрешенные значения
<code>'point_circle'</code> и <code>'point_square'</code>.</li>
<li>Для стратегий объединения разрешенные значения
<code>'join_round'</code> и <code>'join_miter'</code>.</li>
<li>Для стратегий завершения разрешенные значения
<code>'end_round'</code> и <code>'end_flat'</code>.</p></li></ul>

<p>Если первый параметр <code>'point_circle'</code>,
<code>'join_round'</code>, <code>'join_miter'</code> или
<code>'end_round'</code>, параметр <em><code>points_per_circle</code></em>
должен быть дан как положительное числовое значение. Максимум
<em><code>points_per_circle</code></em> значение системной переменной
<a href="server.htm#sysvar_max_points_in_geometry"><code>
max_points_in_geometry</code></a>. Если первый параметр
<code>'point_square'</code> или <code>'end_flat'</code>, параметр
<em><code>points_per_circle</code></em> не должен быть дан или происходит
ошибка <a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS
</code></a>.</p>
<p>Для примеров см. описание
<a href="#function_st-buffer"><code>ST_Buffer()</code></a>.</p></li>

<li><a name="function_st-convexhull"></a><p>
<a href="#function_st-convexhull"><code>ST_ConvexHull(<em><code>g
</code></em>)</code></a></p>
<p>Возвращает геометрию, которая представляет выпуклый
контур значения геометрии <em><code>g</code></em>.</p>

<p>Эта функция вычисляет выпуклый контур геометрии первой проверкой, являются
ли ее точки колинеарными вершинами. Функция возвращает линейный контур если
это так, иначе контур многоугольника. Эта функция обрабатывает наборы
геометрии, извлекая все точки вершин всех компонентов набора, создавая
значение <code>MultiPoint</code> из них, и вычисляя его выпуклый контур. Если
параметр пустой набор геометрии, возвращаемое значение <code>NULL</code>.
<pre>
mysql&gt; SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';
mysql&gt; SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));
+-----------------------------------------------+
| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |
+-----------------------------------------------+
| POLYGON((5 0,25 0,15 25,5 0))                 |
+-----------------------------------------------+
</pre></li>

<li><a name="function_st-difference"></a><p>
<a href="#function_st-difference"><code>ST_Difference(<em><code>g1
</code></em>, <em><code>g2</code></em>)</code></a></p>

<p>Возвращает геометрию, которая представляет различие в наборе точек
значений геометрий <em><code>g1</code></em> и <em><code>g2</code></em>.
<pre>
mysql&gt; SET @g1 = POINT(1,1), @g2 = POINT(2,2);
mysql&gt; SELECT ST_AsText(ST_Difference(@g1, @g2));
+------------------------------------+
| ST_AsText(ST_Difference(@g1, @g2)) |
+------------------------------------+
| POINT(1 1)                         |
+------------------------------------+
</pre></li>

<li><a name="function_st-intersection"></a><p>
<a href="#function_st-intersection"><code>ST_Intersection(<em>
<code>g1</code></em>, <em><code>g2</code></em>)</code></a>
</p>

<p>Возвращает геометрию, которая представляет пересечение набора точек
значений геометрий <em><code>g1</code></em> и <em><code>g2</code></em>.
<pre>
mysql&gt; SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');
mysql&gt; SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');
mysql&gt; SELECT ST_AsText(ST_Intersection(@g1, @g2));
+--------------------------------------+
| ST_AsText(ST_Intersection(@g1, @g2)) |
+--------------------------------------+
| POINT(2 2)                           |
+--------------------------------------+
</pre></li>

<li><a name="function_st-symdifference"></a><p>
<a href="#function_st-symdifference"><code>ST_SymDifference(<em>
<code>g1</code></em>, <em><code>g2</code></em>)</code></a></p>

<p>Возвращает геометрию, которая представляет симметрическое различие
набора точек значений геометрий <em><code>g1</code></em> и
<em><code>g2</code></em>, которая определена как:
<pre>
<em><code>g1</code></em> symdifference <em><code>g2</code></em> := (<em><code>g1</code></em> union <em><code>g2</code></em>)
difference (<em><code>g1</code></em> intersection <em><code>g2</code></em>)
</pre>

<p>Или в нотации вызова функции:
<pre>
ST_SymDifference(<em><code>g1</code></em>, <em><code>g2</code></em>) =
                 ST_Difference(ST_Union(<em><code>g1</code></em>,
                 <em><code>g2</code></em>),
                 ST_Intersection(<em><code>g1</code></em>,
                 <em><code>g2</code></em>))
mysql&gt; SET @g1 = POINT(1,1), @g2 = POINT(2,2);
mysql&gt; SELECT ST_AsText(ST_SymDifference(@g1, @g2));
+-------------------------------------------+
| ST_AsText(ST_SymDifference(@g1, @g2))     |
+-------------------------------------------+
| GEOMETRYCOLLECTION(POINT(1 1),POINT(2 2)) |
+-------------------------------------------+
</pre></li>

<li><a name="function_st-union"></a><p>
<a href="#function_st-union"><code>ST_Union(<em><code>g1</code></em>,
<em><code>g2</code></em>)</code></a></p>

<p>Возвращает геометрию, которая представляет союз наборов точек
значений геометрий <em><code>g1</code></em> и <em><code>g2</code></em>.
<pre>
mysql&gt; SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');
mysql&gt; SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');
mysql&gt; SELECT ST_AsText(ST_Union(@g1, @g2));
+--------------------------------------+
| ST_AsText(ST_Union(@g1, @g2))        |
+--------------------------------------+
| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |
+--------------------------------------+
</pre></li></ul>

<p>Кроме того, <a href="#gis-property-functions">раздел 13.15.7</a>
обсуждает несколько функций, которые создают новые
конфигурации из существующих.</p>

<ul><li><p><a href="#function_st-envelope"><code>ST_Envelope(<em>
<code>g</code></em>)</code></a></li>
<li><a href="#function_st-startpoint"><code>ST_StartPoint(<em>
<code>ls</code></em>)</code></a></li>

<li><a href="#function_st-endpoint"><code>ST_EndPoint(<em><code>
ls</code></em>)</code></a></li>
<li><a href="#function_st-pointn"><code>ST_PointN(<em><code>ls
</code></em>,<em><code>N</code></em>)</code></a></li>

<li><a href="#function_st-exteriorring"><code>ST_ExteriorRing(<em>
<code>poly</code></em>)</code></a></li>
<li><a href="#function_st-interiorringn"><code>ST_InteriorRingN(<em>
<code>poly</code></em>,<em><code>N</code></em>)</code></a></li>
<li><a href="#function_st-geometryn"><code>ST_GeometryN(<em><code>gc
</code></em>,<em><code>N</code></em>)</code></a></p></li></ul>

<h3><a name="spatial-relation-functions"></a>13.15.9.
Функции, которые проверяют пространственные отношения
между объектами геометрии</h3>
<p>Функции, описанные в этом разделе, берут две конфигурации в качестве
параметров и возвращают качественное или количественное отношение между ними.
</p>

<p>MySQL осуществляет два набора функций, используя имена функций,
определенные спецификацией OpenGIS. Один набор проверяет отношения между
двумя значениями геометрии, используя точные формы объекта, другой
использует минимальный ограничительный прямоугольник объекта.</p>
<p>Есть также MySQL-специфичный набор функций, доступных, чтобы проверить
отношения между двумя значениями геометрии.</p>

<h4><a name="spatial-relation-functions-object-shapes"></a>13.15.9.1.
Пространственные функции с использованием формы объекта</h4>
<p>Спецификация OpenGIS определяет следующие функции. Они проверяют отношения
между двумя значениями геометрии <code>g1</code> и <code>g2</code>, с
использованием точных форм объекта. Возвращаемые значения 1 и 0 указывают на
истину и ложь, соответственно, за исключением
<a href="#function_st-distance"><code>ST_Distance()</code></a>,
который возвращает значения расстояния.</p>

<p>Эти функции поддерживают все комбинации типа параметра кроме тех, которые
являются неподходящими согласно Open Geospatial Consortium. Они возвращают
ложнь, если вызваны с неподходящей комбинацией типов параметров геометрии.
Например, <a href="#function_st-overlaps"><code>ST_Overlaps()</code>
</a> возвращает ложь, если вызвана с конфигурациями различных измерений.</p>

<ul><li><a name="function_st-contains"></a><p>
<a href="#function_st-contains"><code>ST_Contains(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, содержит ли
<em><code>g1</code></em> полностью <em><code>g2</code></em>.
Это проверяет противоположные отношения как
<a href="#function_st-within"><code>ST_Within()</code></a>.</p></li>

<li><a name="function_st-crosses"></a><p>
<a href="#function_st-crosses"><code>ST_Crosses(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1, если <em><code>g1</code></em> пространственно пересекает
<em><code>g2</code></em>. Возвращает <code>NULL</code>, если <code>g1</code>
<code>Polygon</code> или <code>MultiPolygon</code>, или если
<em><code>g2</code></em> <code>Point</code> или
<code>MultiPoint</code>. Иначе вернет 0.</p>

<p>Эта функция возвращает 0, если вызвана с неподходящей комбинацией типов
параметров геометрии. Например, это возвращает 0, если первый параметр
<code>Polygon</code> или <code>MultiPolygon</code> и\или второй параметр
<code>Point</code> или <code>MultiPoint</code>.</p>

<p>Термин <span><em>пространственно пересекается</em></span> обозначает
пространственное отношение между двумя данными конфигурациями, у которых
есть следующие свойства:</p>

<ul><li><p>Эти две конфигурации пересекаются.</li>
<li>Их пересечение приводит к геометрии, у которой есть измерение, которое
составляет меньше, чем максимальное измерение двух данных конфигураций.</li>
<li>Их пересечение не равно любой из двух данных конфигураций.
</p></li></ul></li>

<li><a name="function_st-disjoint"></a><p>
<a href="#function_st-disjoint"><code>ST_Disjoint(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, является ли <em><code>g1</code></em>
пространственно несвязной (не пересекается) с <em><code>g2</code></em>.
</p></li>

<li><a name="function_st-distance"></a><p>
<a href="#function_st-distance"><code>ST_Distance(<em><code>g1
</code></em>, <em><code>g2</code></em>)</code></a></p>
<p>Возвращает расстояние между <em><code>g1</code></em> и
<em><code>g2</code></em>.</p>

<p>Эта функция обрабатывает наборы геометрии, возвращая самое короткое
расстояние среди всех комбинаций компонентов двух параметров геометрии.
Если любой параметр пустой набор геометрии, возвращаемое значение
<code>NULL</code>.</p>

<p>Если промежуточный или окончательный результат производит NaN или
отрицательное число, эта функция производит ошибку
<a href="error.htm#error_er_gis_invalid_data"><code>ER_GIS_INVALID_DATA
</code></a>.
<pre>
mysql&gt; SET @g1 = POINT(1,1), @g2 = POINT(2,2);
mysql&gt; SELECT ST_Distance(@g1, @g2);
+-----------------------+
| ST_Distance(@g1, @g2) |
+-----------------------+
| 1.4142135623730951    |
+-----------------------+
</pre></li>

<li><a name="function_st-equals"></a><p>
<a href="#function_st-equals"><code>ST_Equals(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, равно ли пространственно
<em><code>g1</code></em> <em><code>g2</code></em>.
<pre>
mysql&gt; SET @g1 = POINT(1,1), @g2 = POINT(2,2);
mysql&gt; SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);
+---------------------+---------------------+
| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |
+---------------------+---------------------+
|   1                 |   0                 |
+---------------------+---------------------+
</pre></li>

<li><a name="function_st-intersects"></a><p>
<a href="#function_st-intersects"><code>ST_Intersects(<em><code>g1
</code></em>, <em><code>g2</code></em>)</code></a></p>
<p>Возвращает 1 или 0, чтобы указать, пересекается ли пространственно
<em><code>g1</code></em> и <em><code>g2</code></em>.</p></li>

<li><a name="function_st-overlaps"></a><p>
<a href="#function_st-overlaps"><code>ST_Overlaps(<em><code>g1
</code></em>, <em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, перекрывает ли пространственно
<em><code>g1</code></em> <em><code>g2</code></em>. Термин
<span><em>перекрывает пространственно</em></span> используется, если
две конфигурации пересекаются и их перекрестные результаты находятся в
геометрии того же самого измерения, но не равны любой из данных конфигураций.
</p>

<p>Эта функция возвращает 0, если вызвана с неподходящей комбинацией типов
параметров геометрии. Например, это возвращает 0, если вызвана с
конфигурациями различных измерений, или любой параметр <code>Point</code>.
</p></li>

<li><a name="function_st-touches"></a><p>
<a href="#function_st-touches"><code>ST_Touches(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, касается ли пространственно
<em><code>g1</code></em> <em><code>g2</code></em>. Две конфигурации
<span><em>касаются пространственно</em></span>, если внутренности
конфигураций не пересекаются, но граница одной из конфигураций пересекает
границу или внутренности другой.</p>

<p>Функция возвращает 0, если вызвана с неподходящей комбинацией типов
параметров геометрии. Например, это возвращает 0, если любой из параметров
<code>Point</code> или <code>MultiPoint</code>.</p></li>

<li><a name="function_st-within"></a><p>
<a href="#function_st-within"><code>ST_Within(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, находится ли
<em><code>g1</code></em> пространственно в пределах <em><code>g2</code></em>.
Это проверяет противоположные отношения как
<a href="#function_st-contains"><code>ST_Contains()</code></a>.
</p></li></ul>

<h4><a name="spatial-relation-functions-mysql-specific"></a>13.15.9.2.
MySQL-специфичные пространственные функции, использующие
ограничивающие прямоугольники минимума</h4>
<p>MySQL обеспечивает несколько функций, которые проверяют отношения между
минимальными ограничительными прямоугольниками двух конфигураций
<code>g1</code> и <code>g2</code>. Возвращаемые значения 1 и 0 указывают на
истину и ложь, соответственно.</p>

<ul><li><a name="function_mbrcontains"></a><p>
<a href="#function_mbrcontains"><code>MBRContains(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, содержит ли минимальный ограничительный
прямоугольник <em><code>g1</code></em> такой же прямоугольник
<em><code>g2</code></em>. Это проверяет противоположные отношения как
<a href="#function_mbrwithin"><code>MBRWithin()</code></a>.
<pre>
mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Point(1 1)');
mysql&gt; SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);
+----------------------+--------------------+
| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |
+----------------------+--------------------+
| 1                    |  1                 |
+----------------------+--------------------+
</pre></li>

<li><a name="function_mbrcoveredby"></a><p>
<a href="#function_mbrcoveredby"><code>MBRCoveredBy(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, покрыт ли минимальный ограничительный
прямоугольник <em><code>g1</code></em> прямоугольником
<em><code>g2</code></em>. Это проверяет противоположные отношения как
<a href="#function_mbrcovers"><code>MBRCovers()</code></a>.</p>

<p><a href="#function_mbrcoveredby"><code>MBRCoveredBy()</code></a>
и <a href="#function_mbrcovers"><code>MBRCovers()</code></a>
обрабатывают параметры и возвращают значение следующим образом:</p>

<ul><li><p>Возвратить <code>NULL</code>, если любой параметр
<code>NULL</code> или пустая геометрия.</li>
<li>Возвратить ошибку <a href="error.htm#error_er_gis_invalid_data"><code>
ER_GIS_INVALID_DATA</code></a>, если любой параметр не допустимая строка
геометрии (SRID плюс значение WKB).</li>
<li>Иначе вернуть не-<code>NULL</code>.</p></li></ul>

<pre>
mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Point(1 1)');
mysql&gt; SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);
+--------------------+-----------------------+
| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |
+--------------------+-----------------------+
|  1                 | 0                     |
+--------------------+-----------------------+

mysql&gt; SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);
+--------------------+-----------------------+
| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |
+--------------------+-----------------------+
|  0                 | 1                     |
+--------------------+-----------------------+
</pre></li>

<li><a name="function_mbrcovers"></a><p>
<a href="#function_mbrcovers"><code>MBRCovers(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, покрывает ли минимальный
ограничительный прямоугольник <em><code>g1</code></em> прямоугольник
<em><code>g2</code></em>. Это проверяет противоположные отношения как
<a href="#function_mbrcoveredby"><code>MBRCoveredBy()</code></a>.
</p></li>

<li><a name="function_mbrdisjoint"></a><p>
<a href="#function_mbrdisjoint"><code>MBRDisjoint(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, являются ли несвязными (не
пересекаются) минимальные ограничительные прямоугольники двух конфигураций
<em><code>g1</code></em> и <em><code>g2</code></em>.</p></li>

<li><a name="function_mbrequals"></a><p>
<a href="#function_mbrequals"><code>MBREquals(<em><code>g1</code>
</em>, <em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, являются ли минимальные ограничительные
прямоугольники двух конфигураций <em><code>g1</code></em> и <em><code>g2
</code></em> тем же самым.</p></li>

<li><a name="function_mbrintersects"></a><p>
<a href="#function_mbrintersects"><code>MBRIntersects(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, пересекаются ли
минимальные ограничительные прямоугольники двух конфигураций
<em><code>g1</code></em> и <em><code>g2</code></em>.</p></li>

<li><a name="function_mbroverlaps"></a><p>
<a href="#function_mbroverlaps"><code>MBROverlaps(<em><code>g1
</code></em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, перекрываются ли
минимальные ограничительные прямоугольники двух конфигураций
<em><code>g1</code></em> и <em><code>g2</code></em>. Термин
<span><em>перекрываются</em></span> используется, если две конфигурации
пересекаются и их перекрестные результаты лежат в геометрии того же самого
измерения, но не равны любой из данных конфигураций.</p></li>

<li><a name="function_mbrtouches"></a><p>
<a href="#function_mbrtouches"><code>MBRTouches(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, касаются ли
минимальные ограничительные прямоугольники двух конфигураций
<em><code>g1</code></em> и <em><code>g2</code></em>. Две конфигурации
<span><em>касаются</em></span>, если внутренности конфигураций не
пересекаются, но граница одних из конфигураций пересекает границу
или внутренности другой.</p></li>

<li><a name="function_mbrwithin"></a><p>
<a href="#function_mbrwithin"><code>MBRWithin(<em><code>g1</code>
</em>,<em><code>g2</code></em>)</code></a></p>

<p>Возвращает 1 или 0, чтобы указать, находится ли минимальный ограничительный
прямоугольник <em><code>g1</code></em> в пределах минимального
ограничительного прямоугольника <em><code>g2</code></em>. Это проверяет
противоположные отношения как <a href="#function_mbrcontains">
<code>MBRContains()</code></a>.
<pre>
mysql&gt; SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');
mysql&gt; SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');
mysql&gt; SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);
+--------------------+--------------------+
| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |
+--------------------+--------------------+
|  1                 |  0                 |
+--------------------+--------------------+
</pre></li></ul>

<h3><a name="spatial-geohash-functions"></a>13.15.10.
Пространственные функции Geohash</h3>
<p>Geohash система для того, чтобы закодировать широту и долготу произвольной
точности в текстовую строку. Значения Geohash строки, которые содержат только
символы, выбранные из <code>"0123456789bcdefghjkmnpqrstuvwxyz"</code>.</p>

<p>Функции в этом разделе включают манипуляции значениями geohash, которые
обеспечивают приложения способностями импорта и экспорта geohash-данных,
индексации и поиска geohash-значений.</p>

<ul><li><a name="function_st-geohash"></a><p>
<a href="#function_st-geohash"><code>ST_GeoHash(<em><code>longitude
</code></em>, <em><code>latitude</code></em>,
<em><code>max_length</code></em>)</code></a>,
<a href="#function_st-geohash"><code>ST_GeoHash(<em><code>point
</code></em>, <em><code>max_length</code></em>)</code></a></p>

<p>Возвращает строку geohash в наборе символов соединения и сопоставлении.
Результат <code>NULL</code> если какой-либо параметр <code>NULL</code>.
Ошибка происходит, если какой-либо параметр недопустим.</p>

<p>Для первого синтаксиса <em><code>longitude</code></em>
должно быть числом в диапазоне [-180, 180], а <em><code>latitude</code></em>
должно быть числом в диапазоне [-90, 90]. Для второго синтаксиса
требуется значение <code>POINT</code>, где координаты X и Y находятся в
допустимых диапазонах для долготы и широты, соответственно.</p>

<p>Получающаяся строка не больше <em><code>max_length</code></em>
символов, есть верхний предел 100. Строка могла бы быть короче, чем
<em><code>max_length</code></em>, потому что алгоритм, который создает
geohash, продолжается, пока не создаст строку, которая является или точным
представлением местоположения или <em><code>max_length</code></em> символов.
<pre>
mysql&gt; SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);
+----------------------+-------------------------+
| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |
+----------------------+-------------------------+
| xbpbpbpbpb           | 000000000000000         |
+----------------------+-------------------------+
</pre></li>

<li><a name="function_st-latfromgeohash"></a><p>
<a href="#function_st-latfromgeohash"><code>ST_LatFromGeoHash(<em>
<code>geohash_str</code></em>)</code></a></p>

<p>Возвращает широту из строкового значения geohash как значение
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a> в диапазоне
[-90, 90]. Результат <code>NULL</code>, если какой-либо параметр
<code>NULL</code>. Ошибка происходит, если параметр недопустим.</p>

<p>Функция <a href="#function_st-latfromgeohash"><code>
ST_LatFromGeoHash()</code></a> читает не больше, чем 433 символа из
<em><code>geohash_str</code></em>. Это представляет верхний предел информации
во внутреннем представлении координатных значений. Символы после 433
проигнорированы, даже если они незаконны и производят ошибку.
<pre>
mysql&gt; SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));
+------------------------------------------+
| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |
+------------------------------------------+
|  -20                                     |
+------------------------------------------+
</pre></li>

<li><a name="function_st-longfromgeohash"></a><p>
<a href="#function_st-longfromgeohash"><code>ST_LongFromGeoHash(<em>
<code>geohash_str</code></em>)</code></a></p>

<p>Возвращает долготу из строкового значения geohash как значение
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a> в диапазоне
[-180, 180]. Результат <code>NULL</code>, если какой-либо параметр
<code>NULL</code>. Ошибка происходит, если параметр недопустим.</p>

<p>Замечания в описании
<a href="#function_st-latfromgeohash"><code>ST_LatFromGeoHash()
</code></a> относительно максимального количества символов, обработанных из
параметра <em><code>geohash_str</code></em> параметр также относятся к
<a href="#function_st-longfromgeohash"><code>ST_LongFromGeoHash()
</code></a>.
<pre>
mysql&gt; SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));
+-------------------------------------------+
| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |
+-------------------------------------------+
| 45                                        |
+-------------------------------------------+
</pre></li>

<li><a name="function_st-pointfromgeohash"></a><p>
<a href="#function_st-pointfromgeohash"><code>
ST_PointFromGeoHash(<em><code>geohash_str</code></em>,
<em><code>srid</code></em>)</code></a></p>

<p>Возвращает значение <code>POINT</code>, содержащее расшифрованное значение
geohash, данное в виде строки. Координаты X и Y точки это долгота в диапазоне
[-180, 180] и широта в диапазоне [-90, 90], соответственно.
<em><code>srid</code></em> это unsigned 32-bit integer. Результат
<code>NULL</code>, если какой-либо параметр <code>NULL</code>. Ошибка
происходит, если какой-либо параметр недопустим.</p>

<p>Замечания в описании
<a href="#function_st-latfromgeohash"><code>ST_LatFromGeoHash()
</code></a> относительно максимального количества символов, обработанных из
<em><code>geohash_str</code></em> применимы и для
<a href="#function_st-pointfromgeohash"><code>ST_PointFromGeoHash()
</code></a>.
<pre>
mysql&gt; SET @gh = ST_GeoHash(45,-20,10);
mysql&gt; SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));
+---------------------------------------+
| ST_AsText(ST_PointFromGeoHash(@gh,0)) |
+---------------------------------------+
| POINT(45 -20)                         |
+---------------------------------------+
</pre></li></ul>

<h3><a name="spatial-geojson-functions"></a>13.15.11.
Пространственные функции GeoJSON</h3>
<p>Этот раздел описывает функции для того, чтобы преобразовать между
документами GeoJSON и пространственными значениями. GeoJSON открытый
стандарт для того, чтобы закодировать геометрические/географические
особенности. Для получения дополнительной информации см.
<a href="../../../geojson.org/default.htm" target="_top">http://geojson.org</a>.
Функции, обсужденные здесь, следуют спецификации GeoJSON revision 1.0.</p>

<p>GeoJSON поддерживает те же самые геометрические/географические типы
данных, что и MySQL. Объекты Feature и FeatureCollection
не поддержаны, за исключением того, что объекты геометрии извлечены из них.
Поддержка CRS ограничена значениями, которые идентифицируют SRID.</p>

<p>MySQL также поддерживает тип данных <a href="types.htm#json"><code>JSON
</code></a> и ряд SQL функций для работы с ним. См. разделы
<a href="types.htm#json">12.6</a> и
<a href="#json-functions">13.16</a>.</p>

<ul><li><a name="function_st-asgeojson"></a><p>
<a href="#function_st-asgeojson"><code>ST_AsGeoJSON(<em><code>g
</code></em>[, <em><code>max_dec_digits</code></em> [,
<em><code>options</code></em>]])</code></a></p>
<p>Производит объект GeoJSON из геометрии <em><code>g</code></em>.
У строки объекта есть набор символов соединения и сопоставление.</p>

<p><em><code>max_dec_digits</code></em>, если определено, ограничивает число
десятичных цифр для координат. Если не определен, этот параметр по умолчанию
установлен к его максимальному значению 2<sup>32</sup>-1. Минимум 0.</p>

<p><em><code>options</code></em>, если определено, битовая маска. Следующая
таблица показывает разрешенные значения флага. Если у параметра геометрии
есть SRID 0, никакой объект CRS не произведен даже для тех значений флага,
которые его просят.</p>

<table border="1">
<thead><tr><th scope="col">Значение флага</th><th scope="col">Смысл
</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>Никаких опций нет. Это значение по
умолчанию, если <em><code>options</code></em> не задано.</td></tr>
<tr><td scope="row">1</td><td>Добавить ограничивающий прямоугольник к выводу.
</td></tr>
<tr><td scope="row">2</td><td>Добавить короткий формат CRS URN к выводу.
Формат значения по умолчанию: короткий формат
(<code>EPSG:<em><code>srid</code></em></code>).</td></tr>
<tr><td scope="row">4</td><td>Добавить длинный формат CRS URN к выводу
(<code>urn:ogc:def:crs:EPSG::<em><code>srid</code></em></code>).
Этот флаг переопределяет 2. Например, значения опции 5 и 7 означают то же
самое (добавить ограничивающий прямоугольник и длинный формат CRS URN).
</td></tr></tbody></table>

<p>Если какой-либо параметр <code>NULL</code>, возвращаемое значение
<code>NULL</code>. Если любой параметр не-<code>NULL</code>
недопустим, ошибка происходит.
<pre>
mysql&gt; SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);
+-------------------------------------------------------------+
| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |
+-------------------------------------------------------------+
| {"type": "Point", "coordinates": [11.11, 12.22]}            |
+-------------------------------------------------------------+
</pre></li>

<li><a name="function_st-geomfromgeojson"></a><p>
<a href="#function_st-geomfromgeojson"><code>
ST_GeomFromGeoJSON(<em><code>str</code></em>[,
<em><code>options</code></em>[, <em><code>srid</code></em>]])</code></a></p>

<p>Разбирает строку <em><code>str</code></em>, представляющую объект
GeoJSON и возвращает геометрию.</p>
<p><em><code>options</code></em>, если дано, описывает, как обработать
документы GeoJSON, которые содержат конфигурации с координатными измерениями
выше 2. Следующая таблица показывает разрешенные значения
<em><code>options</code></em>.</p>

<table border="1">
<thead><tr><th scope="col">Значение опции</th><th scope="col">Смысл
</th></tr></thead>
<tbody><tr><td scope="row">1</td>
<td>Отклонить документ и произвести ошибку. Это значение по умолчанию, если
<em><code>options</code></em> не определен.</td></tr>
<tr><td scope="row">2, 3, 4</td>
<td>Принять документ и обрезать координаты для более
высоких координатных измерений.</td></tr></tbody></table>

<p>Значения <em><code>options</code></em> 2, 3 и 4 в настоящее время
оказывают то же самое влияние. Если конфигурации с координатными измерениями
выше 2 будут поддержаны в будущем, то эти значения окажут различные влияния.
</p>

<p>Параметр <em><code>srid</code></em>, если дан, должен быть
32-bit unsigned integer. Если не дан, у возвращаемого значения
геометрии есть SRID 4326.</p>

<p>У геометрии GeoJSON, объектов feature и feature collection может быть
свойство <code>crs</code>. Разборы функции парсинга под названием
CRS URN в пространствах имен <code>urn:ogc:def:crs:EPSG::<em><code>srid
</code></em></code> и <code>EPSG:<em><code>srid</code></em></code>, но не
CRS, данный как объект ссылки. Кроме того,
<code>urn:ogc:def:crs:OGC:1.3:CRS84</code> признан как SRID 4326.
Если у объекта есть CRS, который не понят, ошибка происходит, за исключением
того, что если дополнительный параметр <em><code>srid</code></em> дан,
любой CRS проигнорирован, даже если это недопустимо.</p>

<p>Как определено в спецификации GeoJSON,
парсинг является чувствительным к регистру для члена <code>type</code>
ввода GeoJSON (<code>Point</code>, <code>LineString</code> и т.д.).
Спецификация ничего не определяет относительно чувствительности к регистру
для другого парсинга, который в MySQL не является чувствительным к регистру.
</p>

<p>Если какой-либо параметр <code>NULL</code>, возвращаемое значение
<code>NULL</code>. Если любой параметр не-<code>NULL</code>
недопустим, происходит ошибка.</p>

<p>Этот пример показывает результат парсинга для простого объекта GeoJSON:
<pre>
mysql&gt; SET @json = '{ "type": "Point", "coordinates": [102.0, 0.0]}';
mysql&gt; SELECT ST_AsText(ST_GeomFromGeoJSON(@json));
+--------------------------------------+
| ST_AsText(ST_GeomFromGeoJSON(@json)) |
+--------------------------------------+
| POINT(102 0)                         |
+--------------------------------------+
</pre></li></ul>

<h3><a name="spatial-convenience-functions"></a>13.15.12.
Вспомогательные пространственные функции</h3>
<p>Функции в этом разделе обеспечивают вспомогательные операции
на значениях геометрии.</p>

<ul><li><a name="function_st-distance-sphere"></a><p>
<a href="#function_st-distance-sphere"><code>ST_Distance_Sphere(<em>
<code>g1</code></em>, <em><code>g2</code></em> [,<em><code>radius</code>
</em>])</code></a></p>

<p>Возвращает минимальное сферическое расстояние между двумя точками и/или
мультиточками на сфере, в метрах или <code>NULL</code>,
если какой-либо параметр геометрии  <code>NULL</code> или пустой.</p>

<p>Вычисления используют сферическую землю и конфигурируемый радиус.
Дополнительный параметр <em><code>radius</code></em> должен быть дан в
метрах. Если опущен, радиус значения по умолчанию составляет 6370986 метров.
Ошибка <a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS
</code></a> происходит, если параметр <em><code>radius</code></em>
присутствует, но не положительный.</p>

<p>Параметры геометрии должны состоять из пунктов, которые определяют
(долгота, широта) координатные значения:</p>
<ul><li><p>Долгота и широта первые и вторые
координаты пункта, соответственно.</li>

<li>Обе координаты в градусах.</li>
<li>Значения долготы должны быть в диапазоне (-180, 180]. Положительные
значения к востоку от главного меридиана.</li>
<li>Значения широты должны быть в диапазоне [-90, 90]. Положительные
значения к северу от экватора.</p></li></ul>

<p>Поддержанные комбинации параметра (<code>Point</code>,
<code>Point</code>), (<code>Point</code>,
<code>MultiPoint</code>), и (<code>MultiPoint</code>, <code>Point</code>).
Ошибка <a href="error.htm#error_er_gis_unsupported_argument"><code>
ER_GIS_UNSUPPORTED_ARGUMENT</code></a> происходит для других комбинаций.</p>

<p>Ошибка <a href="error.htm#error_er_gis_invalid_data"><code>
ER_GIS_INVALID_DATA</code></a> происходит, если какой-либо параметр геометрии
не допустимая строка геометрии.
<pre>
mysql&gt; SET @pt1 = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt2 = ST_GeomFromText('POINT(180 0)');
mysql&gt; SELECT ST_Distance_Sphere(@pt1, @pt2);
+--------------------------------+
| ST_Distance_Sphere(@pt1, @pt2) |
+--------------------------------+
|   20015042.813723423           |
+--------------------------------+
</pre></li>

<li><a name="function_st-isvalid"></a><p>
<a href="#function_st-isvalid"><code>ST_IsValid(<em><code>g</code>
</em>)</code></a></p>

<p>Проверяет, допустима ли геометрия, как определено спецификацией OGC.
<a href="#function_st-isvalid"><code>ST_IsValid()</code></a>
Возвращает 1, если параметр допустимая строка геометрии и геометрически
допустим, 0, если параметр не допустимая строка геометрии или не
геометрически допустим, <code>NULL</code> если параметр <code>NULL</code>.
</p>

<p>Единственная допустимая пустая геометрия представлена в форме пустого
значения набора геометрии.
<a href="#function_st-isvalid"><code>ST_IsValid()</code></a>
возвращает 1 в этом случае.</p>

<p><a href="#function_st-isvalid"><code>ST_IsValid()</code></a>
работает только для декартовой системы координат и требует параметра
геометрии с SRID 0. Иначе будет ошибка
<a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS</code>
</a>.
<pre>
mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');
mysql&gt; SELECT ST_IsValid(@ls1);
+------------------+
| ST_IsValid(@ls1) |
+------------------+
| 0                |
+------------------+

mysql&gt; SELECT ST_IsValid(@ls2);
+------------------+
| ST_IsValid(@ls2) |
+------------------+
| 1                |
+------------------+
</pre></li>

<li><a name="function_st-makeenvelope"></a><p>
<a href="#function_st-makeenvelope"><code>ST_MakeEnvelope(<em><code>
pt1</code></em>, <em><code>pt2</code></em>)</code></a></p>

<p>Возвращает прямоугольник, который формирует конверт вокруг двух точек.
Возвращенная геометрия <code>Point</code>,
<code>LineString</code>, <code>Polygon</code> или <code>NULL</code>,
если какой-либо параметр <code>NULL</code>.</p>

<p>Вычисления сделаны, используя декартовую систему координат, а не на сфере,
сфероиде или Земле.</p>
<p>Учитывая два пункта <em><code>pt1</code></em> и <em><code>pt2</code></em>,
<a href="#function_st-makeenvelope"><code>ST_MakeEnvelope()</code>
</a> создает геометрию результата в абстрактном плане так:</p>

<ul><li><p>Если <em><code>pt1</code></em> = <em><code>pt2</code></em>,
результат <em><code>pt1</code></em>.</li>

<li>Иначе, если <code>(<em><code>pt1</code></em>,
<em><code>pt2</code></em>)</code> вертикальный или горизонтальный линейный
сегмент, результат линейный сегмент
<code>(<em><code>pt1</code></em>, <em><code>pt2</code></em>)</code>.</li>

<li>Иначе результат многоугольник, использующий
<em><code>pt1</code></em> и <em><code>pt2</code></em> как точки диагонали.
</p></li></ul>
<p>У геометрии результата есть SRID 0.</p>

<p><a href="#function_st-makeenvelope"><code>ST_MakeEnvelope()
</code></a> требует параметры <code>Point</code> геометрии с SRID 0. Иначе
будет ошибка <a href="error.htm#error_er_wrong_arguments"><code>
ER_WRONG_ARGUMENTS</code></a>.</p>

<p>Ошибка <a href="error.htm#error_er_gis_invalid_data"><code>
ER_GIS_INVALID_DATA</code></a> происходит, если какой-либо параметр не
допустимая строка геометрии, или если какое-либо координатное значение двух
пунктов бесконечно (то есть, NaN).
<pre>
mysql&gt; SET @pt1 = ST_GeomFromText('POINT(0 0)');
mysql&gt; SET @pt2 = ST_GeomFromText('POINT(1 1)');
mysql&gt; SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));
+----------------------------------------+
| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |
+----------------------------------------+
| POLYGON((0 0,1 0,1 1,0 1,0 0))         |
+----------------------------------------+
</pre></li>

<li><a name="function_st-simplify"></a><p>
<a href="#function_st-simplify"><code>ST_Simplify(<em><code>g
</code></em>, <em><code>max_distance</code></em>)</code></a></p>

<p>Упрощает геометрию, используя алгоритм Дугласа-Пеукера и возвращает
упрощенное значение того же самого типа или <code>NULL</code>, если
какой-либо параметр <code>NULL</code>.</p>

<p>Геометрия может быть любым типом геометрии, хотя алгоритм Дугласа-Пеукера,
возможно, не фактически обрабатывает каждый тип. Набор геометрии обработан,
давая его компоненты один за другим алгоритму упрощения и возвращенные
конфигурации помещены в набор геометрии как результат.</p>

<p>Параметр <em><code>max_distance</code></em> расстояние (в единицах
входных координат) вершины к другим сегментам, которые будут удалены. Вершины
в пределах этого расстояния удалены. Ошибка
<a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS</code>
</a> происходит, если <em><code>max_distance</code></em> не положителен
или является NaN.</p>

<p>Согласно Boost.Geometry, конфигурации могли бы стать недопустимыми в
результате процесса упрощения, и процесс мог бы создать самопересечения. Если
Вы хотите проверить законность результата, передайте его
<a href="#function_st-isvalid"><code>ST_IsValid()</code></a>.</p>

<p>Ошибка <a href="error.htm#error_er_gis_invalid_data">
<code>ER_GIS_INVALID_DATA</code></a> происходит, если параметр геометрии не
допустимая строка геометрии.
<pre>
mysql&gt; SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');
mysql&gt; SELECT ST_AsText(ST_Simplify(@g, 0.5));
+---------------------------------+
| ST_AsText(ST_Simplify(@g, 0.5)) |
+---------------------------------+
| LINESTRING(0 0,0 1,1 1,2 3,3 3) |
+---------------------------------+

mysql&gt; SELECT ST_AsText(ST_Simplify(@g, 1.0));
+---------------------------------+
| ST_AsText(ST_Simplify(@g, 1.0)) |
+---------------------------------+
| LINESTRING(0 0,3 3)             |
+---------------------------------+
mysql&gt; SELECT ST_AsText(ST_Simplify(@g));
</pre></li>

<li><a name="function_st-validate"></a><p>
<a href="#function_st-validate"><code>ST_Validate(<em><code>g
</code></em>)</code></a></p>

<p>Утверждает геометрию согласно спецификации OGC.
<a href="#function_st-validate"><code>ST_Validate()</code></a>
возвращает геометрию, если это допустимая строка геометрии и геометрически
допустимо, <code>NULL</code>, если параметр не допустимая строка геометрии,
геометрически недопустим или <code>NULL</code>.</p>

<p>Геометрия может быть допустимой строкой (значение WKB плюс SRID), но
геометрически недопустимой. Например, этот многоугольник геометрически
недопустим: <code>POLYGON((0 0, 0 0, 0 0, 0 0, 0 0))</code>.</p>

<p><a href="#function_st-validate"><code>ST_Validate()</code></a>
может использоваться, чтобы отфильтровать недопустимые данные о геометрии
для приложений, которые требуют более точных результатов, не
испорченных недопустимыми данными.</p>

<p>Если параметр геометрии допустим, он возвращен как есть, за исключением
того, что если вводный <code>Polygon</code> или <code>MultiPolygon</code>
имеет кольца, они полностью изменены прежде, чем проверить на законность.
Если геометрия допустима, значение с полностью
измененными кольцами возвращено.</p>

<p>Единственная допустимая пустая геометрия представлена в форме пустого
значения набора геометрии.
<a href="#function_st-validate"><code>ST_Validate()</code></a>
возвращает это непосредственно без дальнейших проверок в этом случае.</p>

<p><a href="#function_st-validate"><code>ST_Validate()</code></a>
работает только для декартовой системы координат и требуют параметра
геометрии с SRID 0. Иначе произойдет ошибка
<a href="error.htm#error_er_wrong_arguments"><code>ER_WRONG_ARGUMENTS</code>
</a>.
<pre>
mysql&gt; SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');
mysql&gt; SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');
mysql&gt; SELECT ST_AsText(ST_Validate(@ls1));
+------------------------------+
| ST_AsText(ST_Validate(@ls1)) |
+------------------------------+
| NULL                         |
+------------------------------+

mysql&gt; SELECT ST_AsText(ST_Validate(@ls2));
+------------------------------+
| ST_AsText(ST_Validate(@ls2)) |
+------------------------------+
| LINESTRING(0 0,1 1)          |
+------------------------------+
</pre></li></ul>

<h2><a name="json-functions"></a>13.16. Функции JSON</h2>
<p>Функции, описанные в этом разделе, выполняют операции на значениях JSON.
Для обсуждения типа данных <a href="types.htm#json"><code>JSON</code></a>
и дополнительных примеров, показывающих, как использовать эти функции, см.
<a href="types.htm#json">раздел 12.6</a>.</p>

<p>Для функций, которые берут параметр JSON,
происходит ошибка, если параметр не допустимое значение JSON.</p>
<p>Ряд пространственных функций для того, чтобы воздействовать на значения
GeoJSON также доступен. См. <a href="#spatial-geojson-functions">
раздел 13.15.11</a>.</p>

<h3><a name="json-function-reference"></a>13.16.1. Функции JSON (обзор)</h3>
<a name="idm139965348384912"></a><p><b>Таблица 13.20. Функции JSON</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_json-array"><code>
JSON_ARRAY()</code></a></td><td>Создает массив JSON</td></tr>
<tr><td scope="row"><a href="#function_json-array-append"><code>
JSON_ARRAY_APPEND()</code></a></td><td>Добавляет данные в документ JSON
</td></tr>
<tr><td scope="row"><a href="#function_json-array-insert"><code>
JSON_ARRAY_INSERT()</code></a></td><td>Вставляет в массив JSON</td></tr>
<tr><td scope="row"><a href="#operator_json-column-path"><code>
-&gt;</code></a></td><td>Возвращаемое значение столбца JSON после оценки
пути, эквивалент JSON_EXTRACT().</td></tr>
<tr><td scope="row"><a href="#function_json-contains"><code>
JSON_CONTAINS()</code></a></td><td>Содержит ли документ JSON указанный объект
</td></tr>
<tr><td scope="row"><a href="#function_json-contains-path"><code>
JSON_CONTAINS_PATH()</code></a></td><td>Содержит ли документ JSON
какие-либо данные в пути</td></tr>
<tr><td scope="row"><a href="#function_json-depth"><code>
JSON_DEPTH()</code></a></td><td>Максимальная глубина документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-extract"><code>
JSON_EXTRACT()</code></a></td><td>Данные из документа JSON</td></tr>
<tr><td scope="row"><a href="#operator_json-inline-path"><code>
-&gt;&gt;</code></a></td><td>Возвращаемое значение столбца JSON после оценки
пути и закрытия кавычки результат, эквивалент JSON_UNQUOTE(JSON_EXTRACT())
</td></tr>
<tr><td scope="row"><a href="#function_json-insert"><code>
JSON_INSERT()</code></a></td><td>Вставляет данные в документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-keys"><code>JSON_KEYS()
</code></a></td><td>Массив ключей из документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-length"><code>
JSON_LENGTH()</code></a></td><td>Число элементов в документе</td></tr>
<tr><td scope="row"><a href="#function_json-merge"><code>
JSON_MERGE()</code></a></td><td>Объединение документов JSON</td></tr>
<tr><td scope="row"><a href="#function_json-object"><code>
JSON_OBJECT()</code></a></td><td>Создать объект JSON</td></tr>
<tr><td scope="row"><a href="#function_json-quote"><code>
JSON_QUOTE()</code></a></td><td>Цитировать документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-remove"><code>
JSON_REMOVE()</code></a></td><td>Удалить данные из документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-replace"><code>
JSON_REPLACE()</code></a></td><td>Заменить значения в документе JSON</td>
</tr>
<tr><td scope="row"><a href="#function_json-search"><code>
JSON_SEARCH()</code></a></td><td>Путь в пределах документа JSON</td></tr>
<tr><td scope="row"><a href="#function_json-set"><code>JSON_SET()
</code></a></td><td>Вставить данные в документ JSON</td></tr>
<tr><td scope="row"><a href="#function_json-type"><code>JSON_TYPE()
</code></a></td><td>Тип значения JSON</td></tr>
<tr><td scope="row"><a href="#function_json-unquote"><code>
JSON_UNQUOTE()</code></a></td><td>Отменить цитирование значения JSON</td>
</tr>
<tr><td scope="row"><a href="#function_json-valid"><code>
JSON_VALID()</code></a></td><td>Допустимо ли значение JSON</td>
</tr></tbody></table>

<p>MySQL 8.0.1 и более поздний поддерживает две совокупных функции JSON
<a href="#function_json-arrayagg"><code>JSON_ARRAYAGG()</code></a> и
<a href="#function_json-objectagg"><code>JSON_OBJECTAGG()</code>
</a>. См. <a href="#group-by-functions-and-modifiers">раздел 13.19
</a> для их описания.</p>

<h3><a name="json-creation-functions"></a>13.16.2.
Функции, которые создают значения JSON</h3>
<p>Функции в этом разделе составляют значения JSON из составляющих элементов.
</p>

<ul><li><a name="function_json-array"></a><p>
<a href="#function_json-array"><code>JSON_ARRAY([<em><code>val
</code></em>[, <em><code>val</code></em>] ...])</code></a></p>

<p>Оценивает (возможно пустой) список значений и возвращает массив JSON,
содержащий те значения.
<pre>
mysql&gt; SELECT JSON_ARRAY(1, "abc", NULL, TRUE, CURTIME());
+---------------------------------------------+
| JSON_ARRAY(1, "abc", NULL, TRUE, CURTIME()) |
+---------------------------------------------+
| [1, "abc", null, true, "11:30:24.000000"]   |
+---------------------------------------------+
</pre></li>

<li><a name="function_json-object"></a><p>
<a href="#function_json-object"><code>JSON_OBJECT([<em><code>key
</code></em>, <em><code>val</code></em>[, <em><code>key</code></em>,
<em><code>val</code></em>] ...])</code></a></p>

<p>Оценивает (возможно пустой) список пар ключа/значения и возвращает объект
JSON, содержащий те пары. Ошибка происходит, если какое-либо ключевое имя
<code>NULL</code> или число параметров является странным.
<pre>
mysql&gt; SELECT JSON_OBJECT('id', 87, 'name', 'carrot');
+-----------------------------------------+
| JSON_OBJECT('id', 87, 'name', 'carrot') |
+-----------------------------------------+
| {"id": 87, "name": "carrot"}            |
+-----------------------------------------+
</pre></li>

<li><a name="function_json-quote"></a><p>
<a href="#function_json-quote"><code>JSON_QUOTE(<em><code>json_val
</code></em>)</code></a></p>

<p>Заключает строку в кавычки как значение JSON
символами двойной кавычки и экранируя внутренние кавычки и другие символы,
возвращая результат как строку <code>utf8mb4</code>.
Возвращает <code>NULL</code>, если параметр <code>NULL</code>.</p>

<p>Эта функция, как правило, используется, чтобы произвести допустимую строку
JSON для включения в пределах документа JSON.</p>
<p>Определенные специальные символы оставляют с наклонными чертами влево как
escape-последовательности, показанные в
<a href="#json-unquote-character-escape-sequences">таблице 13.21</a>.
<pre>
mysql&gt; SELECT JSON_QUOTE('null'), JSON_QUOTE('"null"');
+--------------------+----------------------+
| JSON_QUOTE('null') | JSON_QUOTE('"null"') |
+--------------------+----------------------+
| "null"             | "\"null\""           |
+--------------------+----------------------+

mysql&gt; SELECT JSON_QUOTE('[1, 2, 3]');
+-------------------------+
| JSON_QUOTE('[1, 2, 3]') |
+-------------------------+
| "[1, 2, 3]"             |
+-------------------------+
</pre></li></ul>

<p>Вы можете также получить значения JSON, конвертируя значения других типов
в <code>JSON</code> с помощью
<a href="#function_cast"><code>CAST(<em><code>value</code></em> AS
JSON)</code></a>.</p>

<h3><a name="json-search-functions"></a>13.16.3. Функции поиска значений JSON
</h3>
<p>Функции в этом разделе выполняют операции поиска на значениях JSON,
чтобы извлечь данные из них, сообщить, существуют ли данные в их пределах или
сообщить о пути к данным в их пределах.</p>

<ul><li><a name="function_json-contains"></a><p>
<a href="#function_json-contains"><code>JSON_CONTAINS(<em><code>
json_doc</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>])</code></a></p>

<p>Возвращает 0 или 1, чтобы указать, содержится ли определенное значение в
цели документа JSON или, если задан параметр <em><code>path</code></em>,
в определенном пути в пределах целевого документа. Возвращает
<code>NULL</code>, если какой-либо параметр <code>NULL</code>
или параметр пути не идентифицирует раздел целевого документа. Ошибка
происходит, если или параметр документа не допустимый документ JSON или
параметр <em><code>path</code></em> недопустимое выражение пути или содержит
подстановочный знак <code>*</code> (или <code>**</code>).</p>

<p>Чтобы проверить только, существуют ли какие-либо данные в пути, надо
использовать <a href="#function_json-contains-path"><code>
JSON_CONTAINS_PATH()</code></a>.</p>

<p>Следующие правила определяют логику:</p>
<ul><li><p>Скаляр кандидата содержится в целевом скаляре, если и только если
они сопоставимы и равны. Два скалярных значения сопоставимы, если у них есть
те же самые типы <a href="#function_json-type"><code>JSON_TYPE()
</code></a>, за исключением того, что значения типов <code>INTEGER</code> и
<code>DECIMAL</code> также сопоставимы друг с другом.</li>

<li>Массив кандидата содержится в целевом массиве, если и только если каждый
элемент в кандидате содержится в некотором элементе цели.</li>
<li>Немассив кандидата содержится в целевом массиве, если и только если
кандидат содержится в некотором элементе цели.</li>

<li>Объект кандидата содержится в целевом объекте, если и только если для
каждого ключа в кандидате есть ключ с тем же самым именем в цели, и значение,
связанное с возможным ключом, содержится в значении,
связанном с целевым ключом.</p></li></ul>

<p>Иначе значение кандидата не содержится в целевом документе.
<pre>
mysql&gt; SET @j = '{"a": 1, "b": 2, "c": {"d": 4}}';
mysql&gt; SET @j2 = '1';
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.a') |
+-------------------------------+
|   1                           |
+-------------------------------+

mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.b');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.b') |
+-------------------------------+
|   0                           |
+-------------------------------+

mysql&gt; SET @j2 = '{"d": 4}';
mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.a');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.a') |
+-------------------------------+
|   0                           |
+-------------------------------+

mysql&gt; SELECT JSON_CONTAINS(@j, @j2, '$.c');
+-------------------------------+
| JSON_CONTAINS(@j, @j2, '$.c') |
+-------------------------------+
|   1                           |
+-------------------------------+
</pre></li>

<li><a name="function_json-contains-path"></a><p>
<a href="#function_json-contains-path"><code>JSON_CONTAINS_PATH(<em>
<code>json_doc</code></em>,
<em><code>one_or_all</code></em>, <em><code>path</code></em>[,
<em><code>path</code></em>] ...)</code></a></p>

<p>Возвращает 0 или 1, чтобы указать, содержит ли документ JSON
данные в заданном пути или путях. Возвращает <code>NULL</code>,
если какой-либо параметр <code>NULL</code>. Ошибка происходит, если
параметр <em><code>json_doc</code></em> не допустимый документ JSON, любой
параметр <em><code>path</code></em> не допустимое выражение пути или
<em><code>one_or_all</code></em> не
<code>'one'</code> или <code>'all'</code>.</p>

<p>Чтобы проверить на определенное значение в пути, надо использовать
<a href="#function_json-contains"><code>JSON_CONTAINS()</code></a>.
</p>

<p>Возвращаемое значение 0, если никакой указанный путь не существует в
пределах документа. Иначе, возвращаемое значение зависит от параметра
<em><code>one_or_all</code></em>:</p>

<ul><li><p><code>'one'</code>: 1, если по крайней мере один путь существует в
пределах документа, 0 иначе.</li>
<li><code>'all'</code>: 1, если все пути существуют в
пределах документа, 0 иначе.</p></li></ul>

<pre>
mysql&gt; SET @j = '{"a": 1, "b": 2, "c": {"d": 4}}';
mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');
+---------------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |
+---------------------------------------------+
|   1                                         |
+---------------------------------------------+

mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');
+---------------------------------------------+
| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |
+---------------------------------------------+
|   0                                         |
+---------------------------------------------+

mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');
+----------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |
+----------------------------------------+
|  1                                     |
+----------------------------------------+

mysql&gt; SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');
+----------------------------------------+
| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |
+----------------------------------------+
|  0                                     |
+----------------------------------------+
</pre></li>

<li><a name="function_json-extract"></a><p>
<a href="#function_json-extract"><code>JSON_EXTRACT(<em><code>
json_doc</code></em>,
<em><code>path</code></em>[, <em><code>path</code></em>] ...)</code></a></p>

<p>Возвращает данные из документа JSON,
выбранные из частей документа, соответствующих <em><code>path</code></em>.
Возвращает <code>NULL</code> если какой-либо параметр <code>NULL</code> или
никакие пути не определяют местонахождение значения в документе.
Ошибка происходит, если параметр <em><code>json_doc</code></em> не допустимый
документ JSON или любой параметр <em><code>path</code></em> не
допустимое выражение пути.</p>

<p>Возвращаемое значение состоит из всех значений, соответствующих
<em><code>path</code></em>. Если возможно, что те параметры могли возвратить
много значений, соответствующие значения автоматически оформлены как массив,
в порядке, соответствующем путям, которые произвели их.
Иначе, возвращаемое значение единственное соответствующее.
<pre>
mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');
+--------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |
+--------------------------------------------+
| 20                                         |
+--------------------------------------------+

mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');
+----------------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |
+----------------------------------------------------+
| [20, 10]                                           |
+----------------------------------------------------+

mysql&gt; SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');
+-----------------------------------------------+
| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |
+-----------------------------------------------+
| [30, 40]                                      |
+-----------------------------------------------+
</pre>

<p>MySQL поддерживает оператор
<a href="#operator_json-column-path"><code>-&gt;</code></a>
как сокращение для для этой функции при использовании с 2 параметрами, где
левая сторона идентификатор столбца <a href="types.htm#json"><code>JSON
</code></a> (не выражение) и правая сторона является путем JSON, который
будет соответствующим в пределах столбца.</p></li>

<li><a name="operator_json-column-path"></a><p>
<a href="#operator_json-column-path"><code><em><code>column</code>
</em>-&gt;<em><code>path</code></em></code></a></p>

<p>Оператор <a href="#operator_json-column-path"><code>-&gt;</code>
</a> служит псевдонимом для <a href="#function_json-extract"><code>
JSON_EXTRACT()</code></a>, когда функция используется с двумя параметрами,
идентификатор столбца слева и путь JSON справа, который оценен против
документа JSON (значение столбца). Вы можете использовать такие выражения
вместо идентификаторов столбца везде, где они происходят в запросах SQL.</p>

<p>Два запроса <a href="sql.htm#select"><code>SELECT</code></a>,
показанные здесь, производят тот же самый вывод:
<pre>
mysql&gt; SELECT c, JSON_EXTRACT(c, "$.id"), g FROM jemp
     &gt;           WHERE JSON_EXTRACT(c, "$.id") &gt; 1
     &gt;           ORDER BY JSON_EXTRACT(c, "$.name");
+-------------------------------+-----------+------+
| c                             | c-&gt;"$.id" | g |
+-------------------------------+-----------+------+
| {"id": "3", "name": "Barney"} | "3"       | 3    |
| {"id": "4", "name": "Betty"}  | "4"       | 4    |
| {"id": "2", "name": "Wilma"}  | "2"       | 2    |
+-------------------------------+-----------+------+
3 rows in set (0.00 sec)

mysql&gt; SELECT c, c-&gt;"$.id", g FROM jemp
     &gt;           WHERE c-&gt;"$.id" &gt; 1
     &gt;           ORDER BY c-&gt;"$.name";
+-------------------------------+-----------+------+
| c                             | c-&gt;"$.id" | g |
+-------------------------------+-----------+------+
| {"id": "3", "name": "Barney"} | "3"       | 3    |
| {"id": "4", "name": "Betty"}  | "4"       | 4    |
| {"id": "2", "name": "Wilma"}  | "2"       | 2    |
+-------------------------------+-----------+------+
3 rows in set (0.00 sec)
</pre>

<p>Эта функциональность не ограничена <code>SELECT</code>,
как показано здесь:
<pre>
mysql&gt; ALTER TABLE jemp ADD COLUMN n INT;
Query OK, 0 rows affected (0.68 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; UPDATE jemp SET n=1 WHERE c-&gt;"$.id" = "4";
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql&gt; SELECT c, c-&gt;"$.id", g, n FROM jemp
     &gt;           WHERE JSON_EXTRACT(c, "$.id") &gt; 1
     &gt;           ORDER BY c-&gt;"$.name";
+-------------------------------+-----------+------+------+
| c                             | c-&gt;"$.id" | g | n    |
+-------------------------------+-----------+------+------+
| {"id": "3", "name": "Barney"} | "3"       | 3    | NULL |
| {"id": "4", "name": "Betty"}  | "4"       | 4    | 1    |
| {"id": "2", "name": "Wilma"}  | "2"       | 2    | NULL |
+-------------------------------+-----------+------+------+
3 rows in set (0.00 sec)

mysql&gt; DELETE FROM jemp WHERE c-&gt;"$.id" = "4";
Query OK, 1 row affected (0.04 sec)

mysql&gt; SELECT c, c-&gt;"$.id", g, n FROM jemp
     &gt;           WHERE JSON_EXTRACT(c, "$.id") &gt; 1
     &gt;           ORDER BY c-&gt;"$.name";
+-------------------------------+-----------+------+------+
| c                             | c-&gt;"$.id" | g   | n    |
+-------------------------------+-----------+------+------+
| {"id": "3", "name": "Barney"} | "3"       | 3    | NULL |
| {"id": "2", "name": "Wilma"}  | "2"       | 2    | NULL |
+-------------------------------+-----------+------+------+
2 rows in set (0.00 sec)
</pre>

<p>Это также работает со значениями массива JSON, как показано здесь:
<pre>
mysql&gt; CREATE TABLE tj10 (a JSON, b INT);
Query OK, 0 rows affected (0.26 sec)

mysql&gt; INSERT INTO tj10
     &gt;        VALUES ("[3,10,5,17,44]", 33), ("[3,10,5,17,[22,44,66]]", 0);
Query OK, 1 row affected (0.04 sec)

mysql&gt; SELECT a-&gt;"$[4]" FROM tj10;
+--------------+
| a-&gt;"$[4]" |
+--------------+
| 44           |
| [22, 44, 66] |
+--------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT * FROM tj10 WHERE a-&gt;"$[0]" = 3;
+------------------------------+---+
| a                            | b |
+------------------------------+---+
| [3, 10, 5, 17, 44]           |33 |
| [3, 10, 5, 17, [22, 44, 66]] | 0 |
+------------------------------+---+
2 rows in set (0.00 sec)
</pre>

<p>Поддержаны вложенные массивы. Использование выражения
<code>-&gt;</code> оценивается какe <code>NULL</code>,
если никакой ключ соответствия не найден в цели документа JSON,
как показано здесь:
<pre>
mysql&gt; SELECT * FROM tj10 WHERE a-&gt;"$[4][1]" IS NOT NULL;
+------------------------------+---+
| a                            | b |
+------------------------------+---+
| [3, 10, 5, 17, [22, 44, 66]] | 0 |
+------------------------------+---+

mysql&gt; SELECT a-&gt;"$[4][1]" FROM tj10;
+--------------+
| a-&gt;"$[4][1]" |
+--------------+
| NULL         |
| 44           |
+--------------+
2 rows in set (0.00 sec)
</pre>

<p>Это то же самое поведение, как в таких случаях,
используя <code>JSON_EXTRACT()</code>:
<pre>
mysql&gt; SELECT JSON_EXTRACT(a, "$[4][1]") FROM tj10;
+----------------------------+
| JSON_EXTRACT(a, "$[4][1]") |
+----------------------------+
| NULL                       |
| 44                         |
+----------------------------+
2 rows in set (0.00 sec)
</pre></li>

<li><a name="operator_json-inline-path"></a><p>
<a href="#operator_json-inline-path"><code><em><code>column</code>
</em>-&gt;&gt;<em><code>path</code></em></code></a></p>

<p>Это улучшенный, закрывающий кавычки оператор извлечения. Принимая во
внимание, что оператор <code>-&gt;</code> просто извлекает значение,
<code>-&gt;&gt;</code> кроме того, закрывает кавычки в извлеченном
результате. Другими словами, для данного значения столбца
<a href="types.htm#json"><code>JSON</code></a> <em><code>column</code></em>
и выражение пути <em><code>path</code></em>
следующие три выражения возвращают то же самое значение:</p>

<ul><li><p><a href="#function_json-unquote"><code>JSON_UNQUOTE(
</code></a><a href="#function_json-extract"><code>JSON_EXTRACT(
<em><code>column</code></em>, <em><code>path</code></em>))</code></a></li>

<li><code>JSON_UNQUOTE(<em><code>column</code></em></code>
<a href="#operator_json-column-path"><code>-&gt;</code></a>
<code><em><code>path</code></em>)</code></li>
<li><code><em><code>column</code></em>-&gt;&gt;<em><code>path</code></em>
</code></p></li></ul>

<p>Оператор <code>-&gt;&gt;</code> может использоваться везде, где
<code>JSON_UNQUOTE(JSON_EXTRACT())</code> был бы позволен. Это включает (но
не ограничено) списки <code>SELECT</code>, предложения <code>WHERE</code> и
<code>HAVING</code>, определения <code>ORDER BY</code> и <code>GROUP BY
</code>.</p>

<p>Следующие запросы демонстрируют некоторые эквиваленты оператора
<code>-&gt;&gt;</code> с другими выражениями в клиенте
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>:
<pre>
mysql&gt; SELECT * FROM jemp WHERE g &gt; 2;
+-------------------------------+---+
| c                             | g |
+-------------------------------+---+
| {"id": "3", "name": "Barney"} | 3 |
| {"id": "4", "name": "Betty"}  | 4 |
+-------------------------------+---+
2 rows in set (0.01 sec)

mysql&gt; SELECT c-&gt;'$.name' AS name FROM jemp WHERE g &gt; 2;
+----------+
| name     |
+----------+
| "Barney" |
| "Betty"  |
+----------+
2 rows in set (0.00 sec)

mysql&gt; SELECT JSON_UNQUOTE(c-&gt;'$.name') AS name
    -&gt;        FROM jemp WHERE g &gt; 2;
+--------+
| name   |
+--------+
| Barney |
| Betty  |
+--------+
2 rows in set (0.00 sec)

mysql&gt; SELECT c-&gt;&gt;'$.name' AS name
    -&gt;        FROM jemp WHERE g &gt; 2;
+--------+
| name   |
+--------+
| Barney |
| Betty  |
+--------+
2 rows in set (0.00 sec)
</pre>

<p>Этот оператор может также использоваться с массивами JSON,
как показано здесь:
<pre>
mysql&gt; CREATE TABLE tj10 (a JSON, b INT);
Query OK, 0 rows affected (0.26 sec)

mysql&gt; INSERT INTO tj10 VALUES
    -&gt;        ('[3,10,5,"x",44]', 33),
    -&gt;        ('[3,10,5,17,[22,"y",66]]', 0);
Query OK, 2 rows affected (0.04 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql&gt; SELECT a-&gt;"$[3]", a-&gt;"$[4][1]" FROM tj10;
+-----------+--------------+
| a-&gt;"$[3]" | a-&gt;"$[4][1]" |
+-----------+--------------+
| "x"       | NULL         |
| 17        |  "y"         |
+-----------+--------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT a-&gt;&gt;"$[3]", a-&gt;&gt;"$[4][1]" FROM tj10;
+------------+---------------+
| a-&gt;&gt;"$[3]" | a-&gt;&gt;"$[4][1]" |
+------------+---------------+
| x          | NULL          |
| 17         | y             |
+------------+---------------+
2 rows in set (0.00 sec)
</pre>

<p>Как с <a href="#operator_json-column-path"><code>-&gt;</code>
</a>, оператор <code>-&gt;&gt;</code> всегда расширяется в выводе
<a href="sql.htm#explain"><code>EXPLAIN</code></a>, как
следующий пример демонстрирует:
<pre>
mysql&gt; EXPLAIN SELECT c-&gt;&gt;'$.name' AS name
    -&gt;         FROM jemp WHERE g &gt; 2\G
*************************** 1. row ***************************
 id: 1
  select_type: SIMPLE
  table: jemp
   partitions: NULL
   type: range
possible_keys: i
key: i
key_len: 5
ref: NULL
   rows: 2
 filtered: 100.00
  Extra: Using where
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select
json_unquote(json_extract(`jtest`.`jemp`.`c`,'$.name')) AS `name` from
             `jtest`.`jemp` where (`jtest`.`jemp`.`g` &gt; 2)
1 row in set (0.00 sec)
</pre>

<p>Это подобно тому, как MySQL расширяет оператор
<a href="#operator_json-column-path"><code>-&gt;</code></a>
при тех же самых обстоятельствах.</p></li>

<li><a name="function_json-keys"></a><p>
<a href="#function_json-keys"><code>JSON_KEYS(<em><code>json_doc
</code></em>[, <em><code>path</code></em>])</code></a></p>

<p>Возвращает ключи из высокоуровневого значения объекта JSON как массив
JSON или если параметр <em><code>path</code></em> задан, высокоуровневые
ключи из выбранного пути. Возвращает <code>NULL</code>, если какой-либо
параметр <code>NULL</code>, параметр <em><code>json_doc</code></em> не
объект или <em><code>path</code></em>, если задан,
не определяет местонахождение объекта. Ошибка происходит, если параметр
<em><code>json_doc</code></em> не допустимый документ JSON или
<em><code>path</code></em> не допустимое выражение пути или содержит
подстановочный знак <code>*</code> или <code>**</code>.</p>

<p>Массив результата пуст, если выбранный объект пуст. Если высокоуровневое
значение имеет вложенне подобъекты, возвращаемое значение не включает ключи
из тех подобъектов.
<pre>
mysql&gt; SELECT JSON_KEYS('{"a": 1, "b": {"c": 30}}');
+---------------------------------------+
| JSON_KEYS('{"a": 1, "b": {"c": 30}}') |
+---------------------------------------+
| ["a", "b"]                            |
+---------------------------------------+

mysql&gt; SELECT JSON_KEYS('{"a": 1, "b": {"c": 30}}', '$.b');
+----------------------------------------------+
| JSON_KEYS('{"a": 1, "b": {"c": 30}}', '$.b') |
+----------------------------------------------+
| ["c"]                                        |
+----------------------------------------------+
</pre></li>

<li><a name="function_json-search"></a><p>
<a href="#function_json-search"><code>JSON_SEARCH(<em><code>
json_doc</code></em>,
<em><code>one_or_all</code></em>, <em><code>search_str</code></em>[,
<em><code>escape_char</code></em>[,
<em><code>path</code></em>] ...])</code></a></p>

<p>Возвращает путь к данной строке в пределах документа JSON. Возвращает
Returns <code>NULL</code>, если любой из параметров
<em><code>json_doc</code></em>, <em><code>search_str</code></em> или
<em><code>path</code></em> <code>NULL</code>, <em><code>path</code></em> не
существует в пределах документа, <em><code>search_str</code></em>
не найден. Ошибка происходит, если <em><code>json_doc</code></em>
не допустимый документ JSON, любой параметр <em><code>path</code></em>
не допустимое выражение пути, <em><code>one_or_all</code></em> не
<code>'one'</code> или <code>'all'</code> или
<em><code>escape_char</code></em> не постоянное выражение.</p>

<p>Параметр <em><code>one_or_all</code></em> затрагивает
поиск следующим образом:</p>

<ul><li><p><code>'one'</code>: Поиск заканчивается после первого соответствия
и возвращает одну строку пути. Не определено, какое
соответствие считают первым.</li>

<li><code>'all'</code>: Поиск возвращает все строки пути соответствия, таким
образом, что никакие дублирующие пути не включены. Если есть много строк, они
оформлены как массив. Порядок элементов массива неопределен.</p></li></ul>

<p>В пределах поисковой строки <em><code>search_str</code></em> символы
<code>%</code> и <code>_</code> работают как в операторе
<a href="#operator_like"><code>LIKE</code></a>: <code>%</code>
соответствует любому числу символов (включая нулевые символы), а
<code>_</code> соответствует точно одному символу.</p>

<p>Чтобы определить символ <code>%</code> или <code>_</code>
в строке поиска, предварите его символом ESC. Значение по умолчанию
<code>\</code>, если параметр <em><code>escape_char</code></em> отсутствует
или <code>NULL</code>. Иначе
<em><code>escape_char</code></em> должен быть константой, которая пуста
или один символ.</p>

<p>Для обработки символа ESC, отличие от поведения
<a href="#operator_like"><code>LIKE</code></a>
состоит в том что символ ESC для
<a href="#function_json-search"><code>JSON_SEARCH()</code></a>
должен быть оценен как константа во время компиляции, не только во время
выполнения. Например, если
<a href="#function_json-search"><code>JSON_SEARCH()</code></a>
используется в готовом запросе и параметр <em><code>escape_char</code></em>
поставляется, используя <code>?</code>, значение параметра могло бы быть
постоянным во время выполнения, но не во время компиляции.
<pre>
mysql&gt; SET @j = '["abc", [{"k": "10"}, "def"], {"x":"abc"}, {"y":"bcd"}]';
mysql&gt; SELECT JSON_SEARCH(@j, 'one', 'abc');
+-------------------------------+
| JSON_SEARCH(@j, 'one', 'abc') |
+-------------------------------+
| "$[0]"                        |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'abc');
+-------------------------------+
| JSON_SEARCH(@j, 'all', 'abc') |
+-------------------------------+
| ["$[0]", "$[2].x"]            |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'ghi');
+-------------------------------+
| JSON_SEARCH(@j, 'all', 'ghi') |
+-------------------------------+
| NULL                          |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10');
+------------------------------+
| JSON_SEARCH(@j, 'all', '10') |
+------------------------------+
| "$[1][0].k"                  |
+------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');
+-----------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$') |
+-----------------------------------------+
| "$[1][0].k"                             |
+-----------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');
+--------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |
+--------------------------------------------+
| "$[1][0].k"                                |
+--------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |
+---------------------------------------------+
| "$[1][0].k"                                 |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');
+-------------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |
+-------------------------------------------------+
| "$[1][0].k"                                     |
+-------------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');
+--------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |
+--------------------------------------------+
| "$[1][0].k"                                |
+--------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');
+-----------------------------------------------+
| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |
+-----------------------------------------------+
| "$[1][0].k"                                   |
+-----------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |
+---------------------------------------------+
| "$[2].x"                                    |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%a%');
+-------------------------------+
| JSON_SEARCH(@j, 'all', '%a%') |
+-------------------------------+
| ["$[0]", "$[2].x"]            |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%');
+-------------------------------+
| JSON_SEARCH(@j, 'all', '%b%') |
+-------------------------------+
| ["$[0]", "$[2].x", "$[3].y"]  |
+-------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |
+---------------------------------------------+
| "$[0]"                                      |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |
+---------------------------------------------+
| "$[2].x"                                    |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');
+---------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |
+---------------------------------------------+
| NULL                                        |
+---------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');
+-------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |
+-------------------------------------------+
| NULL                                      |
+-------------------------------------------+

mysql&gt; SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');
+-------------------------------------------+
| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |
+-------------------------------------------+
| "$[3].y"                                  |
+-------------------------------------------+
</pre></li></ul>

<h3><a name="json-modification-functions"></a>13.16.4.
Функции, которые изменяют значения JSON</h3>
<p>Функции в этом разделе изменяют значения JSON и возвращают результат.</p>

<ul><li><a name="function_json-append"></a><p>
<a href="#function_json-append"><code>JSON_APPEND(<em><code>
json_doc</code></em>, <em><code>path</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>, <em><code>val</code></em>] ...)</code></a></p>

<p>Эта функция была переименована в
<a href="#function_json-array-append"><code>JSON_ARRAY_APPEND()
</code></a>.</p></li>

<li><a name="function_json-array-append"></a><p>
<a href="#function_json-array-append"><code>JSON_ARRAY_APPEND(<em>
<code>json_doc</code></em>,
<em><code>path</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>, <em><code>val</code></em>] ...)</code></a></p>

<p>Добавляет значения в конец обозначенных массивов в пределах документа
JSON и возвращает результат. Возвращает <code>NULL</code>, если какой-либо
параметр <code>NULL</code>. Ошибка происходит, если
<em><code>json_doc</code></em> не допустимый документ JSON или любой
параметр <em><code>path</code></em> не допустимое выражение пути или содержит
подстановочный знак <code>*</code> или <code>**</code>.</p>

<p>Пары пути/значения оценены слева направо. Документ, представленный,
оценивая одну пару, становится новым значением, против которого
оценена следующая пара.</p>

<p>Если путь выбирает скаляр или значение объекта, то значение оформлено
в массив, и новое значение добавлено к тому массиву. Проигнорированы пары,
для которых путь не идентифицирует значения в документе JSON.
<pre>
mysql&gt; SET @j = '["a", ["b", "c"], "d"]';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);
+----------------------------------+
| JSON_ARRAY_APPEND(@j, '$[1]', 1) |
+----------------------------------+
| ["a", ["b", "c", 1], "d"]        |
+----------------------------------+

mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);
+----------------------------------+
| JSON_ARRAY_APPEND(@j, '$[0]', 2) |
+----------------------------------+
| [["a", 2], ["b", "c"], "d"]      |
+----------------------------------+

mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);
+-------------------------------------+
| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |
+-------------------------------------+
| ["a", [["b", 3], "c"], "d"]         |
+-------------------------------------+

mysql&gt; SET @j = '{"a": 1, "b": [2, 3], "c": 4}';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');
+------------------------------------+
| JSON_ARRAY_APPEND(@j, '$.b', 'x')  |
+------------------------------------+
| {"a": 1, "b": [2, 3, "x"], "c": 4} |
+------------------------------------+

mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');
+--------------------------------------+
| JSON_ARRAY_APPEND(@j, '$.c', 'y')    |
+--------------------------------------+
| {"a": 1, "b": [2, 3], "c": [4, "y"]} |
+--------------------------------------+

mysql&gt; SET @j = '{"a": 1}';
mysql&gt; SELECT JSON_ARRAY_APPEND(@j, '$', 'z');
+---------------------------------+
| JSON_ARRAY_APPEND(@j, '$', 'z') |
+---------------------------------+
| [{"a": 1}, "z"]                 |
+---------------------------------+
</pre></li>

<li><a name="function_json-array-insert"></a><p>
<a href="#function_json-array-insert"><code>JSON_ARRAY_INSERT(<em>
<code>json_doc</code></em>,
<em><code>path</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>, <em><code>val</code></em>] ...)</code></a></p>

<p>Обновляет документ JSON, вставляя в массив в пределах документа и
возвращая измененный документ. Возвращает <code>NULL</code>, если какой-либо
параметр <code>NULL</code>. Ошибка происходит, если
<em><code>json_doc</code></em> не допустимый документ JSON или любой параметр
<em><code>path</code></em> не допустимое выражение пути, содержит
подстановочный знак <code>*</code> или <code>**</code>
или не заканчивается идентификатором элемента массива.</p>

<p>Пары пути/значения оценены слева направо. Документ, представленный,
оценивая одну пару, становится новым значением, против которого
оценена следующая пара.</p>

<p>Проигнорированы пары, для которых путь не идентифицирует массив
в документе JSON. Если путь идентифицирует элемент массива, соответствующее
значение вставлено в той позиции элемента, смещая любые последующие значения
направо. Если путь идентифицирует позицию массива после конца массива,
значение вставлено в конце массива.
<pre>
mysql&gt; SET @j = '["a", {"b": [1, 2]}, [3, 4]]';
mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');
+------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |
+------------------------------------+
| ["a", "x", {"b": [1, 2]}, [3, 4]]  |
+------------------------------------+

mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');
+--------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |
+--------------------------------------+
| ["a", {"b": [1, 2]}, [3, 4], "x"]    |
+--------------------------------------+

mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');
+-----------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |
+-----------------------------------------+
| ["a", {"b": ["x", 1, 2]}, [3, 4]]       |
+-----------------------------------------+

mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');
+---------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |
+---------------------------------------+
| ["a", {"b": [1, 2]}, [3, "y", 4]]     |
+---------------------------------------+

mysql&gt; SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');
+----------------------------------------------------+
| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |
+----------------------------------------------------+
| ["x", "a", {"b": [1, 2]}, [3, 4]]                  |
+----------------------------------------------------+
</pre>

<p>Более ранние модификации затрагивают позиции следующих элементов в
массиве, так что последующие пути в том же самом вызове
<a href="#function_json-array-insert"><code>JSON_ARRAY_INSERT()
</code></a> должны принять это во внимание. В заключительном примере второй
путь ничего не вставляет, потому что путь больше ничему не соответствует
после первой вставки.</p></li>

<li><a name="function_json-insert"></a><p>
<a href="#function_json-insert"><code>JSON_INSERT(<em><code>
json_doc</code></em>, <em><code>path</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>, <em><code>val</code></em>] ...)</code></a></p>

<p>Вставляет данные в документ JSON и возвращает результат. Возвращает
<code>NULL</code>, если какой-либо параметр <code>NULL</code>. Ошибка
происходит, если параметр <em><code>json_doc</code></em> не допустимый
документ JSON или любой параметр <em><code>path</code></em> не допустимое
выражение пути или содержит подстановочный знак
<code>*</code> или <code>**</code>.</p>

<p>Пары пути/значения оценены слева направо. Документ, представленный,
оценивая одну пару, становится новым значением, против которого
оценена следующая пара.</p>

<p>Пара пути/значения для существующего пути в документе проигнорирована и не
перезаписывает существующее значение документа. Пара пути/значения для
несуществующего пути в документе добавляет значение к документу, если путь
идентифицирует один из этих типов значений:</p>

<ul><li><p>Член, не присутствующий в существующем объекте. Член добавлен к
объекту и связан с новым значением.</li>

<li>Позиция после конца существующего массива. Массив расширен с новым
значением. Если существующее значение не массив, оно оформлено как массив,
который расширен новым значением.</p></li></ul>

<p>Иначе пара пути/значения для несуществующего пути в документе
проигнорирована и не имеет никакого эффекта.</p>
<p>Для сравнения
<a href="#function_json-insert"><code>JSON_INSERT()</code></a>,
<a href="#function_json-replace"><code>JSON_REPLACE()</code></a> и
<a href="#function_json-set"><code>JSON_SET()</code></a> см.
описание <a href="#function_json-set"><code>JSON_SET()</code></a>.
<pre>
mysql&gt; SET @j = '{ "a": 1, "b": [2, 3]}';
mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');
+----------------------------------------------------+
| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |
+----------------------------------------------------+
| {"a": 1, "b": [2, 3], "c": "[true, false]"}        |
+----------------------------------------------------+
</pre></li>

<li><a name="function_json-merge"></a><p>
<a href="#function_json-merge"><code>JSON_MERGE(<em><code>json_doc
</code></em>, <em><code>json_doc</code></em>[,
<em><code>json_doc</code></em>] ...)</code></a></p>

<p>Сливает два или больше документа JSON и возвращает слитный результат.
Возвращает <code>NULL</code>, если какой-либо параметр <code>NULL</code>.
Ошибка происходит, если какой-либо параметр не допустимый документ JSON.</p>

<p>Слияние имеет место согласно следующим правилам:</p>
<ul><li><p>Смежные массивы слиты в единственный массив.</li>
<li>Смежные объекты слиты в единственный объект.</li>
<li>Скалярное значение автооформлено и слито как массив.</li>
<li>Смежные массив и объект слиты, оформляя
объект как массив и сливая два массива.</p></li></ul>

<pre>
mysql&gt; SELECT JSON_MERGE('[1, 2]', '[true, false]');
+---------------------------------------+
| JSON_MERGE('[1, 2]', '[true, false]') |
+---------------------------------------+
| [1, 2, true, false]                   |
+---------------------------------------+

mysql&gt; SELECT JSON_MERGE('{"name": "x"}', '{"id": 47}');
+-------------------------------------------+
| JSON_MERGE('{"name": "x"}', '{"id": 47}') |
+-------------------------------------------+
| {"id": 47, "name": "x"}                   |
+-------------------------------------------+

mysql&gt; SELECT JSON_MERGE('1', 'true');
+-------------------------+
| JSON_MERGE('1', 'true') |
+-------------------------+
| [1, true]               |
+-------------------------+

mysql&gt; SELECT JSON_MERGE('[1, 2]', '{"id": 47}');
+------------------------------------+
| JSON_MERGE('[1, 2]', '{"id": 47}') |
+------------------------------------+
| [1, 2, {"id": 47}]                 |
+------------------------------------+
</pre></li>

<li><a name="function_json-remove"></a><p>
<a href="#function_json-remove"><code>JSON_REMOVE(<em><code>json_doc
</code></em>, <em><code>path</code></em>[, <em><code>path</code></em>] ...)
</code></a></p>

<p>Удаляет данные из документа JSON и возвращает результат.
Возвращает <code>NULL</code>, если какой-либо параметр <code>NULL</code>.
Ошибка происходит, если <em><code>json_doc</code></em> не допустимый документ
JSON или любой параметр <em><code>path</code></em> не допустимое выражение
пути или содержит подстановочный знак <code>$</code>,
<code>*</code> или <code>**</code>.</p>

<p>Параметры <em><code>path</code></em> оценены слева направо. Документ,
представленный, оценивая один путь, становится новым значением, против
которого оценен следующий путь.</p>

<p>Это не ошибка, если элемент, который будет удален, не существует в
документе: в этом случае путь не затрагивает документ.
<pre>
mysql&gt; SET @j = '["a", ["b", "c"], "d"]';
mysql&gt; SELECT JSON_REMOVE(@j, '$[1]');
+-------------------------+
| JSON_REMOVE(@j, '$[1]') |
+-------------------------+
| ["a", "d"]              |
+-------------------------+
</pre></li>

<li><a name="function_json-replace"></a><p>
<a href="#function_json-replace"><code>JSON_REPLACE(<em><code>
json_doc</code></em>, <em><code>path</code></em>,
<em><code>val</code></em>[, <em><code>path</code></em>,
<em><code>val</code></em>] ...)</code></a></p>

<p>Заменяет существующие значения в документе JSON и возвращает результат.
Возвращает <code>NULL</code>, если какой-либо параметр <code>NULL</code>.
Ошибка происходит, если параметр <em><code>json_doc</code></em> не допустимый
документ JSONили любой <em><code>path</code></em> не допустимое выражение
пути или содержит подстановочный знак <code>*</code> или <code>**</code>.</p>

<p>Пары пути/значения оценены слева направо. Документ, представленный,
оценивая одну пару, становится новым значением, против которого
оценена следующая пара.</p>

<p>Пара пути/значения для существующего пути в документе перезаписывает
существующее значение документа с новым значением. Пара пути/значения для
несуществующего пути в документе проигнорирована и не имеет никакого эффекта.
</p>

<pre>
mysql&gt; SET @j = '{ "a": 1, "b": [2, 3]}';
mysql&gt; SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');
+-----------------------------------------------------+
| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |
+-----------------------------------------------------+
| {"a": 10, "b": [2, 3]}                              |
+-----------------------------------------------------+
</pre></li>

<li><a name="function_json-set"></a><p>
<a href="#function_json-set"><code>JSON_SET(<em><code>json_doc
</code></em>, <em><code>path</code></em>, <em><code>val</code></em>[,
<em><code>path</code></em>, <em><code>val</code></em>] ...)</code></a></p>

<p>Вставляет или обновляет данные в документе JSON и возвращает результат.
Возвращает <code>NULL</code>, если какой-либо параметр <code>NULL</code> или
<em><code>path</code></em>, если дано, не определяет местонахождение объекта.
Ошибка происходит, если <em><code>json_doc</code></em> не допустимый документ
JSON или <em><code>path</code></em> не допустимое выражение пути или содержит
подстановочный знак <code>*</code> или <code>**</code>.</p>

<p>Пары пути/значения оценены слева направо. Документ, представленный,
оценивая одну пару, становится новым значением, против которого
оценена следующая пара.</p>

<p>Пара пути/значения для существующего пути в документе перезаписывает
существующее значение документа новым значением. Пара пути/значения для
несуществующего пути в документе добавляет значение к документу, если
путь идентифицирует один из этих типов значений:</p>

<ul><li><p>Член, не присутствующий в существующем объекте.
Член добавлен к объекту и связан с новым значением.</li>
<li>Позиция после конца существующего массива. Массив расширен новым
значением. Если существующее значение не массив, оно автооформлено как
массив, расширенный новым значением.</p></li></ul>

<p>Иначе пара пути/значения для несуществующего пути в документе
проигнорирована и не имеет никакого эффекта.</p>
<p>Функции <a href="#function_json-set"><code>JSON_SET()</code></a>,
<a href="#function_json-insert"><code>JSON_INSERT()</code></a> и
<a href="#function_json-replace"><code>JSON_REPLACE()
</code></a> связаны:</p>

<ul><li><p><a href="#function_json-set"><code>JSON_SET()</code></a>
заменяет существующие значения и добавляет несуществующие значения.</li>
<li><a href="#function_json-insert"><code>JSON_INSERT()</code></a>
вставляет значения, не заменяя существующие.</li>
<li><a href="#function_json-replace"><code>JSON_REPLACE()</code></a>
заменяет <span><em>только</em></span> существующие значения.</p></li></ul>

<p>Следующие примеры иллюстрируют эти различия, используя один путь, который
действительно существует в документе (<code>$.a</code>)
и другой, который не существует (<code>$.c</code>):
<pre>
mysql&gt; SET @j = '{ "a": 1, "b": [2, 3]}';
mysql&gt; SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');
+-------------------------------------------------+
| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |
+-------------------------------------------------+
| {"a": 10, "b": [2, 3], "c": "[true, false]"}    |
+-------------------------------------------------+

mysql&gt; SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');
+----------------------------------------------------+
| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |
+----------------------------------------------------+
| {"a": 1, "b": [2, 3], "c": "[true, false]"}        |
+----------------------------------------------------+

mysql&gt; SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');
+-----------------------------------------------------+
| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |
+-----------------------------------------------------+
| {"a": 10, "b": [2, 3]}                              |
+-----------------------------------------------------+
</pre></li>

<li><a name="function_json-unquote"></a><p>
<a href="#function_json-unquote"><code>JSON_UNQUOTE(<em><code>val
</code></em>)</code></a></p>

<p>Закрывает кавычки значения JSON и возвращает результат как строку в
<code>utf8mb4</code>. Возвращает <code>NULL</code>, если параметр
<code>NULL</code>. Ошибка происходит, если значение начинается и
заканчивается двойными кавычками, но не является допустимой
буквальной строкой JSON.</p>

<p>В пределах строки у определенных последовательностей нет особого значения,
если включен режим SQL <a href="server.htm#sqlmode_no_backslash_escapes">
<code>NO_BACKSLASH_ESCAPES</code></a>. Каждая из этих последовательностей
начинается с наклонной черты влево (<code>\</code>), известной как
<span><em>escape character</em></span>. MySQL признает
escape-последовательности, показанные в
<a href="#json-unquote-character-escape-sequences">
таблице 13.21</a>. Для всех других escape-последовательностей проигнорирована
наклонная черта влево. Таким образом, экранированный символ интерпретируется,
как будто его не экранировали. Например, <code>\x</code> соответствует
<code>x</code>. Эти последовательности являются чувствительными к регистру.
Например, <code>\b</code> интерпретируется как клавиша Backspace, но
<code>\B</code> интерпретируется только как <code>B</code>.</p>

<a name="json-unquote-character-escape-sequences"></a>
<p><b>Таблица 13.21. Специальные символы escape-последовательностей
для JSON_UNQUOTE()</b></p>
<table border="1">
<thead><tr><th scope="col">Escape-последовательность</th><th scope="col">
Символ, представленный последовательностью</th></tr></thead>
<tbody><tr><td scope="row"><code>\"</code></td>
<td>Двойная кавычка (<code>"</code>)</td></tr>
<tr><td scope="row"><code>\b</code></td><td>backspace</td></tr>
<tr><td scope="row"><code>\f</code></td><td>Символ перевода формата</td></tr>
<tr><td scope="row"><code>\n</code></td><td>Новая строка</td></tr>
<tr><td scope="row"><code>\r</code></td><td>Возврат каретки</td></tr>
<tr><td scope="row"><code>\t</code></td><td>Табуляция</td></tr>
<tr><td scope="row"><code>\\</code></td>
<td>backslash (<code>\</code>)</td></tr>
<tr><td scope="row"><code>\u<em><code>XXXX</code></em></code></td>
<td>Байты UTF-8 для значения Unicode <em><code>XXXX</code></em></td>
</tr></tbody></table>

<p>Два простых примера использования этой функции:
<pre>
mysql&gt; SET @j = '"abc"';
mysql&gt; SELECT @j, JSON_UNQUOTE(@j);
+-------+------------------+
| @j    | JSON_UNQUOTE(@j) |
+-------+------------------+
| "abc" | abc              |
+-------+------------------+

mysql&gt; SET @j = '[1, 2, 3]';
mysql&gt; SELECT @j, JSON_UNQUOTE(@j);
+-----------+------------------+
| @j        | JSON_UNQUOTE(@j) |
+-----------+------------------+
| [1, 2, 3] | [1, 2, 3]        |
+-----------+------------------+
</pre>

<p>Следующий набор примеров показывает, как
<code>JSON_UNQUOTE</code> обрабатывает последовательности при выключенном и
включенном режиме <a href="server.htm#sqlmode_no_backslash_escapes"><code>
NO_BACKSLASH_ESCAPES</code></a>:
<pre>
mysql&gt; SELECT @@sql_mode;
+------------+
| @@sql_mode |
+------------+
|            |
+------------+

mysql&gt; SELECT JSON_UNQUOTE('"\\t\\u0032"');
+------------------------------+
| JSON_UNQUOTE('"\\t\\u0032"') |
+------------------------------+
| 2                            |
+------------------------------+

mysql&gt; SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';
mysql&gt; SELECT JSON_UNQUOTE('"\\t\\u0032"');
+------------------------------+
| JSON_UNQUOTE('"\\t\\u0032"') |
+------------------------------+
| \t\u0032                     |
+------------------------------+

mysql&gt; SELECT JSON_UNQUOTE('"\t\u0032"');
+----------------------------+
| JSON_UNQUOTE('"\t\u0032"') |
+----------------------------+
| 2                          |
+----------------------------+
</pre></li></ul>

<h3><a name="json-attribute-functions"></a>13.16.5.
Функции, возвращающие атрибуты значений JSON</h3>
<p>Функции в этом разделе возвращают признаки значений JSON.</p>

<ul><li><a name="function_json-depth"></a><p>
<a href="#function_json-depth"><code>JSON_DEPTH(<em><code>json_doc
</code></em>)</code></a></p>

<p>Возвращает максимальную глубину документа JSON. Возвращает
<code>NULL</code>, если параметр <code>NULL</code>. Ошибка происходит, если
параметр не допустимый документ JSON.</p>

<p>У пустого массива, пустого объекта или скалярного значения есть глубина 1.
У непустого массива, содержащего только элементы глубины 1 или непустой
объект, содержащий только значения глубины 1, есть глубина 2. Иначе у
документа JSON есть глубина больше 2.
<pre>
mysql&gt; SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');
+------------------+------------------+--------------------+
| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |
+------------------+------------------+--------------------+
| 1                | 1                |  1                 |
+------------------+------------------+--------------------+

mysql&gt; SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');
+------------------------+------------------------+
| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |
+------------------------+------------------------+
|  2                     |  2                     |
+------------------------+------------------------+

mysql&gt; SELECT JSON_DEPTH('[10, {"a": 20}]');
+-------------------------------+
| JSON_DEPTH('[10, {"a": 20}]') |
+-------------------------------+
|   3                           |
+-------------------------------+
</pre></li>

<li><a name="function_json-length"></a><p>
<a href="#function_json-length"><code>JSON_LENGTH(<em><code>json_doc
</code></em>[, <em><code>path</code></em>])</code></a></p>

<p>Возвращает длину документа JSON или, если задан
<em><code>path</code></em>, длину значения в пределах документа,
идентифицированного путем. Возвращает <code>NULL</code>, если какой-либо
параметр <code>NULL</code> или <em><code>path</code></em> не идентифицирует
значение в документе. Ошибка происходит, если <em><code>json_doc</code></em>
не допустимый документ JSON или параметр <em><code>path</code></em> не
допустимое выражение пути или содержит подстановочный знак
<code>*</code> или <code>**</code>.</p>

<p>Длина документа определена следующим образом:</p>
<ul><li><p>Длина скаляра 1.</li>
<li>Длина массива = число элементов массива.</li>
<li>Длина объекта = число членов объекта.</li>
<li>Длина не считает длину вложенных массивов или объектов.</p></li></ul>

<pre>
mysql&gt; SELECT JSON_LENGTH('[1, 2, {"a": 3}]');
+---------------------------------+
| JSON_LENGTH('[1, 2, {"a": 3}]') |
+---------------------------------+
| 3                               |
+---------------------------------+

mysql&gt; SELECT JSON_LENGTH('{"a": 1, "b": {"c": 30}}');
+-----------------------------------------+
| JSON_LENGTH('{"a": 1, "b": {"c": 30}}') |
+-----------------------------------------+
|   2                                     |
+-----------------------------------------+

mysql&gt; SELECT JSON_LENGTH('{"a": 1, "b": {"c": 30}}', '$.b');
+------------------------------------------------+
| JSON_LENGTH('{"a": 1, "b": {"c": 30}}', '$.b') |
+------------------------------------------------+
| 1                                              |
+------------------------------------------------+
</pre></li>

<li><a name="function_json-type"></a><p>
<a href="#function_json-type"><code>JSON_TYPE(<em><code>json_val
</code></em>)</code></a></p>

<p>Возвращает строку <code>utf8mb4</code>, указывающую на тип значения JSON:
<pre>
mysql&gt; SET @j = '{"a": [10, true]}';
mysql&gt; SELECT JSON_TYPE(@j);
+---------------+
| JSON_TYPE(@j) |
+---------------+
| OBJECT        |
+---------------+

mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));
+------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |
+------------------------------------+
| ARRAY                              |
+------------------------------------+

mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));
+---------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |
+---------------------------------------+
| INTEGER                               |
+---------------------------------------+

mysql&gt; SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));
+---------------------------------------+
| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |
+---------------------------------------+
| BOOLEAN                               |
+---------------------------------------+
</pre>

<p><a href="#function_json-type"><code>JSON_TYPE()</code></a>
возвращает <code>NULL</code>, если параметр <code>NULL</code>:
<pre>
mysql&gt; SELECT JSON_TYPE(NULL);
+-----------------+
| JSON_TYPE(NULL) |
+-----------------+
| NULL            |
+-----------------+
</pre>

<p>Ошибка происходит, если параметр не допустимое значение JSON:
<pre>
mysql&gt; SELECT JSON_TYPE(1);
ERROR 3146 (22032): Invalid data type for JSON data in argument 1
to function json_type; a JSON string or JSON type is required.
</pre>

<p>Для не-<code>NULL</code> и неошибочного результата следующий список
описывает возможные возвращаемые значения
<a href="#function_json-type"><code>JSON_TYPE()</code></a>:</p>

<ul><li><p>Просто типы JSON:</p>
<ul><li><p><code>OBJECT</code>: Объекты JSON.</li>
<li><code>ARRAY</code>: Массивы JSON.</li>
<li><code>BOOLEAN</code>: Истинные и ложные литералы JSON.</li>
<li><code>NULL</code>: Литерал JSON null.</p></li></ul></li>

<li><p>Числовые типы:</p>
<ul><li><p><code>INTEGER</code>: MySQL
<a href="types.htm#integer-types"><code>TINYINT</code></a>,
<a href="types.htm#integer-types"><code>SMALLINT</code></a>,
<a href="types.htm#integer-types"><code>MEDIUMINT</code></a> и
<a href="types.htm#integer-types"><code>INT</code></a> и скаляры
<a href="types.htm#integer-types"><code>BIGINT</code></a>.</li>

<li><code>DOUBLE</code>: скаляры MySQL
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a> и
<a href="types.htm#floating-point-types"><code>FLOAT</code></a>.</li>

<li><code>DECIMAL</code>: скаляры MySQL
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> и
<a href="types.htm#fixed-point-types"><code>NUMERIC</code></a>.
</p></li></ul></li>

<li><p>Временные типы:</p>
<ul><li><p><code>DATETIME</code>: MySQL
<a href="types.htm#datetime"><code>DATETIME</code></a> и
<a href="types.htm#datetime"><code>TIMESTAMP</code></a>.</li>

<li><code>DATE</code>: MySQL
<a href="types.htm#datetime"><code>DATE</code></a>.</li>
<li><code>TIME</code>: MySQL
<a href="types.htm#time"><code>TIME</code></a>.</p></li></ul></li>

<li><p>Строковые типы:</p>
<ul><li><p><code>STRING</code>: MySQL символьные скаляры <code>utf8</code>:
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>,
<a href="types.htm#enum"><code>ENUM</code></a> и
<a href="types.htm#set"><code>SET</code></a>.</p></li></ul></li>

<li><p>Двоичные типы:</p>
<ul><li><p><code>BLOB</code>:
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a> и
<a href="types.htm#bit-type"><code>BIT</code></a>.</p></li></ul></li>
<li><p>Все другие типы:</p>
<ul><li><p><code>OPAQUE</code> (raw биты).</p></li></ul></li></ul></li>

<li><a name="function_json-valid"></a><p>
<a href="#function_json-valid"><code>JSON_VALID(<em><code>val</code>
</em>)</code></a></p>

<p>Возвращает 0 или 1, чтобы указать, является ли значение допустимым
документом JSON. Возвращает <code>NULL</code>,
если параметр <code>NULL</code>.
<pre>
mysql&gt; SELECT JSON_VALID('{"a": 1}');
+------------------------+
| JSON_VALID('{"a": 1}') |
+------------------------+
|  1                     |
+------------------------+

mysql&gt; SELECT JSON_VALID('hello'), JSON_VALID('"hello"');
+---------------------+-----------------------+
| JSON_VALID('hello') | JSON_VALID('"hello"') |
+---------------------+-----------------------+
|   0                 | 1                     |
+---------------------+-----------------------+
</pre></li></ul>

<h3><a name="json-path-syntax"></a>13.16.6. Синтаксис JSON Path</h3>
<p>Многие из функций, описанных в предыдущих разделах, требуют выражения
пути, чтобы идентифицировать определенный элемент в документе JSON. Путь
состоит из контекста пути, сопровождаемого одной или более метками пути. Для
путей, используемых в MySQL-функциях JSON, контекст всегда документ, который
обрабатывается, представленный лидирующим символом <code>$</code>. Метки пути
отделены символами точки (<code>.</code>). Элементы в массивах представлены
<code>[<em><code>N</code></em>]</code>, здесь <em><code>N</code></em>
неотрицательное целое число. Названия ключей должны быть заключены в двойные
кавычки строки или являться допустимыми идентификаторами ECMAScript
(см. <code>http://www.ecma-international.org/ecma-262/5.1/#sec-7.6</code>).
Выражения пути, как текст JSON, должны быть закодированы, используя наборы
символов <code>ascii</code>, <code>utf8</code> или <code>utf8mb4</code>.
Другие кодировки символов неявно приводятся к <code>utf8mb4</code>.
Полный синтаксис выглядит так:

<pre>
<em><code>pathExpression</code></em>:
<em><code>scope</code></em>[(<em><code>pathLeg</code></em>)*]
<em><code>pathLeg</code></em>:
<em><code>member</code></em> | <em><code>arrayLocation</code></em> | <em><code>doubleAsterisk</code></em>
<em><code>member</code></em>:
<em><code>period</code></em> ( <em><code>keyName</code></em> | <em><code>asterisk</code></em> )
<em><code>arrayLocation</code></em>:
<em><code>leftBracket</code></em> ( <em><code>nonNegativeInteger</code></em> | <em><code>asterisk</code></em> ) <em><code>rightBracket</code></em>
<em><code>keyName</code></em>:
<em><code>ESIdentifier</code></em> | <em><code>doubleQuotedString</code></em>
<em><code>doubleAsterisk</code></em>: '**'
<em><code>period</code></em>: '.'
<em><code>asterisk</code></em>: '*'
<em><code>leftBracket</code></em>: '['
<em><code>rightBracket</code></em>: ']'
</pre>

<p>Как отмечено ранее, в MySQL, контекст пути всегда обрабатываемый документ,
представленный как <code>$</code>. Вы можете использовать <code>'$'</code>
как синоним для документа в выражениях пути JSON.</p>

<p>Некоторые реализации поддерживают ссылки столбца для контекстов путей
JSON, в настоящее время, MySQL не поддерживает их.</p>
<p>Подстановочные знаки <code>*</code> и <code>**</code>
используются следующим образом:</p>

<ul><li><p><code>.*</code> представляет значения всех членов в объекте.</li>
<li><code>[*]</code> представляет значения всех элементов в массиве.</li>
<li><code>[<em><code>prefix</code></em>]**<em><code>suffix</code></em></code>
представляет все пути, начинающиеся с <em><code>prefix</code></em> с
окончанием <em><code>suffix</code></em>. <em><code>prefix</code></em>
является дополнительным, в то время как <em><code>suffix</code></em>
обязателен. Путь, возможно, не заканчивается в <code>**</code>.</p>

<p>Кроме того, путь, возможно, не содержит последовательность
<code>***</code>.</p></li></ul>

<p>Для примеров синтаксиса пути см. описания различных функций JSON, которые
берут пути в качестве параметров, например,
<a href="#function_json-contains-path"><code>JSON_CONTAINS_PATH()
</code></a> и <a href="#function_json-replace"><code>JSON_REPLACE()
</code></a>. Для примеров, которые включают использование <code>*</code> и
<code>**</code> см. описание функции
<a href="#function_json-search"><code>JSON_SEARCH()</code></a>.</p>

<h2><a name="gtid-functions"></a>13.17.
Функции, используемые с глобальными транзакционными ID</h2>
<p>Функции, описанные в этом разделе, используются с GTID-репликацией.
Важно иметь в виду, что все эти функции берут строковые представления наборов
GTID как параметры, наборы GTID должны всегда заключаться в кавычки,
когда используются с ними.</p>

<p>Союз двух наборов GTID просто их представления как строки, объединенные
запятой. Другими словами, Вы можете определить очень простую функцию для
того, чтобы получить союз двух наборов GTID, подобных создаваемому здесь:
<pre>
CREATE FUNCTION GTID_UNION(g1 TEXT, g2 TEXT)
RETURNS TEXT DETERMINISTIC
RETURN CONCAT(g1,',',g2);
</pre>

<p><b>Таблица 13.22. Функции GTID</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_gtid-subset"><code>
GTID_SUBSET()</code></a></td><td>Возвратит истину, если все GTID в
подмножестве установлены, иначе ложь</td></tr>
<tr><td scope="row"><a href="#function_gtid-subtract"><code>
GTID_SUBTRACT()</code></a></td><td>Возвратит все GTID в наборе, которые
не находятся в подмножестве</td></tr>
<tr><td scope="row"><a href="#function_wait-for-executed-gtid-set">
<code>WAIT_FOR_EXECUTED_GTID_SET()</code></a></td><td>
Ждать, пока данные GTID не выполнятся на ведомом устройстве</td></tr>
<tr><td scope="row"><a href="#function_wait-until-sql-thread-after-gtids">
<code>WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()</code></a></td><td>
Ждать, пока данные GTID не выполнятся на ведомом устройстве
</td></tr></tbody></table>

<ul><li><a name="function_gtid-subset"></a><p>
<a href="#function_gtid-subset"><code>GTID_SUBSET(<em><code>subset
</code></em>,<em><code>set</code></em>)</code></a></p>

<p>Учитывая два набора ID <em><code>subset</code></em> и
<em><code>set</code></em>, вернет истину, если все GTID в
<em><code>subset</code></em> находятся также в
<em><code>set</code></em>. Иначе ложь.</p>

<p>Наборы GTID, используемые с этой функцией, представлены как строки, как
показано в следующих примерах:
<pre>
mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',
    -&gt;        '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',
    -&gt;        '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:23-25',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 1
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',
    -&gt;        '3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57')\G
*************************** 1. row ***************************
GTID_SUBSET('3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57'): 0
1 row in set (0.00 sec)
</pre></li>

<li><a name="function_gtid-subtract"></a><p>
<a href="#function_gtid-subtract"><code>GTID_SUBTRACT(<em><code>
set</code></em>,<em><code>subset</code></em>)</code></a></p>

<p>Учитывая два набора глобальных операционных ID
<em><code>subset</code></em> и <em><code>set</code></em>,
возвращает только те GTID из <em><code>set</code></em>, которые
не находятся в <em><code>subset</code></em>.</p>

<p>Все наборы GTID, используемые с этой функцией, представлены как строки и
должны быть заключены в кавычки, как показано в этих примерах:
<pre>
mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt; '3E11FA47-71CA-11E1-9E33-C80AA9429562:21')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:21'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:22-57
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt; '3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:20-25'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:26-57
1 row in set (0.00 sec)

mysql&gt; SELECT GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
    -&gt; '3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24')\G
*************************** 1. row ***************************
GTID_SUBTRACT('3E11FA47-71CA-11E1-9E33-C80AA9429562:21-57',
'3E11FA47-71CA-11E1-9E33-C80AA9429562:23-24'): 3e11fa47-71ca-11e1-9e33-c80aa9429562:21-22:25-57
1 row in set (0.01 sec)
</pre></li>

<li><a name="function_wait-until-sql-thread-after-gtids"></a><p>
<a href="#function_wait-until-sql-thread-after-gtids"><code>
WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(<em><code>gtid_set</code></em>[,<em><code>
timeout</code></em>][,<em><code>channel</code></em>])</code></a></p>

<p>Ждать, пока ведомый поток SQL не выполнит все транзакции, глобальные
операционные идентификаторы которых содержатся в
<em><code>gtid_set</code></em> (см.
<a href="replica.htm#replication-gtids-concepts">раздел 19.1.3.1</a>
для определения <span>GTID sets</span>), или <em><code>timeout</code></em>
секунд, смотря что происходит сначала. <em><code>timeout</code></em>
является дополнительным параметром: тайм-аут по умолчанию составляет 0
секунд, когда функция ждет, пока все транзакции в наборе GTID
не были выполнены.</p>

<p>Наборы GTID, используемые с этой функцией, представлены как строки и
должны быть заключены в кавычки как показано в следующем примере:
<pre>
mysql&gt; SELECT WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');
    -&gt; 5
</pre>

<p>Возвращаемое значение число транзакционных событий, которые были запущены.
Если GTID-репликация не является активной (то есть, если значение
<a href="replica.htm#sysvar_gtid_mode"><code>gtid_mode</code></a>
<code>OFF</code>), тогда это значение неопределено и таким образом
<code>WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()</code> вернет <code>NULL</code>.
Если ведомое устройство не работает, эта функция
также возвращает <code>NULL</code>.</p>

<p>Опция <em><code>channel</code></em> позволяет Вам выбрать, к которому
каналу репликации относится функция. Если <em><code>channel</code></em>
не установлен и никакие каналы кроме канала по умолчанию не существуют,
функция относится к каналу по умолчанию. Если Вы используете много каналов
репликации, Вы должны определить <em><code>channel</code></em>, поскольку
иначе не известно, на который канал должна действовать функция. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p></li>

<li><a name="function_wait-for-executed-gtid-set"></a><p>
<a href="#function_wait-for-executed-gtid-set"><code>
WAIT_FOR_EXECUTED_GTID_SET(<em><code>gtid_set</code></em>[,
<em><code>timeout</code></em>])</code></a></p>

<p><code>WAIT_FOR_EXECUTED_GTID_SET()</code> подобна
<code>WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()</code> в том, что ждет, пока сервер
не выполнит все транзакции, глобальные операционные идентификаторы которых
содержатся в <em><code>gtid_set</code></em>, или пока не пройдет
<em><code>timeout</code></em> секунд. В отличие от
<code>WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()</code>,
<code>WAIT_FOR_EXECUTED_GTID_SET()</code> не принимает во внимание, работает
ли ведомое устройство или нет, и ошибка возвращена, если GTID-репликация
не включена вообще.</p>

<p>Кроме того, <code>WAIT_FOR_EXECUTED_GTID_SET()</code> возвращает только
статус запроса, где 0 представляет успех, 1, представляет тайм-аут, а любые
другие отказы возвращают сообщение об ошибке.</p></li></ul>

<h2><a name="miscellaneous-functions"></a>13.18. Прочие функции</h2>
<p><b>Таблица 13.23. Прочие функции</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_any-value"><code>
ANY_VALUE()</code></a></td><td>Подавить отклонение значения
ONLY_FULL_GROUP_BY</td></tr>
<tr><td scope="row"><a href="#function_bin-to-uuid"><code>
BIN_TO_UUID()</code></a></td><td>Конвертирует двоичный UUID в строку
</td></tr>
<tr><td scope="row"><a href="#function_default"><code>DEFAULT()
</code></a></td><td>Значение по умолчанию для столбца таблицы</td></tr>
<tr><td scope="row"><a href="#function_get-lock"><code>GET_LOCK()
</code></a></td><td>Получить названную блокировку</td></tr>
<tr><td scope="row"><a href="#function_inet-aton"><code>INET_ATON()
</code></a></td><td>Числовое значение IP-адреса</td></tr>
<tr><td scope="row"><a href="#function_inet-ntoa"><code>INET_NTOA()
</code></a></td><td>IP-адрес из числового значения</td></tr>
<tr><td scope="row"><a href="#function_inet6-aton"><code>
INET6_ATON()</code></a></td><td>Числовое значение IPv6-адреса</td></tr>
<tr><td scope="row"><a href="#function_inet6-ntoa"><code>
INET6_NTOA()</code></a></td><td>IPv6-адрес из числового значения</td></tr>
<tr><td scope="row"><a href="#function_is-free-lock"><code>
IS_FREE_LOCK()</code></a></td><td>Свободна ли названная блокировка</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4"><code>IS_IPV4()
</code></a></td><td>Является ли параметр адресом IPv4</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4-compat"><code>
IS_IPV4_COMPAT()</code></a></td><td>Является ли параметр
IPv4-совместимым адресом</td></tr>
<tr><td scope="row"><a href="#function_is-ipv4-mapped"><code>
IS_IPV4_MAPPED()</code></a></td><td>Является ли параметр
IPv4-отображенным адресом</td></tr>
<tr><td scope="row"><a href="#function_is-ipv6"><code>IS_IPV6()
</code></a></td><td>Является ли параметр адресом IPv6</td></tr>
<tr><td scope="row"><a href="#function_is-used-lock"><code>
IS_USED_LOCK()</code></a></td><td>Используется ли названная блокировка,
возвратит идентификатор соединения, если да</td></tr>
<tr><td scope="row"><a href="#function_is-uuid"><code>IS_UUID()
</code></a></td><td>Является ли параметр допустимым UUID</td></tr>
<tr><td scope="row"><a href="#function_master-pos-wait"><code>
MASTER_POS_WAIT()</code></a></td><td>Блокировка, пока ведомое устройство
считает и применит все обновления до указанной позиции</td></tr>
<tr><td scope="row"><a href="#function_name-const"><code>
NAME_CONST()</code></a></td><td>Присваивает имя столбцу</td></tr>
<tr><td scope="row"><a href="#function_rand"><code>RAND()</code></a>
</td><td>Возвратит случайное значение с плавающей запятой</td></tr>
<tr><td scope="row"><a href="#function_release-all-locks"><code>
RELEASE_ALL_LOCKS()</code></a></td>
<td>Освобождает все текущие именованные блокировки</td></tr>
<tr><td scope="row"><a href="#function_release-lock"><code>
RELEASE_LOCK()</code></a></td><td>Освобождает именованную блокировку</td>
</tr>
<tr><td scope="row"><a href="#function_sleep"><code>SLEEP()</code>
</a></td><td>Сон в течение указанного числа секунд</td></tr>
<tr><td scope="row"><a href="#function_uuid"><code>UUID()</code></a>
</td><td>Universal Unique Identifier (UUID)</td></tr>
<tr><td scope="row"><a href="#function_uuid-short"><code>
UUID_SHORT()</code></a></td><td>Числовое значение UUID</td></tr>
<tr><td scope="row"><a href="#function_uuid-to-bin"><code>
UUID_TO_BIN()</code></a></td><td>Конвертирует UUID в двоичную строку
</td></tr>
<tr><td scope="row"><a href="#function_values"><code>VALUES()</code>
</a></td><td>Определяет значения, которые будут использоваться в INSERT</td>
</tr></tbody></table>

<ul><li><a name="function_any-value"></a><p>
<a href="#function_any-value"><code>ANY_VALUE(<em><code>arg</code>
</em>)</code></a></p>

<p>Эта функция полезна для запросов <code>GROUP BY</code>, когда включен
режим SQL <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a>, для случаев, когда MySQL
отклоняет запрос, который как Вы знаете, допустим по причинам, которые MySQL
не может определить. Функциональное возвращаемое значение и тип
те же самые, что и возвращаемое значение и тип его параметра, но
функциональный результат не проверен в режиме SQL
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>.</p>

<p>Например, если <code>name</code> неиндексированный столбец, следующий
запрос терпит неудачу при включенном
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>:
<pre>
mysql&gt; SELECT name, address, MAX(age) FROM t GROUP BY name;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP
BY clause and contains nonaggregated column 'mydb.t.address' which
is not functionally dependent on columns in GROUP BY clause; this
is incompatible with sql_mode=only_full_group_by
</pre>

<p>Отказ происходит потому, что <code>address</code> несоединенный столбец,
который не упомянут в столбцах <code>GROUP BY</code> и функционально не
зависит от них. В результате значение <code>address</code> для строк в
пределах каждой группы <code>name</code> недетерминировано. Есть много
способов заставить MySQL принимать запрос:</p>

<ul><li><p>Измените таблицу, чтобы сделать <code>name</code> первичным ключом
или уникальным столбцом <code>NOT NULL</code>. Это позволяет MySQL
определить, что <code>address</code> функционально зависит от
<code>name</code>, то есть, <code>address</code> уникально определен через
<code>name</code>. Этот метод является неподходящим, если <code>NULL</code>
должен быть разрешен как допустимое значение <code>name</code>.</li>

<li>Используйте <a href="#function_any-value"><code>ANY_VALUE()
</code></a>, чтобы обратиться к <code>address</code>:
<pre>
SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;
</pre>

<p>В этом случае MySQL игнорирует недетерминизм значения
<code>address</code> в пределах каждой группы <code>name</code>
и принимает запрос. Это может быть полезно, если Вы просто не заботитесь,
какое значение несоединенного столбца выбрано для каждой группы.
<a href="#function_any-value"><code>ANY_VALUE()</code></a>
не совокупная функция, в отличие от такой функций, как
<a href="#function_sum"><code>SUM()</code></a> или
<a href="#function_count"><code>COUNT()</code></a>.
Это просто действует, чтобы подавить тест на недетерминизм.</li>

<li>Выключите <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a>. Это эквивалентно использованию
<a href="#function_any-value"><code>ANY_VALUE()</code></a> с
включенным <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a>, как описано в предыдущем элементе.
</p></li></ul>

<p><a href="#function_any-value"><code>ANY_VALUE()</code></a>
также полезна, если функциональная зависимость существует между столбцами, но
MySQL не может определить это. Следующий запрос допустим потому, что
<code>age</code> функционально зависит от группирующегося столбца
<code>age-1</code>, но MySQL не может сказать это и отклоняет запрос при
включении <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a>:
<pre>
SELECT age FROM t GROUP BY age-1;
</pre>

<p>Чтобы заставить MySQL принимать запрос, надо использовать
<a href="#function_any-value"><code>ANY_VALUE()</code></a>:
<pre>
SELECT ANY_VALUE(age) FROM t GROUP BY age-1;
</pre>

<p><a href="#function_any-value"><code>ANY_VALUE()</code></a>
может использоваться для запросов, которые обращаются к совокупным функциям в
отсутствие предложения <code>GROUP BY</code>:

<pre>
mysql&gt; SELECT name, MAX(age) FROM t;
ERROR 1140 (42000): In aggregated query without GROUP BY, expression
#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this
is incompatible with sql_mode=only_full_group_by
</pre>

<p>Без <code>GROUP BY</code> есть единственная группа и не определено,
которое значение <code>name</code> выбрать для группы.
<a href="#function_any-value"><code>ANY_VALUE()</code></a>
говорит MySQL принимать запрос:
<pre>
SELECT ANY_VALUE(name), MAX(age) FROM t;
</pre>

<p>Может случиться так, что из-за некоторого свойства набора определенных
данных, Вы знаете, что выбранный несоединенный столбец эффективно
функционально зависит от столбца в <code>GROUP BY</code>. Например,
приложение может провести в жизнь уникальность одного столбца относительно
другого. В этом случае использование
<a href="#function_any-value"><code>ANY_VALUE()</code></a>
уву эффективно функционально зависимый столбец может иметь смысл.</p></li>

<li><a name="function_bin-to-uuid"></a><p>
<a href="#function_bin-to-uuid"><code>BIN_TO_UUID(<em>
<code>binary_uuid</code></em>)</code></a>,
<a href="#function_bin-to-uuid"><code>BIN_TO_UUID(<em><code>
binary_uuid</code></em>, <em><code>swap_flag</code></em>)</code></a></p>

<p><a href="#function_bin-to-uuid"><code>BIN_TO_UUID()</code></a>
инверсия <a href="#function_uuid-to-bin"><code>UUID_TO_BIN()</code>
</a>. Это преобразовывает двоичный UUID в строку UUID и возвращает результат.
Двоичное значение должно быть UUID как
<a href="types.htm#binary-varbinary"><code>VARBINARY(16)</code></a>.
Возвращаемое значение строка <code>utf8</code> из пяти шестнадцатеричных
чисел, разделенных тире. Для деталей об этом формате см. описание функции
<a href="#function_uuid"><code>UUID()</code></a>. Если параметр
UUID <code>NULL</code>, возвращаемое значение <code>NULL</code>. Если
какой-либо параметр недопустим, ошибка происходит.</p>

<p><a href="#function_bin-to-uuid"><code>BIN_TO_UUID()</code></a>
берет один или два параметра:</p>
<ul><li><p>Форма с одним параметром берет двоичное значение UUID. У значения
UUID, как предполагается, части time-low и time-high не поменяны. Строковый
результат находится в том же самом порядке, как двоичной параметр.</li>

<li>Форма с двумя параметрами берет двоичное значение UUID и значение флага:
</p>
<ul><li><p>Если <em><code>swap_flag</code></em> 0, форма с двумя параметрами
эквивалентна форме с одним параметром. Строковый результат находится в том же
самом порядке, как двоичной параметр.</li>

<li>Если <em><code>swap_flag</code></em> 1,
у значения UUID, как предполагается, части time-low и time-high поменяны
местами. Эти части переставляются назад к их оригинальной
позиции в значении результата.</p></li></ul></li></ul>

<p>Для примеров использования и информации о свопинге частей времени см.
функциональное описание <a href="#function_uuid-to-bin"><code>
UUID_TO_BIN()</code></a>.</p></li>

<li><a name="function_default"></a><p>
<a href="#function_default"><code>DEFAULT(<em><code>col_name</code>
</em>)</code></a></p>

<p>Возвращает значение по умолчанию для столбца таблицы. Ошибка происходит,
если у столбца нет никакого значения по умолчанию.
<pre>
mysql&gt; UPDATE t SET i = DEFAULT(i)+1 WHERE id &lt; 100;
</pre></li>

<li><a href="#function_format"><code>FORMAT(<em><code>X</code></em>,
<em><code>D</code></em>)</code></a></p>
<p>Форматирует число <em><code>X</code></em> в формат
<code>'#,###,###.##'</code>, округленный к <em><code>D</code></em>
десятичных разрядов и возвращает результат как строку. Для деталей см.
<a href="#string-functions">раздел 13.5</a>.</p></li>

<li><a name="function_get-lock"></a><p>
<a href="#function_get-lock"><code>GET_LOCK(<em><code>str</code>
</em>,<em><code>timeout</code></em>)</code></a></p>

<p>Пытается получить блокировку с именем, данным строкой
<em><code>str</code></em>, с использованием тайм-аута
<em><code>timeout</code></em> секунд. Отрицательное значение
<em><code>timeout</code></em> означает бесконечный тайм-аут. Блокировка
исключительна. В то время, как они проводится одним сеансом, другие сеансы не
могут получить блокировку с тем же самым именем.</p>

<p>Возвращает <code>1</code>, если блокировка была получена успешно,
<code>0</code>, если попытка провалена по тайм-ауту (например, потому что
другой клиент ранее заблокировал имя), или <code>NULL</code>, если ошибка
произошла (такая как исчерпывание памяти, или поток был уничтожен с
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin kill</strong>
</span></a>).</p>

<p>Блокировка, полученная с <a href="#function_get-lock"><code>
GET_LOCK()</code></a> снята явно, выполняя
<a href="#function_release-lock"><code>RELEASE_LOCK()</code></a>
или неявно, когда Ваш сеанс заканчивается. Снятие блокировки может также
произойти с другим вызовом <a href="#function_get-lock"><code>
GET_LOCK()</code></a>:

<ul><li><p><a href="#function_get-lock"><code>GET_LOCK()</code></a>
осуществлен, используя подсистему metadata locking (MDL). Многократные
одновременные блокировки могут быть приобретены и
<a href="#function_get-lock"><code>GET_LOCK()</code></a>
не снимает существующих блокировок. Для данного сеанса даже возможно
приобрести много блокировок с тем же самым именем. Другие сеансы не могут
приобрести блокировку с этим именем, пока сеанс приобретения не снимает все
свои блокировки для имени.</p>

<p>Блокировки, приобретенные
<a href="#function_get-lock"><code>GET_LOCK()</code></a>
появятся в таблице Performance Schema
<a href="perfor.htm#metadata-locks-table"><code>metadata_locks</code></a>.
Столбец <code>OBJECT_TYPE</code> сообщает <code>USER LEVEL LOCK</code> и
<code>OBJECT_NAME</code> имя блокировки. Кроме того, способность приобретения
многократных блокировок вводит возможность тупика среди клиентов. Когда это
происходит, сервер выбирает вызывающего и заканчивает его запрос приобретения
блокировки с ошибкой <a href="error.htm#error_er_user_lock_deadlock"><code>
ER_USER_LOCK_DEADLOCK</code></a>. Эта ошибка не
заставляет транзакции откатываться.</p></li></ul>

<p>Например, предположите, что Вы выполняете эти запросы:
<pre>
SELECT GET_LOCK('lock1',10);
SELECT GET_LOCK('lock2',10);
SELECT RELEASE_LOCK('lock2');
SELECT RELEASE_LOCK('lock1');
</pre>

<p>Второй <a href="#function_get-lock"><code>GET_LOCK()</code></a>
приобретает вторую блокировку, и оба
<a href="#function_release-lock"><code>RELEASE_LOCK()</code></a>
вернут 1 (успех).</p>
<p>MySQL ограничивает максимальную длину названий блокировки 64 символами.
</p>

<p>Блокировки, полученные с <a href="#function_get-lock"><code>
GET_LOCK()</code></a> не сняты, когда транзакции
закрываются или откатываются.</p>

<p><a href="#function_get-lock"><code>GET_LOCK()</code></a>
может использоваться, чтобы осуществить блокировки приложения или
моделировать блокировки записи. Имена заблокированы на основе всего сервера.
Если имя было заблокировано в пределах одного сеанса,
<a href="#function_get-lock"><code>GET_LOCK()</code></a>
блокирует любой запрос другого сеанса для блокировки с тем же самым именем.
Это позволяет клиентам, которые договариваются о данном имени блокировки,
использовать имя, чтобы выполнить совместную консультативную блокировку.
Но знайте, что это также позволяет клиенту, который не является членом группы
сотрудничающих клиентов, заблокировать имя (неосторожно или сознательно) и
таким образом препятствовать тому, чтобы любой из сотрудничающих клиентов
блокировал это имя. Один способ уменьшить вероятность этого состоит в том,
чтобы использовать имена блокировки, которые являются определенными для базы
данных или приложения. Например, используйте названия блокировки формы
<em><code>db_name.str</code></em> или <em><code>app_name.str</code></em>.</p>

<p>Если много клиентов ждут блокировки, порядок, в котором они приобретут ее,
не определен. Приложения не должны предположить, что клиенты приобретут
блокировку в том же самом порядке, в каком подали запросы блокировки.</p>

<p><a href="#function_get-lock"><code>GET_LOCK()</code></a>
опасна для основанной на запросе репликации. Предупреждение зарегистрировано,
если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
установлена в значение <code>STATEMENT</code>.</p>

<p>Со способностью приобретения многоих именованных блокировок в MySQL 5.7.5
для единственного запроса возможно приобрести большое
количество блокировок. Например:
<pre>
INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;
</pre>

<p>У этих типов запросов могут быть определенные отрицательные воздействия.
Например, если запрос выполнит только часть работы и откатится назад, то
блокировки, приобретенные до момента отказа, будут все еще существовать.
Кроме того, если важно, чтобы блокировки предоставили в определенном порядке,
знайте, что порядок набора результатов может отличаться, в зависимости от
плана выполнения, который выбирает оптимизатор. По этим причинам может быть
лучше ограничить приложения единственным требованием приобретения
блокировки за запрос.</p>

<p>Различный интерфейс блокировки доступен как плагин или как ряд
определяемых пользователем функций. Этот интерфейс обеспечивает пространства
имен блокировки и разные блокировки чтения и записи, в отличие от интерфейса,
обеспеченного <a href="#function_get-lock"><code>GET_LOCK()</code>
</a> и связанных функций. Для деталей см.
<a href="extend.htm#locking-service">раздел 26.3.1</a>.</p></li>

<li><a name="function_inet-aton"></a><p>
<a href="#function_inet-aton"><code>INET_ATON(<em><code>expr</code>
</em>)</code></a></p>

<p>Учитывая представление сетевого адреса IPv4 как строки, возвращает целое
число, которое представляет числовое значение адреса в сетевом порядке байтов
(big endian). <a href="#function_inet-aton"><code>INET_ATON()</code>
</a> вернет <code>NULL</code>, если это не понимает свой параметр.
<pre>
mysql&gt; SELECT INET_ATON('10.0.5.9');
    -&gt; 167773449
</pre>

<p><a href="#function_inet-aton"><code>INET_ATON()</code></a>
возвращает или, возможно, не возвращает не-<code>NULL</code>
результат для кратких IP-адресов (таких, как <code>'127.1'</code> как
представление <code>'127.0.0.1'</code>). Из-за этого
<a href="#function_inet-aton"><code>INET_ATON()</code></a> не должна
использоваться для таких адресов.</p>

<p>Чтобы сохранить значения, произведенные
<a href="#function_inet-aton"><code>INET_ATON()</code></a>,
используйте столбец <code>INT UNSIGNED</code>, а не
<a href="types.htm#integer-types"><code>INT</code></a>, который со знаком.
Если Вы используете столбец со знаком, значения, соответствующие IP-адресам,
для которых первый октет больше 127, не могут быть сохранены правильно. См.
<a href="types.htm#out-of-range-and-overflow">раздел 12.2.6</a>.</p></li>

<li><a name="function_inet-ntoa"></a><p>
<a href="#function_inet-ntoa"><code>INET_NTOA(<em><code>expr</code>
</em>)</code></a></p>

<p>Учитывая числовой сетевой адрес IPv4 в сетевом порядке байтов, возвращает
строковое представление адреса как недвоичную строку в наборе символов
соединения. <a href="#function_inet-ntoa"><code>INET_NTOA()</code>
</a> возвращает <code>NULL</code>, если это не понимает свой параметр.
<pre>
mysql&gt; SELECT INET_NTOA(167773449);
    -&gt; '10.0.5.9'
</pre></li>

<li><a name="function_inet6-aton"></a><p>
<a href="#function_inet6-aton"><code>INET6_ATON(<em><code>expr
</code></em>)</code></a></p>

<p>Учитывая сетевой адрес IPv6 или IPv4 как строку, возвращает
двоичную строку, которая представляет числовое значение адреса в сетевом
порядке байтов (big endian). Поскольку адреса числового формата IPv6 требуют
большего количества байтов чем самый большой тип целого числа, представление,
возвращенное этой функцией, имеет тип данных
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>:
<a href="types.htm#binary-varbinary"><code>VARBINARY(16)</code></a> для IPv6
и <a href="types.htm#binary-varbinary"><code>VARBINARY(4)</code></a> для
IPv4. Если параметр не допустимый адрес,
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a> вернет
<code>NULL</code>.</p>

<p>Следующее использование в качестве примера
<a href="#function_hex"><code>HEX()</code></a> показывает результат
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>
в пригодной для печати форме:
<pre>
mysql&gt; SELECT HEX(INET6_ATON('fdfe::5a55:caff:fefa:9089'));
    -&gt; 'FDFE0000000000005A55CAFFFEFA9089'
mysql&gt; SELECT HEX(INET6_ATON('10.0.5.9'));
    -&gt; '0A000509'
</pre>

<p><code>INET6_ATON()</code> имеет несколько ограничений на допустимые
параметры. Они даны в следующем списке наряду с примерами.</p>
<ul><li><p>Зональный ID не разрешен, как в <code>fe80::3%1</code> или
<code>fe80::3%eth0</code>.</li>

<li>Сетевая маска не разрешена, как в
<code>2001:45f:3:ba::/64</code> или <code>192.168.1.0/24</code>.</li>
<li>Для значений, представляющих адреса IPv4, поддержаны только бесклассовые
адреса. Адреса наподобие <code>192.168.1</code> отклонены.
Номер порта не разрешен, как в <code>192.168.1.2:8080</code>.
Шестнадцатеричные числа в компонентах адреса не разрешены, как в
<code>192.0xa0.1.2</code>. Восьмеричные числа не поддержаны:
<code>192.168.010.1</code> обработан как <code>192.168.10.1</code>, а не
<code>192.168.8.1</code>. Эти ограничения IPv4 также относятся к адресам
IPv6, у которых есть части адреса IPv4, такие как IPv4-совместимые или
IPv4-отображенные адреса.</p></li></ul>

<p>Чтобы преобразовать адрес IPv4 <em><code>expr</code></em>
представленный в числовой форме как значение
<a href="types.htm#integer-types"><code>INT</code></a> в адрес IPv6,
представленный в числовой форме как значение
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
используйте это выражение:
<pre>
INET6_ATON(INET_NTOA(<em><code>expr</code></em>))
</pre>

<p>Например:
<pre>
mysql&gt; SELECT HEX(INET6_ATON(INET_NTOA(167773449)));
    -&gt; '0A000509'
</pre></li>

<li><a name="function_inet6-ntoa"></a><p>
<a href="#function_inet6-ntoa"><code>INET6_NTOA(<em><code>expr
</code></em>)</code></a></p>

<p>Учитывая IPv6 или сетевой адрес IPv4, представленный в числовой форме как
двоичная строка, возвращает строковое представление адреса как недвоичная
строка в наборе символов соединения. Если параметр не допустимый адрес,
<a href="#function_inet6-ntoa"><code>INET6_NTOA()</code></a> вернет
<code>NULL</code>.</p>

<p><a href="#function_inet6-ntoa"><code>INET6_NTOA()</code></a>
имеет эти свойства:</p>
<ul><li><p>Это не использует функции операционной системы, чтобы выполнить
преобразования, таким образом выходная строка независима от платформы.</li>

<li>У строки возврата есть максимальная длина 39 (4 x 8 + 7).
Учитывая это, запрос:
<pre>
CREATE TABLE t AS SELECT INET6_NTOA(<em><code>expr</code></em>) AS c1;
</pre>

<p>У получающейся таблицы было бы это определение:
<pre>
CREATE TABLE t (c1 VARCHAR(39) CHARACTER SET utf8 DEFAULT NULL);
</pre></li>

<li>Строка возврата использует строчные буквы для адресов IPv6.</p></li></ul>
<pre>
mysql&gt; SELECT INET6_NTOA(INET6_ATON('fdfe::5a55:caff:fefa:9089'));
    -&gt; 'fdfe::5a55:caff:fefa:9089'
mysql&gt; SELECT INET6_NTOA(INET6_ATON('10.0.5.9'));
    -&gt; '10.0.5.9'
mysql&gt; SELECT INET6_NTOA(UNHEX('FDFE0000000000005A55CAFFFEFA9089'));
    -&gt; 'fdfe::5a55:caff:fefa:9089'
mysql&gt; SELECT INET6_NTOA(UNHEX('0A000509'));
    -&gt; '10.0.5.9'
</pre></li>

<li><a name="function_is-free-lock"></a><p>
<a href="#function_is-free-lock"><code>IS_FREE_LOCK(<em><code>str
</code></em>)</code></a></p>

<p>Проверяет, можно ли блокировку <em><code>str</code></em>
свободно использовать (то есть, не заблокирована ли она). Возвращает
<code>1</code>, если блокировка свободна (никто не использует блокировку),
<code>0</code>, если блокировка используется, и <code>NULL</code>, если
ошибка происходит (такая, как неправильный параметр).</p>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда переменная
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
установлена в значение <code>STATEMENT</code>.</p></li>

<li><a name="function_is-ipv4"></a><p>
<a href="#function_is-ipv4"><code>IS_IPV4(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает 1, если параметр допустимый адрес IPv4, определенный
как строка, 0 иначе.
<pre>
mysql&gt; SELECT IS_IPV4('10.0.5.9'), IS_IPV4('10.0.5.256');
    -&gt; 1, 0
</pre>

<p>Для данного параметра, если
<a href="#function_is-ipv4"><code>IS_IPV4()</code></a> вернет 1,
<a href="#function_inet-aton"><code>INET_ATON()</code></a> (и
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>)
возвратят не <code>NULL</code>. Обратное заявление не истина: в некоторых
случаях <a href="#function_inet-aton"><code>INET_ATON()</code></a>
возвращает не <code>NULL</code>, когда <a href="#function_is-ipv4">
<code>IS_IPV4()</code></a> возвращает 0.</p>

<p>Как подразумевается предыдущими замечаниями,
<a href="#function_is-ipv4"><code>IS_IPV4()</code></a>
более строго, чем
<a href="#function_inet-aton"><code>INET_ATON()</code></a>
составляет допустимый адрес IPv4, таким образом, это может быть полезно для
приложений, которые должны выполнить сильные проверки от недопустимых
значений. Альтернативно, можно использовать
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>,
чтобы преобразовать IPv4 к внутренней форме и проверить на
<code>NULL</code> (который указывает на недопустимый адрес).
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>
одинаково сильно как <a href="#function_is-ipv4"><code>IS_IPV4()
</code></a> в проверке адресов IPv4.</p></li>

<li><a name="function_is-ipv4-compat"></a><p>
<a href="#function_is-ipv4-compat"><code>IS_IPV4_COMPAT(<em><code>
expr</code></em>)</code></a></p>

<p>Эта функция берет адрес IPv6, представленный в числовой форме как двоичная
строка, как возвращено
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>.
Это возвращает 1, если параметр допустимый IPv4-совместимый адрес IPv6, 0
иначе. У IPv4-совместимых адресов есть форма
<code>::<em><code>ipv4_address</code></em></code>.
<pre>
mysql&gt; SELECT IS_IPV4_COMPAT(INET6_ATON('::10.0.5.9'));
  -&gt; 1
mysql&gt; SELECT IS_IPV4_COMPAT(INET6_ATON('::ffff:10.0.5.9'));
  -&gt; 0
</pre>

<p>Часть IPv4 IPv4-совместимого адреса может также быть представлена,
используя шестнадцатеричную нотацию. Например, <code>192.168.0.1</code>
имеет это шестнадцатеричное значение:
<pre>
mysql&gt; SELECT HEX(INET6_ATON('192.168.0.1'));
    -&gt; 'C0A80001'
</pre>

<p>Выраженный в IPv4-совместимой форме <code>::192.168.0.1</code>
эквивалент <code>::c0a8:0001</code> или (без начальных нулей)
<code>::c0a8:1</code>.
<pre>
mysql&gt; SELECT
    -&gt;   IS_IPV4_COMPAT(INET6_ATON('::192.168.0.1')),
    -&gt;   IS_IPV4_COMPAT(INET6_ATON('::c0a8:0001')),
    -&gt;   IS_IPV4_COMPAT(INET6_ATON('::c0a8:1'));
    -&gt; 1, 1, 1
</pre></li>

<li><a name="function_is-ipv4-mapped"></a><p>
<a href="#function_is-ipv4-mapped"><code>IS_IPV4_MAPPED(<em><code>
expr</code></em>)</code></a></p>

<p>Эта функция берет адрес IPv6, представленный в числовой форме как двоичная
строка, как возвращено
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>.
Это возвращает 1, если параметр допустимый IPv4-отображенный адрес IPv6, 0
иначе. У IPv4-отображенных адресов есть форма
<code>::ffff:<em><code>ipv4_address</code></em></code>.
<pre>
mysql&gt; SELECT IS_IPV4_MAPPED(INET6_ATON('::10.0.5.9'));
  -&gt; 0
mysql&gt; SELECT IS_IPV4_MAPPED(INET6_ATON('::ffff:10.0.5.9'));
  -&gt; 1
</pre>

<p>Как с <code>IS_IPV4_COMPAT()</code> часть IPv4 IPv4-отображенного адреса
может также быть представлена, используя шестнадцатеричную нотацию:
<pre>
mysql&gt; SELECT
    -&gt;   IS_IPV4_MAPPED(INET6_ATON('::ffff:192.168.0.1')),
    -&gt;   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:0001')),
    -&gt;   IS_IPV4_MAPPED(INET6_ATON('::ffff:c0a8:1'));
    -&gt; 1, 1, 1
</pre></li>

<li><a name="function_is-ipv6"></a><p>
<a href="#function_is-ipv6"><code>IS_IPV6(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает 1, если параметр допустимый адрес IPv6, определенный как
строка, 0 иначе. Эта функция не полагает, что адреса IPv4
допустимые адреса IPv6.
<pre>
mysql&gt; SELECT IS_IPV6('10.0.5.9'), IS_IPV6('::1');
    -&gt; 0, 1
</pre>

<p>Для данного параметра если
<a href="#function_is-ipv6"><code>IS_IPV6()</code></a> вернет 1,
<a href="#function_inet6-aton"><code>INET6_ATON()</code></a>
вернет не <code>NULL</code>.</p></li>

<li><a name="function_is-used-lock"></a><p>
<a href="#function_is-used-lock"><code>IS_USED_LOCK(<em><code>str
</code></em>)</code></a></p>

<p>Проверяет, используется ли блокировка <em><code>str</code></em> (то есть,
заблокирована). Если так, это возвращает идентификатор соединения сеанса
клиента, который держит блокировку. Иначе это возвращает <code>NULL</code>.
</p>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
установлена в <code>STATEMENT</code>.</p></li>

<li><a name="function_is-uuid"></a><p>
<a href="#function_is-uuid"><code>IS_UUID(<em><code>string_uuid
</code></em>)</code></a></p>

<p>Возвращает 1, если параметр допустимый строковый формат UUID, 0, если
параметр не допустимый UUID, и <code>NULL</code>,
если параметр <code>NULL</code>.</p>

<p><span>Допустимый</span> означает, что значение находится в формате,
который может быть разобран. Таким образом, это имеет правильную длину и
содержит только разрешенные символы (шестнадцатеричные цифры в любом
регистре и, произвольно, тире и скобки).
Этот формат наиболее распространен:
<pre>
aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee
</pre>

<p>Эти форматы также разрешены:
<pre>
aaaaaaaabbbbccccddddeeeeeeeeeeee
{aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee}
</pre>

<p>Для значений полей в пределах значения см. функциональное описание
<a href="#function_uuid"><code>UUID()</code></a>.
<pre>
mysql&gt; SELECT IS_UUID('6ccd780c-baba-1026-9564-0040f4311e29');
+-------------------------------------------------+
| IS_UUID('6ccd780c-baba-1026-9564-0040f4311e29') |
+-------------------------------------------------+
| 1                                               |
+-------------------------------------------------+

mysql&gt; SELECT IS_UUID('6CCD780C-BABA-1026-9564-0040F4311E29');
+-------------------------------------------------+
| IS_UUID('6CCD780C-BABA-1026-9564-0040F4311E29') |
+-------------------------------------------------+
| 1                                               |
+-------------------------------------------------+

mysql&gt; SELECT IS_UUID('6ccd780cbaba102695640040f4311e29');
+---------------------------------------------+
| IS_UUID('6ccd780cbaba102695640040f4311e29') |
+---------------------------------------------+
| 1                                           |
+---------------------------------------------+

mysql&gt; SELECT IS_UUID('{6ccd780c-baba-1026-9564-0040f4311e29}');
+---------------------------------------------------+
| IS_UUID('{6ccd780c-baba-1026-9564-0040f4311e29}') |
+---------------------------------------------------+
| 1                                                 |
+---------------------------------------------------+

mysql&gt; SELECT IS_UUID('6ccd780c-baba-1026-9564-0040f4311e2');
+------------------------------------------------+
| IS_UUID('6ccd780c-baba-1026-9564-0040f4311e2') |
+------------------------------------------------+
| 0                                              |
+------------------------------------------------+

mysql&gt; SELECT IS_UUID(RAND());
+-----------------+
| IS_UUID(RAND()) |
+-----------------+
| 0               |
+-----------------+
</pre></li>

<li><a name="function_master-pos-wait"></a><p>
<a href="#function_master-pos-wait"><code>MASTER_POS_WAIT(<em>
<code>log_name</code></em>,<em><code>log_pos</code></em>[,<em><code>timeout
</code></em>][,<em><code>channel_name</code></em>])</code></a></p>

<p>Эта функция полезна для управления синхронизацией основной/ведомый.
Это блокирует, пока ведомое устройство не считает и применит все обновления
до указанной позиции в основном журнале. Возвращаемое значение число событий
журнала, которые должно было ждать ведомое устройство до указанной позиции.
Функция возвращает <code>NULL</code>, если ведомый поток SQL не запущен,
основная информация ведомого устройства не инициализирована, параметры
неправильные или ошибка происходит. Это возвращается <code>-1</code>, если
тайм-аут был превышен. Если ведомые потоки SQL стоят в то время, как
<a href="#function_master-pos-wait"><code>MASTER_POS_WAIT()</code>
</a> ждет, функция возвращает <code>NULL</code>. Если ведомое устройство
проходит указанную позицию, функция немедленно возвращается.</p>

<p>Если значение <em><code>timeout</code></em> определено,
<a href="#function_master-pos-wait"><code>MASTER_POS_WAIT()</code>
</a> ожидает <em><code>timeout</code></em> секунд. Здесь
<em><code>timeout</code></em> должно быть больше 0: ноль или отрицательный
<em><code>timeout</code></em> означает отсутствие тайм-аута.</p>

<p>Дополнительный параметр <code><em><code>channel</code></em></code>
позволяет Вам выбрать, какой канал репликации применяется в функции. См.
подробности в <a href="replica.htm#replication-channels">разделе
19.2.3</a>.</p>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
находится в значении <code>STATEMENT</code>.</p></li>

<li><a name="function_name-const"></a><p>
<a href="#function_name-const"><code>NAME_CONST(<em><code>name
</code></em>,<em><code>value</code></em>)</code></a></p>

<p>Возвращает данное значение. Когда используется, чтобы произвести столбец
набора результатов, <a href="#function_name-const"><code>
NAME_CONST()</code></a> заставляет столбец иметь имя.
Параметры должны быть константами.
<pre>
mysql&gt; SELECT NAME_CONST('myname', 14);
+--------+
| myname |
+--------+
| 14     |
+--------+
</pre>

<p>Эта функция только для внутреннего пользования. Сервер использует это при
построении запросов из сохраненных программ, которые содержат ссылки на
местные переменные программы, как описано в
<a href="stored.htm#stored-programs-logging">разделе 21.7</a>. Вы могли бы
видеть эту функцию в выводе <a href="programs.htm#mysqlbinlog"><span><strong>
mysqlbinlog</strong></span></a>.</p>

<p>Для Ваших приложений Вы можете получить точно тот же самый результат как
в примере при использовании простого совмещения имен:
<pre>
mysql&gt; SELECT 14 AS myname;
+--------+
| myname |
+--------+
| 14     |
+--------+
1 row in set (0.00 sec)
</pre></li>

<li><a name="function_release-all-locks"></a><p>
<a href="#function_release-all-locks"><code>RELEASE_ALL_LOCKS()
</code></a></p>

<p>Снимает все названные блокировки, проводимые текущим сеансом и возвращает
число блокировок (0, если не было ни одной).</p>
<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
в состоянии <code>STATEMENT</code>.</p></li>

<li><a name="function_release-lock"></a><p>
<a href="#function_release-lock"><code>RELEASE_LOCK(<em><code>str
</code></em>)</code></a></p>

<p>Снимает все блокировки, названные <em><code>str</code></em>. Возвращает
<code>1</code>, если блокировка была выпущена, <code>0</code>, если
блокировка не была установлена этим потоком (тогда блокировка не снята) и
<code>NULL</code>, если названная блокировка не существовала. Блокировка не
существует, если она никогда не получалась вызовом
<a href="#function_get-lock"><code>GET_LOCK()</code></a>
или если она была ранее снята.</p>

<p>Запрос <a href="sql.htm#do"><code>DO</code></a>
удобно использовать с <a href="#function_release-lock"><code>
RELEASE_LOCK()</code></a>. См. <a href="sql.htm#do">раздел 14.2.3</a>.</p>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
в состоянии <code>STATEMENT</code>.</p></li>

<li><a name="function_sleep"></a><p>
<a href="#function_sleep"><code>SLEEP(<em><code>duration</code>
</em>)</code></a></p>

<p>Ждет число секунд, данное параметром <em><code>duration</code></em>, и
затем возвращает 0. У продолжительности может быть дробная часть. Если
параметр <code>NULL</code> или отрицательный,
<a href="#function_sleep"><code>SLEEP()</code></a>
производит предупреждение, или ошибку в строгом режиме SQL.</p>

<p>Когда функция завершает нормально (без прерывания), это возвращает 0:
<pre>
mysql&gt; SELECT SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
| 0           |
+-------------+
</pre>

<p>Когда <a href="#function_sleep"><code>SLEEP()</code></a>
единственная вещь, вызванная запросом, который прерван, она возвращает 1, а
сам запрос не возвращает ошибки. Это истина, уничтожен ли запрос, или
произошел тайм-аут:</p>

<ul><li><p>Этот запрос прерван, используя
<a href="sql.htm#kill"><code>KILL QUERY</code></a> другого сеанса:
<pre>
mysql&gt; SELECT SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
| 1           |
+-------------+
</pre></li>

<li>Этот запрос прерван по тайм-ауту:
<pre>
mysql&gt; SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);
+-------------+
| SLEEP(1000) |
+-------------+
| 1           |
+-------------+
</pre></li></ul>

<p>Когда <a href="#function_sleep"><code>SLEEP()</code></a>
только часть запроса, который прерван, этот запрос возвращает ошибку:</p>
<ul><li><p>Этот запрос прерван, используя
<a href="sql.htm#kill"><code>KILL QUERY</code></a> другого сеанса:
<pre>
mysql&gt; SELECT 1 FROM t1 WHERE SLEEP(1000);
ERROR 1317 (70100): Query execution was interrupted
</pre></li>

<li>Этот запрос прерван по тайм-ауту:
<pre>
mysql&gt; SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);
ERROR 3024 (HY000): Query execution was interrupted, maximum statement
execution time exceeded
</pre></li></ul>

<p>Эта функция опасна для основанной на запросе репликации. Предупреждение
зарегистрировано, если Вы используете эту функцию, когда
<a href="replica.htm#sysvar_binlog_format"><code>binlog_format</code></a>
в состоянии <code>STATEMENT</code>.</p></li>

<li><a name="function_uuid"></a><p>
<a href="#function_uuid"><code>UUID()</code></a></p>
<p>Возвращает универсальный уникальный идентификатор (UUID), произведенный
согласно RFC 4122, <span>A Universally Unique IDentifier (UUID) URN Namespace
</span> (<a href="../../../www.ietf.org/rfc/rfc4122.txt" target="_top">
http://www.ietf.org/rfc/rfc4122.txt</a>).</p>

<p>UUID разработан как число, которое глобально уникально в пространстве и
времени. Два вызова <a href="#function_uuid"><code>UUID()</code></a>
произведут два различных значения, даже если эти требования будут выполнены
на двух отдельных устройствах, не соединенных друг с другом.</p>

<p>Хотя значения <a href="#function_uuid"><code>UUID()</code></a>
предназначены, чтобы быть уникальными, они являются не обязательно
непредсказуемыми. Если непредсказуемость требуется, значения UUID должны быть
произведены другим путем.</p>

<p><a href="#function_uuid"><code>UUID()</code></a> возвращает
значение, которое соответствует версии 1 UUID как описано в RFC 4122.
Значение 128-битное число, представленное как строка <code>utf8</code> из
пяти шестнадцатеричных чисел в формате
<code>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</code>:</p>

<ul><li><p>Первые три числа произведены из нижней, средней и верхней частей
timestamp. Верхняя часть также включает номер версии UUID.</li>
<li>Четвертое число сохраняет временную уникальность в случае, если значение
timestamp теряет монотонность (например, из-за летнего времени).</li>

<li>Пятое число номер узла в IEEE 802, который обеспечивает пространственную
уникальность. Случайным числом заменяют, если значение не доступно (например,
потому что у устройства узла нет никакой карты Ethernet, или неизвестно, как
найти адрес аппаратных средств интерфейса в операционной системе узла).
В этом случае, пространственная уникальность не может быть гарантирована.
Однако, у столкновения должна быть
<span><em>очень низкая</em></span> вероятность.</p>

<p>MAC-адрес интерфейса принят во внимание только в FreeBSD и Linux. В других
операционных системах MySQL использует беспорядочно
произведенное 48-битное число.</p></li></ul>

<pre>
mysql&gt; SELECT UUID();
    -&gt; '6ccd780c-baba-1026-9564-0040f4311e29'
</pre>

<p>Чтобы преобразовать между строкой и двоичным значением UUID, используйте
функции <a href="#function_uuid-to-bin"><code>UUID_TO_BIN()</code>
</a> и <a href="#function_bin-to-uuid"><code>BIN_TO_UUID()</code>
</a>. Чтобы проверить, является ли строка допустимым значением UUID,
используйте функцию <a href="#function_is-uuid"><code>IS_UUID()
</code></a>.</p>
<p><a href="#function_uuid"><code>UUID()</code></a>
не работает с основанной на запросах репликацией.</p></li>

<li><a name="function_uuid-short"></a><p>
<a href="#function_uuid-short"><code>UUID_SHORT()</code></a>
</p>

<p>Возвращает <span>короткий</span> универсальный идентификатор как 64-битное
целое число без знака. Значения, возвращенные
<a href="#function_uuid-short"><code>UUID_SHORT()</code></a>
отличаются от строкового формата 128-битных идентификаторов, возвращенных
функцией <a href="#function_uuid"><code>UUID()</code></a>
и имеют различные свойства уникальности. Значение
<a href="#function_uuid-short"><code>UUID_SHORT()</code></a>
как гарантируют, будет уникально, если следующие условия будут выполнены:</p>

<ul><li><p>Значение <a href="server.htm#sysvar_server_id"><code>server_id
</code></a> текущего сервера между 0 и 255 и уникально среди Вашей группы
основных и ведомых серверов.</li>

<li>Вы не задерживаете системное время для своего узла сервера между
перезапусками <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>.</li>

<li>Вы вызываете <a href="#function_uuid-short"><code>UUID_SHORT()
</code></a> в среднем меньше, чем 16 миллионов раз в секунду между
перезапусками <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>.</p></li></ul>

<p>Возвращаемое значение <a href="#function_uuid-short"><code>
UUID_SHORT()</code></a> создано этим путем:
<pre>
  (server_id &amp; 255) &lt;&lt; 56
+ (server_startup_time_in_seconds &lt;&lt; 24)
+ incremented_variable++;

mysql&gt; SELECT UUID_SHORT();
    -&gt; 92395783831158784
</pre>
<p><a href="#function_uuid-short"><code>UUID_SHORT()</code></a>
не работает с основанной на запросе репликацией.</p></li>

<li><a name="function_uuid-to-bin"></a><p>
<a href="#function_uuid-to-bin"><code>UUID_TO_BIN(<em><code>
string_uuid</code></em>)</code></a>,
<a href="#function_uuid-to-bin"><code>UUID_TO_BIN(<em><code>
string_uuid</code></em>, <em><code>swap_flag</code></em>)</code></a></p>

<p>Преобразовывает строку UUID в двоичный UUID и возвращает результат.
Описание <a href="#function_is-uuid"><code>IS_UUID()</code></a>
перечисляет разрешенные строковые форматы UUID. Возвращаемое значение UUID
имеет тип <a href="types.htm#binary-varbinary"><code>VARBINARY(16)</code></a>.
Если параметр UUID <code>NULL</code>, возвращаемое значение <code>NULL</code>.
Если какой-либо параметр недопустим, происходит ошибка.</p>

<p><a href="#function_uuid-to-bin"><code>UUID_TO_BIN()</code></a>
берет один или два параметра:</p>
<ul><li><p>Форма с одним параметром берет строку значения UUID. Двоичный
результат находится в том же самом порядке как строковый параметр.</li>
<li>Форма с двумя параметрами берет строку значения UUID и значение флага:
</p>

<ul><li><p>Если <em><code>swap_flag</code></em> 0, форма с двумя параметрами
эквивалентна форме с одним параметром. Двоичный результат находится в том же
самом порядке как строковый параметр.</li>

<li>Если <em><code>swap_flag</code></em> 1,
формат возвращаемого значения отличается: части времени
(первые и третьи группы шестнадцатеричных цифр, соответственно) переставлены.
Это перемещает переменную часть направо и может улучшить эффективность
индексации, если результат сохранен в индексированном столбце.
</p></li></ul></li></ul>

<p>Свопинг части времени принимает использование значений версии 1 UUID, тех,
которые произведены <a href="#function_uuid"><code>UUID()</code></a>.
Для значений UUID, произведенных другими средствами, которые не следуют
формату версии 1, свопинг части времени не обеспечивает выгоды. Для деталей о
формате см. функциональное описание <a href="#function_uuid"><code>
UUID()</code></a>.</p>

<p>Предположите, что у Вас есть следующая строка значение UUID:
<pre>
mysql&gt; SET @uuid = '6ccd780c-baba-1026-9564-0040f4311e29';
</pre>

<p>Чтобы преобразовать строку UUID в двоичный вид с или без свопинга части
времени, надо использовать <a href="#function_uuid-to-bin"><code>
UUID_TO_BIN()</code></a>:
<pre>
mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid))          |
+----------------------------------+
| 6CCD780CBABA102695640040F4311E29 |
+----------------------------------+

mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid, 0));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid, 0))       |
+----------------------------------+
| 6CCD780CBABA102695640040F4311E29 |
+----------------------------------+

mysql&gt; SELECT HEX(UUID_TO_BIN(@uuid, 1));
+----------------------------------+
| HEX(UUID_TO_BIN(@uuid, 1))       |
+----------------------------------+
| 1026BABA6CCD780C95640040F4311E29 |
+----------------------------------+
</pre>

<p>Преобразовать двоичной UUID, возвращенный
<a href="#function_uuid-to-bin"><code>UUID_TO_BIN()</code></a>
в строку UUID можно через <a href="#function_bin-to-uuid"><code>
BIN_TO_UUID()</code></a>. Если Вы производите двоичный UUID, вызывая
<a href="#function_uuid-to-bin"><code>UUID_TO_BIN()</code></a>
со вторым параметром 1, чтобы поменять части времени, Вы должны также
передать второй параметр 1 в
<a href="#function_bin-to-uuid"><code>BIN_TO_UUID()</code></a>
для обратной перестановки частей времени, преобразовывая двоичной UUID
назад в строку UUID:
<pre>
mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid))|
+--------------------------------------+
| 6ccd780c-baba-1026-9564-0040f4311e29 |
+--------------------------------------+

mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0)  |
+--------------------------------------+
| 6ccd780c-baba-1026-9564-0040f4311e29 |
+--------------------------------------+

mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1)  |
+--------------------------------------+
| 6ccd780c-baba-1026-9564-0040f4311e29 |
+--------------------------------------+
</pre>

<p>Если использование свопинга части времени не будет тем же самым для
преобразования в обоих направлениях, то оригинальный UUID не будет
восстановлен должным образом:
<pre>
mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1)  |
+--------------------------------------+
| baba1026-780c-6ccd-9564-0040f4311e29 |
+--------------------------------------+

mysql&gt; SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);
+--------------------------------------+
| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0)  |
+--------------------------------------+
| 1026baba-6ccd-780c-9564-0040f4311e29 |
+--------------------------------------+
</pre></li>

<li><a name="function_values"></a><p>
<a href="#function_values"><code>VALUES(<em><code>col_name</code>
</em>)</code></a></p>

<p>В запросе <a href="sql.htm#insert-on-duplicate"><code>INSERT
... ON DUPLICATE KEY UPDATE</code></a> Вы можете использовать функцию
<code>VALUES(<em><code>col_name</code></em>)</code>
в предложении <a href="sql.htm#update"><code>UPDATE</code></a>, чтобы
обратиться к значениям столбцов из
<a href="sql.htm#insert"><code>INSERT</code></a>. Другими словами,
<code>VALUES(<em><code>col_name</code></em>)</code>
в <a href="sql.htm#update"><code>UPDATE</code></a> относится к значению
<em><code>col_name</code></em>, которое было бы вставлено,
не имея никакого конфликта дублирования ключа. Эта функция особенно полезна
при вставке многих строк. Функция <a href="#function_values"><code>
VALUES()</code></a> является значащей только в предложении
<code>ON DUPLICATE KEY UPDATE</code> в запросе <a href="sql.htm#insert">
<code>INSERT</code></a>, иначе вернет <code>NULL</code>. См.
<a href="sql.htm#insert-on-duplicate">раздел 14.2.5.3</a>.
<pre>
mysql&gt; INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)
    -&gt;        ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);
</pre></li></ul>

<h2><a name="group-by-functions-and-modifiers"></a>13.19. Агрегатные функции
(GROUP BY)</h2>
<h3><a name="group-by-functions"></a>13.19.1. Обзор агрегатных функций (GROUP
BY)</h3>
<p><b>Таблица 13.24. Агрегатные функции (<code>GROUP BY</code>)</b></p>

<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Описание
</th></tr></thead>
<tbody><tr><td scope="row"><a href="#function_avg"><code>AVG()
</code></a></td><td>Среднее значение</td></tr>
<tr><td scope="row"><a href="#function_bit-and"><code>BIT_AND()
</code></a></td><td>Битовое AND</td></tr>
<tr><td scope="row"><a href="#function_bit-or"><code>BIT_OR()</code>
</a></td><td>Битовое OR</td></tr>
<tr><td scope="row"><a href="#function_bit-xor"><code>BIT_XOR()
</code></a></td><td>Битовое XOR</td></tr>
<tr><td scope="row"><a href="#function_count"><code>COUNT()</code>
</a></td><td>Число строк</td></tr>
<tr><td scope="row"><a href="#function_count-distinct"><code>
COUNT(DISTINCT)</code></a></td><td>Число различных значений</td></tr>
<tr><td scope="row"><a href="#function_group-concat"><code>
GROUP_CONCAT()</code></a></td><td>Конкатенация строк</td></tr>
<tr><td scope="row"><a href="#function_json-arrayagg"><code>
JSON_ARRAYAGG()</code></a></td><td>Возвратит набор результатов как
единственный массив JSON</td></tr>
<tr><td scope="row"><a href="#function_json-objectagg"><code>
JSON_OBJECTAGG()</code></a></td><td>Возвратит набор результатов как
единственный объект JSON</td></tr>
<tr><td scope="row"><a href="#function_max"><code>MAX()</code></a>
</td><td>Максимальное значение</td></tr>
<tr><td scope="row"><a href="#function_min"><code>MIN()</code></a>
</td><td>Минимальное значение</td></tr>
<tr><td scope="row"><a href="#function_std"><code>STD()</code></a>
</td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev"><code>STDDEV()</code>
</a></td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev-pop"><code>
STDDEV_POP()</code></a></td><td>Возвратит стандартное отклонение</td></tr>
<tr><td scope="row"><a href="#function_stddev-samp"><code>
STDDEV_SAMP()</code></a></td><td>Возвратит типовое стандартное отклонение
</td></tr>
<tr><td scope="row"><a href="#function_sum"><code>SUM()</code></a>
</td><td>Вернет сумму</td></tr>
<tr><td scope="row"><a href="#function_var-pop"><code>VAR_POP()
</code></a></td><td>Возвратит различие стандарта</td></tr>
<tr><td scope="row"><a href="#function_var-samp"><code>VAR_SAMP()
</code></a></td><td>Возвратит типовое различие</td></tr>
<tr><td scope="row"><a href="#function_variance"><code>VARIANCE()
</code></a></td><td>Возвратит стандартное отклонение</td></tr></tbody></table>

<p>Этот раздел описывает агрегатные (совокупные) функции, которые
воздействуют на наборы значений. Если иное не заявлено, групповые функции
игнорируют значения <code>NULL</code>.</p>

<p>Если Вы используете групповую функцию в запросе, не содержащем
<code>GROUP BY</code>, это эквивалентно группировке на всех строках. Для
получения дополнительной информации см.
<a href="#group-by-handling">раздел 13.19.3</a>.</p>

<p>Для числовых параметров различие и функции стандартного отклонения
возвращают <a href="types.htm#floating-point-types"><code>DOUBLE</code></a>.
Функции <a href="#function_sum"><code>SUM()</code></a> и
<a href="#function_avg"><code>AVG()</code></a> возвращают значение
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> для
параметров точного значения (целое число или
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>) и значение
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a> для
для параметров приблизительной точности
(<a href="types.htm#floating-point-types"><code>FLOAT</code></a> или
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>).</p>

<p>Совокупные функции <a href="#function_sum"><code>SUM()</code></a>
и <a href="#function_avg"><code>AVG()</code></a> не работают с
временными значениями. Они преобразовывают значения в числа, теряя все после
первого нечислового символа. Чтобы работать без этой проблемы, преобразуйте в
числовые модули, выполните совокупную работу, и преобразуйте назад во
временное значение. Примеры:
<pre>
SELECT SEC_TO_TIME(SUM(TIME_TO_SEC(<em><code>time_col</code></em>))) FROM <em><code>tbl_name</code></em>;
SELECT FROM_DAYS(SUM(TO_DAYS(<em><code>date_col</code></em>))) FROM <em><code>tbl_name</code></em>;
</pre>

<p>Функции вроде <a href="#function_sum"><code>SUM()</code></a> или
<a href="#function_avg"><code>AVG()</code></a> конвертируют
параметр в число в случае необходимости. Для значений
<a href="types.htm#set"><code>SET</code></a> или
<a href="types.htm#enum"><code>ENUM</code></a> используется
основное числовое значение.</p>

<p>Функции <a href="#function_bit-and"><code>BIT_AND()</code></a>,
<a href="#function_bit-or"><code>BIT_OR()</code></a> и
<a href="#function_bit-xor"><code>BIT_XOR()</code></a>
выполняют битовые операции. Они требуют параметры
<a href="types.htm#integer-types"><code>BIGINT</code></a> (64-bit integer)
и возвращают <a href="types.htm#integer-types"><code>BIGINT</code></a>.
Параметры других типов преобразованы в
<a href="types.htm#integer-types"><code>BIGINT</code></a>
и усечение могло бы произойти.</p>

<ul><li><a name="function_avg"></a><p>
<a href="#function_avg"><code>AVG([DISTINCT]
<em><code>expr</code></em>)</code></a></p>

<p>Возвращает среднее значение <code><em><code>expr</code></em></code>.
Опция <code>DISTINCT</code> может использоваться, чтобы возвратить среднее
число отличных значений <em><code>expr</code></em>.</p>

<p><a href="#function_avg"><code>AVG()</code></a> возвращает
<code>NULL</code>, если не было никаких строк соответствия.
<pre>
mysql&gt; SELECT student_name, AVG(test_score)
    -&gt;   FROM student
    -&gt;   GROUP BY student_name;
</pre></li>

<li><a name="function_bit-and"></a><p>
<a href="#function_bit-and"><code>BIT_AND(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает поразрядное <code>AND</code> из всех битов в
<em><code>expr</code></em>. Вычисление выполнено с 64-битной точностью
(<a href="types.htm#integer-types"><code>BIGINT</code></a>).</p>

<p><a href="#function_bit-and"><code>BIT_AND()</code></a> вернет
<code>18446744073709551615</code>, если не было никаких строк соответствия.
Это значение unsigned <a href="types.htm#integer-types"><code>BIGINT</code>
</a> со всеми битами, установленными в 1.</p></li>

<li><a name="function_bit-or"></a><p>
<a href="#function_bit-or"><code>BIT_OR(<em><code>expr</code></em>)
</code></a></p>

<p>Возвращает поразрядное <code>OR</code> из всех битов в
<em><code>expr</code></em>. Вычисление выполнено с 64-битной точностью
(<a href="types.htm#integer-types"><code>BIGINT</code></a>).</p>
<p><a href="#function_bit-or"><code>BIT_OR()</code></a> возвращает
<code>0</code>, если не было никаких строк соответствия.</p></li>

<li><a name="function_bit-xor"></a><p>
<a href="#function_bit-xor"><code>BIT_XOR(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает поразрядное <a href="#operator_xor"><code>XOR</code>
</a> всех битов в <em><code>expr</code></em>. Вычисление выполнено с
64-битной точностью
(<a href="types.htm#integer-types"><code>BIGINT</code></a>).</p>
<p><a href="#function_bit-xor"><code>BIT_XOR()</code></a> возвращает
<code>0</code>, если не было никаких строк соответствия.</p></li>

<li><a name="function_count"></a><p>
<a href="#function_count"><code>COUNT(<em><code>expr</code></em>)
</code></a></p>

<p>Возвращает количество не-<code>NULL</code> значений
<em><code>expr</code></em> в строках, полученных
<a href="sql.htm#select"><code>SELECT</code></a>. Результат значение типа
<a href="types.htm#integer-types"><code>BIGINT</code></a>.</p>

<p><a href="#function_count"><code>COUNT()</code></a> возвращает
<code>0</code>, если не было никаких строк соответствия.
<pre>
mysql&gt; SELECT student.student_name,COUNT(*)
    -&gt;   FROM student,course
    -&gt;   WHERE student.student_id=course.student_id GROUP BY student_name;
</pre>

<p><a href="#function_count"><code>COUNT(*)</code></a>
несколько отличается в том, что это возвращает количество полученных строк,
не учитывая, содержат ли они значения <code>NULL</code>.</p>

<p><a href="#function_count"><code>COUNT(*)</code></a>
оптимизирована, чтобы возвратить очень быстро, если
<a href="sql.htm#select"><code>SELECT</code></a>
получает данные от одной таблицы, никакие другие столбцы не получены и нет
предложения <code>WHERE</code>. Например:
<pre>
mysql&gt; SELECT COUNT(*) FROM student;
</pre>

<p>Эта оптимизация применяется только к таблицам <code>MyISAM</code>, потому
что точное количество строк сохранено для этого механизма хранения и может
быть получено очень быстро. Для транзакционных механизмов хранения, таких как
<code>InnoDB</code>, хранение точного количества строк более проблематично,
потому что многократные транзакции могут происходить, каждая из которых может
затронуть это количество.</p></li>

<li><a name="function_count-distinct"></a><p>
<a href="#function_count"><code>COUNT(DISTINCT
<em><code>expr</code></em>,[<em><code>expr</code></em>...])</code></a></p>

<p>Возвращает количество строк с различными значениями не-<code>NULL</code>
<em><code>expr</em>.</p>
<p><a href="#function_count"><code>COUNT(DISTINCT)</code></a>
возвращает <code>0</code>, если не было никаких строк соответствия.
<pre>
mysql&gt; SELECT COUNT(DISTINCT results) FROM student;
</pre>

<p>В MySQL Вы можете получить число отличных комбинаций выражения, которые не
содержат <code>NULL</code>, давая список выражений. В стандартном SQL Вы
должны были бы сделать связь всех выражений внутри
<a href="#function_count"><code>COUNT(DISTINCT ...)</code></a>.
</p></li>

<li><a name="function_group-concat"></a><p>
<a href="#function_group-concat"><code>GROUP_CONCAT(<em><code>expr
</code></em>)</code></a></p>

<p>Эта функция возвращает строковый результат со связанными
не-<code>NULL</code> значениями из группы. Это возвращает <code>NULL</code>,
если значений не-<code>NULL</code> нет. Полный синтаксис следующий:
<pre>
GROUP_CONCAT([DISTINCT] <em><code>expr</code></em> [,<em><code>expr</code></em> ...]
   [ORDER BY {<em><code>unsigned_integer</code></em> | <em><code>col_name</code></em> | <em><code>expr</code></em>}
   [ASC | DESC] [,<em><code>col_name</code></em> ...]]
   [SEPARATOR <em><code>str_val</code></em>])

mysql&gt; SELECT student_name, GROUP_CONCAT(test_score)
    -&gt;        FROM student
    -&gt;        GROUP BY student_name;
</pre>

<p>Или:
<pre>
mysql&gt; SELECT student_name, GROUP_CONCAT(DISTINCT test_score
    -&gt;        ORDER BY test_score DESC SEPARATOR ' ')
    -&gt;        FROM student GROUP BY student_name;
</pre>

<p>В MySQL Вы можете получить связанные значения комбинаций выражения.
Чтобы устранить дублирующие значения, используйте
<code>DISTINCT</code>. Чтобы отсортировать значения в результате, используйте
<code>ORDER BY</code>. Чтобы отсортировать в обратном порядке, добавьте
ключевое слово <code>DESC</code> к названию столбца, который Вы сортируете в
<code>ORDER BY</code>. Значение по умолчанию порядок по возрастанию, это
может быть определено явно, используя ключевое слово <code>ASC</code>.
Разделитель по умолчанию между значениями в группе запятая
(<code>,</code>). Чтобы определить разделитель явно, надо использовать
<code>SEPARATOR</code> сопровождаемое строковым значением, которое должно
быть вставлено между групповыми значениями. Чтобы устранить разделитель
вообще, определите <code>SEPARATOR ''</code>.</p>

<p>Результат является усеченным к максимальной длине, которая дана переменной
<a href="server.htm#sysvar_group_concat_max_len"><code>group_concat_max_len
</code></a>, у которой есть значение по умолчанию 1024. Значение может быть
установлено выше, хотя эффективная максимальная длина возвращаемого значения
ограничена значением
<a href="server.htm#sysvar_max_allowed_packet"><code>max_allowed_packet
</code></a>. Синтаксис, чтобы изменить значение
<a href="server.htm#sysvar_group_concat_max_len"><code>group_concat_max_len
</code></a> во время выполнения, где
<em><code>val</code></em> unsigned integer:
<pre>
SET [GLOBAL | SESSION] group_concat_max_len = <em><code>val</code></em>;
</pre>

<p>Возвращаемое значение недвоичная или двоичная строка, в зависимости от
того, являются ли параметрами недвоичные или двоичные строки. Тип результата
<a href="types.htm#blob"><code>TEXT</code></a> или
<a href="types.htm#blob"><code>BLOB</code></a>. Если
<a href="server.htm#sysvar_group_concat_max_len"><code>group_concat_max_len
</code></a> меньше или равно 512, тогда тип результата
<a href="types.htm#char"><code>VARCHAR</code></a> или
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>.</p></li>

<li><a name="function_json-arrayagg"></a><p>
<a href="#function_json-arrayagg"><code>JSON_ARRAYAGG([<em><code>
col</code></em>)</code></a></p>

<p>Соединяет набор результатов как массив
<a href="types.htm#json"><code>JSON</code></a>, чьи элементы состоят из
строк. Порядок элементов в этом массиве неопределен. Функция действует на
столбец или выражение, которое оценивается к единственному значению.
Возвращает <code>NULL</code>, если результат не содержит строк,
или в случае ошибки.</p>

<p>Эта функция была добавлена в MySQL 8.0.1.
<pre>
mysql&gt; SELECT col FROM t1;
+--------------------------------------+
| col                                  |
+--------------------------------------+
| {"key1": "value1", "key2": "value2"} |
| {"keyA": "valueA", "keyB": "valueB"} |
+--------------------------------------+
2 rows in set (0.00 sec)

mysql&gt; SELECT JSON_ARRAYAGG(col) FROM t1;
+------------------------------------------------------------------------------+
| JSON_ARRAYAGG(col)                                                           |
+------------------------------------------------------------------------------+
| [{"key1": "value1", "key2": "value2"}, {"keyA": "valueA", "keyB": "valueB"}] |
+------------------------------------------------------------------------------+
1 row in set (0.00 sec)
</pre></li>

<li><a name="function_json-objectagg"></a><p>
<a href="#function_json-objectagg"><code>JSON_OBJECTAGG([<em>
<code>key</code></em>, <em><code>value</code></em>)</code></a></p>

<p>Берет два имени столбцов или выражения как параметры, первый из них
используется в качестве ключа, второй как значение, и возвращает объект JSON,
содержащий пары ключа/значения. Элементы с дубликатами ключей пропущены.
Вы можете определить константу как ключ, но результат всегда содержит самое
большее один элемент строки. Возвращает <code>NULL</code>, если результат не
содержит строк, или в случае ошибки. Ошибка происходит, если какое-либо
ключевое имя <code>NULL</code> или число параметров не равно 2.</p>

<p>Эта функция была добавлена в MySQL 8.0.1.
<pre>
mysql&gt; SELECT id, name FROM t3 WHERE id &lt; 10;
+----+------+
| id | name |
+----+------+
|2   | joe  |
|5   | fred |
+----+------+
2 rows in set (0.00 sec)

mysql&gt; SELECT JSON_OBJECTAGG(id, name) FROM t3 WHERE id &lt; 10;
+---------------------------+
| JSON_OBJECTAGG(id, name)  |
+---------------------------+
| {"2": "joe", "5": "fred"} |
+---------------------------+
1 row in set (0.00 sec)
</pre></li>

<li><a name="function_max"></a><p>
<a href="#function_max"><code>MAX([DISTINCT]
<em><code>expr</code></em>)</code></a></p>

<p>Возвращает максимальное значение <em><code>expr</code></em>.
<a href="#function_max"><code>MAX()</code></a>
может взять строковый параметр, в таких случаях это возвращает максимальное
строковое значение. См. <a href="optimiz.htm#mysql-indexes">раздел 9.3.1</a>.
Ключевое слово <code>DISTINCT</code>
может использоваться, чтобы найти максимум отличных значений
<em><code>expr</code></em>, однако, это приводит к тому же самому результату,
как и исключение <code>DISTINCT</code>.</p>

<p><a href="#function_max"><code>MAX()</code></a> возвращает
<code>NULL</code>, если не было никаких строк соответствия.
<pre>
mysql&gt; SELECT student_name, MIN(test_score), MAX(test_score)
    -&gt;        FROM student
    -&gt;        GROUP BY student_name;
</pre>

<p>Для <a href="#function_max"><code>MAX()</code></a> MySQL
в настоящее время сравнивает столбцы <a href="types.htm#enum"><code>ENUM
</code></a> и <a href="types.htm#set"><code>SET</code></a>
их строковым значением, а не относительной позицией строки в наборе. Это
отличается от сравнения <code>ORDER BY</code>.
Это, как ожидают, будет исправлено в будущем выпуске MySQL.</p></li>

<li><a name="function_min"></a><p>
<a href="#function_min"><code>MIN([DISTINCT]
<em><code>expr</code></em>)</code></a></p>

<p>Возвращает минимальное значение <em><code>expr</code></em>.
<a href="#function_min"><code>MIN()</code></a>
может взять строковый параметр, в таких случаях это возвращает минимальное
строковое значение. См. <a href="optimiz.htm#mysql-indexes">раздел 9.3.1</a>.
Ключевое слово <code>DISTINCT</code>
может использоваться, чтобы найти минимум отличных значений
<em><code>expr</code></em>, однако, это приводит к тому же самому результату,
как и исключение <code>DISTINCT</code>.</p>

<p><a href="#function_min"><code>MIN()</code></a> возвращает
<code>NULL</code>, если не было никаких строк соответствия.
<pre>
mysql&gt; SELECT student_name, MIN(test_score), MAX(test_score)
    -&gt;        FROM student
    -&gt;        GROUP BY student_name;
</pre>

<p>Для  <a href="#function_min"><code>MIN()</code></a> MySQL
в настоящее время сравнивает столбцы <a href="types.htm#enum"><code>ENUM
</code></a> и <a href="types.htm#set"><code>SET</code></a>
их строковым значением, а не относительной позицией строки в наборе. Это
отличается от сравнения <code>ORDER BY</code>.
Это, как ожидают, будет исправлено в будущем выпуске MySQL.</p></li>

<li><a name="function_std"></a><p>
<a href="#function_std"><code>STD(<em><code>expr</code></em>)
</code></a></p>

<p>Возвращает стандартное отклонение <em><code>expr</code></em>.
Это расширение к стандартному SQL. Стандартная функция SQL
<a href="#function_stddev-pop"><code>STDDEV_POP()</code></a>
может использоваться вместо этого.</p>

<p><a href="#function_std"><code>STD()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_stddev"></a><p>
<a href="#function_stddev"><code>STDDEV(<em><code>expr</code></em>)
</code></a></p>

<p>Возвращает стандартное отклонение <em><code>expr</code></em>.
Эта функция обеспечена для совместимости с Oracle.
Стандартная функция SQL <a href="#function_stddev-pop"><code>
STDDEV_POP()</code></a> может использоваться вместо этого.</p>

<p><a href="#function_stddev"><code>STDDEV()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_stddev-pop"></a><p>
<a href="#function_stddev-pop"><code>STDDEV_POP(<em><code>expr
</code></em>)</code></a></p>

<p>Возвращает стандартное отклонение <em><code>expr</code></em>
(квадратный корень <a href="#function_var-pop"><code>VAR_POP()
</code></a>). Вы можете также использовать
<a href="#function_std"><code>STD()</code></a> или
<a href="#function_stddev"><code>STDDEV()</code></a>,
которые эквивалентны, но не стандартный SQL.</p>

<p><a href="#function_stddev-pop"><code>STDDEV_POP()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_stddev-samp"></a><p>
<a href="#function_stddev-samp"><code>STDDEV_SAMP(<em><code>expr
</code></em>)</code></a></p>

<p>Возвращает типовое стандартное отклонение <em><code>expr</code></em>
(квадратный корень <a href="#function_var-samp"><code>VAR_SAMP()
</code></a>).</p>

<p><a href="#function_stddev-samp"><code>STDDEV_SAMP()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_sum"></a><p>
<a href="#function_sum"><code>SUM([DISTINCT]
<em><code>expr</code></em>)</code></a></p>

<p>Возвращает сумму <em><code>expr</code></em>. Если у набора
нет никаких строк, <a href="#function_sum"><code>SUM()</code></a>
возвращает <code>NULL</code>. Ключевое слово <code>DISTINCT</code> может
использоваться, чтобы суммировать только
отличные значения <em><code>expr</code></em>.</p>

<p><a href="#function_sum"><code>SUM()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_var-pop"></a><p>
<a href="#function_var-pop"><code>VAR_POP(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает различие стандарта <em><code>expr</code></em>.
Это рассматривает строки как целое, не как образец, таким образом, у этого
есть число строк как знаменатель.  Вы можете также использовать
<a href="#function_variance"><code>VARIANCE()</code></a>,
который эквивалентен, но не является стандартом SQL.</p>

<p><a href="#function_var-pop"><code>VAR_POP()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_var-samp"></a><p>
<a href="#function_var-samp"><code>VAR_SAMP(<em><code>expr</code>
</em>)</code></a></p>
<p>Возвращает типовое различие <em><code>expr</code></em>. Таким образом,
знаменатель число строк минус одна.</p>

<p><a href="#function_var-samp"><code>VAR_SAMP()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li>

<li><a name="function_variance"></a><p>
<a href="#function_variance"><code>VARIANCE(<em><code>expr</code>
</em>)</code></a></p>

<p>Возвращает различие стандарта <em><code>expr</code></em>.
Это расширение к стандартному SQL. Стандартная функция SQL
<a href="#function_var-pop"><code>VAR_POP()</code></a>
может использоваться вместо этого.</p>

<p><a href="#function_variance"><code>VARIANCE()</code></a>
возвращает <code>NULL</code>, если не было никаких строк соответствия.
</p></li></ul>

<h3><a name="group-by-modifiers"></a>13.19.2. Модификаторы GROUP BY</h3>
<p>Предложение <code>GROUP BY</code> разрешает модификатор <code>WITH
ROLLUP</code>, который заставляет добавить дополнительные строки
к итоговому выводу. Эти строки представляют более высокий уровень (или
суперсовокупность). <code>ROLLUP</code> позволяет Вам ответить на вопросы
на многих уровнях анализа единственным запросом. Это может использоваться,
например, чтобы оказать поддержку для OLAP (Online Analytical Processing).</p>

<p>Предположите, что таблица названа <code>sales</code> и имеет столбцы
<code>year</code>, <code>country</code>, <code>product</code> и
<code>profit</code> для того, чтобы сделать запись доходности продаж:
<pre>
CREATE TABLE sales (yearINT NOT NULL,
       country VARCHAR(20) NOT NULL,
       product VARCHAR(32) NOT NULL, profit INT);
</pre>

<p>Содержание таблицы может быть получено в итоге ежегодно с простым
<code>GROUP BY</code> так:
<pre>
mysql&gt; SELECT year, SUM(profit) FROM sales GROUP BY year;
+------+-------------+
| year | SUM(profit) |
+------+-------------+
| 2000 |  4525       |
| 2001 |  3010       |
+------+-------------+
</pre>

<p>Этот вывод показывает полную прибыль в течение каждого года, но если Вы
также хотите определить полную прибыль, суммированную за все годы, Вы должны
сложить отдельные значения самостоятельно или выполнить дополнительный запрос.
</p>

<p>Или Вы можете использовать <code>ROLLUP</code>, который обеспечивает оба
уровня анализа с единственным запросом. Добавление модификатора <code>WITH
ROLLUP</code> к <code>GROUP BY</code> заставляет запрос производить
другую строку, которая показывает общий итог по всем значениям года:
<pre>
mysql&gt; SELECT year, SUM(profit) FROM sales GROUP BY year WITH ROLLUP;
+------+-------------+
| year | SUM(profit) |
+------+-------------+
| 2000 |  4525       |
| 2001 |  3010       |
| NULL |  7535       |
+------+-------------+
</pre>
<p>Итоговая строка суперсовокупности идентифицирована значением
<code>NULL</code> в столбце <code>year</code>.</p>

<p><code>ROLLUP</code> имеет более сложный эффект, когда там многократные
столбцы в <code>GROUP BY</code>. В этом случае каждый раз есть
изменение в значении в любом, но обязательно последнем столбце группировки,
а запрос производит дополнительную суперсовокупную сводную строку.</p>

<p>Например, без <code>ROLLUP</code> резюме для таблицы <code>sales</code>,
основанное на <code>year</code>, <code>country</code> и <code>product</code>
могло бы быть похожим на это:
<pre>
mysql&gt; SELECT year, country, product, SUM(profit)
    -&gt;        FROM sales GROUP BY year, country, product;
+------+---------+------------+-------------+
| year | country | product    | SUM(profit) |
+------+---------+------------+-------------+
| 2000 | Finland | Computer   |  1500       |
| 2000 | Finland | Phone      |   100       |
| 2000 | India   | Calculator |   150       |
| 2000 | India   | Computer   |  1200       |
| 2000 | USA     | Calculator |    75       |
| 2000 | USA     | Computer   |  1500       |
| 2001 | Finland | Phone      |    10       |
| 2001 | USA     | Calculator |    50       |
| 2001 | USA     | Computer   |  2700       |
| 2001 | USA     | TV         |   250       |
+------+---------+------------+-------------+
</pre>

<p>Вывод указывает, что резюме оценивает только на уровне
year/country/product анализа. Когда <code>ROLLUP</code> добавлен, запрос
производит несколько дополнительных строк:
<pre>
mysql&gt; SELECT year, country, product, SUM(profit)
    -&gt;        FROM sales GROUP BY year, country, product WITH ROLLUP;
+------+---------+------------+-------------+
| year | country | product    | SUM(profit) |
+------+---------+------------+-------------+
| 2000 | Finland | Computer   |  1500       |
| 2000 | Finland | Phone      |   100       |
| 2000 | Finland | NULL       |  1600       |
| 2000 | India   | Calculator |   150       |
| 2000 | India   | Computer   |  1200       |
| 2000 | India   | NULL       |  1350       |
| 2000 | USA     | Calculator |    75       |
| 2000 | USA     | Computer   |  1500       |
| 2000 | USA     | NULL       |  1575       |
| 2000 | NULL    | NULL       |  4525       |
| 2001 | Finland | Phone      |    10       |
| 2001 | Finland | NULL       |    10       |
| 2001 | USA     | Calculator |    50       |
| 2001 | USA     | Computer   |  2700       |
| 2001 | USA     | TV         |   250       |
| 2001 | USA     | NULL       |  3000       |
| 2001 | NULL    | NULL       |  3010       |
| NULL | NULL    | NULL       |  7535       |
+------+---------+------------+-------------+
</pre>

<p>Для этого запроса добавление <code>ROLLUP</code> заставляет вывод включить
итоговую информацию по четырем уровням анализа, а не только одному. Вот как
интерпретировать вывод <code>ROLLUP</code>:</p>

<ul><li><p>После каждого набора строк product для данных year и country
дополнительная сводная строка произведена, показывая общее количество для
всех product. Эти строки имеют столбец
<code>product</code> установленный в <code>NULL</code>.</li>

<li>После каждого набора строк в течение данного year
дополнительная сводная строка произведена, показывая общее количество для
всех country и product. Эти строки имеют столбцы <code>country</code> и
<code>products</code> установленные в <code>NULL</code>.</li>

<li>Наконец, после всех других строк, дополнительная сводная строка
произведена, показывая общий итог для всех year, country и products.
Эта строка имеет столбцы <code>year</code>, <code>country</code> и
<code>products</code> установленные в <code>NULL</code>.</p></li></ul>

<h4><a name="idm139965346416144"></a>Другие соображения, используя ROLLUP</h4>
<p>Следующие элементы перечисляют некоторые особенности поведения,
определенные для выполнения MySQL <code>ROLLUP</code>.</p>

<p>Когда Вы используете <code>ROLLUP</code>, Вы не можете также использовать
<code>ORDER BY</code>, чтобы сортировать результаты. Другими словами,
<code>ROLLUP</code> и <code>ORDER BY</code> являются взаимоисключающими.
Однако, Вы все еще имеете некоторый контроль над порядком сортировки.
<code>GROUP BY</code> в MySQL неявно сортирует результаты, и Вы можете
использовать явные ключевые слова <code>ASC</code> и <code>DESC</code>
со столбцами, названными в списке <code>GROUP BY</code>, чтобы определить
порядок сортировки для отдельных столбцов. Высокоуровневые сводные строки,
добавленные <code>ROLLUP</code> все еще появятся
после строк, от которых они вычислены, независимо от порядка сортировки.</p>

<p>Неявная сортировка <code>GROUP BY</code> в MySQL 8.0 устарела.
Чтобы достигнуть определенного порядка сортировки сгруппированных
результатов, предпочтительно использовать явное предложение
<code>ORDER BY</code>. Это можно обойти помещая <code>ROLLUP</code>
в пределах подзапроса. Например:
<pre>
mysql&gt; SELECT * FROM (SELECT year, country, SUM(profit) FROM sales
    -&gt;          GROUP BY year WITH ROLLUP) derived_t1 ORDER BY year;
</pre>

<p><code>LIMIT</code> может использоваться, чтобы ограничить число строк,
возвращенных клиенту. <code>LIMIT</code> применен после <code>ROLLUP</code>,
таким образом, предел применяется против дополнительных строк,
добавленных <code>ROLLUP</code>. Например:
<pre>
mysql&gt; SELECT year, country, product, SUM(profit)
    -&gt;        FROM sales GROUP BY year, country, product WITH ROLLUP
    -&gt;        LIMIT 5;
+------+---------+------------+-------------+
| year | country | product    | SUM(profit) |
+------+---------+------------+-------------+
| 2000 | Finland | Computer   |  1500       |
| 2000 | Finland | Phone      |   100       |
| 2000 | Finland | NULL       |  1600       |
| 2000 | India   | Calculator |   150       |
| 2000 | India   | Computer   |  1200       |
+------+---------+------------+-------------+
</pre>

<p>Использование <code>LIMIT</code> с <code>ROLLUP</code>
может привести к результатам, которые трудно интерпретировать, потому что у
Вас есть меньше контекста для того, чтобы понять суперсовокупные строки.</p>

<p><code>NULL</code> в каждой суперсовокупной строке произведен, когда строку
посылают клиенту. Сервер смотрит на столбцы, названные в <code>GROUP BY
</code> после крайнего левого, который изменил значение. Для любого столбца в
наборе результатов с именем, которое соответствует любому из тех имен, его
значение установлено в <code>NULL</code>. Если Вы определяете
группирующиеся столбцы номером столбца, сервер идентифицирует который столбец
установить в <code>NULL</code> по номеру.</p>

<p>Поскольку значения <code>NULL</code> в суперсовокупных строках помещены в
набор результатов в такой позднец стадии в обработке запроса, Вы не можете
проверить их как значения <code>NULL</code>
в пределах запроса непосредственно. Например, Вы не можете добавить
<code>HAVING product IS NULL</code> к запросу, чтобы устранить из вывода все,
кроме суперсовокупных строк.</p>

<p>С другой стороны, значения <code>NULL</code> действительно появляются как
<code>NULL</code> на стороне клиента и могут быть проверены с использованием
любого клиента MySQL.</p>

<p>MySQL разрешает столбец, который не появляется в списке <code>GROUP BY
</code> и назван в списке select. В этом случае сервер свободен выбрать любое
значение из этого несоединенного столбца в сводных строках, и это включает
дополнительные строки, добавленные <code>WITH ROLLUP</code>.
Например, в следующем запросе <code>country</code>
несоединенный столбец, который не появляется в списке <code>GROUP BY</code>
и значения, выбранные для этого столбца, неопределенны:
<pre>
mysql&gt; SELECT year, country, SUM(profit)
    -&gt;        FROM sales GROUP BY year WITH ROLLUP;
+------+---------+-------------+
| year | country | SUM(profit) |
+------+---------+-------------+
| 2000 | India   |  4525       |
| 2001 | USA     |  3010       |
| NULL | USA     |  7535       |
+------+---------+-------------+
</pre>

<p>Это поведение происходит, если режим SQL
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a> выключен. Иначе сервер отклоняет запрос как незаконный потому,
что <code>country</code> не перечислен в предложении <code>GROUP BY</code>.
Для получения дополнительной информации о несоединенных столбцах и
<code>GROUP BY</code> см. <a href="#group-by-handling">раздел
13.19.3</a>.</p>

<h3><a name="group-by-handling"></a>13.19.3. Обработка MySQL GROUP BY</h3>
<p>SQL92 и ранее не разрешает запросы для которых список select с выражением
<code>HAVING</code> или списком <code>ORDER BY</code>
обращается к несоединенным столбцам, которые не называются в
<code>GROUP BY</code> или функционально зависят от (уникально определены)
столбцов <code>GROUP BY</code>. Например, этот запрос незаконен в стандартном
SQL92 потому что несоединенный столбец <code>name</code> в списке select не
появляется в <code>GROUP BY</code>:
<pre>
SELECT o.custid, c.name, MAX(o.payment)
       FROM orders AS o, customers AS c
       WHERE o.custid = c.custid GROUP BY o.custid;
</pre>

<p>Чтобы запрос был законным в SQL92, столбец <code>name</code> должен быть
исключен из списка select или назван в <code>GROUP BY</code>.</p>
<p>SQL99 и позже разрешает такие несовокупности, если они функционально
зависят от столбцов <code>GROUP BY</code>: если такие отношения существуют
между <code>name</code> и <code>custid</code>, запрос является законным. Это
имело бы место, например, если <code>custid</code>
первичный ключ <code>customers</code>.</p>

<p>MySQL осуществляет обнаружение функциональной зависимости. Если режим SQL
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a> включен (это так по умолчанию), MySQL отклоняет запросы, для
который список select, выражение <code>HAVING</code> или список
<code>ORDER BY</code> обращаются к несоединенным столбцам, которые не
называют в <code>GROUP BY</code> и функционально не зависят от
столбцов в <code>GROUP BY</code>.</p>

<p>Если <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a> выключен, расширение MySQL к стандартному
использованию SQL <code>GROUP BY</code> разрешает такие запросы.
Это заставляет MySQL принимать предыдущий запрос. В этом случае сервер
свободен выбрать любое значение из каждой группы, так что, если они не то же
самое, выбранные значения не определены. Кроме того, выбор значений из каждой
группы не может быть под влиянием <code>ORDER BY</code>.
Сортировка набора результатов происходит после того, как значения были
выбраны, и <code>ORDER BY</code> не затрагивает, какое значение в пределах
каждой группы сервер выбирает. Отключение
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a> полезно прежде всего, когда Вы знаете что, из-за некоторого
свойства данных, все значения в каждом несоединенном столбце, не названном в
<code>GROUP BY</code> те же самые для каждой группы.</p>

<p>Вы можете достигнуть того же самого эффекта без отключения
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>, используя <a href="#function_any-value"><code>
ANY_VALUE()</code></a> и обратиться к несоединенному столбцу.</p>

<p>Следующее обсуждение демонстрирует функциональную зависимость, сообщение
об ошибке, которое производит MySQL, когда функциональная зависимость
отсутствует, и способы заставить MySQL принимать запрос в
отсутствие функциональной зависимости.</p>

<p>Этот запрос мог бы быть недопустимым с включенным
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>, потому что несоединенный столбец <code>address</code> в списке
select не называют в <code>GROUP BY</code>:
<pre>
SELECT name, address, MAX(age) FROM t GROUP BY name;
</pre>

<p>Запрос допустим, если <code>name</code> первичный ключ <code>t</code> или
уникальный столбец <code>NOT NULL</code>. В таких случаях MySQL признает, что
выбранный столбец функционально зависит от группирующего столбца. Например,
если <code>name</code> первичный ключ, его значение определяет значение
<code>address</code> потому что у каждой группы есть только одно значение
первичного ключа и таким образом только одна строка. В результате нет никакой
хаотичности в выборе значения <code>address</code>
в группе и никакой потребности отклонить запрос.</p>

<p>Запрос недопустим, если <code>name</code> не первичный ключ <code>t</code>
или уникальный столбец <code>NOT NULL</code>. В этом случае никакая
функциональная зависимость не может быть выведена, и ошибка происходит:
<pre>
mysql&gt; SELECT name, address, MAX(age) FROM t GROUP BY name;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP
BY clause and contains nonaggregated column 'mydb.t.address' which
is not functionally dependent on columns in GROUP BY clause; this
is incompatible with sql_mode=only_full_group_by
</pre>

<p>Если Вы знаете, что для определенных данных
каждое значение <code>name</code> фактически уникально определяет
<code>address</code>, то <code>address</code> эффективно функционально
зависит от <code>name</code>. Чтобы сказать MySQL принять запрос, Вы можете
использовать <a href="#function_any-value"><code>ANY_VALUE()</code>
</a>:
<pre>
SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;
</pre>

<p>Альтернативно, отключите
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>.</p>

<p>Предыдущий пример довольно прост, как бы то ни было. В частности,
маловероятно, что Вы сгруппировались бы на единственном столбце первичного
ключа, потому что каждая группа будет содержать только одну строку.
Для примеров, демонстрирующих функциональную зависимость в более сложных
запросах см. <a href="#group-by-functional-dependence">раздел
13.19.4</a>.</p>

<p>Если у запроса есть совокупные функции и нет <code>GROUP BY</code>, он
не может иметь несоединенные столбцы в списке select, выражении
<code>HAVING</code> или списке <code>ORDER BY</code> с включенным режимом
<a href="server.htm#sqlmode_only_full_group_by"><code>ONLY_FULL_GROUP_BY
</code></a>:
<pre>
mysql&gt; SELECT name, MAX(age) FROM t;
ERROR 1140 (42000): In aggregated query without GROUP BY, expression
#1 of SELECT list contains nonaggregated column 'mydb.t.name'; this
is incompatible with sql_mode=only_full_group_by
</pre>

<p>Без <code>GROUP BY</code> есть единственная группа и неопределенно,
которое значение <code>name</code> выбрать для группы. Здесь также
может использоваться <a href="#function_any-value"><code>ANY_VALUE()
</code></a>, если несущественно, которое значение
<code>name</code> MySQL выбирает:
<pre>
SELECT ANY_VALUE(name), MAX(age) FROM t;
</pre>

<p><code>ONLY_FULL_GROUP_BY</code> также влияет на обработку
<code>DISTINCT</code> и <code>ORDER BY</code>.
Рассмотрите случай таблицы <code>t</code> с тремя столбцами
<code>c1</code>, <code>c2</code> и <code>c3</code>, которые
содержат эти строки:
<pre>
c1 c2 c3
1  2  A
3  4  B
1  2  C
</pre>

<p>Предположите, что мы выполняем следующий запрос, ожидая, что результаты
будут упорядочены по <code>c3</code>:
<pre>
SELECT DISTINCT c1, c2 FROM t ORDER BY c3;
</pre>

<p>Чтобы упорядочить результат, сначала должны быть устранены дубликаты.
Но какую строку мы должны сохранить, первую или третью? Этот произвольный
выбор влияет на сохраненное значение <code>c3</code>, что
в свою очередь влияет на упорядочивание и делает его произвольным. Чтобы
предотвратить эту проблему, запрос, который имеет
<code>DISTINCT</code> и <code>ORDER BY</code> отклонен как недопустимый, если
выражение <code>ORDER BY</code> не удовлетворяет по крайней мере одно
из этих условий:</p>

<ul><li><p>Выражение равно одному в списке select.</li>
<li>Все столбцы, на которые ссылается выражение и принадлежащий выбранным
таблицам запроса, являются элементами списка select.</p></li></ul>

<p>Другое расширение MySQL к стандартному SQL разрешает ссылки в
<code>HAVING</code> выражениям в списке select. Например, следующий запрос
возвращает значения <code>name</code>, которые только
одни в таблице <code>orders</code>:
<pre>
SELECT name, COUNT(name) FROM orders GROUP BY name HAVING COUNT(name) = 1;
</pre>

<p>Расширение MySQL разрешает использование псевдонима в
<code>HAVING</code> для соединенного столбца:
<pre>
SELECT name, COUNT(name) AS c FROM orders GROUP BY name HAVING c = 1;
</pre>

<p>Включение <a href="server.htm#sqlmode_only_full_group_by"><code>
ONLY_FULL_GROUP_BY</code></a> отключает это расширение, таким образом требуя
<code>HAVING</code>, который будет написан, используя
выражения без псевдонимов.</p>

<p>Стандартный SQL не разрешает выражения в <code>GROUP BY</code>, таким
образом, этот запрос недопустим:
<pre>
SELECT id, FLOOR(value/100) FROM <em><code>tbl_name</code></em>
       GROUP BY id, FLOOR(value/100);
</pre>

<p>MySQL расширяет стандартный SQL, чтобы разрешить выражения в
<code>GROUP BY</code> и считает предыдущий запрос допустимым.</p>
<p>Стандартный SQL также не разрешает псевдонимы в <code>GROUP BY</code>.
MySQL расширяет стандартный SQL, чтобы разрешить псевдонимы, таким образом,
другой способ написать запрос следующий:
<pre>
SELECT id, FLOOR(value/100) AS val
       FROM <em><code>tbl_name</code></em>
       GROUP BY id, val;
</pre>

<h3><a name="group-by-functional-dependence"></a>13.19.4.
Обнаружение функциональной зависимости</h3>
<p>Следующее обсуждение обеспечивает несколько примеров путей, которыми MySQL
обнаруживает функциональные зависимости. Примеры используют эту нотацию:
<pre>
{<em><code>X</code></em>} -&gt; {<em><code>Y</code></em>}
</pre>

<p>Поймите это как <span><em><code>X</code></em> уникально определяет
<em><code>Y</code></em></span>, это также означает, что
<em><code>Y</code></em> функционально зависит от <em><code>X</code></em>.</p>

<p>Примеры используют базу данных <code>world</code>, которая может быть
загружена с <a href="../../../dev.mysql.com/doc/index-other.html"
target="_top">MySQL Documentation page</a>. Вы можете найти детали о том, как
установить базу данных на той же самой странице.</p>

<h4><a name="idm139965346260928"></a>
Функциональные зависимости, полученные из ключей</h4>
<p>Следующий запрос выбирает для каждой страны количество разговорных языков:
<pre>
SELECT co.Name, COUNT(*) FROM countrylanguage cl, country co
       WHERE cl.CountryCode = co.Code GROUP BY co.Code;
</pre>

<p><code>co.Code</code> первичный ключ
<code>co</code>, так что все столбцы <code>co</code>
функционально зависят от этого, как выражено здесь:
<pre>
{co.Code} -&gt; {co.*}
</pre>

<p>Таким образом, <code>co.name</code> функционально зависит от столбцов
<code>GROUP BY</code> и запрос допустим.</p>
<p>Индекс <code>UNIQUE</code> по столбцу <code>NOT NULL</code>
мог использоваться вместо первичного ключа, и та же самая функциональная
зависимость применится. Это не истина для индекса <code>UNIQUE</code>,
который разрешает значения <code>NULL</code>, потому что это разрешает
многократные значения <code>NULL</code> и в этом случае уникальность потеряна.
</p>

<h4><a name="idm139965346249360"></a>
Функциональные зависимости, полученные из ключей нескольких
столбцов и из равенств</h4>
<p>Этот запрос выбирает для каждой страны список всех разговорных языков и
сколько людей говорит на них:
<pre>
SELECT co.Name, cl.Language,
       cl.Percentage * co.Population / 100.0 AS SpokenBy
       FROM countrylanguage cl, country co
       WHERE cl.CountryCode = co.Code
       GROUP BY cl.CountryCode, cl.Language;
</pre>

<p>Пара (<code>cl.CountryCode</code>, <code>cl.Language</code>) задает
сложный первичный ключ на двух столбцах <code>cl</code>,
так, чтобы пара столбцов уникально определила все столбцы <code>cl</code>:
<pre>
{cl.CountryCode, cl.Language} -&gt; {cl.*}
</pre>

<p>Кроме того, из-за равенства в <code>WHERE</code>:
<pre>
{cl.CountryCode} -&gt; {co.Code}
</pre>

<p>И потому что <code>co.Code</code> первичный ключ <code>co</code>:
<pre>
{co.Code} -&gt; {co.*}
</pre>

<p><span>Уникально определенные</span> являются переходными, поэтому:
<pre>
{cl.CountryCode, cl.Language} -&gt; {cl.*,co.*}
</pre>
<p>В результате запрос допустим.</p>

<p>Как с предыдущим примером, ключ <code>UNIQUE</code> на столбцах
<code>NOT NULL</code> мог бы использоваться вместо первичного ключа.</p>
<p>Условие <code>INNER JOIN</code> может использоваться вместо
<code>WHERE</code>. Те же самые функциональные зависимости применяются:
<pre>
SELECT co.Name, cl.Language, cl.Percentage * co.Population/100.0 AS SpokenBy
       FROM countrylanguage cl INNER JOIN country co
       ON cl.CountryCode = co.Code
       GROUP BY cl.CountryCode, cl.Language;
</pre>

<h4><a name="idm139965346231744"></a>
Особые случаи функциональной зависимости</h4>
<p>Принимая во внимание, что тест равенства в <code>WHERE</code> или
<code>INNER JOIN</code> симметричен, тест равенства во внешнем условии
соединения не такой, потому что таблицы играют различные роли.</p>

<p>Предположите, что целостность была случайно сломана и там существует
строка <code>countrylanguage</code> без соответствующей строки в
<code>country</code>. Рассмотрите тот же самый запрос как в предыдущем
примере, но с <code>LEFT JOIN</code>:
<pre>
SELECT co.Name, cl.Language,
       cl.Percentage * co.Population/100.0 AS SpokenBy
       FROM countrylanguage cl LEFT JOIN country co
       ON cl.CountryCode = co.Code
       GROUP BY cl.CountryCode, cl.Language;
</pre>

<p>Для данного значения <code>cl.CountryCode</code> значение
<code>co.Code</code>
в соединеннном результате найден в соответствующей строке (определенной
<code>cl.CountryCode</code>) или дополнен <code>NULL</code>, если там нет
соответствия (также определено <code>cl.CountryCode</code>).
В каждом случае применяются эти отношения:
<pre>
{cl.CountryCode} -&gt; {co.Code}
</pre>

<p><code>cl.CountryCode</code> самостоятельно функционально зависит от
{<code>cl.CountryCode</code>, <code>cl.Language</code>},
который является первичным ключом.</p>

<p>Если в результате соединения <code>co.Code</code> дополнен
<code>NULL</code>, то и <code>co.Name</code> тоже. Если <code>co.Code</code>
не дополнен <code>NULL</code>, это потому, что
<code>co.Code</code> первичный ключ, это определяет
<code>co.Name</code>. Поэтому во всех случаях:
<pre>
{co.Code} -&gt; {co.Name}
</pre>

<p>что уступает:
<pre>
{cl.CountryCode, cl.Language} -&gt; {cl.*,co.*}
</pre>

<p>В результате запрос допустим.</p>
<p>Однако, предположите, что таблицы поменяны, как в этом запросе:
<pre>
SELECT co.Name, cl.Language,
       cl.Percentage * co.Population/100.0 AS SpokenBy
       FROM country co LEFT JOIN countrylanguage cl
       ON cl.CountryCode = co.Code
       GROUP BY cl.CountryCode, cl.Language;
</pre>

<p>Теперь эти отношения <span><em>не</em></span> применяются:
<pre>
{cl.CountryCode, cl.Language} -&gt; {cl.*,co.*}
</pre>

<p>Действительно, все <code>NULL</code>-дополненные строки, сделанные для
<code>cl</code> будут помещены в единственную группу (у них есть оба
столбца <code>GROUP BY</code> равные <code>NULL</code>),
и в этой группе значение <code>co.Name</code>
может измениться. Запрос недопустим, и MySQL отклоняет его.</p>

<p>Функциональная зависимость во внешних соединениях, таким образом,
соединена с тем, принадлежат ли определяющие столбцы левой или правой стороне
<code>LEFT JOIN</code>. Определение функциональной зависимости становится
более сложным, если там вложены внешние соединения или условие соединения не
состоит полностью из сравнений равенства.</p>

<h4><a name="idm139965346201264"></a>
Функциональные зависимости и представления</h4>
<p>Предположите, что представление о странах производит их код, их имя в
верхнем регистре, и сколько различных официальных языков они имеют:
<pre>
CREATE VIEW Country2 AS
       SELECT co.Code, UPPER(co.Name) AS UpperName,
              COUNT(cl.Language) AS OfficialLanguages
              FROM country AS co JOIN countrylanguage AS cl
              ON cl.CountryCode = co.Code WHERE cl.isOfficial = 'T'
              GROUP BY co.Code;
</pre>

<p>Это определение допустимо потому, что:
<pre>
{co.Code} -&gt; {co.*}
</pre>

<p>В результате представления первый выбранный столбец
<code>co.Code</code>, который является также групповым столбцом и таким
образом определяет все другие выбранные выражения:
<pre>
{Country2.Code} -&gt; {Country2.*}
</pre>

<p>MySQL понимает это и использует эту информацию, как описано после.</p>
<p>Этот запрос выводит на экран страны, сколько различных официальных языков
они имеют, и сколько городов они имеют, присоединяясь к
представлению с таблицей <code>city</code>:
<pre>
SELECT co2.Code, co2.UpperName, co2.OfficialLanguages,
       COUNT(*) AS Cities FROM country2 AS co2 JOIN city ci
       ON ci.CountryCode = co2.Code GROUP BY co2.Code;
</pre>

<p>Этот запрос допустим потому что, как замечено ранее:
<pre>
{co2.Code} -&gt; {co2.*}
</pre>

<p>MySQL в состоянии обнаружить функциональную зависимость в результате
представления и применить ее, чтобы утвердить запрос, который использует
представление. То же самое было бы истиной, если <code>country2</code>
была созданной таблицей, как в:
<pre>
SELECT co2.Code, co2.UpperName, co2.OfficialLanguages, COUNT(*) AS Cities
       FROM (SELECT co.Code, UPPER(co.Name) AS UpperName,
             COUNT(cl.Language) AS OfficialLanguages
             FROM country AS co JOIN countrylanguage AS cl
             ON cl.CountryCode=co.Code WHERE cl.isOfficial='T'
             GROUP BY co.Code)
       AS co2 JOIN city ci ON ci.CountryCode = co2.Code GROUP BY co2.Code;
</pre>

<h4><a name="idm139965346189712"></a>Комбинации функциональных зависимостей
</h4>
<p>MySQL в состоянии объединить все предыдущие типы функциональных
зависимостей, чтобы утвердить более сложные запросы.</p>

<h2><a name="precision-math"></a>13.20. Точная математика</h2>
<p>MySQL оказывает поддержку для точной математики: числовое значение,
которое приводит к чрезвычайно точным результатам, и управление недопустимыми
значениями. Математика точности основана на этих двух особенностях:</p>

<ul><li><p>Режимы SQL управляют, насколько строг
сервер в принятии или отклонении недопустимых данных.</li>
<li>Библиотека MySQL для вычислений с фиксированной точкой.</p></li></ul>

<p>Эти особенности имеют несколько значений для числовых операций и
обеспечивают высокую степень согласия со стандартным SQL:</p>
<ul><li><p><span><strong>Точные вычисления</strong></span>:
Для чисел точного значения вычисления не вводят ошибки с плавающей запятой.
Вместо этого используется высокая точность. Например, MySQL обрабатывает
такое число, как <code>.0001</code> как точное значение, а не как
приближение, и суммирование его 10000 раз приводит к результату точно
<code>1</code>, а не значению, которое
является просто <span>близким</span> к 1.</li>

<li><span><strong>Четкое поведение округления</strong></span>:
Для чисел точного значения результат
<a href="#function_round"><code>ROUND()</code></a>
зависит от параметра, а не от таких факторов окружающей среды,
как основная библиотека C.</li>

<li><span><strong>Независимость от платформы</strong></span>:
Операции на точных числовых значениях те же самое на различных платформах,
таких как Windows и Unix.</li>

<li><span><strong>Управление обработкой недопустимых значений</strong>
</span>: Переполнение и деление на ноль обнаруживаемы и могут быть обработаны
как ошибки. Например, Вы можете обработать значение, которое является слишком
большим для столбца, как ошибку вместо того, чтобы иметь значение, усеченное
до пределов диапазона типа данных столбца. Точно так же Вы можете обработать
деление на ноль как ошибку, а не как работу, которая приводит к результату
<code>NULL</code>. Многое определено установкой режима SQL сервера.
</p></li></ul>

<p>Следующее обсуждение покрывает несколько аспектов того, как математика
точности работает, включая возможные несовместимости с более старыми
приложениями. В конце некоторые примеры демонстрируют, как MySQL обрабатывает
числовые операции точно. Для информации об управлении режимом SQL см.
<a href="server.htm#sql-mode">раздел 6.1.8</a>.</p>

<h3><a name="precision-math-numbers"></a>13.20.1. Типы числовых значений</h3>
<p>Контекст математики точности для операций точного значения включает типы
данных точного значения (целое число и
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>)
и точное значение числовых литералов. Типы данных приблизительной точности и
числовые литералы обработаны как числа с плавающей запятой.</p>

<p>У точного значения числовых литералов есть часть целого числа или дробная
часть, или обе. Они могут быть со знаком. Примеры: <code>1</code>,
<code>.2</code>, <code>3.4</code>, <code>-5</code>, <code>-6.78</code>,
<code>+9.10</code>.</p>

<p>Числа приблизительной точности представлены в экспоненциальном
представлении с мантиссой и экспонентой. Обе части могут быть
со знаком. Примеры: <code>1.2E3</code>, <code>1.2E-3</code>,
<code>-1.2E3</code>, <code>-1.2E-3</code>.</p>

<p>Два числа, которые выглядят подобными, могут быть обработаны по-другому.
Например, <code>2.34</code> точное значение (фиксированная точка), тогда как
<code>2.34E0</code> приблизительное число (с плавающей запятой).</p>

<p>Тип данных <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
тип с фиксированной точкой, вычисления точны. В MySQL тип
у типа <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
есть несколько синонимов:
<a href="types.htm#fixed-point-types"><code>NUMERIC</code></a>,
<a href="types.htm#fixed-point-types"><code>DEC</code></a>,
<a href="types.htm#fixed-point-types"><code>FIXED</code></a>. Типы целого
числа это типы точного значения.</p>

<p>Типы <a href="types.htm#floating-point-types"><code>FLOAT</code></a> и
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a>
типы с плавающей запятой, вычисления приблизительны. В MySQL типы, которые
синонимичны с
<a href="types.htm#floating-point-types"><code>FLOAT</code></a> или
<a href="types.htm#floating-point-types"><code>DOUBLE</code></a> это
<a href="types.htm#floating-point-types"><code>DOUBLE PRECISION</code></a> и
<a href="types.htm#floating-point-types"><code>REAL</code></a>.</p>

<h3><a name="precision-math-decimal-characteristics"></a>13.20.2.
Характеристики типа данных DECIMAL</h3>
<p>Этот раздел обсуждает характеристики типа данных
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
(и его синонимов) с особым отношением к следующим темам:</p>

<ul><li><p>Максимальное количество цифр.</li>
<li>Формат хранения.</li>
<li>Требования хранения.</li>
<li>Нестандартное расширение MySQL верхнего диапазона столбцов
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>.</p></li></ul>

<p>Синтаксис декларации для столбцов
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
<code>DECIMAL(<em><code>M</code></em>,<em><code>D</code></em>)</code>.
Диапазоны значений для параметров следующие:</p>

<ul><li><p><em><code>M</code></em> максимальное количество цифр (точность).
У этого есть диапазон от 1 до 65.</li>
<li><em><code>D</code></em> число цифр направо от десятичной запятой
(масштаб). Это имеет диапазон от 0 до 30 и должно быть не больше
<em><code>M</code></em>.</p></li></ul>

<p>Максимальное значение 65 для <em><code>M</code></em> означает, что
вычисления на значениях <a href="types.htm#fixed-point-types"><code>DECIMAL
</code></a> точны до 65 цифр. Этот предел точности в 65 цифр также относится
к точному значению числовых литералов, таким образом, максимальный диапазон
таких литералов отличается.</p>

<p>Значения для столбцов <a href="types.htm#fixed-point-types"><code>DECIMAL
</code></a> сохранены, используя двоичный формат, который упаковывает девять
десятичных цифр в 4 байта. Требования хранения для целого числа и дробных
частей каждого значения определены отдельно. Каждое число, кратное девяти
цифрам, требует 4 байтов, и любые остающиеся перенесенные цифры требуют
некоторой части 4 байтов. Хранение, требуемое для оставшихся цифр,
дано следующей таблицей.</p>

<table border="1">
<thead><tr><th scope="col">Оставшиеся цифры</th>
<th scope="col">Число байтов</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>0</td></tr>
<tr><td scope="row">1-2</td><td>1</td></tr>
<tr><td scope="row">3-4</td><td>2</td></tr>
<tr><td scope="row">5-6</td><td>3</td></tr>
<tr><td scope="row">7-9</td><td>4</td></tr></tbody></table>

<p>Например, у столбца <code>DECIMAL(18,9)</code>
есть девять цифр по обе стороны от десятичной запятой, таким образом, часть
целого числа и дробная часть требуют по 4 байта. Столбец
<code>DECIMAL(20,6)</code> имеет четырнадцать цифр целого числа и шесть
дробных цифр. Цифры целого числа требуют четырех байтов для девяти цифр и 3
байтов для оставшихся пяти. Шесть дробных цифр требуют еще 3 байтов.</p>

<p>Столбцы <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
не хранят символы <code>+</code> или <code>-</code>, также старотовые нули.
Если Вы вставляете <code>+0003.1</code> в столбец типа <code>DECIMAL(5,1)
</code>, это сохранено как <code>3.1</code>. Для отрицательных чисел
символ <code>-</code> не сохранен.</p>

<p>Столбцы <a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
не разрешают значения, больше чем диапазон, подразумеваемый определением
столбца. Например, столбец <code>DECIMAL(3,0)</code>
поддерживает диапазон от <code>-999</code> до <code>999</code>. Столбец
<code>DECIMAL(<em><code>M</code></em>, <em><code>D</code></em>)</code>
разрешает самое большее <em><code>M</code></em>-<em><code>D</code></em>
цифр слева от десятичной запятой.</p>

<p>Стандарт SQL требует, чтобы точность
<code>NUMERIC(<em><code>M</code></em>,<em><code>D</code></em>)</code>
была <span><em>точно</em></span> <em><code>M</code></em> цифр. Для
<code>DECIMAL(<em><code>M</code></em>,<em><code>D</code></em>)</code>
стандарт требует точности, по крайней мере, <em><code>M</code></em>
цифр, но разрешает и больше. В MySQL
<code>DECIMAL(<em><code>M</code></em>,<em><code>D</code></em>)</code> и
<code>NUMERIC(<em><code>M</code></em>,<em><code>D</code></em>)</code>
то же самое, и у обоих есть точность строго <em><code>M</code></em> цифр.</p>

<p>Для полного объяснения внутреннего формата значения
<code>DECIMAL</code> см. файл
<code>strings/decimal.c</code> в исходных текстах MySQL.
Формат объяснен (с примером) в функции <code>decimal2bin()</code>.</p>

<h3><a name="precision-math-expressions"></a>13.20.3. Обработка выражений</h3>
<p>С математикой числа точного значения используются как дано, когда это
возможно. Например, числа в сравнениях используются точно как даны без
изменения в значении. В строгом режиме SQL для
<a href="sql.htm#insert"><code>INSERT</code></a> в столбец с точным типом
данных (<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> или
integer), число вставлено с его точным значением, если это в пределах
диапазона столбца. Когда получено, значение должно быть тем же самым как то,
что было вставлено. Если строгий режим SQL не включен, усечение для
<a href="sql.htm#insert"><code>INSERT</code></a> допустимо.</p>

<p>Обработка числового выражения зависит от того, какие
значения выражение содержит:</p>
<ul><li><p>Если какие-либо приблизительные значения присутствуют, выражение
приблизительно и оценено, используя арифметику с плавающей запятой.</li>

<li>Если никаких приблизительных значений нет, выражение содержит только
точные значения. Если какое-либо точное значение содержит дробную часть
(значение после десятичной запятой), выражение оценено, используя
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
у точной арифметики и имеет точность 65 цифр. Например, <code>1.0/3.0</code>
может быть приближен в десятичной записи как <code>.333...</code>, но не
пишется как точное число, таким образом, <code>(1.0/3.0)*3.0</code>
не оценивается точно как <code>1.0</code>.</li>

<li>Иначе выражение содержит только целочисленные значения. Выражение точно и
оценено, используя арифметику целого числа и имеет точность
<a href="types.htm#integer-types"><code>BIGINT</code></a> (64 бита).
</p></li></ul>

<p>Если числовое выражение содержит какие-либо строки, они преобразованы в
двоичную точность, значения с плавающей запятой и выражение приблизительны.
</p>

<p>Вставки в числовые столбцы, затронуты режимом SQL, которым управляет
системная переменная <a href="server.htm#sysvar_sql_mode"><code>sql_mode
</code></a>. См. <a href="server.htm#sql-mode">раздел 6.1.8</a>.
Следующее обсуждение упоминает строгий режим (выбранный значениями режима
<a href="server.htm#sqlmode_strict_all_tables"><code>STRICT_ALL_TABLES</code>
</a> или <a href="server.htm#sqlmode_strict_trans_tables"><code>
STRICT_TRANS_TABLES</code></a>) и
<a href="server.htm#sqlmode_error_for_division_by_zero"><code>
ERROR_FOR_DIVISION_BY_ZERO</code></a>.
Чтобы включить все ограничения, Вы можете просто использовать режим
<a href="server.htm#sqlmode_traditional"><code>TRADITIONAL</code></a>,
который включает строгие значения режима и
<a href="server.htm#sqlmode_error_for_division_by_zero"><code>
ERROR_FOR_DIVISION_BY_ZERO</code></a>:
<pre>
mysql&gt; SET sql_mode='TRADITIONAL';
</pre>

<p>Если число вставлено в столбец точного типа
(<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> или integer),
оно вставлено с его точным значением, если это в пределах диапазона столбца.
</p>

<p>Если у значения есть слишком много цифр в дробной части, округление
происходит, и предупреждение произведено. Округление сделано как описано в
<a href="#precision-math-rounding">разделе 13.20.4</a>.</p>

<p>Если у значения есть слишком много цифр в части целого числа, оно является
слишком большим и обработано следующим образом:</p>
<ul><li><p>Если строгий режим не включен, значение усечено
к самому близкому легальному значению, и предупреждение произведено.</li>
<li>Если строгий режим включен, ошибка переполнения происходит.
</p></li></ul>

<p>Для вставок строк в числовые столбцы преобразование строки в число
обработано следующим образом, если у строки есть нечисловое содержание:</p>
<ul><li><p>Строка, которая не начинается с числа, не может использоваться в
качестве числа и производит ошибку в строгом режиме или предупреждение иначе.
Это включает пустую строку.</li>

<li>Строка, которая начинается с числа, может быть преобразована, но
нечисловая часть усекается. Если усеченная часть содержит что-нибудь кроме
пробелов, это производит ошибку в строгом режиме или предупреждение иначе.
</p></li></ul>

<p>По умолчанию деление на ноль приводит к результату <code>NULL</code> и
ни к какому предупреждению. Устанавливая режим SQL соответственно,
деление на ноль может быть ограничено.</p>

<p>В режиме SQL <a href="server.htm#sqlmode_error_for_division_by_zero">
<code>ERROR_FOR_DIVISION_BY_ZERO</code></a>
MySQL обрабатывает деление на ноль по-другому:</p>

<ul><li><p>Если строгий режим не включен, происходит предупреждение.</li>
<li>Если строгий режим включен, insert и update, вызвавшие такую ситуацию,
запрещены, и происходит ошибка.</p></li></ul>

<p>Другими словами, вставки и обновления, вовлекающие выражения, которые
вызывают деление на ноль могут быть обработаны как ошибки, но это требует
<a href="server.htm#sqlmode_error_for_division_by_zero"><code>
ERROR_FOR_DIVISION_BY_ZERO</code></a> в дополнение к строгому режиму.</p>

<p>Предположите, что у нас есть этот запрос:
<pre>
INSERT INTO t SET i = 1/0;
</pre>

<p>Это то, что происходит для комбинации строгого режима и
<a href="server.htm#sqlmode_error_for_division_by_zero">
<code>ERROR_FOR_DIVISION_BY_ZERO</code></a>.</p>

<table border="1">
<thead><tr><th scope="col">Значение <a href="server.htm#sysvar_sql_mode">
<code>sql_mode</code></a></th><th scope="col">Результат</th></tr></thead>
<tbody><tr><td scope="row"><code>''</code> (Значение по умолчанию)</td>
<td>Никакого предупреждения, никакой ошибки <code>i</code> установлен в
<code>NULL</code>.</td></tr>
<tr><td scope="row">strict</td>
<td>Никакого предупреждения, никакой ошибки <code>i</code> установлен в
<code>NULL</code>.</td></tr>
<tr><td scope="row"><a href="server.htm#sqlmode_error_for_division_by_zero">
<code>ERROR_FOR_DIVISION_BY_ZERO</code></a></td>
<td>Предупреждение, но никакой ошибки <code>i</code> установлен в
<code>NULL</code>.</td></tr>
<tr><td scope="row">strict,
<a href="server.htm#sqlmode_error_for_division_by_zero"><code>
ERROR_FOR_DIVISION_BY_ZERO</code></a></td>
<td>Состояние ошибки: никакая строка не вставлена.</td></tr></tbody></table>

<h3><a name="precision-math-rounding"></a>13.20.4. Логика округления</h3>
<p>Этот раздел обсуждает математику точности, округляющую для функции
<a href="#function_round"><code>ROUND()</code></a> и для вставок в
столбцы с типами точного значения (<a href="types.htm#fixed-point-types">
<code>DECIMAL</code></a> и integer).</p>

<p>Функция <a href="#function_round"><code>ROUND()</code></a>
округляет по-разному в зависимости от того, точен ли
параметр или приблизителен:</p>

<ul><li><p>Для чисел точного значения
<a href="#function_round"><code>ROUND()</code></a> использует
правило <span>округления половины вверх</span>: значение с дробной частью .5
или больше округлено вверх к следующему целому числу, если положительное или
вниз к следующему целому числу, если отрицательное.
Значение с дробной частью меньше, чем .5 округлены в меньшую сторону к
следующему целому числу в соответствующую сторону.</li>

<li>Для чисел приблизительной точности результат зависит от библиотеки C. На
многих системах это означает, что
<a href="#function_round"><code>ROUND()</code></a> использует
правило <span>округления к самому близкому значению</span>:
значение с любой дробной частью округлено к самому близкому целому числу.
</p></li></ul>

<p>Следующие примеры показывают, как округление отличается для
точных и приблизительных чисел:
<pre>
mysql&gt; SELECT ROUND(2.5), ROUND(25E-1);
+------------+--------------+
| ROUND(2.5) | ROUND(25E-1) |
+------------+--------------+
| 3          | 2            |
+------------+--------------+
</pre>

<p>Для вставок в столбец <a href="types.htm#fixed-point-types"><code>DECIMAL
</code></a> или целого числа цель точный тип данных, таким образом,
округлениея использует правило <span>округления половины вверх</span>
независимо от того, точно ли значение, которое будет
вставлено, или приблизительно:
<pre>
mysql&gt; CREATE TABLE t (d DECIMAL(10,0));
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO t VALUES(2.5),(2.5E0);
Query OK, 2 rows affected, 2 warnings (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 2

mysql&gt; SELECT d FROM t;
+---+
| d |
+---+
| 3 |
| 3 |
+---+
</pre>

<h3><a name="precision-math-examples"></a>13.20.5. Примеры точной математики
</h3>
<p>Этот раздел обеспечивает некоторые примеры, которые показывают
математические результаты запроса точности в MySQL. Эти примеры демонстрируют
принципы, описанные в разделах
<a href="#precision-math-expressions">13.20.3</a> и
<a href="#precision-math-rounding">13.20.4</a>.</p>

<p><span><strong>Пример 1</strong></span>.
Числа используются с их точным значением как даны, когда возможно:
<pre>
mysql&gt; SELECT (.1 + .2) = .3;
+----------------+
| (.1 + .2) = .3 |
+----------------+
| 1              |
+----------------+
</pre>

<p>Для значений с плавающей запятой результаты неточны:
<pre>
mysql&gt; SELECT (.1E0 + .2E0) = .3E0;
+----------------------+
| (.1E0 + .2E0) = .3E0 |
+----------------------+
| 0                    |
+----------------------+
</pre>

<p>Другой способ видеть различие в обработке точных и приблизительных
чисел состоит в том, чтобы добавить небольшое число к сумме много раз.
Рассмотрите следующую хранимую процедуру, которая добавляет
<code>.0001</code> к переменным 1,000 раз.
<pre>
CREATE PROCEDURE p ()
BEGIN
  DECLARE i INT DEFAULT 0;
  DECLARE d DECIMAL(10,4) DEFAULT 0;
  DECLARE f FLOAT DEFAULT 0;
  WHILE i &lt; 10000 DO
    SET d = d + .0001;
    SET f = f + .0001E0;
    SET i = i + 1;
  END WHILE;
  SELECT d, f;
END;
</pre>

<p>Сумма для обоих <code>d</code> и <code>f</code>
логически должна быть 1, но это истина только для десятичного вычисления.
Вычисление с плавающей запятой вводит маленькие ошибки:
<pre>
+--------+------------------+
| d      | f                |
+--------+------------------+
| 1.0000 | 0.99999999999991 |
+--------+------------------+
</pre>

<p><span><strong>Пример 2</strong></span>.
Умножение выполнено с масштабом, требуемым стандартным SQL. Таким образом,
для двух чисел <em><code>X1</code></em> и <em><code>X2</code></em>
есть масштаб <em><code>S1</code></em> и <em><code>S2</code></em>,
масштаб результата <code><em><code>S1</code></em>+<em><code>S2
</code></em></code>:
<pre>
mysql&gt; SELECT .01 * .01;
+-----------+
| .01 * .01 |
+-----------+
| 0.0001    |
+-----------+
</pre>

<p><span><strong>Пример 3</strong></span>.
Округление для чисел точного значения является четким:</p>
<p>Округление (например, функцией
<a href="#function_round"><code>ROUND()</code></a>)
независимо от выполнения основной библиотеки C, это означает, что результаты
последовательны, независмо от платформы.</p>

<ul><li><p>Округление для точных столбцов значений
(<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
и целые числа) использует правило <span>округления половины вверх</span>.
Значения с дробной частью .5 или больше округлены до самого близкого целого
числа в сторону от нуля, как показано здесь:
<pre>
mysql&gt; SELECT ROUND(2.5), ROUND(-2.5);
+------------+-------------+
| ROUND(2.5) | ROUND(-2.5) |
+------------+-------------+
| 3          | -3          |
+------------+-------------+
</pre></li>

<li>Округление для значений с плавающей запятой пользуется библиотекой C,
которая на многих системах использует другую логику. Значения с любой дробной
частью на таких системах округлены к самому близкому числу:
<pre>
mysql&gt; SELECT ROUND(2.5E0), ROUND(-2.5E0);
+--------------+---------------+
| ROUND(2.5E0) | ROUND(-2.5E0) |
+--------------+---------------+
|  2           |  -2           |
+--------------+---------------+
</pre></li></ul>

<p><span><strong>Пример 4</strong></span>.
В строгом режиме, вставляя значение, которое вне диапазона для столбца, Вы
получите ошибку, а не усечение к легальному значению.</p>

<p>Когда MySQL не работает в строгом режиме, усечение к
легальному значению происходит:
<pre>
mysql&gt; SET sql_mode='';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE TABLE t (i TINYINT);
Query OK, 0 rows affected (0.01 sec)

mysql&gt; INSERT INTO t SET i = 128;
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql&gt; SELECT i FROM t;
+-----+
| i   |
+-----+
| 127 |
+-----+
1 row in set (0.00 sec)
</pre>

<p>Однако, ошибка происходит, если строгий режим активен:
<pre>
mysql&gt; SET sql_mode='STRICT_ALL_TABLES';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE TABLE t (i TINYINT);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO t SET i = 128;
ERROR 1264 (22003): Out of range value adjusted for column 'i' at row 1

mysql&gt; SELECT i FROM t;
Empty set (0.00 sec)
</pre>

<p><span><strong>Пример 5</strong></span>.
В строгом режиме и с установленной опцией
<a href="server.htm#sqlmode_error_for_division_by_zero"><code>
ERROR_FOR_DIVISION_BY_ZERO</code></a> деление на ноль вызывает ошибку, а
не результат <code>NULL</code>.</p>

<p>В нестрогом режиме у деления есть результат <code>NULL</code>:
<pre>
mysql&gt; SET sql_mode='';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CREATE TABLE t (i TINYINT);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO t SET i = 1/0;
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT i FROM t;
+------+
| i    |
+------+
| NULL |
+------+
1 row in set (0.03 sec)
</pre>

<p>Однако, деление на ноль ошибка, если надлежащие режимы SQL включены:
<pre>
mysql&gt; SET sql_mode='STRICT_ALL_TABLES,ERROR_FOR_DIVISION_BY_ZERO';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE TABLE t (i TINYINT);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO t SET i = 1 / 0;
ERROR 1365 (22012): Division by 0

mysql&gt; SELECT i FROM t;
Empty set (0.01 sec)
</pre>

<p><span><strong>Пример 6</strong></span>.
Литералы точного значения оценены как точные значения.</p>

<p>Числа приблизительной точности оценены, используя плавающую запятую, но
числа точного значения обработаны как
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>:
<pre>
mysql&gt; CREATE TABLE t SELECT 2.5 AS a, 25E-1 AS b;
Query OK, 1 row affected (0.01 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&gt; DESCRIBE t;
+-------+-----------------------+------+-----+---------+-------+
| Field | Type                  | Null | Key | Default | Extra |
+-------+-----------------------+------+-----+---------+-------+
| a     | decimal(2,1) unsigned | NO   |     | 0.0     |       |
| b     | double                | NO   |     | 0       |       |
+-------+-----------------------+------+-----+---------+-------+
2 rows in set (0.01 sec)
</pre>

<p><span><strong>Пример 7</strong></span>.
Если параметр совокупной функции точный числовой тип, результат также точный
числовой тип, с масштабом, по крайней мере таким, как у параметра.</p>

<p>Рассмотрите эти запросы:
<pre>
mysql&gt; CREATE TABLE t (i INT, d DECIMAL, f FLOAT);
mysql&gt; INSERT INTO t VALUES(1,1,1);
mysql&gt; CREATE TABLE y SELECT AVG(i), AVG(d), AVG(f) FROM t;
</pre>

<p>Результат double только для параметра с плавающей запятой. Для точных
параметров типа результат также точный тип:
<pre>
mysql&gt; DESCRIBE y;
+--------+---------------+------+-----+---------+-------+
| Field  | Type          | Null | Key | Default | Extra |
+--------+---------------+------+-----+---------+-------+
| AVG(i) | decimal(14,4) | YES  |     | NULL    |       |
| AVG(d) | decimal(14,4) | YES  |     | NULL    |       |
| AVG(f) | double        | YES  |     | NULL    |       |
+--------+---------------+------+-----+---------+-------+
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
