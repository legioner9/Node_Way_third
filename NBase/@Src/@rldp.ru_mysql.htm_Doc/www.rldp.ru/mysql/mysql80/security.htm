<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <title>Глава 7. Безопасность</title>
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="security"></a>Глава 7. Безопасность</h1>
<p>Думая о безопасности в пределах установки MySQL, Вы должны рассмотреть
широкий диапазон возможных тем и как они затрагивают безопасность Вашего
сервера MySQL и связанные приложения:</p>

<ul><li><p>Общие факторы. Они включают хорошие пароли, не предоставление
ненужных привилегий пользователям, гарантирование безопасности приложения,
предотвращение инъекций SQL и повреждения данных и другое. См.
<a href="#general-security-issues">раздел 7.1</a>.</li>

<li>Безопасность установки непосредственно. Файлы с данными, файлы системного
журнала и все файлы приложения Вашей установки должны быть защищены, чтобы
гарантировать, что они не читаемы или перезаписываемы неправомочными
сторонами. Для получения дополнительной информации см.
<a href="install.htm#postinstallation">раздел 2.9</a>.</li>

<li>Управление доступом и безопасность в пределах системы базы данных
непосредственно, включая пользователей и базы данных, предоставление
доступа к базам данных и сохраненные программы в пределах базы данных.
Для получения дополнительной информации см. разделы
<a href="#privilege-system">7.2</a> и
<a href="#user-account-management">7.3</a>.</li>

<li>Особенности связанных с безопасностью плагинов. См.
<a href="#security-plugins">раздел 7.5</a>.</li>
<li>Сетевая безопасность MySQL и Вашей системы. Безопасность связана с
привилегиями отдельных пользователей, но Вы можете также хотеть ограничить
MySQL так, чтобы это было доступно только в местном масштабе на узле сервера
MySQL или ограниченному набору других узлов.</li>

<li>Гарантируйте, что у Вас есть соответствующие
резервные копии Ваших файлов базы данных, конфигурации и файлов системного
журнала. Также убедитесь, что у Вас есть решение для восстановления, что Вы в
состоянии успешно возвратить информацию от своих резервных копий. См.
<a href="backup.htm">главу 8</i></a>.</p></li></ul>

<h2><a name="general-security-issues"></a>7.1. Общие вопросы безопасности</h2>
<p>Этот раздел описывает общие вопросы безопасности, чтобы знать,
что Вы можете сделать, чтобы сделать Вашу установку MySQL более безопасной от
нападения или неправильного употребления. Для информации о системе управления
доступом, чтобы настроить учетные записи пользователя и проверить доступ к
базе данных см. <a href="install.htm#postinstallation">раздел 2.9</a>.</p>

<p>Для ответов на некоторые вопросы, которые часто спрашивают о вопросах
безопасности MySQL Server см. <a href="faqs.html#faqs-security">раздел A.9
</a>.</p>

<h3><a name="security-guidelines"></a>7.1.1. Направляющие линии безопасности
</h3>
<p>Любой, использующий MySQL на компьютере, соединенном с Интернетом, должен
прочитать этот раздел, чтобы избежать наиболее
распространенных ошибок безопасности.</p>

<p>В обсуждении безопасности необходимо рассмотреть полностью защиту всего
узла сервера (не только сервера MySQL) против всех типов применимых
нападений. Мы не покрываем все аспекты доступности и отказоустойчивости.</p>

<p>MySQL использует безопасность, основанную на Access Control Lists (ACL)
для всех соединений, запросов и других операций, которые пользователи могут
попытаться выполнить. Есть также поддержка SSL-зашифрованных соединений между
клиентами и серверами MySQL. Многие из понятий, обсужденных здесь, не
являются определенными для MySQL вообще: те же самые общие представления
относятся почти ко всем приложениям.</p>

<p>Выполняя MySQL, следуйте за этими направляющими линиями:</p>
<ul><li><p><span><strong>Никогда не давайте никому (кроме учетной записи
MySQL <code>root</code>) доступ к таблице <code>user</code> в базе
<code>mysql</code>!</strong></span> Это важно.</li>

<li>Изучите, как система привилегии доступа MySQL работает (см.
<a href="#privilege-system">раздел 7.2</a>). Используйте
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a>, чтобы управлять доступом к
MySQL. Не предоставляйте больше привилегий, чем необходимо. Никогда не
предоставляйте привилегии всем узлам.</p>

<ul><li><p>Попробуйте <code>mysql -u root</code>. Если Вы в состоянии
соединиться успешно с сервером без пароля, любой может соединиться с Вашим
сервером MySQL как MySQL <code>root</code> с полными привилегиями!
Рассмотрите инструкции по установке MySQL, обращая особое внимание на
информацию об установке пароля <code>root</code>, см.
<a href="install.htm#default-privileges">раздел 2.9.4</a>.</li>

<li>Используйте <a href="sql.htm#show-grants"><code>SHOW GRANTS</code></a>,
чтобы проверить, у каких учетных записей куда есть доступ.  Тогда используйте
<a href="sql.htm#revoke"><code>REVOKE</code></a>,
чтобы удалить те привилегии, которые не необходимы.</p></li></ul></li>

<li><p>Не храните пароли открытого текста в своей базе данных. Злоумышленник
может взять полный список паролей и использовать их. Вместо этого используйте
<a href="funct.htm#function_sha2"><code>SHA2()</code></a>,
<a href="funct.htm#function_sha1"><code>SHA1()</code></a>,
<a href="funct.htm#function_md5"><code>MD5()</code></a> или некоторую другую
одностороннюю хеширующую функцию и храните значение хеша.</p>

<p>Чтобы предотвратить восстановление пароля, используя таблицы радуги, не
используйте эти функции на простом пароле, вместо этого, выберите некоторую
строку, которая будет использоваться в качестве salt и используйте
hash(hash(password)+salt).</li>

<li>Не выбирайте пароли из словарей. Специальные программы существуют, чтобы
сломать пароли. Даже такие пароли, как <span><span>xfish98</span></span>,
очень плохи. Намного лучше <span><span>duag98</span></span>,
который содержит то же самое слово <span><span>fish</span></span>,
но на одну клавишу левее на стандартной клавиатуре QWERTY.
Другой метод должен использовать пароль, который взят от первых символов
каждого слова в предложении (например, <span><span>Four score and seven years
ago</span></span> приводит к паролю <span><span>Fsasya</span></span>).
Пароль легко запомнить и ввести, но трудно предположить для кого-то, кто не
знает предложение. В этом случае Вы можете дополнительно заменить цифрами
слова числа, чтобы получить фразу <span><span>4 score and 7 years
ago</span></span> и пароль <span><span>4sa7ya</span></span>, который еще
более трудно предположить.</li>

<li>Поставьте и настройте брандмауэр. Это защищает Вас по крайней мере от 50%
всех типов деяний в любом программном обеспечении. Поместите MySQL позади
брандмауэра или в демилитаризированной зоне (DMZ).</p>

<ul><li><p>Попытайтесь просмотреть свои порты из Интернета, используя такой
инструмент, как <code>nmap</code>. MySQL использует порт 3306 по умолчанию.
Этот порт не должен быть доступным от узлов, которым не доверяют. Как простой
способ проверить, открыт ли Ваш порт MySQL, попробуйте следующую команду от
некоторой отдаленной машины, где <em><code>server_host</code></em> это
имя хоста или IP-адрес узла, на котором работает Ваш сервер MySQL:
<pre>
shell&gt; telnet <em><code>server_host</code></em> 3306
</pre>

Если <span><strong>telnet</strong></span> зависает, или соединению
отказывают, порт заблокирован. Если Вы получаете соединение и некоторые
ошибочные символы, порт открыт и должен быть закрыт на Вашем брандмауэре или
маршрутизаторе, если у Вас действительно нет серьезного основания
сохранить это открытым.</p></li></ul></li>

<li><p>Приложения MySQL не должны доверять никаким данным, вводимым
пользователями, и должны быть написан, используя надлежащие защитные
программные методы. См. <a href="#secure-client-programming">
раздел 7.1.7</a>.</li>

<li>Не передавайте открытые (незашифрованные) данные по Интернету. Эта
информация доступна для всех, у кого есть время и способность перехватить и
использовать ее в их собственных целях. Вместо этого используйте
зашифрованный протокол, такой как SSL или SSH. MySQL поддерживает внутренние
соединения SSL. Другой метод должен использовать перенаправление портов SSH,
чтобы создать зашифрованный (и сжатый) туннель для коммуникации.</li>

<li>Учитесь использовать <span><strong>tcpdump</strong></span> и
<span><strong>strings</strong></span>.
В большинстве случаев Вы можете проверить, зашифрованы ли потоки данных
MySQL, выпуская команду:
<pre>
shell&gt; tcpdump -l -i eth0 -w - src or dst port 3306 | strings
</pre>
Это работает под Linux и должно работать с маленькими модификациями
под другими системами.</p>

<p>Если Вы не видите данные в открытом тексте, это не всегда означает, что
информация фактически зашифрована. Если Вы нуждаетесь в высокой степени
безопасности, консультируйтесь с экспертом по безопасности.</p></li></ul>

<h3><a name="password-security"></a>7.1.2. Хранение безопасных паролей</h3>
<p>Пароли происходят в нескольких контекстах в пределах MySQL. Следующие
разделы обеспечивают направляющие линии, которые позволяют конечным
пользователям и администраторам сохранить эти пароли. Кроме того,
плагин <code>validate_password</code> может использоваться, чтобы провести в
жизнь политику по приемлемому паролю. См.
<a href="#validate-password-plugin">раздел 7.5.2</a>.</p>

<h4><a name="password-security-user"></a>7.1.2.1.
Направляющие линии конечного пользователя для безопасности пароля</h4>
<p>Пользователи MySQL должны использовать следующие направляющие линии, чтобы
сохранить пароли безопасными.</p>

<p>Когда Вы выполняете программу клиента, чтобы соединиться с сервером MySQL,
нецелесообразно определить Ваш пароль способом, который выставляет это
открытым другим пользователям. Методы, которые Вы можете использовать, чтобы
определить Ваш пароль, когда Вы выполняете программы клиента, перечислены
здесь, наряду с оценкой рисков каждого метода. Короче говоря, у самых
безопасных методов должна быть подсказка программы клиента для пароля или
определение пароля в должным образом защищенном файле опции.</p>

<ul><li><p><a href="programs.htm#mysql-config-editor"><span><strong>
mysql_config_editor</strong></span></a> позволяет Вам сохранить параметры
аутентификации в зашифрованном названном файле входа в систему
<code>.mylogin.cnf</code>. Файл может быть считан позже программами клиента
MySQL, чтобы получить параметры аутентификации для того, чтобы соединиться с
MySQL Server. См. <a href="programs.htm#mysql-config-editor">раздел 5.6.7
</a>.</li>

<li>Используйте в командной строке опцию
<code>-p<em><code>your_pass</code></em></code> или
<code>--password=<em><code>your_pass</code></em></code>. Например:
<pre>
shell&gt; mysql -u francis -pfrank <em><code>db_name</code></em>
</pre>

Это удобно, <span><em>но опасно</em></span>. На некоторых системах Ваш пароль
становится видимым системным программам состояния, таким как
<span><strong>ps</strong></span>, которые могут быть вызваны другими
пользователями. Клиенты MySQL, как правило, переписывают параметр пароля
командной строки нолями во время их последовательности инициализации. Однако,
есть все еще краткий интервал, во время которого значение видимо. Кроме того,
на некоторых системах эта стратегия перезаписи неэффективна, и пароль
остается видимым (System V Unix и, возможно, другие
подвергаются этой проблеме).</p>

<p>Если Ваша операционная среда настроена, чтобы вывести на экран Вашу
текущую команду в строке заголовка Вашего окна терминала, пароль остается
видимым, пока команда работает.</li>

<li>Используйте опцию <code>-p</code> или <code>--password</code>
в командной строке без значения пароля. В этом случае программа клиента
требует пароля в интерактивном режиме:
<pre>
shell&gt; mysql -u francis -p <em><code>db_name</code></em>
Enter password: ********
</pre>
Символы <code>*</code> указывают, где Вы вводите свой пароль.
Пароль не выведен на экран.</p>

<p>Это более безопасно, чтобы ввести Ваш пароль, чем определить это в
командной строке, потому что это не видимо другим пользователям. Однако, этот
метод введения пароля является подходящим только для программ, которые Вы
выполняете в интерактивном режиме. Если Вы хотите вызвать клиент из скрипта,
который работает не в интерактивном режиме, нет никакой возможности ввести
пароль с клавиатуры. На некоторых системах Вы можете даже найти, что первая
строка Вашего скрипта считана и интерпретируется (неправильно) как пароль.
</li>

<li>Сохраните свой пароль в файле опции. Например, в Unix, Вы можете написать
свой пароль в разделе <code>[client]</code> файла <code>.my.cnf</code>:
<pre>
[client]
password=your_pass
</pre>

Чтобы бережно хранить пароль, файл не должен быть доступным для любого.
Чтобы гарантировать это, установите режим доступа к файлу
<code>400</code> или <code>600</code>. Например:
<pre>
shell&gt; chmod 600 .my.cnf
</pre>

Чтобы назвать в командной строке определенный файл опции, содержащий пароль,
используйте <a href="programs.htm#option_general_defaults-file"><code>
--defaults-file=<em><code>file_name</code></em></code></a>, где
<code>file_name</code> полное имя файла. Например:
<pre>
shell&gt; mysql --defaults-file=/home/francis/mysql-opts
</pre>
<a href="programs.htm#option-files">раздел 5.2.6</a>
обсуждает файлы опции более подробно.</li>

<li>Сохраните свой пароль в переменной окружения <code>MYSQL_PWD</code>, см.
<a href="programs.htm#environment-variables">раздел 5.9</a>.</p>
<p>Этот метод определения Вашего пароля MySQL нужно считать
This method of specifying your MySQL password must be
<span><em>очень опасным</em></span>, и он не должен использоваться. Некоторые
версии <span><strong>ps</strong></span> включают опцию, чтобы вывести на
экран окружающую среду выполнения процессов. На некоторых системах, если Вы
устанавливаете <code>MYSQL_PWD</code>, Ваш пароль выставлен любому другому
пользователю, который выполняет <span><strong>ps</strong></span>.
Даже на системах без такой версии <span><strong>ps</strong></span>,
неблагоразумно предположить, что нет никаких других методов, которыми
пользователи могут исследовать окружающую среду процесса.</p></li></ul>

<p>В Unix <a href="programs.htm#mysql"><span><strong>mysql</strong></span>
</a> пишет отчет выполненных запросов в файл истории (см.
<a href="programs.htm#mysql-logging">раздел 5.5.1.3</a>).
По умолчанию этот файл называется <code>.mysql_history</code>
и создается в Вашем корневом каталоге. Пароли могут быть написаны как простой
текст в таких запросах SQL, как <a href="sql.htm#create-user"><code>CREATE
USER</code></a> и <a href="sql.htm#alter-user"><code>ALTER USER</code></a>,
так что если Вы используете эти запросы, они зарегистрированы в файле
истории. Чтобы хранить этот файл, используйте рестриктивный режим доступа,
как описано ранее для файла <code>.my.cnf</code>.</p>

<p>Если Ваш интерпретатор команды будет сконфигурирован, чтобы поддержать
историю, то любой файл, в котором сохранены команды, будет содержать пароли
MySQL из командной строки. Например, <span><strong>bash</strong></span>
использует <code>~/.bash_history</code>. У любого такого файла должен быть
рестриктивный режим доступа.</p>

<h4><a name="password-security-admin"></a>7.1.2.2.
Направляющие линии администратора для безопасности пароля</h4>
<p>Администраторы базы данных должны использовать следующие направляющие
линии, чтобы сохранить пароли безопасными.</p>

<p>MySQL хранит пароли для учетных записей пользователя в таблице
<code>mysql.user</code>. Доступ к этой таблице никогда нельзя предоставлять
никаким неадминистративным учетным записям.</p>

<p>Пароли учетной записи могут истечь, чтобы пользователи сбросили их. См.
разделы <a href="#password-expiration-policy">7.3.7</a> и
<a href="#password-expiration-sandbox-mode">7.3.8</a>.</p>

<p>Плагин <code>validate_password</code> может использоваться, чтобы провести
в жизнь политику по приемлемому паролю. См.
<a href="#validate-password-plugin">раздел 7.5.2</a>.</p>

<p>Пользователь, у которого есть доступ, чтобы изменить каталог плагинов
(значение <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>)
файл <code>my.cnf</code>, который определяет местоположение каталога, может
заменить плагины и изменить способности, обеспеченные плагинами,
включая плагины аутентификации.</p>

<p>Должны быть защищены файлы, такие как файлы системного журнала,
в которые могли быть записаны пароли. См.
<a href="#password-logging">раздел 7.1.2.3</a>.</p>

<h4><a name="password-logging"></a>7.1.2.3. Пароли и журналирование</h4>
<p>Пароли могут быть написаны как простой текст в запросах SQL вроде
<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a>,
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a> и запросах,
которые вызывают функцию <a href="funct.htm#function_password"><code>
PASSWORD()</code></a>. Если такие запросы зарегистрированы сервером MySQL,
пароли в них становятся видимыми любому с доступом к журналам.</p>

<p>В MySQL 8.0 журналирование запросов избегает писать пароли открытым
текстом для следующих запросов:
<pre>
CREATE USER ... IDENTIFIED BY ...
ALTER USER ... IDENTIFIED BY ...
GRANT ... IDENTIFIED BY ...
SET PASSWORD ...
SLAVE START ... PASSWORD = ...
CREATE SERVER ... OPTIONS(... PASSWORD ...)
ALTER SERVER ... OPTIONS(... PASSWORD ...)
</pre>

Пароли в тех запросах переписаны, чтобы не появиться буквально в тексте в
общем журнале запросов, медленном журнале запросов и двоичном журнале.
Перезапись не относится к другим запросым. В частности,
<a href="sql.htm#insert"><code>INSERT</code></a> или
<a href="sql.htm#update"><code>UPDATE</code></a> для <code>mysql.user</code>,
которые обращаются к буквальным паролям, зарегистрированы как есть, таким
образом, Вы должны избежать таких запросов.</p>

<p>Для общего журнала запроса перезапись пароля может быть подавлена,
запуская сервер с опцией <a href="server.htm#option_mysqld_log-raw"><code>
--log-raw</code></a>. Из соображений безопасности эта опция не рекомендуется
для производственного использования. В диагностических целях может быть
полезно видеть точный текст запросов, как он получен сервером.</p>

<p>Запросы, полученные сервером, могут быть переписаны, если плагин
перезаписи запроса установлен. В этом случае опция
<a href="server.htm#option_mysqld_log-raw"><code>--log-raw</code></a>
затрагивает регистрацию запроса следующим образом:</p>

<ul><li><p>Без <a href="server.htm#option_mysqld_log-raw"><code>--log-raw
</code></a> сервер регистрирует запрос, возвращенный плагином перезаписи
запроса. Это может отличаться от полученного запроса.</li>
<li>С <a href="server.htm#option_mysqld_log-raw"><code>--log-raw</code></a>
сервер регистрирует оригинальное запрос как он получен.</p></li></ul>

<p>Значение перезаписи пароля в том, что запросы, которые не могут быть
разобраны (например, с синтаксическими ошибками)
не написаны в общий журнал запроса, потому что они могут содержать пароли
открытым текстом. Случаи, которые требуют журналирования всех запросов,
включая запросы с ошибками, должны применить опцию
<a href="server.htm#option_mysqld_log-raw"><code>--log-raw</code></a>,
принимая во внимание, что это также обходит перезапись пароля.</p>

<p>Перезапись пароля происходит только, когда пароли простого текста
ожидаются. Для запросов с синтаксисом, которые ожидают значение хеша пароля,
не происходит никакая перезапись. Если пароль простого текста поставляется
ошибочно для такого синтаксиса, пароль зарегистрирован как дан без
перезаписи. Например, следующий запрос зарегистрирован как показано, потому
что значение хеша пароля ожидается:
<pre>
CREATE USER 'user1'@'localhost' IDENTIFIED BY PASSWORD 'not-so-secret';
</pre>

Чтобы защитить файлы системного журнала от несанкционированного доступа,
определите местонахождение их в каталоге, который ограничивает доступ к
серверу администратором базы данных. Если сервер регистрирует в таблицы в
базе данных <code>mysql</code>, дайте доступ к тем таблицам только
администратору базы данных.</p>

<p>Ведомые устройства репликации хранят пароль для ведущего устройства
в основном репозитарии информации, который может быть файлом или таблицей
(см. <a href="replica.htm#slave-logs">раздел 19.2.4</a>). Гарантируйте, что к
репозитарию может получить доступ только администратор базы данных.
Альтернатива хранению пароля в файле должна использовать
<a href="sql.htm#start-slave"><code>START SLAVE</code></a>, чтобы определить
параметры для того, чтобы соединиться с ведущим устройством.</p>

<p>Используйте ограниченный режим доступа, чтобы защитить резервные копии
базы данных, которые включают таблицы журнала или файлы системного
журнала, содержащие пароли.</p>

<h3><a name="security-against-attack"></a>7.1.3. Создание безопасного MySQL
</h3>
<p>Когда Вы соединяетесь с сервером MySQL, Вы должны использовать пароль.
Пароль не передан открытым текстом по соединению.
Обработка пароля во время последовательности соединения клиента была
обновлена в MySQL 4.1.1, чтобы быть очень безопасной. Если Вы все еще
используете пароли стиля pre-4.1.1, алгоритм шифрования не столь же силен,
как более новый алгоритм. С некоторым усилием умный хакер
может взломать пароль.</p>

<p>Вся другая информация передана как текст, и может быть считана любым,
кто в состоянии наблюдать соединение. Если соединение между клиентом и
сервером проходит сеть, которой не доверяют, и Вы обеспокоены этим, Вы можете
использовать сжатый протокол, чтобы сделать трафик намного более трудным для
дешифровки. Вы можете также использовать внутреннюю поддержку SSL MySQL,
чтобы сделать соединение еще более безопасным. См.
<a href="#secure-connections">раздел 7.4</a>.
Альтернативно, используйте SSH, чтобы получить зашифрованное соединение
TCP/IP между сервером MySQL и клиентом. Вы можете найти клиент Open Source
SSH на <a href="../../../www.openssh.org/default.htm" target="_top">
http://www.openssh.org/</a> и сравнение Open Source и Commercial клиентов SSH
на <a href="../../../en.wikipedia.org/wiki/Comparison_of_SSH_clients"
target="_top">http://en.wikipedia.org/wiki/Comparison_of_SSH_clients</a>.</p>

<p>Чтобы сделать систему MySQL безопасной, Вы должны
рассмотреть следующие предложения:</p>
<ul><li><p>Потребуйте, чтобы у всех учетных записей MySQL был пароль.
Программа клиента не обязательно знает личность человека, выполняющего ее.
Для приложений клиент-сервер распространено, что пользователь может
определить любое имя пользователя в программе клиента. Например, любой может
использовать <a href="programs.htm#mysql"><span><strong>mysql</strong></span>
</a>, чтобы соединиться как любой другой человек, просто вызывая это как
<code>mysql -u <em><code>other_user</code></em>
<em><code>db_name</code></em></code>, если <em><code>other_user</code></em>
пароля не имеет. Если у всех учетных записей есть пароль, соединение,
использующее учетную запись другого пользователя, становится
намного более трудным.</p>
<p>См. <a href="#assigning-passwords">раздел 7.3.6</a>.</li>

<li>Удостоверьтесь, что единственная учетная запись пользователя Unix
с чтением или записью в каталогах базы данных это учетная запись, которая
используется для того, чтобы выполнить <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a>.</li>

<li>Никогда не выполняйте сервер MySQL как Unix-пользователь
<code>root</code>. Это чрезвычайно опасно, потому что любой пользователь с
привилегией <a href="#priv_file"><code>FILE</code></a>
в состоянии заставить сервер создавать файлы как <code>root</code> (например,
<code>~root/.bashrc</code>). Чтобы предотвратить это,
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
отказывается работать как <code>root</code>, если это не определено явно,
используя опцию <a href="server.htm#option_mysqld_user"><code>--user=root
</code></a>.</p>

<p><a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
может (и должен) быть выполнен как обычный непривилегированный пользователь
вместо этого. Вы можете создать отдельную учетную запись Unix
<code>mysql</code>, чтобы сделать все еще более безопасным.
Используйте эту учетную запись только для управления MySQL. Чтобы запустить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
как иного пользователя Unix, добавьте опцию <code>user</code>, которая
определяет имя пользователя в группу <code>[mysqld]</code> файла
<code>my.cnf</code>, где Вы определяете параметры сервера. Например:
<pre>
[mysqld]
user=mysql
</pre>

Это заставляет сервер запускаться как назначенный пользователь вручную
или при использовании <a href="programs.htm#mysqld-safe"><span><strong>
mysqld_safe</strong></span></a> или <a href="programs.htm#mysql-server">
<span><strong>mysql.server</strong></span></a>. См.
<a href="#changing-mysql-user">раздел 7.1.5</a>.</p>

<p>Выполнение <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> как пользователь Unix не <code>root</code>
не означает, что Вы должны изменить имя <code>root</code> в таблице
<code>user</code>. <span><em>Имена пользователей для учетных записей MySQL не
имеют никакого отношения к именам пользователей для учетных записей Unix</em>
</span>.</li>

<li>Не предоставляйте привилегию <a href="#priv_file"><code>FILE
</code></a> неадминистративным пользователям. Любой пользователь, у которого
есть эта привилегия, может написать файл где угодно в файловой системе с
привилегиями <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>. Это включает каталог данных сервера, содержащий файлы, которые
осуществляют таблицы привилегии. Чтобы сделать привилегию
<a href="#priv_file"><code>FILE</code></a> безопасней,
файлы, произведенные <a href="sql.htm#select-into"><code>SELECT ... INTO
OUTFILE</code></a> не перезаписывают существующие
файлы и перезаписываемы всеми.</p>

<p><a href="#priv_file"><code>FILE</code></a> может также
использоваться, чтобы считать любой файл, который доступен для пользователя
Unix, от которого сервер выполняется. С этой привилегией Вы можете считать
любой файл в таблицу базы данных. Этим можно было злоупотребить, например,
при использовании <a href="sql.htm#load-data"><code>LOAD DATA</code></a> для
чтения в таблицу <code>/etc/passwd</code>, которая тогда может быть выведена
на экран с <a href="sql.htm#select"><code>SELECT</code></a>.</p>

<p>Ограничить местоположение, в котором файлы могут быть считаны и написаны
можно, установив <a href="server.htm#sysvar_secure_file_priv"><code>
secure_file_priv</code></a> к определенному каталогу. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</li>

<li>Не предоставляйте привилегии
<a href="#priv_process"><code>PROCESS</code></a> или
<a href="#priv_super"><code>SUPER</code></a> неадминистративным
пользователям. Вывод <a href="programs.htm#mysqladmin"><span><strong>
mysqladmin processlist</strong></span></a> и
<a href="sql.htm#show-processlist"><code>SHOW PROCESSLIST</code></a>
показывает текст любых запросов, в настоящее время выполняемых, таким
образом, любой пользователь, которому разрешают видеть список процесса
сервера, мог быть в состоянии видеть запросы, сделанные другими
пользователями, например, <code>UPDATE user SET
password=PASSWORD('not_secure')</code>.</p>

<p><a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
резервирует дополнительное соединение для пользователей, которые имеют
привилегию <a href="#priv_super"><code>SUPER</code></a>,
так, чтобы MySQL-пользователь <code>root</code> мог войти в систему и
проверить деятельность сервера, даже если уже используются
все нормальные соединения.</p>

<p>Привилегия <a href="#priv_super"><code>SUPER</code></a>
может использоваться, чтобы закончить соединения клиента,
изменить значения системных переменных и управлять репликацией.</li>

<li>Не разрешайте использование символьных ссылок на таблицы.
Эта способность может быть отключена опцией
<a href="server.htm#option_mysqld_symbolic-links"><code>--skip-symbolic-links
</code></a>. Это особенно важно, если Вы выполняете
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> как
<code>root</code>, потому что любой, кто имеет доступ на запись
к каталогу данных сервера может удалить любой файл в системе! См.
<a href="optimiz.htm#symbolic-links-to-tables">раздел 9.12.2.2</a>.</li>

<li>Сохраненные программы и представления должны быть написаны, используя
направляющие линии безопасности, обсужденные в
<a href="stored.htm#stored-programs-security">разделе 21.6</a>.</li>

<li>Если Вы не доверяете своему DNS, Вы должны использовать IP-адреса, а не
имена хоста в таблицах доступа. В любом случае Вы должны быть очень
осторожными относительно создания записей таблицы доступа, используя значение
имени хоста, которое содержит подстановочные знаки.</li>

<li>Если Вы хотите ограничить число соединений, разрешенных
единственной учетной записи, Вы можете сделать так, устанавливая
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> в <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>. <a href="sql.htm#grant"><code>GRANT</code></a> также
поддерживает опции управления ресурсом для того, чтобы ограничить степень
использования сервера, разрешенного учетной записи. См.
<a href="sql.htm#grant">раздел 14.7.1.6</a>.</li>

<li>Если каталог плагинов перезаписываем сервером, для пользователя может
быть возможно написать выполнимый код в файл в каталоге, используя
<a href="sql.htm#select"><code>SELECT ... INTO DUMPFILE</code></a>.
Это может быть предотвращено, делая
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>
только для чтения сервером или устанавливая
<a href="server.htm#option_mysqld_secure-file-priv"><code>
--secure-file-priv</code></a> к каталогу, где запись из
<a href="sql.htm#select"><code>SELECT</code></a>
может быть сделана безопасно.</p></li></ul>

<h3><a name="security-options"></a>7.1.4.
Связанные с безопасностью опции и переменные mysqld</h3>
<p>Следующая таблица показывает опции и системные переменные
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>,
которые затрагивают безопасность. Для описаний каждой из них см. разделы
<a href="server.htm#server-options">6.1.4</a> и
<a href="server.htm#server-system-variables">6.1.5</a>.</p>

<a name="idm139965379690096"></a><p><b>Таблица 7.1.
Резюме опций и переменных безопасности</b></p>
<table border="1">
<thead><tr><th scope="col">Имя</th><th scope="col">Командная строка</th>
<th scope="col">Файл опций</th><th scope="col">Системная?</th>
<th scope="col">Статусная?</th><th scope="col">Область действия</th>
<th scope="col">Динамическая?</th></tr></thead>
<tbody><tr><td scope="row">
<a href="server.htm#option_mysqld_allow-suspicious-udfs">
allow-suspicious-udfs</a></td><td>Да</td><td>Да</td><td> </td><td> </td>
<td> </td><td> </td></tr>
<tr><td scope="row"><a href="server.htm#sysvar_automatic_sp_privileges">
automatic_sp_privileges</a></td><td> </td><td> </td><td>Да</td><td> </td>
<td>Глобальная</td><td>Да</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_chroot">chroot</a></td>
<td>Да</td><td>Да</td><td> </td><td> </td><td> </td><td> </td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_des-key-file">
des-key-file</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td> </td>
<td> </td></tr>
<tr><td scope="row"><a href="server.htm#sysvar_local_infile">local_infile
</a></td><td> </td><td> </td><td>Да</td><td> </td><td>Глобальная</td><td>Да
</td></tr>
<tr><td scope="row"><a href="server.htm#sysvar_old_passwords">old_passwords
</a></td><td> </td><td> </td><td>Да</td><td> </td><td>Both</td>
<td>Да</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_safe-user-create">
safe-user-create</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td> </td>
<td> </td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_secure-auth">
secure-auth</a></td><td>Да</td><td>Да</td><td> </td><td> </td>
<td>Глобальная</td><td>Да</td></tr>
<tr><td scope="row"> - <span><em>Переменная</em></span>:
<a href="server.htm#sysvar_secure_auth">secure_auth</a></td><td> </td><td>
</td><td>Да</td><td> </td><td>Глобальная</td><td>Да</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_secure-file-priv">
secure-file-priv</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td>
Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"> - <span><em>Переменная</em></span>:
<a href="server.htm#sysvar_secure_file_priv">secure_file_priv</a></td><td>
</td><td> </td><td>Да</td><td> </td><td>Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_skip-grant-tables">
skip-grant-tables</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td>
</td><td> </td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_skip-name-resolve">
skip-name-resolve</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td>
Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"> - <span><em>Переменная</em></span>:
<a href="server.htm#sysvar_skip_name_resolve">skip_name_resolve</a></td>
<td> </td><td> </td><td>Да</td><td> </td><td>Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_skip-networking">
skip-networking</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td>
Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"> - <span><em>Переменная</em></span>:
<a href="server.htm#sysvar_skip_networking">skip_networking</a></td><td>
</td><td> </td><td>Да</td><td> </td><td>Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"><a href="server.htm#option_mysqld_skip-show-database">
skip-show-database</a></td><td>Да</td><td>Да</td><td> </td><td> </td><td>
Глобальная</td><td>Нет</td></tr>
<tr><td scope="row"> - <span><em>Переменная</em></span>:
<a href="server.htm#sysvar_skip_show_database">skip_show_database</a></td>
<td> </td><td> </td><td>Да</td><td> </td><td>Глобальная</td><td>Нет</td></tr>
</tbody></table>

<h3><a name="changing-mysql-user"></a>7.1.5.
Как выполнить MySQL как нормальный пользователь</h3>
<p>В Windows Вы можете выполнить сервер как службу Windows, используя
нормальную учетную запись пользователя.</p>

<p>В Linux для установок, выполненных, используя репозитарий MySQL или пакеты
RPM, <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
должен быть запущен местным пользователем <code>mysql</code>.
Запуск другим пользователем операционной системы не поддержан скриптами init,
которые включены как часть репозитариев MySQL.</p>

<p>В Unix (или Linux для установок, выполненных, используя
<code>tar.gz</code>), <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> может быть запущен и выполнен любым пользователем.
Однако, Вы должны избежать выполнять сервер как Unix-пользователь
<code>root</code> из соображений безопасности. Чтобы запускать
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
как нормальный непривилегированный пользователь Unix
<em><code>user_name</code></em>, Вы должны сделать следующее:</p>

<ol type="1"><li><p>Остановите сервер, если он работает (используйте
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin shutdown</strong>
</span></a>).</li>

<li>Измените каталоги базы данных и файлы так, чтобы
<em><code>user_name</code></em> имел привилегии читать и писать файлы в них
(Вы, возможно, должны были бы сделать это как
Unix-пользователь <code>root</code>):
<pre>
shell&gt; chown -R <em><code>user_name</code></em> <em><code>/path/to/mysql/datadir</code></em>
</pre>

Если Вы не сделаете этого, то сервер не будет в состоянии получить доступ к
базам данных или таблицам, когда он будет работать как
<em><code>user_name</code></em>.</p>

<p>Если каталоги или файлы в пределах каталога данных MySQL это
символические ссылки, <code>chown -R</code> не мог бы следовать за
символическими ссылками. Вы должны будете следовать за теми ссылками и
изменить каталоги и файлы, на которые они указывают.</li>

<li>Запустите сервер как пользователь <em><code>user_name</code></em>.
Другая альтернатива должна запустить <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> как Unix <code>root</code> и
и использовать опцию <a href="server.htm#option_mysqld_user"><code>
--user=<em><code>user_name</code></em></code></a>.
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
запускается, затем переключается, чтобы работать как пользователь Unix
<em><code>user_name</code></em> прежде, чем принять любые соединения.</li>

<li>Чтобы запустить сервер как данного пользователя автоматически в системное
время запуска, определите имя пользователя, добавляя опцию <code>user</code>
в группу <code>[mysqld]</code> файла <code>/etc/my.cnf</code> или
<code>my.cnf</code> в каталоге данных сервера. Например:
<pre>
[mysqld]
user=<em><code>user_name</code></em>
</pre></li></ol>

<p>Если Ваша машина Unix не безопасна, Вы должны назначить пароль на учетную
запись MySQL <code>root</code> в таблицах привилегий. Иначе любой
пользователь с учетной записью на этой машине может выполнить
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a> с
<a href="programs.htm#option_mysql_user"><code>--user=root</code></a>
и выполнить любую работу. Хорошая идея назначить пароли на учетные записи
MySQL в любом случае, но особенно когда другие учетные записи существуют на
узле сервера. См. <a href="install.htm#default-privileges">раздел 2.9.4</a>.
</p>

<h3><a name="load-data-local"></a>7.1.6. Вопросы безопасности с
LOAD DATA LOCAL</h3>
<p><a href="sql.htm#load-data"><code>LOAD DATA</code></a> может загрузить
файл, который расположен на узле сервера, или это может загрузить файл,
который расположен на хосте клиента, когда указано <code>LOCAL</code>.</p>

<p>Есть два потенциальных вопроса безопасности с поддержкой
<code>LOCAL</code> для <a href="sql.htm#load-data"><code>LOAD DATA</code></a>:
</p>
<ul><li><p>Передача файла от хоста клиента до узла сервера начата сервером
MySQL. В теории исправленный сервер мог быть создан, который скажет программе
клиента передавать файл по выбору сервера, а не файл, названный клиентом в
<a href="sql.htm#load-data"><code>LOAD DATA</code></a>.
Такой сервер мог бы получить доступ к любому файлу на хосте клиента, к
которому пользователь клиента имеет доступ на чтение.</li>

<li>В Веб-окружающей среде, где клиенты соединяются от веб-сервера,
пользователь мог бы использовать
<a href="sql.htm#load-data"><code>LOAD DATA LOCAL</code></a>, чтобы
читать любые файлы, к которым процесс веб-сервера имеет доступ (предполагая,
что пользователь может выполнить любую команду SQL-сервера).
В этой окружающей среде клиент относительно сервера MySQL фактически
веб-сервер, а не отдаленная программа, выполняемая пользователем, который
соединяется с веб-сервером.</p></li></ul>

<p>Чтобы урегулировать эти проблемы, <a href="sql.htm#load-data"><code>
LOAD DATA LOCAL</code></a> работает так:</p>
<ul><li><p>По умолчанию все клиенты MySQL и библиотеки в двоичных
дистрибутивах собраны с опцией
<a href="install.htm#option_cmake_enabled_local_infile"><code>
-DENABLED_LOCAL_INFILE=1</code></a>.</li>

<li>Если Вы создаете MySQL из исходных текстов, но не вызываете
<span><strong>CMake</strong></span> с
<a href="install.htm#option_cmake_enabled_local_infile"><code>
-DENABLED_LOCAL_INFILE=1</code></a>,
<a href="sql.htm#load-data"><code>LOAD DATA LOCAL</code></a>
не может использоваться никаким клиентом, если это не написано явно,
чтобы вызвать <a href="connect.htm#mysql-options"><code>
mysql_options(...MYSQL_OPT_LOCAL_INFILE, 0)</code></a>. См.
<a href="connect.htm#mysql-options">раздел 25.8.7.50</a>.</li>

<li>Вы можете отключить все запросы
<a href="sql.htm#load-data"><code>LOAD DATA LOCAL</code></a> на сервере,
запуская <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> с опцией <a href="server.htm#sysvar_local_infile"><code>--local-infile=0
</code></a>.</li>

<li>Для <a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
включить <a href="sql.htm#load-data"><code>LOAD DATA LOCAL</code></a> можно
указанием <a href="programs.htm#option_mysql_local-infile"><code>
--local-infile[=1]</code></a> или выключить через
<a href="programs.htm#option_mysql_local-infile"><code>--local-infile=0
</code></a>. Для <a href="programs.htm#mysqlimport"><span><strong>mysqlimport
</strong></span></a> местная загрузка файла с данными выключена по умолчанию,
включите это через <a href="programs.htm#option_mysqlimport_local"><code>
--local</code></a> или <code>-L</code>. В любом случае успешное использование
местной работы загрузки требует, чтобы сервер разрешил это.</li>

<li>Если Вы используете <a href="sql.htm#load-data"><code>LOAD DATA LOCAL
</code></a> в скриптах Perl или других программах, которые читают группу
<code>[client]</code> файлов опций, Вы можете добавить опцию
<code>local-infile=1</code>. Однако, чтобы препятствовать этому вызывать
проблемы для программ, которые не понимают <code>local-infile</code>,
определите это, используя префикс <code>loose-</code>:
<pre>
[client]
loose-local-infile=1
</pre></li>

<li>Если <a href="sql.htm#load-data"><code>LOAD DATA LOCAL</code></a>
выключен в сервере или в клиенте, клиент, который пытается сделать такой
запрос, получает следующее сообщение об ошибке:
<pre>
ERROR 1148: The used command is not allowed with this MySQL version
</pre></li></ul>

<h3><a name="secure-client-programming"></a>7.1.7.
Направляющие линии безопасности программирования клиента</h3>
<p>Приложения с доступом к MySQL не должны доверять никаким данным,
вводимым пользователями, которые могут попытаться обмануть Ваш код вводом
спецсимволы в Web-формы, URL или безотносительно приложения, которое Вы
создали. Убедитесь, что Ваше приложение остается безопасным, если
пользователь вводит что-то вроде <code>; DROP DATABASE mysql;</code>.
Это экстремальный пример, но большие утечки безопасности и потеря данных
могли бы произойти в результате действий хакеров, использующих подобные
методы, если Вы не готовитесь к ним.</p>

<p>Частая ошибка состоит в том, чтобы защитить только строковые значения
данных. Не забудьте проверять числовые данные также. Если приложение
производит такой запрос, как <code>SELECT * FROM table WHERE ID=234</code>,
когда пользователь вводит значение <code>234</code>,
пользователь может ввести значение <code>234 OR 1=1</code>, чтобы заставить
приложение производить запрос <code>SELECT * FROM table WHERE ID=234 OR 1=1
</code>. В результате сервер получает каждую строку в таблице. Это выставляет
каждую строку и вызывает чрезмерную загрузку сервера. Самый простой способ
защититься от этого типа нападения состоит в том, чтобы использовать
единственные кавычки вокруг числовых констант:
<code>SELECT * FROM table WHERE ID='234'</code>.
Если пользователь вводит дополнительную информацию, все это становится частью
строки. В числовом контексте MySQL автоматически преобразовывает эту строку в
число и откусывает любые нечисловые символы от нее.</p>

<p>Иногда люди думают, что, если база данных содержит только публично
доступные данные, она не должна быть защищена. Это является неправильным.
Даже если допустимо вывести на экран какую-либо строку в базе данных, Вы
должны все еще защититься от атак denial of service (например, те, которые
основаны на методе в предыдущем параграфе, который заставляет сервер тратить
впустую ресурсы). Иначе Ваш сервер становится
безразличным к законным пользователям.</p>

<ul><li><p>Позвольте строгому режиму SQL сказать серверу быть более
рестриктивным, в плане значений данных, которые это принимает. См.
<a href="server.htm#sql-mode">раздел 6.1.8</a>.</li>

<li>Попытайтесь ввести единственные и двойные кавычки
(<code>'</code> и <code>"</code>) во всех Ваших Веб-формах. Если Вы получаете
какой-либо вид ошибки MySQL, исследуйте проблему сразу же.</li>

<li>Попытайтесь изменить динамические URL, добавляя <code>%22</code>
(<code>"</code>), <code>%23</code> (<code>#</code>) и <code>%27</code>
(<code>'</code>).</li>

<li>Попытайтесь изменить типы данных в динамических URL от числового до
символьных типов, используя символы, показанные в предыдущих примерах.
Ваше приложение должно быть безопасным против этих и подобных нападений.</li>

<li>Попытайтесь ввести символы, пробелы и специальные символы, а не числа в
числовых областях. Ваше приложение должно удалить их прежде, чем передать к
MySQL или иначе произвести ошибку. Прохождение любых значений к
MySQL очень опасно!</li>

<li>Проверьте размер данных прежде, чем передать это MySQL.</li>
<li>Не давайте Вашим приложениям привилегии доступа, в которых
они не нуждаются.</p></li></ul>

<p>Много интерфейсов прикладного программирования обеспечивают средство
выхода из специальных символов в значениях данных. Должным образом
используемое, это препятствует тому, чтобы пользователи приложения ввели
значения, которые заставляют приложение производить запросы,
которые имеют иной эффект, чем Вы предназначаете:</p>

<ul><li><p>MySQL C API: Примените
<a href="connect.htm#mysql-real-escape-string-quote">
<code>mysql_real_escape_string_quote()</code></a>.</li>

<li>MySQL++: Примените модификаторы <code>escape</code> и
<code>quote</code> для потоков запроса.</li>
<li>PHP: Используйте расширение <code>mysqli</code> или
<code>pdo_mysql</code>, но не старое <code>ext/mysql</code>.
Новое API имеет улучшенный протокол аутентификации MySQL и пароли, так же как
подготовленные запросы с заполнителями. См. также
<a href="../../../dev.mysql.com/doc/apis-php/en/apis-php-mysqlinfo.api.choosing.html"
target="_top">Choosing an API</a>.</p>

<p>Если более старое расширение <code>ext/mysql</code> должна использоваться
<a href="connect.htm#mysql-real-escape-string-quote">
<code>mysql_real_escape_string_quote()</code></a> для того, чтобы
экранировать символы, но но <a href="connect.htm#mysql-escape-string"><code>
mysql_escape_string()</code></a> или <code class="function">addslashes()
</code> потому, что только <a href="connect.htm#mysql-real-escape-string-quote">
<code>mysql_real_escape_string_quote()</code></a> осведомлена о наборе
символов, другие функции могут <span><span>пропускать</span></span> данные,
используя (недопустимые) многобайтовые наборы символов.</li>

<li>Perl DBI: Используйте заполнители или метод <code>quote()</code>.</li>
<li>Ruby DBI: Используйте заполнители или метод <code>quote()</code>.</li>
<li>Java JDBC: Используйте заполнители и объект
<code>PreparedStatement</code>.</p></li></ul>
<p>У других программных интерфейсов могли бы быть подобные способности.</p>

<h2><a name="privilege-system"></a>7.2.
Система привилегий доступа MySQL</h2>
<p>Первичная функция системы привилегии MySQL должна подтвердить подлинность
пользователя, который соединяется от данного узла и связать этого
пользователя с такими привилегиями на базе данных, как
<a href="sql.htm#select"><code>SELECT</code></a>,
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> и
<a href="sql.htm#delete"><code>DELETE</code></a>.
Дополнительная функциональность включает способность иметь анонимных
пользователей и предоставить привилегии для MySQL-определенных функций
типа <a href="sql.htm#load-data"><code>LOAD DATA
INFILE</code></a> и административной деятельности.</p>

<p>Есть некоторые вещи, которые Вы не можете сделать с
системой привилегии MySQL:</p>
<ul><li><p>Вы не можете явно определить, что данный пользователь должен быть
лишен доступа. Таким образом, Вы не можете явно соответствовать пользователю
и затем отказаться от соединения.</li>

<li>Вы не можете определить, что у пользователя есть привилегии создать или
удалить таблицы в базе данных, но не создать или удалить
базу данных непосредственно.</li>

<li>Пароль применяется глобально к учетной записи. Вы не можете связать
пароль с конкретной целью, такой как база данных, таблица или подпрограмма.
</p></li></ul>

<p>Пользовательский интерфейс к системе привилегии MySQL состоит из
запросов SQL <a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a>. См.
<a href="sql.htm#account-management-sql">раздел 14.7.1</a>.</p>

<p>Внутренне сервер хранит информацию привилегии в таблицах в базе данных
<code>mysql</code>. MySQL читает содержание этих таблиц в память, когда это
запускает и принимает решения контроля доступа о копиях в памяти таблиц.</p>

<p>Система привилегии MySQL гарантирует, что все пользователи могут выполнить
только операции, разрешенные им. Как пользователь, когда Вы соединяетесь с
сервером MySQL, Ваша личность определена <span><em>узлом, от которого Вы
соединяетесь</em></span> и <span><em>именем пользователя, которое Вы
определяете</em></span>. Когда Вы выпускаете запросы после того, как
соединение установлено, система предоставляет привилегии, согласно Вашей
личности и <span><em>что Вы хотите сделать</em></span>.</p>

<p>MySQL рассматривает Ваше имя хоста и имя пользователя в идентификации,
потому что нет никакой причины предположить, что данное имя пользователя
принадлежит тому же самому человеку на всех узлах. Например, пользователь
<code>joe</code> с <code>office.example.com</code>
не должен быть тем же самым человеком, как пользователь
<code>joe</code> с <code>home.example.com</code>. MySQL
обрабатывает это, позволяя Вам отличить пользователей на различных узлах, у
которых есть то же самое имя: Вы можете предоставить один набор привилегий
для соединений <code>joe</code> с <code>office.example.com</code> и другой
для <code>joe</code> с <code>home.example.com</code>. Для просмотра
привилегий учетной записи используйте <a href="sql.htm#show-grants"><code>
SHOW GRANTS</code></a>. Например:
<pre>
SHOW GRANTS FOR 'joe'@'office.example.com';
SHOW GRANTS FOR 'joe'@'home.example.com';
</pre>
Управление доступом MySQL вовлекает два этапа, когда Вы выполняете
программу клиента, которая соединяется с сервером:</p>

<p><span><strong>Шаг 1:</strong></span> сервер принимает или отклоняет
соединение, основываясь на Вашей личности и том, может ли проверить Вашу
личность, поставляя правильный пароль.</p>

<p><span><strong>Шаг 2:</strong></span> Предположив, что Вы можете
соединиться, сервер проверяет каждый запрос, который Вы делаете, чтобы
определить, есть ли у Вас достаточные привилегии, чтобы выполнить это.
Например, если Вы пытаетесь выбрать строки из таблицы в базе данных или
исключить таблицу из базы данных, сервер проверяет, что Вы имеете
привилегию <a href="#priv_select"><code>SELECT</code></a>
для таблицы или <a href="#priv_drop"><code>DROP</code></a>
для базы данных.</p>

<p>См. разделы <a href="#connection-access">7.2.5</a> и
<a href="#request-access">7.2.6</a>.</p>
<p>Если Ваши привилегии изменены в то время, как Вы соединены, те изменения
не обязательно немедленно вступают в силу для следующего запроса. Для деталей
об условиях, при которых сервер перезагружает таблицы привилегий, см.
<a href="#privilege-changes">раздел 7.2.7</a>.</p>

<h3><a name="privileges-provided"></a>7.2.1. Привилегии, обеспеченные MySQL
</h3>
<p>MySQL обеспечивает привилегии, которые применяются в различных контекстах
и на разных уровнях работы:</p>

<ul><li><p>Административные привилегии позволяют пользователям управлять
работой сервера MySQL. Эти привилегии глобальны, потому что они не являются
определенными для особой базы данных.</li>

<li>Привилегии базы данных относятся к базе данных и всем объектам в ее
пределах. Эти привилегии можно предоставить для определенных баз данных или
глобально так, чтобы они относились ко всем базам данных.</li>

<li>Привилегии для объектов базы данных, таких как таблицы, индексы,
представления и сохраненные подпрограммы можно предоставить для конкретных
целей в пределах базы данных, для всех объектов данного типа в пределах базы
данных (например, все таблицы в базе данных) или глобально для всех объектов
данного типа во всех базах данных.</p></li></ul>

<p>Информация о привилегиях учетной записи хранится в таблицах
<code>user</code>, <code>db</code>, <code>tables_priv</code>,
<code>columns_priv</code> и <code>procs_priv</code> базы данных
<code>mysql</code> (см. <a href="#grant-tables">раздел 7.2.2</a>).
Сервер MySQL читает содержание этих таблиц в память, когда это запускается и
перезагружает их при обстоятельствах, рассмотренных в
<a href="#privilege-changes">разделе 7.2.7</a>.
Решения контроля доступа основаны на копиях в памяти таблиц привилегий.</p>

<p>Некоторые выпуски MySQL вводят изменения структуры таблиц, чтобы добавить
новые привилегии или особенности. Чтобы удостовериться, что Вы можете
использовать в своих интересах любые новые способности, обновите свои таблицы
привилегий, чтобы иметь текущую структуру всякий раз, когда Вы обновляетесь к
новой версии MySQL. См. <a href="programs.htm#mysql-upgrade">раздел 5.4.5
</a>.</p>

<p>Следующая таблица показывает имена привилегий, используемые на уровне SQL
в <a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a>,
наряду с именем столбца, связанным с каждой привилегией в таблицах
и контекстом, в котором применяется привилегия.</p>

<p><b>Таблица 7.2. Допустимые привилегии для GRANT и REVOKE</b></p>
<table border="1">
<thead><tr><th scope="col">Привилегия</th><th scope="col">Столбец</th>
<th scope="col">Контекст</th></tr></thead>
<tbody><tr><td scope="row"><a href="#priv_create"><code>CREATE
</code></a></td><td><code>Create_priv</code></td>
<td>Базы данных, таблицы или индексы</td></tr>
<tr><td scope="row"><a href="#priv_drop"><code>DROP</code></a>
</td><td><code>Drop_priv</code></td>
<td>Базы данных, таблицы или представления</td></tr>
<tr><td scope="row"><a href="#priv_grant-option"><code>
GRANT OPTION</code></a></td><td><code>Grant_priv</code></td><td>
Базы данных, таблицы или подпрограммы</td></tr>
<tr><td scope="row"><a href="#priv_lock-tables"><code>
LOCK TABLES</code></a></td><td><code>Lock_tables_priv</code></td>
<td>Базы данных</td></tr>
<tr><td scope="row"><a href="#priv_references"><code>REFERENCES
</code></a></td><td><code>References_priv</code></td>
<td>Базы данных или таблицы</td></tr>
<tr><td scope="row"><a href="#priv_event"><code>EVENT</code></a>
</td><td><code>Event_priv</code></td><td>Базы данных</td></tr>
<tr><td scope="row"><a href="#priv_alter"><code>ALTER</code></a>
</td><td><code>Alter_priv</code></td><td>Таблицы</td></tr>
<tr><td scope="row"><a href="#priv_delete"><code>DELETE</code>
</a></td><td><code>Delete_priv</code></td><td>Таблицы</td></tr>
<tr><td scope="row"><a href="#priv_index"><code>INDEX</code></a>
</td><td><code>Index_priv</code></td><td>Таблицы</td></tr>
<tr><td scope="row"><a href="#priv_insert"><code>INSERT</code>
</a></td><td><code>Insert_priv</code></td><td>Таблицы или столбцы</td></tr>
<tr><td scope="row"><a href="#priv_select"><code>SELECT</code>
</a></td><td><code>Select_priv</code></td><td>Таблицы или столбцы</td></tr>
<tr><td scope="row"><a href="#priv_update"><code>UPDATE</code>
</a></td><td><code>Update_priv</code></td><td>Таблицы или столбцы</td></tr>
<tr><td scope="row"><a href="#priv_create-temporary-tables">
<code>CREATE TEMPORARY TABLES</code></a></td><td><code>Create_tmp_table_priv
</code></td><td>Таблицы</td></tr>
<tr><td scope="row"><a href="#priv_trigger"><code>TRIGGER</code>
</a></td><td><code>Trigger_priv</code></td><td>Таблицы</td></tr>
<tr><td scope="row"><a href="#priv_create-view"><code>CREATE
VIEW</code></a></td><td><code>Create_view_priv</code></td><td>Представления
</td></tr>
<tr><td scope="row"><a href="#priv_show-view"><code>SHOW VIEW
</code></a></td><td><code>Show_view_priv</code></td><td>Представления</td>
</tr>
<tr><td scope="row"><a href="#priv_alter-routine"><code>ALTER
ROUTINE</code></a></td><td><code>Alter_routine_priv</code></td><td>
Подпрограммы</td></tr>
<tr><td scope="row"><a href="#priv_create-routine"><code>CREATE
ROUTINE</code></a></td><td><code>Create_routine_priv</code></td><td>
Подпрограммы</td></tr>
<tr><td scope="row"><a href="#priv_execute"><code>EXECUTE</code>
</a></td><td><code>Execute_priv</code></td><td>Подпрограммы</td></tr>
<tr><td scope="row"><a href="#priv_file"><code>FILE</code></a>
</td><td><code>File_priv</code></td><td>Доступ к файлам на сервере</td></tr>
<tr><td scope="row"><a href="#priv_create-tablespace"><code>
CREATE TABLESPACE</code></a></td><td><code>Create_tablespace_priv</code></td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_create-user"><code>CREATE
USER</code></a></td><td><code>Create_user_priv</code></td><td>
Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_create-role"><code>CREATE
ROLE</code></a></td><td><code>Create_role_priv</code></td><td>
Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_drop-role"><code>DROP ROLE
</code></a></td><td><code>Drop_role_priv</code></td><td>
Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_process"><code>PROCESS</code>
</a></td><td><code>Process_priv</code></td><td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_proxy"><code>PROXY</code></a>
</td><td>См. <code>proxies_priv</code> table</td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_reload"><code>RELOAD</code>
</a></td><td><code>Reload_priv</code></td><td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_replication-client"><code>
REPLICATION CLIENT</code></a></td><td><code>Repl_client_priv</code></td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_replication-slave"><code>
REPLICATION SLAVE</code></a></td><td><code>Repl_slave_priv</code></td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_show-databases"><code>SHOW
DATABASES</code></a></td><td><code>Show_db_priv</code></td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_shutdown"><code>SHUTDOWN
</code></a></td><td><code>Shutdown_priv</code></td>
<td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_super"><code>SUPER</code></a>
</td><td><code>Super_priv</code></td><td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_all"><code>ALL [PRIVILEGES]
</code></a></td><td> </td><td>Администрирование</td></tr>
<tr><td scope="row"><a href="#priv_usage"><code>USAGE</code></a>
</td><td> </td><td>Администрирование</td></tr></tbody></table>

<p>Следующий список обеспечивает общее описание каждой привилегии, доступной
в MySQL. У особых запросов SQL могут быть более определенные требования
привилегии, чем обозначено здесь. Если так, описание для рассматриваемого
запроса обеспечивает детали.</p>

<ul><li><p><a name="priv_all"></a><a href="#priv_all"><code>ALL
</code></a> или <a href="#priv_all"><code>ALL PRIVILEGES</code>
</a> означает <span><span>все привилегии, доступные в данном уровне
привилегии</span></span> (кроме <a href="#priv_grant-option">
<code>GRANT OPTION</code></a>). Например, предоставление
<a href="#priv_all"><code>ALL</code></a>
в глобальном или табличном уровне предоставляет все глобальные привилегии или
все привилегии на уровне таблицы.</li>

<li><a name="priv_alter"></a><a href="#priv_alter"><code>ALTER
</code></a> включает использование
<a href="sql.htm#alter-table"><code>ALTER TABLE</code></a>, чтобы
изменить структуру таблиц. <a href="sql.htm#alter-table"><code>ALTER
TABLE</code></a> также требует
<a href="#priv_create"><code>CREATE</code></a> и
<a href="#priv_insert"><code>INSERT</code></a>.
Переименование таблицы требует <a href="#priv_alter"><code>ALTER
</code></a> и <a href="#priv_drop"><code>DROP</code></a>
на старой таблице, <a href="#priv_create"><code>CREATE</code></a>
и <a href="#priv_insert"><code>INSERT</code></a> на новой.</li>

<li><a name="priv_alter-routine"></a>
<a href="#priv_alter-routine"><code>ALTER ROUTINE</code></a>
необходима, чтобы изменить или удалить
сохраненные подпрограммы (процедуры и функции).</li>

<li><a name="priv_create"></a><a href="#priv_create"><code>CREATE
</code></a> включает создание новых баз данных и таблиц.</li>
<li><a name="priv_create-role"></a><a href="#priv_create-role">
<code>CREATE ROLE</code></a> включает использование
<a href="sql.htm#create-role"><code>CREATE ROLE</code></a>.
<a href="#priv_create-user"><code>CREATE USER</code></a>
также включает использование <a href="sql.htm#create-role"><code>CREATE
ROLE</code></a>.</li>

<li><a name="priv_create-routine"></a>
<a href="#priv_create-routine"><code>CREATE ROUTINE</code></a>
необходима, чтобы создать сохраненные подпрограммы (процедуры и функции).
</li>

<li><a name="priv_create-tablespace"></a>
<a href="#priv_create-tablespace"><code>CREATE TABLESPACE</code>
</a> необходима, чтобы создать, изменить или удалить группы файла системного
журнала и табличные пространства.</li>

<li><a name="priv_create-temporary-tables"></a>
<a href="#priv_create-temporary-tables"><code>CREATE TEMPORARY
TABLES</code></a> включает создание временных таблиц, используя
<a href="sql.htm#create-table"><code>CREATE TEMPORARY TABLE</code></a>.</p>

<p>После того, как сеанс составил временную таблицу,
никакая дальнейшая привилегия не проверяется для таблицы.
Сеанс создания может выполнить любую работу на таблице, например,
as <a href="sql.htm#drop-table"><code>DROP TABLE</code></a>,
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#select"><code>SELECT</code></a>.</p>

<p>Одно значение этого поведения: сеанс может управлять своими временными
таблицами, даже если у текущего пользователя нет никакой привилегии создать
их. Предположите, что текущий пользователь не имеет
<a href="#priv_create-temporary-tables"><code>CREATE TEMPORARY
TABLES</code></a>, но в состоянии выполнить хранимую процедуру контекста
<code>DEFINER</code>, которая выполняется с привилегиями пользователя,
который действительно имеет привилегию
<a href="#priv_create-temporary-tables"><code>CREATE TEMPORARY
TABLES</code></a>, и это составляет временную таблицу. В то время, как
процедура выполняется, сеанс использует привилегии пользователя определения.
После окончания процедуры эффективные привилегии возвращаются к таковым для
текущего пользователя, который может все еще видеть временную таблицу и
выполнить любую работу на ней.</p>

<p>Чтобы сохранить привилегии для временных и невременных таблиц отдельными,
общее обходное решение для этой ситуации должно создать базу данных,
посвященную использованию временных таблиц. Тогда для той базы данных
пользователю можно предоставить
<a href="#priv_create-temporary-tables"><code>CREATE TEMPORARY
TABLES</code></a> наряду с любыми другими привилегиями, требуемыми для
временных табличных операций, сделанных тем пользователем.</li>

<li><a name="priv_create-user"></a>
<a href="#priv_create-user"><code>CREATE USER</code></a>
разрешает использовать <a href="sql.htm#alter-user"><code>ALTER USER</code>
</a>, <a href="sql.htm#create-role"><code>CREATE ROLE</code></a>,
<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#drop-role"><code>DROP ROLE</code></a>,
<a href="sql.htm#drop-user"><code>DROP USER</code></a>,
<a href="sql.htm#rename-user"><code>RENAME USER</code></a> и
<a href="sql.htm#revoke"><code>REVOKE ALL PRIVILEGES</code></a>.</li>

<li><a name="priv_create-view"></a>
<a href="#priv_create-view"><code>CREATE VIEW</code></a>
включает использование <a href="sql.htm#create-view"><code>CREATE VIEW</code>
</a>.</li>

<li><a name="priv_delete"></a>
<a href="#priv_delete"><code>DELETE</code></a>
позволяет строкам быть удаленными из таблиц в базе данных.</li>

<li><a name="priv_drop"></a><a href="#priv_drop"><code>DROP
</code></a> включает удаление существующих баз данных, таблиц и
представлений. <a href="#priv_drop"><code>DROP</code></a>
требуется, чтобы использовать запрос <code>ALTER TABLE ... DROP PARTITION
</code> на разделенной таблице. <a href="#priv_drop"><code>DROP
</code></a> также требуется для
<a href="sql.htm#truncate-table"><code>TRUNCATE TABLE</code></a>.
<span><em>Если Вы предоставляете <a href="#priv_drop"><code>DROP
</code></a> для базы данных <code>mysql</code>, пользователь может удалить
базу данных, в которой сохранены привилегии доступа MySQL.</em></span></li>

<li><a name="priv_drop-role"></a><a href="#priv_drop-role"><code>
DROP ROLE</code></a> включает использование
<a href="sql.htm#drop-role"><code>DROP ROLE</code></a>.
<a href="#priv_create-user"><code>CREATE USER</code></a> также
включает использование <a href="sql.htm#drop-role"><code>DROP ROLE</code>
</a>.</li>

<li><a name="priv_event"></a><a href="#priv_event"><code>EVENT
</code></a> разрешает создавать, изменять, удалять или видеть события
для Event Scheduler.</li>

<li><a name="priv_execute"></a><a href="#priv_execute"><code>
EXECUTE</code></a> разрешает выполнять сохраненные
подпрограммы (процедуры и функции).</li>

<li><a name="priv_file"></a><a href="#priv_file"><code>FILE
</code></a> дает Вам разрешение читать и писать файлы на узле сервера,
используя <a href="sql.htm#load-data"><code>LOAD DATA INFILE</code></a> и
<a href="sql.htm#select-into"><code>SELECT ... INTO OUTFILE</code></a> и
функцию <a href="funct.htm#function_load-file"><code>LOAD_FILE()</code></a>.
Пользователь, который имеет привилегию <a href="#priv_file">
<code>FILE</code></a>, может считать любой файл на узле сервера, который
читаем сервером MySQL. Это подразумевает, что пользователь может считать
любой файл в любом каталоге базы данных, потому что сервер может получить
доступ к любому из тех файлов.
<a href="#priv_file"><code>FILE</code></a>
также позволяет пользователю создать новые файлы в любом каталоге, где сервер
MySQL имеет доступ на запись. Это включает каталог данных сервера, содержащий
файлы, которые осуществляют таблицы привилегии. Как мера по безопасности,
сервер не будет перезаписывать существующие файлы.</p>

<p>Ограничить местоположение, в котором файлы могут быть считаны и написаны
можно, установив <a href="server.htm#sysvar_secure_file_priv"><code>
secure_file_priv</code></a> к определенному каталогу. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</li>

<li><a name="priv_grant-option"></a><a href="#priv_grant-option">
<code>GRANT OPTION</code></a> позволяет Вам дать другим пользователям или
удалить от других пользователей те привилегии, которыми Вы сами обладаете.
</li>

<li><a name="priv_index"></a><a href="#priv_index"><code>INDEX
</code></a> разрешает создать или удалить индексы.
<a href="#priv_index"><code>INDEX</code></a>
относится к существующим таблицам. Если Вы имеете
<a href="#priv_create"><code>CREATE</code></a>
для таблицы, Вы можете включать индексные определения в
<a href="sql.htm#create-table"><code>CREATE TABLE</code></a>.</li>

<li><a name="priv_insert"></a><a href="#priv_insert"><code>INSERT
</code></a> позволяет строкам быть вставленными в таблицы в базе данных.
<a href="#priv_insert"><code>INSERT</code></a>
также требуется для <a href="sql.htm#analyze-table"><code>ANALYZE TABLE
</code></a>, <a href="sql.htm#optimize-table"><code>OPTIMIZE TABLE</code></a>
и <a href="sql.htm#repair-table"><code>REPAIR TABLE</code></a>.</li>

<li><a name="priv_lock-tables"></a><a href="#priv_lock-tables">
<code>LOCK TABLES</code></a> разрешает заблокировать таблицы, для которых Вы
имеете привилегию <a href="#priv_select"><code>SELECT</code></a>
с помощью <a href="sql.htm#lock-tables"><code>LOCK TABLES</code></a>.
Это включает использование блокировки, которая препятствует тому, чтобы
другие сеансы читали заблокированную таблицу.</li>

<li><a name="priv_process"></a><a href="#priv_process"><code>
PROCESS</code></a> принадлежит отображению информации о выполнении потоков в
пределах сервера (то есть, информации о запросах, выполняемых сеансами).
Привилегия включает использование
<a href="sql.htm#show-processlist"><code>SHOW PROCESSLIST</code></a> или
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin processlist
</strong></span></a>, чтобы видеть потоки, которые принадлежат другим учетным
записям, Вы можете всегда видеть свои собственные потоки.
<a href="#priv_process"><code>PROCESS</code></a> также включает
использование <a href="sql.htm#show-engine"><code>SHOW ENGINE</code></a>.
</li>

<li><a name="priv_proxy"></a><a href="#priv_proxy"><code>PROXY
</code></a> позволяет пользователю явиться олицетворением или стать известным
как другой пользователь. См.
<a href="#proxy-users">раздел 7.3.10</a>.</li>

<li><a name="priv_references"></a>Создание ограничения внешнего ключа требует
привилегии <a href="#priv_references"><code>REFERENCES</code></a>
для родительской таблицы.</li>

<li><a name="priv_reload"></a>
<a href="#priv_reload"><code>RELOAD</code></a> включает
использование <a href="sql.htm#flush"><code>FLUSH</code></a>.
Это также включает <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
</strong></span></a>, которая эквивалентна операциям
<a href="sql.htm#flush"><code>FLUSH</code></a>:
<code>flush-hosts</code>, <code>flush-logs</code>,
<code>flush-privileges</code>, <code>flush-status</code>,
<code>flush-tables</code>, <code>flush-threads</code>,
<code>refresh</code> и <code>reload</code>.</p>

<p><code>reload</code> говорит серверу перезагружать таблицы привилегий
в память. <code>flush-privileges</code> синоним для <code>reload</code>.
<code>refresh</code> закрывает и вновь открывает файлы системного журнала и
сбрасывает все таблицы. Другие команды <code>flush-<em><code>xxx</code></em>
</code> выполняют функции, подобные <code>refresh</code>, но являются более
определенными и могут быть предпочтительными в некоторых случаях. Например,
если Вы хотите сбросить только файлы системного журнала, <code>flush-logs
</code> лучший выбор, чем <code>refresh</code>.</li>

<li><a name="priv_replication-client"></a>
<a href="#priv_replication-client"><code>REPLICATION CLIENT
</code></a> включает использование
<a href="sql.htm#show-master-status"><code>SHOW MASTER STATUS</code></a>,
<a href="sql.htm#show-slave-status"><code>SHOW SLAVE STATUS</code></a> и
<a href="sql.htm#show-binary-logs"><code>SHOW BINARY LOGS</code></a>.</li>

<li><a name="priv_replication-slave"></a>
<a href="#priv_replication-slave"><code>REPLICATION SLAVE</code>
</a> нужно предоставить учетным записям, которые используются ведомыми
серверами, чтобы соединиться с текущим сервером как их ведущее устройство.
Без этой привилегии ведомое устройство не может просить обновления, которые
были сделаны к базам данных главного сервера.</li>

<li><a name="priv_select"></a><a href="#priv_select"><code>SELECT
</code></a> позволяет Вам выбрать строки из таблиц в базе данных.
Запросы <a href="sql.htm#select"><code>SELECT</code></a> требуют
привилегию <a href="#priv_select"><code>SELECT</code></a>
только если они фактически получают строки от таблицы. Некоторые
<a href="sql.htm#select"><code>SELECT</code></a> не получают доступ к
таблицам и могут быть выполнены без разрешения для любой базы данных.
Например, Вы можете использовать
<a href="sql.htm#select"><code>SELECT</code></a>
как простой калькулятор, чтобы оценить выражения, которые не делают
ссылки на таблицы:
<pre>
SELECT 1+1;
SELECT PI()*2;
</pre>

Привилегия <a href="#priv_select"><code>SELECT</code></a>
также необходима для других запросов, которые читают значения столбцов.
Например, <a href="#priv_select"><code>SELECT</code></a>
необходима для столбцов, на которые ссылаются на правой стороне
<em><code>col_name</code></em>=<em><code>expr</code></em> в
<a href="sql.htm#update"><code>UPDATE</code></a> или для столбцов, названных
в <code>WHERE</code> в <a href="sql.htm#delete"><code>DELETE</code></a> или
<a href="sql.htm#update"><code>UPDATE</code></a>.</li>

<li><a name="priv_show-databases"></a>
<a href="#priv_show-databases"><code>SHOW DATABASES</code></a>
позволяет учетной записи видеть имена базы данных с помощью запроса
<code>SHOW DATABASE</code>. Учетные записи, у которых нет этой привилегии,
видят только базы данных, для которых они имеют некоторые привилегии, и не
могут использовать запрос вообще, если сервер был запущен с опцией
<a href="server.htm#option_mysqld_skip-show-database"><code>
--skip-show-database</code></a>. Отметьте, что
<span><em>любая</em></span> глобальная привилегия это привилегия
для базы данных.</li>

<li><a name="priv_show-view"></a><a href="#priv_show-view"><code>
SHOW VIEW</code></a> включает использование
<a href="sql.htm#show-create-view"><code>SHOW CREATE VIEW</code></a>.</li>

<li><a name="priv_shutdown"></a><a href="#priv_shutdown"><code>
SHUTDOWN</code></a> включает использование
<a href="sql.htm#shutdown"><code>SHUTDOWN</code></a> и
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin shutdown</strong>
</span></a>.</li>

<li><a name="priv_super"></a><a href="#priv_super"><code>SUPER
</code></a> позволяет учетной записи использовать
<a href="sql.htm#change-master-to"><code>CHANGE MASTER TO</code></a>,
<a href="sql.htm#kill"><code>KILL</code></a> или
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin kill</strong>
</span></a>, чтобы уничтожить потоки, принадлежащие другим учетным записям
(Вы можете всегда уничтожать свои собственные потоки),
<a href="sql.htm#purge-binary-logs"><code>PURGE BINARY LOGS</code></a>,
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin debug</strong>
</span></a>, включая или отключая журналирование, выполняя обновления, даже
если включена системная переменная <a href="server.htm#sysvar_read_only">
<code>read_only</code></a>, запускать и останавливать репликацию
на ведомых серверах, указывать любую учетную запись в параметре
<code>DEFINER</code> сохраненных программ и представлений, и позволяет Вам
соединиться (однажды), даже если превышен предел соединений, которым
управляет <a href="server.htm#sysvar_max_connections"><code>max_connections
</code></a>.</p>

<p><a href="#priv_super"><code>SUPER</code></a> нужна, чтобы
производить изменения конфигурации, изменяя глобальное значение системных
переменных. Для некоторых системных переменных установка значения сеанса
также требует привилегии <a href="#priv_super"><code>SUPER</code>
</a>, если это так, это обозначено в описании переменной.</p>

<p>Чтобы создать или изменить сохраненные функции, если двоичное
журналирование включено, Вам, возможно, также понадобится
<a href="#priv_super"><code>SUPER</code></a>, как описано в
<a href="stored.htm#stored-programs-logging">разделе 21.7</a>.</li>

<li><a name="priv_trigger"></a><a href="#priv_trigger"><code>
TRIGGER</code></a> включает действия с триггерами. У Вас должна быть эта
привилегия для таблицы, чтобы создать, удалить, выполнить или вывести на
экран триггеры для этой таблицы.</p>

<p>Когда триггер активирован (пользователем, у которого есть привилегии
выполнить <a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a> для таблицы, связанной с
ним), выполнение требует, чтобы пользователь, который определил триггер
имел привилегию <a href="#priv_trigger"><code>TRIGGER</code></a>.
</li>

<li><a name="priv_update"></a><a href="#priv_update"><code>UPDATE
</code></a> позволяет строкам быть обновленными в таблицах в базе данных.
</li>

<li><a name="priv_usage"></a><a href="#priv_usage"><code>USAGE
</code></a> указывает "<span><span>никаких привилегий</span></span>".
Это используется на глобальном уровне с
<a href="sql.htm#grant"><code>GRANT</code></a>, чтобы изменить
признаки учетной записи, такие как пределы ресурса или характеристики SSL, не
затрагивая существующие привилегии учетной записи.</p></li></ul>

<p>Хорошая идея предоставить учетной записи только те привилегии, в которых
это нуждается. Вы должны осуществить особое предостережение в предоставлении
<a href="#priv_file"><code>FILE</code>
</a> и административных привилегий:</p>

<ul><li><p><a href="#priv_file"><code>FILE</code></a>
можно злоупотребить, чтобы считать в таблицу базы данных любые файлы, которые
сервер MySQL может считать на узле сервера. Это включает все читаемые миром
файлы и файлы в каталоге данных сервера. К таблице можно тогда получить
доступ, используя <a href="sql.htm#select"><code>SELECT</code></a>, чтобы
передать ее содержание хосту клиента.</li>

<li><a href="#priv_grant-option"><code>GRANT OPTION</code></a>
позволяет пользователям дать свои привилегии другим пользователям. Два
пользователя, у которых есть различные привилегии с
<a href="#priv_grant-option"><code>GRANT OPTION</code></a>
в состоянии объединить привилегии.</li>

<li><a href="#priv_alter"><code>ALTER</code></a>
может использоваться, чтобы ниспровергнуть систему
привилегии, переименовывая таблицы.</li>

<li><a href="#priv_shutdown"><code>SHUTDOWN</code></a>
можно злоупотребить, чтобы отказать в службе другим пользователям
полностью, заканчивая сервер.</li>

<li><a href="#priv_process"><code>PROCESS</code></a>
может использоваться, чтобы рассмотреть простой текст в настоящее время
выполняемых запросов, включая запросы, которые устанавливают
или изменяют пароли.</li>

<li><a href="#priv_super"><code>SUPER</code></a>
может использоваться, чтобы закончить другие сеансы или изменить то,
как сервер работает.</li>

<li>Привилегии, предоставленные для базы данных <code>mysql</code>,
могут использоваться, чтобы изменить пароли и другую информацию о привилегии
доступа. Пароли сохранены зашифрованными, таким образом, злонамеренный
пользователь не может просто читать их, чтобы узнать пароль простого текста.
Однако, пользователь с правами на запись в столбец
<code>authentication_string</code> таблицы <code>user</code>
может изменить пароль учетной записи, и затем соединиться с сервером MySQL,
используя эту учетную запись.</p></li></ul>

<h3><a name="grant-tables"></a>7.2.2. Таблицы прав доступа</h3>
<p>Системная база данных <code>mysql</code> включает несколько таблиц,
которые содержат информацию об учетных записях пользователя и их привилегиях.
Этот раздел описывает те таблицы. Для информации о других таблицах в
системной базе данных см. <a href="server.htm#system-database">раздел 6.3
</a>.</p>

<p>Обычно, чтобы управлять содержанием таблиц, Вы изменяете их косвенно при
использовании запросов вроде
<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a>, чтобы
настраивать учетные записи и управлять привилегиями, доступными каждому. См.
<a href="sql.htm#account-management-sql">раздел 14.7.1</a>.
Обсуждение здесь описывает глубинную структуру таблиц, и как сервер
использует их содержание, взаимодействуя с клиентами.</p>

<p>Прямая модификация таблиц, используя запросы
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a>
делается на Ваш собственный риск. Сервер свободен проигнорировать строки,
которые становятся ошибочными в результате таких модификаций.</p>

<p>Таблицы базы данных <code>mysql</code> содержат информацию о правах:</p>
<ul><li><p><code>user</code>: Учетные записи пользователя, глобальные
привилегии и другие столбцы.</li>

<li><code>db</code>: Привилегии на уровне базы данных.</li>
<li><code>tables_priv</code>: Привилегии на уровне таблицы.</li>
<li><code>columns_priv</code>: Привилегии на уровне столбца.</li>

<li><code>procs_priv</code>: Привилегии процедур и функций.</li>
<li><code>proxies_priv</code>: Пользовательские доверенные привилегии.
</p></li></ul>

<p>В MySQL 8.0 таблицы привилегий используют механизм хранения
<code>InnoDB</code> и являются транзакционными. До MySQL 8.0 эти таблицы
использовали <code>MyISAM</code> и были нетранзакционными.</p>

<p>Каждая таблица привилегий содержит столбцы контекста и столбцы привилегии:
</p>
<ul><li><p>Столбцы контекста определяют контекст каждой строки в таблицах,
то есть, контекст, в котором применяется строка. Например, в таблице
<code>user</code> строка со значениями <code>Host</code> и <code>User</code>
соответственно <code>'thomas.loc.gov'</code> и <code>'bob'</code>
относится к подтверждению соединений, сделанных к серверу от узла
<code>thomas.loc.gov</code> клиентом, который определяет имя пользователя
<code>bob</code>. Точно так же в таблице <code>db</code> строка с значениями
<code>Host</code>, <code>User</code> и <code>Db</code> соответственно
<code>'thomas.loc.gov'</code>, <code>'bob'</code> и <code>'reports'</code>
применяется когда <code>bob</code> соединяется от узла
<code>thomas.loc.gov</code> для доступа к базе данных <code>reports</code>.
Таблицы <code>tables_priv</code> и <code>columns_priv</code>
содержат столбцы контекста, указывающие на таблицы или комбинации
таблицы/столбца, к которым применяется каждая строка. Столбцы контекста
<code>procs_priv</code> указывают на сохраненную подпрограмму, к которой
применяется каждая строка.</li>

<li>Столбцы привилегии указывают, который строке таблицы какие привилегии
даны, то есть, какие операции это разрешает. Сервер комбинирует информацию в
различных таблицах привилегий, чтобы сформировать полное описание привилегий
пользователя. См <a href="#request-access">раздел 7.2.6</a>.
</p></li></ul>

<p>Сервер использует таблицы привилегий в следующей манере:</p>
<ul><li><p>Табличные столбцы контекста <code>user</code>
определяют, отклонить или разрешить поступающие соединения. Для разрешенных
соединений любые привилегии, предоставленные в таблице <code>user</code>,
показывают глобальные привилегии пользователя. Любые привилегии,
предоставленные в этой таблице, относятся <span><em>ко всем</em></span>
базам данных сервера.</p>

<p>Поскольку любую глобальную привилегию считают привилегией для всех баз
данных, любая глобальная привилегия позволяет пользователю видеть все имена
базы данных с <a href="sql.htm#show-databases"><code>SHOW DATABASES</code>
</a> или просматривая таблицу
<a href="inform.htm#schemata-table"><code>SCHEMATA</code></a> в
<code>INFORMATION_SCHEMA</code>.</p></li>

<li><p>Табличные столбцы контекста <code>db</code> определяют,
какие пользователи могут получить доступ к каким базам данных
от которого узла. Столбцы привилегии определяют разрешенные операции.
Привилегия, предоставленная на уровне базы данных, относится к базе данных и
всем объектам в базе данных, таким как таблицы и сохраненные программы.</li>

<li>Таблицы <code>tables_priv</code> и <code>columns_priv</code>
подобны <code>db</code>, но являются более точными: они применяются на
уровнях таблицы и столбца, а не на уровне базы данных. Привилегия,
предоставленная на табличном уровне, относится к таблице и всем ее столбцам.
Привилегия, предоставленная на уровне столбца, применяется
только к определенному столбцу.</li>

<li>Таблица <code>procs_priv</code> относится к сохраненным подпрограммам
(процедуры и функции). Привилегия, предоставленная на уровне подпрограммы,
применяется только к единственной процедуре или функции.</li>

<li>Таблица <code>proxies_priv</code> показывает, какие пользователи могут
действовать как полномочия для других пользователей и может ли пользователь
предоставить привилегию <a href="#priv_proxy"><code>PROXY
</code></a> другим пользователям.</p></li></ul>

<p>Сервер использует таблицы <code>user</code> и <code>db</code> в базе
данных <code>mysql</code> на первых и на вторых этапах управления доступом
(см. <a href="#privilege-system">раздел 7.2</a>). Столбцы в
таблицах <code>user</code> и <code>db</code> показывают здесь.</p>

<a name="idm139965378978960"></a><p><b>Таблица 7.3. Столбцы таблиц user и db
</b></p>
<table border="1">
<thead><tr><th scope="col">Имя таблицы</th><th scope="col"><code>user</code>
</th><th scope="col"><code>db</code></th></tr></thead>
<tbody><tr><td scope="row"><span><strong>Столбцы контекста</strong></span>
</td><td><code>Host</code></td><td><code>Host</code></td></tr>
<tr><td scope="row"> </td><td><code>User</code></td>
<td><code>Db</code></td></tr>
<tr><td scope="row"><span><strong>Столбцы привилегии</strong></span></td>
<td><code>Select_priv</code></td><td><code>Select_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Insert_priv</code></td>
<td><code>Insert_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Update_priv</code></td>
<td><code>Update_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Delete_priv</code></td>
<td><code>Delete_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Index_priv</code></td>
<td><code>Index_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Alter_priv</code></td>
<td><code>Alter_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Create_priv</code></td>
<td><code>Create_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Drop_priv</code></td>
<td><code>Drop_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Grant_priv</code></td>
<td><code>Grant_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Create_view_priv</code></td>
<td><code>Create_view_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Show_view_priv</code></td>
<td><code>Show_view_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Create_routine_priv</code></td>
<td><code>Create_routine_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Alter_routine_priv</code></td>
<td><code>Alter_routine_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Execute_priv</code></td>
<td><code>Execute_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Trigger_priv</code></td>
<td><code>Trigger_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Event_priv</code></td>
<td><code>Event_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Create_tmp_table_priv</code></td>
<td><code>Create_tmp_table_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Lock_tables_priv</code></td>
<td><code>Lock_tables_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>References_priv</code></td>
<td><code>References_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Reload_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>Shutdown_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>Process_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>File_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>Show_db_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>Super_priv</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>Repl_slave_priv</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>Repl_client_priv</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>Create_user_priv</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>Create_tablespace_priv</code></td>
<td> </td></tr>
<tr><td scope="row"><span><strong>Security columns</strong></span></td>
<td><code>ssl_type</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>ssl_cipher</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>x509_issuer</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>x509_subject</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>plugin</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>authentication_string</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>password_expired</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>password_last_changed</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>password_lifetime</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>account_locked</code></td><td> </td></tr>
<tr><td scope="row"><span><strong>Столбцы управления ресурсом</strong></span>
</td><td><code>max_questions</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>max_updates</code></td><td> </td></tr>
<tr><td scope="row"> </td><td><code>max_connections</code></td>
<td> </td></tr>
<tr><td scope="row"> </td><td><code>max_user_connections</code></td>
<td> </td></tr></tbody></table>

<p>Столбцы <code>plugin</code> и <code>authentication_string</code> таблицы
<code>user</code> хранят плагин аутентификации и информацию о мандате.</p>
<p>Сервер использует плагин, названный в столбце <code>plugin</code>
строки учетной записи, чтобы подтвердить подлинность попыток соединения
для учетной записи.</p>

<p>Столбец plugin должен быть непустым. При запуске и во время выполнения,
когда <a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a> выполнен,
сервер проверяет строки таблицы <code>user</code>.
Для любой строки с пустым столбцом <code>plugin</code>
сервер пишет предупреждение этой формы в журнал ошибок:
<pre>
[Warning] User entry '<em><code>user_name</code></em>'@'<em><code>host_name</code></em>' has an empty plugin
value. The user will be ignored and no one can login with
this user anymore.
</pre>

Столбец <code>password_expired</code> разрешает DBA истекать пароли учетной
записи и требовать, чтобы пользователи сбросили свой пароль. Значение по
умолчанию <code>password_expired</code> <code>'N'</code>,
но может быть установлено в <code>'Y'</code> с
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>.
После того, как пароль учетной записи истек, все операции, выполненные
учетной записью в последующих соединениях приводят к ошибке, пока
пользователь не выполнит <a href="sql.htm#alter-user"><code>ALTER USER</code>
</a>, чтобы установить новый пароль учетной записи.</p>

<p>Возможно после истечения пароля <span><span>сбросить</span></span>
пароль, устанавливая это в его текущее значение. Как хорошую политику,
предпочтительно выбрать отличный пароль.</p>

<p><code>password_last_changed</code> это <code>TIMESTAMP</code>
указывающий, когда пароль был последний раз изменен. Значение не-<code>NULL
</code> только для учетных записей, которые используют встроенные методы
аутентификации MySQL (учетные записи, которые используют плагин
аутентификации <code>mysql_native_password</code> или
<code>sha256_password</code>). Значение <code>NULL</code> для других учетных
записей, таких как заверенное использование внешней системы аутентификации.
</p>

<p><code>password_last_changed</code> обновляется
<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#alter-user"><code>ALTER USER</code></a> и
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a> и
<a href="sql.htm#grant"><code>GRANT</code></a>, которые создают учетную
запись или изменяют пароль учетной записи.</p>

<p><code>password_lifetime</code> указывает время жизни пароля учетной
записи в днях. Если пароль проходит это время (оцененное использованием
столбца <code>password_last_changed</code>), сервер полагает, что пароль
истек, когда клиенты соединяются с использование учетной записи. Значение
<em><code>N</code></em> больше нуля указывает, что пароль должен быть изменен
каждые <em><code>N</code></em> дней. Значение 0 отключает автоматическое
истечение пароля. Если значение <code>NULL</code> (значение по умолчанию),
глобальная политика истечения применяется, как определено переменной
<a href="server.htm#sysvar_default_password_lifetime">
<code>default_password_lifetime</code></a>.</p>
<p><code>account_locked</code> указывает, заблокирована ли учетная запись
(см. <a href="#account-locking">раздел 7.3.11</a>).</p>

<p>Во время второго этапа управления доступом сервер выполняет проверку
запроса, чтобы гарантировать, что у каждого клиента есть достаточные
привилегии для каждого запроса. В дополнение к таблицам
<code>user</code> и <code>db</code>, сервер может также консультироваться с
таблицами <code>tables_priv</code> и <code>columns_priv</code>
для запросов, которые вовлекают таблицы. Последние таблицы обеспечивают более
точное управление привилегией на уровнях столбца и таблице.
Их столбцы показаны в следующей таблице.</p>

<a name="idm139965378840224"></a><p><b>
Таблица 7.4. Столбцы tables_priv и columns_priv</b></p>
<table border="1">
<thead><tr><th scope="col">Имя таблицы</th><th scope="col"><code>
tables_priv</code></th><th scope="col"><code>columns_priv</code>
</th></tr></thead>
<tbody><tr><td scope="row"><span><strong>Контекст столбца</strong></span>
</td><td><code>Host</code></td><td><code>Host</code></td></tr>
<tr><td scope="row"> </td><td><code>Db</code></td><td><code>Db</code>
</td></tr>
<tr><td scope="row"> </td><td><code>User</code></td><td><code>User</code>
</td></tr>
<tr><td scope="row"> </td><td><code>Table_name</code></td>
<td><code>Table_name</code></td></tr>
<tr><td scope="row"> </td><td> </td><td><code>Column_name</code></td></tr>
<tr><td scope="row"><span><strong>Столбцы привилегий</strong></span></td>
<td><code>Table_priv</code></td><td><code>Column_priv</code></td></tr>
<tr><td scope="row"> </td><td><code>Column_priv</code></td><td> </td></tr>
<tr><td scope="row"><span><strong>Прочие столбцы</strong></span></td>
<td><code>Timestamp</code></td><td><code>Timestamp</code></td></tr>
<tr><td scope="row"> </td><td><code>Grantor</code></td>
<td> </td></tr></tbody></table>

<p>Столбцы <code>Timestamp</code> и <code>Grantor</code>
установлены в текущий timestamp и значение
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>,
соответственно, но иначе не использованы.</p>

<p>Для проверки запросов, которые вовлекают сохраненные подпрограммы,
сервер может консультироваться с таблицей <code>procs_priv</code>,
столбцы которой показаны в следующей таблице.</p>

<a name="idm139965378809248"></a><p><b>
Таблица 7.5. Столбцы таблицы procs_priv</b></p>
<table border="1">
<thead><tr><th scope="col">Имя таблицы</th><th scope="col">
<code>procs_priv</code></th></tr></thead>
<tbody><tr><td scope="row"><span><strong>Контекст столбца</strong>
</span></td>
<td><code>Host</code></td></tr>
<tr><td scope="row"> </td><td><code>Db</code></td></tr>
<tr><td scope="row"> </td><td><code>User</code></td></tr>
<tr><td scope="row"> </td><td><code>Routine_name</code></td></tr>
<tr><td scope="row"> </td><td><code>Routine_type</code></td></tr>
<tr><td scope="row"><span><strong>Столбцы привилегий</strong></span></td>
<td><code>Proc_priv</code></td></tr>
<tr><td scope="row"><span><strong>Прочие столбцы</strong></span></td>
<td><code>Timestamp</code></td></tr>
<tr><td scope="row"> </td><td><code>Grantor</code></td></tr></tbody></table>

<p>Столбец <code>Routine_type</code> имеет тип
<a href="types.htm#enum"><code>ENUM</code></a> со значениями
<code>'FUNCTION'</code> или <code>'PROCEDURE'</code>,
чтобы указать на тип подпрограммы. Этот столбец позволяет привилегиям быть
предоставленными отдельно для функции и процедуры с тем же самым именем.</p>

<p><code>Timestamp</code> и <code>Grantor</code> не используются.</p>
<p>Таблица <code>proxies_priv</code> делает запись информации об учетных
записях по доверенности. У нее есть эти столбцы:</p>

<ul><li><p><code>Host</code>, <code>User</code>: Учетная запись по
доверенности, то есть, учетная запись, которая имеет привилегию
<a href="#priv_proxy"><code>PROXY</code></a>
для учетной записи.</li>

<li><code>Proxied_host</code>, <code>Proxied_user</code>:
Учетная запись proxied.</li>
<li><code>Grantor</code>, <code>Timestamp</code>: Не задействованы.</li>

<li><code>With_grant</code>: Может ли учетная запись по доверенности
предоставить привилегию <a href="#priv_proxy"><code>PROXY</code>
</a> другим учетным записям.</p></li></ul>

<p>Для учетной записи, чтобы быть в состоянии предоставить привилегию
<a href="#priv_proxy"><code>PROXY</code></a>
другим учетным записям, она должна иметь строку в таблице
<code>proxies_priv</code> с <code>With_grant</code> = 1,
<code>Proxied_host</code> и <code>Proxied_user</code>
установленные, чтобы указать на учетную запись, которой можно предоставить
привилегию. Например, учетная запись <code>'root'@'localhost'</code>
создаваемая во время установки MySQL, имеет строку в <code>proxies_priv
</code>, которая позволяет предоставить привилегию
<a href="#priv_proxy"><code>PROXY</code></a> для
<code>''@''</code>, то есть, для всех пользователей и всех узлов. Это
разрешает <code>root</code> настраивать пользователей по доверенности, так же
как делегировать другим учетным записям полномочия настроить пользователей по
доверенности. См. <a href="#proxy-users">раздел 7.3.10</a>.</p>

<p>Столбцы контекста в таблицах привилегий содержат строки.
Значение по умолчанию для каждой пустая строка. Следующая таблица показывает
число символов, разрешенных в каждом столбце.</p>

<a name="idm139965378762688"></a><p><b>Таблица 7.6. Табличные длины
столбца контекста привилегий</b></p>
<table border="1">
<thead><tr><th scope="col">Имя столбца</th>
<th scope="col">Максимально разрешенная длина</th></tr></thead>
<tbody><tr><td scope="row"><code>Host</code>, <code>Proxied_host</code></td>
<td>60</td></tr>
<tr><td scope="row"><code>User</code>, <code>Proxied_user</code></td>
<td>32</td></tr>
<tr><td scope="row"><code>Db</code></td><td>64</td></tr>
<tr><td scope="row"><code>Table_name</code></td><td>64</td></tr>
<tr><td scope="row"><code>Column_name</code></td><td>64</td></tr>
<tr><td scope="row"><code>Routine_name</code></td><td>64</td>
</tr></tbody></table>

<p>В проверяющих доступ целях, сравнения
<code>User</code>, <code>Proxied_user</code>,
<code>authentication_string</code>, <code>Db</code> и <code>Table_name</code>
являются чувствительными к регистру. Сравнения <code>Host</code>,
<code>Proxied_host</code>, <code>Column_name</code> и
<code>Routine_name</code> не являются чувствительными к регистру.</p>

<p>Таблицы <code>user</code> и <code>db</code> приводят каждую привилегию в
отдельном столбце, который объявлен как
<code>ENUM('N','Y') DEFAULT 'N'</code>.
Другими словами, каждая привилегия может быть отключена или включена с
отключенным значением по умолчанию.</p>

<p>Таблицы <code>tables_priv</code>,
<code>columns_priv</code> и <code>procs_priv</code> объявляют столбцы
привилегии как <a href="types.htm#set"><code>SET</code></a>.
Значения в этих столбцах могут содержать любую комбинацию привилегий,
которыми управляет таблица. Только привилегии, перечисленные в
значении столбца, включены.</p>

<a name="idm139965378730896"></a><p><b>
Таблица 7.7. Значения столбцов привилегии</b></p>
<table border="1">
<thead><tr><th scope="col">Имя таблицы</th><th scope="col">Имя столбца</th>
<th scope="col">Возможные элементы набора</th></tr></thead>
<tbody><tr><td scope="row"><code>tables_priv</code></td>
<td><code>Table_priv</code></td><td><code>'Select', 'Insert', 'Update',
'Delete', 'Create', 'Drop', 'Grant', 'References', 'Index', 'Alter',
'Create View', 'Show view', 'Trigger'</code></td></tr>
<tr><td scope="row"><code>tables_priv</code></td>
<td><code>Column_priv</code></td><td><code>
'Select', 'Insert', 'Update', 'References'</code></td></tr>
<tr><td scope="row"><code>columns_priv</code></td>
<td><code>Column_priv</code></td><td><code>
'Select', 'Insert', 'Update', 'References'</code></td></tr>
<tr><td scope="row"><code>procs_priv</code></td>
<td><code>Proc_priv</code></td><td><code>'Execute', 'Alter Routine', 'Grant'
</code></td></tr></tbody></table>

<p>Только таблица <code>user</code> определяет административные привилегии,
например, <a href="#priv_reload"><code>RELOAD</code></a> и
<a href="#priv_shutdown"><code>SHUTDOWN</code></a>.
Административные задачи это операции на сервере непосредственно и не являются
определенными для базы данных, таким образом нет никакой причины перечислить
эти привилегии в других таблицах привилегий. Следовательно, сервер должны
консультироваться только с <code>user</code>, чтобы определить, может ли
пользователь выполнить административную задачу.</p>

<p><a href="#priv_file"><code>FILE</code></a>
также определена только в <code>user</code>. Это не административная
привилегия как таковая, а способность пользователя читать или писать файлы на
узле сервера независимо от доступной базы данных.</p>

<p>Сервер читает содержание таблиц привилегий в память, когда запускается.
Вы можете сказать ему перезагружать таблицы, скомандовав
<a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a>,
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin
flush-privileges</strong></span></a> или
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin reload</strong>
</span></a>. Изменения таблиц привилегий вступают в силу как обозначено в
<a href="#privilege-changes">разделе 7.2.7</a>.</p>

<p>Когда Вы изменяете учетную запись, хорошая идея проверить, что Ваши
изменения имеют намеченный эффект. Чтобы проверить привилегии, используйте
<a href="sql.htm#show-grants"><code>SHOW GRANTS</code></a>.
Например, чтобы определить привилегии, которые предоставляют учетной записи с
именем пользователя и хоста <code>bob</code> и <code>pc84.example.com</code>:
<pre>
SHOW GRANTS FOR 'bob'@'pc84.example.com';
</pre>

Чтобы вывести на экран свойства учетной записи, надо использовать
<a href="sql.htm#show-create-user"><code>SHOW CREATE USER</code></a>:
<pre>
SHOW CREATE USER 'bob'@'pc84.example.com';
</pre>

<h3><a name="account-names"></a>7.2.3. Определение имени учетной записи</h3>
<p>Имена учетной записи MySQL состоят из имени пользователя и имени хоста.
Это включает создание пользователей с тем же самым именем, которые могут
соединиться от различных узлов. Этот раздел описывает, как написать имена
учетной записи, включая специальные значения и подстановочные правила.</p>

<p>Ролевые имена MySQL подобны именам учетной записи, с некоторыми
различиями, описанными в <a href="#role-names">разделе 7.2.4</a>.
</p>

<p>В SQL-запросах вроде <a href="sql.htm#create-user"><code>CREATE
USER</code></a>, <a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>,
имена учетной записи следуют этим правилам:</p>

<ul><li><p>Синтаксис имени учетной записи
<code>'<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'</code>.
</li>
<li>Имя учетной записи, состоящее только из имени пользователя, эквивалентно
<code>'<em><code>user_name</code></em>'@'%'</code>.
Например, <code>'me'</code> эквивалентно <code>'me'@'%'</code>.</li>

<li>Имя пользователя и имя хоста не должны быть заключены в кавычки, если они
законны как идентификаторы без кавычек. Кавычки необходимы, чтобы определить
строку <em><code>user_name</code></em>, содержащую специальные символы (такие
как пробел или <code>-</code>) или строку <em><code>host_name</code></em>
со специальными или подстановочными символами (например,
<code>.</code> или <code>%</code>), скажем,
<code>'test-user'@'%.com'</code>.</li>

<li>Имена пользователя и имена хоста берутся в кавычки как идентификаторы или
как строки, используя <code>`</code>, <code>'</code> или (<code>"</code>).
</li>

<li>Части имени пользователя и хоста, если заключены в кавычки, должны быть
заключены в кавычки отдельно. Таким образом, напишите
<code>'me'@'localhost'</code>, но не <code>'me@localhost'</code>,
последнее аналогично <code>'me@localhost'@'%'</code>.</li>

<li>Ссылка на <a href="funct.htm#function_current-user"><code>CURRENT_USER
</code></a> или <a href="funct.htm#function_current-user"><code>
CURRENT_USER()</code></a> эквивалентна определению имени пользователя
текущего клиента и имени хоста буквально.</p></li></ul>

<p>MySQL хранит имя учетной записи в таблицах привилегий в
системной базе данных <code>mysql</code>, используя отдельные столбцы для
частей имени пользователя и имени хоста:</p>

<ul><li><p>Таблица <code>user</code> содержит одну строку для каждой учетной
записи. Столбцы <code>User</code> и <code>Host</code> хранят имя пользователя
и имя хоста. Эта таблица также показывает, какие глобальные привилегии
учетная запись имеет.</li>

<li>Другие таблицы привилегий показывают привилегии, которые учетная запись
имеет для баз данных и объектов в пределах баз данных. Эти таблицы имеют
столбцы <code>User</code> и <code>Host</code>, чтобы сохранить имя учетной
записи. Каждая строка в этих таблицах связывается с учетной записью в
таблице <code>user</code>, у которой есть то же самое
значение <code>User</code> и <code>Host</code>.</li>

<li>В проверяющих доступ целях сравнения значения User
являются чувствительными к регистру. Сравнения значений Host
не являются чувствительными к регистру.</p></li></ul>

<p>См. <a href="#grant-tables">раздел 7.2.2</a>.</p>
<p>У имен пользователя и имен хоста есть определенные специальные значения
или подстановочные соглашения, как описано после.</p>

<p>Часть имени пользователя имени учетной записи это непустое значение,
которое буквально соответствует имени пользователя для поступающих попыток
соединения, или пустое значение (пустая строка), которая соответствует любому
имени пользователя. Учетная запись с пустым именем пользователя это анонимный
пользователь. Чтобы определить анонимного пользователя в запросах SQL,
используйте заключенную в кавычки пустую часть имени
пользователя, например, <code>''@'localhost'</code>.</p>

<p>Часть имени хоста имени учетной записи может принять много форм, и
подстановочные знаки разрешены:</p>
<ul><li><p>Значение узла может быть именем хоста или IP-адресом (IPv4 или
IPv6). Имя <code>'localhost'</code> указывает на местный узел. IP-адрес
<code>'127.0.0.1'</code> указывает на интерфейс IPv4 loopback. IP-адрес
<code>'::1'</code> указывает на интерфейс IPv6 loopback.</li>

<li>Символы <code>%</code> и <code>_</code> разрешены в значениях IP-адреса
или имени хоста. У них есть то же самое значение, что касается
соответствующих образцу операций, выполненных с
<a href="funct.htm#operator_like"><code>LIKE</code></a>.
Например, значение узла <code>'%'</code> соответствует любому имени хоста,
тогда как значение <code>'%.mysql.com'</code> соответствует любому имени
хоста в домене <code>mysql.com</code>. <code>'192.168.1.%'</code>
соответствует любому хосту в сети 192.168.1 класса C.</p>

<p>Поскольку подстановочные значения разрешены в значениях узла (например,
<code>'192.168.1.%'</code> соответствует каждому узлу подсети), кто-то мог
попытаться эксплуатировать эту способность, называя узел
<code>192.168.1.somewhere.com</code>. Чтобы помешать таким попыткам, MySQL
не выполняет соответствие на именах хоста, которые начинаются
с цифр и точки. Например, если узел называют <code>1.2.example.com</code>,
его имя никогда не соответствует части узла имени учетной записи.
Подстановочное значение IP может соответствовать только IP-адресу,
не имени хоста.</li>

<li>Для значения узла, определенного как адрес IPv4, сетевая маска может быть
дана, чтобы указать сколько битов адреса использовать для сетевого адреса.
Нотация сетевой маски не может использоваться для адресов IPv6.</p>

<p>Синтаксис <code><em><code>host_ip</code></em>/<em><code>netmask</code>
</em></code>. Например:
<pre>
CREATE USER 'david'@'192.58.197.0/255.255.255.0';
</pre>

Это позволяет <code>david</code> соединяться от любого хоста клиента,
имеющего IP-адрес <em><code>client_ip</code></em>
для которого следующее условие истина:
<pre>
<em><code>client_ip</code></em> &amp; <em><code>netmask</code></em> = <em><code>host_ip</code></em>
</pre>

Таким образом, для <a href="sql.htm#create-user"><code>CREATE USER</code></a>:
<pre>
<em><code>client_ip</code></em> &amp; 255.255.255.0 = 192.58.197.0
</pre>
IP-адреса, которые удовлетворяют этому диапазону условия, от
<code>192.58.197.0</code> до <code>192.58.197.255</code>.</p>

<p>Сетевая маска, как правило, начинается с набора битов 1,
сопровождаемого набором битов 0. Примеры:</p>
<ul><li><p><code>192.0.0.0/255.0.0.0</code>: Любой узел в сети 192 класса A.
</li>
<li><code>192.168.0.0/255.255.0.0</code>: Любой узел в сети 192.168 класса B.
</li>
<li><code>192.168.1.0/255.255.255.0</code>: Любой узел в сети
192.168.1 класса C.</li>
<li><code>192.168.1.1</code>: Только узел с этим определенным IP-адресом.
</p></li></ul></li></ul>

<p>Сервер выполняет соответствие значений узла именам учетной записи против
хоста клиента, используя значение, возвращенное DNS для имени хоста клиента
или IP-адреса. Кроме случая, когда значение узла учетной записи определено,
используя нотацию сетевой маски, сервер выполняет это сравнение как строковое
соответствие, даже для значения узла учетной записи, данного как IP-адрес.
Это означает, что Вы должны определить значения узла учетной записи в том же
самом формате, используемом DNS.</p>

<ul><li><p>Предположите, что у узла местной сети есть полностью
определенное имя <code>host1.example.com</code>.
Если DNS возвращает поиски имени для этого узла как
<code>host1.example.com</code>, используйте это имя в значениях узла учетной
записи. Если DNS возвращает только
<code>host1</code>, используйте <code>host1</code>.</li>

<li>Если DNS возвращает IP-адрес для данного узла как
<code>192.168.1.2</code>, это будет соответствовать значению узла учетной
записи <code>192.168.1.2</code>, но не <code>192.168.01.2</code>.
Точно так же это будет соответствовать образцу узла учетной записи как
<code>192.168.1.%</code>, но не <code>192.168.01.%</code>.</p></li></ul>

<p>Чтобы избежать проблем, желательно проверить формат, в котором Ваш DNS
возвращает имена хоста и адреса. Используйте значения в том же самом формате
на именах учетной записи MySQL.</p>

<h3><a name="role-names"></a>7.2.4. Определение ролевых имен</h3>
<p>Ролевые имена MySQL обращаются к ролям, которые называют наборами
привилегий. Для ролевых примеров использования см.
<a href="#roles">раздел 7.3.4</a>.</p>

<p>У ролевых имен есть синтаксис и семантика, подобная именам учетной записи
(<a href="#account-names">раздел 7.2.3</a>).
Ролевые имена отличаются от имен учетной записи в этих отношениях:</p>

<ul><li><p>Пользовательская часть ролевых имен не может быть пробелом. Таким
образом, нет никакой <span><span>анонимной роли</span></span> аналогичной
понятию <span><span>анонимного пользователя</span></span>.</li>

<li>Что касается имени учетной записи, опуская часть узла роли называют
результаты в части узла <code>%</code>. Но в отличие от <code>%</code>
в имени учетной записи, часть узла <code>%</code>
в имени роли не имеет никаких подстановочных свойств. Например, для имени
<code>'me'@'%'</code> используемого в качестве ролевого имени, часть узла
(<code>%</code>) просто символ, у этого нет никакого соответствия
<span><span>любому хосту</span></span>. Нотация сетевой маски не
имеет никакого значения.</li>

<li>Имени учетной записи разрешают быть
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
в нескольких контекстах. Ролевому имени нет.</p></li></ul>

<p>Возможно для строки в <code>mysql.user</code> служить учетной
записью и ролью. В этом случае любой специальный пользователь или свойства
соответствия имени хоста не обращаются в контекстах, для которых имя
используется в качестве ролевого имени. Например, Вы не можете выполнить
следующий запрос с ожиданием, что оно установит текущие роли сеанса,
используя все роли, у которых есть пользовательская часть <code>myrole</code>
и любое имя хоста:
<pre>
SET ROLE 'myrole'@'%';
</pre>

Вместо этого запрос устанавливает сеанс для роли с именем
<code>'myrole'@'%'</code> (или <code>'myrole'</code>
без части узла, которая эквивалентна).</p>

<p>Поэтому ролевые имена часто определяются, используя только часть имени
пользователя и позволяя части имени хоста неявно быть <code>%</code>.
Определение роли с частью не-<code>%</code> может быть полезно,
если Вы намереваетесь создать имя, которое работает ролью и учетной записью
пользователя, которой разрешают соединиться от данного узла.</p>

<h3><a name="connection-access"></a>7.2.5.
Управление доступом, этап 1: проверка соединения</h3>
<p>Когда Вы пытаетесь соединиться с сервером MySQL, сервер принимает или
отклоняет соединение, основанное на этих условиях:</p>

<ul><li><p>Ваша личность и можете ли Вы проверить свою личность,
поставляя правильный пароль.</li>
<li>Заблокирована ли Ваша учетная запись или нет.</p></li></ul>

<p>Сервер проверяет параметры сначала, затем читает состояние блокировки.
Отказ для любого шага заставляет сервер лишить Вас доступа полностью.
Иначе сервер принимает соединение, затем вводит этап 2 и ждет запросов.</p>

<p>Мандатная проверка выполнена, используя три столбца контекста таблицы
<code>user</code> (<code>Host</code>, <code>User</code> и
<code>authentication_string</code>). Статус блокировки зарегистрирован в
столбце <code>account_locked</code> таблицы <code>user</code>.
Сервер принимает соединение только, если <code>Host</code> и
<code>User</code> в <code>user</code> соответствуют имени хоста клиента и
пользователя, клиент поставляет пароль, определенный в той строке, и
<code>account_locked</code> = <code>'N'</code>. Правила для допустимых
значений <code>Host</code> и <code>User</code> даны в
<a href="#account-names">разделе 7.2.3</a>.
Блокировка учетной записи может быть изменена с помощью
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>.</p>

<p>Ваша личность основана на двух сведениях:</p>
<ul><li><p>Хост клиента, от которого Вы соединяетесь.</li>
<li>Ваше имя пользователя MySQL.</p></li></ul>

<p>Если значение столбца <code>User</code> не пробел, имя
пользователя в поступающем соединении должно соответствовать точно. Если
значение столбца <code>User</code> пробел, оно соответствует любому имени
пользователя. Если строка таблицы <code>user</code>, которая соответствует
поступающему соединению, есть пустое имя пользователя, пользователь
является анонимным пользователем без имени, а не пользователем с именем,
которое фактически определил клиент. Это означает, что пустое имя
пользователя используется для всей дальнейшей проверки доступа
(то есть, во время этапа 2).</p>

<p>Столбец <code>authentication_string</code> может быть пробелом. Это не
подстановочный знак и не означает, что любой пароль соответствует.
Это означает, что пользователь должен соединиться, не определяя пароль. Если
сервер подтверждает подлинность клиента, использующего плагин, метод
аутентификации, который реализует плагин, возможно, не использует пароль в
<code>authentication_string</code>. В этом случае возможно, что внешний
пароль также используется, чтобы подтвердить подлинность.</p>

<p>Не пустое значение <code>authentication_string</code> в таблице
<code>user</code> представляет зашифрованные пароли. MySQL не хранит пароли в
форме открытого текста. Скорее пароль, поставляемый пользователем, который
пытается соединиться, зашифрован (с использованием метода хеширующего пароля,
осуществленного плагином аутентификации учетной записи). Зашифрованный пароль
используется во время процесса соединения, проверяя, правилен ли пароль.
Это делается без передачи зашифрованного пароля по соединению. См.
<a href="#user-names">раздел 7.3.1</a>.</p>

<p>С точки зрения MySQL зашифрованный пароль это и есть
<span><em>настоящий</em></span> пароль, таким образом, Вы никогда не должны
предоставлять никому доступ к этому. В частности, <span><em>не предоставляйте
неадминистративный пользовательский доступ чтения к таблицам в
базе данных <code>mysql</code></em></span>.</p>

<p>Следующая таблица показывает как различные комбинации значений
<code>User</code> и <code>Host</code> в таблице <code>user</code>
относятся к поступающим соединениям.</p>

<table border="1">
<thead><tr><th scope="col">Значение <code>User</code></th>
<th scope="col">Значение <code>Host</code></th>
<th scope="col">Допустимые соединения</th></tr></thead>
<tbody><tr><td scope="row"><code>'fred'</code></td>
<td><code>'thomas.loc.gov'</code></td><td><code>fred</code> с
<code>thomas.loc.gov</code></td></tr>
<tr><td scope="row"><code>''</code></td><td><code>'thomas.loc.gov'</code>
</td><td>Кто угодно с <code>thomas.loc.gov</code></td></tr>
<tr><td scope="row"><code>'fred'</code></td><td><code>'%'</code></td>
<td><code>fred</code> откуда угодно</td></tr>
<tr><td scope="row"><code>''</code></td><td><code>'%'</code></td>
<td>Кто угодно откуда угодно</td></tr>
<tr><td scope="row"><code>'fred'</code></td><td><code>'%.loc.gov'</code></td>
<td><code>fred</code> откуда угодно в домене <code>loc.gov</code></td></tr>
<tr><td scope="row"><code>'fred'</code></td><td><code>'x.y.%'</code></td>
<td><code>fred</code> с <code>x.y.net</code>,
<code>x.y.com</code>, <code>x.y.edu</code> и т.д.</td></tr>
<tr><td scope="row"><code>'fred'</code></td>
<td><code>'192.168.10.177'</code></td>
<td><code>fred</code> с IP <code>192.168.10.177</code></td></tr>
<tr><td scope="row"><code>'fred'</code></td>
<td><code>'192.168.10.%'</code></td>
<td><code>fred</code> из сети <code>192.168.10</code> класса C</td></tr>
<tr><td scope="row"><code>'fred'</code></td>
<td><code>'192.168.10.0/255.255.255.0'</code></td>
<td><code>fred</code> из сети <code>192.168.10</code> класса C</td>
</tr></tbody></table>

<p>Для имени хоста клиента и имени пользователя поступающего соединения
возможно соответствовать больше, чем одной строке в <code>user</code>.
Предыдущий набор примеров демонстрирует это: несколько записей
соответствуют соединению от <code>fred</code> с <code>thomas.loc.gov</code>.
</p>

<p>Когда многократные соответствия возможны, сервер должен определить,
которое из них использовать. Это решает этот вопрос следующим образом:</p>
<ul><li><p>Всякий раз, когда сервер читает таблицу <code>user</code>
в память, это сортирует строки.</li>

<li>Когда клиент пытается соединиться, сервер просматривает
строки в сортированном порядке.</li>
<li>Сервер использует первую строку, которая соответствует имени
хоста клиента и имени пользователя.</p></li></ul>

<p>Строки с наиболее определенным <code>Host</code> будут первыми.
Буквальные имена хоста и IP-адреса являются самыми определенными. Специфика
буквального IP-адреса не затронута тем, есть ли сетевая маска, таким образом,
<code>192.168.1.13</code> и <code>192.168.1.0/255.255.255.0</code>
считаются одинаково определенными. Образец <code>'%'</code> значит
<span><span>любой host</span></span> и является наименее определенным. Пустая
строка <code>''</code> тоже значит <span><span>любой host</span></span>,
но сортируется после <code>'%'</code>. Строки с тем же самым
<code>Host</code> упорядочены с наиболее определенным
<code>User</code> сначала (пустой <code>User</code> значит
<span><span>любой user</span></span> и является наименее определенным). Для
строк с одинаково определенными <code>Host</code> и <code>User</code>
порядок не определен.</p>

<p>Чтобы видеть, как это работает, предположите что таблица <code>user</code>
похожа на это:
<pre>
+-----------+---------+-
| Host      | User    | ...
+-----------+---------+-
| %         | root    | ...
| %         | jeffrey | ...
| localhost | root    | ...
| localhost |         | ...
+-----------+---------+-
</pre>

Когда сервер читает таблицу в память, это сортирует строки, используя
описанные правила. Результат после сортировки похож на это:
<pre>
+-----------+---------+-
| Host      | User    | ...
+-----------+---------+-
| localhost | root    | ...
| localhost |         | ...
| %         | jeffrey | ...
| %         | root    | ...
+-----------+---------+-
</pre>

<p>Когда клиент пытается соединиться, сервер просматривает сортированные
строки и использует первое найденное соответствие. Для соединения с
<code>localhost</code> как <code>jeffrey</code> две строки из таблицы
соответствуют: одна с <code>Host</code> и <code>User</code>
<code>'localhost'</code> и <code>''</code>, вторая со значениями
<code>'%'</code> и <code>'jeffrey'</code>. Строка <code>'localhost'</code>
первая в сортированном порядке, так что она  будет использована.</p>

<p>Вот другой пример. Предположите, что таблица <code>user</code>
похожа на это:
<pre>
+----------------+----------+-
| Host           | User     | ...
+----------------+----------+-
| %              | jeffrey  | ...
| thomas.loc.gov |          | ...
+----------------+----------+-
</pre>

Сортированная таблица похожа на это:
<pre>
+----------------+----------+-
| Host           | User     | ...
+----------------+----------+-
| thomas.loc.gov |          | ...
| %              | jeffrey  | ...
+----------------+----------+-
</pre>

Соединение <code>jeffrey</code> от <code>thomas.loc.gov</code> является
соответствующим первой строке, тогда как соединение <code>jeffrey</code> от
любого узла является соответствующим второй.</p>

<p>Распространенное заблуждение думать, что для данного имени пользователя
все строки, которые явно называют того пользователя, используются сначала,
когда сервер пытается определить, стоит ли с ним работать.
Это не истина. Предыдущий пример иллюстрирует, что соединение
<code>jeffrey</code> от <code>thomas.loc.gov</code> является сначала
соответствующим не строке, содержащей <code>'jeffrey'</code> как столбец
<code>User</code>, а строке без имени пользователя. В результате
<code>jeffrey</code> опознан как анонимный пользователь, даже при том, что он
определил имя пользователя, соединяясь.</p>

<p>Если Вы в состоянии соединиться с сервером, но Ваши привилегии не состоят
в том, что Вы ожидаете, Вы, вероятно, опознаетесь как некоторая другая
учетная запись. Узнать, что считает сервер, можно, используя функцию
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>,
см. <a href="funct.htm#information-functions">раздел 13.14</a>. Это
возвращает значение в формате <code><em><code>user_name</code></em>@<em>
<code>host_name</code></em></code>, который указывает значения
<code>User</code> и <code>Host</code> от соответствия строки в таблице
<code>user</code>. Предположите, что <code>jeffrey</code>
соединяется и запускает следующий запрос:
<pre>
mysql&gt; SELECT CURRENT_USER();
+----------------+
| CURRENT_USER() |
+----------------+
| @localhost     |
+----------------+
</pre>

Результат, показанный здесь, указывает что соответствием
<code>user</code> у строки таблицы был пробел
в столбце <code>User</code>. Другими словами, сервер обрабатывает
<code>jeffrey</code> как анонимного пользователя.</p>

<p>Другой способ диагностировать проблемы аутентификации состоит в том, чтобы
распечатать таблицу <code>user</code> и отсортировать это вручную, чтобы
видеть, где первое соответствие делается.</p>

<h3><a name="request-access"></a>7.2.6.
Управление доступом, этап 2: проверка запроса</h3>
<p>После того, как Вы устанавливаете соединение, сервер вводит этап 2
управления доступом. Для каждого запроса сервер определяет, какую работу Вы
хотите выполнить, затем проверяет, есть ли у Вас достаточные привилегии,
чтобы это сделать. Здесь столбцы привилегии в таблицах привилегий играют
роль. Эти привилегии могут прибыть из любой из таблиц <code>user</code>,
<code>db</code>, <code>tables_priv</code>, <code>columns_priv</code> или
<code>procs_priv</code>. Вы можете счесть полезным обратиться к
<a href="#grant-tables">разделу 7.2.2</a>,
который перечисляет столбцы, существующие в каждой из таблиц привилегий.</p>

<p>Таблица <code>user</code> предоставляет привилегии, которые назначены Вам
на глобальной основе и которые применяются независимо от того, какова база
данных по умолчанию. Например, если таблица <code>user</code> предоставляет
Вам привилегию <a href="#priv_delete"><code>DELETE</code></a>,
Вы можете удалить строки из любой таблицы в любой базе данных на сервере!
Мудро предоставить привилегии в <code>user</code> только людям, которые
нуждаются в них, такие как администраторы базы данных. Для других
пользователей Вы должны оставить все привилегии внутри
<code>user</code> в виде <code>'N'</code> и давать привилегии
только на более определенных уровнях. Вы можете предоставить привилегии для
особых баз данных, таблиц, столбцов или подпрограмм.</p>

<p>Таблица <code>db</code> предоставляет определенные для базы данных
привилегии. Значения в столбцах контекста этой таблицы могут
принять следующие формы:</p>

<ul><li><p>Пустое <code>User</code> соответствует анонимному пользователю.
Непустое значение соответствует буквально: на имена пользователя нет
никаких подстановочных знаков.</li>

<li>Подстановочные символы <code>%</code> и <code>_</code> могут
использоваться в столбцах <code>Host</code> и <code>Db</code>.
У них есть то же самое значение, что касается соответствующих образцу
операций, выполненных с оператором <a href="funct.htm#operator_like"><code>
LIKE</code></a>. Если Вы хотите использовать любой символ буквально,
предоставляя привилегии, Вы должны экранировать его обратным слэшем.
Например, чтобы включать символ подчеркивания (<code>_</code>) как
часть имени базы данных, определите это как <code>\_</code> в
<a href="sql.htm#grant"><code>GRANT</code></a>.</li>

<li><code>'%'</code> или пустое значение <code>Host</code>
означает <span><span>любой host</span></span>.</li>
<li><code>'%'</code> или пустое значение <code>Db</code>
означает <span><span>любую базу данных</span></span>.</p></li></ul>

<p>Сервер читает таблицу <code>db</code> в память и сортирует
в то же самое время, когда это читает <code>user</code>. Сервер сортирует
таблицу <code>db</code>, основанную на столбцах контекста <code>Host</code>,
<code>Db</code> и <code>User</code>. Как с <code>user</code>,
сортировка помещает наиболее определенные значения сначала и наименее
определенные значения в конец, и когда сервер ищет соответствие строк, это
использует первое соответствие, которое находит.</p>

<p>Таблицы <code>tables_priv</code>, <code>columns_priv</code> и
<code>procs_priv</code> предоставляют привилегии
определенные для таблицы, определенные для столбца и определенные для
подпрограммы привилегии. Значения в столбцах контекста этих таблиц могут
принять следующие формы:</p>

<ul><li><p>Подстановочные символы <code>%</code> и <code>_</code> могут
использоваться в <code>Host</code>. У них есть то же самое значение, что
касается соответствующих образцу операций, выполненных с
<a href="funct.htm#operator_like"><code>LIKE</code></a>.</li>

<li><code>'%'</code> или пустой <code>Host</code>
значит <span><span>любой хост</span></span>.</li>
<li>Столбцы <code>Db</code>, <code>Table_name</code>,
<code>Column_name</code> и <code>Routine_name</code>
не могут содержать подстановочные знаки или быть пробелом.</p></li></ul>

<p>Сервер сортирует <code>tables_priv</code>,
<code>columns_priv</code> и <code>procs_priv</code>, исходя из столбцов
<code>Host</code>, <code>Db</code> и <code>User</code>. Это подобно
сортировке <code>db</code>, но более просто, потому что только
<code>Host</code> может содержать подстановочные знаки.</p>

<p>Сервер использует сортированные таблицы, чтобы проверить каждый запрос.
Для запросов, которые требуют административных привилегий, например,
<a href="#priv_shutdown"><code>SHUTDOWN</code></a> или
<a href="#priv_reload"><code>RELOAD</code></a>,
сервер проверяет только строки таблицы <code>user</code>,
потому что это единственная таблица, которая определяет административные
привилегии. Сервер предоставляет доступ, если строка разрешает требуемую
работу. Например, если Вы хотите выполнить <a href="programs.htm#mysqladmin">
<span><strong>mysqladmin shutdown</strong></span></a>, но Ваша строка таблицы
<code>user</code> не позволяет <a href="#priv_shutdown"><code>
SHUTDOWN</code></a>, сервер лишает доступа, даже не проверяя таблицу
<code>db</code>. Это не содержит <code>Shutdown_priv</code>,
таким образом нет никакой потребности это сделать.</p>

<p>Для связанных с базой данных запросов
(<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> и т.д.),
сервер сначала проверяет глобальные привилегии пользователя, просматривая
<code>user</code>. Если строка разрешает требуемую работу, доступ
предоставляют. Если глобальные привилегии в <code>user</code>
недостаточны, сервер определяет определенные для базы данных привилегии
пользователя, проверяя <code>db</code>:</p>

<p>Сервер смотрит таблицу <code>db</code> для соответствия
<code>Host</code>, <code>Db</code> и <code>User</code>. <code>Host</code> и
<code>User</code> являются соответствующими имени хоста соединяющегося
пользователя и имени пользователя MySQL. <code>Db</code>
является соответствующим базе данных, к которой пользователь хочет получить
доступ. Если нет никакой строки для <code>Host</code> и
<code>User</code>, доступ запрещен.</p>

<p>После определения определенных для базы данных привилегий, предоставленных
<code>db</code>, сервер добавляет их к глобальным привилегиям,
предоставленным таблицей <code>user</code>. Если результат разрешает
требуемую работу, доступ предоставляют. Иначе сервер последовательно
проверяет столбцы привилегий в таблицах <code>tables_priv</code> и
<code>columns_priv</code> к привилегиям пользователя и разрешает доступ,
основываясь на результате. Для сохраненной подпрограммы сервер использует
таблицу <code>procs_priv</code> вместо
<code>tables_priv</code> и <code>columns_priv</code>.</p>

<p>Выраженное в логических членах, предыдущее описание того, как привилегии
пользователя вычислены, может быть получено так:
<pre>
global privileges OR (database privileges AND host privileges) OR
       table privileges OR column privileges OR routine privileges
</pre>

Это, возможно, не очевидно, если глобальные привилегии <code>user</code>,
как первоначально находят, недостаточны для требуемой работы, сервер
добавляет те привилегии к привилегиям базы данных, таблицы и столбца позже.
Причина состоит в том, что запрос мог бы потребовать больше, чем одного типа
привилегии. Например, если Вы выполняете
<a href="sql.htm#insert-select"><code>INSERT INTO ... SELECT</code></a>,
нужны привилегии <a href="#priv_insert"><code>INSERT</code></a> и
<a href="#priv_select"><code>SELECT</code></a>.
Ваши привилегии могли бы быть таковы, что <code>user</code>
предоставляет одну привилегию, а <code>db</code> другую.
В этом случае у Вас есть необходимые привилегии, чтобы выполнить запрос, но
сервер не может сказать это для любой таблицы отдельно, привилегии,
предоставленные строками в обеих таблицах, должны быть объединены.</p>

<h3><a name="privilege-changes"></a>7.2.7.
Когда изменения привилегии вступают в силу</h3>
<p>Когда <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> запускается, он читает все табличное содержание привилегий в память.
Таблицы в памяти вступают в силу для управления доступом в этот момент.</p>

<p>Если Вы изменяете таблицы привилегий косвенно, используя
<a href="sql.htm#grant"><code>GRANT</code></a>,
<a href="sql.htm#revoke"><code>REVOKE</code></a>,
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a> или
<a href="sql.htm#rename-user"><code>RENAME USER</code></a>,
сервер замечает эти изменения и загружает таблицы привилегий в
память снова немедленно.</p>

<p>Если Вы изменяете таблицы привилегий непосредственно, используя
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a>,
Ваши изменения не имеют никакого эффекта на привилегию до перезапуска сервера
или перезагрузки таблиц. Если Вы изменяете таблицы привилегий
непосредственно, но забываете перезагружать их, Ваши изменения не имеют
эффекта, пока Вы не перезапускаете сервер.</p>

<p>Чтобы сказать серверу перезагружать таблицы привилегий, выполните
flush-privileges. Это делается командой
<a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a>,
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin flush-privileges
</strong></span></a> или <a href="programs.htm#mysqladmin"><span><strong>
mysqladmin reload</strong></span></a>.</p>

<p>Табличная перезагрузка привилегий затрагивает привилегии для каждого
существующего соединения клиента следующим образом:</p>

<ul><li><p>Изменения привилегии таблицы и столбца вступают в силу со
следующим запросом клиента.</li>
<li>Изменения привилегии базы данных вступают в силу в следующий раз, когда
клиент выполняет <code>USE <em><code>db_name</code></em></code>.</p>

<p>Приложения-клиенты могут кэшировать имя базы данных,
таким образом, этот эффект, возможно, невидим ими до фактической смены
базы данных или сброса привилегий.</p></li>

<li><p>Глобальные привилегии и пароли не затронуты для соединенного клиента.
Эти изменения вступают в силу только для последующих соединений.
</p></li></ul>

<p>Если сервер запущен с опцией
<a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a>, это не читает таблицы привилегий или
осуществляет любое управление доступом. Любой может соединиться и сделать
что-либо. Чтобы сервер восставновил работу системы
доступа, сбросьте привилегии.</p>

<h3><a name="problems-connecting"></a>7.2.8.
Поиск неисправностей и проблем соединений с MySQL</h3>
<p>Если Вы сталкиваетесь с проблемами, когда Вы пытаетесь соединиться с
сервером MySQL, следующие элементы описывают некоторые планы действий,
которые Вы можете использовать, чтобы исправить проблему.</p>

<ul><li><p>Удостоверьтесь, что сервер работает. Если это не так,
клиенты не могут соединиться. Например, если попытка соединиться с сервером
терпит неудачу с сообщением, как показано ниже,
одна причина могла бы состоять в том, что сервер не работает:
<pre>
shell&gt; mysql
ERROR 2003: Can't connect to MySQL server on '<em><code>host_name</code></em>' (111)
shell&gt; mysql
ERROR 2002: Can't connect to local MySQL server through socket
'/tmp/mysql.sock' (111)
</pre></li>

<li>Могло бы случиться так, что сервер работает, но Вы пытаетесь соединиться
с использованием порта TCP/IP, именованного канала или файла сокета Unix,
отличающемся от того, на котором слушает сервер. Чтобы исправить это, когда
Вы вызываете программу клиента, определите опцию
<a href="programs.htm#option_general_port"><code>--port</code></a>, чтобы
указать на надлежащий номер порта или
<a href="programs.htm#option_general_socket"><code>--socket</code></a>, чтобы
указать на надлежащий канал или файл сокета Unix. Чтобы узнать, где находится
файл сокета, Вы можете использовать эту команду:
<pre>
shell&gt; netstat -ln | grep mysql
</pre></li>

<li>Удостоверьтесь, что сервер не был сконфигурирован, чтобы проигнорировать
сетевые соединения или (если Вы пытаетесь соединиться отдаленно), что он не
был сконфигурирован, чтобы слушать только в местном масштабе на его сетевых
интерфейсах. Если сервер был запущен с
<a href="server.htm#option_mysqld_skip-networking"><code>--skip-networking
</code></a>, это не будет принимать соединения TCP/IP вообще. Если сервер был
запущен с <a href="server.htm#option_mysqld_bind-address"><code>
--bind-address=127.0.0.1</code></a>, это слушает соединения TCP/IP только в
местном масштабе и не будет принимать удаленные соединения.</li>

<li>Проверьте, чтобы удостовериться, что нет никакого блокирующего
брандмауэра. Ваш брандмауэр может быть сконфигурирован на основе приложения
или номера порта, используемого MySQL для коммуникации (3306 по умолчанию).
Под Linux или Unix проверьте свои IP tables, чтобы гарантировать, что порт не
был заблокирован. Под Windows такие приложения, как ZoneAlarm или Windows
Firewall, возможно, должны быть сконфигурированы,
чтобы не заблокировать порт MySQL.</li>

<li>Таблицы привилегий должны быть должным образом настроены так, чтобы
сервер мог использовать их для управления доступом. Для некоторых типов
дистрибутивов (таких как двоичные в Windows или RPM в Linux),
процесс установки инициализирует каталог данных MySQL, включая базу данных
<code>mysql</code>, содержащую таблицы привилегий. Для дистрибутивов, которые
не делают этого, Вы должны инициализировать каталог данных вручную. Для
деталей см. <a href="install.htm#postinstallation">раздел 2.9</a>.</p>

<p>Чтобы определить, должны ли Вы инициализировать таблицы привилегий, ищите
подкаталог <code>mysql</code> в соответствии с каталогом данных. Каталог
данных обычно называют <code>data</code> или <code>var</code>
и расположен в соответствии с Вашим каталогом установки MySQL.
Удостоверьтесь, что есть файл <code>user.MYD</code> в каталоге
<code>mysql</code>. В противном случае инициализируйте каталог данных. После
выполнения этого и запуска сервера, проверьте начальные привилегии,
выполняя эту команду:
<pre>
shell&gt; mysql -u root
</pre>
Сервер должен позволить Вам соединяться без ошибки.</li>

<li>После новой установки Вы должны соединиться с сервером и настроить своих
пользователей и их разрешения на доступ:
<pre>
shell&gt; mysql -u root mysql
</pre>

Сервер должен позволить Вам соединяться без пароля, если Вы инициализировали
MySQL, используя <a href="programs.htm#mysqld"><span><strong>mysqld
--initialize-secure</strong></span></a>, чтобы не создать пароль для
начальной учетной записи <code>root</code> (см.
<a href="install.htm#data-directory-initialization-mysqld">раздел 2.9.1.1
</a>). Это угроза безопасности, таким образом установить пароль для
<code>root</code> надо в то время, как Вы настраиваете свои другие учетные
записи MySQL. Для инструкций по установке начального пароля см.
<a href="install.htm#default-privileges">раздел 2.9.4</a>.</li>

<li>Если Вы обновили существующую установку MySQL к более новой версии, Вы
выполняли <a href="programs.htm#mysql-upgrade"><span><strong>mysql_upgrade
</strong></span></a>? В противном случае сделайте так. Структура таблиц
привилегий иногда изменяется, когда новые способности добавлены, таким
образом, после обновления Вы должны всегда удостоверяться, что у Ваших таблиц
есть текущая структура. Для инструкций см.
<a href="programs.htm#mysql-upgrade">раздел 5.4.5</a>.</li>

<li>Если программа клиента получает следующее сообщение об ошибке,
когда пытается соединиться, это означает, что сервер ожидает пароли в более
новом формате, чем применяет клиент:
<pre>
shell&gt; mysql
Client does not support authentication protocol requested
by server; consider upgrading MySQL client
</pre></li>

<li>Помните, что программы клиента используют параметры соединения,
определенные в файлах опции или переменных окружения. Если программа клиента
посылает неправильные параметры соединения по умолчанию, когда Вы не
определили их в командной строке, проверьте любые применимые файлы опции и
Вашу среду. Например, если Вы получаете <code>Access denied</code>,
когда Вы выполняете клиент без любых опций, удостоверьтесь, что Вы не
определили старый пароль в любом из Ваших файлов опции!</p>

<p>Вы можете подавить использование файлов опции программой клиента, вызывая
это с опцией <a href="programs.htm#option_general_no-defaults">
<code>--no-defaults</code></a>. Например:
<pre>
shell&gt; mysqladmin --no-defaults -u root version
</pre>

Файлы опции, которые используют клиенты, перечислены в
<a href="programs.htm#option-files">разделе 5.2.6</a>.
Переменные окружения перечислены в
<a href="programs.htm#environment-variables">разделе 5.9</a>.</li>

<li>Если Вы получаете следующую ошибку, это означает, что Вы используете
неправильный пароль для <code>root</code>:
<pre>
shell&gt; mysqladmin -u root -p<em><code>xxxx</code></em> ver
Access denied for user 'root'@'localhost' (using password: YES)
</pre>

Если предыдущая ошибка происходит, даже когда Вы не определили пароль, это
означает, что указан неправильный пароль в некотором файле опции. Попробуйте
опцию <a href="programs.htm#option_general_no-defaults"><code>--no-defaults
</code></a> как описано в предыдущем элементе.</p>

<p>См. <a href="#assigning-passwords">раздел 7.3.6</a>.</p>
<p>Если Вы потеряли или забыли пароль <code>root</code>, см.
<a href="error.htm#resetting-permissions">раздел B.5.3.2</a>.</li>

<li>Если Вы изменяете пароль при использовании
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>,
<a href="sql.htm#insert"><code>INSERT</code></a> или
<a href="sql.htm#update"><code>UPDATE</code></a>,
Вы должны зашифровать пароль, используя функцию
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>.
Если Вы не используете <a href="funct.htm#function_password"><code>
PASSWORD()</code></a> для этих запросов не будет работать пароль.
Например, следующий запрос назначает пароль, но не в состоянии зашифровать
его, таким образом, пользователь не в состоянии соединиться позже:
<pre>
SET PASSWORD FOR 'abe'@'<em><code>host_name</code></em>' = 'eagle';
</pre>

Вместо этого установите пароль так:
<pre>
SET PASSWORD FOR 'abe'@'<em><code>host_name</code></em>' = PASSWORD('eagle');
</pre>

Функция <a href="funct.htm#function_password"><code>PASSWORD()</code></a>
является ненужной, когда Вы определяете пароль, используя
<a href="sql.htm#create-user"><code>CREATE USER</code></a> или
<a href="sql.htm#grant"><code>GRANT</code></a> или через
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin password</strong>
</span></a>. Каждый из этих способов автоматически использует
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>, чтобы
зашифровать пароль. См. разделы <a href="#assigning-passwords">
7.3.6</a> и <a href="sql.htm#create-user">14.7.1.3</a>.</li>

<li><code>localhost</code> синоним для Вашего местного имени хоста, а
также узел значения по умолчанию, с которым клиенты пытаются соединиться,
если Вы не определяете имя узла явно.</p>

<p>Вы можете использовать опцию <a href="programs.htm#option_general_host">
<code>--host=127.0.0.1</code></a>, чтобы назвать узел сервера явно. Это
сделает соединение TCP/IP с местным
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>.
Вы можете также использовать TCP/IP, определяя
<a href="programs.htm#option_general_host"><code>--host</code></a>, которая
использует фактическое имя хоста местного узла. В этом случае имя хоста
должно быть определено в строке таблицы <code>user</code> на узле сервера,
даже при том, что Вы выполняете программу клиента на том же самом
узле, где сервер.</li>

<li>Ошибка <code>Access denied</code> говорит, что Вы пытаетесь войти в
систему как хост клиента, от которого Вы пытаетесь соединиться, и
использовали ли Вы пароль. Обычно Вы должны иметь строку в
<code>user</code>, которая точно соответствует имени хоста и пользователя,
которые были даны в сообщении об ошибке. Например, если Вы получаете
сообщение об ошибке, которое содержит <code>using password: NO</code>,
это означает, что Вы попытались войти в систему без пароля. </li>

<li>Если Вы получаете ошибку <code>Access denied</code>, пытаясь соединиться
с базой данных с <code>mysql -u <em><code>user_name</code></em></code>,
у Вас может быть проблема с таблицей <code>user</code>.
Проверьте это, выполняя <code>mysql -u root mysql</code>:
<pre>
SELECT * FROM user;
</pre>

Результат должен включать строку с
<code>Host</code> и <code>User</code>, соответствующими имени хоста Вашего
клиента и Вашему имени пользователя MySQL.</li>

<li>Если следующая ошибка происходит, когда Вы пытаетесь соединиться от узла
кроме того, на котором работает сервер MySQL, это означает, что нет никакой
строки в <code>user</code> с <code>Host</code>, которое
соответствует хосту клиента:
<pre>
Host ... is not allowed to connect to this MySQL server
</pre>
Вы можете установить это, настраивая комбинацию имени хоста клиента и имени
пользователя, которое Вы используете, пытаясь соединиться.</p>

<p>Если Вы не знаете IP-адрес или имя хоста машины, с
которой Вы соединяетесь, Вы должны поместить строку с
<code>'%'</code> в столбец <code>Host</code> таблицы <code>user</code>.
После попытки соединиться от машины клиента, используйте <code>SELECT
USER()</code>, чтобы видеть, как Вы действительно соединялись. Тогда измените
<code>'%'</code> в строке таблицы <code>user</code> к фактическому имени
хоста, которое обнаруживается в журнале. Иначе Ваша система будет с дырой,
потому что она разрешает соединения от любого узла к
данному имени пользователя.</p>

<p>На Linux другая причина, что эта ошибка могла бы произойти, состоит в том,
что Вы используете двоичную версию MySQL, которая собрана с различной версией
<code>glibc</code>, чем та, которую Вы используете.
В этом случае, Вы должны обновить свою операционную систему (или
<code>glibc</code>) или загрузите исходный дистрибутив версии MySQL и
соберите ее непосредственно. RPM обычно тривиален, чтобы собрать и
установить, таким образом, это не большая проблема.</li>

<li>Если Вы определяете имя хоста, пытаясь соединиться, но получаете
сообщение об ошибке, где имя хоста не показано или является IP-адресом, это
означает, что сервер MySQL получил ошибку, пытаясь решить IP-адрес
хоста клиента к имени:
<pre>
shell&gt; mysqladmin -u root -p<em><code>xxxx</code></em> -h <em><code>some_hostname</code></em> ver
Access denied for user 'root'@'' (using password: YES)
</pre>

Если Вы пытаетесь соединиться как <code>root</code> и получаете следующую
ошибку, это означает, что Вы не имеете строки в
<code>user</code> с <code>User</code> = <code>'root'</code>, и
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
не может решить имя хоста для Вашего клиента:
<pre>
Access denied for user ''@'unknown'
</pre>

Эти ошибки указывают на проблему DNS. Чтобы установить это, выполните
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin flush-hosts
</strong></span></a>, чтобы сбросить внутренний кэш узла DNS. См.
<a href="optimiz.htm#host-cache">раздел 9.12.4.2</a>.</p>

<p>Некоторые постоянные решения:</p>
<ul><li><p>Определите что не так с Вашим сервером DNS.</li>
<li>Определите IP-адреса, а не имена хоста в таблицах привилегий MySQL.</li>
<li>Поместите запись для машинного имени клиента в <code>/etc/hosts</code> в
Unix или <code>\windows\hosts</code> в Windows.</li>

<li>Запустите <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с опцией <a href="server.htm#option_mysqld_skip-name-resolve">
<code>--skip-name-resolve</code></a>.</li>

<li>Запустите <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с опцией <a href="server.htm#option_mysqld_skip-host-cache">
<code>--skip-host-cache</code></a>.</li>

<li>В Unix, если Вы выполняете сервер и клиента на той же самой машине,
соединяются с <code>localhost</code>. Для соединений с <code>localhost</code>
программы MySQL пытаются соединиться с локальным сервером при использовании
файла сокета Unix, если нет параметров соединения, определенных, чтобы
гарантировать, что клиент делает соединение TCP/IP. Для получения
дополнительной информации см.
<a href="programs.htm#connecting">раздел 5.2.2</a>.</li>

<li>В Windows, если Вы выполняете сервер и клиента на той же самой машине и
сервер поддерживает именованные каналы, соединяются с именем хоста
<code>.</code> (точка). Это использует канал, а не TCP/IP.</p></li></ul></li>

<li><p>Если <code>mysql -u root</code> работает, но <code>mysql
-h <em><code>your_hostname</code></em> -u root</code> выдает
<code>Access denied</code> (<em><code>your_hostname</code></em> это
фактическое имя хоста местного узла), у Вас не может быть правильного
названия Вашего узла в <code>user</code>.
Типичная проблема здесь состоит в том что <code>Host</code> в
<code>user</code> определяет дисквалифицированное имя хоста, но подпрограммы
разрешения имени Вашей системы возвращают полностью компетентное доменное имя
(или наоборот). Например, если Вы имеете строку с хостом
<code>'pluto'</code> в <code>user</code>, но DNS говорит MySQL, что Ваше имя
хоста <code>'pluto.example.com'</code>, строка не сработает.
Попытайтесь добавить строку к <code>user</code>, которая содержит IP-адрес
Вашего узла как <code>Host</code>. Альтернативно, Вы могли добавить строку к
<code>user</code> с <code>Host</code>, которое содержит подстановочный знак,
например, <code>'pluto.%'</code>. Однако, использование
<code>Host</code> с <code>%</code> <span><em>опасно</em></span>!</li>

<li>Если <code>mysql -u <em><code>user_name</code></em></code> работает, а
<code>mysql -u <em><code>user_name</code></em>
<em><code>some_db</code></em></code> нет, Вы не предоставили доступ данному
пользователю для базы данных <em><code>some_db</code></em>.</li>

<li>Если <code>mysql -u <em><code>user_name</code></em></code> работает,
когда выполнено на узле сервера, но <code>mysql -h
<em><code>host_name</code></em> -u  <em><code>user_name</code></em></code>
не работает, когда выполнено на отдаленном хосте клиента, Вы не включили
доступу к серверу для данного имени пользователя с отдаленного узла.</li>

<li>Если Вы не можете выяснить, почему Вы получаете <code>Access
denied</code>, удалите из <code>user</code> все строки, которые имеют
<code>Host</code>, содержащие подстановочные знаки (строки, которые содержат
<code>'%'</code> или <code>'_'</code>).
Очень распространенная ошибка состоит в том, чтобы вставить новую строку с
<code>Host</code>=<code>'%'</code> и
<code>User</code>=<code>'<em><code>some_user</code></em>'</code>,
думая, что это позволяет Вам определить <code>localhost</code>, чтобы
соединяться от той же самой машины. Причина, почему это не работает, состоит
в том, что привилегии по умолчанию включают строку с
<code>Host</code>=<code>'localhost'</code> и
<code>User</code>=<code>''</code>. Поскольку у этой строки есть
<code>Host</code> = <code>'localhost'</code>, что является более
определенным, чем <code>'%'</code>, это используется в предпочтении к новой
строке, соединяясь от <code>localhost</code>! Правильная процедура должна
вставить вторую строку с <code>Host</code>=<code>'localhost'</code> и
<code>User</code>=<code>'<em><code>some_user</code></em>'</code> или
удалить строку с <code>Host</code>=<code>'localhost'</code> и
<code>User</code>=<code>''</code>. После удаления строки надо выполнить
<a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a> для перезагрузки
таблиц, см. <a href="#connection-access">раздел 7.2.5</a>.</li>

<li>Если Вы в состоянии соединиться с сервером MySQL, но получаете
<code>Access denied</code> при выполнении
<a href="sql.htm#select-into"><code>SELECT ... INTO OUTFILE</code></a> или
<a href="sql.htm#load-data"><code>LOAD DATA INFILE</code></a>,
Ваша строка в <code>user</code> не имеет привилегии
<a href="#priv_file"><code>FILE</code></a>.</li>

<li>Если Вы изменяете таблицы привилегий непосредственно (например, при
использовании <a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a>) и Ваши изменения
проигнорированы, Вы должны выполнить
<a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a> или
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin flush-privileges
</strong></span></a>, чтобы заставить сервер перезагружать таблицы
привилегии. Иначе Ваши изменения не имеют никакого эффекта до следующего
раза, когда сервер перезапущен. Помните, что после того, как Вы изменяете
пароль <code>root</code> с <a href="sql.htm#update"><code>UPDATE</code></a>,
Вы не должны будете определить новый пароль, пока не сбросите привилегии,
потому что сервер не будет знать, что Вы изменили пароль!</li>

<li>Если Ваши привилегии изменились в середине сеанса, может случиться так,
что администратор MySQL изменил их. Перезагрузка таблиц привилегий
затрагивает новые соединения клиента, но она также затрагивает существующие
соединения как обозначено в <a href="#privilege-changes">разделе
7.2.7</a>.</li>

<li>Если у Вас есть проблемы доступа с Perl, PHP, Python или ODBC,
попробуйте соединиться с сервером с <code>mysql -u
<em><code>user_name</code></em> <em><code>db_name</code></em></code> или
<code>mysql -u <em><code>user_name</code></em> -p<em><code>your_pass</code>
</em> <em><code>db_name</code></em></code>. Если Вы в состоянии соединиться с
использованием <a href="programs.htm#mysql"><span><strong>mysql</strong>
</span></a>, проблема связана с Вашей программой, не с привилегиями доступа.
Нет никакого пробела между <code>-p</code> и паролем, Вы можете также
использовать <a href="programs.htm#option_general_password"><code>
--password=<em><code>your_pass</code></em></code></a>, чтобы определить
пароль. Если Вы используете опцию <code>-p</code> или
<a href="programs.htm#option_general_password"><code>--password</code></a>
без значения пароля, MySQL запрашивает у Вас пароль.</li>

<li>Для того, чтобы проверить, запустите <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> с опцией
<a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a>. Тогда Вы можете изменить таблицы привилегий
MySQL и использовать <a href="sql.htm#show-grants"><code>SHOW GRANTS</code>
</a> для проверки, имеют ли Ваши модификации желаемый эффект. Когда Вы
удовлетворены своими изменениями, выполните
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin
flush-privileges</strong></span></a>, чтобы сказать
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
перезагружать привилегии. Это позволяет Вам начать использовать новое
табличное содержание привилегий, не останавливая и перезапуская сервер.</li>

<li>Если все остальное терпит неудачу, запустите
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
с опцией отладки (например, <a href="server.htm#option_mysqld_debug"><code>
--debug=d,general,query</code></a>). Это печатает узел и информацию о
пользователе о предпринятых соединениях и информацию о каждой команде. См.
<a href="extend.htm#dbug-package">раздел 26.5.3</a>.</li>

<li>Если Вы имеете какие-либо другие проблемы с таблицами привилегий MySQL и
чувствуете, что должны отправить проблему в список рассылки, всегда надо
обеспечить дамп таблиц привилегий MySQL. Вы можете вывести таблицы с
помощью <a href="programs.htm#mysqldump"><span><strong>mysqldump mysql
</strong></span></a>. Чтобы зарегистрировать отчет об ошибках, см.
инструкции в <a href="intro.htm#bug-reports">разделе 1.7</a>.
В некоторых случаях Вы, возможно, должны перезапустить
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
опцией <a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a>, чтобы выполнить
<a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span></a>.
</p></li></ul>

<h2><a name="user-account-management"></a>7.3.
Управление учетной записью пользователя MySQL</h2>
<p>Этот раздел описывает, как настроить учетные записи
клиентов Вашего сервера MySQL. Это обсуждает следующие темы:</p>

<ul><li><p>Значение имен учетной записи и паролей в MySQL и как это
сравнивается с именами и паролями, используемыми
Вашей операционной системой.</li>

<li>Как настроить новые учетные записи и удалить
существующие учетные записи.</li>
<li>Как использовать роли, которые называют наборами привилегий.</li>

<li>Как изменить пароли.</li>
<li>Направляющие линии для того, чтобы использовать пароли надежно.
</p></li></ul>
<p>См. <a href="sql.htm#account-management-sql">раздел 14.7.1</a>.</p>

<h3><a name="user-names"></a>7.3.1. Имена пользователя и пароли</h3>
<p>MySQL хранит учетные записи в таблице <code>user</code> базы данных
<code>mysql</code>. Учетная запись определена с точки зрения имени
пользователя и хоста клиента или места, от которого пользователь может
соединиться с сервером. Для информации о представлении учетной записи в
таблице <code>user</code> см. <a href="#grant-tables">раздел
7.2.2</a>.</p>

<p>У учетной записи может также быть пароль. MySQL поддерживает плагины
аутентификации, таким образом, возможно, что учетная запись подтверждает
подлинность с использованием некоторого внешнего метода аутентификации. См.
<a href="#pluggable-authentication">раздел 7.3.9</a>.</p>

<p>Есть несколько различий между способом, которым имена пользователя и
пароли используются MySQL и Вашей операционной системой:</p>

<ul><li><p>Имена пользователя, использующиеся MySQL в целях аутентификации,
не имеют никакого отношения к именам пользователя (имена для входа в систему)
Windows или Unix. В Unix большинство клиентов MySQL по умолчанию пытается
войти в систему, используя текущее имя пользователя Unix в качестве имени
пользователя MySQL, но это только для удобства. Значение по умолчанию может
быть переопределено легко, потому что программы клиента разрешают любому
имени пользователя быть определенным с опцией <code>-u</code> или
<code>--user</code>. Это означает, что любой может попытаться соединиться с
сервером, используя любое имя пользователя, таким образом, Вы не можете
сделать базу данных безопасной ни в каком случае, если у всех учетных записей
MySQL нет паролей. Любой, кто определяет имя пользователя для учетной записи,
у которой нет никакого пароля, в состоянии соединиться успешно с сервером.
</li>

<li>Имена пользователя MySQL могут быть до 32 символов в длину.
Имена пользователя операционной системы могут иметь различную максимальную
длину. Например, имена пользователя Unix, как правило,
ограничиваются восемью символами.</p>

<p>Предел длины имени пользователя MySQL жестко задан в серверах MySQL и
клиентах, попытка обойти это, изменяя определения таблиц в базе данных
<code>mysql</code> <span><em>не сработает</em></span>.</p>

<p>Вы никогда не должны изменять структуру таблиц в базе данных
<code>mysql</code> в любой манере вообще кроме как посредством процедуры,
которая описана в <a href="programs.htm#mysql-upgrade">разделе 5.4.5</a>.
Попытка пересмотреть системные таблицы MySQL любым другим способом приводит к
неопределенному поведению. Сервер свободен проигнорировать строки, которые
становятся неправильными в результате таких модификаций.</p></li>

<li><p>Подтверждая подлинность соединений клиента для учетных записей,
которые используют аутентификацию MySQL (осуществленную плагином
<code>mysql_native_password</code>), сервер использует пароли, сохраненные в
таблице <code>user</code>. Эти пароли отличны от паролей для того, чтобы
войти в систему в ОС. Нет никакого необходимого соединения между
<span><span>внешним</span></span> паролем в Windows или Unix и
и паролем, который Вы используете, чтобы получить доступ к серверу MySQL
на той машине.</p>

<p>Если сервер подтверждает подлинность клиента, использующего некоторый
другой плагин, метод аутентификации, плагин, возможно, не использует пароль,
сохраненный в таблице <code>user</code>. В этом случае, возможно, что внешний
пароль также используется, чтобы подтвердить подлинность серверу MySQL.</li>

<li>Пароли, сохраненные в таблице <code>user</code>,
зашифрованы, используя определенные для плагина алгоритмы.</li>
<li>Если имя пользователя и пароль содержат только символы ASCII, возможно
соединиться с сервером независимо от настроек набора символов. Чтобы
соединиться, когда имя пользователя или пароль содержат символы не ASCII,
клиент должен вызвать функцию C API
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a> с
опцией <code>MYSQL_SET_CHARSET_NAME</code> и указать соответствующий набор
символов как параметр. Это заставляет аутентификацию использовать указанный
набор символов. Иначе аутентификация потерпит неудачу, если набор символов
по умолчанию сервера не будет тем же самым.</p>

<p>Стандартные программы клиента MySQL поддерживают опцию
<code>--default-character-set</code>, которая вызывает
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>,
как только что описано. Кроме того, автоматическое обнаружение набора
символов поддержано, как описано в
<a href="global.htm#charset-connection">разделе 11.1.4</a>.
Для программ, которые используют соединитель, который не основан на C API,
соединитель может обеспечить эквивалент
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>.
Проверьте документацию соединителя.</p>

<p>Предыдущие примечания не применяются к <code>ucs2</code>,
<code>utf16</code> и <code>utf32</code>,
которые не разрешены как наборы символов клиента.</p></li></ul>

<p>Процесс установки MySQL заполняет таблицы привилегий с начальной
записью <code>root</code>, см. <a href="install.htm#default-privileges">
раздел 2.9.4</a>, который также обсуждает, как назначить пароли. После этого
Вы обычно настраиваете, изменяете и удаляете учетные записи MySQL, используя
запросы <a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#drop-user"><code>DROP USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a>. См.
<a href="sql.htm#account-management-sql">раздел 14.7.1</a>.</p>

<p>Чтобы соединиться с сервером MySQL с клиентом командной строки, определите
имя пользователя и опции пароля по мере необходимости для учетной записи,
которую Вы хотите использовать:
<pre>
shell&gt; mysql --user=monty --password <em><code>db_name</code></em>
</pre>

Если Вы предпочитаете короткие опции, команда похожа на это:
<pre>
shell&gt; mysql -u monty -p <em><code>db_name</code></em>
</pre>

Если Вы опускаете значение пароля после опции
<a href="programs.htm#option_general_password"><code>--password</code></a>
или <code>-p</code> (как показано), клиент запрашивает его.
Альтернативно, пароль может быть определен в командной строке:
<pre>
shell&gt; mysql --user=monty --password=<em><code>password</code></em> <em><code>db_name</code></em>
shell&gt; mysql -u monty -p<em><code>password</code></em> <em><code>db_name</code></em>
</pre>

Если Вы используете опцию <code>-p</code>, не должно быть
<span class="emphasis"><em>никакого пробела</em></span> между <code>-p</code>
и следующим значением пароля.</p>

<p>Определение пароля в командной строке нужно считать опасным. См.
<a href="#password-security-user">раздел 7.1.2.1</a>.
Вы можете использовать файл опции или файл входа в систему, чтобы избежать
задавать пароль в командной строке. См. разделы
<a href="programs.htm#option-files">5.2.6</a> и
<a href="programs.htm#mysql-config-editor">5.6.7</a>.</p>
<p>См. <a href="programs.htm#connecting">раздел 5.2.2</a>.</p>

<h3><a name="adding-users"></a>7.3.2. Добавление учетных записей пользователя
</h3>
<p>Вы можете создать учетные записи MySQL двумя путями:</p>
<ul><li><p>При использовании запросов, предназначенных для того, чтобы
создать учетные записи и их привилегии,
<a href="sql.htm#create-user"><code>CREATE USER</code></a> и
<a href="sql.htm#grant"><code>GRANT</code></a>. Эти запросы заставляют сервер
делать соответствующие модификации к основным таблицам привилегий.</li>

<li>Управляя таблицами привилегий непосредственно такими запросами, как
<a href="sql.htm#insert"><code>INSERT</code></a>,
<a href="sql.htm#update"><code>UPDATE</code></a> или
<a href="sql.htm#delete"><code>DELETE</code></a>.</p></li></ul>

<p>Привилегированный метод должен использовать запросы управления, потому что
они более кратки и менее подвержены ошибкам, чем управление таблицами
привилегий непосредственно. Все такие запросы описаны в
<a href="sql.htm#account-management-sql">разделе 14.7.1</a>.
Прямая работа с таблицами привилегий не описана здесь. Сервер свободен
проигнорировать строки, которые становятся ошибочными
в результате таких модификаций.</p>

<p>Другая опция для того, чтобы создать учетные записи должна использовать
инструмент GUI MySQL Workbench. Кроме того, несколько имеющих отношение к
третьей стороне программ предлагают управление учетными записями MySQL.
В частности, это <code>phpMyAdmin</code>.</p>

<p>Следующие примеры показывают, как использовать
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>, чтобы
настроить новые учетные записи. Эти примеры предполагают, что привилегии были
настроены согласно значениям по умолчанию, описанным в
<a href="install.htm#default-privileges">разделе 2.9.4</a>.
Это означает, что, чтобы произвести изменения, Вы должны соединиться с
сервером MySQL как пользователь MySQL <code>root</code>, который имеет
доступ <a href="#priv_create-user"><code>CREATE USER</code></a>.
</p>

<p>Используйте <a href="programs.htm#mysql"><span><strong>mysql</strong>
</span></a>, чтобы соединиться с сервером:
<pre>
shell&gt; mysql --user=root mysql
</pre>
Если Вы назначили пароль на <code>root</code>, Вы должны также указать опцию
<code>--password</code> или <code>-p</code>.</p>

<p>После соединения с сервером как <code>root</code>, Вы можете добавить
новые учетные записи. Следующий пример использует
<a href="sql.htm#create-user"><code>CREATE USER </code></a> и
<a href="sql.htm#grant"><code>GRANT</code></a>:
<pre>
mysql&gt; CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass';
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'
    -&gt;       WITH GRANT OPTION;
mysql&gt; CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass';
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'
    -&gt;       WITH GRANT OPTION;
mysql&gt; CREATE USER 'admin'@'localhost' IDENTIFIED BY 'admin_pass';
mysql&gt; GRANT RELOAD,PROCESS ON *.* TO 'admin'@'localhost';
mysql&gt; CREATE USER 'dummy'@'localhost';
</pre>
У учетных записей, создаваемых этими запросами, есть следующие свойства:</p>

<ul><li><p>У двух учетных записей есть имя пользователя <code>monty</code> и
пароль <code>some_pass</code>. Это суперпользователи с полными привилегиями
сделать что-либо. <code>'monty'@'localhost'</code> может использоваться
только соединяясь от местного узла. <code>'monty'@'%'</code> использует
символ подстановки <code>'%'</code> для части узла, таким образом, это может
использоваться, чтобы соединиться от любого узла.</p>

<p><code>'monty'@'localhost'</code> необходим, если есть анонимная учетная
запись пользователя для <code>localhost</code>. Без
<code>'monty'@'localhost'</code> та анонимная учетная запись пользователя
имеет приоритет, когда <code>monty</code> соединяется от местного узла и
<code>monty</code> обработан как анонимный пользователь. Причина этого
состоит в том, что у анонимной учетной записи пользователя есть более
определенное значение <code>Host</code>, чем у <code>'monty'@'%'</code>
и таким образом она окажется раньше в порядке сортировки таблицы
<code>user</code>, см. <a href="#connection-access">раздел 7.2.5
</a>.</li>

<li><code>'admin'@'localhost'</code> имеет пароль <code>admin_pass</code>.
Эта учетная запись может использоваться только <code>admin</code>, чтобы
соединяться от местного узла. Этому предоставляют привилегии
<a href="#priv_reload"><code>RELOAD</code></a> и
<a href="#priv_process"><code>PROCESS</code></a>.
Эти привилегии разрешают <code>admin</code> выполнить
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin reload</strong>
</span></a>, <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
refresh</strong></span></a> и <a href="programs.htm#mysqladmin"><span>
<strong>mysqladmin flush-<em><code>xxx</code></em></strong></span></a>,
так же как <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
processlist</strong></span></a>. Никакие привилегии не предоставляют для
того, чтобы получить доступ к любым базам данных.</li>

<li>У <code>'dummy'@'localhost'</code> нет никакого пароля (что опасно). Эта
учетная запись может использоваться только, чтобы соединиться от местного
узла. Никакие привилегии не предоставляются. Предполагается, что Вы
предоставите определенные привилегии учетной записи через
<a href="sql.htm#grant"><code>GRANT</code></a>.</p></li></ul>

<p>Чтобы видеть привилегии для учетной записи, надо использовать
<a href="sql.htm#show-grants"><code>SHOW GRANTS</code></a>:
<pre>
mysql&gt; SHOW GRANTS FOR 'admin'@'localhost';
+-----------------------------------------------------+
| Grants for admin@localhost                          |
+-----------------------------------------------------+
| GRANT RELOAD, PROCESS ON *.* TO 'admin'@'localhost' |
+-----------------------------------------------------+
</pre>

Чтобы видеть свойства не привилегии для учетной записи, надо использовать
<a href="sql.htm#show-create-user"><code>SHOW CREATE USER</code></a>:
<pre>
mysql&gt; SHOW CREATE USER 'admin'@'localhost'\G
*************************** 1. row ***************************
CREATE USER for admin@localhost: CREATE USER 'admin'@'localhost'
       IDENTIFIED WITH 'mysql_native_password'
       AS '*67ACDEBDAB923990001F0FFB017EB8ED41861105'
       REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK
</pre>

Следующие примеры создают три учетных записи и предоставляют им доступ к
определенным базам данных. У каждой из них есть имя пользователя
<code>custom</code> и пароль <code>obscure</code>:
<pre>
mysql&gt; CREATE USER 'custom'@'localhost' IDENTIFIED BY 'obscure';
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;       ON bankaccount.* TO 'custom'@'localhost';
mysql&gt; CREATE USER 'custom'@'host47.example.com' IDENTIFIED BY 'obscure';
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;       ON expenses.* TO 'custom'@'host47.example.com';
mysql&gt; CREATE USER 'custom'@'%.example.com' IDENTIFIED BY 'obscure';
mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
    -&gt;       ON customer.* TO 'custom'@'%.example.com';
</pre>
Три учетных записи могут использоваться следующим образом:</p>

<ul><li><p>Первая учетная запись может получить доступ к базе данных
<code>bankaccount</code>, но только от местного узла.</li>
<li>Вторая учетная запись может получить доступ к базе данных
<code>expenses</code>, но только от узла
<code>host47.example.com</code>.</li>

<li>Третья учетная запись может получить доступ к базе данных
<code>customer</code> от любого узла в домене <code>example.com</code>.
У этой учетной записи есть доступ от всех машин в домене из-за использования
подстановочного символа <code>%</code> в части имени узла учетной записи.
</p></li></ul>

<h3><a name="removing-users"></a>7.3.3. Удаление учетных записей пользователя
</h3>
<p>Чтобы удалить учетную запись, используйте
<a href="sql.htm#drop-user"><code>DROP USER</code></a>,
который описан в <a href="sql.htm#drop-user">разделе 14.7.1.5</a>. Например:
<pre>
mysql&gt; DROP USER 'jeffrey'@'localhost';
</pre>

<h3><a name="roles"></a>7.3.4. Используя роли</h3>
<p>В MySQL роль это названный набор привилегий. Как учетным записям
пользователя, ролям можно предоставить привилегии.</p>

<p>Учетным записям пользователя можно предоставить роли, которые
предоставляют ролевые привилегии. Это включает удобное назначение наборов
привилегий учетным записям, не имея необходимости
предоставлять отдельные привилегии.</p>

<p>Чтобы управлять ролями, используйте запросы
<a href="sql.htm#create-role"><code>CREATE ROLE</code></a>,
<a href="sql.htm#drop-role"><code>DROP ROLE</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke-role"><code>REVOKE ROLE</code></a>.
Следующее обсуждение обеспечивает примеры ролевого использования. Для
описаний отдельных запросов ролевой манипуляции см.
<a href="sql.htm#account-management-sql">раздел 14.7.1</a>.</p>

<p>Предположите, что приложение использует базу данных
<code>app_db</code>. Могут быть учетные записи пользователя разработчиков,
которые создают и поддерживают приложение, и пользователей, которые
взаимодействуют с ним. Разработчики нуждаются в полном доступе к базе данных.
Некоторые пользователи должны только читать, а некоторые пользователи
нуждаются в доступе чтения-записи.</p>

<p>Чтобы избежать предоставлять необходимые наборы привилегий
многим учетным записям, создайте роли для тех наборов привилегий.
Это облегчает предоставлять необходимые привилегии учетным записям
пользователя, предоставляя соответствующие роли.</p>

<p>Чтобы создать роли, надо использовать <a href="sql.htm#create-role">
<code>CREATE ROLE</code></a>:
<pre>
CREATE ROLE 'app_developer', 'app_read', 'app_write';
</pre>

Чтобы назначить привилегии на эти роли, надо использовать
<a href="sql.htm#grant"><code>GRANT</code></a> так же, как
назначая привилегии на учетные записи пользователя:
<pre>
GRANT ALL ON app_db.* TO 'app_developer';
GRANT SELECT ON app_db.* TO 'app_read';
GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
</pre>

Теперь предположите, что первоначально Вы должны создать одну учетную запись
разработчика, две учетных записи, которые нуждаются в доступе только для
чтения, и одну учетную запись, которая нуждается в доступе чтения-записи.
Примените <a href="sql.htm#create-user"><code>CREATE USER</code></a>, чтобы
создать учетные записи:
<pre>
CREATE USER 'dev1'@'localhost' IDENTIFIED BY 'dev1pass';
CREATE USER 'read_user1'@'localhost' IDENTIFIED BY 'read_user1pass';
CREATE USER 'read_user2'@'localhost' IDENTIFIED BY 'read_user2pass';
CREATE USER 'rw_user1'@'localhost' IDENTIFIED BY 'rw_user1pass';
</pre>

Чтобы назначить каждой учетной записи необходимые привилегии, Вы могли бы
использовать <code>GRANT</code>, но это требует перечисления привилегий для
каждого пользователя. Вместо этого используйте
<a href="sql.htm#grant"><code>GRANT</code></a>, который разрешает
предоставлять роли, а не привилегии:
<pre>
GRANT 'app_developer' TO 'dev1'@'localhost';
GRANT 'app_read' TO 'read_user1'@'localhost', 'read_user2'@'localhost';
GRANT 'app_read', 'app_write' TO 'rw_user1'@'localhost';
</pre>
<code>rw_user1</code> предоставляют роли чтения и записи, которые
объединяются, чтобы обеспечить необходимые привилегии чтения-записи.</p>

<p><code>GRANT</code> для того, чтобы предоставить роли учетной записи
отличается от синтаксиса для того, чтобы предоставить привилегии. Чтобы
назначить привилегии, есть <code>ON</code>, тогда как, чтобы назначить
роли <code>ON</code> нет. Поскольку синтаксисы отличны, Вы не можете смешать
назначение привилегий и ролей в том же самом запросе. Разрешено назначить
привилегии и роли учетной записи, но Вы должны использовать отдельные запросы
<a href="sql.htm#grant"><code>GRANT</code></a>, каждый со своим синтаксисом.
</p>

<p>Чтобы проверить назначения привилегии, надо использовать
<a href="sql.htm#show-grants"><code>SHOW GRANTS</code></a>. Например:
<pre>
mysql&gt; SHOW GRANTS FOR 'dev1'@'localhost';
+-------------------------------------------------+
| Grants for dev1@localhost                       |
+-------------------------------------------------+
| GRANT USAGE ON *.* TO `dev1`@`localhost`        |
| GRANT `app_developer`@`%` TO `dev1`@`localhost` |
+-------------------------------------------------+
</pre>

Однако, это показывает каждую предоставленную роль без
<span><span>раскрытия</span></span> ее к привилегиям, которые представляет
роль. Чтобы показать ролевые привилегии также, добавьте <code>USING</code>,
называя предоставленные роли, для которых нужно вывести на экран привилегии:
<pre>
mysql&gt; SHOW GRANTS FOR 'dev1'@'localhost' USING 'app_developer';
+----------------------------------------------------------+
| Grants for dev1@localhost                                |
+----------------------------------------------------------+
| GRANT USAGE ON *.* TO `dev1`@`localhost`                 |
| GRANT ALL PRIVILEGES ON `app_db`.* TO `dev1`@`localhost` |
| GRANT `app_developer`@`%` TO `dev1`@`localhost`          |
+----------------------------------------------------------+
</pre>

Проверьте тип пользователя так же:
<pre>
mysql&gt; SHOW GRANTS FOR 'rw_user1'@'localhost'
    -&gt;      USING 'app_read', 'app_write';
+------------------------------------------------------------------------------+
| Grants for rw_user1@localhost                                                |
+------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `rw_user1`@`localhost`                                 |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `app_db`.* TO `rw_user1`@`localhost` |
| GRANT `app_read`@`%`,`app_write`@`%` TO `rw_user1`@`localhost`               |
+------------------------------------------------------------------------------+

mysql&gt; SHOW GRANTS FOR 'read_user1'@'localhost' USING 'app_read';
+--------------------------------------------------------+
| Grants for read_user1@localhost                        |
+--------------------------------------------------------+
| GRANT USAGE ON *.* TO `read_user1`@`localhost`         |
| GRANT SELECT ON `app_db`.* TO `read_user1`@`localhost` |
| GRANT `app_read`@`%` TO `read_user1`@`localhost`       |
+--------------------------------------------------------+
</pre>

Если Вы не выводите на экран информацию для своей собственной учетной записи,
<code>USING</code> требует привилегию
<a href="#priv_super"><code>SUPER</code></a>.</p>

<p>Предоставление ролей учетной записи не заставляет их использоваться
автоматически. Чтобы определить, какие роли должны стать активными каждый
раз, когда учетная запись соединяется с сервером и подтверждает подлинность,
надо использовать <a href="sql.htm#set-default-role"><code>SET DEFAULT ROLE
</code></a>. Чтобы установить значение по умолчанию во все роли для каждой
учетной записи, используйте этот запрос:
<pre>
SET DEFAULT ROLE ALL TO 'dev1'@'localhost', 'read_user1'@'localhost',
    'read_user2'@'localhost',
    'rw_user1'@'localhost';
</pre>

Изменение привилегий, предоставленных роли также, затрагивает любого
пользователя с этой ролью. Предположите, что Вы хотите временно сделать всех
пользователей приложения пользователями только для чтения. Чтобы сделать это,
отмените привилегии модификации от роли <code>app_write</code>:
<pre>
REVOKE INSERT, UPDATE, DELETE ON app_db.* FROM 'app_write';
</pre>

Когда это происходит, роль будет без привилегий вообще. Это может быть
замечено, используя <a href="sql.htm#show-grants"><code>SHOW GRANTS</code>
</a> (это демонстрирует, что этот запрос может использоваться с ролями):
<pre>
mysql&gt; SHOW GRANTS FOR 'app_write';
+---------------------------------------+
| Grants for app_write@%                |
+---------------------------------------+
| GRANT USAGE ON *.* TO `app_write`@`%` |
+---------------------------------------+
</pre>

Поскольку отмена привилегии от ролей затрагивает привилегии для любого
пользователя, которому назначали измененную роль, <code>rw_user1</code>
теперь не имеет никаких привилегий модификации:
<pre>
mysql&gt; SHOW GRANTS FOR 'rw_user1'@'localhost'
    -&gt;      USING 'app_read', 'app_write';
+----------------------------------------------------------------+
| Grants for rw_user1@localhost                                  |
+----------------------------------------------------------------+
| GRANT USAGE ON *.* TO `rw_user1`@`localhost`                   |
| GRANT SELECT ON `app_db`.* TO `rw_user1`@`localhost`           |
| GRANT `app_read`@`%`,`app_write`@`%` TO `rw_user1`@`localhost` |
+----------------------------------------------------------------+
</pre>

В действительности пользователь <code>rw_user1</code> с правами чтения-записи
стал пользователем только для чтения. Это также происходит для любых других
учетных записей, которым предоставляют те же самые роли.
Не нужно менять привилегии для каждой такой учетной записи индивидуально.</p>

<p>Чтобы восстановить привилегии модификации к роли, просто
повторно предоставьте их:
<pre>
GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
</pre>
<code>rw_user1</code> снова имеет привилегии модификации (также, как и любые
другие учетные записи с этой ролью).</p>

<p>Одна вещь, не очевидная из предыдущего обсуждения, состоит в том, что имя
роли, как имя пользователя, состоит из части имени пользователя и части имени
хоста в формате <code>'<em><code>user_name</code></em>'@'<em><code>host_name
</code></em>'</code>. Если часть узла отсутствует, она принимает значение по
умолчанию <code>%</code>, что означает, что имена ролей
<code>'app_developer'</code>, <code>'app_read'</code> и
<code>'app_write'</code>, создаваемые ранее, фактически
<code>'app_developer'@'%'</code>, <code>'app_read'@'%'</code> и
<code>'app_write'@'%'</code>. См. <a href="#role-names">раздел
7.2.4</a>.</p>

<h3><a name="user-resources"></a>7.3.5.
Задание пределов ресурсов для учетной записи</h3>
<p>Одно средство ограничения использования клиентом ресурсов сервера MySQL
состоит в том, чтобы установить глобальную переменную
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> к ненулевому значению. Это ограничивает число одновременных
соединений, которые могут быть сделаны любым пользователем, но не
устанавливает границ того, что клиент может сделать, когда соединится.
Кроме того, установка <a href="server.htm#sysvar_max_user_connections"><code>
max_user_connections</code></a> не включает управление отдельными учетными
записями. Оба типа управления представляют интерес для администраторов MySQL.
</p>

<p>Чтобы обратиться к таким проблемам, MySQL разрешает пределы для отдельных
учетных записей на использование этих ресурсов сервера:</p>
<ul><li><p>В час может быть ограниченное число запросов.</li>
<li>В час может быть ограниченное число обновлений.</li>
<li>Сколько раз учетная запись может соединиться с сервером в час.</li>
<li>Число одновременных соединений с сервером учетной записи.</p></li></ul>

<p>Любой запрос считается, если его результаты не поданы от кэша запроса.
Только запросы, которые изменяют базы данных или таблицы, учитываются при
расчете предела обновления.</p>

<p><span><span>account</span></span> в этом контексте соответствует строке в
таблице <code>mysql.user</code>. Таким образом, соединение оценено против
<code>User</code> и <code>Host</code> в таблице <code>user</code>, которая
относится к соединению. Например, учетная запись
<code>'usera'@'%.example.com'</code> соответствует строке в
<code>user</code>, которая имеет <code>User</code> и <code>Host</code>,
равные <code>usera</code> и <code>%.example.com</code>, чтобы разрешить
<code>usera</code> соединяться от любого узла в домене
<code>example.com</code>. В этом случае, сервер применяет пределы ресурса в
этой строке все вместе ко всем соединениям <code>usera</code>
от любого узла в домене <code>example.com</code>, потому что все такие
соединения используют ту же самую учетную запись.</p>

<p>До MySQL 5.0.3 <span><span>account</span></span> был оценен против
фактического узла, от которого соединяется пользователь. Этот более старый
метод учета может быть выбран, запуская сервер с опцией
<a href="server.htm#option_mysqld_old-style-user-limits"><code>
--old-style-user-limits</code></a>. В этом случае, если <code>usera</code>
соединяется одновременно от <code>host1.example.com</code> и
<code>host2.example.com</code>, сервер применяет пределы ресурса учетной
записи отдельно к каждому соединению. Если <code>usera</code>
соединяется снова от <code>host1.example.com</code>, сервер применяет
пределы для этого соединения вместе с существующим соединением от этого узла.
</p>

<p>Чтобы установить пределы ресурса для учетной записи во время создания
учетной записи, используйте <a href="sql.htm#create-user"><code>CREATE USER
</code></a>. Чтобы изменить пределы для существующей учетной записи, надо
использовать <a href="sql.htm#alter-user"><code>ALTER USER</code></a>.
Обеспечьте параметр <code>WITH</code>, который называет каждый ресурс,
который будет ограничен. Значение по умолчанию для каждого предела ноль
(никакого предела). Например, чтобы создать новую учетную запись, которая
может получить доступ к базе данных <code>customer</code>,
но только ограниченным способом, сделайте эти запросы:
<pre>
mysql&gt; CREATE USER 'francis'@'localhost' IDENTIFIED BY 'frank'
    -&gt;        WITH MAX_QUERIES_PER_HOUR 20
    -&gt;        MAX_UPDATES_PER_HOUR 10 MAX_CONNECTIONS_PER_HOUR 5
    -&gt;        MAX_USER_CONNECTIONS 2;
</pre>

Типы предела нельзя все назвать в <code>WITH</code>,
но названные могут присутствовать в любом порядке. Значение для каждого
почасового лимита должно быть целым числмо, представляющим количество в час.
Для <code>MAX_USER_CONNECTIONS</code> предел это целое число, представляющее
максимальное количество одновременных соединений с учетной записью. Если этот
предел установлен к нолю, глобальная переменная
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> определяет число одновременных соединений. Если
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> также ноль, нет никакого предела для учетной записи.</p>

<p>Чтобы изменить пределы для существующей учетной записи, используйте
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>.
Следующий запрос изменяет предел запросов для <code>francis</code> на 100:
<pre>
mysql&gt; ALTER USER 'francis'@'localhost' WITH MAX_QUERIES_PER_HOUR 100;
</pre>
Запрос изменяет только определенное предельное значение.</p>

<p>Чтобы удалить предел, установите его значение в ноль. Например, чтобы
удалить предел, сколько раз в час <code>francis</code>
может соединиться, надо использовать этот запрос:
<pre>
mysql&gt; ALTER USER 'francis'@'localhost' WITH MAX_CONNECTIONS_PER_HOUR 0;
</pre>

Как упомянуто ранее, предел одновременного соединения для учетной записи
определен <code>MAX_USER_CONNECTIONS</code> и переменной
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a>. Предположите, что глобальное значение
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> = 10 и три учетных записи, определили отдельные пределы
ресурса следующим образом:
<pre>
ALTER USER 'user1'@'localhost' WITH MAX_USER_CONNECTIONS 0;
ALTER USER 'user2'@'localhost' WITH MAX_USER_CONNECTIONS 5;
ALTER USER 'user3'@'localhost' WITH MAX_USER_CONNECTIONS 20;
</pre>

<code>user1</code> имеет предел соединения 10 (глобальное значение
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a>), потому что у этого есть <code>MAX_USER_CONNECTIONS</code> = 0.
<code>user2</code> и <code>user3</code> имеют пределы соединения 5 и 20,
соответственно, потому что они имеют отличный от нуля
<code>MAX_USER_CONNECTIONS</code>.</p>

<p>Сервер хранит пределы ресурса для учетной записи в строке таблицы
<code>user</code>, соответствующей учетной записи. Столбцы
<code>max_questions</code>, <code>max_updates</code> и
<code>max_connections</code> хранят почасовые пределы и столбец
<code>max_user_connections</code> хранит лимит
<code>MAX_USER_CONNECTIONS</code>. См.
<a href="#grant-tables">раздел 7.2.2</a>.</p>

<p>Подсчет использования ресурса имеет место, когда любой учетной записи
поместили предел отличный от нуля в использование любого из ресурсов.</p>
<p>Поскольку сервер работает, он считает число раз, сколько каждая учетная
запись использует ресурсы. Если учетная запись достигает своего предела на
числе соединений в течение прошлого часа, сервер отклоняет дальнейшие
соединения для учетной записи, пока этот час не закончился. Точно так же,
если учетная запись достигает своего предела на числе запросов или
обновлений, сервер отклоняет дальнейшие запросы или обновления, пока час не
закончился. Во всех таких случаях сервер выпускает соответствующие
сообщения об ошибках.</p>

<p>Подсчет ресурса происходит за учетную запись, а не за клиента.
Например, если у Вашей учетной записи есть предел запроса 50, Вы не можете
увеличить свой предел до 100, делая два одновременных соединения клиента с
сервером. Запросы на обоих соединениях посчитаны вместе.</p>

<p>Текущее почасовое использование ресурса может быть сброшено глобально для
всех учетных записей или индивидуально для конкретной записи:</p>
<ul><li><p>Чтобы сбросить текущее количество к нолю для всех учетных записей,
скомандуйте <a href="sql.htm#flush"><code>FLUSH USER_RESOURCES</code></a>.
Количество также может быть сброшено, перезагружая таблицы привилегий
(например, <a href="sql.htm#flush"><code>FLUSH PRIVILEGES</code></a> или
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin reload</strong>
</span></a>).</li>

<li>Счетчики для отдельной учетной записи могут быть сброшены к нолю,
устанавливая любой из ее пределов снова. Определите предельное значение,
равное значению, в настоящее время назначаемому на учетную запись.
</p></li></ul>

<p>Сбросы часовых счетчиков не затрагивают <code>MAX_USER_CONNECTIONS</code>.
</p>
<p>Все количества начинаются с 0, когда сервер запускается.
Счетчики не переносят через перезапуски сервера.</p>

<p>Для <code>MAX_USER_CONNECTIONS</code> случай края может произойти, если
учетная запись в настоящее время имеет максимальное количество открытых
соединений, разрешенных для нее: разъединение, сопровождаемое быстрым
соединением, может привести к ошибке
(<a href="error.htm#error_er_too_many_user_connections"><code>
ER_TOO_MANY_USER_CONNECTIONS</code></a> или
<a href="error.htm#error_er_user_limit_reached"><code>ER_USER_LIMIT_REACHED
</code></a>), если сервер не полностью обработал разъединение к тому времени,
когда соединение происходит. Когда сервер обработает разъединение, другое
соединение будет разрешено.</p>

<h3><a name="assigning-passwords"></a>7.3.6.
Назначение паролей учетной записи</h3>
<p>Необходимые параметры для клиентов, которые соединяются с сервером MySQL,
могут включать пароль. Этот раздел описывает, как назначить пароли для
учетных записей MySQL.</p>

<p>MySQL хранит пароли в таблице <code>user</code> базы данных
<code>mysql</code>. Операции, которые назначают или изменяют пароли,
разрешены только пользователям с привилегией
<a href="#priv_create-user"><code>CREATE USER</code></a>
или привилегиями для базы данных <code>mysql</code>
(<a href="#priv_insert"><code>INSERT</code></a>, чтобы создавать
новые записи, или <a href="#priv_update"><code>UPDATE</code></a>
для модификации существующих). Если переменная
<a href="server.htm#sysvar_read_only"><code>read_only</code></a> включена,
использование запросов модификации учетной записи, например,
<a href="sql.htm#create-user"><code>CREATE USER</code></a> или
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a> дополнительно
требует привилегии <a href="#priv_super"><code>SUPER</code></a>.
</p>

<p>Обсуждение здесь суммирует синтаксис только для наиболее распространенных
операторов присваивания пароля. Для полных деталей о других возможностях см.
разделы <a href="sql.htm#create-user">14.7.1.3</a>,
<a href="sql.htm#alter-user">14.7.1.1</a>,
<a href="sql.htm#grant">14.7.1.6</a> и
<a href="sql.htm#set-password">14.7.1.11</a>.</p>

<p>MySQL хеширует пароли, сохраненные в <code>mysql.user</code>.
Для большинства запросов, описанных здесь, MySQL автоматически хеширует
определенный пароль. Исключение это
<a href="sql.htm#set-password"><code>SET PASSWORD ... =
PASSWORD('<em><code>auth_string</code></em>')</code></a>,
для которого Вы используете <a href="funct.htm#function_password"><code>
PASSWORD()</code></a> явно, чтобы хешировать пароль. Есть также синтаксисы
для for <a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>, которые
разрешают хешированные значения, которые будут определены буквально, для
деталей см. описания тех запросов.</p>

<p>MySQL использует плагины, чтобы выполнить аутентификацию клиента, см.
<a href="#pluggable-authentication">раздел 7.3.9</a>.
Плагин аутентификации, связанный с учетной записью, решает, какой алгоритм
должен хешировать пароли для этой учетной записи.</p>

<p>Чтобы назначить пароль, когда Вы создаете новую учетную запись, следует
использовать <a href="sql.htm#create-user"><code>CREATE USER</code></a>
и включить <code>IDENTIFIED BY</code>:
<pre>
mysql&gt; CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';
</pre>

Для <a href="sql.htm#create-user"><code>CREATE USER</code></a> MySQL
MySQL автоматически хеширует пароль прежде, чем сохранить
это в <code>mysql.user</code>.</p>

<p><a href="sql.htm#create-user"><code>CREATE USER</code></a>
также имеет синтаксис для того, чтобы определить плагин аутентификации
учетной записи. См. <a href="sql.htm#create-user">раздел 14.7.1.3</a>.</p>

<p>Чтобы назначить или изменить пароль для существующей учетной записи,
используйте один из следующих методов:</p>

<ul><li><p>Используйте <a href="sql.htm#alter-user"><code>ALTER USER</code>
</a> с <code>IDENTIFIED BY</code>:
<pre>
mysql&gt; ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';
</pre>

Если Вы не соединены как анонимный пользователь, Вы можете изменить свой
собственный пароль, не называя Вашу собственную учетную запись буквально:
<pre>
mysql&gt; ALTER USER USER() IDENTIFIED BY 'mypass';
</pre>

Для <a href="sql.htm#alter-user"><code>ALTER USER</code></a> MySQL
автоматически хеширует пароль прежде, чем сохранить
это в <code>mysql.user</code>.</li>

<li>Используйте <a href="sql.htm#set-password"><code>SET PASSWORD</code></a>
с <a href="funct.htm#function_password"><code>PASSWORD()</code></a>:
<pre>
mysql&gt; SET PASSWORD FOR 'jeffrey'@'localhost' = PASSWORD('mypass');
</pre>

Если Вы не соединены как анонимный пользователь, Вы можете изменить свой
собственный пароль, опуская <code>FOR</code>:
<pre>
mysql&gt; SET PASSWORD = PASSWORD('mypass');
</pre>

Функция <a href="funct.htm#function_password"><code>PASSWORD()</code></a>
хеширует пароль, используя хеширующий метод, определенный значением
переменной <a href="server.htm#sysvar_old_passwords"><code>old_passwords
</code></a>. Если <a href="sql.htm#set-password"><code>SET PASSWORD</code>
</a> отклоняет хешированное значение пароля, возвращенное
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>
как не находящееся в правильном формате, может быть необходимо изменить
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>,
чтобы изменить хеширующий метод. См. <a href="sql.htm#set-password">раздел
14.7.1.11</a>.</p>

<p>Использование <a href="sql.htm#set-password"><code>SET
PASSWORD ... = PASSWORD('<em><code>auth_string</code></em>')</code></a>
для модификации пароля устарело с MySQL 5.7.6. Используйте
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>.</p></li>

<li><p>Используйте <a href="sql.htm#set-password"><code>SET PASSWORD</code>
</a> без <a href="funct.htm#function_password"><code>PASSWORD()</code></a>:
</p>

<p><a href="sql.htm#set-password"><code>SET PASSWORD</code></a>
интерпретирует строку как строку открытого текста и хеширует это
соответственно для плагина аутентификации учетной записи прежде, чем
сохранить в <code>mysql.user</code>.
<pre>
mysql&gt; SET PASSWORD FOR 'jeffrey'@'localhost' = 'mypass';
</pre></li>

<li>Используйте <a href="sql.htm#grant"><code>GRANT USAGE</code></a>
на глобальном уровне (<code>ON *.*</code>), чтобы изменить пароль
учетной записи, не затрагивая привилегии текущего пользователя:
<pre>
mysql&gt; GRANT USAGE ON *.* TO 'jeffrey'@'localhost'
    -&gt;       IDENTIFIED BY 'mypass';
</pre>
Для <a href="sql.htm#grant"><code>GRANT</code></a> MySQL автоматически
хеширует пароль прежде, чем сохранить это в <code>mysql.user</code>.</p>

<p>Использование <a href="sql.htm#grant"><code>GRANT</code></a>
для модификации паролей устарело в MySQL 5.7.6. Используйте
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>.</p></li>

<li><p>Чтобы изменить пароль учетной записи из командной строки, используйте
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin</strong></span>
</a>:
<pre>
shell&gt; mysqladmin -u <em><code>user_name</code></em> -h <em><code>host_name</code></em> \
                     password "<em><code>new_password</code></em>"
</pre>

Учетка, для которой эта команда установит пароль, это
строка таблицы <code>mysql.user</code>, которая соответствует
<em><code>user_name</code></em> в столбце <code>User</code> и хосту клиента,
<span><em>с которого Вы соединяетесь</em></span> в <code>Host</code>.</p>

<p>Для изменений пароля, произведенных, используя
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin</strong></span>
</a>, MySQL автоматически хеширует пароль прежде, чем сохранить это в
таблице <code>mysql.user</code>.</p></li></ul>

<h3><a name="password-expiration-policy"></a>7.3.7.
Политика истечения пароля</h3>
<p>MySQL позволяет администраторам базы данных истечь пароли учетной записи
вручную и установить политику для автоматического истечения пароля.</p>

<p>Чтобы истечь пароль вручную, администратор базы данных использует
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>:
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;
</pre>

Эта работа отмечает пароль как истекший в соответствующей строке
<code>mysql.user</code>. Таблица <code>mysql.user</code>
показывает для каждой учетной записи, когда ее пароль был последний раз
изменен, и сервер автоматически обрабатывает пароль как истекший во время
соединения клиента. Это работает без явного ручного истечения пароля.</p>

<p>Переменная <a href="server.htm#sysvar_default_password_lifetime"><code>
default_password_lifetime</code></a> определяет глобальную автоматическую
политику истечения пароля. Это относится к учетным записям, которые
используют встроенные методы аутентификации MySQL (учетные записи, которые
используют плагин аутентификации <code>mysql_native_password</code>
или <code>sha256_password</code>).</p>

<p>По умолчанию <a href="server.htm#sysvar_default_password_lifetime"><code>
default_password_lifetime</code></a> = 0, отключает автоматическое истечение
пароля. Если значение <a href="server.htm#sysvar_default_password_lifetime">
<code>default_password_lifetime</code></a> положительное целое число
<em><code>N</code></em>, это указывает на разрешенное время жизни
пароля: пароли должны быть изменены каждые <em><code>N</code></em> дней.</p>

<p>Примеры:</p>
<ul><li><p>Чтобы установить глобальную политику, что у паролей есть срок
годности приблизительно шесть месяцев, запустите сервер с этими
строками в файле опции:
<pre>
[mysqld]
default_password_lifetime=180
</pre></li>

<li>Чтобы установить глобальную политику, таким образом, что пароли никогда
не истекают, надо установить
<a href="server.htm#sysvar_default_password_lifetime">
<code>default_password_lifetime</code></a> = 0:
<pre>
[mysqld]
default_password_lifetime=0
</pre></li>

<li><a href="server.htm#sysvar_default_password_lifetime"><code>
default_password_lifetime</code></a> может также быть изменен во время
выполнения (это требует привилегии
<a href="#priv_super"><code>SUPER</code></a>):
<pre>
SET GLOBAL default_password_lifetime = 180;
SET GLOBAL default_password_lifetime = 0;
</pre></li></ul>

<p>Независимо от глобальной политики это может быть переопределено для
отдельных учетных записей с помощью
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>:</p>

<ul><li><p>Потребуйте, чтобы пароль был изменен каждые 90 дней:
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;
</pre></li>

<li>Отключите истечение пароля:
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;
</pre></li>

<li>Подчинитесь глобальной политике истечения:
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;
</pre></li></ul>

<p>Эти <a href="sql.htm#alter-user"><code>ALTER USER</code></a>
обновляют соответствующую строку <code>mysql.user</code>.</p>
<p>Когда клиент успешно соединяется, сервер определяет, истек
ли пароль учетной записи:</p>

<ul><li><p>Сервер проверяет, истек
ли пароль вручную и, если так, ограничивает сеанс.</li>
<li>Иначе сервер проверяет срок годности пароля согласно автоматической
политике истечения пароля. Если срок превышен, сервер полагает, что пароль
истек и ограничивает сеанс.</p></li></ul>

<p>Ограниченный клиент работает в <span><span>режиме песочницы</span></span>,
который ограничивает операции, разрешенные клиентом (см.
<a href="#password-expiration-sandbox-mode">раздел 7.3.8</a>).
Операции, выполненные ограниченным клиентом, приводят к ошибке, пока
пользователь не устанавливает новый пароль учетной записи:
<pre>
mysql&gt; SELECT 1;
ERROR 1820 (HY000): You must SET PASSWORD before executing this statement

mysql&gt; ALTER USER USER() IDENTIFIED BY '<em><code>new_password</code></em>';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SELECT 1;
+---+
| 1 |
+---+
| 1 |
+---+
1 row in set (0.00 sec)
</pre>

Этот ограниченный режим работы разрешает запрос
<a href="sql.htm#set-variable"><code>SET</code></a>, который полезен, если
устаревший <a href="sql.htm#set-password"><code>SET PASSWORD</code></a>
используется вместо <a href="sql.htm#alter-user"><code>ALTER USER</code></a>
и у пароля учетной записи есть формат хеширования, который требует
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>,
отличающееся от значения по умолчанию.</p>

<p>Для административного пользователя возможно сбросить пароль учетной
записи, но любые существующие сеансы для этой учетной записи остаются
ограниченными. Клиент, использующий учетную запись, должен разъединиться и
повторно соединиться прежде, чем запросы могут быть выполнены успешно.</p>

<h3><a name="password-expiration-sandbox-mode"></a>7.3.8.
Истечение пароля и режим песочницы</h3>
<p>MySQL обеспечивает способность истечения пароля, чтобы позволить
администраторам базы данных истечь пароли учетной записи и потребовать, чтобы
пользователи сбросили свой пароль. Этот раздел описывает, как
истечение пароля работает.</p>

<p>Чтобы истечь пароль учетной записи, используйте
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>. Например:
<pre>
ALTER USER 'myuser'@'localhost' PASSWORD EXPIRE;
</pre>

<p>Этот запрос изменяет строку в <code>mysql.user</code> с названной учетной
записью, устанавливая <code>password_expired</code> в <code>'Y'</code>.
Это не затрагивает текущих соединений, которые учетная запись имеет.
Для каждого последующего соединения, которое использует учетную запись,
сервер или разъединяет клиента или обрабатывает клиента в
<span><span>sandbox mode</span></span>, в котором сервер разрешает клиенту
только те операции, которые необходимым, чтобы сбрасывать пароль с истекшим
сроком. Меры, предпринятые сервером, зависят от настроек клиента и сервера.
</p>

<p>Если сервер разъединяет клиента, он возвращает ошибку
<a href="error.htm#error_er_must_change_password_login"><code>
ER_MUST_CHANGE_PASSWORD_LOGIN</code></a>:
<pre>
shell&gt; mysql -u myuser -p
Password: ******
ERROR 1862 (HY000): Your password has expired. To log in you must
change it using a client that supports expired passwords.
</pre>
Если сервер помещает клиента в режим песочницы, эти операции разрешены в
пределах сеанса клиента:</p>

<ul><li><p>Клиент может сбросить пароль учетной записи с
<a href="sql.htm#alter-user"><code>ALTER USER</code></a> или
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>.
Это изменяет строку в <code>mysql.user</code>, устанавливая
<code>password_expired</code> в <code>'N'</code>.
После того, как пароль был сброшен, сервер восстанавливает нормальный доступ
для сеанса, так же как для последующих соединений, которые
используют учетную запись.</p></li>

<li>Клиент может использовать
<a href="sql.htm#set-variable"><code>SET</code></a>, что полезно, если
используется устаревший <a href="sql.htm#set-password"><code>SET PASSWORD
</code></a> вместо <a href="sql.htm#alter-user"><code>ALTER USER</code></a>
и <a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>
должен быть установлен в значение, отличающееся от его значения по умолчанию.
</p></li></ul>

<p>Для любой работы, не разрешенной в пределах сеанса, сервер возвращает
ошибку <a href="error.htm#error_er_must_change_password">
<code>ER_MUST_CHANGE_PASSWORD</code></a>:
<pre>
mysql&gt; USE performance_schema;
ERROR 1820 (HY000): You must SET PASSWORD before executing this statement

mysql&gt; SELECT 1;
ERROR 1820 (HY000): You must SET PASSWORD before executing this statement
</pre>

Для неинтерактивных запросов <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a> (например, в пакетном режиме), сервер обычно разъединяет
клиента, если пароль истек. Чтобы разрешить
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
оставаться соединенным так, чтобы пароль мог быть изменен (с использованием
описанных выше запросов), добавьте опцию
<a href="programs.htm#option_mysql_connect-expired-password"><code>
--connect-expired-password</code></a> к вызову
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>.</p>

<p>Как упомянуто ранее, разъединяет ли сервер клиента с паролем с истекшим
сроком или помещает в режим песочницы, зависит от комбинации настроек клиента
и сервера. Следующее обсуждение описывает соответствующие настройки и
как они взаимодействуют.</p>

<p>На стороне клиента данный клиент указывает, может ли он
обработать режим песочницы для паролей с истекшим сроком. Для клиентов,
которые пользуются библиотекой клиента C, есть два способа сделать это:</p>

<ul><li><p>Передать флаг <code>MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS</code>
в <a href="connect.htm#mysql-options"><code>mysql_options()</code></a>
до соединения с сервером:
<pre>
arg = 1;
result = mysql_options(mysql,
                       MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &amp;arg);
</pre>

<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
включает <code>MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS</code>,
если вызван в интерактивном режиме или имеет опцию
<a href="programs.htm#option_mysql_connect-expired-password"><code>
--connect-expired-password</code></a>.</li>

<li>Передать флаг <code>CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS</code> в
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a> во время соединения:
<pre>
mysql = mysql_real_connect(mysql, host, user, password, "test",
                           port, unix_socket,
                           CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS);
</pre></li></ul>

<p>У разных MySQL Connector есть свои собственные соглашения для того, чтобы
указать на готовность обработать режим песочницы.
См. соответствующую документацию.</p>

<p>На стороне сервера, если клиент указывает, что
может обработать истекшие пароли, сервер помещает это в режим песочницы.</p>
<p>Если клиент не указывает, что может обработать истекшие пароли (или
использует более старую версию библиотеки клиента, которая не может это
указать), действие сервера зависит от значения переменной
<a href="server.htm#sysvar_disconnect_on_expired_password">
<code>disconnect_on_expired_password</code></a>:</p>

<ul><li><p>Если <a href="server.htm#sysvar_disconnect_on_expired_password">
<code>disconnect_on_expired_password</code></a> включена (значение по
умолчанию), сервер разъединяет клиента с ошибкой
<a href="error.htm#error_er_must_change_password_login">
<code>ER_MUST_CHANGE_PASSWORD_LOGIN</code></a>.</li>

<li>Если <a href="server.htm#sysvar_disconnect_on_expired_password"><code>
disconnect_on_expired_password</code></a> выключена, сервер помещает
клиента в режим песочницы.</p></li></ul>

<p>Предыдущие настройки клиента и сервера применяются только для учетных
записей с паролями с истекшим сроком. Если клиент соединяется с
использованием пароля с неистекшим сроком, сервер обрабатывает
клиента как обычно.</p>

<h3><a name="pluggable-authentication"></a>7.3.9. Аутентификация плагинами
</h3>
<p>Когда клиент соединяется с сервером MySQL, сервер использует имя
пользователя, обеспеченное клиентом и хостом клиента, чтобы выбрать
соответствующую строку учетной записи из <code>mysql.user</code>.
Сервер тогда подтверждает подлинность клиента, определяя из строки учетной
записи, какой плагин аутентификации нужен:</p>

<ul><li><p>Сервер вызывает плагин, названный в строке учетной записи, чтобы
подтвердить подлинность пользователя. Если сервер не может найти
плагин, ошибка происходит.</li>

<li>Если строка учетной записи не определяет имя плагина,
сервер игнорирует учетную запись.</p></li></ul>
<p>Плагин возвращает состояние серверу, указывая, разрешают
ли пользователю соединиться.</p>

<p>Аутентификация включает две важные способности:</p>
<ul><li><p>
<span><strong>Внешняя аутентификация:</strong></span>
это позволяет клиентам соединиться с сервером MySQL с параметрами, которые
являются подходящими для методов аутентификации кроме родной аутентификации,
основанной на паролях, сохраненных в <code>mysql.user</code>.
Например, плагины могут быть созданы, чтобы использовать внешние методы
аутентификации, такие как PAM, Windows login ID, LDAP или Kerberos.</li>

<li><span><strong>Proxy:</strong></span> Если пользователю разрешают
соединиться, плагин аутентификации может возвратить к серверу имя
пользователя, отличающееся от имени соединяющегося пользователя, чтобы
указать, что соединяющийся пользователь это полномочие для другого
пользователя. В то время как соединение длится, пользователь по доверенности
обработан, в целях управления доступом, как привилегии иного пользователя.
В действительности один пользователь исполняет роль другого. Для получения
дополнительной информации см.
<a href="#proxy-users">раздел 7.3.10</a>.</p></li></ul>

<p>Несколько плагинов аутентификации доступны в MySQL:</p>
<ul><li><p>Плагин, который выполняет родную аутентификацию, которая
соответствует паролю в столбце <code>authentication_string</code>.
Плагин <code>mysql_native_password</code> осуществляет аутентификацию,
основанную на этом родном методе хеширующего пароля. См.
<a href="#native-authentication-plugin">раздел 7.5.1.1</a>.
Родное использование аутентификации <code>mysql_native_password</code>
не значение по умолчанию для новых учетных записей, если переменная
<code>default_authentication_plugin</code> установлена иначе.</li>

<li>Плагин, который выполняет аутентификацию, используя хеширующий пароль
SHA-256. Этот плагин соответствует паролю в столбце
<code>authentication_string</code>. Это более сильное шифрование, чем
доступное с родной аутентификацией. См.
<a href="#sha256-authentication-plugin">раздел 7.5.1.2</a>.</li>

<li>Плагин предотвращает все соединения клиента с любой учетной записью,
которая использует его. Случаи использования для такого плагина включают
учетные записи, которые должны быть в состоянии выполнить сохраненные
программы и представления с поднятыми привилегиями, не выставляя те
привилегии обычным пользователям, и учетные записи по доверенности, которые
никогда не должны разрешать прямой вход в систему. См.
<a href="#mysql-no-login-plugin">раздел 7.5.1.3</a>.</li>

<li>Клиентский плагин, который посылает пароль в сервер, не хешируя.
Этот плагин может использоваться серверными плагинами, которые требуют
доступа к паролю точно в соответствии с пользователем клиента. См.
<a href="#cleartext-authentication-plugin">раздел 7.5.1.4</a>.
</li>

<li>Плагин, который подтверждает подлинность клиентов, которые соединяются от
местного узла через файл сокета Unix, см.
<a href="#socket-authentication-plugin">раздел 7.5.1.5</a>.</li>

<li>Испытательный плагин, который подтверждает подлинность с применением
оригинальной аутентификации MySQL. Этот плагин предназначен для целей
тестирования и развития и как пример того, как написать плагин
аутентификации. См. <a href="#test-authentication-plugin">раздел
7.5.1.6</a>.</p></li></ul>

<p>См. <a href="restr.htm#pluggable-authentication-restrictions">раздел C.9
</a>.</p>
<p>Имеющие отношение к третьей стороне разработчики соединителя должны читать
тот раздел, чтобы определить степень, до которой соединитель может
использовать в своих интересах способности аутентификации.</p>
<p>См. <a href="extend.htm#writing-authentication-plugins">раздел 26.2.4.9
</a>.</p>

<h4><a name="authentication-plugin-use"></a>
Инструкции использования плагина аутентификации</h4>
<p>Этот раздел обеспечивает общие инструкции для установки и
использования плагинов аутентификации.</p>

<p>Вообще аутентификация использует соответствующие плагины на сторонах
сервера и клиента, таким образом, Вы используете данный
метод аутентификации так:</p>

<ul><li><p>На узле сервера установите библиотеку, содержащую соответствующий
плагин сервера, в случае необходимости, так, чтобы сервер мог использовать
это, чтобы подтвердить подлинность соединений клиента.
Точно так же на каждом хосте клиента, установите библиотеку, содержащую
соответствующий плагин клиента для использования программами клиента.</li>

<li>Создайте учетные записи MySQL, которые определяют использование
плагина для аутентификации.</li>
<li>Когда клиент соединяется, плагин сервера говорит программе клиента,
который плагин клиента использовать для аутентификации.</p></li></ul>

<p>Инструкции здесь используют в качестве примера плагин аутентификации,
включенный в MySQL (см. <a href="#test-authentication-plugin">
раздел 7.5.1.6</a>). Процедура подобна для других плагинов аутентификации,
замените соответствующим плагином и именами файла.</p>

<p>У плагина аутентификации в качестве примера есть эти характеристики:</p>
<ul><li><p>Серверное имя плагина <code>test_plugin_server</code>.</li>
<li>Клиентское имя плагина <code>auth_test_plugin</code>.</li>

<li>Оба плагина расположены в совместно используемом файле библиотеки
<code>auth_test_plugin.so</code> в каталоге плагинов (указан в переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).
Суффикс имени файла может отличаться в Вашей системе.</p></li></ul>

<p>Установите и используйте плагин аутентификации в качестве
примера следующим образом:</p>
<ol type="1"><li><p>Удостоверьтесь, что библиотека установлена на
хостах сервера и клиента.</li>

<li>Установите серверный испытательный плагин при запуске сервера или
во время выполнения:</p>
<ul><li><p>Чтобы установить плагин при запуске, используйте опцию
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code>
</a>. С этим загружающим плагин методом опция должна быть дана каждый раз,
когда Вы запускаете сервер. Например, используйте эти строки в
файле <code>my.cnf</code>:
<pre>
[mysqld]
plugin-load=test_plugin_server=auth_test_plugin.so
</pre></li>

<li>Чтобы установить плагин во время выполнения, используйте
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>:
<pre>
INSTALL PLUGIN test_plugin_server SONAME 'auth_test_plugin.so';
</pre>
Это устанавливает плагин надолго и должно быть выполнено только однажды.
</p></li></ul></li>

<li><p>Проверьте, что плагин установлен. Например, можно использовать
<a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code></a>:
<pre>
mysql&gt; SHOW PLUGINS\G
...
*************************** 21. row ***************************
   Name: test_plugin_server
 Status: ACTIVE
   Type: AUTHENTICATION
Library: auth_test_plugin.so
License: GPL
</pre>
См. <a href="server.htm#obtaining-plugin-information">раздел 6.6.3</a>.</li>

<li>Чтобы определить, что пользователь MySQL должен быть заверен,
используя определенный плагин сервера, назовите плагин в
<code>IDENTIFIED WITH</code> запроса
<a href="sql.htm#create-user"><code>CREATE USER</code></a>,
который создает пользователя:
<pre>
CREATE USER 'testuser'@'localhost' IDENTIFIED WITH test_plugin_server;
</pre></li>

<li>Соединитесь с сервером, используя программу клиента. Испытательный плагин
подтверждает подлинность тем же самым путем, как аутентификация MySQL,
так что обеспечьте обычные параметры
<a href="programs.htm#option_general_user"><code>--user</code></a> и
<a href="programs.htm#option_general_password"><code>--password</code></a>,
которые Вы обычно используете, чтобы соединиться с сервером. Например:
<pre>
shell&gt; mysql --user=<em><code>your_name</code></em> --password=<em><code>your_pass</code></em>
</pre>

Для соединений <code>testuser</code> сервер видит, что учетная запись должна
быть заверена, используя серверный плагин <code>test_plugin_server</code>
и сообщает программе клиента, какой клиентский плагин это должно
использовать, в этом случае <code>auth_test_plugin</code>.</p>

<p>В случае, если учетная запись использует метод аутентификации, который
является значением по умолчанию для сервера и для программы клиента, сервер
не должен сообщать клиенту, какой плагин использовать. Это истина для учетных
записей, которые используют аутентификацию MySQL
(<code>mysql_native_password</code>).</p>

<p>Опция <a href="programs.htm#option_mysql_default-auth"><code>
--default-auth=<em><code>plugin_name</code></em></code></a> может быть
определена в командной строке <a href="programs.htm#mysql"><span><strong>
mysql</strong></span></a> как подсказка, который клиентский плагин программа
может ожидать использовать, хотя сервер переопределит это, если учетная
запись пользователя потребует отличного плагина.</p>

<p>Если программа клиента не находит плагин, определите опцию
<a href="programs.htm#option_mysql_plugin-dir"><code>--plugin-dir=<em><code>
dir_name</code></em></code></a>, чтобы указать, где плагин расположен.
</p></li></ol>

<p>Если Вы запускаете сервер с опцией
<a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a>, плагины аутентификации не используются, даже
если загружены, потому что сервер не выполняет аутентификации клиента и
разрешает любому клиенту соединяться. Поскольку это опасно, Вы могли бы
хотеть использовать <a href="server.htm#option_mysqld_skip-grant-tables">
<code>--skip-grant-tables</code></a> вместе с
<a href="server.htm#option_mysqld_skip-networking"><code>--skip-networking
</code></a>, чтобы препятствовать тому, чтобы отдаленные клиенты соединились.
</p>

<h3><a name="proxy-users"></a>7.3.10. Пользователи Proxy</h3>
<p>Аутентификация к серверу MySQL происходит посредством плагинов
аутентификации. Плагин, который подтверждает подлинность данного соединения,
может просить, чтобы соединяющийся (внешний) пользователь был обработан как
различный пользователь в проверке привилегий. Это позволяет внешнему
пользователю быть полномочием для второго пользователя, то есть, чтобы иметь
привилегии второго пользователя:</p>

<ul><li><p>Внешний пользователь <span><span>proxy user</span></span>
(пользователь, который может явиться олицетворением или стать известным
как другой пользователь).</li>

<li>Второй пользователь <span><span>proxied user</span></span>
(пользователь, идентичность которого может быть взята
пользователем по доверенности).</p></li></ul>

<p>Этот раздел описывает, как пользователь по доверенности работает.
Для общей информации о плагинах аутентификации см.
<a href="#pluggable-authentication">раздел 7.3.9</a>.
Для информации об определенных плагинах см.
<a href="#authentication-plugins">раздел 7.5.1</a>.
Для информации о написании плагинов аутентификации, которые поддерживают
пользователей по доверенности см.
<a href="extend.htm#writing-authentication-plugins-proxy-users">раздел
26.2.4.9.4</a>.</p>

<p>Для proxy для данного плагина аутентификации должны быть
удовлетворены эти условия:</p>
<ul><li><p>Учетная запись пользователя по доверенности должна быть настроена,
чтобы быть заверенной плагином. Используйте <a href="sql.htm#create-user">
<code>CREATE USER</code></a>, чтобы связать учетную запись с плагином, или
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>, чтобы
изменить этот плагин.</li>

<li>Для клиента, соединяющегося с учетной записью по доверенности, которая
будет обработана как пользователь по доверенности, плагин должен возвратить
имя пользователя, отличающееся от имени пользователя клиента, чтобы указать
на имя пользователя для учетной записи proxied.</li>

<li>Учетная запись пользователя по доверенности должна иметь привилегию
<a href="#priv_proxy"><code>PROXY</code></a>
для учетной записи proxied. Используйте
<a href="sql.htm#grant"><code>GRANT</code></a>.</p></li></ul>

<p>Механизм по доверенности разрешает отображать только имя пользователя
клиента на proxied имя пользователя. Нет никакого предоставления для того,
чтобы отобразить имена хоста. Когда соединяющийся клиент соответствует
учетной записи по доверенности, сервер работает с учетной записи proxied,
используя имя пользователя возвращенное плагином аутентификации и имея хоста
учетной записи по доверенности.</p>

<p>Рассмотрите следующие определения:
<pre>
-- create proxy user
CREATE USER 'employee_ext'@'localhost'
       IDENTIFIED WITH my_auth_plugin AS 'my_auth_string';

-- create proxied user
CREATE USER 'employee'@'localhost' IDENTIFIED BY 'employee_pass';

-- grant PROXY privilege for proxy user to proxied user
GRANT PROXY ON 'employee'@'localhost' TO 'employee_ext'@'localhost';
</pre>

Когда клиент соединяется как <code>employee_ext</code> от местного узла,
используется <code>my_auth_plugin</code>, чтобы выполнить аутентификацию.
Предположите, что <code>my_auth_plugin</code> возвращает имя пользователя
<code>employee</code> серверу, основанное на контенте
<code>'my_auth_string'</code> и возможно консультируясь с некоторой внешней
системой аутентификации. Имя <code>employee</code> это не
<code>employee_ext</code>, так что возвращение <code>employee</code>
служит запросом к серверу, чтобы обработать клиента <code>employee_ext</code>
в целях проверки привилегии как <code>employee</code>.</p>

<p>В этом случае <code>employee_ext</code> это пользователь по доверенности и
<code>employee</code> proxied пользователь.</p>
<p>Сервер проверяет аутентификацию по доверенности для
<code>employee</code> возможно для <code>employee_ext</code>, проверяя
имеет ли proxy-пользователь <code>employee_ext</code> привилегию
<a href="#priv_proxy"><code>PROXY</code></a> для
<code>employee</code> (proxied). Если эту привилегию не
предоставили, ошибка происходит.</p>

<p>Когда proxying происходит, функции <code>USER()</code> и
<code>CURRENT_USER()</code> могут использоваться, чтобы видеть различие между
соединяющимся пользователем (пользователь по доверенности) и учетной записью,
привилегии которой применяются во время текущего сеанса
(proxied-пользователь). Для только что описанного примера
те функции возвращают эти значения:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER();
+------------------------+--------------------+
| USER()                 | CURRENT_USER()     |
+------------------------+--------------------+
| employee_ext@localhost | employee@localhost |
+------------------------+--------------------+
</pre>

В <a href="sql.htm#create-user"><code>CREATE USER</code></a>, который создает
учетную запись пользователя по доверенности, <code>IDENTIFIED WITH</code>,
который называет плагин аутентификации, произвольно сопровождается <code>AS
'<em><code>auth_string</code></em>'</code>, определяющей строку, которую
сервер передает к плагину, когда пользователь соединяется. Если существует,
строка предоставляет информацию, которая помогает плагину определить, как
отобразить внешнее имя пользователя клиента на proxied имя пользователя.
Если плагин использует этот параметр, формат строки аутентификации зависит от
того, как плагин намеревается использовать это. Консультируйтесь с
документацией для данного плагина для информации о строковых значениях
аутентификации, которые это принимает.</p>

<h4><a name="proxy-users-granting-proxy-privilege"></a>
Предоставление привилегии по доверенности</h4>
<p><a href="#priv_proxy"><code>PROXY</code></a>
необходима, чтобы позволить внешнему пользователю соединиться и иметь
привилегии другого пользователя. Чтобы предоставить эту привилегию,
используйте <a href="sql.htm#grant"><code>GRANT</code></a>. Например:
<pre>
GRANT PROXY ON '<em><code>proxied_user</code></em>' TO '<em><code>proxy_user</code></em>';
</pre>
Запрос создает строку в таблице <code>mysql.proxies_priv</code>.</p>

<p>Во время соединения <em><code>proxy_user</code></em>
должен представить допустимого внешне заверенного пользователя MySQL, и
<em><code>proxied_user</code></em> должен представить допустимого в местном
масштабе заверенного пользователя. Иначе попытка соединения терпит неудачу.
</p>

<p>Синтаксис <a href="sql.htm#revoke"><code>REVOKE</code></a> такой:
<pre>
REVOKE PROXY ON '<em><code>proxied_user</code></em>' FROM '<em><code>proxy_user</code></em>';
</pre>

Расширения MySQL для <a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#revoke"><code>REVOKE</code></a> работают как обычно:
<pre>
GRANT PROXY ON 'a' TO 'b', 'c', 'd';
GRANT PROXY ON 'a' TO 'd' WITH GRANT OPTION;
GRANT PROXY ON 'a' TO ''@'';
REVOKE PROXY ON 'a' FROM 'b', 'c', 'd';
</pre>
В предыдущем примере <code>''@''</code> это пользователь proxy по умолчанию и
означает <span><span>любой пользователь</span></span>.</p>

<p>Привилегию <a href="#priv_proxy"><code>PROXY</code></a>
можно предоставить в этих случаях:</p>
<ul><li><p>Пользователем, который имеет <code>GRANT PROXY ... WITH GRANT
OPTION</code> для <em><code>proxied_user</code></em>.</li>

<li><em><code>proxied_user</code></em> для себя: значение
<code>USER()</code> должно точно соответствовать <code>CURRENT_USER()</code>
и <em><code>proxied_user</code></em>, для имени пользователя и для имени
хоста учетной записи.</p></li></ul>

<p>Начальная учетная запись <code>root</code>,
создаваемая во время установки MySQL, имеет привилегию
<a href="#priv_proxy"><code>PROXY ... WITH GRANT OPTION</code>
</a> для <code>''@''</code>, то есть, для всех пользователей и всех узлов.
Это разрешает <code>root</code> настраивать пользователей по доверенности, а
также делегировать другим учетным записям полномочия настроить пользователей
по доверенности. Например, <code>root</code> может сделать это:
<pre>
CREATE USER 'admin'@'localhost' IDENTIFIED BY 'test';
GRANT PROXY ON ''@'' TO 'admin'@'localhost' WITH GRANT OPTION;
</pre>

Эти запросы создают пользователя <code>admin</code>, который может управлять
всеми отображениями <code>GRANT PROXY</code>. Например, <code>admin</code>
может сделать это:
<pre>
GRANT PROXY ON sally TO joe;
</pre>

<h4><a name="default-proxy-users"></a>Пользователи полномочий по умолчанию
</h4>
<p>Чтобы определить, что некоторые или все пользователи должны соединиться с
использованием данного плагина аутентификации, создайте
<span><span>пустого</span></span> пользователя MySQL,
свяжите его с тем плагином для аутентификации и позвольте плагину возвращать
реальное заверенное имя пользователя (если это не пустой пользователь).
Например, предположите, что существует плагин <code>ldap_auth</code>,
который осуществляет аутентификацию LDAP и отображение пользователей на
учетную запись разработчика или на менеджера. Чтобы настроить proxying
пользователей на эти учетные записи, используйте следующие запросы:
<pre>
-- create default proxy user
CREATE USER ''@'' IDENTIFIED WITH ldap_auth AS 'O=Oracle, OU=MySQL';
-- create proxied users
CREATE USER 'developer'@'localhost' IDENTIFIED BY 'developer_pass';
CREATE USER 'manager'@'localhost' IDENTIFIED BY 'manager_pass';

-- grant PROXY privilege for default proxy user to proxied users
GRANT PROXY ON 'manager'@'localhost' TO ''@'';
GRANT PROXY ON 'developer'@'localhost' TO ''@'';
</pre>

Теперь предположите, что клиент пытается соединиться следующим образом:
<pre>
mysql --user=myuser --password='myuser_pass' ...
</pre>

Сервер не будет находить <code>myuser</code>, определенный как пользователь
MySQL. Но потому что есть пустая учетная запись пользователя
(<code>''@''</code>), которая соответствует имени пользователя клиента и
хоста, сервер подтверждает подлинность клиента по этой учетной записи:
сервер вызывает <code>ldap_auth</code> и передает ему <code>myuser</code> и
<code>myuser_pass</code> как имя пользователя и пароль.</p>

<p>Если плагин <code>ldap_auth</code> находит в каталоге LDAP
<code>myuser_pass</code> неправильный пароль для <code>myuser</code>,
аутентификация терпит неудачу, и сервер отклоняет соединение.</p>

<p>Если пароль правилен и <code>ldap_auth</code> считает, что
<code>myuser</code> разработчик, это возвращает имя пользователя
<code>developer</code> серверу MySQL вместо <code>myuser</code>.
Возвращение имени пользователя, отличающегося от имени пользователя клиента
<code>myuser</code> сигнал серверу, что это должно обработать
<code>myuser</code> как proxy. Сервер проверяет, что
<code>''@''</code> может подтвердить подлинность как
<code>developer</code> (потому что это имеет привилегию
<a href="#priv_proxy"><code>PROXY</code></a>)
и принимает соединение. Сеанс присваивает <code>myuser</code> привилегии
<code>developer</code>. Эти привилегии должны быть настроены заранее с
использованием <code>GRANT</code>. Функции
<a href="funct.htm#function_user"><code>USER()</code></a> и
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
возвращают эти значения:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER();
+------------------+---------------------+
| USER()           | CURRENT_USER()      |
+------------------+---------------------+
| myuser@localhost | developer@localhost |
+------------------+---------------------+
</pre>

Если плагин вместо этого находит в каталоге LDAP, что
<code>myuser</code> менеджер, это возвращает <code>manager</code>
как имя пользователя и сеанс присваивает <code>myuser</code>
привилегии для <code>manager</code>.
<pre>
mysql&gt; SELECT USER(), CURRENT_USER();
+------------------+-------------------+
| USER()           | CURRENT_USER()    |
+------------------+-------------------+
| myuser@localhost | manager@localhost |
+------------------+-------------------+
</pre>
Для простоты внешняя аутентификация не может быть многоуровневой.</p>

<h4><a name="proxy-users-conflicts"></a>
Полномочия значения по умолчанию и анонимные пользовательские конфликты</h4>
<p>Если Вы намереваетесь создать пользователя proxy по умолчанию, проверьте
<span><span>соответствие учетной записи любого пользователя</span></span>,
которая имеют приоритет и таким образом препятствуют тому, чтобы пользователь
по умолчанию работал, как предназначено.</p>

<p>В предыдущем обсуждении учетная запись пользователя proxy по умолчанию
имеет <code>''</code> в части узла, которая соответствует любому узлу. Если
Вы настраиваете пользователя proxy по умолчанию, позаботьтесь также о
проверке, существуют ли учетные записи не по доверенности с той же самой
пользовательской частью и <code>'%'</code> в части узла, потому что
<code>'%'</code> также соответствует любому узлу, но имеет приоритет перед
<code>''</code> по правилам, которые сервер использует для сортировки строк
учетной записи внутренне (см.
<a href="#connection-access">раздел 7.2.5</a>).</p>

<p>Предположите, что установка MySQL включает эти две учетных записи:
<pre>
-- create default proxy user
CREATE USER ''@'' IDENTIFIED WITH some_plugin AS 'some_auth_string';
-- create anonymous user
CREATE USER ''@'%' IDENTIFIED BY 'some_password';
</pre>

Первая учетная запись (<code>''@''</code>) работает как пользователь proxy
по умолчанию, используемый, чтобы подтвердить подлинность соединений для
пользователей, которые иначе не соответствуют более определенным учетным
записям. Вторая учетная запись (<code>''@'%'</code>) это
анонимная учетная запись пользователя, которая, возможно, была создана,
например, чтобы позволить пользователям без их собственной учетной
записи соединиться анонимно.</p>

<p>У обеих учетных записей есть та же самая пользовательская часть
(<code>''</code>), которая соответствует любому пользователю. И у каждой
учетной записи есть часть узла, которая соответствует любому узлу. Однако,
есть приоритет в учетной записи, соответствующей для попыток соединения,
потому что соответствующие правила сортируют узел <code>'%'</code> перед
<code>''</code>. Для учетных записей, которые не соответствуют более
определенной учетной записи, сервер пытается подтвердить их подлинность
для <code>''@'%'</code> (анонимный пользователь), а не <code>''@''</code>
(пользователь proxy по умолчанию). Результат состоит в том, что учетная
запись proxy по умолчанию никогда не используется.</p>

<p>Чтобы избежать этой проблемы, используйте одну из следующих стратегий:</p>
<ul><li><p>Удалите анонимную учетную запись так, чтобы она не находилась в
противоречии с пользователем proxy по умолчанию. Это могло бы быть хорошей
идеей так или иначе, если Вы хотите связать каждое
соединение с названным пользователем.</li>

<li>Используйте более определенного proxy пользователя по умолчанию, который
соответствует перед анонимным пользователем. Например, чтобы разрешить только
соединения <code>localhost</code> proxy, используйте
<code>''@'localhost'</code>:
<pre>
CREATE USER ''@'localhost'
       IDENTIFIED WITH some_plugin AS 'some_auth_string';
</pre>

Кроме того, измените любой запрос <code>GRANT PROXY</code> на имя
<code>''@'localhost'</code> вместо <code>''@''</code> как
пользователь по доверенности.</p>

<p>Знайте, что эта стратегия предотвращает соединения анонимного
пользователя от <code>localhost</code>.</li>
<li>Создайте многих пользователей по доверенности, один для местных
соединений и один для <span><span>всего остального</span></span>.
Это может быть особенно полезно, когда у местных пользователей должны быть
привилегии, отличные от удаленных пользователей.</p>

<p>Создайте пользователей по доверенности:
<pre>
-- create proxy user for local connections
CREATE USER ''@'localhost' IDENTIFIED WITH some_plugin AS 'some_auth_string';
-- create proxy user for remote connections
CREATE USER ''@'%' IDENTIFIED WITH some_plugin AS 'some_auth_string';
</pre>

Создайте proxied пользователей:
<pre>
-- create proxied user for local connections
CREATE USER 'developer'@'localhost' IDENTIFIED BY 'some_password';
-- create proxied user for remote connections
CREATE USER 'developer'@'%' IDENTIFIED BY 'some_password';
</pre>

Предоставьте привилегию по доверенности каждому пользователю по доверенности
для соответствующего proxied пользователя:
<pre>
GRANT PROXY ON 'developer'@'localhost' TO ''@'localhost';
GRANT PROXY ON 'developer'@'%' TO ''@'%';
</pre>
Наконец предоставьте соответствующие привилегии местным и удаленным proxied
пользователям (не показано).</p>

<p>Предположите, что комбинация
<code>some_plugin</code>/<code>'some_auth_string'</code>
отобразит имя пользователя клиента на <code>developer</code>.
Местные соединения соответствуют proxy-пользователю
<code>''@'localhost'</code>, который отображается на
<code>'developer'@'localhost'</code> proxied-пользователя.
Удаленные соединения соответствуют proxy-пользователю <code>''@'%'</code>,
который отображается на <code>'developer'@'%'</code>.</p></li></ul>

<h4><a name="proxy-users-server-user-mapping"></a>
Поддержка сервером отображения пользователя по доверенности</h4>
<p>Некоторые плагины аутентификации осуществляют отображение пользователя по
доверенности для себя. Сервер самого MySQL может отобразить пользователей по
доверенности согласно предоставленным привилегиям по доверенности. Если
переменная <a href="server.htm#sysvar_check_proxy_users"><code>
check_proxy_users</code></a> включена, сервер выполняет отображение
пользователя по доверенности для любых плагинов аутентификации,
которые просят это:</p>

<ul><li><p>По умолчанию <a href="server.htm#sysvar_check_proxy_users"><code>
check_proxy_users</code></a> выключена, таким образом, сервер не выполняет
отображение пользователя по доверенности
даже для плагинов аутентификации, которые просят это.</li>

<li>С включенной опцией <a href="server.htm#sysvar_check_proxy_users"><code>
check_proxy_users</code></a> может также быть необходимо позволить
определенным для плагина системным переменным игнорировать поддержку
отображения пользователя сервера:</p>

<ul><li><p>Для плагина <code>mysql_native_password</code> включить
<a href="server.htm#sysvar_mysql_native_password_proxy_users"><code>
mysql_native_password_proxy_users</code></a>.</li>

<li>Для плагина <code>sha256_password</code> включить
<a href="server.htm#sysvar_sha256_password_proxy_users"><code>
sha256_password_proxy_users</code></a>.</p></li></ul></li></ul>

<p>Пользовательское отображение по доверенности, выполненное сервером,
подвергается некоторым ограничениям:</p>
<ul><li><p>Сервер не будет proxy к или от анонимного пользователя, даже если
предоставлена связанная привилегия <a href="#priv_proxy"><code>
PROXY</code></a>.</li>

<li>Когда единственной учетной записи предоставили привилегии по доверенности
больше, чем для одной учетной записи, отображающийся proxy-пользователь
недетерминирован. Поэтому предоставление привилегий по доверенности для
многократных учетных записей единственной учетной записи не работает.
</p></li></ul>

<h4><a name="proxy-users-system-variables"></a>
Пользовательские системные переменные по доверенности</h4>
<p>Две системные переменные прослеживают процесс входа в
систему по доверенности:</p>

<ul><li><p><a href="server.htm#sysvar_proxy_user"><code>proxy_user</code>
</a>: Это значение <code>NULL</code>, если proxying не используется. Иначе
это указывает на учетную запись пользователя по доверенности. Например, если
клиент подтверждает подлинность через учетную запись <code>''@''</code>, эта
переменная установлена следующим образом:
<pre>
mysql&gt; SELECT @@proxy_user;
+--------------+
| @@proxy_user |
+--------------+
| ''@''        |
+--------------+
</pre></li>

<li><a href="server.htm#sysvar_external_user"><code>external_user</code></a>:
Иногда плагин аутентификации может использовать внешнего пользователя, чтобы
подтвердить подлинность. Например, используя аутентификацию Windows
плагин, который подтверждает подлинность с применением windows API,
не нуждается в идентификаторе для входа в систему, который ему передают.
Однако, это все еще использует пользовательский ID Windows, чтобы подтвердить
подлинность. Плагин может возвратить этот внешний пользовательский ID (или
первые 512 байтов UTF-8 этого) серверу, используя переменную только для
чтения <code>external_user</code>. Если плагин не устанавливает эту
переменную, ее значение <code>NULL</code>.</p></li></ul>

<h3><a name="account-locking"></a>
7.3.11. Блокировка учетной записи пользователя</h3>
<p>MySQL поддерживает блокировку учетных записей пользователя, используя
<code>ACCOUNT LOCK</code> и <code>ACCOUNT UNLOCK</code> для
<a href="sql.htm#create-user"><code>CREATE USER</code></a> и
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>:</p>

<ul><li><p>Когда используются с <a href="sql.htm#create-user"><code>CREATE
USER</code></a>, эти пункты определяют начальный статус блокировки для новой
учетной записи. В отсутствие любого пункта учетная запись
создается в разблокированном состоянии.</li>

<li>Когда используются с <a href="sql.htm#alter-user"><code>ALTER USER</code>
</a>, эти пункты определяют новый статус блокировки для существующей учетной
записи. В отсутствие любого пункта статус учетной записи остается неизменным.
</p></li></ul>

<p>Блокировка зарегистрирована в столбце <code>account_locked</code> таблицы
<code>mysql.user</code>. Вывод <a href="sql.htm#show-create-user"><code>SHOW
CREATE USER</code></a> указывает, заблокирована ли учетная запись.</p>

<p>Если клиент пытается соединиться с заблокированной учетной записью,
попытка терпит неудачу. Сервер постепенно увеличивает переменную
<a href="server.htm#statvar_Locked_connects"><code>Locked_connects</code>
</a>, которая указывает на число попыток соединиться с заблокированной
учетной записью, возвращает ошибку
<a href="error.htm#error_er_account_has_been_locked"><code>
ER_ACCOUNT_HAS_BEEN_LOCKED</code></a> и пишет сообщение в журнал ошибок:
<pre>
Access denied for user '<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'.
Account is locked.
</pre>

Блокировка учетной записи не затрагивает возможность соединиться
с использованием пользователя по доверенности, который принимает идентичность
заблокированной учетной записи. Это также не затрагивает способность
выполнить сохраненные программы или представления, у которых есть
<code>DEFINER</code>, указывающий на заблокированную учетную запись. Таким
образом, способность использовать учетную запись proxied или сохраненными
программами (или представлениями) не затронута, блокируя учетную запись.</p>

<p>Блокирующая учетную запись способность зависит от присутствия столбца
<code>account_locked</code> в <code>mysql.user</code>.
Для обновлений до MySQL 5.7.6 и позже от более старых версий должен быть
выполнен <a href="programs.htm#mysql-upgrade"><span><strong>mysql_upgrade
</strong></span></a>, чтобы гарантировать, что этот столбец существует. Для
необновленных установок, которые не имеют столбца
<code>account_locked</code>, сервер обрабатывает все учетные записи как
разблокированные, а использование <code>ACCOUNT LOCK</code> или <code>ACCOUNT
UNLOCK</code> производит ошибку.</p>

<h3><a name="account-activity-auditing"></a>7.3.12.
Ревизия деятельности учетной записи MySQL</h3>
<p>Приложения могут использовать следующие направляющие линии, чтобы
выполнить ревизию, которая связывает деятельность базы данных с
учетными записями MySQL.</p>

<p>Учетные записи MySQL соответствуют строкам в <code>mysql.user</code>.
Когда клиент соединяется успешно, сервер подтверждает подлинность клиента к
особой строке в этой таблице. <code>User</code> и <code>Host</code> столбцы
в этой строке уникально идентифицируют учетную запись и соответствуют формату
<code>'<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'
</code>, в котором имена учетной записи написаны в запросах SQL.</p>

<p>Учетная запись, используемая, чтобы подтвердить подлинность клиента,
определяет, какие привилегии клиент имеет. Обычно функция
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
может быть вызвана, чтобы определить, какая это учетная запись для
пользователя клиента. Ее значение создано из столбцов <code>User</code> и
<code>Host</code> строки таблицы <code>user</code> для учетной записи.</p>

<p>Однако, есть обстоятельства, при которых
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
соответствует не пользователю клиента, а отличной учетной записи. Это
происходит в контекстах, когда проверка привилегии не базируется на
учетной записи клиента:</p>

<ul><li><p>Сохраненные подпрограммы (процедуры и функции), определенные с
<code>SQL SECURITY DEFINER</code>.</li>
<li>Представления, определенные с <code>SQL SECURITY DEFINER</code>.</li>
<li>Триггеры и события.</p></li></ul>

<p>В тех контекстах проверка привилегии сделана против <code>DEFINER</code>,
а <a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
ссылается на ту учетную запись, а не на клиента, который вызвал сохраненную
подпрограмму или представление или кто заставил триггер активироваться. Чтобы
определить пользователя вызова, Вы можете вызвать
<a href="funct.htm#function_user"><code>USER()</code></a>,
которая возвращает значение, указывающее на фактическое имя пользователя,
обеспеченное клиентом и узлом, от которого соединялся клиент. Однако, это
значение не обязательно соответствует непосредственно учетной записи в
таблице <code>user</code>, так как <a href="funct.htm#function_user"><code>
USER()</code></a> никогда не содержит подстановочные знаки, тогда как
значение учетной записи (как возвращено
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>)
может содержать подстановочные знаки имени хоста и имя пользователя.</p>

<p>Например, пустое имя пользователя соответствует любому пользователю, таким
образом, учетная запись <code>''@'localhost'</code>
позволяет клиентам соединиться как анонимный пользователь от местного узла с
любым именем пользователя. В этом случае если клиент соединяется как
<code>user1</code> от местного узла, <a href="funct.htm#function_user"><code>
USER()</code></a> и <a href="funct.htm#function_current-user"><code>
CURRENT_USER()</code></a> возвратят различные значения:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER();
+-----------------+----------------+
| USER()          | CURRENT_USER() |
+-----------------+----------------+
| user1@localhost | @localhost     |
+-----------------+----------------+
</pre>

Часть имени хоста учетной записи может содержать подстановочные знаки.
Если имя хоста содержит <code>'%'</code>, <code>'_'</code>
или применяет нотацию сетевой маски, учетная запись может использоваться для
клиентов, соединяющихся от многих узлов и
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
не будет указывать, от какого именно. Например, учетная запись
<code>'user2'@'%.example.com'</code> может использоваться <code>user2</code>,
чтобы соединяться от любого узла в домене <code>example.com</code>. Если
<code>user2</code> соединяется от <code>remote.example.com</code>,
<a href="funct.htm#function_user"><code>USER()</code></a> и
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
возвратят различные значения:
<pre>
mysql&gt; SELECT USER(), CURRENT_USER();
+--------------------------+---------------------+
| USER()                   | CURRENT_USER()      |
+--------------------------+---------------------+
| user2@remote.example.com | user2@%.example.com |
+--------------------------+---------------------+
</pre>

Если приложение должно вызвать
<a href="funct.htm#function_user"><code>USER()</code></a>
для ревизии пользователя (например, если это делает ревизию изнутри
триггера), оно должно также быть в состоянии связать
<a href="funct.htm#function_user"><code>USER()</code></a> с
учетной записью в таблице <code>user</code>, поэтому
необходимо избежать учетных записей, которые содержат подстановочные знаки в
столбцах <code>User</code> или <code>Host</code>.
Определенно не разрешено <code>User</code> быть пустым (что создает анонимную
учетную запись пользователя) и не разрешаются символы образца или нотация
сетевой маски в <code>Host</code>. У всех учетных записей должно быть
непустое значение <code>User</code> и точное <code>Host</code>.</p>

<p>Относительно предыдущих примеров, учетные записи
<code>''@'localhost'</code> и <code>'user2'@'%.example.com'</code>
должны быть изменены, чтобы не использовать подстановочные знаки:
<pre>
RENAME USER ''@'localhost' TO 'user1'@'localhost';
RENAME USER 'user2'@'%.example.com' TO 'user2'@'remote.example.com';
</pre>

Если <code>user2</code> должен быть в состоянии соединиться от нескольких
узлов в <code>example.com</code>, должна быть отдельная учетка
на каждый узел.</p>

<p>Чтобы извлечь имя пользователя или имя хоста из
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a> или
<a href="funct.htm#function_user"><code>USER()</code></a>, используйте
<a href="funct.htm#function_substring-index"><code>SUBSTRING_INDEX()</code>
</a>:
<pre>
mysql&gt; SELECT SUBSTRING_INDEX(CURRENT_USER(),'@',1);
+---------------------------------------+
| SUBSTRING_INDEX(CURRENT_USER(),'@',1) |
+---------------------------------------+
| user1                                 |
+---------------------------------------+

mysql&gt; SELECT SUBSTRING_INDEX(CURRENT_USER(),'@',-1);
+----------------------------------------+
| SUBSTRING_INDEX(CURRENT_USER(),'@',-1) |
+----------------------------------------+
| localhost                              |
+----------------------------------------+
</pre>

<h2><a name="secure-connections"></a>7.4.
Используя безопасные соединения</h2>
<p>С незашифрованным соединением между клиентом MySQL и сервером кто-то с
доступом к сети мог бы наблюдать весь Ваш трафик и осмотреть данные,
посылаемые или полученные между клиентом и сервером.</p>

<p>Когда Вы должны переместить информацию через сеть безопасным способом,
незашифрованное соединение недопустимо. Чтобы сделать любой вид данных
нечитабельным, используйте шифрование. Алгоритмы шифрования должны включать
элементы безопасности, чтобы сопротивляться многим видам известных нападений,
таким как изменение порядка зашифрованных сообщений или
переигрывания данных дважды.</p>

<p>MySQL поддерживает безопасные (зашифрованные) соединения между клиентами и
сервером, используя TLS (Transport Layer Security). TLS иногда упоминается
как SSL (Secure Sockets Layer), но MySQL фактически не использует протокол
SSL для безопасных соединений, потому что это обеспечивает слабое шифрование
(см. <a href="#secure-connection-protocols-ciphers">раздел 7.4.3
</a>).</p>

<p>TLS использует алгоритмы шифрования, чтобы гарантировать, что данным,
полученным по общедоступной сети, можно доверять. У этого есть механизмы,
чтобы обнаружить изменение данных, потерю или переигровку. TLS также включает
алгоритмы, которые обеспечивают проверку
идентичности, используя стандарт X509.</p>

<p>X509 позволяет идентифицировать кого-то в Интернете. В основных условиях
должен быть некоторый объект, названный <span><span>Certificate
Authority</span></span> (CA), который назначает электронные сертификаты
любому, кто нуждается в них. Сертификаты полагаются на асимметричные
алгоритмы шифрования, у которых есть два ключа шифрования (открытый ключ и
секретный ключ). Владелец сертификаты может представить сертификат другой
стороне как доказательство идентичности. Сертификат состоит из открытого
ключа своего владельца. Зашифрованное использование любых данных этого
открытого ключа может быть дешифровано, только используя соответствующий
секретный ключ, который хранится владельцем сертификата.</p>

<p>MySQL может быть собран для использования поддержки безопасного соединения
OpenSSL или yaSSL. Для сравнения этих двух пакетов см.
<a href="#openssl-versus-yassl">раздел 7.4.1</a>.
Для информации о протоколах шифрования и шифрах каждого пакета см.
<a href="#secure-connection-protocols-ciphers">раздел 7.4.3</a>.
</p>

<p>MySQL выполняет шифрование на основе соединения, и использование
шифрования для данного пользователя может быть дополнительным или
принудительным. Это позволяет Вам выбрать зашифрованное или незашифрованное
соединение, согласно требованиям отдельных приложений. Для информации о том,
как потребовать, чтобы пользователи использовали зашифрованные соединения см.
обсуждение параметра <code>REQUIRE</code> в <a href="sql.htm#create-user">
<code>CREATE USER</code></a> в <a href="sql.htm#create-user">разделе 14.7.1.3
</a>. См. также переменную
<a href="server.htm#sysvar_require_secure_transport"><code>
require_secure_transport</code></a> в
<a href="server.htm#server-system-variables">разделе 6.1.5</a>.</p>

<p>Безопасные соединения доступны через MySQL C API с использованием
<a href="connect.htm#mysql-ssl-set"><code>mysql_ssl_set()</code></a> и
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a>. См.
разделы <a href="connect.htm#mysql-ssl-set">25.8.7.72</a> и
<a href="connect.htm#mysql-options">25.8.7.50</a>.</p>

<p>Репликация использует C API, таким образом, безопасные соединения могут
использоваться между основными и ведомыми серверами. См.
<a href="replica.htm#replication-solutions-secure-connections">раздел 19.3.9
</a>.</p>

<p>Также возможно соединиться надежно изнутри соединения SSH с узлом сервера
MySQL. Для примера см. <a href="#windows-and-ssh">раздел 7.4.7
</a>.</p>

<h3><a name="openssl-versus-yassl"></a>7.4.1. OpenSSL и yaSSL</h3>
<p>MySQL может быть собран, используя OpenSSL или yaSSL, оба из которых
включают безопасное соединение, основанное на OpenSSL API:</p>

<ul><li><p>MySQL Enterprise Edition собран, используя OpenSSL. Невозможно
использовать yaSSL с MySQL Enterprise Edition.</li>
<li>MySQL Community Edition собран, используя yaSSL.</li>

<li>MySQL Community Edition может быть собран, используя OpenSSL или yaSSL
(см. <a href="#building-with-secure-connection-support">раздел
7.4.2</a>).</p></li></ul>

<p>OpenSSL и yaSSL предлагают ту же самую основную функциональность, но у
дистрибутивов MySQL, собранных, используя OpenSSL,
есть дополнительные функции:</p>

<ul><li><p>OpenSSL поддерживает более широкий диапазон шифров
из которых можно выбрать для опции
<a href="#option_general_ssl-cipher"><code>--ssl-cipher</code>
</a>. OpenSSL поддерживает опции
<a href="#option_general_ssl-capath"><code>--ssl-capath</code>
</a>, <a href="#option_general_ssl-crl"><code>--ssl-crl</code>
</a> и <a href="#option_general_ssl-crlpath"><code>--ssl-crlpath
</code></a>, см. <a href="#secure-connection-options">раздел
7.4.5</a>.</li>

<li>Учетные записи, которые подтверждают подлинность с использованием плагина
<code>sha256_password</code>, может использовать файлы ключа RSA для
безопасной передачи пароля по незашифрованным соединениям. См.
<a href="#sha256-authentication-plugin">раздел 7.5.1.2</a>.</li>

<li>Сервер может автоматически произвести сертификаты и ключи SSL и RSA
при запуске. См. <a href="#creating-ssl-rsa-files-using-mysql">
раздел 7.4.6.1</a>.</li>

<li>OpenSSL поддерживает больше режимов шифрования для
<a href="funct.htm#function_aes-encrypt"><code>AES_ENCRYPT()</code></a> и
<a href="funct.htm#function_aes-decrypt"><code>AES_DECRYPT()</code></a>,
см. <a href="funct.htm#encryption-functions">раздел 13.13</a>.</p></li></ul>

<p>Определенная OpenSSL-связанная система и переменные состояния
присутствуют, только если MySQL был собран, используя OpenSSL:</p>
<ul><li><p><a href="server.htm#sysvar_auto_generate_certs"><code>
auto_generate_certs</code></a></li>
<li><a href="server.htm#sysvar_sha256_password_auto_generate_rsa_keys">
<code>sha256_password_auto_generate_rsa_keys</code></a></li>

<li><a href="server.htm#sysvar_sha256_password_private_key_path"><code>
sha256_password_private_key_path</code></a></li>
<li><a href="server.htm#sysvar_sha256_password_public_key_path"><code>
sha256_password_public_key_path</code></a></li>
<li><a href="server.htm#statvar_Rsa_public_key"><code>Rsa_public_key</code>
</a></p></li></ul>

<p>Чтобы определить, был ли Ваш сервер собран, используя OpenSSL, проверьте
существование любой из этих переменных. Например, этот запрос возвращает
строку, если OpenSSL использовался и пустой результат,
если yaSSL использовался:
<pre>
SHOW STATUS LIKE 'Rsa_public_key';
</pre>

<h3><a name="building-with-secure-connection-support"></a>7.4.2.
Создание MySQL с поддержкой безопасных соединений</h3>
<p>Чтобы использовать соединения SSL между сервером MySQL и программами
клиента, Ваша система должна поддерживать OpenSSL или yaSSL:</p>

<p>Если Вы собираете MySQL от исходного дистрибутива,
<span><strong>CMake</strong></span> конфигурирует пакет,
чтобы использовать yaSSL по умолчанию. Чтобы собрать с использованием OpenSSL
вместо этого, используйте эту процедуру:</p>

<ol type="1"><li><p>Гарантируйте, что OpenSSL 1.0.1 или выше установлен на
Вашей системе. Чтобы получить OpenSSL, посетите
<a href="../../../www.openssl.org/default.htm" target="_top">http://www.openssl.org</a>.
</p>

<p>Если установленная версия OpenSSL ниже 1.0.1,
<span><strong>CMake</strong></span> производит ошибку во
время конфигурации MySQL.</li>

<li>Чтобы использовать OpenSSL, добавьте опцию
<a href="install.htm#option_cmake_with_ssl"><code>-DWITH_SSL=system</code>
</a> для <span><strong>CMake</strong></span>. Например:
<pre>
shell&gt; cmake . -DWITH_SSL=system
</pre>

Эта команда конфигурирует пакет, чтобы пользоваться установленной библиотекой
OpenSSL. Альтернативно, чтобы явно определить путь к установке OpenSSL,
используйте следующий синтаксис. Это может быть полезно, если у Вас есть
много версий установленного OpenSSL, чтобы препятствовать тому, чтобы
<span><strong>CMake</strong></span> выбрал неправильную:
<pre>
shell&gt; cmake . -DWITH_SSL=<em><code>path_name</code></em>
</pre>
См. <a href="install.htm#source-configuration-options">раздел 2.8.4</a>.</li>
<li>Соберите и установите пакет.</p></li></ol>

<p>Чтобы проверить, поддерживает ли <a href="programs.htm#mysqld">
<span><strong>mysqld</strong></span></a> безопасные соединения, исследуйте
значение переменной <a href="server.htm#sysvar_have_ssl"><code>have_ssl
</code></a>:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'have_ssl';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| have_ssl      | YES   |
+---------------+-------+
</pre>

Если это <code>YES</code>, сервер поддерживает безопасные соединения. Если
значение <code>DISABLED</code>, сервер способен к поддержке безопасных
соединений, но не был запущен с соответствующей опцией
<code>--ssl-<em><code>xxx</code></em></code>, см.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<p>Чтобы определить, был ли сервер собран, используя OpenSSL или yaSSL,
проверьте существование любой системы или переменных состояния, которые
присутствуют только для OpenSSL. См.
<a href="#openssl-versus-yassl">раздел 7.4.1</a>.</p>

<h3><a name="secure-connection-protocols-ciphers"></a>7.4.3.
Безопасные протоколы соединения и шифры</h3>
<p>Чтобы определить, какой протокол шифрования и шифр используются для
зашифрованного соединения, используйте следующие запросы, чтобы проверить
значения переменных <a href="server.htm#statvar_Ssl_version"><code>
Ssl_version</code></a> и <a href="server.htm#statvar_Ssl_cipher"><code>
Ssl_cipher</code></a>:
<pre>
mysql&gt; SHOW SESSION STATUS LIKE 'Ssl_version';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| Ssl_version   | TLSv1 |
+---------------+-------+

mysql&gt; SHOW SESSION STATUS LIKE 'Ssl_cipher';
+---------------+---------------------------+
| Variable_name | Value                     |
+---------------+---------------------------+
| Ssl_cipher    | DHE-RSA-AES128-GCM-SHA256 |
+---------------+---------------------------+
</pre>
Если соединение не зашифровано, у обеих переменных пустое значение.</p>

<p>MySQL поддерживает зашифрованные соединения, используя протоколы TLS:</p>
<ul><li><p>Когда собран, используя OpenSSL 1.0.1 или выше, MySQL поддерживает
TLSv1, TLSv1.1 и TLSv1.2.</li>
<li>Если собран, используя связанную версию yaSSL, MySQL
поддерживает TLSv1 и TLSv1.1.</p></li></ul>

<p>Значение переменной <a href="server.htm#sysvar_tls_version"><code>
tls_version</code></a> определяет, которые протоколы разрешено использовать
из тех, которые доступны. Значение
<a href="server.htm#sysvar_tls_version"><code>tls_version</code></a>
это разделенный запятыми список значений, содержащий один или больше этих
протоколов (не чувствительны к регистру): TLSv1, TLSv1.1, TLSv1.2.
По умолчанию, эта переменная перечисляет все протоколы, поддержанные
библиотекой SSL, использовавшейся, чтобы собрать MySQL
(<code>TLSv1,TLSv1.1,TLSv1.2</code> для OpenSSL, <code>TLSv1,TLSv1.1</code>
для yaSSL). Чтобы определить значение
<a href="server.htm#sysvar_tls_version"><code>tls_version</code></a>
во время выполнения, используйте этот запрос:
<pre>
mysql&gt; SHOW GLOBAL VARIABLES LIKE 'tls_version';
+---------------+-----------------------+
| Variable_name | Value                 |
+---------------+-----------------------+
| tls_version   | TLSv1,TLSv1.1,TLSv1.2 |
+---------------+-----------------------+
</pre>

Чтобы изменить значение <a href="server.htm#sysvar_tls_version"><code>
tls_version</code></a>, установите это при запуске сервера. Например, чтобы
запретить соединения, которые используют протокол TLSv1,
используют эти строки в файле <code>my.cnf</code>:
<pre>
[mysqld]
tls_version=TLSv1.1,TLSv1.2
</pre>

Чтобы быть даже больше защищенным и разрешать только соединения TLSv1.2,
установите <a href="server.htm#sysvar_tls_version"><code>tls_version</code>
</a> так (предполагается, что Ваш сервер собран, используя OpenSSL, потому
что yaSSL не поддерживает TLSv1.2):
<pre>
[mysqld]
tls_version=TLSv1.2
</pre>

Для программ клиента опция <a href="#option_general_tls-version">
<code>--tls-version</code></a> позволяет определить протоколы TLS,
разрешенные в ответ на запрос клиента. Формат значения тот же самый, что
касается <a href="server.htm#sysvar_tls_version"><code>tls_version</code>
</a>.</p>

<p>По умолчанию, MySQL пытается использовать самую высокую версию протокола
TLS, доступную в зависимости от того, которой библиотекой SSL пользовались,
чтобы собрать сервер и клиент, какой ключевой размер используется и
ограничены ли сервер или клиент от использования некоторых протоколов,
например, посредством <a href="server.htm#sysvar_tls_version"><code>
tls_version</code></a>/<a href="#option_general_tls-version">
<code>--tls-version</code></a>:</p>

<ul><li><p>Если сервер и клиент собраны, используя OpenSSL, TLSv1.2
используется, если возможно.</li>
<li>Если сервер и клиент собраны, используя yaSSL, используется
TLSv1.1, если возможно.</li>

<li>TLSv1.2 не работает со всеми шифрами, у которых есть ключевой размер 512
битов или меньше. Чтобы использовать этот протокол с таким ключом, надо
использовать <a href="#option_general_ssl-cipher"><code>
--ssl-cipher</code></a>, чтобы определить шифр явно:
<pre>
AES128-SHA
AES128-SHA256
AES256-SHA
AES256-SHA256
CAMELLIA128-SHA
CAMELLIA256-SHA
DES-CBC3-SHA
DHE-RSA-AES256-SHA
RC4-MD5
RC4-SHA
SEED-SHA
</pre></li>
<li>Для лучшей безопасности, используйте сертификат с размером ключа
RSA 2048 битов или больше.</p></li></ul>

<p>Если у сервера и клиента нет никакого общего протокола, сервер заканчивает
запрос соединения. Например, если сервер сконфигурирован с
<a href="server.htm#sysvar_tls_version"><code>tls_version=TLSv1.1,TLSv1.2
</code></a>, попытки соединения потерпят неудачу для клиентов, вызванных с
<a href="#option_general_tls-version"><code>--tls-version=TLSv1
</code></a>, и для клиентов, которые не поддерживают опцию
<a href="#option_general_tls-version"><code>--tls-version</code>
</a> (и неявно поддерживают только TLSv1).</p>

<p>Чтобы определить, который шифр данный сервер поддерживает, используйте
следующий запрос, чтобы проверить значение переменной
<a href="server.htm#statvar_Ssl_cipher_list"><code>Ssl_cipher_list</code>
</a>:
<pre>
SHOW SESSION STATUS LIKE 'Ssl_cipher_list';
</pre>
Набор доступных шифров зависит от Вашей версии MySQL, был ли MySQL собран,
используя OpenSSL или yaSSL и (для OpenSSL) от версии библиотеки.</p>

<p>Порядок шифров, которые передает MySQL в библиотеку SSL, является
существенным. Более безопасные шифры упомянуты сначала в списке, и первый
шифр, поддержанный обеспеченным сертификатом, выбран.</p>

<p>MySQL передает этот список шифров OpenSSL:
<pre>
ECDHE-ECDSA-AES128-GCM-SHA256
ECDHE-ECDSA-AES256-GCM-SHA384
ECDHE-RSA-AES128-GCM-SHA256
ECDHE-RSA-AES256-GCM-SHA384
ECDHE-ECDSA-AES128-SHA256
ECDHE-RSA-AES128-SHA256
ECDHE-ECDSA-AES256-SHA384
ECDHE-RSA-AES256-SHA384
DHE-RSA-AES128-GCM-SHA256
DHE-DSS-AES128-GCM-SHA256
DHE-RSA-AES128-SHA256
DHE-DSS-AES128-SHA256
DHE-DSS-AES256-GCM-SHA384
DHE-RSA-AES256-SHA256
DHE-DSS-AES256-SHA256
ECDHE-RSA-AES128-SHA
ECDHE-ECDSA-AES128-SHA
ECDHE-RSA-AES256-SHA
ECDHE-ECDSA-AES256-SHA
DHE-DSS-AES128-SHA
DHE-RSA-AES128-SHA
TLS_DHE_DSS_WITH_AES_256_CBC_SHA
DHE-RSA-AES256-SHA
AES128-GCM-SHA256
DH-DSS-AES128-GCM-SHA256
ECDH-ECDSA-AES128-GCM-SHA256
AES256-GCM-SHA384
DH-DSS-AES256-GCM-SHA384
ECDH-ECDSA-AES256-GCM-SHA384
AES128-SHA256
DH-DSS-AES128-SHA256
ECDH-ECDSA-AES128-SHA256
AES256-SHA256
DH-DSS-AES256-SHA256
ECDH-ECDSA-AES256-SHA384
AES128-SHA
DH-DSS-AES128-SHA
ECDH-ECDSA-AES128-SHA
AES256-SHA
DH-DSS-AES256-SHA
ECDH-ECDSA-AES256-SHA
DHE-RSA-AES256-GCM-SHA384
DH-RSA-AES128-GCM-SHA256
ECDH-RSA-AES128-GCM-SHA256
DH-RSA-AES256-GCM-SHA384
ECDH-RSA-AES256-GCM-SHA384
DH-RSA-AES128-SHA256
ECDH-RSA-AES128-SHA256
DH-RSA-AES256-SHA256
ECDH-RSA-AES256-SHA384
ECDHE-RSA-AES128-SHA
ECDHE-ECDSA-AES128-SHA
ECDHE-RSA-AES256-SHA
ECDHE-ECDSA-AES256-SHA
DHE-DSS-AES128-SHA
DHE-RSA-AES128-SHA
TLS_DHE_DSS_WITH_AES_256_CBC_SHA
DHE-RSA-AES256-SHA
AES128-SHA
DH-DSS-AES128-SHA
ECDH-ECDSA-AES128-SHA
AES256-SHA
DH-DSS-AES256-SHA
ECDH-ECDSA-AES256-SHA
DH-RSA-AES128-SHA
ECDH-RSA-AES128-SHA
DH-RSA-AES256-SHA
ECDH-RSA-AES256-SHA
DES-CBC3-SHA
</pre>

MySQL передает этот список шифров yaSSL:
<pre>
DHE-RSA-AES256-SHA
DHE-RSA-AES128-SHA
AES128-RMD
DES-CBC3-RMD
DHE-RSA-AES256-RMD
DHE-RSA-AES128-RMD
DHE-RSA-DES-CBC3-RMD
AES256-SHA
RC4-SHA
RC4-MD5
DES-CBC3-SHA
DES-CBC-SHA
EDH-RSA-DES-CBC3-SHA
EDH-RSA-DES-CBC-SHA
AES128-SHA:AES256-RMD
</pre>

Эти ограничения шифра активны:</p>
<ul><li><p>Следующие шифры всегда ограничены:
<pre>
!DHE-DSS-DES-CBC3-SHA
!DHE-RSA-DES-CBC3-SHA
!ECDH-RSA-DES-CBC3-SHA
!ECDH-ECDSA-DES-CBC3-SHA
!ECDHE-RSA-DES-CBC3-SHA
!ECDHE-ECDSA-DES-CBC3-SHA
</pre></li>

<li>Следующие категории шифров всегда ограничены:
<pre>
!aNULL
!eNULL
!EXPORT
!LOW
!MD5
!DES
!RC2
!RC4
!PSK
!SSLv3
</pre></li></ul>

<p>Если сервер запущен, используя совместимый сертификат, который использует
любой из предыдущих ограниченных шифров или категорий шифра, сервер
запускается с отключенной поддержкой безопасных соединений.</p>

<h3><a name="using-secure-connections"></a>7.4.4.
Конфигурирование MySQL, чтобы использовать безопасные соединения</h3>
<p>Чтобы включить безопасные соединения, надлежащие опции должны
использоваться, чтобы определить соответствующий сертификат и ключевые файлы.
Для полного списка опций, связанных с учреждением безопасных соединений см.
<a href="#secure-connection-options">раздел 7.4.5</a>.</p>
<p>Если Вы должны создать необходимые сертификат и ключевые файлы, см.
<a href="#creating-ssl-rsa-files">раздел 7.4.6</a>.</p>

<h4><a name="idm139965377020960"></a>
Серверная конфигурация для безопасных соединений</h4>
<p>Чтобы запустить сервер MySQL так, чтобы это разрешило клиентам соединяться
надежно, используйте опции, которые идентифицируют сертификат и ключевые
файлы сервера, устанавливая безопасное соединение:</p>

<ul><li><p><a href="#option_general_ssl-ca"><code>--ssl-ca</code>
</a> идентифицирует Центр сертификации (CA).</li>
<li><a href="#option_general_ssl-cert"><code>--ssl-cert</code>
</a> идентифицирует сертификат открытого ключа сервера. Это можно послать
клиенту и заверено сертификатом CA.</li>

<li><a href="#option_general_ssl-key"><code>--ssl-key</code></a>
идентифицирует частный ключ сервера.</p></li></ul>
<p>Например, запустите сервер с этих строк в <code>my.cnf</code>,
изменяя имена файлов по мере необходимости:
<pre>
[mysqld]
ssl-ca=ca.pem
ssl-cert=server-cert.pem
ssl-key=server-key.pem
</pre>

Каждая опция называет файл в формате PEM. Если у Вас есть исходный
дистрибутив MySQL, Вы можете проверить свою установку, используя
демонстрационный сертификат и ключевые файлы в каталоге
<code>mysql-test/std_data</code>.</p>

<p>Опция стороны сервера <a href="#option_general_ssl"><code>
--ssl</code></a> включена по умолчанию.</p>
<p>Серверы MySQL, собранные, используя OpenSSL, могут произвести недостающие
сертификат и ключевые файлы автоматически при запуске. См.
<a href="#creating-ssl-rsa-files-using-mysql">раздел 7.4.6.1</a>.
</p>

<p>Сервер выполняет автооткрытие файла сертификата и ключа. Если включена
<a href="#option_general_ssl"><code>--ssl</code></a>
(возможно наряду с <a href="#option_general_ssl-cipher"><code>
--ssl-cipher</code></a>) и другие опции
<code>--ssl-<em><code>xxx</code></em></code> не даны, чтобы сконфигурировать
безопасные соединения явно, сервер пытается включить поддержку
безопасных соединений автоматически при запуске:</p>

<ul><li><p>Если сервер обнаруживает допустимые сертификат и ключевые файлы
<code>ca.pem</code>, <code>server-cert.pem</code> и
<code>server-key.pem</code> в каталоге данных это включает поддержку
безопасных соединений клиентами. Файлы не должны быть самодельными.</li>

<li>Если сервер не находит допустимые сертификат и ключевые файлы в каталоге
данных, это продолжает выполняться, но не включает безопасные соединения.
</p></li></ul>

<p>Если сервер автоматически включает поддержку безопасных соединений, это
пишет сообщение в журнал ошибок. Если сервер обнаруживает, что сертификат CA
самоподписан, он пишет предупреждение в журнал ошибок. Сертификат будет
самоподписан, если создается автоматически сервером или вручную, используя
<a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>mysql_ssl_rsa_setup
</strong></span></a>.</p>

<p>Для любого сертификата и ключевых файлов, которые сервер обнаруживает и
использует автоматически, он использует имена файла, чтобы установить
соответствующие системные переменные
(<a href="server.htm#sysvar_ssl_ca"><code>ssl_ca</code></a>,
<a href="server.htm#sysvar_ssl_cert"><code>ssl_cert</code></a> и
<a href="server.htm#sysvar_ssl_key"><code>ssl_key</code></a>).</p>

<p>Для дальнейшего управления, должны ли клиенты соединиться надежно,
используйте переменную <a href="server.htm#sysvar_require_secure_transport">
<code>require_secure_transport</code></a>, см.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<h4><a name="idm139965376990464"></a>
Клиентская конфигурация для безопасных соединений</h4>
<p>Для программ клиента опции для безопасных соединений подобны используемым
на стороне сервера, но <a href="#option_general_ssl-cert"><code>
--ssl-cert</code></a> и <a href="#option_general_ssl-key"><code>
--ssl-key</code></a> идентифицируют общественный и частный ключ клиента:</p>

<ul><li><p><a href="#option_general_ssl-ca"><code>--ssl-ca</code>
</a> идентифицирует Центр сертификации (CA). Эта опция, если используется,
должна определить тот же самый сертификат, который используется сервером.
</li>

<li><a href="#option_general_ssl-cert"><code>--ssl-cert</code>
</a> идентифицирует сертификат открытого ключа клиента.</li>
<li><a href="#option_general_ssl-key"><code>--ssl-key</code></a>
идентифицирует частный ключ клиента.</p></li></ul>

<p>Чтобы соединиться надежно с сервером MySQL, который поддерживает
безопасные соединения, опции, которые должен определить клиент, зависят от
требований шифрования учетной записи MySQL, используемой клиентом. См.
обсуждение <code>REQUIRE</code> в <a href="sql.htm#create-user">разделе
14.7.1.3</a>.</p>

<p>Предположите, что Вы хотите соединиться с использованием учетной записи,
которая не имеет никаких специальных требований шифрования или создавалась,
используя <a href="sql.htm#create-user"><code>CREATE USER</code></a>,
который включает <code>REQUIRE SSL</code>. Как рекомендуемый набор опций
безопасного соединения, запустите сервер с, по крайней мере,
<a href="#option_general_ssl-cert"><code>--ssl-cert</code></a> и
<a href="#option_general_ssl-key"><code>--ssl-key</code></a>,
и вызовите клиент с <a href="#option_general_ssl-ca"><code>
--ssl-ca</code></a>. Клиент может соединиться надежно так:
<pre>
shell&gt; mysql --ssl-ca=ca.pem
</pre>

Чтобы потребовать, чтобы сертификат клиента также был определен,
создайте учетную запись, используя опцию <code>REQUIRE X509</code>.
Тогда клиент должен также определить надлежащий ключ клиента и файлы
сертификата, или сервер отклонит соединение:
<pre>
shell&gt; mysql --ssl-ca=ca.pem \
                --ssl-cert=client-cert.pem --ssl-key=client-key.pem
</pre>

Чтобы предотвратить использование шифрования и переопределить другие опции
<code>--ssl-<em><code>xxx</code></em></code>, вызовите программу клиента с
<a href="#option_general_ssl-mode"><code>--ssl-mode=DISABLED
</code></a>.
<pre>
shell&gt; mysql --ssl-mode=DISABLED
</pre>
Программы клиента пытаются установить безопасное соединение по умолчанию
всякий раз, когда сервер поддерживает безопасные соединения:</p>
<ul><li><p>В отсутствие <a href="#option_general_ssl-mode"><code>
--ssl-mode</code></a> или <a href="#option_general_ssl"><code>
--ssl</code></a>, клиент отступает к незашифрованному соединению, если
безопасное соединение не может быть установлено.</li>

<li>Чтобы потребовать безопасного соединения и потерпеть неудачу, если его
нельзя установить, вызовите клиента с
<a href="#option_general_ssl-mode"><code>--ssl-mode=REQUIRED
</code></a>.</li>

<li>Чтобы использовать незашифрованное соединение, вызовите клиента с
<a href="#option_general_ssl-mode"><code>
--ssl-mode=DISABLED</code></a>.</p></li></ul>
<p>См. <a href="#secure-connection-protocols-ciphers">раздел
7.4.3</a>.</p>

<p>Клиент может определить, использует ли текущее соединение с сервером
шифрование, проверяя значение
<a href="server.htm#statvar_Ssl_cipher"><code>Ssl_cipher</code></a>.
Если значение пусто, соединение не зашифровано. Иначе соединение зашифровано,
и значение указывает на шифр шифрования. Например:
<pre>
mysql&gt; SHOW STATUS LIKE 'Ssl_cipher';
+---------------+--------------------+
| Variable_name | Value              |
+---------------+--------------------+
| Ssl_cipher    | DHE-RSA-AES256-SHA |
+---------------+--------------------+
</pre>

Для <a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
альтернатива должна использовать <code>STATUS</code> или <code>\s</code>
и проверять строку <code>SSL</code>:
<pre>
mysql&gt; \s
...
SSL: Cipher in use is DHE-RSA-AES256-SHA
...
</pre>

Или:
<pre>
mysql&gt; \s
...
SSL: Not in use
...
</pre>

<h4><a name="idm139965376945680"></a>
Конфигурация C API для безопасных соединений</h4>
<p>C API позволяет приложениям использовать безопасные соединения:</p>

<ul><li><p>Чтобы установить безопасное соединение, используйте C API
<a href="connect.htm#mysql-ssl-set"><code>mysql_ssl_set()</code></a>, чтобы
установить соответствующие опции сертификата перед запросом
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a>. См. <a href="connect.htm#mysql-ssl-set">раздел 25.8.7.72</a>.
Чтобы потребовать использования безопасного соединения, вызовите
<a href="connect.htm#mysql-options"><code>mysql_options()</code></a> с
опцией <code>MYSQL_OPT_SSL_MODE</code>. Чтобы установить разрешенные
протоколы шифрования, вызовите <a href="connect.htm#mysql-options"><code>
mysql_options()</code></a> с опцией <code>MYSQL_OPT_TLS_VERSION</code>.</li>

<li>Чтобы определить, используется ли шифрование, после того, как соединение
установлено, надо использовать
<a href="connect.htm#mysql-get-ssl-cipher"><code>mysql_get_ssl_cipher()
</code></a>. Не-<code>NULL</code> указывает на зашифрованное соединение и
называет шифр, используемый для шифрования. <code>NULL</code>
указывает, что шифрование не используется. См.
<a href="connect.htm#mysql-get-ssl-cipher">раздел 25.8.7.34</a>.
</p></li></ul>

<p>Репликация использует C API, таким образом, безопасные соединения могут
использоваться между основными и ведомыми серверами. См.
<a href="replica.htm#replication-solutions-secure-connections">раздел 19.3.9
</a>.</p>

<h3><a name="secure-connection-options"></a>7.4.5.
Опции команды для безопасных соединений</h3>
<p>Этот раздел описывает опции, которые определяют, использовать ли
безопасные соединения и названия сертификата и ключевых файлов. Эти опции
могут быть даны в командной строке или в файле опции. Для примеров
предложенного использования и как проверить, безопасно ли соединение, см.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<a name="idm139965376923088"></a><p><b>
Таблица 7.8. Резюме опций безопасного соединения</b></p>
<table border="1">
<thead><tr><th scope="col">Формат</th><th scope="col">Описание</th>
</tr></thead>
<tbody><tr><td scope="row"><a href="#option_general_ssl">
--skip-ssl</a></td><td>Не используйте безопасное соединение</td></tr>
<tr><td scope="row"><a href="#option_general_ssl">--ssl</a></td>
<td>Включить безопасное соединение</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-ca">--ssl-ca</a>
</td><td>Путь к файлу, который содержит список SSL CA</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-capath">
--ssl-capath</a></td><td>Путь каталога, который содержит, доверенные
сертификаты SSL CA в формате PEM</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-cert">--ssl-cert
</a></td><td>Путь к файлу, который содержит сертификат X509 в формате PEM
</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-cipher">
--ssl-cipher</a></td><td>Список разрешенных шифров, чтобы использовать
для шифрования соединения</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-crl">--ssl-crl
</a></td><td>Путь к файлу, который содержит списки аннулирования сертификатов
</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-crlpath">
--ssl-crlpath</a></td><td>Путь к каталогу, который содержит файлы
списка аннулирования сертификатов</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-key">--ssl-key
</a></td><td>Путь к файлу, который содержит ключ X509 в формате PEM</td></tr>
<tr><td scope="row"><a href="#option_general_ssl-mode">--ssl-mode
</a></td><td>Статус безопасности соединения с сервером</td></tr>
<tr><td scope="row"><a href="#option_general_tls-version">
--tls-version</a></td><td>Протоколы, разрешенные для безопасных соединений
</td></tr></tbody></table>

<ul><li><p><a name="option_general_ssl"></a>
<a href="#option_general_ssl"><code>--ssl</code></a></p>
<p>Опция клиента <a href="#option_general_ssl"><code>--ssl
</code></a> удалена в MySQL 8.0. Для программ клиента надо использовать
<a href="#option_general_ssl-mode"><code>--ssl-mode</code></a>.
</p>

<p>Для сервера MySQL эта опция определяет, что сервер разрешает, но не
требует безопасных соединений. Опция включена на стороне
сервера по умолчанию.</p>

<p>Серверы MySQL, собранные, используя OpenSSL, могут произвести недостающие
сертификат и ключевые файлы автоматически при запуске. См.
<a href="#creating-ssl-rsa-files-using-mysql">раздел 7.4.6.1</a>.
</p>

<p>Сервер выполняет автооткрытие файла сертификата и ключа. Если включена
<a href="#option_general_ssl"><code>--ssl</code></a>
(возможно наряду с <a href="#option_general_ssl-cipher"><code>
--ssl-cipher</code></a>) и прочие опции <code>--ssl-<em><code>xxx</code>
</em></code> не даны, чтобы сконфигурировать безопасные соединения явно,
сервер пытается включить поддержке безопасных соединений
автоматически при запуске:</p>

<ul><li><p>Если сервер обнаруживает допустимые сертификат и ключевые файлы
<code>ca.pem</code>, <code>server-cert.pem</code> и <code>server-key.pem
</code> в каталоге данных, это включает поддержку безопасных соединений
с клиентами. Файлы не должны быть самодельными.</li>

<li>Если сервер не находит допустимые сертификат и ключевые файлы в каталоге
данных, это продолжает выполняться, но не включает безопасные соединения.
</p></li></ul>

<p>Как рекомендуемый набор опций, чтобы включить безопасные соединения,
используйте, по крайней мере, <a href="#option_general_ssl-cert">
<code>--ssl-cert</code></a> и
<a href="#option_general_ssl-key"><code>--ssl-key</code></a>
на стороне сервера и <a href="#option_general_ssl-ca"><code>
--ssl-ca</code></a> на стороне клиента. См.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<p><a href="#option_general_ssl"><code>--ssl</code></a>
подразумевается другими опциями <code>--ssl-<em><code>xxx</code></em></code>,
как обозначено в описаниях для тех опций.</p>

<p>Опция <a href="#option_general_ssl"><code>--ssl</code></a>
в инвертированной форме переопределяет другие опции
<code>--ssl-<em><code>xxx</code></em></code> и указывает, что шифрование не
должно использоваться. Чтобы сделать это, определите опцию как
<a href="#option_general_ssl"><code>--ssl=0</code></a> или
синоним (<a href="#option_general_ssl"><code>--skip-ssl</code>
</a>, <a href="#option_general_ssl"><code>--disable-ssl</code>
</a>).</p>

<p>Чтобы потребовать использования безопасных соединений учетной записью
MySQL, надо использовать <a href="sql.htm#create-user"><code>CREATE USER
</code></a>, чтобы создать учетную запись по крайней мере с
<code>REQUIRE SSL</code> или <a href="sql.htm#alter-user"><code>ALTER USER
</code></a> для существующей учетной записи, чтобы добавить <code>REQUIRE
</code>. Соединения для учетной записи будут отклонены, если сервер и клиент
не были запущены с надлежащими опциями безопасного соединения.</p>

<p><code>REQUIRE</code> разрешает другие связанные с шифрованием опции,
которые могут использоваться, чтобы провести в жизнь более строгие
требования, чем <code>REQUIRE SSL</code>. См. описание <code>REQUIRE</code>
в <a href="sql.htm#create-user">разделе 14.7.1.3</a>.</li>

<li><a name="option_general_ssl-ca"></a>
<a href="#option_general_ssl-ca"><code>--ssl-ca=<em><code>
file_name</code></em></code></a></p>

<p>Путь к файлу в формате PEM, который содержит список центров сертификации
SSL, которым доверяют. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Если Вы используете шифрование, когда устанавливаете
соединения клиента, чтобы сказать клиенту не подтверждать подлинность
сертификата сервера, не определяйте ни одной опции
<a href="#option_general_ssl-ca"><code>--ssl-ca</code></a> или
<a href="#option_general_ssl-capath"><code>--ssl-capath</code>
</a>. Сервер все еще проверяет клиента согласно любым применимым требованиям,
установленным для учетной записи клиента, и это все еще использует любые
опции <a href="#option_general_ssl-ca"><code>--ssl-ca</code></a>
или <a href="#option_general_ssl-capath"><code>--ssl-capath
</code></a>, которые определены при запуске сервера.</li>

<li><a name="option_general_ssl-capath"></a>
<a href="#option_general_ssl-capath"><code>--ssl-capath=<em>
<code>dir_name</code></em></code></a></p>

<p>Путь к каталогу, который содержит доверенные сертификаты центра
сертификации SSL в формате PEM. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Если Вы используете шифрование, когда установлено соединение клиента,
чтобы сказать клиенту не подтверждать подлинность сертификаты сервера, не
определяйте ни одной опции <a href="#option_general_ssl-ca">
<code>--ssl-ca</code></a> или
<a href="#option_general_ssl-capath"><code>--ssl-capath</code>
</a>. Сервер все еще проверяет клиента согласно любым применимым требованиям,
установленным для учетной записи клиента, и это все еще использует любые
опции <a href="#option_general_ssl-ca"><code>--ssl-ca</code></a>
или <a href="#option_general_ssl-capath"><code>--ssl-capath
</code></a>, которые определены при запуске сервера.</p>

<p>Дистрибутивы MySQL, собранные, используя OpenSSL, поддерживают
<a href="#option_general_ssl-capath"><code>--ssl-capath</code>
</a> (см. <a href="#openssl-versus-yassl">раздел 7.4.1</a>).
Дистрибутивы, собранные, используя yaSSL этого не делают, поскольку yaSSL
не смотрит ни в каком каталоге и не следует за цепочечным деревом
сертификатов. yaSSL требует, чтобы все компоненты дерева сертификатов CA
содержались в пределах одного дерева сертификатов CA
и что каждый сертификат в файле имел уникальный SubjectName.
Чтобы работать вокруг этого yaSSL ограничения, свяжите отдельные файлы
сертификатов, включающие дерево сертификатов, в новый файл и определите этот
файл как значение <a href="#option_general_ssl-ca"><code>--ssl-ca
</code></a>.</li>

<li><a name="option_general_ssl-cert"></a>
<a href="#option_general_ssl-cert"><code>--ssl-cert=<em><code>
file_name</code></em></code></a></p>

<p>Название файла сертификата SSL в формате PEM, чтобы использовать для того,
чтобы основать безопасное соединение. На стороне сервера эта опция
подразумевает <a href="#option_general_ssl"><code>--ssl</code>
</a>.</li>

<li><a name="option_general_ssl-cipher"></a>
<a href="#option_general_ssl-cipher"><code>--ssl-cipher=<em>
<code>cipher_list</code></em></code></a></p>

<p>Список допустимых шифров, чтобы использовать для шифрования соединения.
Если никакой шифр в списке не будет поддержан, то зашифрованные соединения не
будут работать. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Для самой большой мобильности <em><code>cipher_list</code></em>
должен быть списком из одного или более имен шифра, отделенных двоеточиями.
Этот формат понят под OpenSSL и под yaSSL. Примеры:
<pre>
--ssl-cipher=AES128-SHA
--ssl-cipher=DHE-RSA-AES256-SHA:AES128-SHA
</pre>

OpenSSL поддерживает более гибкий синтаксис для того, чтобы определить шифры,
как описано в документации OpenSSL в
<a href="../../../www.openssl.org/docs/apps/ciphers.html" target="_top">
http://www.openssl.org/docs/apps/ciphers.html</a>. yaSSL не делает так,
попытки использовать тот расширенный синтаксис терпят неудачу для MySQL,
собранного, используя yaSSL.</p>
<p>См. <a href="#secure-connection-protocols-ciphers">раздел
7.4.3</a>.</li>

<li><a name="option_general_ssl-crl"></a>
<a href="#option_general_ssl-crl"><code>--ssl-crl=<em><code>
file_name</code></em></code></a></p>

<p>Путь к файлу, содержащему список аннулирования сертификатов
в формате PEM. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Если ни одна из опцией <a href="#option_general_ssl-crl">
<code>--ssl-crl</code></a> или
<a href="#option_general_ssl-crlpath"><code>--ssl-crlpath</code>
</a> не дана, никакие проверки CRL не выполнены, даже если путь CA
содержит списки аннулирования сертификатов.</p>

<p>Дистрибутивы MySQL, собранные, используя OpenSSL, поддерживают опцию
<a href="#option_general_ssl-crl"><code>--ssl-crl</code></a>
(см. <a href="#openssl-versus-yassl">раздел 7.4.1</a>).
Дистрибутивы, собранные, используя yaSSL, это не делают, потому что списки
аннулирования не работают с yaSSL.</li>

<li><a name="option_general_ssl-crlpath"></a>
<a href="#option_general_ssl-crlpath"><code>--ssl-crlpath=<em>
<code>dir_name</code></em></code></a></p>

<p>Путь к каталогу, который содержит файлы, содержащие списки аннулирования
сертификатов в формате PEM. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Если ни одна из опций <a href="#option_general_ssl-crl"><code>
--ssl-crl</code></a> или <a href="#option_general_ssl-crlpath">
<code>--ssl-crlpath</code></a> на задана, никакие проверки CRL не выполнены,
даже если путь CA содержит списки аннулирования сертификатов.</p></li>

<li><a name="option_general_ssl-key"></a>
<a href="#option_general_ssl-key"><code>--ssl-key=<em><code>
file_name</code></em></code></a></p>

<p>Название файла ключа SSL в формате PEM, чтобы использовать для того, чтобы
основать безопасное соединение. На стороне сервера эта опция подразумевает
<a href="#option_general_ssl"><code>--ssl</code></a>.</p>

<p>Если ключевой файл защищен паролем, программа запрашивает у пользователя
пароль. Пароль должен быть дан в интерактивном режиме, это не может быть
сохранено в файле. Если пароль является неправильным, программа продолжается,
как будто это не могло считать ключ.</p>
<p>Для лучшей безопасности, используйте сертификат с размером ключа RSA 2048
битов или больше.</li>

<li><a name="option_general_ssl-mode"></a>
<a href="#option_general_ssl-mode">
<code>--ssl-mode=<em><code>mode</code></em></code></a></p>

<p>Эта опция доступна только для программ клиента, не сервера. Это определяет
статус безопасности соединения с сервером.
Следующие значения опции разрешены:</p>

<ul><li><p><code>PREFERRED</code>: Установить безопасное (зашифрованное)
соединение, если сервер поддерживает безопасные соединения. Отступить к
незашифрованному соединению иначе. Это значение по умолчанию, если
не указана опция <a href="#option_general_ssl-mode">
<code>--ssl-mode</code></a>.</li>

<li><code>DISABLED</code>: Установить незашифрованное соединение.</li>
<li><code>REQUIRED</code>: Установить безопасное соединение, если сервер
поддерживает безопасные соединения. Попытка соединения терпит неудачу, если
безопасное соединение не может быть установлено.</li>

<li><code>VERIFY_CA</code>: Аналог <code>REQUIRED</code>, но
дополнительно проверяет серверный сертификат TLS для сконфигурированных
сертификатов Certificate Authority (CA). Попытка соединения терпит неудачу,
если никакое допустимое соответствие CA не найдено.</li>

<li><code>VERIFY_IDENTITY</code>: Аналог <code>VERIFY_CA</code>, но
дополнительно проверяет, что сертификат сервера соответствует узлу, к
которому предпринято соединение.</p></li></ul>

<p>Использование опции <a href="#option_general_ssl-ca"><code>
--ssl-ca</code></a> или <a href="#option_general_ssl-capath">
<code>--ssl-capath</code></a> подразумевает
<a href="#option_general_ssl-mode"><code>--ssl-mode=VERIFY_CA
</code></a>, если <a href="#option_general_ssl-mode"><code>
--ssl-mode</code></a> явно не установлена иначе.</p>

<p>Если <a href="#option_general_ssl-mode"><code>--ssl-mode
</code></a> является явной, использование значения кроме
<code>VERIFY_CA</code> или <code>VERIFY_IDENTITY</code> с явным
<a href="#option_general_ssl-ca"><code>--ssl-ca</code></a> или
<a href="#option_general_ssl-capath"><code>--ssl-capath</code>
</a> производит предупреждение, что никакая проверка сертификата сервера не
будет сделана, несмотря на определяемые опции сертификата CA.</p>

<p>Чтобы потребовать использования безопасных соединений учетной записью
MySQL, надо использовать <a href="sql.htm#create-user"><code>CREATE USER
</code></a> создать учетную запись по крайней мере с <code>REQUIRE SSL</code>
или использовать <a href="sql.htm#alter-user"><code>ALTER USER</code></a>
для существующей учетной записи, чтобы добавить <code>REQUIRE</code>.
Соединения для учетной записи будут отклонены, если сервер и клиент не были
запущены с надлежащими опциями безопасного соединения.</p>

<p><code>REQUIRE</code> разрешает другие связанные с шифрованием опции,
которые могут использоваться, чтобы провести в жизнь более строгие
требования, чем <code>REQUIRE SSL</code>. См.
<a href="sql.htm#create-user">раздел 14.7.1.3</a>.</li>

<li><a name="option_general_tls-version"></a>
<a href="#option_general_tls-version"><code>
--tls-version=<em><code>protocol_list</code></em></code></a></p>

<p>Для программ клиента протоколы, которые разрешены клиентом для
зашифрованных соединений. Значение это список разделенных запятой значений,
содержащий одно или более имен протокола. Протоколы, которые могут быть
названы по имени в этой опции, зависят от библиотеки SSL, использовавшейся,
чтобы собрать MySQL. Для деталей см.
<a href="#secure-connection-protocols-ciphers">раздел 7.4.3</a>.
</p>

<p>На стороне сервера вместо этого может использоваться переменная
<a href="server.htm#sysvar_tls_version"><code>tls_version</code></a>.
</p></li></ul>

<h3><a name="creating-ssl-rsa-files"></a>7.4.6.
Создание сертификатов и ключей SSL и RSA</h3>
<p>Следующее обсуждение описывает, как создать файлы, требуемые для SSL и
поддержки RSA в MySQL. Создание файла может быть выполнено, используя услуги,
предоставленные MySQL непосредственно
или вызывая <span><strong>openssl</strong></span>.</p>

<p>Сертификат SSL и ключевые файлы позволяют MySQL поддержать безопасные
соединения, используя SSL. См.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<p>Файлы ключа RSA позволяют MySQL поддержать безопасный обмен паролями
по незашифрованным соединениям для учетных записей, заверенных плагином
<code>sha256_password</code>, см.
<a href="#sha256-authentication-plugin">раздел 7.5.1.2</a>.</p>

<h4><a name="creating-ssl-rsa-files-using-mysql"></a>7.4.6.1.
Создание использование сертификатов и ключей SSL и RSA</h4>
<p>MySQL обеспечивает два способа создать сертификат и ключевые файлы SSL и
файлы ключевой пары RSA, требуемые, чтобы поддерживать безопасные соединения,
используя SSL и безопасный обмен паролями, использующий RSA по
незашифрованным соединениям, если те файлы отсутствуют:</p>

<ul><li><p>Сервер может сгенерировать эти файлы при запуске.</li>
<li>Пользователи могут вызвать <a href="programs.htm#mysql-ssl-rsa-setup">
<span><strong>mysql_ssl_rsa_setup</strong></span></a>.</p></li></ul>

<p>Автогенерпция файлов и <a href="programs.htm#mysql-ssl-rsa-setup"><span>
<strong>mysql_ssl_rsa_setup</strong></span></a> понижают барьер для
использования SSL, облегчая производить необходимые файлы. Однако,
сертификаты, произведенные этими методами, самоподписаны, что, возможно, не
очень безопасно. После того, как Вы приобретете опыт, используя такие файлы,
рассмотрите получение сертификата/ключа из
зарегистрированного центра сертификации.</p>

<h5><a name="idm139965376745584"></a>Автоматическое создание файлов SSL и RSA
</h5>
<p>У серверов MySQL есть способность автоматического производства
файлов SSL и RSA при запуске, для дистрибутивов MySQL, собранных, используя
OpenSSL. Переменные <a href="server.htm#sysvar_auto_generate_certs"><code>
auto_generate_certs</code></a> и
<a href="server.htm#sysvar_sha256_password_auto_generate_rsa_keys"><code>
sha256_password_auto_generate_rsa_keys</code></a> управляют автоматическим
созданием этих файлов. Обе переменные включены по умолчанию. Их можно
включить при запуске, но нельзя установить во время выполнения.</p>

<p>При запуске сервер автоматически производит сертификат SSL и ключевые
файлы для клиента и сервера в каталоге данных, если включена
<a href="server.htm#sysvar_auto_generate_certs"><code>auto_generate_certs
</code></a>, никакие опции SSL, кроме
<a href="#option_general_ssl"><code>--ssl</code></a>
не заданы и файлы SSL сервера отсутствуют в каталоге данных. Эти файлы
включают безопасные соединения клиента, используя SSL, см.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<ol type="1"><li><p>Сервер проверяет каталог данных на файлы SSL
со следующими именами:
<pre>
ca.pem
server-cert.pem
server-key.pem
</pre></li>

<li>Если какой-либо из тех файлов присутствует, сервер не создает файлов SSL.
Иначе это создает их плюс некоторые дополнительные файлы:
<pre>
ca.pem          Self-signed CA certificate
ca-key.pem      CA private key
server-cert.pem Server certificate
server-key.pem  Server private key
client-cert.pem Client certificate
client-key.pem  Client private key
</pre></li>

<li>Если сервер создает файлы SSL, он использует названия
<code>ca.pem</code>, <code>server-cert.pem</code> и
<code>server-key.pem</code>, чтобы установить соответствующие системные
переменные (<a href="server.htm#sysvar_ssl_ca"><code>ssl_ca</code></a>,
<a href="server.htm#sysvar_ssl_cert"><code>ssl_cert</code></a> и
<a href="server.htm#sysvar_ssl_key"><code>ssl_key</code></a>).</p></li></ol>

<p>При запуске сервер автоматически производит частные/общественные файлы
ключевой пары RSA в каталоге данных, если включена переменная
<a href="server.htm#sysvar_sha256_password_auto_generate_rsa_keys"><code>
sha256_password_auto_generate_rsa_keys</code></a>, никакие опции RSA не
определены, и файлы RSA отсутствуют в каталоге данных. Эти файлы включают
безопасный обмен паролями, использующий RSA по незашифрованным соединениям
для учетных записей, заверенных плагином <code>sha256_password</code>, см.
<a href="#sha256-authentication-plugin">раздел 7.5.1.2</a>.</p>

<ol type="1"><li><p>Сервер проверяет каталог данных на файлы RSA
со следующими именами:
<pre>
private_key.pem Private member of private/public key pair
public_key.pem  Public member of private/public key pair
</pre></li>

<li>Если какой-либо из этих файлов присутствует, сервер не создает файлов
RSA. Иначе это создает их.</li>
<li>Если сервер создает файлы RSA, он использует их имена, чтобы установить
соответствующие системные переменные
(<a href="server.htm#sysvar_sha256_password_private_key_path"><code>
sha256_password_private_key_path</code></a>,
<a href="server.htm#sysvar_sha256_password_public_key_path"><code>
sha256_password_public_key_path</code></a>).</p></li></ol>

<h5><a name="idm139965376715984"></a>
Ручное создание файлов SSL и RSA, используя mysql_ssl_rsa_setup</h5>
<p>MySQL включает <a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>
mysql_ssl_rsa_setup</strong></span></a>, которая может быть вызвана вручную,
чтобы произвести файлы SSL и RSA. Эта утилита включена во все дистрибутивы
MySQL, но это действительно требует, чтобы доступной команды
<span><strong>openssl</strong></span>. Для инструкций использования см.
<a href="programs.htm#mysql-ssl-rsa-setup">раздел 5.4.3</a>.</p>

<h5><a name="idm139965376711936"></a>Характеристики файлов SSL и RSA</h5>
<p>Файлы SSL и RSA, создаваемые автоматически сервером или вызывая
<a href="programs.htm#mysql-ssl-rsa-setup"><span>
<strong>mysql_ssl_rsa_setup</strong></span></a> имеют эти характеристики:</p>

<ul><li><p>Ключи SSL И RSA составляют 2048 битов.</li>
<li>Сертификат SSL CA самоподписан.</li>
<li>Сертификаты клиента и сервера подписаны сертификатом CA и ключом,
используя алгоритм подписи <code>sha256WithRSAEncryption</code>.</li>

<li>Сертификаты SSL используют Common Name (CN)
с соответствующим типом сертификата (CA, Server, Client):
<pre>
ca.pem: MySQL_Server_<em><code>suffix</code></em>_Auto_Generated_CA_Certificate
server-cert.pm: MySQL_Server_<em><code>suffix</code></em>_Auto_Generated_Server_Certificate
client-cert.pm: MySQL_Server_<em><code>suffix</code></em>_Auto_Generated_Client_Certificate
</pre>

<em><code>suffix</code></em> основано на номере версии MySQL. Для файлов,
произведенных <a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>
mysql_ssl_rsa_setup</strong></span></a>, суффикс может быть определен явно,
используя опцию <a href="programs.htm#option_mysql_ssl_rsa_setup_suffix">
<code>--suffix</code></a>.</p>

<p>Для файлов, произведенных сервером, если получающиеся значения CN
превышают 64 символа, часть имени
<code>_<em><code>suffix</code></em></code> опущена.</li>

<li>У файлов SSL есть пустые значения для Country (C), State or
Province (ST), Organization (O), Organization Unit Name (OU)
и адреса электронной почты.</li>

<li>Файлы SSL, создаваемые сервером или
<a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>mysql_ssl_rsa_setup
</strong></span></a>, допустимы в течение десяти лет со времени создания.
</li>

<li>Файлы RSA не истекают.</li>
<li>У файлов SSL есть различные порядковые номера для каждой пары
сертификата/ключа (1 CA, 2 Server, 3 Client).</li>

<li>Файлы, создаваемые автоматически сервером, принадлежат учетной записи,
которая выполняет сервер. Файлы, созданные с использованием
<a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>mysql_ssl_rsa_setup
</strong></span></a>, принадлежат пользователю, который вызвал ту программу.
Это может быть изменено на системах, которые поддерживают
<code>chown()</code>, если программа вызвана <code>root</code> и опция
<a href="programs.htm#option_mysql_ssl_rsa_setup_uid"><code>--uid</code></a>
дана, чтобы определить пользователя, которому должны принадлежать файлы.</li>

<li>В Unix режим доступа к файлу 644 для файлов сертификата (то есть,
читаемые миром) и 600 для ключевых файлов (то есть, доступны только учетной
записью, которая выполняет сервер).</p></li></ul>

<p>Чтобы видеть содержание сертификата SSL (например, чтобы проверить
диапазон дат, по которым это допустимо), вызовите
<span><strong>openssl</strong></span>:
<pre>
shell&gt; openssl x509 -text -in ca.pem
shell&gt; openssl x509 -text -in server-cert.pem
shell&gt; openssl x509 -text -in client-cert.pem
</pre>

Также возможно проверить информацию об истечении сертификата SSL,
используя этот запрос SQL:
<pre>
mysql&gt; SHOW STATUS LIKE 'Ssl_server_not%';
+-----------------------+--------------------------+
| Variable_name         | Value                    |
+-----------------------+--------------------------+
| Ssl_server_not_after  | Apr 28 14:16:39 2025 GMT |
| Ssl_server_not_before | May  1 14:16:39 2015 GMT |
+-----------------------+--------------------------+
</pre>

<h4><a name="creating-ssl-files-using-openssl"></a>7.4.6.2.
Создание сертификатов и ключей SSL, используя openssl</h4>
<p>Этот раздел описывает, как использовать <span><strong>openssl</strong>
</span>, чтобы настроить сертификат SSL и ключевые файлы для использования
серверами MySQL и клиентами. Первый пример показывает упрощенную процедуру,
такую как, Вы могли бы использовать из командной строки. Второй показывает
сценарий, который содержит больше деталей. Первые два примера предназначены
для использования в Unix и оба используют
<span><strong>openssl</strong></span> как часть OpenSSL.
Третий пример описывает, как настроить файлы SSL в Windows.</p>

<p>Есть более легкие альтернативы производства файлов, требуемых для SSL, чем
процедура, описанная здесь: позвольте серверу сгенерировать их или
использовать <a href="programs.htm#mysql-ssl-rsa-setup"><span><strong>
mysql_ssl_rsa_setup</strong></span></a>, см.
<a href="#creating-ssl-rsa-files-using-mysql">раздел 7.4.6.1</a>.
</p>

<p>Безотносительно метода, который Вы используете, чтобы произвести
сертификат и ключевые файлы, значение Common Name, используемое для сервера и
свидетельств/ключей клиента, должно отличаться от значения Common Name,
используемого для сертификата CA. Иначе сертификат и ключевые файлы не будут
работать на сервере, собранном, используя OpenSSL.
Типичная ошибка в этом случае:
<pre>
ERROR 2026 (HY000): SSL connection error:
error:00000001:lib(0):func(0):reason(1)
</pre>

<h5><a name="creating-ssl-files-using-openssl-unix-command-line"></a>
Пример 1: Создание файлов SSL из командной строки в Unix</h5>
<p>Следующий пример показывает ряд команд, чтобы создать сертификат и
ключевые файлы клиента и сервера. Вы должны будете ответить на несколько
подсказок <span><strong>openssl</strong></span>.
Чтобы произвести испытательные файлы, Вы можете нажать Enter
на все подсказки. Чтобы произвести файлы для производственного использования,
Вы должны обеспечить непустые ответы.
<pre>
# Create clean environment
shell&gt; rm -rf newcerts
shell&gt; mkdir newcerts &amp;&amp; cd newcerts

# Create CA certificate
shell&gt; openssl genrsa 2048 &gt; ca-key.pem
shell&gt; openssl req -new -x509 -nodes -days 3600 \
                  -key ca-key.pem -out ca.pem

# Create server certificate, remove passphrase, and sign it
# server-cert.pem = public key, server-key.pem = private key
shell&gt; openssl req -newkey rsa:2048 -days 3600 \
                  -nodes -keyout server-key.pem -out server-req.pem
shell&gt; openssl rsa -in server-key.pem -out server-key.pem
shell&gt; openssl x509 -req -in server-req.pem -days 3600 \
                  -CA ca.pem -CAkey ca-key.pem -set_serial 01 \
                  -out server-cert.pem

# Create client certificate, remove passphrase, and sign it
# client-cert.pem = public key, client-key.pem = private key
shell&gt; openssl req -newkey rsa:2048 -days 3600 \
                  -nodes -keyout client-key.pem -out client-req.pem
shell&gt; openssl rsa -in client-key.pem -out client-key.pem
shell&gt; openssl x509 -req -in client-req.pem -days 3600 \
                  -CA ca.pem -CAkey ca-key.pem -set_serial 01 \
                  -out client-cert.pem
</pre>

После производства сертификатов проверьте их:
<pre>
shell&gt; openssl verify -CAfile ca.pem server-cert.pem client-cert.pem
server-cert.pem: OK
client-cert.pem: OK
</pre>

Чтобы видеть содержание сертификата (например, проверить диапазон дат, по
которым сертификат допустим), вызовите <span><strong>openssl</strong></span>:
<pre>
shell&gt; openssl x509 -text -in ca.pem
shell&gt; openssl x509 -text -in server-cert.pem
shell&gt; openssl x509 -text -in client-cert.pem
</pre>

Теперь у Вас есть ряд файлов, которые могут использоваться следующим образом:
<ul><li><p><code>ca.pem</code>: Используйте это в качестве параметра
<a href="#option_general_ssl-ca"><code>--ssl-ca</code></a>
на сторонах сервера и сторонах клиента. Сертификат CA, если используется,
должен быть тем же самым с обеих сторон.</li>

<li><code>server-cert.pem</code>, <code>server-key.pem</code>:
Используйте их в качестве параметров
<a href="#option_general_ssl-cert"><code>--ssl-cert</code></a> и
<a href="#option_general_ssl-key"><code>--ssl-key</code></a>
на стороне сервера.</li>

<li><code>client-cert.pem</code>, <code>client-key.pem</code>:
Используйте их в качестве параметров
<a href="#option_general_ssl-cert"><code>--ssl-cert</code></a> и
<a href="#option_general_ssl-key"><code>--ssl-key</code></a>
на стороне клиента.</p></li></ul>
<p>См. <a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<h5><a name="creating-ssl-files-using-openssl-unix-script"></a>
Пример 2: Создание файлов SSL, используя скрипт в Unix</h5>
<p>Вот скрипт в качестве примера, который показывает, как настроить
сертификат SSL и ключевые файлы для MySQL. После выполнения скрипта
используйте файлы для соединений SSL как описано в
<a href="#using-secure-connections">разделе 7.4.4</a>.
<pre>
DIR=`pwd`/openssl
PRIV=$DIR/private

mkdir $DIR $PRIV $DIR/newcerts
cp /usr/share/ssl/openssl.cnf $DIR
replace ./demoCA $DIR -- $DIR/openssl.cnf

# Create necessary files: $database, $serial and $new_certs_dir
# directory (optional)
touch $DIR/index.txt
echo "01" &gt; $DIR/serial

#
# Generation of Certificate Authority(CA)
#
openssl req -new -x509 -keyout $PRIV/cakey.pem -out $DIR/ca.pem \
        -days 3600 -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# ................++++++
# .........++++++
# writing new private key to '/home/monty/openssl/private/cakey.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be
# incorporated into your certificate request.
# What you are about to enter is what is called a Distinguished Name
# or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, раздел) []:
# Common Name (eg, YOUR name) []:MySQL admin
# Email Address []:

#
# Create server request and key
#
openssl req -new -keyout $DIR/server-key.pem -out \
$DIR/server-req.pem -days 3600 -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# ..++++++
# ..........++++++
# writing new private key to '/home/monty/openssl/server-key.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be
# incorporated into your certificate request.
# What you are about to enter is what is called a Distinguished Name
# or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, раздел) []:
# Common Name (eg, YOUR name) []:MySQL server
# Email Address []:
#
# Please enter the following 'extra' attributes
# to be sent with your certificate request
# A challenge password []:
# An optional company name []:

#
# Remove the passphrase from the key
#
openssl rsa -in $DIR/server-key.pem -out $DIR/server-key.pem

# Sign server cert
#
openssl ca -cert $DIR/ca.pem -policy policy_anything \
        -out $DIR/server-cert.pem -config $DIR/openssl.cnf \
        -infiles $DIR/server-req.pem

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Enter PEM pass phrase:
# Check that the request matches the signature
# Signature ok
# The Subjects Distinguished Name is as follows
# countryName :PRINTABLE:'FI'
# organizationName:PRINTABLE:'MySQL AB'
# commonName:PRINTABLE:'MySQL admin'
# Certificate is to be certified until Sep 13 14:22:46 2003 GMT
# (365 days)
# Sign the certificate? [y/n]:y
#
# 1 out of 1 certificate requests certified, commit? [y/n]y
# Write out database with 1 new entries
# Data Base Updated

#
# Create client request and key
#
openssl req -new -keyout $DIR/client-key.pem -out \
$DIR/client-req.pem -days 3600 -config $DIR/openssl.cnf

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# .....................................++++++
# .............................................++++++
# writing new private key to '/home/monty/openssl/client-key.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# -----
# You are about to be asked to enter information that will be
# incorporated into your certificate request.
# What you are about to enter is what is called a Distinguished Name
# or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.', the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, раздел) []:
# Common Name (eg, YOUR name) []:MySQL user
# Email Address []:
#
# Please enter the following 'extra' attributes
# to be sent with your certificate request
# A challenge password []:
# An optional company name []:

#
# Remove the passphrase from the key
#
openssl rsa -in $DIR/client-key.pem -out $DIR/client-key.pem

#
# Sign client cert
#
openssl ca -cert $DIR/ca.pem -policy policy_anything \
        -out $DIR/client-cert.pem -config $DIR/openssl.cnf \
        -infiles $DIR/client-req.pem

# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Enter PEM pass phrase:
# Check that the request matches the signature
# Signature ok
# The Subjects Distinguished Name is as follows
# countryName :PRINTABLE:'FI'
# organizationName:PRINTABLE:'MySQL AB'
# commonName:PRINTABLE:'MySQL user'
# Certificate is to be certified until Sep 13 16:45:17 2003 GMT
# (365 days)
# Sign the certificate? [y/n]:y
#
# 1 out of 1 certificate requests certified, commit? [y/n]y
# Write out database with 1 new entries
# Data Base Updated

#
# Create a my.cnf file that you can use to test the certificates
#
cat &lt;&lt;EOF &gt; $DIR/my.cnf
[client]
ssl-ca=$DIR/ca.pem
ssl-cert=$DIR/client-cert.pem
ssl-key=$DIR/client-key.pem
[mysqld]
ssl-ca=$DIR/ca.pem
ssl-cert=$DIR/server-cert.pem
ssl-key=$DIR/server-key.pem
EOF
</pre>

<h5><a name="creating-ssl-files-using-openssl-windows"></a>
Пример 3: Создание файлов SSL в Windows</h5>
<p>Загрузите OpenSSL для Windows, если это не установлено в Вашей системе.
Краткий обзор доступных пакетов может быть найден на:
<pre>
<a href="../../../www.slproweb.com/products/Win32OpenSSL.html" target="_top">
http://www.slproweb.com/products/Win32OpenSSL.html</a>
</pre>

Выберите Win32 OpenSSL Light или Win64 OpenSSL Light,
в зависимости от Вашей архитектуры (32-битовый или 64-битовый).
Местоположение установки по умолчанию будет
<code>C:\OpenSSL-Win32</code> или <code>C:\OpenSSL-Win64</code>.
Следующие инструкции принимают местоположение по умолчанию
<code>C:\OpenSSL-Win32</code>.</p>

<p>Если сообщение происходит во время указания установки
<code>'...critical component is missing: Microsoft Visual
C++ 2008 Redistributables'</code>, отмените установку и загрузите один из
следующих пакетов также, снова в зависимости от Вашей архитектуры
(32-битовый или 64-битовый):</p>

<ul><li><p>Visual C++ 2008 Redistributables (x86):
<pre>
<a href="../../../www.microsoft.com/downloads/details.aspx@familyid=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF" target="_top">http://www.microsoft.com/downloads/details.aspx?familyid=9B2DA534-3E03-4391-8A4D-074B9F2BC1BF</a>
</pre></li>

<li>Visual C++ 2008 Redistributables (x64):
<pre>
<a href="../../../www.microsoft.com/downloads/details.aspx@familyid=bd2a6171-e2d6-4230-b809-9a8d7548c1b6" target="_top">http://www.microsoft.com/downloads/details.aspx?familyid=bd2a6171-e2d6-4230-b809-9a8d7548c1b6</a>
</pre></li></ul>

<p>После установки дополнительного пакета, перезапустите процедуру
установки OpenSSL.</p>
<p>Во время установки оставьте значение по умолчанию
<code>C:\OpenSSL-Win32</code> как путь установки, а также опцию по умолчанию
<code>'Copy OpenSSL DLL files to the Windows system directory'</code>.</p>

<p>Когда установка закончилась, надо добавить
<code>C:\OpenSSL-Win32\bin</code> в Windows System Path:</p>
<ol type="1"><li><p>На рабочем столе кликните правой кнопкой мыши по
<span>My Computer</span> и выберите <span>Properties</span>.</li>

<li>Выберите вкладку <span>Advanced</span> из меню
<span>System Properties</span> и там нажмите
кнопку <span class="guibutton">Environment Variables</span>.</li>

<li>В <span>System Variables</span> выберите
<span>Path</span>, кликните по <span class="guibutton">Edit</span>.
Появится диалог <span>Edit System Variable</span>.</li>

<li>Добавьте в конец <code>';C:\OpenSSL-Win32\bin'</code>
(обратите внимание на точку с запятой!).</li>
<li>Трижды нажмите OK.</li>

<li>Проверьте, что OpenSSL был правильно объединен в переменную Path,
открывая новую консоль (<span><strong>Start&gt;Run&gt;cmd.exe</strong>
</span>) и проверяя, что OpenSSL доступен:
<pre>
Microsoft Windows [Version ...]
Copyright (c) 2006 Microsoft Corporation. All rights reserved.

C:\Windows\system32&gt;cd \

C:\&gt;openssl
OpenSSL&gt; exit &lt;&lt;&lt; If you see the OpenSSL prompt,
installation was successful.

C:\&gt;
</pre></li></ol>

<p>В зависимости от Вашей версии Windows предыдущие устанавливающие путь
инструкции могли бы отличаться немного.</p>
<p>После того, как OpenSSL был установлен, используйте инструкции, подобные
тем, которые даны в примере 1 (показан ранее в этом разделе),
со следующими изменениями:</p>

<ul><li><p>Измените следующие команды Unix:
<pre>
# Create clean environment
shell&gt; rm -rf newcerts
shell&gt; mkdir newcerts &amp;&amp; cd newcerts
</pre>

В Windows используйте эти команды вместо этого:
<pre>
# Create clean environment
C:\&gt; md c:\newcerts
C:\&gt; cd c:\newcerts
</pre></li>

<li>Когда символ <code>'\'</code> показывают в конце командной строки,
он должен быть удален, и команды введены все в одну строку.</p></li></ul>
<p>После производства сертификата и ключевых файлов, чтобы использовать их
для соединений SSL см. <a href="#using-secure-connections">раздел
7.4.4</a>.</p>

<h4><a name="creating-rsa-files-using-openssl"></a>7.4.6.3.
Создание ключей RSA, используя openssl</h4>
<p>Этот раздел описывает, как использовать <span><strong>openssl</strong>
</span>, чтобы настроить файлы ключа RSA, которые позволяют MySQL поддержать
безопасный обмен паролями по незашифрованным соединениям для учетных записей,
заверенных плагином <code>sha256_password</code>.</p>

<p>Есть более легкие альтернативы производству файлов, требуемых для RSA, чем
процедура, описанная здесь: позвольте серверу сгенерировать их или
использовать <a href="programs.htm#mysql-ssl-rsa-setup">
<span><strong>mysql_ssl_rsa_setup</strong></span></a>, см.
<a href="#creating-ssl-rsa-files-using-mysql">раздел 7.4.6.1</a>.
</p>

<p>Чтобы создать файлы пары ключа RSA, выполните эти команды в то время, как
зарегистрированы в системе как учетная запись, которая выполняет сервер
MySQL, таким образом, файлы будут принадлежать той учетной записи:
<pre>
openssl genrsa -out private_key.pem 2048
openssl rsa -in private_key.pem -pubout -out public_key.pem
</pre>
Эти команды создают 2048-битовые ключи. Чтобы создать более сильные ключи,
используйте большее значение.</p>

<p>Установите режимы доступа для ключевых файлов. Частный ключ должен быть
читаемым только сервером, тогда как открытый ключ может быть свободно
распределен пользователям клиента:
<pre>
chmod 400 private_key.pem
chmod 444 public_key.pem
</pre>

<h3><a name="windows-and-ssh"></a>7.4.7.
Соединение с MySQL из Windows по SSH</h3>
<p>Этот раздел описывает, как получить безопасное соединение с
удаленным сервером MySQL с SSH. Информация была предоставлена David
Carlson <code>&lt;<a href="mailto:dcarlson@mplcomm.com">dcarlson@mplcomm.com
</a>&gt;</code>.</p>

<ol type="1"><li><p>Установите клиент SSH на своей машине Windows. Для
сравнения клиентов SSH см.
<a href="../../../en.wikipedia.org/wiki/Comparison_of_SSH_clients"
target="_top">http://en.wikipedia.org/wiki/Comparison_of_SSH_clients</a>.
</li>

<li>Запустите свой Windows-клиент SSH. Установите <code>Host_Name =
<em><code>yourmysqlserver_URL_or_IP</code></em></code>. Установите
<code>userid=<em><code>your_userid</code></em></code>, чтобы
входить в систему к Вашему серверу. Это значение <code>userid</code> не
должно бы быть тем же самым, как имя пользователя Вашей учетной записи MySQL.
</li>

<li>Настройте перенаправление портов. Либо удаленное перенаправление
(<code>local_port: 3306</code>, <code>remote_host:
<em><code>yourmysqlservername_or_ip</code></em></code>,
<code>remote_port: 3306</code>), либо локальное перенаправление
(<code>port: 3306</code>, <code>host: localhost</code>, <code>remote port:
3306</code>).</li>

<li>Сохраните все, иначе Вы должны будете сделать заново это в следующий раз.
</li>
<li>Войдите в систему сервера с сеансом SSH, который Вы только что создали.
</li>

<li>На Вашей машине Windows, запустите некоторое приложение ODBC
(такое как Access).</li>
<li>Создайте новый файл в Windows и свяжите с MySQL,
используя драйвер ODBC тем же самым путем, как Вы обычно делаете, указав
<code>localhost</code> для сервера MySQL, а не <em><code>yourmysqlservername
</code></em>.</p></li></ol>
<p>В этом пункте у Вас должно быть соединение ODBC с MySQL,
зашифрованное использованием SSH.</p>

<h2><a name="security-plugins"></a>7.5. Плагины безопасности</h2>
<p>MySQL включает несколько плагинов, которые
осуществляют механизмы безопасности:</p>

<ul><li><p>Плагины для того, чтобы подтвердить подлинность попыток клиентов
соединиться с MySQL Server. Плагины доступны для нескольких протоколов
аутентификации. Для общего обсуждения процесса аутентификации см.
<a href="#pluggable-authentication">раздел 7.3.9</a>.
Для характеристик определенных плагинов аутентификации см.
<a href="#authentication-plugins">раздел 7.5.1</a>.</li>

<li>Плагин проверки допустимости пароля для того, чтобы осуществить политику
силы пароля и оценить силу потенциальных паролей. См.
<a href="#validate-password-plugin">раздел 7.5.2</a>.</li>

<li>Плагин брелока, который обеспечивает безопасное хранение для
чувствительной информации. См. <a href="#keyring">раздел 7.5.3
</a>.</p></li></ul>

<h3><a name="authentication-plugins"></a>7.5.1. Плагины аутентификации</h3>
<p>Следующие разделы описывают плагины аутентификации, доступные в MySQL.</p>
<p>Плагин по умолчанию <code>mysql_native_password</code>, если системная
переменная <a href="server.htm#sysvar_default_authentication_plugin"><code>
default_authentication_plugin</code></a> не установлена иначе.</p>

<h4><a name="native-authentication-plugin"></a>7.5.1.1.
Родной плагин аутентификации</h4>
<p>MySQL включает плагин <code>mysql_native_password</code>, который
осуществляет родную аутентификацию, то есть, аутентификация для
паролей, сохраненных в столбце <code>authentication_string</code>
таблицы <code>mysql.user</code>.</p>
<p>Следующая таблица показывает плагина на сторонах сервера и клиента.</p>

<a name="idm139965376527440"></a><p><b>
Таблица 7.9. Плагин аутентификации пароля MySQL</b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td><td>
<code>mysql_native_password</code></td></tr>
<tr><td scope="row">Имя плагина клиента</td><td><code>mysql_native_password
</code></td></tr>
<tr><td scope="row">Библиотека</td><td>Нет (встроенный плагин)</td>
</tr></tbody></table>

<p>Плагин существует в обеих формах клиента и сервера:</p>
<ul><li><p>Серверный плагин встроен в сервер, не должен быть загружен явно и
не может быть отключен, выгружая его.</li>

<li>Использование программ клиента MySQL
<code>mysql_native_password</code> по умолчанию. Опция
<a href="programs.htm#option_mysql_default-auth"><code>--default-auth</code>
</a> может использоваться в качестве подсказки, который клиентский плагин
программа может ожидать использовать:
<pre>
shell&gt; mysql --default-auth=mysql_native_password ...
</pre></li></ul>

<p>Если строка учетной записи не определяет имени плагина,
сервер игнорирует учетную запись.</p>
<p>См. <a href="#pluggable-authentication">раздел 7.3.9</a>.</p>

<h4><a name="sha256-authentication-plugin"></a>7.5.1.2.
Плагин аутентификации SHA-256</h4>
<p>MySQL обеспечивает плагин аутентификации, который осуществляет SHA-256,
хеширующий пароли учетной записи пользователя.</p>

<p>Соединяться с сервером, используя учетную запись, которая подтверждает
подлинность с плагином <code>sha256_password</code> можно,
используя соединение SSL или незашифрованное соединение, которое шифрует
пароль, используя RSA, как описано позже в этом разделе. Так или иначе,
использование плагина <code>sha256_password</code> требует, чтобы MySQL был
собран с SSL. См. <a href="#secure-connections">раздел 7.4</a>.
</p>
<p>Следующая таблица показывает имена плагина на сторонах сервера и клиента.
</p>

<a name="idm139965376504464"></a><p><b>
Таблица 7.10. Плагин аутентификации MySQL SHA-256</b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td><td><code>sha256_password
</code></td></tr>
<tr><td scope="row">Имя плагина клиента</td><td><code>sha256_password</code>
</td></tr>
<tr><td scope="row">Библиотека</td><td>Нет (встроенный плагин)</td>
</tr></tbody></table>

<p>Сторона сервера плагина <code>sha256_password</code> встроена в сервер,
не должна быть загружена явно и не может быть отключена, выгружая его. Точно
так же клиенты не должны определить местоположение клиентского плагина.</p>

<p>Чтобы настраивать учетную запись, которая использует плагин
<code>sha256_password</code> для хеширования пароля по SHA-256,
используйте следующий запрос:
<pre>
CREATE USER 'sha256user'@'localhost'
       IDENTIFIED WITH sha256_password BY 'Sh@256Pa33';
</pre>

Альтернативно, запустите сервер с плагином аутентификации по умолчанию,
установленным в <code>sha256_password</code>. Например, поместите эти строки
в файл параметров сервера:
<pre>
[mysqld]
default_authentication_plugin=sha256_password
</pre>

Это вызывает плагин <code>sha256_password</code>, который будет
использоваться по умолчанию для новых учетных записей. В результате возможно
создать учетную запись и установить ее пароль, не называя плагин явно,
используя <a href="sql.htm#create-user"><code>CREATE USER</code></a>:
<pre>
CREATE USER 'sha256user'@'localhost' IDENTIFIED BY 'Sh@256Pa33';
</pre>
В этом случае сервер назначает плагин <code>sha256_password</code>
учетной записи и шифрует пароль, используя SHA-256.</p>

<p>Учетные записи в <code>mysql.user</code>, которые используют пароли
SHA-256, могут быть идентифицированы как строки с
<code>'sha256_password'</code> в столбце <code>plugin</code> и хешем
пароля SHA-256 в столбце <code>authentication_string</code>.</p>

<p>Другое последствие использования <code>sha256_password</code> как
плагин аутентификации по умолчанию: чтобы создать учетную запись, которая
использует отличный плагин, Вы должны определить плагин, используя
<code>IDENTIFIED WITH</code> в <a href="sql.htm#create-user"><code>CREATE
USER</code></a>. Например, чтобы использовать плагин
<code>mysql_native_password</code> используйте этот запрос:
<pre>
CREATE USER 'nativeuser'@'localhost'
       IDENTIFIED WITH mysql_native_password BY 'N@tivePa33';
</pre>

MySQL может быть собран, используя OpenSSL или yaSSL (см.
<a href="#openssl-versus-yassl">раздел 7.4.1</a>).
Плагин <code>sha256_password</code> работает с дистрибутивами, собранными,
используя любой пакет, но если MySQL собран, используя OpenSSL, шифрование
RSA доступно, и <code>sha256_password</code> осуществляет следующие
дополнительные способности. Чтобы включить эти способности, Вы должны также
следовать за процедурой конфигурации RSA, данной позже в этом разделе.</p>

<ul><li><p>Для клиента возможно передать пароли к серверу, используя
шифрование RSA во время процесса соединения клиента, как описано позже.</li>
<li>Сервер выставляет две дополнительных системных переменные,
<a href="server.htm#sysvar_sha256_password_private_key_path"><code>
sha256_password_private_key_path</code></a> и
<a href="server.htm#sysvar_sha256_password_public_key_path"><code>
sha256_password_public_key_path</code></a>.
Это предназначено, чтобы администратор базы данных установил их в названия
файлов пары частного и открытого ключа RSA при запуске сервера, если у
ключевых файлов будут имена, которые отличаются от системных
значений по умолчанию.</li>

<li>Сервер выставляет переменную состояния
<a href="server.htm#statvar_Rsa_public_key"><code>Rsa_public_key</code></a>,
которая выводит на экран значение открытого ключа RSA.</li>

<li><a href="programs.htm#mysql"><span><strong>mysql</strong></span></a> и
<span><strong>mysqltest</strong></span> поддерживают опцию
<a href="programs.htm#option_mysql_server-public-key-path"><code>
--server-public-key-path</code></a>, чтобы определить файл открытого
ключа RSA явно.</p></li></ul>

<p>Для клиентов, которые используют плагин <code>sha256_password</code>,
пароли никогда не выставляются как открытый текст, соединяясь с сервером. То,
как передача пароля происходит, зависит от того, используется ли соединение
SSL и доступно ли шифрование RSA:</p>

<ul><li><p>Если соединение SSL используется, пароль посылают как открытый
текст, но он не может быть перехвачен, потому что соединение
зашифровано, используя SSL.</li>

<li>Если соединение SSL не используется, но шифрование RSA доступно, пароль
посылают в пределах незашифрованного соединения, но пароль RSA-зашифрован,
чтобы предотвратить перехват. Когда сервер получает пароль, он дешифрует это.
Скремблирование используется в шифровании, чтобы
предотвратить повторные нападения.</li>

<li>Если соединение SSL не используется, и шифрование RSA недоступно,
<code>sha256_password</code> вызывает попытку соединения потерпеть неудачу,
потому что пароль нельзя послать, не будучи выставленным как открытый текст.
</p></li></ul>

<p>Как упомянуто ранее, шифрование пароля RSA доступно, только если MySQL был
собран, используя OpenSSL. Значение для дистрибутивов MySQL, собранных,
используя yaSSL: пароли SHA-256 могут использоваться только, когда клиенты
используют SSL, чтобы получить доступ к серверу. См.
<a href="#using-secure-connections">раздел 7.4.4</a>.</p>

<p>Предполагая, что MySQL был собран, используя OpenSSL, следующая процедура
описывает, как включить шифрование RSA паролей во время
процесса соединения клиента:</p>

<ol type="1"><li><p>Создайте файлы пары открытого ключа RSA, используя
инструкции в <a href="#creating-ssl-rsa-files">разделе 7.4.6</a>.
</li>
<li>Если файлы частного и открытого ключа расположены в каталоге данных и
названы <code>private_key.pem</code> и <code>public_key.pem</code> (значения
по умолчанию системных переменных
<a href="server.htm#sysvar_sha256_password_private_key_path">
<code>sha256_password_private_key_path</code></a> и
<a href="server.htm#sysvar_sha256_password_public_key_path"><code>
sha256_password_public_key_path</code></a>),
сервер будет использовать их автоматически при запуске.</p>

<p>Иначе в файле параметров сервера установите системные переменные в
ключевые имена файла. Если файлы расположены в каталоге серверных данных, Вы
не должны определить их полные пути:
<pre>
[mysqld]
sha256_password_private_key_path=myprivkey.pem
sha256_password_public_key_path=mypubkey.pem
</pre>

Если ключевые файлы не расположены в каталоге данных,
используйте полные пути
<pre>
[mysqld]
sha256_password_private_key_path=/usr/local/mysql/myprivkey.pem
sha256_password_public_key_path=/usr/local/mysql/mypubkey.pem
</pre></li>

<li>Перезапустите сервер, затем соединитесь с ним и проверьте переменную
<a href="server.htm#statvar_Rsa_public_key"><code>Rsa_public_key</code></a>.
Значение будет отличаться от показанного здесь, но должно быть непустым:
<pre>
mysql&gt; SHOW STATUS LIKE 'Rsa_public_key'\G
*************************** 1. row ***************************
Variable_name: Rsa_public_key
Value: -----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDO9nRUDd+KvSZgY7cNBZMNpwX6
MvE1PbJFXO7u18nJ9lwc99Du/E7lw6CVXw7VKrXPeHbVQUzGyUNkf45Nz/ckaaJa
aLgJOBCIDmNVnyU54OT/1lcs2xiyfaDMe8fCJ64ZwTnKbY2gkt1IMjUAB5Ogd5kJ
g8aV7EtKwyhHb0c30QIDAQAB
-----END PUBLIC KEY-----
</pre>
Если значение пусто, сервер нашел некоторую проблему с ключевыми файлами.
Проверьте журнал ошибок на диагностическую информацию.</p></li></ol>

<p>После того, как сервер был сконфигурирован с файлами ключа RSA, у клиентов
есть опция использования их, чтобы соединиться с сервером, используя учетные
записи, которые подтверждают подлинность с плагином
<code>sha256_password</code>. Как упомянуто ранее, такие учетные записи могут
использовать любое соединение SSL (когда RSA не используется) или
незашифрованное соединение, которое шифрует пароль, используя RSA.
Предположите для следующего обсуждения, что SSL не используется. Соединение с
сервером не требует специальной подготовки на стороне клиента. Например:
<pre>
shell&gt; mysql --ssl-mode=DISABLED -u sha256user -p
Enter password: Sh@256Pa33
</pre>

Поскольку соединение пытается использовать <code>sha256user</code>,
сервер определяет, что <code>sha256_password</code> соответствующий плагин
аутентификации и вызывает это. Плагин находит, что соединение не использует
SSL и таким образом требует, чтобы пароль был передан, используя шифрование
RSA. В этом случае плагин посылает открытый ключ RSA клиенту, который
использует его, чтобы зашифровать пароль, и возвращает результат серверу.
Использование плагина RSA включает сторону сервера, чтобы дешифровать пароль,
и принимает или отклоняет соединение, основываясь на том, правилен ли пароль.
</p>

<p>Сервер посылает открытый ключ клиенту, но если копия открытого ключа RSA
доступна на хосте клиента, клиент может использовать это, чтобы сохранить
передачу туда и обратно в протоколе клиент-сервер:
<pre>
shell&gt; mysql --ssl-mode=DISABLED -u sha256user -p --server-public-key-path=<em><code>file_name</code></em>
</pre>

Значение открытого ключа в файле, указанном опцией
<a href="programs.htm#option_mysql_server-public-key-path"><code>
--server-public-key-path</code></a> должно быть тем же самым, как значение
ключа в серверном файле, названном в переменной
<a href="server.htm#sysvar_sha256_password_public_key_path"><code>
sha256_password_public_key_path</code></a>. Если ключевой файл содержит
допустимое значение открытого ключа, но значение является неправильным,
происходит ошибка доступа. Если ключевой файл не содержит допустимый открытый
ключ, программа клиента не может использовать его. В этом случае плагин
<code>sha256_password</code> посылает открытый ключ клиенту как будто нет
опции <a href="programs.htm#option_mysql_server-public-key-path"><code>
--server-public-key-path</code></a>.</p>

<p>Пользователи клиента могут получить открытый ключ RSA двумя способами:</p>
<ul><li><p>Администратор базы данных может обеспечить копию
файла открытого ключа.</li>

<li>Пользователь клиента, который может соединиться с сервером некоторым
другим путем, может использовать <code>SHOW STATUS LIKE 'Rsa_public_key'
</code> и сохранить возвращенное значение ключа в файле.</p></li></ul>

<h4><a name="mysql-no-login-plugin"></a>7.5.1.3.
Плагин аутентификации без логина</h4>
<p>Плагин <code>mysql_no_login</code> предотвращает все соединения клиента с
любой учетной записью, которая использует его. Случаи использования для
такого плагина включают учетные записи, которые должны быть в состоянии
выполнить сохраненные программы и представления с поднятыми привилегиями, не
выставляя те привилегии обычным пользователям, и учетные записи по
доверенности, которые никогда не должны разрешать прямой вход в систему.</p>

<p>Следующая таблица показывает имена файла библиотеки и плагина.
Суффикс имени файла может отличаться в Вашей системе. Местоположение файла
это каталог, названный в переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>. См.
<a href="#pluggable-authentication">раздел 7.3.9</a>.</p>

<a name="idm139965376417824"></a><p><b>
Таблица 7.11. Плагин MySQL <span><span>No Login</span></span></b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td><td><code>
mysql_no_login</code></td></tr>
<tr><td scope="row">Имя плагина клиента</td><td>Нет</td></tr>
<tr><td scope="row">Библиотека</td><td><code>mysql_no_login.so</code></td>
</tr></tbody></table>

<p>Учетная запись, которая подтверждает подлинность с использованим
<code>mysql_no_login</code>, может использоваться в качестве
<code>DEFINER</code> для сохраненной программы и объектов представления. Если
такое определение объекта также включает <code>SQL SECURITY DEFINER</code>,
это выполняется с привилегиями соответствующей учетной записи. DBA может
использовать это поведение, чтобы обеспечить доступ к конфиденциальным или
уязвимым данным, которые выставлены только через
хорошо управляемые интерфейсы.</p>

<p>Следующий пример приводит простой пример этих принципов. Это определяет
учетную запись, которая не разрешает соединения клиента, и связывает с этим
представление, которое выставляет только определенные столбцы
таблицы <code>mysql.user</code> table:
<pre>
CREATE DATABASE nologindb;
CREATE USER 'nologin'@'localhost' IDENTIFIED WITH mysql_no_login;
GRANT ALL ON nologindb.* TO 'nologin'@'localhost';
GRANT SELECT ON mysql.user TO 'nologin'@'localhost';
CREATE DEFINER = 'nologin'@'localhost' SQL SECURITY DEFINER
       VIEW nologindb.myview AS SELECT User, Host FROM mysql.user;
</pre>

Чтобы обеспечить защищенный доступ к представлению об обычных
пользователях, сделайте это:
<pre>
GRANT SELECT ON nologindb.myview TO 'ordinaryuser'@'localhost';
</pre>

Теперь обычный пользователь может использовать представление, чтобы получить
доступ к ограниченной информации, которую оно представляет:
<pre>
SELECT * FROM nologindb.myview;
</pre>
Попытки пользователя получить доступ к столбцам кроме выставленных
представлением приводят к ошибке.</p>

<p>Поскольку учетная запись <code>nologin</code> не может использоваться
непосредственно, операции, требуемые, чтобы настраивать объекты, которые она
использует, должны быть выполнены <code>root</code> или подобной учетной
записью с привилегиями, требуемыми, чтобы создать
объекты и установить <code>DEFINER</code>.</p>

<p>Учетная запись, которая подтверждает подлинность с использованием
<code>mysql_no_login</code>, может использоваться в качестве основного
пользователя для учетных записей по доверенности:
<pre>
CREATE USER 'proxy_base'@'localhost' IDENTIFIED WITH mysql_no_login;
<em><code>... grant to 'proxy_base'@'localhost' any privileges it requires ...</code></em>
GRANT PROXY ON 'proxy_base'@'localhost' TO 'real_user'@'localhost';
</pre>

Это позволяет клиентам получить доступ к MySQL через учетную запись по
доверенности, но не обойти механизм доверенности, соединяясь непосредственно
как пользователь по доверенности.</p>
<p>См. разделы <a href="#pluggable-authentication">7.3.9</a> и
<a href="#proxy-users">7.3.10</a>.</p>

<h4><a name="cleartext-authentication-plugin"></a>7.5.1.4.
Клиентский плагин аутентификации открытого текста</h4>
<p>Клиентский плагин аутентификации посылает пароль в сервер, не хешируя или
шифруя. Этот плагин встроен в библиотеку клиента MySQL.</p>

<a name="idm139965376388816"></a><p><b>Таблица 7.12. Плагин аутентификации
открытого текста MySQL</b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td><td>Отсутствует</td></tr>
<tr><td scope="row">Имя плагина клиента</td><td><code>
mysql_clear_password</code></td></tr>
<tr><td scope="row">Библиотека</td><td>Нет (встроенный плагин)
</td></tr></tbody></table>

<p>С аутентификацией MySQL клиент выполняет одностороннее хеширование пароля
прежде, чем послать это серверу. Это позволяет клиенту избежать посылать
пароль открытым текстом. Однако, потому что алгоритм хеша однонаправленный,
оригинальный пароль не может быть восстановлен на стороне сервера.</p>

<p>Одностороннее хеширование не может быть сделано для схем аутентификации,
которые требуют, чтобы сервер получил пароль как сторона клиента.
В таких случаях клиентский плагин <code>mysql_clear_password</code>
может использоваться, чтобы послать пароль в сервер открытым текстом. Нет
никакого соответствующего серверного плагина. Скорее клиентский плагин может
использоваться любым серверным плагином, который нуждается в пароле открытого
текста. Плагин аутентификации PAM именно такой, см.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/pam-authentication-plugin.html"
target="_top">The PAM Authentication Plugin</a>.</p>

<p>См. <a href="#pluggable-authentication">раздел 7.3.9</a>.</p>
<p>Посылка паролей в открытом тексте может быть проблемой безопасности в
некоторых конфигурациях. Чтобы избежать проблем, если есть возможность,
клиенты должны соединиться с MySQL Server используя метод, который защищает
пароль. Возможности включают SSL (см.
<a href="#secure-connections">раздел 7.4</a>), IPsec
или частную сеть.</p>

<p>Чтобы сделать небрежное использование этого плагина менее вероятным,
требуется, чтобы клиенты явно включали его.
Это может быть сделано несколькими способами:</p>

<ul><li><p>Установить <code>LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN</code> в
значение, которое начинается с <code>1</code>, <code>Y</code> или
<code>y</code>. Это включает плагин для всех соединений клиента.</li>

<li><a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>,
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin</strong></span>
</a> и <a href="programs.htm#mysqlslap"><span><strong>mysqlslap</strong>
</span></a> понимают опцию <code>--enable-cleartext-plugin</code>,
которая включает плагину на основе вызова.</li>

<li>Функция C API <a href="connect.htm#mysql-options"><code>mysql_options()
</code></a> понимает опцию <code>MYSQL_ENABLE_CLEARTEXT_PLUGIN</code>,
которая включает плагин на основе соединения. Кроме того, любая программа,
которая использует <code>libmysqlclient</code> и файлы опций может включить
плагин включением <code>enable-cleartext-plugin</code> в группе опций,
читаемых библиотекой клиента.</p></li></ul>

<h4><a name="socket-authentication-plugin"></a>7.5.1.5.
Плагин аутентификации сокета</h4>
<p>Серверный плагин аутентификации доступен, который подтверждает подлинность
клиентов, которые соединяются от местного узла через файл сокета.</p>

<p>Исходный код для этого плагина может быть исследован как относительно
простой пример, демонстрирующий, как написать
загружаемый плагин аутентификации.</p>

<a name="idm139965376353616"></a><p><b>
Таблица 7.13. Плагин авторизации MySQL Socket</b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td>
<td><code>auth_socket</code></td></tr>
<tr><td scope="row">Имя плагина клиента</td><td>Нет</td></tr>
<tr><td scope="row">Библиотека</td><td><code>auth_socket.so</code></td>
</tr></tbody></table>

<p>Плагин аутентификации <code>auth_socket</code> подтверждает подлинность
клиентов, которые соединяются от местного узла через файл сокета Unix.
Плагин использует опцию сокета <code>SO_PEERCRED</code>, чтобы получить
информацию о пользователе, выполняющем программу клиента. Таким образом,
плагин может быть создан только на системах, которые поддерживают опцию
<code>SO_PEERCRED</code>, например, Linux.</p>

<p>Плагин проверяет, соответствует ли имя пользователя сокета имени
пользователя MySQL, определенному программой клиента серверу. Если имена не
соответствуют, плагин также проверяет, соответствует ли имя пользователя
имени, определенному в столбце <code>authentication_string</code> таблицы
<code>mysql.user</code>. Если соответствие найдено,
плагин разрешает соединение.</p>

<p>Предположите, что учетная запись MySQL создается для пользователя
<code>valerie</code>, который должен быть заверен плагином
<code>auth_socket</code> для соединений от местного узла к файлу сокета:
<pre>
CREATE USER 'valerie'@'localhost' IDENTIFIED WITH auth_socket;
</pre>

Если пользователь на местном узле с именем для входа в систему
<code>stefanie</code> вызывает <a href="programs.htm#mysql"><span><strong>
mysql</strong></span></a> с опцией <code>--user=valerie</code>, чтобы
соединяться через файл сокета, сервер с помощью <code>auth_socket</code>
подтверждает подлинность клиента. Плагин решает, что значение опции
<code>--user</code> (<code>valerie</code>) отличается от имени пользователя
клиента (<code>stephanie</code>) и отказывается от соединения. Если
пользователь <code>valerie</code> пробует ту же самую вещь, плагин находит,
что имя пользователя и имя пользователя MySQL оба <code>valerie</code> и
разрешает соединение. Однако, плагин отказывается от соединения даже для
<code>valerie</code>, если соединение сделано, используя различный протокол,
такой как TCP/IP.</p>
<p>См. <a href="#pluggable-authentication">раздел 7.3.9</a>.</p>

<h4><a name="test-authentication-plugin"></a>7.5.1.6.
Испытательный плагин аутентификации</h4>
<p>MySQL включает испытательный плагин, который подтверждает подлинность
использованием аутентификации MySQL, но является загружаемым плагином
(не встроенным) и должен быть установлен до использования. Это может
подтвердить подлинность для нормальных или более старых (более коротких)
значений хеша пароля.</p>

<p>Этот плагин предназначен для тестирования и развития, а не использования
в производственных средах. Испытательный исходный код плагина является
отдельным от сервера, в отличие от встроенного родного плагина, таким
образом, это может быть исследовано как относительно простой пример,
демонстрирующий, как написать загружаемый плагин аутентификации.</p>

<a name="idm139965376318816"></a><p><b>
Таблица 7.14. Испытательный плагин аутентификации MySQL</b></p>
<table border="1">
<tbody><tr><td scope="row">Имя плагина сервера</td>
<td><code>test_plugin_server</code></td></tr>
<tr><td scope="row">Имя плагина клиента</td>
<td><code>auth_test_plugin</code></td></tr>
<tr><td scope="row">Библиотека</td><td><code>auth_test_plugin.so
</code></td></tr></tbody></table>

<p>Поскольку испытательный плагин подтверждает подлинность так же, как
аутентификация MySQL, обеспечьте обычные опции
<a href="programs.htm#option_general_user"><code>--user</code></a> и
<a href="programs.htm#option_general_password"><code>--password</code></a>,
которые Вы обычно используете для учетных записей, которые используют родную
аутентификацию, когда Вы соединяетесь с сервером. Например:
<pre>
shell&gt; mysql --user=<em><code>your_name</code></em> --password=<em><code>your_pass</code></em>
</pre>
См. <a href="#pluggable-authentication">раздел 7.3.9</a>.</p>

<h3><a name="validate-password-plugin"></a>7.5.2.
Плагин проверки допустимости пароля</h3>
<p>Плагин <code>validate_password</code> служит, чтобы проверить пароли и
улучшить безопасность. Плагин выставляет ряд системных переменных, которые
позволяют Вам определить политику пароля.</p>

<p>Этот плагин осуществляет две способности:</p>
<ul><li><p>В запросах, которые назначают пароль, поставляемый в качестве
значения открытого текста, плагин проверяет пароль по текущей политике пароля
и отклоняет, если он слабый (запрос возвращает ошибку
<a href="error.htm#error_er_not_valid_password"><code>ER_NOT_VALID_PASSWORD
</code></a>). Это затрагивает <a href="sql.htm#alter-user"><code>ALTER USER
</code></a>, <a href="sql.htm#create-user"><code>CREATE USER</code></a>,
<a href="sql.htm#grant"><code>GRANT</code></a> и
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a>. Пароли, данные
как параметры <a href="funct.htm#function_password"><code>PASSWORD()</code>
</a> будут проверены также.</li>

<li>SQL-функция <a href="funct.htm#function_validate-password-strength">
<code>VALIDATE_PASSWORD_STRENGTH()</code></a> оценивает силу потенциальных
паролей. Функция берет параметр пароля и возвращает целое число от 0
(слабый) до 100 (сильный).</p></li></ul>

<p>Например, пароль открытого текста в следующем запросе проверен.
Под политикой пароля значения по умолчанию, которая требует, чтобы пароли
были по крайней мере 8 символов в длину, пароль слаб, и
запрос производит ошибку:
<pre>
mysql&gt; ALTER USER USER() IDENTIFIED BY 'abc';
ERROR 1819 (HY000): Your password does not satisfy the current
policy requirements
</pre>

Пароли, определенные как хешированные значения, не проверены, потому что
оригинальное значение пароля недоступно:
<pre>
mysql&gt; ALTER USER 'jeffrey'@'localhost'
    -&gt;       IDENTIFIED WITH mysql_native_password
    -&gt;       AS '*0D3CED9BEC10A777AEC23CCC353A8C08A633045E';
Query OK, 0 rows affected (0.01 sec)
</pre>

Системные переменные, имеющие названия формы
<code>validate_password_<em><code>xxx</code></em></code>
представляют параметры политики управления паролем. Чтобы сконфигурировать
проверку пароля, измените эти переменные, см.
<a href="#validate-password-options-variables">раздел 7.5.2.2
</a>.</p>

<p>Если <code>validate_password</code> не установлен,
переменные <code>validate_password_<em><code>xxx</code></em></code>
недоступны, пароли в запросах не проверены, и
<a href="funct.htm#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH()</code></a> всегда возвращает 0. Например, без
установленного плагина, учетным записям могут быть назначены
пароли короче 8 символов.</p>

<p>Плагин <code>validate_password</code>
осуществляет три уровня проверки пароля:
<code>LOW</code>, <code>MEDIUM</code> и <code>STRONG</code>.
Значение по умолчанию <code>MEDIUM</code>, чтобы изменить это, измените
значение <a href="#sysvar_validate_password_policy">
<code>validate_password_policy</code></a>. Политика осуществляет все более и
более строгие тесты пароля. Следующие описания относятся к значениям
параметра по умолчанию, которые могут быть изменены, меняя
соответствующие системные переменные.</p>

<ul><li><p><code>LOW</code> проверяет только длину пароля. Пароли должны быть
по крайней мере из 8 символов.</li>
<li><code>MEDIUM</code> добавляет условия, что пароли должны содержать по
крайней мере 1 цифру, 1 символ нижнего регистра, 1 символ верхнего регистра и
1 специальный (не алфавитно-цифровой) символ.</li>

<li><code>STRONG</code> добавляет условие, что подстроки пароля длиной 4
символа или больше не должны соответствовать словам в файле словаря, если
он был задан.</p></li></ul>

<p>Кроме того, <code>validate_password</code> поддерживает способность
отклонения паролей, которые соответствуют части имени пользователя
эффективной учетной записи пользователя текущего сеанса.
Чтобы включить управление этой способностью, плагин выставляет переменную
<a href="#sysvar_validate_password_check_user_name"><code>
validate_password_check_user_name</code></a>.
По умолчанию эта переменная включена.</p>

<h4><a name="validate-password-plugin-installation"></a>
7.5.2.1. Установка плагина проверки допустимости пароля</h4>
<p>Этот раздел описывает, как установить <code>validate_password</code>.</p>

<p>Чтобы быть применимым сервером, файл библиотеки должен быть расположен в
каталоге плагинов MySQL (каталог, названный в переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).
В случае необходимости установите значение
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>
при запуске сервера, чтобы сказать серверу местоположение каталога.</p>

<p>Базовое имя файла библиотеки <code>validate_password</code>.</p>
<p>Чтобы загрузить плагин при запуске сервера, используйте опцию
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code></a>
, чтобы назвать файл библиотеки, который содержит плагин. С этим загружающим
плагин методом опция должна быть дана каждый раз, когда сервер запускается.
Например, вставьте эти строки в Ваш файл <code>my.cnf</code>:
<pre>
[mysqld]
plugin-load=validate_password.so
</pre>

Альтернативно, чтобы зарегистрировать плагин во время выполнения, используйте
это запрос (скорректируйте расширение по мере необходимости):
<pre>
INSTALL PLUGIN validate_password SONAME 'validate_password.so';
</pre>

<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> загружает
плагин, а также регистрирует это в таблице <code>mysql.plugins</code>, чтобы
заставить плагин загружаться для каждого последующего
нормального запуска сервера.</p>

<p>Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или используйте команду <a href="sql.htm#show-plugins"><code>SHOW
PLUGINS</code></a> (см. <a href="server.htm#obtaining-plugin-information">
раздел 6.6.3</a>). Например:
<pre>
mysql&gt; SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS
    -&gt;        WHERE PLUGIN_NAME LIKE 'validate%';
+-------------------+---------------+
| PLUGIN_NAME       | PLUGIN_STATUS |
+-------------------+---------------+
| validate_password | ACTIVE        |
+-------------------+---------------+
</pre>

Если плагин был ранее зарегистрирован
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>
или загружен <a href="server.htm#option_mysqld_plugin-load"><code>
--plugin-load</code></a>, Вы можете использовать опцию
<code>--validate-password</code> при запуске сервера, чтобы управлять
активацией. Например, чтобы загрузить плагин при запуске и препятствовать
тому, чтобы это было удалено во времени выполнения, используйте эти опции:
<pre>
[mysqld]
plugin-load=validate_password.so
validate-password=FORCE_PLUS_PERMANENT
</pre>

Если надо препятствовать тому, чтобы сервер работал без плагина проверки
допустимости пароля, следует использовать
<a href="#option_mysqld_validate-password"><code>
--validate-password</code></a> со значением <code>FORCE</code> или
<code>FORCE_PLUS_PERMANENT</code>.</p>

<h4><a name="validate-password-options-variables"></a>7.5.2.2.
Опции и переменные плагина проверки допустимости пароля</h4>
<p>Управлять активацией <code>validate_password</code> можно через опцию:</p>

<ul><li><p><a name="option_mysqld_validate-password"></a>
<a href="#option_mysqld_validate-password">
<code>--validate-password[=<em><code>value</code></em>]</code></a></p>

<table border="1">
<tbody><tr><td scope="row"><span><strong>Формат командной строки</strong></span>
</td><td colspan="3"><code>--validate-password[=value]</code></td></tr>
<tr><td scope="row" rowspan="6"><span><strong>Допустимые значения</strong>
</span></td>
<td><span><strong>Тип</strong></span></td>
<td colspan="2"><code>enumeration</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>ON</code></td></tr>
<tr><td scope="row" rowspan="4" valign="top"><span><strong>
Корректные значения</strong></span></td>
<td colspan="2"><code>ON</code></td></tr>
<tr><td scope="row" colspan="2"><code>OFF</code></td></tr>
<tr><td scope="row" colspan="2"><code>FORCE</code></td></tr>
<tr><td scope="row" colspan="2"><code>FORCE_PLUS_PERMANENT</code></td>
</tr></tbody></table>

<p>Эта опция управляет, как сервер загружает
<code>validate_password</code> при запуске. Значение должно быть одной из
доступных для плагина опций, как описано в
<a href="server.htm#server-plugin-loading">разделе 6.6.2</a>. Например,
<a href="#option_mysqld_validate-password"><code>
--validate-password=FORCE_PLUS_PERMANENT</code></a>
говорит серверу загружать плагин при запуске и препятствует тому, чтобы
это было удалено в то время, как сервер работает.</p>

<p>Эта опция доступна только, если плагин
<code>validate_password</code> был ранее зарегистрирован
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> или загружен
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code>
</a>. См. <a href="#validate-password-plugin-installation">раздел
7.5.2.1</a>.</p></li></ul>

<p>Если <code>validate_password</code> включен, он выставляет несколько
системных переменных, представляющих параметры, которые
управляют проверкой пароля:
<pre>
mysql&gt; SHOW VARIABLES LIKE 'validate_password%';
+--------------------------------------+--------+
| Variable_name                        | Value  |
+--------------------------------------+--------+
| validate_password_check_user_name    | ON     |
| validate_password_dictionary_file    |        |
| validate_password_length             | 8      |
| validate_password_mixed_case_count   | 1      |
| validate_password_number_count       | 1      |
| validate_password_policy             | MEDIUM |
| validate_password_special_char_count | 1      |
+--------------------------------------+--------+
</pre>

Чтобы изменить, как пароли проверены, Вы можете установить эти системные
переменные при запуске сервера или во время выполнения. Следующий список
описывает значение каждой переменной.</p>

<ul><li><p><a name="sysvar_validate_password_check_user_name"></a>
<a href="#sysvar_validate_password_check_user_name"><code>
validate_password_check_user_name</code></a></p>

<table border="1">
<tbody><tr><td scope="row"><span><strong>Формат командной строки</strong>
</span></td><td colspan="3"><code>--validate_password_check_user_name</code>
</td></tr>
<tr><td scope="row" rowspan="3"><span><strong>Системная переменная</strong>
</span></td>
<td><span><strong>Имя</strong></span></td><td colspan="2"><code>
<a href="#sysvar_validate_password_check_user_name">
validate_password_check_user_name</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="2"><span><strong>Допустимые значения</strong>
</span></td>
<td><span><strong>Тип</strong></span></td><td colspan="2"><code>boolean
</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>ON</code></td></tr></tbody></table>

<p>Сравниваются ли пароли с частью имени пользователя эффективной учетной
записи пользователя текущего сеанса и отклонены, если они соответствуют. По
умолчанию <a href="#sysvar_validate_password_check_user_name">
<code>validate_password_check_user_name</code></a> включена. Эта переменная
управляет именем пользователя, соответствующим независимо от значения
<a href="#sysvar_validate_password_policy"><code>
validate_password_policy</code></a>.</p>

<p>Когда <a href="#sysvar_validate_password_check_user_name">
<code>validate_password_check_user_name</code></a> включена,
это имеет эти эффекты:</p>

<ul><li><p>Проверка происходит во всех контекстах для которых плагин
<code>validate_password</code> вызван, что включает такие запросы, как
<a href="sql.htm#alter-user"><code>ALTER USER</code></a>,
<a href="sql.htm#set-password"><code>SET PASSWORD</code></a> и вызовы таких
функций, как <a href="funct.htm#function_password"><code>PASSWORD()</code>
</a> и <a href="funct.htm#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH()</code></a>.</li>

<li>Если пароль то же самое, как имя пользователя или его обратное прочтение,
соответствие происходит, и пароль отклонен.</li>
<li>Если пароль соответствует имени пользователя,
<a href="funct.htm#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH()</code></a> вернет 0, независимо от того, как
другие переменные установлены.</li>

<li>Имена пользователя, используемые для сравнения, взяты от значений
функций <a href="funct.htm#function_user"><code>USER()</code></a> и
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
для текущего сеанса. Пользователь, который имеет привилегию
<a href="#priv_super"><code>SUPER</code></a> может выполнить
запрос, чтобы установить пароль другого пользователя в имя того пользователя.
</li>

<li>Только часть имени пользователя из функций
<a href="funct.htm#function_user"><code>USER()</code></a> и
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
используется, часть имени хоста игнорируется. Если имя пользователя пусто,
никакое сравнение не сделано.</li>
<li>Имя пользователя является чувствительным к регистру. Пароль и значения
имени пользователя сравнены как двоичные строки.</p></li></ul></li>

<li><p><a name="sysvar_validate_password_dictionary_file"></a>
<a href="#sysvar_validate_password_dictionary_file"><code>
validate_password_dictionary_file</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td><td><span><strong>Имя</strong></span></td>
<td colspan="2"><code>
<a href="#sysvar_validate_password_dictionary_file">
validate_password_dictionary_file</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row"><span><strong>Допустимые значения</strong></span></td>
<td><span><strong>Тип</strong></span></td><td colspan="2"><code>file name
</code></td></tr></tbody></table>

<p>Путь к файлу словаря, используемого плагином <code>validate_password
</code>для того, чтобы проверить пароли. Эта переменная недоступна, если
плагин не установлен.</p>

<p>По умолчанию у этой переменной есть пустое значение, и проверки словаря
не выполнены. Чтобы включить проверки словаря, Вы должны установить эту
переменную в непустое значение. Если файл называют как относительный путь, он
интерпретируется относительно каталога серверных данных.
Его содержание должно быть одним словом в нижнем регистре на строку.
Содержание обработано как набор символов <code>utf8</code>.
Максимальный разрешенный размер файла составляет 1 МБ.</p>

<p>Для файла словаря, который будет использоваться во время проверки пароля,
политика пароля должна быть установлена в 2 (<code>STRONG</code>),
см. описание <a href="#sysvar_validate_password_policy"><code>
validate_password_policy</code></a>. Каждая подстрока пароля длиной
от 4 до 100 символов сравнивается со словами в файле словаря. Любое
соответствие заставляет пароль быть отклоненным.
Сравнения не являются чувствительными к регистру.</p>

<p>Для <a href="funct.htm#function_validate-password-strength"><code>
VALIDATE_PASSWORD_STRENGTH()</code></a> пароль проверен по всей политике,
включая  <code>STRONG</code>, таким образом, оценка силы включает проверку по
словарю независимо от <a href="#sysvar_validate_password_policy">
<code>validate_password_policy</code></a>.</p>

<p><a href="#sysvar_validate_password_dictionary_file"><code>
validate_password_dictionary_file</code></a>
может быть установлена во время выполнения, и назначение значения заставляет
названный файл быть считанным без перезапуска.</li>

<li><a name="sysvar_validate_password_length"></a>
<a href="#sysvar_validate_password_length"><code>
validate_password_length</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td><td><span><strong>Имя</strong></span></td>
<td colspan="2"><code><a href="#sysvar_validate_password_length">
validate_password_length</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="3"><span><strong>Допустимые значения</strong>
</span></td><td><span><strong>Тип</strong></span></td><td colspan="2">
<code>integer</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>8</code></td></tr>
<tr><td scope="row"><span><strong>Минимум</strong></span></td>
<td colspan="2"><code>0</code></td></tr></tbody></table>

<p>Минимальное число символов в пароле, который проверяет
<code>validate_password</code>. Эта переменная недоступна, если
плагин не установлен.</p>

<p>Минимальное значение <a href="#sysvar_validate_password_length">
<code>validate_password_length</code></a> это функция нескольких других
связанных системных переменных. Сервер не будет устанавливать значение
меньше, чем значение этого выражения:
<pre>
validate_password_number_count + validate_password_special_char_count +
(2 * validate_password_mixed_case_count)
</pre>

Если плагин <code>validate_password</code> корректирует значение
<a href="#sysvar_validate_password_length"><code>
validate_password_length</code></a> из-за предыдущего ограничения, это пишет
сообщение в журнал ошибок.</li>

<li><a name="sysvar_validate_password_mixed_case_count"></a>
<a href="#sysvar_validate_password_mixed_case_count"><code>
validate_password_mixed_case_count</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td><td><span><strong>Имя</strong></span></td>
<td colspan="2"><code>
<a href="#sysvar_validate_password_mixed_case_count">
validate_password_mixed_case_count</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="3"><span><strong>Допустимые значения</strong>
</span></td><td><span><strong>Тип</strong></span></td>
<td colspan="2"><code>integer</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>1</code></td></tr>
<tr><td scope="row"><span><strong>Минимум</strong></span></td>
<td colspan="2"><code>0</code></td></tr></tbody></table>

<p>Минимальное число символов нижнего регистра и символов верхнего регистра,
которые должен иметь пароль, если политика <code>MEDIUM</code> или строже.
Для данного значения у пароля должно быть это количество символов нижнего
регистра и столько же символов верхнего регистра. Эта переменная недоступна,
если тот плагин не установлен.</li>

<li><a name="sysvar_validate_password_number_count"></a>
<a href="#sysvar_validate_password_number_count"><code>
validate_password_number_count</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td><td><span><strong>Имя</strong></span></td>
<td colspan="2"><code>
<a href="#sysvar_validate_password_number_count">
validate_password_number_count</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="3"><span><strong>Допустимые значения</strong>
</span></td><td><span><strong>Тип</strong></span></td>
<td colspan="2"><code>integer</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>1</code></td></tr>
<tr><td scope="row"><span><strong>Минимум</strong></span></td>
<td colspan="2"><code>0</code></td></tr></tbody></table>

<p>Минимальное число числовых символов, которые пароль
должен иметь, если политика пароля <code>MEDIUM</code> или строже.
Эта переменная недоступна, если тот плагин не установлен.</li>

<li><a name="sysvar_validate_password_policy"></a>
<a href="#sysvar_validate_password_policy"><code>
validate_password_policy</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td><td><span><strong>Имя</strong></span></td>
<td colspan="2"><code><a href="#sysvar_validate_password_policy">
validate_password_policy</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="5"><span><strong>Допустимые значения</strong>
</span></td><td><span><strong>Тип</strong></span></td>
<td colspan="2"><code>enumeration</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>1</code></td></tr>
<tr><td scope="row" rowspan="3" valign="top"><span><strong>
Корректные значения</strong></span></td>
<td colspan="2"><code>0</code></td></tr>
<tr><td scope="row" colspan="2"><code>1</code></td></tr>
<tr><td scope="row" colspan="2"><code>2</code></td></tr></tbody></table>

<p>Политика пароля, проведенная в жизнь плагином
<code>validate_password</code>. Эта переменная недоступна, если
плагин не установлен.</p>

<p><a href="#sysvar_validate_password_policy"><code>
validate_password_policy</code></a> влияет на то, как плагин использует
другие устанавливающие политику системные переменные, за исключением проверки
паролей против имен пользователей, которой управляет независимая переменная
<a href="#sysvar_validate_password_check_user_name"><code>
validate_password_check_user_name</code></a>.</p>

<p><a href="#sysvar_validate_password_policy"><code>
validate_password_policy</code></a> может быть определена, используя числовые
значения 0, 1, 2, или соответствующие символические значения
<code>LOW</code>, <code>MEDIUM</code>, <code>STRONG</code>.
Следующая таблица описывает тесты, выполненные для каждой политики. Для теста
длины необходимая длина это значение
<a href="#sysvar_validate_password_length"><code>
validate_password_length</code></a>. Точно так же необходимые значения для
других тестов даны другими переменными
<code>validate_password_<em><code>xxx</code></em></code>.</p>

<table border="1">
<thead><tr><th scope="col">Политика</th><th scope="col">Выполненные тесты
</th></tr></thead>
<tbody><tr><td scope="row"><code>0</code> или <code>LOW</code></td><td>
Длина.</td></tr>
<tr><td scope="row"><code>1</code> или <code>MEDIUM</code></td><td>Длина,
нижний регистр/верхний регистр, числа и специальные символы.</td></tr>
<tr><td scope="row"><code>2</code> или <code>STRONG</code></td><td>Длина,
нижний регистр/верхний регистр, числа и специальные символы, словарь.
</td></tr></tbody></table></li>

<li><p><a name="sysvar_validate_password_special_char_count"></a>
<a href="#sysvar_validate_password_special_char_count"><code>
validate_password_special_char_count</code></a></p>

<table border="1">
<tbody><tr><td scope="row" rowspan="3"><span><strong>Системная переменная
</strong></span></td>
<td><span><strong>Имя</strong></span></td><td colspan="2"><code>
<a href="#sysvar_validate_password_special_char_count">
validate_password_special_char_count</a></code></td></tr>
<tr><td scope="row"><span><strong>Область действия</strong></span></td>
<td colspan="2">Глобальная</td></tr>
<tr><td scope="row"><span><strong>Динамическая</strong></span></td>
<td colspan="2">Да</td></tr>
<tr><td scope="row" rowspan="3"><span><strong>Допустимые значения</strong>
</span></td>
<td><span><strong>Тип</strong></span></td><td colspan="2"><code>integer
</code></td></tr>
<tr><td scope="row"><span><strong>Значение по умолчанию</strong></span></td>
<td colspan="2"><code>1</code></td></tr>
<tr><td scope="row"><span><strong>Минимум</strong></span></td>
<td colspan="2"><code>0</code></td></tr></tbody></table>

<p>Минимальное число неалфавитно-цифровых символов, которые пароль
должен иметь, если политика пароля <code>MEDIUM</code> или строже.
Эта переменная недоступна, если плагин не установлен.</p></li></ul>

<p>Если <code>validate_password</code> включен,
он выставляет переменные состояния, которые
предоставляют операционную информацию:
<pre>
mysql&gt; SHOW STATUS LIKE 'validate_password%';
+-----------------------------------------------+---------------------+
| Variable_name                                 | Value               |
+-----------------------------------------------+---------------------+
| validate_password_dictionary_file_last_parsed | 2015-06-29 11:08:51 |
| validate_password_dictionary_file_words_count | 1902                |
+-----------------------------------------------+---------------------+
</pre>

Следующий список описывает значение каждой переменной состояния.</p>
<ul><li><p><a name="statvar_validate_password_dictionary_file_last_parsed">
</a><a href="#statvar_validate_password_dictionary_file_last_parsed">
<code>validate_password_dictionary_file_last_parsed</code></a></p>
<p>Когда файл словаря был в последний раз разобран.</li>

<li><a name="statvar_validate_password_dictionary_file_words_count"></a>
<a href="#statvar_validate_password_dictionary_file_words_count">
<code>validate_password_dictionary_file_words_count</code></a></p>
<p>Число слов прочитано из файла словаря.</p></li></ul>

<h3><a name="keyring"></a>7.5.3. Брелок MySQL</h3>
<p>MySQL Server поддерживает службу брелока, которая позволяет внутренним
серверным компонентам и плагинам надежно хранить чувствительную информацию
для более позднего извлечения. Выполнение основано на плагине:</p>

<ul><li><p>Плагин <code>keyring_file</code>
хранит данные брелока в файле, местном для узла сервера. Этот плагин доступен
во всех дистрибутивах MySQL.</p>

<p>Плагин <code>keyring_file</code> для управления ключом шифрования не
предназначен как решение для соответствия установленным требованиям.
Стандарты безопасности, такие как PCI, FIPS и другие требуют, чтобы
использование систем ключевого менеджмента обеспечило управление и защиту
ключи шифрования в ключевых хранилищах или модулях безопасности
аппаратных средств (HSM).</li>

<li><p>Интерфейс SQL для ключевого менеджмента брелока осуществлен как ряд
определяемых пользователем функций (UDF).</p></li></ul>
<p><code>InnoDB</code> использует плагин брелока, чтобы сохранить ключ для
шифрования табличного пространства.</p>
<p>См. <a href="#keyring-installation">раздел 7.5.3.1</a>.</p>
<p>См. <a href="#keyring-udfs">раздел 7.5.3.3</a>.</p>

<h4><a name="keyring-installation"></a>7.5.3.1.
Установка плагина брелока</h4>
<p>Этот раздел описывает, как установить плагин брелока. Для общей информации
об установке плагинов см.
<a href="server.htm#server-plugin-loading">раздел 6.6.2</a>.</p>

<p>Чтобы быть применимым сервером, файл библиотеки должен быть расположен в
каталоге плагина MySQL (каталог, названный в переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>).
В случае необходимости установите значение
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>
при запуске сервера, чтобы сказать серверу местоположение каталога.</p>

<p>Только один плагин брелока должен быть включен за один раз. Включение
многих плагинов брелока не поддержано, и результаты, возможно,
не будут правильными.</p>

<p>Плагин брелока должен быть загружен рано во время последовательности
запуска сервера так, чтобы серверные компоненты могли получить доступ к этому
по мере необходимости во время их собственной инициализации. Например,
<code>InnoDB</code> использует брелок для шифрования табличного пространства,
таким образом, плагин брелока должен быть загружен и доступен
до инициализации <code>InnoDB</code>.</p>

<p>Базовое имя файла библиотеки <code>keyring_file</code>.</p>
<p>Чтобы загрузить плагин, используйте опцию
<a href="server.htm#option_mysqld_early-plugin-load"><code>
--early-plugin-load</code></a>, чтобы назвать файл библиотеки. Например, на
платформах, где суффикс файла библиотеки <code>.so</code>,
используйте эти строки в серверном файле <code>my.cnf</code>:
<pre>
[mysqld]
early-plugin-load=keyring_file.so
</pre>

Прежде чем запустить сервер, проверьте примечания на свой выбранный плагин
брелока, чтобы видеть, требует ли он дополнительной конфигурации, см.
<a href="#keyring-file-plugin">раздел 7.5.3.2</a>.</p></li></ul>

<p>После выполнения любой определенной для плагина конфигурации, запустите
сервер. Чтобы проверить установку, исследуйте таблицу
<a href="inform.htm#plugins-table"><code>INFORMATION_SCHEMA.PLUGINS</code>
</a> или используйте <a href="sql.htm#show-plugins"><code>SHOW PLUGINS</code>
</a> (см. <a href="server.htm#obtaining-plugin-information">раздел 6.6.3</a>):
<pre>
mysql&gt; SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS
    -&gt;        WHERE PLUGIN_NAME LIKE 'keyring%';
+--------------+---------------+
| PLUGIN_NAME  | PLUGIN_STATUS |
+--------------+---------------+
| keyring_file | ACTIVE        |
+--------------+---------------+
</pre>

Если никакой плагин брелока не доступен, когда серверный компонент пытается
получить доступ к службе брелока, служба не может использоваться тем
компонентом. В результате компонент может быть не в состоянии
инициализироваться или может инициализироваться с ограниченной
функциональностью. Например, если <code>InnoDB</code> находит, что
есть зашифрованные табличные пространства, когда это инициализируется, это
пытается получить доступ к брелоку. Если брелок недоступен,
<code>InnoDB</code> может получить доступ только к незашифрованным табличным
пространствам. Чтобы гарантировать, что <code>InnoDB</code>
может получить доступ к зашифрованным табличным пространствам также, надо
использовать <a href="server.htm#option_mysqld_early-plugin-load"><code>
--early-plugin-load</code></a>, чтобы загрузить плагин брелока.</p>

<p>Плагины могут быть загружены другими методами, такими как опция
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code></a>
или <a href="server.htm#option_mysqld_plugin-load-add"><code>
--plugin-load-add</code></a> или запрос
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>.
Однако, плагины брелока, загруженные с использованием тех методов, могут быть
доступны слишком поздно в последовательности запуска сервера для определенных
серверных компонентов, таких как <code>InnoDB</code>:</p>

<ul><li><p>Использование загрузки плагина
<a href="server.htm#option_mysqld_plugin-load"><code>--plugin-load</code></a>
или <a href="server.htm#option_mysqld_plugin-load-add"><code>
--plugin-load-add</code></a> происходит после
инициализации <code>InnoDB</code>.</li>

<li>Плагины, установленные с использованием
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a>,
зарегистрированы в таблице <code>mysql.plugin</code>
и загружены автоматически для последующих перезапусков сервера. Однако,
потому что <code>mysql.plugin</code> таблица <code>InnoDB</code>,
любые плагины, названные в ней, может быть загружены во время запуска только
после инициализации <code>InnoDB</code>.</p></li></ul>

<h4><a name="keyring-file-plugin"></a>7.5.3.2.
Конфигурирование keyring_file</h4>
<p>Плагин <code>keyring_file</code> это плагин брелока, который хранит данные
брелока в файле, местном для узла сервера.</p>

<p>Чтобы использовать <code>keyring_file</code>,
используйте общие инструкции по установке в
<a href="#keyring-installation">раздел 7.5.3.1</a>,
вместе с определенной для плагина информацией о конфигурации.</p>

<p>Переменная <a href="server.htm#sysvar_keyring_file_data"><code>
keyring_file_data</code></a> конфигурирует местоположение файла,
используемого плагином для хранения данных. Значение по умолчанию зависит
от платформы. Чтобы сконфигурировать местоположение явно, установите значение
при запуске. Например:
<pre>
[mysqld]
early-plugin-load=keyring_file.so
keyring_file_data=/usr/local/mysql/mysql-keyring/keyring
</pre>

Операции брелока являются транзакционными: плагин использует резервный файл
во время записи, чтобы гарантировать, что он может откатиться назад к
оригинальному файлу, если работа потерпит неудачу. У резервного файла есть то
же самое имя, как у значения <a href="server.htm#sysvar_keyring_file_data">
<code>keyring_file_data</code></a> с расширением <code>.backup</code>.</p>
<p>См. <a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<h4><a name="keyring-udfs"></a>7.5.3.3. Функции ключевого менеджмента брелока
</h4>
<p>MySQL Server поддерживает службу брелока, которая позволяет внутренним
серверным компонентам и плагинам надежно хранить чувствительную информацию
для более позднего извлечения.</p>

<p>MySQL Server также включает интерфейс SQL для ключевого менеджмента
брелока, осуществленного как ряд определяемых пользователем функций (UDF),
которые получают доступ к функциям, обеспеченным внутренней службой брелока.
UDF брелока содержатся в файле библиотеки, который также содержит плагин
<code>keyring_udf</code>, который должен быть включен до вызова UDF.
Кроме того, плагин брелока <code>keyring_file</code> должен быть включен.</p>

<h5><a name="keyring-udf-installation"></a>7.5.3.3.1.
Установка или удаление функций брелока</h5>
<p>UDF включают операции ключевого менеджмента брелока, но
плагин <code>keyring_udf</code> должен также быть установлен, потому что UDF
не будет работать правильно без него. Попытки использовать UDF без
<code>keyring_udf</code> приводят к ошибке.</p>

<p>Базовое имя файла библиотеки <code>keyring_udf</code>.</p>
<p>Чтобы установить <code>keyring_udf</code> и UDF, используйте
<a href="sql.htm#install-plugin"><code>INSTALL PLUGIN</code></a> и
<a href="sql.htm#create-function"><code>CREATE FUNCTION</code></a>:
<pre>
INSTALL PLUGIN keyring_udf SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_generate RETURNS INTEGER SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_fetch RETURNS STRING SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_length_fetch RETURNS INTEGER SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_type_fetch RETURNS STRING SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_store RETURNS INTEGER SONAME 'keyring_udf.so';
CREATE FUNCTION keyring_key_remove RETURNS INTEGER SONAME 'keyring_udf.so';
</pre>
Если плагин и UDF используются на основном сервере репликации,
их ставят также на всех ведомых серверах, чтобы избежать проблем.</p>

<p>После того, как установлен, как только что описано, плагин
<code>keyring_udf</code> и UDF остаются установленными пока не удалены. Чтобы
удалить их, используйте
<a href="sql.htm#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a> и
<a href="sql.htm#drop-function"><code>DROP FUNCTION</code></a>:
<pre>
UNINSTALL PLUGIN keyring_udf;
DROP FUNCTION keyring_key_generate;
DROP FUNCTION keyring_key_fetch;
DROP FUNCTION keyring_key_length_fetch;
DROP FUNCTION keyring_key_type_fetch;
DROP FUNCTION keyring_key_store;
DROP FUNCTION keyring_key_remove;
</pre>

<h5><a name="keyring-udf-usage"></a>7.5.3.3.2. Используя функции брелока</h5>
<p>Перед использованием определяемых пользователем функций брелока
установите их согласно инструкциям, обеспеченным в
<a href="#keyring-udf-installation">разделе 7.5.3.3.1</a>.</p>

<p>UDF подвергаются этим ограничениям:</p>
<ul><li><p>Чтобы спользовать любые keyring UDF, <code>keyring_udf</code>
должен быть включен. Иначе ошибка происходит:
<pre>
ERROR 1123 (HY000): Can't initialize function 'keyring_key_generate';
This function requires keyring_udf plugin which is not installed.
Please install
</pre>
См. <a href="#keyring-udf-installation">раздел 7.5.3.3.1</a>.
</li>

<li>UDF брелока вызывают служебные функции брелока (см.
<a href="extend.htm#keyring-service">раздел 26.3.2</a>).
Служебные функции в свою очередь используют плагин брелока, который
установлен. Поэтому, чтобы использовать любые UDF брелока, некоторый основной
плагин брелока должен быть включен. Иначе ошибка происходит:
<pre>
ERROR 3188 (HY000): Function 'keyring_key_generate' failed because
underlying keyring service returned an error. Please check if a
keyring plugin is installed and that provided arguments are valid
for the keyring you are using.
</pre>
См. <a href="#keyring-installation">раздел 7.5.3.1</a>.</li>

<li>Чтобы использовать любой UDF, пользователь должен обладать привилегией
<a href="#priv_execute"><code>EXECUTE</code></a>
на глобальном уровне. Иначе ошибка происходит:
<pre>
ERROR 1123 (HY000): Can't initialize function 'keyring_key_generate';
The user is not privileged to execute this function.
User needs to have EXECUTE
</pre>

Чтобы предоставить на глобальном уровне пользователю привилегию
<a href="#priv_execute"><code>EXECUTE</code></a>,
используйте этот запрос:
<pre>
GRANT EXECUTE ON *.* TO <em><code>user</code></em>;
</pre></li>

<li>Ключом, сохраненным в брелоке данным пользователем, может управлять позже
только тот же самый пользователь. Таким образом, значение функции
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
во время ключевой манипуляции должно быть то же самое, как тогда, когда ключ
был сохранен в брелоке. Это ограничение исключает использование UDF брелока
для манипуляции ключами всего сервера.</p>

<p>Чтобы позволить многочисленным пользователям выполнить операции на том же
самом ключе, промежуточная сохраненная программа может быть определена
(метод, описанный позже в этом разделе).</li>

<li>UDF брелока поддерживают ключевые типы и длины, поддержанные основным
плагином брелока, за исключением того, что ключи не могут быть более
длинными, чем 2048 байтов (16384 бит).</p></li></ul>

<p>Чтобы создать новый случайный ключ и сохранить это в брелоке, вызовите
<code>keyring_key_generate()</code>, передавая этому ID для ключа, наряду с
ключевым типом (методом шифрования) и его длиной в байтах. Следующее
требование создает 2048-битовый ключ DSA-encrypted,
названный <code>MyKey</code>:
<pre>
mysql&gt; SELECT keyring_key_generate('MyKey', 'DSA', 256);
+-------------------------------------------+
| keyring_key_generate('MyKey', 'DSA', 256) |
+-------------------------------------------+
| 1                                         |
+-------------------------------------------+
</pre>

Возвращаемое значение 1 указывает на успех. Если ключ не может быть создан,
возвращаемое значение <code>NULL</code> и ошибка происходит. Чтобы быть в
состоянии проверить тип возвращения независимо от того, происходит ли ошибка,
надо использовать <code>SELECT ... INTO @<em><code>var_name</code></em>
</code> и проверить переменное значение:
<pre>
mysql&gt; SELECT keyring_key_generate('', '', -1) INTO @x;
ERROR 3188 (HY000): Function 'keyring_key_generate' failed because
underlying keyring service returned an error. Please check if a
keyring plugin is installed and that provided arguments are valid
for the keyring you are using.

mysql&gt; SELECT @x;
+------+
| @x   |
+------+
| NULL |
+------+
mysql&gt; SELECT keyring_key_generate('x', 'AES', 16) INTO @x;
mysql&gt; SELECT @x;
+------+
| @x   |
+------+
| 1    |
+------+
</pre>
Этот метод также относится к другим UDF брелока, которые возвращают
<code>NULL</code> и ошибку для отказа.</p>

<p>ID, переданный <code>keyring_key_generate()</code>,
обеспечивает средство, которым можно обратиться к ключу в последующих
требованиях UDF. Например, используйте ID, чтобы получить ключевой тип как
строку или длину в байтах как целое число:
<pre>
mysql&gt; SELECT keyring_key_type_fetch('MyKey');
+---------------------------------+
| keyring_key_type_fetch('MyKey') |
+---------------------------------+
| DSA                             |
+---------------------------------+

mysql&gt; SELECT keyring_key_length_fetch('MyKey');
+-----------------------------------+
| keyring_key_length_fetch('MyKey') |
+-----------------------------------+
|   256                             |
+-----------------------------------+
</pre>

Чтобы получить значение ключа, передайте ключевое ID к
<code>keyring_key_fetch()</code>. Следующее использует в качестве примера
<a href="funct.htm#function_hex"><code>HEX()</code></a>, чтобы
вывести на экран значение ключа, потому что это может содержать непригодные
для печатания символы. Пример также использует короткий ключ для краткости,
но надо знать, что ключи большей длины обеспечивают лучшую безопасность:
<pre>
mysql&gt; SELECT keyring_key_generate('MyShortKey', 'DSA', 8);
+----------------------------------------------+
| keyring_key_generate('MyShortKey', 'DSA', 8) |
+----------------------------------------------+
|  1                                           |
+----------------------------------------------+

mysql&gt; SELECT HEX(keyring_key_fetch('MyShortKey'));
+--------------------------------------+
| HEX(keyring_key_fetch('MyShortKey')) |
+--------------------------------------+
| 1DB3B0FC3328A24C                     |
+--------------------------------------+
</pre>

Брелок UDF обрабатывают ключевые ID, типы и значения как двоичные
строки, таким образом, сравнения являются чувствительными к регистру.
Например, ID <code>MyKey</code> и <code>mykey</code> это разные ключи.</p>

<p>Чтобы удалить ключ, передайте ключевое ID к
<code>keyring_key_remove()</code>:
<pre>
mysql&gt; SELECT keyring_key_remove('MyKey');
+-----------------------------+
| keyring_key_remove('MyKey') |
+-----------------------------+
| 1                           |
+-----------------------------+
</pre>

Чтобы запутать и сохранить ключ, который Вы обеспечиваете, передайте ключевое
ID, тип и значение <code>keyring_key_store()</code>:
<pre>
mysql&gt; SELECT keyring_key_store('AES_key', 'AES', 'Secret string');
+------------------------------------------------------+
| keyring_key_store('AES_key', 'AES', 'Secret string') |
+------------------------------------------------------+
| 1                                                    |
+------------------------------------------------------+
</pre>

Как обозначено ранее, у пользователя должна быть глобальная привилегия
<a href="#priv_execute"><code>EXECUTE</code></a>, чтобы вызвать
UDF, и пользователь, который сохраняет ключ в брелоке первоначально, должен
быть тем же самым пользователем, который выполняет последующие операции на
ключе позже, как определено значением
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>
для каждого вызова UDF. Чтобы разрешить ключевые операции пользователям, у
которых нет глобальной привилегии <a href="#priv_execute"><code>
EXECUTE</code></a> или кто, возможно, не владелец ключа,
используйте этот метод:</p>

<ol type="1"><li><p>Определите сохраненные программы, которые заключают в
капсулу необходимые ключевые операции и имеют
<code>DEFINER</code> равный ключевому владельцу.</li>

<li>Предоставьте привилегию <a href="#priv_execute"><code>EXECUTE
</code></a> для определенных сохраненных программ отдельным пользователям,
которые должны быть в состоянии вызвать их.</li>

<li>Если операции, осуществленные сохраненной программой, не включают
создание ключей, создайте любые необходимые ключи заранее, используя учетную
запись, названную как <code>DEFINER</code> в определении программы.
</p></li></ol>

<p>Этот метод позволяет ключам быть совместно использованными среди
пользователей и обеспечивает более точное управлению DBA тем, кто и что может
делать с ключами, не имея необходимость предоставлять глобальные привилегии.
</p>

<p>Следующий пример показывает, как настроить совместно используемый
ключ <code>SharedKey</code>, который принадлежит DBA, и сохраненную функцию
<code>get_shared_key()</code>, которая обеспечивает доступ к текущему
значению ключа. Значение может быть получено любым пользователем с
привилегией <a href="#priv_execute"><code>EXECUTE</code></a>
для той функции, которая создается в схеме <code>key_schema</code>.</p>

<p>От административной учетной записи MySQL
(<code>'root'@'localhost'</code> в этом примере),
создайте административную схему и сохраненную функцию, чтобы
получить доступ к ключу:
<pre>
mysql&gt; CREATE SCHEMA key_schema;
mysql&gt; CREATE DEFINER = 'root'@'localhost'
    -&gt;        FUNCTION key_schema.get_shared_key()
    -&gt;        RETURNS BLOB READS SQL DATA
    -&gt; RETURN keyring_key_fetch('SharedKey');
</pre>

Из административной учетной записи, гарантируйте, что совместно
используемый ключ существует:
<pre>
mysql&gt; SELECT keyring_key_generate('SharedKey', 'DSA', 8);
+---------------------------------------------+
| keyring_key_generate('SharedKey', 'DSA', 8) |
+---------------------------------------------+
| 1                                           |
+---------------------------------------------+
</pre>

Из административной учетной записи, создайте обычную учетную запись
пользователя, которой нужно предоставить ключевой доступ:
<pre>
mysql&gt; CREATE USER 'key_user'@'localhost'
    -&gt;        IDENTIFIED BY 'key_user_pwd';
</pre>

Из учетки <code>key_user</code> проверьте, что без надлежащей привилегии
<a href="#priv_execute"><code>EXECUTE</code></a>, новая
учетная запись не может получить доступ к совместно используемому ключу:
<pre>
mysql&gt; SELECT HEX(key_schema.get_shared_key());
ERROR 1370 (42000): execute command denied to user 'key_user'@'localhost'
for routine 'key_schema.get_shared_key'
</pre>

Из административной учетной записи дайте привилегию
<a href="#priv_execute"><code>EXECUTE</code></a> учетке
<code>key_user</code> для сохраненной функции:
<pre>
mysql&gt; GRANT EXECUTE ON FUNCTION key_schema.get_shared_key
    -&gt;       TO 'key_user'@'localhost';
</pre>

Из учетки <code>key_user</code> проверьте, что ключ теперь доступен:
<pre>
mysql&gt; SELECT HEX(key_schema.get_shared_key());
+----------------------------------+
| HEX(key_schema.get_shared_key()) |
+----------------------------------+
| 9BAFB9E75CEEB013                 |
+----------------------------------+
</pre>

<h5><a name="keyring-udf-reference"></a>7.5.3.3.3. Обзор функций брелока</h5>
<p>Этот раздел описывает для каждого брелока определяемую пользователем
функция (UDF), ее цель и возвращаемое значение. Для информации об условиях,
при которых могут быть вызваны эти UDF, см.
<a href="#keyring-udf-usage">раздел 7.5.3.3.2</a>.</p>

<p>Эти UDF доступны:</p>
<ul><li><p><code>keyring_key_fetch()</code></p>
<p>Учитывая ключевое ID, возвращает значение ключа.</p>

<p>Синтаксис:
<pre>
STRING keyring_key_fetch(STRING key_id)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: ID ключа как строка.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает значение ключа для успеха, <code>NULL</code>,
если ключ не существует или <code>NULL</code> и ошибку для отказа.</p>

<p>Значения брелока получены с использованием
<code>keyring_key_fetch()</code>, которая ограничена 2048 байтами. Значение
брелока юольше, чем эта длина, может быть сохранено, используя служебную
функцию брелока (см. <a href="extend.htm#keyring-service">раздел 26.3.2</a>),
но если получено, используя <code>keyring_key_fetch()</code>,
будет усечено к 2048 байтам.</p>

<p>Пример:
<pre>
mysql&gt; SELECT keyring_key_generate('RSA_key', 'RSA', 16);
+--------------------------------------------+
| keyring_key_generate('RSA_key', 'RSA', 16) |
+--------------------------------------------+
| 1                                          |
+--------------------------------------------+

mysql&gt; SELECT HEX(keyring_key_fetch('RSA_key'));
+-----------------------------------+
| HEX(keyring_key_fetch('RSA_key')) |
+-----------------------------------+
| 91C2253B696064D3556984B6630F891A  |
+-----------------------------------+

mysql&gt; SELECT keyring_key_type_fetch('RSA_key');
+-----------------------------------+
| keyring_key_type_fetch('RSA_key') |
+-----------------------------------+
| RSA                               |
+-----------------------------------+

mysql&gt; SELECT keyring_key_length_fetch('RSA_key');
+-------------------------------------+
| keyring_key_length_fetch('RSA_key') |
+-------------------------------------+
| 16                                  |
+-------------------------------------+
</pre>

В качестве примера применена <a href="funct.htm#function_hex"><code>HEX()
</code></a>, чтобы вывести на экран значение ключа, потому что это может
содержать непригодные для печатания символы. Пример также использует короткий
ключ для краткости, но ключи большей длины обеспечивают лучшую безопасность.
</li>

<li><code>keyring_key_generate()</code></p>
<p>Производит новый случайный ключ с данным ID, типом и длиной, и хранит это
в брелоке. Тип и значения длины должны быть совместимыми со значениями,
поддержанными основным плагином брелока, за исключением того, что ключи не
могут быть более длинными, чем 2048 байтов (16384 бита).
Для разрешенных плагину типов см.
<a href="extend.htm#keyring-service">раздел 26.3.2</a>.</p>

<p>Синтаксис:
<pre>
STRING keyring_key_generate(STRING key_id, STRING key_type,
                            INTEGER key_length)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: Ключевое ID как строка.</li>
<li><code>key_type</code>: Ключевой тип как строка.</li>
<li><code>key_length</code>: Длина ключа в байтах
как целое число. Максимальная длина 2048.</p></li></ul>

<p>Возвращаемые значения:</p>
<p>Возвращает 1 для успеха или <code>NULL</code> и ошибку для отказа.</p>
<p>Пример:
<pre>
mysql&gt; SELECT keyring_key_generate('RSA_key', 'RSA', 384);
+---------------------------------------------+
| keyring_key_generate('RSA_key', 'RSA', 384) |
+---------------------------------------------+
| 1                                           |
+---------------------------------------------+
</pre></li>

<li><code>keyring_key_length_fetch()</code></p>
<p>Учитывая ключевое ID, возвращает длину ключа.</p>
<p>Синтаксис:
<pre>
INTEGER keyring_key_length_fetch(STRING key_id)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: Ключевое ID как строка.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает длину ключа в байтах как целое число для успеха,
<code>NULL</code>, если ключ не существует, или <code>NULL</code>
и ошибку для отказа.</p>
<p>Пример:</p>
<p>См. описание <code>keyring_key_fetch()</code>.</li>

<li><code>keyring_key_remove()</code></p>
<p>Удаляет ключ с данным ID из брелока.</p>
<p>Синтаксис:
<pre>
INTEGER keyring_key_remove(STRING key_id)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: Ключевое ID как строка.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает 1 для успеха или <code>NULL</code> для отказа.</p>

<p>Пример:
<pre>
mysql&gt; SELECT keyring_key_remove('AES_key');
+-------------------------------+
| keyring_key_remove('AES_key') |
+-------------------------------+
| 1                             |
+-------------------------------+
</pre></li>

<li><code>keyring_key_store()</code></p>
<p>Шифрует и хранит ключ в брелоке.</p>
<p>Синтаксис:
<pre>
INTEGER keyring_key_store(STRING key_id, STRING key_type, STRING key)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: Ключевое ID как строка.</li>
<li><code>key_type</code>: Ключевой тип как строка.</li>
<li><code>key</code>: Значение ключа как строка.</p></li></ul>

<p>Возвращаемые значения:</p>
<p>Возвращает 1 для успеха или <code>NULL</code> и ошибку для отказа.</p>
<p>Пример:
<pre>
mysql&gt; SELECT keyring_key_store('new key', 'DSA', 'My key value');
+-----------------------------------------------------+
| keyring_key_store('new key', 'DSA', 'My key value') |
+-----------------------------------------------------+
| 1                                                   |
+-----------------------------------------------------+
</pre></li>

<li><code>keyring_key_type_fetch()</code>
<p>Учитывая ключевое ID, возвращает ключевой тип.</p>
<p>Синтаксис:
<pre>
STRING keyring_key_type_fetch(STRING key_id)
</pre>

Параметры:</p>
<ul><li><p><code>key_id</code>: Ключевое ID как строка.</p></li></ul>
<p>Возвращаемые значения:</p>
<p>Возвращает ключевой тип как строку для успеха,
<code>NULL</code>, если ключ не существует, или <code>NULL</code>
и ошибку для отказа.</p>
<p>Пример:</p>
<p>См. описание <code>keyring_key_fetch()</code>.</p></li></ul>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
