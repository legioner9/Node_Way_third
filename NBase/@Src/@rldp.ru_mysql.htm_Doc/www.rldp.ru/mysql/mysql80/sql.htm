<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <title>Глава 14. Синтаксис SQL</title>
<meta name="generator" content="DocBook XSL Stylesheets + chunker.py v1.9.2" />
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="sql-syntax"></a>Глава 14. Синтаксис SQL</h1>
<p>Эта глава описывает синтаксис для
запросов <a href="glossary.htm#glos_sql">SQL</a> в MySQL.</p>

<h2><a name="sql-syntax-data-definition"></a>14.1. Запросы определения данных
</h2>
<h3><a name="alter-database"></a>14.1.1. ALTER DATABASE</h3>
<pre>
ALTER {DATABASE | SCHEMA} [<em><code>db_name</code></em>]
<em><code>alter_specification</code></em> ...

<em><code>alter_specification</code></em>:
[DEFAULT] CHARACTER SET [=] <em><code>charset_name</code></em>
    | [DEFAULT] COLLATE [=] <em><code>collation_name</code></em>
</pre>

<a href="#alter-database"><code>ALTER DATABASE</code></a>
позволяет Вам изменить полные характеристики базы данных. Эти характеристики
сохранены в словаре данных. Чтобы использовать
<a href="#alter-database"><code>ALTER DATABASE</code></a>, нужна
привилегия <a href="security.html#priv_alter"><code>ALTER</code></a>
на базе данных. <a href="#alter-database"><code>ALTER SCHEMA</code>
</a> синоним <a href="#alter-database"><code>ALTER DATABASE</code>
</a>.</p>
<p>Имя базы данных может быть пропущено для первого синтаксиса, когда запрос
относится к базе данных значения по умолчанию.</p>

<h4><a name="idm139965345895840"></a>Национальные языковые характеристики</h4>
<p><code>CHARACTER SET</code> изменяет набор символов базы данных по
умолчанию. <code>COLLATE</code> изменяет сопоставление базы данных по
умолчанию. <a href="global.htm#charset">Раздел 11.1</a> обсуждает имена
сопоставления и набор символов.</p>

<p>Вы можете видеть, какие наборы символов и сопоставления доступны,
соответственно, через <a href="#show-character-set"><code>SHOW
CHARACTER SET</code></a> и <a href="#show-collation"><code>SHOW
COLLATION</code></a>. См. разделы <a href="#show-character-set">
14.7.5.3</a> и <a href="#show-collation">14.7.5.4</a>.</p>

<p>Если Вы изменяете набор символов по умолчанию или сопоставление для базы
данных, сохраненные подпрограммы, которые используют значения по умолчанию
базы данных, должны быть обновлены так, чтобы они использовали новые значения
по умолчанию. В сохраненной подпрограмме переменные с символьными типами
данных используют значения по умолчанию базы данных, если набор символов или
сопоставление не определены явно.
См. <a href="#create-procedure">раздел 14.1.13</a>.</p>

<h3><a name="alter-event"></a>14.1.2. ALTER EVENT</h3>
<pre>
ALTER
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
EVENT <em><code>event_name</code></em>
[ON SCHEDULE <em><code>schedule</code></em>]
[ON COMPLETION [NOT] PRESERVE]
[RENAME TO <em><code>new_event_name</code></em>]
[ENABLE | DISABLE | DISABLE ON SLAVE]
[COMMENT '<em><code>comment</code></em>']
[DO <em><code>event_body</code></em>]
</pre>

<a href="#alter-event"><code>ALTER EVENT</code></a>
изменяет одну или больше характеристик существующего события без потребности
обновить это. Синтаксис для <code>DEFINER</code>, <code>ON SCHEDULE</code>,
<code>ON COMPLETION</code>, <code>COMMENT</code>,
<code>ENABLE</code> / <code>DISABLE</code> и
<a href="#do"><code>DO</code></a> точно тот же самый, как с
<a href="#create-event"><code>CREATE EVENT</code></a>. См.
<a href="#create-event">раздел 14.1.10</a>.</p>

<p>Любой пользователь может изменить событие, определенное в базе данных, для
которой этот пользователь имеет привилегию <a href="security.html#priv_event">
<code>EVENT</code></a>. Когда пользователь выполняет успешный запрос
<a href="#alter-event"><code>ALTER EVENT</code></a>,
этот пользователь становится определителем для затронутого события.</p>

<p><a href="#alter-event"><code>ALTER EVENT</code></a>
работает только с существующим событием:
<pre>
mysql&gt; ALTER EVENT no_such_event
     &gt; ON SCHEDULE
     &gt;    EVERY '2:3' DAY_HOUR;
<span>ERROR 1517 (HY000): Unknown event 'no_such_event'</span>
</pre>

В каждом из следующих примеров, предположите, что событие называется
<code>myevent</code> и определено, как показано здесь:
<pre>
CREATE EVENT myevent ON SCHEDULE EVERY 6 HOUR
       COMMENT 'A sample comment.' DO
       UPDATE myschema.mytable SET mycol = mycol + 1;
</pre>

Следующий запрос изменяет график для <code>myevent</code> с
однажды каждые шесть часов с немедленным стартом на однажды каждые двенадцать
часов, запускаясь четыре часа со времени выполнения запроса:
<pre>
ALTER EVENT myevent ON SCHEDULE EVERY 12 HOUR
      STARTS CURRENT_TIMESTAMP + INTERVAL 4 HOUR;
</pre>

Возможно изменить многократные характеристики в единственном запросе. Этот
пример изменяет запрос SQL, выполненный
<code>myevent</code> к тому, который удаляет все записи из
<code>mytable</code>, это также изменяет график, таким образом, что это
выполняется однажды, спустя один день после этого
<a href="#alter-event"><code>ALTER EVENT</code></a>.
<pre>
ALTER EVENT myevent ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 DAY
      DO TRUNCATE TABLE myschema.mytable;
</pre>

Определите опции в <a href="#alter-event"><code>ALTER EVENT</code></a>
только для тех характеристик, которые Вы хотите изменить, пропущенные опции
сохраняют свои существующие значения. Это включает любые значения по
умолчанию для <a href="#create-event"><code>CREATE
EVENT</code></a>, например, <code>ENABLE</code>.</p>

<p>Чтобы выключить <code>myevent</code>, используйте
<a href="#alter-event"><code>ALTER EVENT</code></a>:
<pre>
ALTER EVENT myevent DISABLE;
</pre>

<code>ON SCHEDULE</code> может использовать выражения, вовлекающие встроенные
функции MySQL и пользовательские переменные, чтобы получить любое из значений
<em><code>timestamp</code></em> или <em><code>interval</code></em>, которые
это содержит. Вы не можете использовать сохраненные подпрограммы или
определяемые пользователем функции в таких выражениях, и Вы не можете
использовать табличные ссылки, однако, Вы можете использовать
<code>SELECT FROM DUAL</code>. Это верно для
<a href="#alter-event"><code>ALTER EVENT</code></a> и
<a href="#create-event"><code>CREATE EVENT</code></a>.
Ссылки на сохраненные подпрограммы, определяемые пользователем функции и
таблицы в таких случаях определенно не разрешены и терпят неудачу с
ошибкой (см. Bug #22830).</p>

<p>Хотя <a href="#alter-event"><code>ALTER EVENT</code></a>, который
содержит другой <a href="#alter-event"><code>ALTER EVENT</code></a> в
<a href="#do"><code>DO</code></a>, кажется, преуспевает, когда сервер
пытается запустить получающееся запланированное событие, выполнение
терпит неудачу с ошибкой.</p>

<p>Чтобы переименовать событие, используйте <a href="#alter-event">
<code>ALTER EVENT</code></a> <code>RENAME TO</code>. Это запрос
переименовывает <code>myevent</code> в <code>yourevent</code>:
<pre>
ALTER EVENT myevent RENAME TO yourevent;
</pre>

Вы можете также переместить событие в иную базу данных
через <code>ALTER EVENT ... RENAME TO ...</code> с
<code><em><code>db_name.event_name</code></em></code>:
<pre>
ALTER EVENT olddb.myevent RENAME TO newdb.myevent;
</pre>

Чтобы выполнить предыдущий запрос, пользователь, выполняющий это, должен
иметь привилегию <a href="security.html#priv_event"><code>EVENT</code></a>
на обоих базах данных <code>olddb</code> и <code>newdb</code>.</p>
<p>Запроса <code>RENAME EVENT</code> нет.</p>

<p><code>DISABLE ON SLAVE</code> используется на ведомом устройстве вместо
<code>ENABLE</code> или <code>DISABLE</code>, чтобы указать на событие,
которое создавалось на ведущем устройстве и копировалось к ведомому
устройству, но это не выполнено на ведомом устройстве. Обычно
<code>DISABLE ON SLAVE</code> установлен автоматически как требуется, однако,
есть некоторые обстоятельства, при которых Вы можете хотеть или должны
изменить это вручную. См.
<a href="replica.htm#replication-features-invoked">раздел 19.4.1.12</a>.</p>

<h3><a name="alter-function"></a>14.1.3. ALTER FUNCTION</h3>
<pre>
ALTER FUNCTION <em><code>func_name</code></em> [<em><code>characteristic</code></em> ...]
<em><code>characteristic</code></em>:
COMMENT '<em><code>string</code></em>'
  | LANGUAGE SQL
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
</pre>

Это запрос может использоваться, чтобы изменить характеристики сохраненной
функции. Больше чем одно изменение может быть определено в
<a href="#alter-function"><code>ALTER FUNCTION</code></a>.
Однако, Вы не можете изменить параметры или тело сохраненной функции,
используя это запрос, чтобы произвести такие изменения, Вы должны обновить
функцию через <a href="#drop-function"><code>DROP FUNCTION</code></a>
и <a href="#create-function"><code>CREATE FUNCTION</code></a>.</p>

<p>Вы должны иметь привилегию <a href="security.html#priv_alter-routine">
<code>ALTER ROUTINE</code></a> для функции (предоставляется автоматически
создателю). Если двоичное журналирование включено,
<a href="#alter-function"><code>ALTER FUNCTION</code></a>
может также потребовать привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>, см.
<a href="stored.htm#stored-programs-logging">раздел 21.7</a>.</p>

<h3><a name="alter-instance"></a>14.1.4. ALTER INSTANCE</h3>
<pre>
ALTER INSTANCE ROTATE INNODB MASTER KEY
</pre>

<code>ALTER INSTANCE</code> определяет действия, применимые к серверу
MySQL. Требует привилегии <a href="security.html#priv_super"><code>SUPER
</code></a>.</p>

<p><code>ALTER INSTANCE ROTATE INNODB MASTER KEY</code> используется для
ротации основного ключа шифрования, используемого для <code>InnoDB</code>.
Плагин keyring должен быть загружен, чтобы использовать этот запрос. По
умолчанию сервер MySQL загружает плагин <code>keyring_file</code>.</p>

<p><code>ALTER INSTANCE ROTATE INNODB MASTER KEY</code>
поддерживает параллельный DML. Однако, это не может быть выполнено
одновременно с <a href="#create-table"><code>CREATE TABLE ...
ENCRYPTION</code></a> или <a href="#alter-table"><code>ALTER TABLE ...
ENCRYPTION</code></a>, и блокировки взяты, чтобы предотвратить конфликты,
которые могли явиться результатом параллельного выполнения этих запросов.
Если один из противоречивых запросов работает, он должен завершиться прежде,
чем другой может продолжиться.</p>
<p><code>ALTER INSTANCE</code> записан в двоичный журнал так, чтобы он мог
быть выполнен на копируемых серверах.</p>

<h3><a name="alter-procedure"></a>14.1.5. ALTER PROCEDURE</h3>
<pre>
ALTER PROCEDURE <em><code>proc_name</code></em> [<em><code>characteristic</code></em> ...]
<em><code>characteristic</code></em>:
COMMENT '<em><code>string</code></em>'
  | LANGUAGE SQL
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }
</pre>

Этот запрос может использоваться, чтобы изменить характеристики хранимой
процедуры. Больше чем одно изменение может быть определено в
<a href="#alter-procedure"><code>ALTER PROCEDURE</code></a>.
Однако, Вы не можете изменить параметры или тело хранимой процедуры,
используя этот запрос, здесь нужно применить
<a href="#drop-procedure"><code>DROP PROCEDURE</code></a> и
<a href="#create-procedure"><code>CREATE PROCEDURE</code></a>.</p>

<p>Вы должны иметь привилегию <a href="security.html#priv_alter-routine">
<code>ALTER ROUTINE</code></a> для процедуры. По умолчанию эту привилегию
предоставляют автоматически создателю процедуры. Это поведение может быть
изменено, отключая <a href="server.htm#sysvar_automatic_sp_privileges"><code>
automatic_sp_privileges</code></a>. См.
<a href="stored.htm#stored-routines-privileges">раздел 21.2.2</a>.</p>

<h3><a name="alter-server"></a>14.1.6. ALTER SERVER</h3>
<pre>
ALTER SERVER  <em><code>server_name</code></em>
OPTIONS (<em><code>option</code></em> [, <em><code>option</code></em>] ...)
</pre>
Меняет информацию сервера для <code><em><code>server_name</code></em></code>,
корректируя любую из опций, разрешенных в
<a href="#create-server"><code>CREATE SERVER</code></a>.
Соответствующие области в <code>mysql.servers</code>
обновлены соответственно. Этот запрос требует привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Например, чтобы обновить <code>USER</code>:
<pre>
ALTER SERVER s OPTIONS (USER 'sally');
</pre>
<code>ALTER SERVER</code> не вызывает автоматическое завершение транзакции.
</p>
<p>В MySQL 8.0 <code>ALTER SERVER</code> не записан в двоичный журнал,
независимо от формата журналирования, который используется.</p>

<h3><a name="alter-table"></a>14.1.7. ALTER TABLE</h3>
<pre>
ALTER TABLE <em><code>tbl_name</code></em>
[<em><code>alter_specification</code></em> [, <em><code>alter_specification</code></em>] ...]
[<em><code>partition_options</code></em>]

<em><code>alter_specification</code></em>:
<em><code>table_options</code></em>
  | ADD [COLUMN] <em><code>col_name</code></em> <em><code>column_definition</code></em>
[FIRST | AFTER <em><code>col_name</code></em> ]
  | ADD [COLUMN] (<em><code>col_name</code></em> <em><code>column_definition</code></em>,...)
  | ADD {INDEX|KEY} [<em><code>index_name</code></em>]
[<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...) [<em><code>index_option</code></em>] ...
  | ADD [CONSTRAINT [<em><code>symbol</code></em>]] PRIMARY KEY
[<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...) [<em><code>index_option</code></em>] ...
  | ADD [CONSTRAINT [<em><code>symbol</code></em>]]
UNIQUE [INDEX|KEY] [<em><code>index_name</code></em>]
[<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...) [<em><code>index_option</code></em>] ...
  | ADD FULLTEXT [INDEX|KEY] [<em><code>index_name</code></em>]
(<em><code>index_col_name</code></em>,...) [<em><code>index_option</code></em>] ...
  | ADD SPATIAL [INDEX|KEY] [<em><code>index_name</code></em>]
(<em><code>index_col_name</code></em>,...) [<em><code>index_option</code></em>] ...
  | ADD [CONSTRAINT [<em><code>symbol</code></em>]]
FOREIGN KEY [<em><code>index_name</code></em>] (<em><code>index_col_name</code></em>,...)
<em><code>reference_definition</code></em>
  | ALGORITHM [=] {DEFAULT|INPLACE|COPY}
  | ALTER [COLUMN] <em><code>col_name</code></em> {SET DEFAULT <em><code>literal</code></em> | DROP DEFAULT}
  | CHANGE [COLUMN] <em><code>old_col_name</code></em> <em><code>new_col_name</code></em> <em><code>column_definition</code></em>
[FIRST|AFTER <em><code>col_name</code></em>]
  | LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}
  | MODIFY [COLUMN] <em><code>col_name</code></em> <em><code>column_definition</code></em>
[FIRST | AFTER <em><code>col_name</code></em>]
  | DROP [COLUMN] <em><code>col_name</code></em>
  | DROP PRIMARY KEY
  | DROP {INDEX|KEY} <em><code>index_name</code></em>
  | DROP FOREIGN KEY <em><code>fk_symbol</code></em>
  | ALTER INDEX <em><code>index_name</code></em> {VISIBLE | INVISIBLE}
  | DISABLE KEYS
  | ENABLE KEYS
  | RENAME [TO|AS] <em><code>new_tbl_name</code></em>
  | RENAME {INDEX|KEY} <em><code>old_index_name</code></em> TO <em><code>new_index_name</code></em>
  | ORDER BY <em><code>col_name</code></em> [, <em><code>col_name</code></em>] ...
  | CONVERT TO CHARACTER SET <em><code>charset_name</code></em> [COLLATE <em><code>collation_name</code></em>]
  | [DEFAULT] CHARACTER SET [=] <em><code>charset_name</code></em> [COLLATE [=] <em><code>collation_name</code></em>]
  | DISCARD TABLESPACE
  | IMPORT TABLESPACE
  | FORCE
  | {WITHOUT|WITH} VALIDATION
  | ADD PARTITION (<em><code>partition_definition</code></em>)
  | DROP PARTITION <em><code>partition_names</code></em>
  | DISCARD PARTITION {<em><code>partition_names</code></em> | ALL} TABLESPACE
  | IMPORT PARTITION {<em><code>partition_names</code></em> | ALL} TABLESPACE
  | TRUNCATE PARTITION {<em><code>partition_names</code></em> | ALL}
  | COALESCE PARTITION <em><code>number</code></em>
  | REORGANIZE PARTITION <em><code>partition_names</code></em> INTO (<em><code>partition_definitions</code></em>)
  | EXCHANGE PARTITION <em><code>partition_name</code></em> WITH TABLE <em><code>tbl_name</code></em> [{WITH|WITHOUT} VALIDATION]
  | ANALYZE PARTITION {<em><code>partition_names</code></em> | ALL}
  | CHECK PARTITION {<em><code>partition_names</code></em> | ALL}
  | OPTIMIZE PARTITION {<em><code>partition_names</code></em> | ALL}
  | REBUILD PARTITION {<em><code>partition_names</code></em> | ALL}
  | REPAIR PARTITION {<em><code>partition_names</code></em> | ALL}
  | REMOVE PARTITIONING
  | UPGRADE PARTITIONING

<em><code>index_col_name</code></em>:
<em><code>col_name</code></em> [(<em><code>length</code></em>)] [ASC | DESC]

<em><code>index_type</code></em>:
USING {BTREE | HASH}

<em><code>index_option</code></em>:
KEY_BLOCK_SIZE [=] <em><code>value</code></em>
  | <em><code>index_type</code></em>
  | WITH PARSER <em><code>parser_name</code></em>
  | COMMENT '<em><code>string</code></em>'
  | {VISIBLE | INVISIBLE}

<em><code>table_options</code></em>:
<em><code>table_option</code></em> [[,] <em><code>table_option</code></em>] ...
(см. опции <a href="#create-table"><code>CREATE TABLE</code></a>)

<em><code>partition_options</code></em>:
(см. опции <a href="#create-table"><code>CREATE TABLE</code></a>)
</pre>

<a href="#alter-table"><code>ALTER TABLE</code></a>
изменяет структуру таблицы. Например, Вы можете добавить или удалить столбцы,
создать или разрушить индекс, изменить тип существующих столбцов,
переименовать столбцы или таблицу непосредственно. Вы можете также изменить
характеристики, такие как механизм хранения, используемый для таблицы
или табличного комментария.</p>

<p>После имени таблицы, определите изменения, которые будут сделаны. Если ни
одно не дано, <a href="#alter-table"><code>ALTER TABLE</code></a>
ничего не делает.</p>

<p>Синтаксис для многих из допустимых изменений подобен параметрам
<a href="#create-table"><code>CREATE TABLE</code></a>. См.
<a href="#create-table">раздел 14.1.15</a>.</p>

<p><em><code>table_options</code></em> показывает табличные опции вида,
который может использоваться в <a href="#create-table"><code>CREATE
TABLE</code></a>, например, <code>ENGINE</code>, <code>AUTO_INCREMENT</code>,
<code>AVG_ROW_LENGTH</code>, <code>MAX_ROWS</code>, <code>ROW_FORMAT</code>
или <code>TABLESPACE</code>. Для списка всех табличных опций и описания
каждой см. <a href="#create-table">раздел 14.1.15</a>. Однако,
<a href="#alter-table"><code>ALTER TABLE</code></a> игнорирует
опции <code>DATA DIRECTORY</code> и <code>INDEX DIRECTORY</code>.</p>

<p>Использование табличных опций с <a href="#alter-table"><code>ALTER
TABLE</code></a> обеспечивает удобный способ изменить единственные табличные
характеристики. Например, если <code>t1</code> сейчас не таблица
<code>InnoDB</code>, этот запрос изменяет механизм хранения на
<code>InnoDB</code>:
<pre>
ALTER TABLE t1 ENGINE = InnoDB;
</pre>

Изменить <code>InnoDB</code>, чтобы использовать на сжатый
формат хранения строки:
<pre>
ALTER TABLE t1 ROW_FORMAT = COMPRESSED;
</pre>

Если опция шифрования табличного пространства активирована (см.
<a href="innodb.htm#innodb-tablespace-encryption">раздел 16.7.10</a>),
шифрование для <code>t1</code> может быть включено или отключено:
<pre>
ALTER TABLE t1 ENCRYPTION='Y';
ALTER TABLE t1 ENCRYPTION='N';
</pre>

Чтобы отключить шифрование для <code>InnoDB</code>, установите
<code>ENCRYPTION='N'</code>, используя  <a href="#alter-table"><code>
ALTER TABLE</code></a>.</p>

<p>Сбрасывать текущее значение auto-increment:
<pre>
ALTER TABLE t1 AUTO_INCREMENT = 13;
</pre>

Изменить табличный набор символов по умолчанию:
<pre>
ALTER TABLE t1 CHARACTER SET = utf8;
</pre>

Добавить (или изменить) табличный комментарий:
<pre>
ALTER TABLE t1 COMMENT = 'New table comment';
</pre>
Чтобы проверить, что табличные опции были изменены, удобно использовать
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>.</p>

<p><em><code>partition_options</code></em> показывает опции, которые могут
использоваться с разделенными таблицами для того, чтобы повторно разделить,
добавить, удалить, импортировать, слить и разделить разделение, и для того,
чтобы выполнить обслуживание разделения. Это возможно для
<a href="#alter-table"><code>ALTER TABLE</code></a>, который включает
параметр <code>PARTITION BY</code> или <code>REMOVE PARTITIONING</code>,
который должен быть определен последним после любых других технических
требований. <code>ADD PARTITION</code>, <code>DROP PARTITION</code>,
<code>DISCARD PARTITION</code>, <code>IMPORT PARTITION</code>,
<code>COALESCE PARTITION</code>, <code>REORGANIZE PARTITION</code>,
<code>EXCHANGE PARTITION</code>, <code>ANALYZE PARTITION</code>,
<code>CHECK PARTITION</code> и <code>REPAIR PARTITION</code>
не могут быть объединены с другими изменениями технических требований в
<code>ALTER TABLE</code>, так как опции только перечислены на отдельном
разделе. Для получения дополнительной информации об опциях разделения см.
разделы <a href="#create-table">14.1.15</a> и
<a href="#alter-table-partition-operations">14.1.7.1</a>.</p>

<p>До MySQL 5.7.6 разделенные таблицы <code>InnoDB</code>
использовали непатентованное средство <code>ha_partition</code> в качестве
обработчика, используемого <code>MyISAM</code> и другими механизмами
хранения, не поставляющих их собственные обработчики разделения, в MySQL
5.7.6 и позже такие таблицы составлены, используя собственный обработчик
механизма хранения <code>InnoDB</code>. После MySQL 5.7.9
Вы можете обновить таблицу <code>InnoDB</code>, которая была составлена в
MySQL 5.7.6 или ранее (то есть, с <code>ha_partition</code>) на
<code>InnoDB</code>, используя <code>ALTER TABLE ... UPGRADE PARTITIONING
</code> (Bug #76734, Bug #20727344). Эта версия <code>ALTER TABLE</code>
не принимает никакие другие опции и может использоваться только на
единственной таблице за один раз.</p>

<p>Вы можете также использовать <a href="programs.htm#mysql-upgrade"><span>
<strong>mysql_upgrade</strong></span></a>, чтобы обновить более старые
разделенные таблицы <span><strong>InnoDB</strong></span>.</p>

<p>Некоторые операции могут привести к предупреждениям, если предприняты на
таблице, для которой механизм хранения не поддерживает такую работу. Эти
предупреждения могут быть выведены на экран <a href="#show-warnings">
<code>SHOW WARNINGS</code></a>. См. <a href="#show-warnings">раздел
14.7.5.40</a>.</p>

<p>Для информации о поиске неисправностей <a href="#alter-table">
<code>ALTER TABLE</code></a> см. <a href="error.htm#alter-table-problems">
раздел B.5.6.1</a>.</p>

<h4><a name="idm139965345626096"></a>
Хранение, работа и соображения параллелизма</h4>
<p>В большинстве случаев <a href="#alter-table"><code>ALTER TABLE
</code></a> делает временную копию оригинальной таблицы. MySQL ждет других
операций, которые изменяют таблицу, затем продолжается. Это включает
изменение в копию, удаляет оригинальную таблицу и переименовывает новую.
В то время как <a href="#alter-table"><code>ALTER TABLE</code></a>
выполняется, оригинальная таблица читаема другими сеансами. Обновления и
записи таблицы, которые начинаются после
<a href="#alter-table"><code>ALTER TABLE</code></a>
остановлены, пока новая таблица не готова, затем автоматически перенаправлена
к новой таблице без любых неудавшихся обновлений. Временная копия
оригинальной таблицы создается в каталоге базы данных новой таблицы. Это
может отличаться от каталога базы данных оригинальной таблицы для
<a href="#alter-table"><code>ALTER TABLE</code></a>, которые
переименовывают таблицу к иной базе данных.</p>

<p>Исключение, упомянутое ранее, это блокировка чтения
<a href="#alter-table"><code>ALTER TABLE</code></a>
(не только записи) в пункте, где это готово очистить устаревшие структуры
таблиц от таблицы и табличных кэшей определения. В этом пункте это должно
приобрести исключительную блокировку. Чтобы сделать так, это ждет
завершения текущих чтений и блокирует новые чтения и записи.</p>

<p>Для таблиц <code>MyISAM</code> Вы можете убыстрить воссоздание индекса
(самая медленная часть процесса изменения), устанавливая к высокому значению
<a href="server.htm#sysvar_myisam_sort_buffer_size"><code>
myisam_sort_buffer_size</code></a>.</p>

<p>Для некоторых операций, оперативное выполнение
<a href="#alter-table"><code>ALTER TABLE</code></a> возможно, которое
не требует временной таблицы:</p>

<ul><li><p><code>ALTER TABLE <em><code>tbl_name</code></em>
RENAME TO <em><code>new_tbl_name</code></em></code>
без любых других опций MySQL просто переименовывает любые файлы, которые
соответствуют таблице <em><code>tbl_name</code></em>.
Вы можете также использовать <a href="#rename-table"><code>RENAME
TABLE</code></a>, чтобы переименовать таблицы. См.
<a href="#rename-table">раздел 14.1.29</a>.
Любые привилегии, предоставленные определенно для переименованной таблицы,
не мигрируются к новому имени. Они должны быть изменены вручную.</li>

<li>Изменения, которые изменяют только табличные метаданные и не табличные
данные, являются немедленными, потому что сервер должен только изменить
табличные метаданные, не табличное содержание. Следующие изменения быстрые:
</p>

<ul><li><p>Переименование столбца.</li>
<li>Изменение значения по умолчанию столбца.</li>
<li>Изменение определения <a href="types.htm#enum"><code>ENUM</code></a> или
<a href="types.htm#set"><code>SET</code></a>, добавляя новое перечисление или
членов набора в конец списка допустимых членских значений, пока размер
хранения типа данных не изменяется. Например, добавление участника к
<a href="types.htm#set"><code>SET</code></a>, у которого есть 8 участников,
изменяет необходимое хранение для значения от 1 байта до 2 байтов,
это потребует табличной копии. Добавление участников в середине изменения
нумерации списка существующих участников, тоже требует табличной копии.
</p></li></ul></li>

<li><code>ALTER TABLE</code> с <code>DISCARD ... PARTITION ... TABLESPACE
</code> или <code>IMPORT ... PARTITION ... TABLESPACE</code>
не составляют временные таблицы или временные файлы разделения.</p>

<p><code>ALTER TABLE</code> с <code>ADD PARTITION</code>,
<code>DROP PARTITION</code>, <code>COALESCE PARTITION</code>, <code>REBUILD
PARTITION</code> или <code>REORGANIZE PARTITION</code>
не составляют временных таблиц (кроме тех случаев, когда используется с
таблицами <a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>), однако, эти операции могут действительно
создавать временные файлы разделения.</p>

<p><code>ADD</code> или <code>DROP</code> для разделений типов
<code>RANGE</code> или <code>LIST</code> непосредственные операции.
<code>ADD</code> или <code>COALESCE</code> для <code>HASH</code> или
<code>KEY</code> не копирует данные между всеми разделами, если применено
<code>LINEAR HASH</code> или <code>LINEAR KEY</code>,
это имеет тот же самый эффект, как составление новой таблицы, хотя
<code>ADD</code> или <code>COALESCE</code> работают по разделам.
<code>REORGANIZE</code> копирует только измененный раздел и
не касается неизменных.</li>

<li>Переименование индекса.</li>
<li>Добавление или удаление индексирования для
<a href="innodb.htm"><code>InnoDB</code></a>.</li>
<li>Изменение видимости индекса с <code>ALTER INDEX</code>.</p></li></ul>

<p>Вы можете предписать <code>ALTER TABLE</code> работу, которая иначе не
потребовалась бы, чтобы табличная копия использовала временный табличный
метод (как поддержано в MySQL 5.0), устанавливая
<a href="server.htm#sysvar_old_alter_table"><code>old_alter_table</code></a>
в <code>ON</code>, или указав параметр <code>ALGORITHM=COPY</code> в
<em><code>alter_specification</code></em>. Если есть конфликт между
<code>old_alter_table</code> и параметром <code>ALGORITHM</code>
со значением кроме <code>DEFAULT</code>, <code>ALGORITHM</code>
имеет приоритет. <code>ALGORITHM=DEFAULT</code> аналогичен
отсутствию <code>ALGORITHM</code> вовсе.</p>

<p>Определение <code>ALGORITHM=INPLACE</code> заставляет использовать
оперативный метод для пунктов и механизмов хранения, которые поддерживают
это, и приводит к ошибке иначе, таким образом избегая длинной табличной
копии, если Вы пытаетесь изменить таблицу, которая использует иной механизм
хранения, чем Вы ожидаете. См. <a href="innodb.htm#innodb-online-ddl">раздел
16.12</a>.</p>

<p>Для таблиц <code>InnoDB</code> копирование
<a href="#alter-table"><code>ALTER TABLE</code></a>
на таблице, которая находится в совместно используемом табличном
пространстве, таком как <a href="glossary.htm#glos_general_tablespace">общее
табличное пространство</a> или <a href="glossary.htm#glos_system_tablespace">
системное табличное пространство</a> может увеличить количество пространства,
использованного табличным пространством. Такие операции требуют такого
большого количества дополнительного пространства, как данные в таблице плюс
индекс. Для таблицы, которая находится в совместно используемом табличном
пространстве, дополнительное пространство, используемое во время копирования
таблицы <a href="#alter-table"><code>ALTER TABLE</code></a>
не выпущено назад к операционной системе, как для таблицы, которая находится
в табличном пространстве <a href="glossary.htm#glos_file_per_table">
file-per-table</a>.</p>

<p>С MySQL 5.7.4 <a href="#alter-table"><code>ALTER TABLE</code></a>
обновляет временные столбцы MySQL 5.5 до формата 5.6 для <code>ADD
COLUMN</code>, <code>CHANGE COLUMN</code>, <code>MODIFY COLUMN</code>,
<code>ADD INDEX</code> и <code>FORCE</code>.
Это преобразование не может быть сделано, используя алгоритм
<code>INPLACE</code>, потому что таблица должна быть восстановлена, таким
образом, определение <code>ALGORITHM=INPLACE</code> в этих случаях приводит к
ошибке. Определите <code>ALGORITHM=COPY</code> в случае необходимости.</p>

<p>С MySQL 5.7.6 <code>ALTER TABLE</code> на многостолбцовом индексе
используемом, чтобы разделить таблицу по <code>KEY</code>
не может быть выполнен онлайн, когда работа изменила бы порядок столбцов. В
таких случаях Вы должны использовать копирование
<code>ALTER TABLE</code> (Bug #17896265).</p>

<p>Вы можете управлять уровнем параллельного чтения и записи
таблицы, в то время как это изменяется, используя параметр <code>LOCK</code>.
Определение значения не по умолчанию для этого пункта позволяет Вам требовать
определенного количества параллельного доступа или исключительности во время
изменений и останавливает работу, если требуемая степень блокировки
недоступна. Параметры для <code>LOCK</code>:</p>

<ul><li><p>
<pre>
LOCK = DEFAULT
</pre>

Максимальный уровень параллелизма для данного <code>ALGORITHM</code>
(если есть) и <code>ALTER TABLE</code>: допускает
параллельные чтения и записи, если поддержаны. В противном случае разрешает
параллельные чтения, если поддержано. В противном случае проводит в
жизнь эксклюзивный доступ.</li>

<li><pre>
LOCK = NONE
</pre>
Если поддержано, разрешит параллельные чтения и записи.
Иначе, возвратит сообщение об ошибке.</li>

<li><pre>
LOCK = SHARED
</pre>

Если поддержано, разрешите параллельные чтения, но блокирует записи.
Отметьте, что запись будет заблокирована, даже если параллельные записи
поддержаны механизмом хранения для данного <code>ALGORITHM</code> (если есть)
и <code>ALTER TABLE</code>. Если параллельные чтения не поддержаны, возвратит
сообщение об ошибке.</li>

<li><pre>
LOCK = EXCLUSIVE
</pre>
Проведет в жизнь эксклюзивный доступ. Это будет сделано, даже если
параллельные чтения и записи поддержаны механизмом хранения для данного
<code>ALGORITHM</code> (если есть) и <code>ALTER TABLE</code>.</p></li></ul>

<p><code>WITHOUT VALIDATION</code> и <code>WITH VALIDATION</code>
затрагивают <a href="#alter-table"><code>ALTER TABLE</code></a>,
если он выполняет оперативную работу для модификаций
<a href="glossary.htm#glos_generated_virtual_column">произведенных
виртуальных столбцов</a>. См.
<a href="#alter-table-generated-columns">раздел 14.1.7.2</a>.</p>

<p>Вы можете также использовать
<a href="#alter-table"><code>ALTER TABLE <em><code>tbl_name</code>
</em> FORCE</code></a>, чтобы выполнить
<span><span>null</span></span>-работу, которая восстанавливает таблицу. Для
получения дополнительной информации см.
<a href="innodb.htm#innodb-create-index-overview">раздел 16.12.1</a>.</p>

<h4><a name="idm139965345524320"></a>Примечания использования</h4>
<ul><li><p>Чтобы использовать <a href="#alter-table"><code>ALTER TABLE
</code></a>, нужны привилегии
<a href="security.html#priv_alter"><code>ALTER</code></a>,
<a href="security.html#priv_create"><code>CREATE</code></a> и
<a href="security.html#priv_insert"><code>INSERT</code></a> для таблицы.
Переименование таблицы требует
<a href="security.html#priv_alter"><code>ALTER</code></a> и
<a href="security.html#priv_drop"><code>DROP</code></a> на старой таблице,
<a href="security.html#priv_alter"><code>ALTER</code></a>,
  <a href="security.html#priv_create"><code>CREATE</code></a> и
<a href="security.html#priv_insert"><code>INSERT</code></a> на новой.</li>

<li><em><code>table_option</code></em>
показывает табличную опцию вида, который может использоваться в
<a href="#create-table"><code>CREATE TABLE</code></a>, например, в
<code>ENGINE</code>, <code>AUTO_INCREMENT</code>,
<code>AVG_ROW_LENGTH</code>, <code>MAX_ROWS</code>, <code>ROW_FORMAT</code>
или <code>TABLESPACE</code>. См. <a href="#create-table">раздел
14.1.15</a>. Но <a href="#alter-table"><code>ALTER TABLE</code></a>
игнорирует табличные опции <code>DATA DIRECTORY</code> и
<code>INDEX DIRECTORY</code>.</p>

<ul><li><p>Например, чтобы преобразовать таблицу в <code>InnoDB</code>:
<pre>
ALTER TABLE t1 ENGINE = InnoDB;
</pre>
См. <a href="innodb.htm#converting-tables-to-innodb">раздел 16.8.4</a>
для соображений переключения таблицы на <code>InnoDB</code>.</p>

<p>Когда Вы определяете параметр <code>ENGINE</code>,
<a href="#alter-table"><code>ALTER TABLE</code></a>
пересоздает таблицу. Это истина, даже если у таблицы уже есть
указанный механизм хранения.</p>

<p>Запуск <a href="#alter-table"><code>ALTER TABLE
<em><code>tbl_name</code></em> ENGINE=INNODB</code></a> на существующей
таблице <code>InnoDB</code> выполняет
<span><span>null</span></span> <a href="#alter-table"><code>ALTER
TABLE</code></a>, что можно использовать для дефрагментации таблицы, см.
<a href="innodb.htm#innodb-file-defragmenting">раздел 16.11.4</a>. Запуск
<a href="#alter-table"><code>ALTER TABLE
<em><code>tbl_name</code></em> FORCE</code></a> на таблице
<code>InnoDB</code> выполняет ту же самую функцию.</p>

<p><a href="#alter-table"><code>ALTER
TABLE <em><code>tbl_name</code></em> ENGINE=INNODB</code></a> и
<a href="#alter-table"><code>ALTER TABLE
<em><code>tbl_name</code></em> FORCE</code></a> применяют
<a href="innodb.htm#innodb-online-ddl">online DDL</a>
(<code>ALGORITHM=COPY</code>). См.
<a href="innodb.htm#innodb-create-index-overview">раздел 16.12.1</a>.</p>

<p>Результат попытки изменить механизм хранения таблицы затронут тем,
доступен ли желаемый механизм хранения, и установкой режима SQL
<a href="server.htm#sqlmode_no_engine_substitution"><code>
NO_ENGINE_SUBSTITUTION</code></a>, см. <a href="server.htm#sql-mode">раздел
6.1.8</a>.</p>

<p>Чтобы предотвратить потерю данных,
<a href="#alter-table"><code>ALTER TABLE</code></a>
не может использоваться, чтобы изменить механизм хранения таблицы к
<code>MERGE</code> или <code>BLACKHOLE</code>.</li>

<li>Чтобы изменить значение <code>AUTO_INCREMENT</code>
для новых строк:
<pre>
ALTER TABLE t2 AUTO_INCREMENT = <em><code>value</code></em>;
</pre>
Вы не можете сбросить счетчик к значению
меньше или равным значению, которое используется в настоящее время. Для
<code>InnoDB</code> и <code>MyISAM</code>,
если значение в настоящее время меньше или равно максимальному значению в
столбце <code>AUTO_INCREMENT</code>,
значение сброшено к текущему максимуму <code>AUTO_INCREMENT</code>+1.</li>

<li>Вы можете использовать <code>ALTER TABLE</code> с <code>TABLESPACE
</code>, чтобы переместить неразделенные таблицы <code>InnoDB</code>
между существующими <a href="glossary.htm#glos_general_tablespace">
общими табличными пространствами</a>,
<a href="glossary.htm#glos_file_per_table">табличными пространствами
file-per-table</a> и <a href="glossary.htm#glos_system_tablespace">
системным табличным пространством</a>.</p>

<p>Для разделенных таблиц <code>ALTER TABLE tbl_name TABLESPACE [=]
<em><code>tablespace_name</code></em></code> только изменяет табличное
пространство по умолчанию таблицы. Это не перемещает разделение от одного
табличного пространства в другое. Чтобы переместить табличное разделение, Вы
должны переместить каждый раздел, используя <code>ALTER TABLE
<em><code>tbl_name</code></em> REORGANIZE PARTITION</code>.</p>

<p><code>ALTER TABLE ... TABLESPACE</code>
всегда вызывают пересоздание таблицы, даже если <code>TABLESPACE</code>
не изменился от его предыдущего значения.</p>

<p><code>ALTER TABLE ... TABLESPACE</code> не поддерживает перемещение
таблицы от временного табличного пространства в постоянное.</p>
<p><code>DATA DIRECTORY</code>, который поддержан с
<a href="#create-table"><code>CREATE TABLE ... TABLESPACE</code></a>,
не поддержан с <code>ALTER TABLE ... TABLESPACE</code>
и проигнорирован, если определен.</p></li></ul></li>

<li>Вы можете использовать несколько <code>ADD</code>,
<code>ALTER</code>, <code>DROP</code> и <code>CHANGE</code> в одном
<a href="#alter-table"><code>ALTER TABLE</code></a>, отделенных
запятыми. Это расширение MySQL к стандартному SQL, который разрешает только
один из каждого типа параметра за запрос
<a href="#alter-table"><code>ALTER TABLE</code></a>.
Например, чтобы удалить много столбцов в единственном запросе, сделайте это:
<pre>
ALTER TABLE t2 DROP COLUMN c, DROP COLUMN d;
</pre></li>

<li><code>CHANGE <em><code>col_name</code></em></code>,
<code>DROP <em><code>col_name</code></em></code> и
<code>DROP INDEX</code> расширения MySQL к стандартному SQL.</li>
<li><code>COLUMN</code> является дополнительным и может быть пропущено.</li>

<li><em><code>column_definition</code></em>
использует тот же самый синтаксис для <code>ADD</code> и
<code>CHANGE</code> как в <a href="#create-table"><code>CREATE
TABLE</code></a>. См. <a href="#create-table">раздел 14.1.15</a>.</li>

<li>Для информации о произведенных столбцах см.
<a href="#alter-table-generated-columns">раздел 14.1.7.2</a>.</li>
<li>Вы можете переименовать столбец, используя <code>CHANGE
<em><code>old_col_name</code></em> <em><code>new_col_name</code></em>
<em><code>column_definition</code></em></code>.
Чтобы сделать так, определите старые и новые имена столбцов и определение,
которое в настоящее время имеет столбец. Например, чтобы переименовать
<a href="types.htm#integer-types"><code>INTEGER</code></a> из
<code>a</code> в <code>b</code>:
<pre>
ALTER TABLE t1 CHANGE a b INTEGER;
</pre>

Чтобы изменить тип столбца, но не имя, <code>CHANGE</code>
все еще требует старого и нового имени столбца, даже если они одинаковы:
<pre>
ALTER TABLE t1 CHANGE b b BIGINT NOT NULL;
</pre>

Вы можете также использовать <code>MODIFY</code>, чтобы
изменить тип столбца, не переименовывая это:
<pre>
ALTER TABLE t1 MODIFY b BIGINT NOT NULL;
</pre>
<p><code>MODIFY</code> расширение <a href="#alter-table"><code>ALTER
TABLE</code></a> для совместимости с Oracle.</p>

<p>Когда Вы используете <code>CHANGE</code> или <code>MODIFY</code>,
<em><code>column_definition</code></em> должен включать тип данных и все
признаки, которые должны относиться к новому столбцу, кроме индексных
признаков вроде <code>PRIMARY KEY</code> или <code>UNIQUE</code>.
Признаки, существующие в оригинальном определении, но не определенные для
нового определения, не применены. Предположите, что столбец
<code>col1</code> определен как <code>INT UNSIGNED DEFAULT 1 COMMENT
'my column'</code>, и Вы изменяете столбец следующим образом:
<pre>
ALTER TABLE t1 MODIFY col1 BIGINT;
</pre>

Получающийся столбец будет определен как <code>BIGINT</code>,
но не будет включать признаки
<code>UNSIGNED DEFAULT 1 COMMENT 'my column'</code>.
Чтобы сохранить их, запрос должен быть:
<pre>
ALTER TABLE t1 MODIFY col1 BIGINT UNSIGNED DEFAULT 1 COMMENT 'my column';
</pre></li>

<li>Когда Вы изменяете использование типа данных через <code>CHANGE</code>
или <code>MODIFY</code>, MySQL пытается преобразовать существующие значения
столбцов в новый тип так, как возможно.</p>

<p>Это преобразование может привести к изменению данных. Например, если Вы
сокращаете строковый столбец, значения могут быть усеченными. Чтобы
препятствовать этому, если бы преобразования в новый тип данных привело бы к
потере данных, включите строгий режим SQL перед использованием
<a href="#alter-table"><code>ALTER TABLE</code></a> (см.
<a href="server.htm#sql-mode">раздел 6.1.8</a>).</p></li>

<li>Чтобы добавить столбец в определенной позиции в пределах строки таблицы,
надо использовать <code>FIRST</code> или <code>AFTER <em><code>col_name
</code></em></code>. Значение по умолчанию должно добавить последний столбец.
Вы можете также использовать <code>FIRST</code> и <code>AFTER</code> в
<code>CHANGE</code> или <code>MODIFY</code>, чтобы переупорядочить
столбцы в пределах таблицы.</li>

<li><code>ALTER ... SET DEFAULT</code> или <code>ALTER ... DROP DEFAULT
</code> определит новое значение по умолчанию для столбца или удалит старое
значение по умолчанию, соответственно. Если старое значение по умолчанию
удалено, и столбец может быть <code>NULL</code>, новое значение по умолчанию
<code>NULL</code>. Если столбец не может быть <code>NULL</code>, MySQL
назначает значение по умолчанию как описано в
<a href="types.htm#data-type-defaults">разделе 12.7</a>.</li>

<li><a href="#drop-index"><code>DROP INDEX</code></a>
удаляет индекс. Это расширение MySQL к стандартному SQL. См.
<a href="#drop-index">раздел 14.1.22</a>.
Если Вы неуверены в имени индекса, надо использовать
<code>SHOW INDEX FROM <em><code>tbl_name</code></em></code>.</li>

<li>Если столбцы исключены из таблицы, столбцы также удалены из
любого индекса. Если все столбцы, которые составляют индекс,
удалены, индекс удален также. Если Вы используете <code>CHANGE</code> или
<code>MODIFY</code>, чтобы сократить столбец, для которого индекс
существует на столбце, и получающаяся длина столбца меньше, чем длина
индекса, MySQL сокращает индексирование автоматически.</li>

<li>Если таблица содержит только один столбец, он не может быть удален.
Если то, что Вы предназначаете, должно удалить таблицу, надо использовать
команду <a href="#drop-table"><code>DROP TABLE</code></a>.</li>

<li><code>DROP PRIMARY KEY</code> удаляет
<a href="glossary.htm#glos_primary_key">primary key</a>.
Если нет никакого первичного ключа, ошибка происходит. Для информации о
технических характеристиках первичных ключей, специально для
<code>InnoDB</code>, см. <a href="optimiz.htm#optimizing-primary-keys">раздел
9.3.2</a>.</p>

<p>Если Вы добавляете <code>UNIQUE INDEX</code> или <code>PRIMARY KEY</code>,
MySQL хранит это прежде, чем любой групповой индекс, чтобы обнаружить
дубликаты ключа как можно раньше.</li>

<li>Некоторые механизмы хранения разрешают Вам определять тип индекса,
создавая индексирование. Синтаксис для <em><code>index_type</code></em>:
<code>USING <em><code>type_name</code></em></code>. См.
<a href="#create-index">раздел 14.1.12</a>.
Привилегированная позиция после списка столбца. Поддержка использования опции
перед списком столбца будет удалена в будущем выпуске MySQL.</p>

<p><em><code>index_option</code></em> определяют дополнительные опции для
индексирования. <code>USING</code> одна такая опция. Для деталей о допустимых
значениях <em><code>index_option</code></em> см.
<a href="#create-index">раздел 14.1.12</a>.</li>

<li><code>RENAME INDEX <em><code>old_index_name</code></em> TO
<em><code>new_index_name</code></em></code> переименовывает индекс.
Это расширение MySQL к стандартному SQL. Контент таблицы остается неизменным.
<em><code>old_index_name</code></em> должно быть названием существующего
индекса в таблице, которая не удалена тем же самым
<a href="#alter-table"><code>ALTER TABLE</code></a>.
<code>new_index_name</code> новое индексное имя, которое не может дублировать
название индексирования в получающейся таблице после того, как изменения были
применены. Ни одно имя индекса не может быть <code>PRIMARY</code>.</li>

<li>После <a href="#alter-table"><code>ALTER TABLE</code></a>
может быть необходимо выполнить <a href="#analyze-table"><code>ANALYZE
TABLE</code></a>, чтобы обновить индексируют информацию о количестве
элементов. См. <a href="#show-index">раздел 14.7.5.22</a>.</li>

<li><code>ORDER BY</code> позволяет Вам составить новую таблицу со строками в
определенном порядке. Эта опция полезна прежде всего, когда Вы знаете, что
должны главным образом запросить строки в определенном порядке большую часть
времени. При использовании этой опции после существенных изменений таблицы Вы
могли бы быть в состоянии получить более высокую производительность.
В некоторых случаях, это могло бы сделать сортировку легче для MySQL, если
таблица в порядке столбцов, которым Вы хотите упорядочить это позже.</p>

<p>Таблица не остается в указанном порядке после вставок и удалений.</p>
<p><code>ORDER BY</code> разрешает одному или более именам столбцов быть
определенными для того, чтобы быть критерием сортировки, каждый из которых
произвольно может сопровождаться <code>ASC</code> или <code>DESC</code>,
чтобы указать на сортировку по возрастанию или сортировку по убыванию,
соответственно. Значение по умолчанию: по возрастанию. Только имена столбцов
разрешены как критерии сортировки, произвольные выражения не разрешены. Этот
параметр должен быть дан последним после любых других.</p>

<p><code>ORDER BY</code> не имеет смысла для <code>InnoDB</code>, потому что
<code>InnoDB</code> всегда обрабатывает строки таблицы согласно
<a href="glossary.htm#glos_clustered_index">кластеризируемому индексу</a>.
</p>
<p>Когда используется на разделенной таблице, <code>ALTER TABLE ...
ORDER BY</code> сортирует строки только в пределах каждого раздела.</p></li>

<li><code>ALTER INDEX</code> разрешает индексированию быть сделанным видимым
или невидимым. Невидимый индекс не используется оптимизатором.
Модификация невидимости относится к индексам кроме первичных ключей (явных
или неявных). С MySQL 8.0.1 эта особенность поддержана для любого механизма
хранения. В MySQL 8.0.0 это применяется только к <code>InnoDB</code>.
См. <a href="optimiz.htm#invisible-indexes">раздел 9.3.10</a>.</p></li>

<li>Если Вы используете <a href="#alter-table"><code>ALTER TABLE
</code></a> на <code>MyISAM</code>, все групповые индексы
создаются в отдельном пакете (как для
<a href="#repair-table"><code>REPAIR TABLE</code></a>).
Это должно сделать <a href="#alter-table"><code>ALTER TABLE</code></a>
намного быстрее, когда Вы имеете много индексов.</p>

<p>Для <code>MyISAM</code> ключевым обновлением можно управлять явно.
Используйте <code>ALTER TABLE ... DISABLE KEYS</code>, чтобы
сказать MySQL прекратить обновлять групповой индекс. Затем примените
<code>ALTER TABLE ... ENABLE KEYS</code> для пересоздания потерянных
индексов. <code>MyISAM</code> делает это со специальным алгоритмом,
который намного быстрее, чем вставка ключей один за другим, так что
отключение ключей прежде, чем вставить много данных, должно дать значительное
ускорение. Использование <code>ALTER TABLE ... DISABLE KEYS</code> требует
привилегию <a href="security.html#priv_index"><code>INDEX</code></a>
в дополнение к привилегиям, упомянутым ранее.</p>

<p>В то время как групповые индексы выключены,
они проигнорированы для таких запросов, как
<a href="#select"><code>SELECT</code></a> и
<a href="#explain"><code>EXPLAIN</code></a>,
это иначе использовало бы их.</li>

<li>В MySQL 8.0 сервер запрещает изменения столбцов внешнего ключа, у которых
есть потенциал, чтобы вызвать потерю справочной целостности. Это также
запрещает изменения типа данных таких столбцов, которые могут быть опасными.
Например, изменение <a href="types.htm#char"><code>VARCHAR(20)</code></a> на
<a href="types.htm#char"><code>VARCHAR(30)</code></a> разрешено, но изменение
этого к <a href="types.htm#char"><code>VARCHAR(1024)</code></a>
нет, потому что это изменяет число байтов длины, требуемых, чтобы сохранить
отдельные значения. Обходное решение должно использовать
<a href="#alter-table"><code>ALTER TABLE ... DROP FOREIGN KEY</code>
</a> прежде, чем изменить определение столбца и
<a href="#alter-table"><code>ALTER TABLE ... ADD
FOREIGN KEY</code></a> после.</li>

<li><code>FOREIGN KEY</code> и <code>REFERENCES</code>
поддержаны <code>InnoDB</code>, который осуществляет
<code>ADD [CONSTRAINT [<em><code>symbol</code></em>]] FOREIGN KEY
[<em><code>index_name</code></em>] (...) REFERENCES ... (...)</code>. См.
<a href="innodb.htm#innodb-foreign-key-constraints">раздел 16.8.6</a>.
Для других механизмов хранения параметры разобраны, но проигнорированы.
<code>CHECK</code> разобран, но проигнорирован всеми механизмами хранения.
См. <a href="#create-table">раздел 14.1.15</a>.
Причина того, чтобы принять, но проигнорировать пункты синтаксиса: для
совместимости, чтобы облегчить перенос кода от других SQL-серверов и
запускать приложения, которые составляют таблицы со ссылками. См.
<a href="intro.htm#differences-from-ansi">раздел 1.8.2</a>.</p>

<p>Для <a href="#alter-table"><code>ALTER TABLE</code></a>,
в отличие от этого <a href="#create-table"><code>CREATE TABLE</code>
</a>, <code>ADD FOREIGN KEY</code> игнорирует <em><code>index_name</code>
</em>, если дано и использовано автоматически произведенное имя внешнего
ключа. Как обходное решение, включайте <code>CONSTRAINT</code>, чтобы
определить имя внешнего ключа:
<pre>
ADD CONSTRAINT <em><code>name</code></em> FOREIGN KEY (....) ...
</pre>

<p>Действующие технические требования <code>REFERENCES</code>,
где ссылки определены как часть спецификации столбца, тихо проигнорированы.
MySQL принимает только <code>REFERENCES</code>, определенные как часть
отдельной спецификации <code>FOREIGN KEY</code>.</p>

<p>Разделенные таблицы <code>InnoDB</code>
не поддерживают внешние ключи. См.
<a href="partit.htm#partitioning-limitations-storage-engines">
раздел 20.6.2</a>.</p></li>

<li>MySQL поддерживает использование <a href="#alter-table"><code>
ALTER TABLE</code></a>, чтобы удалить внешние ключи:
<pre>
ALTER TABLE <em><code>tbl_name</code></em>
      DROP FOREIGN KEY <em><code>fk_symbol</code></em>;
</pre>
См. <a href="innodb.htm#innodb-foreign-key-constraints">раздел 16.8.6</a>.
</li>

<li>Добавление и удаление внешнего ключа в том же самом
<a href="#alter-table"><code>ALTER TABLE</code></a>
поддержано для <a href="#alter-table"><code>ALTER TABLE ...
ALGORITHM=INPLACE</code></a>, но не для
<a href="#alter-table"><code>ALTER TABLE ... ALGORITHM=COPY</code>
</a>.</li>

<li>Для таблицы <code>InnoDB</code>, которая составлена с ее собственным
табличным пространством
<a href="glossary.htm#glos_file_per_table">file-per-table</a> в файле
<code>.ibd</code>, от того файла можно отказаться и импортировать другой.
Отказаться от файла <code>.ibd</code> так:
<pre>
ALTER TABLE <em><code>tbl_name</code></em> DISCARD TABLESPACE;
</pre>

Это удаляет текущий файл <code>.ibd</code>,
так что надо убедиться, что у Вас есть резервная копия. Попытка изменить
табличное содержание, в то время как от файла табличного пространства
отказываются приводит к ошибке. Вы можете выполнить операции DDL,
перечисленные в <a href="innodb.htm#innodb-online-ddl">раздел 16.12</a>
в то время, как от файла табличного пространства отказываются.</p>

<p>Чтобы импортировать резервный файл <code>.ibd</code>
назад в таблицу, скопируйте его в каталог базы данных, а затем
сделайте этот запрос:
<pre>
ALTER TABLE <em><code>tbl_name</code></em> IMPORT TABLESPACE;
</pre>

Файл табличного пространства не должен обязательно быть создан на сервере, в
который он будет импортирован позже. В MySQL 8.0 импорт файла табличного
пространства из другого сервера работает, если у обоих серверов есть статус
GA (General Availablility), и их версии в пределах того же самого ряда. Иначе
файл должен быть создан на сервере, в который он импортирован.</p>

<p><a href="#alter-table"><code>ALTER TABLE ... IMPORT TABLESPACE
</code></a> не проводит в жизнь ограничения внешнего ключа
на импортированные данные.</p>

<p><a href="#alter-table"><code>ALTER TABLE ...
DISCARD TABLESPACE</code></a> и
<a href="#alter-table"><code>ALTER TABLE
...IMPORT TABLESPACE</code></a> не поддержаны для таблиц, которые принадлежат
<a href="glossary.htm#glos_general_tablespace">
общему табличному пространству</a>.</p>
<p>См. <a href="innodb.htm#innodb-multiple-tablespaces">раздел 16.7.4</a>.
</li>

<li>Чтобы изменить табличный набор символов по умолчанию и все символьные
столбцы (<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>)
к новому набору символов, используйте запрос:
<pre>
ALTER TABLE <em><code>tbl_name</code></em> CONVERT TO CHARACTER SET
      <em><code>charset_name</code></em>;
</pre>

Запрос также изменяет сопоставление всех символьных столбцов. Если
Вы не определяете <code>COLLATE</code>, чтобы указать, которое сопоставление
использовать, запрос использует сопоставление по умолчанию набора символов.
Если это сопоставление является несоответствующим для намеченного табличного
использования (например, если это изменило бы от чувствительного к регистру
сопоставления до нечувствительного к регистру),
определите сопоставление явно.</p>

<p>Для столбца, у которого есть тип данных
<a href="types.htm#char"><code>VARCHAR</code></a>, или один из типов
<a href="types.htm#blob"><code>TEXT</code></a>, <code>CONVERT TO
CHARACTER SET</code> изменит тип данных по мере необходимости, чтобы
гарантировать, что новый столбец достаточно длинен, чтобы сохранить так много
символов, как оригинальный столбец. Например, у
<a href="types.htm#blob"><code>TEXT</code></a> есть
два байта длины, которые хранят длину значений в столбце, до максимума
65535. Для столбца <code>latin1</code>
<a href="types.htm#blob"><code>TEXT</code></a>
каждый символ требует единственный байт, таким образом, столбец может
сохранить до 65535 символов. Если столбец преобразован в <code>utf8</code>,
каждый символ мог бы потребовать до трех байтов для максимальной возможной
длины 3 * 65535 = 196605 байт. Та длина не будет помещаться в
байты длины столбца <a href="types.htm#blob"><code>TEXT</code></a>,
таким образом, MySQL преобразует тип данных в
<a href="types.htm#blob"><code>MEDIUMTEXT</code></a>,
который является самым маленьким строковым типом, для которого байты длины
могут сделать запись значения 196605. Точно так же
<a href="types.htm#char"><code>VARCHAR</code></a> мог бы быть преобразован в
<a href="types.htm#blob"><code>MEDIUMTEXT</code></a>.</p>

<p>Чтобы избежать изменений типа данных, не следует использовать
<code>CONVERT TO CHARACTER SET</code>. Вместо этого используйте
<code>MODIFY</code>, чтобы изменить отдельные столбцы. Например:
<pre>
ALTER TABLE t MODIFY latin1_text_col TEXT CHARACTER SET utf8;
ALTER TABLE t MODIFY latin1_varchar_col VARCHAR(<em><code>M</code></em>)
      CHARACTER SET utf8;
</pre>

Если Вы определяете <code>CONVERT TO CHARACTER SET binary</code>,
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>
преобразованы в их соответствующие двоичные строковые типы
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a>).
Это означает, что у столбцов больше не будет набора символов и последующие
<code>CONVERT TO</code> не будут относиться к ним.</p>
<p>Если <em><code>charset_name</code></em> = <code>DEFAULT</code>,
набор символов базы данных используется.</p>

<p><code>CONVERT TO</code> преобразовывает значения столбцов между наборами
символов. Это не то, что Вы хотите, если у Вас есть столбец в одном наборе
символов (как <code>latin1</code>) но сохраненные значения фактически
используют некоторый другой, несовместимый, набор символов (как
<code>utf8</code>). В этом случае, Вы должны сделать следующее для
каждого такого столбца:
<pre>
ALTER TABLE t1 CHANGE c1 c1 BLOB;
ALTER TABLE t1 CHANGE c1 c1 TEXT CHARACTER SET utf8;
</pre>

Причина того, что это работает, состоит в том, что нет никакого
преобразования, когда Вы преобразовываете в или от
<a href="types.htm#blob"><code>BLOB</code></a>.</p>

<p>Чтобы изменить только набор символов <span><em>default</em></span>
для таблицы, используйте этот запрос:
<pre>
ALTER TABLE <em><code>tbl_name</code></em> DEFAULT CHARACTER SET
      <em><code>charset_name</code></em>;
</pre>

Слово <code>DEFAULT</code> опционально. Набор символов значения по умолчанию
это набор символов, который используется, если Вы не определяете набор
символов для столбцов, которые Вы добавляете к таблице позже (например, с
помощью <code>ALTER TABLE ... ADD column</code>).</p>

<p>При включении <a href="server.htm#sysvar_foreign_key_checks"><code>
foreign_key_checks</code></a>, что является настройкой по умолчанию,
преобразование набора символов не разрешено на таблицах, которые включают
столбец строки символов, используемый в ограничении внешнего ключа. Обходное
решение должно отключить
<a href="server.htm#sysvar_foreign_key_checks"><code>foreign_key_checks
</code></a> прежде, чем выполнить преобразование набора символов. Вы должны
выполнить преобразование на обеих таблицах, вовлеченных в ограничение
внешнего ключа перед включением
<a href="server.htm#sysvar_foreign_key_checks"><code>foreign_key_checks
</code></a>. Если Вы повторно включаете
<a href="server.htm#sysvar_foreign_key_checks"><code>foreign_key_checks
</code></a> после преобразования только одной из таблиц,
<code>ON DELETE CASCADE</code> или <code>ON UPDATE CASCADE</code>
могут повредить данные в таблице ссылки из-за неявного преобразования,
которое происходит во время этих операций (Bug #45290, Bug #74816).
</p></li></ul>

<p>С функцией <a href="connect.htm#mysql-info"><code>mysql_info()</code></a>
C API Вы можете узнать, сколько было скопировано строк
<a href="#alter-table"><code>ALTER TABLE</code></a>. См.
<a href="connect.htm#mysql-info">раздел 25.8.7.36</a>.</p>

<h4><a name="alter-table-partition-operations"></a>14.1.7.1.
Операции разделения ALTER TABLE</h4>
<p>Связанные с разделением параметры <a href="#alter-table"><code>
ALTER TABLE</code></a> могут использоваться с разделенными таблицами для
того, чтобы повторно разделить, добавить, удалить, отказаться,
импортировать, слить и разделить разделы и выполнить обслуживание разделения.
</p>

<ul><li><p>Просто использование <em><code>partition_options</code></em> с
<a href="#alter-table"><code>ALTER TABLE</code></a>
на разделенной таблице перераспределяет таблицу, согласно схеме разделения,
определенной <em><code>partition_options</code></em>.
Этот пункт всегда начинается <code>PARTITION BY</code> и
и следует за тем же самым синтаксисом и другими правилами, как в
<em><code>partition_options</code></em> для
<a href="#create-table"><code>CREATE TABLE</code></a> (см.
<a href="#create-table">раздел 14.1.15</a>),
может также использоваться, чтобы разделить существующую таблицу, которая еще
не разделена. Например, считайте (неразделенную) таблицу определенной,
как показано здесь:
<pre>
CREATE TABLE t1 (id INT, year_col INT);
</pre>

Эта таблица может быть разделена <code>HASH</code> с применением столбца
<code>id</code> как ключа разделения на 8 разделов посредством этого запроса:
<pre>
ALTER TABLE t1 PARTITION BY HASH(id) PARTITIONS 8;
</pre>

MySQL поддерживает <code>ALGORITHM</code> с
<code>[SUB]PARTITION BY [LINEAR] KEY</code>. <code>ALGORITHM=1</code>
заставляет сервер использовать те же самые хеширующие ключ функции как в
MySQL 5.1, вычисляя размещение строк в разделении, <code>ALGORITHM=2</code>
указывает, что сервер использует хеширующие ключ функции, осуществленные и
используемые по умолчанию для новых разделенных таблиц
<code>KEY</code> в MySQL 5.5 и выше.
Разделенные таблицы, составленные с хеширующими ключ функциями,
используемыми в MySQL 5.5 и позже, не могут использоваться MySQL 5.1.
Не определение опции имеет тот же самый эффект, как использование
<code>ALGORITHM=2</code>. Эта опция предназначена для использования в
основном, обновляя или удаляя разделенные таблицы <code>[LINEAR] KEY</code>
между MySQL 5.1 и более поздними версиями MySQL, или для того, чтобы
составить таблицы, разделенные <code>KEY</code> или
<code>LINEAR KEY</code> в MySQL 5.5 или более позднем сервере, которые могут
использоваться на MySQL 5.1.</p>

<p>Чтобы обновить разделенную таблицу <code>KEY</code>, которая была
составлена в MySQL 5.1, сначала выполните
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>
и отметьте точные столбцы и число показанного разделения. Теперь выполните
<code>ALTER TABLE</code>, использующий точно тот же самый список столбцов и
число разделов, как в <code>CREATE TABLE</code>, добавляя
<code>ALGORITHM=2</code> сразу после <code>PARTITION BY</code>.
Вы должны также включать <code>LINEAR</code>, если это использовалось для
оригинального табличного определения. Пример сеанса в
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>:
<pre>
mysql&gt; SHOW CREATE TABLE p\G
*************************** 1. row ***************************
   Table: p
Create Table: CREATE TABLE `p` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cd` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1
/*!50100 <span><em>PARTITION BY LINEAR KEY (id)
PARTITIONS 32</em></span> */
1 row in set (0.00 sec)

mysql&gt; ALTER TABLE p <span><em>PARTITION BY LINEAR KEY ALGORITHM=2 (id)
                PARTITIONS 32</em></span>;
Query OK, 0 rows affected (5.34 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; SHOW CREATE TABLE p\G
*************************** 1. row ***************************
   Table: p
Create Table: CREATE TABLE `p` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cd` datetime NOT NULL,
  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1
/*!50100 PARTITION BY LINEAR KEY (id)
PARTITIONS 32 */
1 row in set (0.00 sec)
</pre>

Понижение версии таблицы создало использование хеширования ключа значения по
умолчанию, используемого в MySQL 5.5 и позже, позволяя его использование в
MySQL 5.1, кроме как в случае использования <code>ALGORITHM=1</code>, чтобы
вынудить разделение таблицы быть восстановленным, используя хеширующие ключ
функции MySQL 5.1. Рекомендуется, чтобы Вы не делали этого кроме тех случаев,
когда необходимо для совместимости с MySQL 5.1, так как улучшенная функция
хеширования <code>KEY</code>, используемая по умолчанию в MySQL 5.5 и позже,
обеспечивает затруднительные положения для многих проблем, найденных в
более старом исполнении.</p>

<p>Таблица, обновленная посредством <code>ALTER TABLE ...
PARTITION BY ALGORITHM=2 [LINEAR] KEY ...</code>
больше не может использоваться MySQL 5.1.
Такая таблица должна была бы быть удалена с <code>ALTER TABLE ...
PARTITION BY ALGORITHM=1 [LINEAR] KEY ...</code>
прежде, чем это могло использоваться снова MySQL 5.1.</p>

<p>Таблица, которая следует из использования <code>ALTER TABLE
... PARTITION BY</code> должна следовать тем же самым правилам, как
создаваемая с <code>CREATE TABLE ... PARTITION BY</code>.
Это включает правила, управляющие отношениями между любыми уникальными
ключами (включая любой первичный ключ), который таблица могла бы иметь, и
столбец или столбцы, используемые в выражении разделения, как обсуждено в
<a href="partit.htm#partitioning-limitations-partitioning-keys-unique-keys">
разделе 20.6.1</a>. Правила <code>CREATE TABLE ... PARTITION BY</code>
для того, чтобы определить число разделов, также относятся к
<code>ALTER TABLE ... PARTITION BY</code>.</p>

<p><em><code>partition_definition</code></em> для
<code>ALTER TABLE ADD PARTITION</code> поддерживает те же самые опции как
параметр с тем же самым названием в
<a href="#create-table"><code>CREATE TABLE</code></a> (см.
<a href="#create-table">раздел 14.1.15</a>).
Предположим, что Вы создали разделенную таблицу как показано здесь:
<pre>
CREATE TABLE t1 (id INT, year_col INT)
       PARTITION BY RANGE (year_col) (
                 PARTITION p0 VALUES LESS THAN (1991),
                 PARTITION p1 VALUES LESS THAN (1995),
                 PARTITION p2 VALUES LESS THAN (1999));
</pre>

Вы можете добавить новый раздел <code>p3</code>
к этой таблице для того, чтобы сохранить значения меньше <code>2002</code>:
<pre>
ALTER TABLE t1 ADD PARTITION (PARTITION p3 VALUES LESS THAN (2002));
</pre>

<code>ADD PARTITION</code> может также использоваться с
<code>TABLESPACE</code>, чтобы добавить новый раздел к существующему общему
табличному пространству, к табличному пространству file-per-table
или к системному табличному пространству.
<pre>
ALTER TABLE t1 ADD PARTITION (PARTITION p4 VALUES LESS THAN (2015)
      TABLESPACE = `ts1`);
ALTER TABLE t1 ADD PARTITION (PARTITION p4 VALUES LESS THAN (2015)
      TABLESPACE = `innodb_file_per_table`);
ALTER TABLE t1 ADD PARTITION (PARTITION p4 VALUES LESS THAN (2015)
      TABLESPACE = `innodb_system`);
</pre>

<p>Если опция <code>TABLESPACE = <em><code>tablespace_name</code></em></code>
не определена, <a href="#alter-table"><code>ALTER TABLE ... ADD
PARTITION</code></a> добавляет раздел к табличному пространству по умолчанию
таблицы, которое может быть определено на табличном уровне во время
<a href="#create-table"><code>CREATE TABLE</code></a> или
<a href="#alter-table"><code>ALTER TABLE</code></a>.</p>

<p><code>DROP PARTITION</code> может использоваться, чтобы удалить один или
больше разделов <code>RANGE</code> или <code>LIST</code>.
Этот запрос не может использоваться с <code>HASH</code> или <code>KEY</code>,
вместо этого используйте <code>COALESCE PARTITION</code>.
Любые данные, которые хранились в удаленном разделе, названном в
<em><code>partition_names</code></em> потеряны. Например, учитывая таблицу
<code>t1</code> определенную ранее, Вы можете удалить разделы
<code>p0</code> и <code>p1</code>:
<pre>
ALTER TABLE t1 DROP PARTITION p0, p1;
</pre>
<code>ADD PARTITION</code> и <code>DROP PARTITION</code>
в настоящее время не поддерживают <code>IF [NOT] EXISTS</code>.</p>

<p><a href="#alter-table"><code>DISCARD
PARTITION ... TABLESPACE</code></a> и
<a href="#alter-table"><code>IMPORT
PARTITION ... TABLESPACE</code></a> расширяют
<a href="glossary.htm#glos_transportable_tablespace">мобильную</a>
особенность табличного пространства на табличные разделы. Каждый раздел
<code>InnoDB</code> имеет свой собственный файл табличного пространства
(<code>.idb</code>). <a href="glossary.htm#glos_transportable_tablespace">
Мобильная</a> особенность облегчает копирование табличных пространств с
рабочего случая сервера MySQL на другой рабочий случай или выполнение
восстановления на том же самом случае. Обе опции берут список разделенных
запятой значений одного или более имен разделов. Например:
<pre>
ALTER TABLE t1 DISCARD PARTITION p2, p3 TABLESPACE;
ALTER TABLE t1 IMPORT PARTITION p2, p3 TABLESPACE;
</pre>

При запуске <a href="#alter-table"><code>DISCARD
PARTITION ... TABLESPACE</code></a> и
<a href="#alter-table"><code>IMPORT PARTITION ... TABLESPACE</code>
</a> на подразделенных таблицах позволены имена разделения и подразделения.
Когда имя разделения определено, подразделение того разделения включено.</p>

<p><a href="glossary.htm#glos_transportable_tablespace">Мобильная</a>
особенность также поддерживает копирование или восстановление разделенных
таблиц <code>InnoDB</code> (все разделение сразу). Для дополнительной
информации см. <a href="innodb.htm#tablespace-copying">раздел 16.7.6</a>.</p>

<p>Переименование разделенной таблицы поддержано. Вы можете переименовать
отдельное разделение, косвенно используя <code>ALTER TABLE
... REORGANIZE PARTITION</code>, но эта работа делает копию данных.</p>

<p>Возможно удалить строки из выбранного разделения, используя
<code>TRUNCATE PARTITION</code>. Эта опция берет список разделенных запятой
значений одного или более имен разделов. Рассмотрите таблицу <code>t1</code>:
<pre>
CREATE TABLE t1 (id INT, year_col INT)
       PARTITION BY RANGE (year_col)
                 (PARTITION p0 VALUES LESS THAN (1991),
                  PARTITION p1 VALUES LESS THAN (1995),
                  PARTITION p2 VALUES LESS THAN (1999),
                  PARTITION p3 VALUES LESS THAN (2003),
                  PARTITION p4 VALUES LESS THAN (2007));
</pre>

Чтобы удалить все строки из раздела <code>p0</code>,
Вы можете использовать:
<pre>
ALTER TABLE t1 TRUNCATE PARTITION p0;
</pre>

Это имеет тот же самый эффект, как этот
<a href="#delete"><code>DELETE</code></a>:
<pre>
DELETE FROM t1 WHERE year_col &lt; 1991;
</pre>

Усекая много разделов, разделение не должно быть непрерывным: это
может очень упростить операции на разделенных таблицах, которые иначе
потребовали бы очень сложный <code>WHERE</code> при применении
<a href="#delete"><code>DELETE</code></a>.
Например, этот запрос удаляет все строки из разделов
<code>p1</code> и <code>p3</code>:
<pre>
ALTER TABLE t1 TRUNCATE PARTITION p1, p3;
</pre>

Аналогичный <code>DELETE</code> выглядит так:
<pre>
DELETE FROM t1 WHERE (year_col &gt;= 1991 AND year_col &lt; 1995)
               OR (year_col &gt;= 2003 AND year_col &lt; 2007);
</pre>

Вы можете использовать ключевое слово <code>ALL</code>
вместо списка имен разделов, в этом случае запрос действует на
все разделение в таблице.</p>

<p><code>TRUNCATE PARTITION</code> просто удаляет строки,
это не изменяет определение таблицы или любого ее раздела.</p>
<p>Вы можете проверить, что строки были удалены, проверяя
<code>INFORMATION_SCHEMA.PARTITIONS</code>, используя такой запрос, как этот:
<pre>
SELECT PARTITION_NAME, TABLE_ROWS FROM INFORMATION_SCHEMA.PARTITIONS
       WHERE TABLE_NAME = 't1';
</pre>

<code>COALESCE PARTITION</code> может использоваться с таблицей, которая
разделена <code>HASH</code> или <code>KEY</code>, чтобы сократить количество
разделов <em><code>number</code></em>. Предположите, что Вы составили таблицу
<code>t2</code>:
<pre>
CREATE TABLE t2 (name VARCHAR (30), started DATE)
       PARTITION BY HASH(YEAR(started)) PARTITIONS 6;
</pre>

Вы можете сократить количество разделов <code>t2</code> с 6 до 4:
<pre>
ALTER TABLE t2 COALESCE PARTITION 2;
</pre>

Данные в последних разделах <em><code>number</code></em>
слиты в остающиеся разделы. В этом случае разделы 4 и 5 будут слиты в первые
4 раздела (0, 1, 2 и 3).</p>

<p>Чтобы изменить некоторые, но не все разделы, Вы можете использовать
<code>REORGANIZE PARTITION</code>. Этот запрос может
использоваться несколькими способами:</p>

<ul><li><p>Слить ряд разделов в единственный раздел.
Это может быть сделано, называя несколько разделов в списке
<em><code>partition_names</code></em> и заданием единственного определения
для <em><code>partition_definition</code></em>.</li>

<li>Разделять существующее разделение на несколько.
Вы можете достигнуть этого, называя единственный раздел в
<em><code>partition_names</code></em> и несколько
<em><code>partition_definitions</code></em>.</li>

<li>Изменить диапазоны для подмножества разделения, определенного, используя
<code>VALUES LESS THAN</code> или значение для подмножества разделов,
определенного, используя <code>VALUES IN</code>.</li>

<li>Перемещать раздел от одного табличного пространства до другого. Для
примера см. <a href="innodb.htm#general-tablespaces-moving-partitions">здесь
</a>.</p></li></ul>

<p>Для разделения, которое явно не назвали, MySQL автоматически обеспечивает
имена по умолчанию <code>p0</code>, <code>p1</code>, <code>p2</code> и т.д.
Это верно и относительно подразделов.</p>

<p>Для более подробной информации и примеров
<code>ALTER TABLE ... REORGANIZE PARTITION</code> см.
<a href="partit.htm#partitioning-management-range-list">раздел 20.3.1</a>.
</li>

<li>Возможно обменять табличное разделение или подразделение с таблицей,
используя <a href="#alter-table"><code>ALTER TABLE ... EXCHANGE
PARTITION</code></a>, то есть, чтобы переместить любые существующие строки в
разделение или подразделение к неразделенной таблице, и любые существующие
строки в неразделенной таблице к табличному разделению или подразделению.</p>
<p>См. <a href="partit.htm#partitioning-management-exchange">раздел 20.3.3
</a>.</li>

<li>Несколько дополнительных опций обеспечивают функциональность обслуживания
и ремонта разделения, аналогичную осуществленному для неразделенных таблиц
через <a href="#check-table"><code>CHECK TABLE</code></a> и
<a href="#repair-table"><code>REPAIR TABLE</code></a>
(которые также поддержаны для разделенных таблиц, см.
<a href="#table-maintenance-sql">раздел 14.7.2</a>).
Они включают <code>ANALYZE PARTITION</code>, <code>CHECK PARTITION</code>,
<code>OPTIMIZE PARTITION</code>, <code>REBUILD
PARTITION</code> и <code>REPAIR PARTITION</code>.
Каждая из этих опций берет <em><code>partition_names</code></em>, состоящий
из одного или более названий разделов, отделенных запятыми.
Разделение должно уже существовать в целевой таблице. Вы можете также
использовать <code>ALL</code> вместо <em><code>partition_names</code></em>,
когда запрос действует на все разделение в таблице. Для получения
дополнительной информации и примеров см.
<a href="partit.htm#partitioning-maintenance">раздел 20.3.4</a>.</p>

<p><a href="innodb.htm"><code>InnoDB</code></a>
в настоящее время не поддерживает оптимизацию по разделам,
<code>ALTER TABLE ... OPTIMIZE PARTITION</code>
пересоздает и анализирует всю таблицу (Bug #11751825, Bug #42822).
Чтобы работать вокруг этой проблемы, используйте
<code>ALTER TABLE ... REBUILD PARTITION</code> и
<code>ALTER TABLE ... ANALYZE PARTITION</code>.</p>

<p><code>ANALYZE PARTITION</code>, <code>CHECK PARTITION</code>,
<code>OPTIMIZE PARTITION</code> и <code>REPAIR PARTITION</code>
не поддержаны для таблиц, которые не разделены.</li>

<li><code>REMOVE PARTITIONING</code> позволяет Вам удалить раздел таблицы,
не затрагивая таблицу или ее данные. Эта опция может быть объединена с
другими <a href="#alter-table"><code>ALTER TABLE</code></a>,
например, добавить, удалить или переименовать столбцы или индексы.</li>

<li>Используйте <code>ENGINE</code> с
<a href="#alter-table"><code>ALTER TABLE</code></a>, чтобы сменить
механизм хранения, используемый таблицей, не затрагивая разделение. Целевой
механизм хранения должен обеспечить свой собственный обработчик разделения.
Только <code>InnoDB</code> и <code>NDB</code> имеют родные обработчики
разделения, <code>NDB</code> в настоящее время не поддерживается в MySQL 8.0.
</p></li></ul>

<p><a href="#alter-table"><code>ALTER TABLE</code></a>
может содержать <code>PARTITION BY</code> или
<code>REMOVE PARTITIONING</code> в дополнении к другим изменениям технических
требований, но <code>PARTITION BY</code> или <code>REMOVE PARTITIONING</code>
должен быть определен последний после любых других технических требований.</p>

<p><code>ADD PARTITION</code>, <code>DROP
PARTITION</code>, <code>COALESCE PARTITION</code>,
<code>REORGANIZE PARTITION</code>, <code>ANALYZE
PARTITION</code>, <code>CHECK PARTITION</code> и
<code>REPAIR PARTITION</code> не могут быть объединены с другими изменениями
технических требований в <code>ALTER TABLE</code>. Для получения
дополнительной информации см.
<a href="#alter-table-partition-operations">раздел 14.1.7.1</a>.</p>

<p>Только единственный случай любой из следующих опций может использоваться в
данном <a href="#alter-table"><code>ALTER TABLE</code></a>:
<code>PARTITION BY</code>, <code>ADD PARTITION</code>,
<code>DROP PARTITION</code>, <code>TRUNCATE PARTITION</code>,
<code>EXCHANGE PARTITION</code>, <code>REORGANIZE PARTITION</code> или
<code>COALESCE PARTITION</code>, <code>ANALYZE PARTITION</code>,
<code>CHECK PARTITION</code>, <code>OPTIMIZE PARTITION</code>,
<code>REBUILD PARTITION</code>, <code>REMOVE PARTITIONING</code>.</p>

<p>Например, следующие два запроса недопустимы:
<pre>
ALTER TABLE t1 ANALYZE PARTITION p1, ANALYZE PARTITION p2;
ALTER TABLE t1 ANALYZE PARTITION p1, CHECK PARTITION p2;
</pre>

В первом случае Вы можете проанализировать разделы
<code>p1</code> и <code>p2</code> табьлицы <code>t1</code>
одновременно, используя единственный запрос <code>ANALYZE PARTITION</code>,
который перечисляет оба раздела, что будет проанализировано так:
<pre>
ALTER TABLE t1 ANALYZE PARTITION p1, p2;
</pre>

Во втором случае невозможно сделать
<code>ANALYZE</code> и <code>CHECK</code>
на разных разделах той же самой таблицы одновременно. Вместо этого Вы должны
сделать два отдельных запроса:
<pre>
ALTER TABLE t1 ANALYZE PARTITION p1;
ALTER TABLE t1 CHECK PARTITION p2;
</pre>

<code>REBUILD</code> в настоящее время не поддерживаются для подразделения.
<code>REBUILD</code> явно отвергнуто с подразделением, и
<code>ALTER TABLE</code> выдаст ошибку.</p>

<p><code>CHECK PARTITION</code> и <code>REPAIR PARTITION</code>
терпят неудачу, когда разделение, которое будет проверено или восстановлено,
содержит любые ошибки дубликата ключа.</p>
<p>См. <a href="partit.htm#partitioning-maintenance">раздел 20.3.4</a>.</p>

<h4><a name="alter-table-generated-columns"></a>14.1.7.2.
ALTER TABLE и произведенные столбцы</h4>
<p>Действия <code>ALTER TABLE</code>, разрешенные для произведенных столбцов:
<code>ADD</code>, <code>MODIFY</code> и <code>CHANGE</code>.</p>

<ul><li><p>Могут быть добавлены произведенные столбцы.</li>
<li>Тип данных и выражение произведенных столбцов могут быть изменены.</li>
<li>Произведенные столбцы могут быть переименованы или удалены, если никакой
другой столбец не обращается к ним.</li>

<li>Виртуальные произведенные столбцы не могут быть изменены к сохраненным
произведенным столбцам, или наоборот. Чтобы работать вокруг этого, удалите
столбец, затем добавьте это с новым определением.</li>

<li>Непроизведенные столбцы могут быть изменены к сохраненному, но не
виртуальным произведенным столбцам.</li>
<li>Сохраненные, но не произведенные виртуальные столбцы могут быть изменены
к непроизведенным столбцам. Произведенные сохраненные значения становятся
значениями непроизведенного столбца.</li>

<li><code>ADD COLUMN</code> не оперативная работа для сохраненных столбцов
(обходится без использования временной таблицы), потому что выражение должно
быть оценено сервером. Для сохраненных столбцов индексирующие изменения
сделаны на месте, изменения выражения не сделаны на месте. Изменения
комментариев столбца сделаны на месте.</li>

<li><code>ADD COLUMN</code> и <code>DROP COLUMN</code>
оперативные операции для виртуальных столбцов. Однако, добавление или
удаление виртуального столбца не может быть выполнено в комбинации с другим
<a href="#alter-table"><code>ALTER TABLE</code></a>.</li>

<li><code>InnoDB</code> допускает вторичные индексы
на произведенных виртуальных столбцах. Добавление или удаление вторичного
индекса на произведенном виртуальном столбце это оперативная работа.
Для получения дополнительной информации см.
<a href="#create-table-secondary-indexes-virtual-columns">раздел
14.1.15.6</a>.</li>

<li>Когда произведенный столбец <code>VIRTUAL</code>
добавлен к таблице или изменен, он не обеспечен данными, вычисляемыми
произведенным выражением столбца, неизвестно, не будут ли они вне диапазона
для столбца. Это может привести к непоследовательным возвращаемым данным и
неожиданным сбоям запросов. Чтобы решить, происходит ли проверка допустимости
для таких столбцов, <code>ALTER TABLE</code> поддерживает опции
<code>WITHOUT VALIDATION</code> и <code>WITH VALIDATION</code>:</p>

<ul><li><p>С <code>WITHOUT VALIDATION</code> (значение по умолчанию, если
никакой пункт не определен), оперативная работа выполнена (если возможно),
целостность данных не проверена, и запрос заканчивается более быстро.
Однако, более поздние чтения таблицы могли бы сообщить о предупреждениях или
ошибках для столбца, если значения вне диапазона.</li>

<li>С <code>WITH VALIDATION</code> <code>ALTER TABLE</code>
копирует таблицу. Если ошибка происходят, запрос терпит неудачу. Поскольку
табличная копия выполнена, запрос занимает больше времени.</p></li></ul>

<p><code>WITHOUT VALIDATION</code> и <code>WITH VALIDATION</code>
разрешаются только с <code>ADD COLUMN</code>, <code>CHANGE COLUMN</code> и
<code>MODIFY COLUMN</code>. Иначе происходит ошибка
<a href="error.htm#error_er_wrong_usage"><code>ER_WRONG_USAGE</code></a>.
</li>

<li>Если оценка выражения вызывает усечение или обеспечивает неправильный
ввод функции, <a href="#alter-table"><code>ALTER TABLE</code></a>
заканчивается с ошибкой, и работа DDL отклонена.</li>

<li><a href="#alter-table"><code>ALTER TABLE</code></a>, который
изменяет значение по умолчанию столбца <em><code>col_name</code></em>,
также изменяет значение произведенного выражения столбца, которое обращается
к использованию столбца <em><code>col_name</code></em>, что может изменить
значение произведенного выражения столбца, которое обращается к использованию
столбца <a href="funct.htm#function_default"><code>DEFAULT(<em><code>col_name
</code></em>)</code></a>. Поэтому <a href="#alter-table"><code>ALTER
TABLE</code></a>, который изменяет определение столбца, вызывает пересоздание
таблицы, если какое-либо произведенное выражение столбца использует
<a href="funct.htm#function_default"><code>DEFAULT()</code></a>.
</p></li></ul>

<h4><a name="alter-table-examples"></a>14.1.7.3. Примеры ALTER TABLE</h4>
<p>Начните с таблицы <code>t1</code>. Она создается как показано здесь:
<pre>
CREATE TABLE t1 (a INTEGER,b CHAR(10));
</pre>

Переименуем ее из <code>t1</code> в <code>t2</code>:
<pre>
ALTER TABLE t1 RENAME t2;
</pre>

Изменить столбец <code>a</code> с
<a href="types.htm#integer-types"><code>INTEGER</code></a> на
<code>TINYINT NOT NULL</code> (имя то же самое) и изменить столбец
<code>b</code> с <code>CHAR(10)</code> на <code>CHAR(20)</code> с
переименованием этого с <code>b</code> на <code>c</code>:
<pre>
ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);
</pre>

Добавить новый столбец <a href="types.htm#datetime"><code>TIMESTAMP</code>
</a> <code>d</code>:
<pre>
ALTER TABLE t2 ADD d TIMESTAMP;
</pre>

Добавить индексирование на столбце <code>d</code> и индекс
<code>UNIQUE</code> на <code>a</code>:
<pre>
ALTER TABLE t2 ADD INDEX (d), ADD UNIQUE (a);
</pre>

Удалить столбец <code>c</code>:
<pre>
ALTER TABLE t2 DROP COLUMN c;
</pre>

Добавить новый столбец <code>AUTO_INCREMENT</code> целого числа
<code>c</code>:
<pre>
ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,
      ADD PRIMARY KEY (c);
</pre>

Мы индексировали <code>c</code> (как <code>PRIMARY KEY</code>), потому что
столбцы <code>AUTO_INCREMENT</code> должны быть индексированы, и мы объявляем
<code>c</code> как <code>NOT NULL</code>, потому что столбцы первичного ключа
не могут быть <code>NULL</code>.</p>

<p>Когда Вы добавляете <code>AUTO_INCREMENT</code>, значения столбцов
заполнены порядковыми номерами автоматически. Для таблиц <code>MyISAM</code>
Вы можете установить первый порядковый номер, выполняя
<code>SET INSERT_ID=<em><code>value</code></em></code> до
<a href="#alter-table"><code>ALTER TABLE</code></a> или используя
опцию таблицы <code>AUTO_INCREMENT=<em><code>value</code></em></code>. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p>С <code>MyISAM</code> если Вы не изменяете столбец
<code>AUTO_INCREMENT</code>, порядковый номер не затронут. Если Вы удаляете
<code>AUTO_INCREMENT</code> и затем добавляете другой столбец
<code>AUTO_INCREMENT</code>, числа повторно упорядочены, начиная с 1.</p>

<p>При использовании репликации, добавление столбца
<code>AUTO_INCREMENT</code> к таблице не может произвести то же самое
упорядочивание строк на ведомом устройстве и ведущем устройстве. Это
происходит, потому что порядок, в котором пронумерованы строки, зависит от
определенного механизма хранения, используемого для таблицы и порядка, в
который были вставлены строки. Если важно иметь тот же самый порядок на
ведущее устройство и ведомое устройство, строки должны быть упорядочены
прежде, чем назначить число <code>AUTO_INCREMENT</code>.
Допустим, что Вы хотите добавить <code>AUTO_INCREMENT</code> к таблице
<code>t1</code>, следующие запросы производят новую таблицу
<code>t2</code>, идентичную <code>t1</code>, но со столбцом
<code>AUTO_INCREMENT</code>:
<pre>
CREATE TABLE t2 (id INT AUTO_INCREMENT PRIMARY KEY)
SELECT * FROM t1 ORDER BY col1, col2;
</pre>
Это предполагает, что таблица <code>t1</code> имеет столбцы
<code>col1</code> и <code>col2</code>.</p>

<p>Этот набор запросов также произведет новую таблицу <code>t2</code>,
идентичную <code>t1</code>, с добавлением столбца
<code>AUTO_INCREMENT</code>:
<pre>
CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 ADD id INT AUTO_INCREMENT PRIMARY KEY;
INSERT INTO t2 SELECT * FROM t1 ORDER BY col1, col2;
</pre>

<p>Гарантировать то же самое упорядочивание на ведущем устройстве и на
ведомом устройстве <span><em>всех</em></span> столбцов <code>t1</code> можно,
указанием в <code>ORDER BY</code>.</p>

<p>Независимо от метода, используемого, чтобы создать и заполнить копию,
имеющую столбец <code>AUTO_INCREMENT</code>, заключительный шаг должен
удалить оригинальную таблицу и затем переименовать копию:
<pre>
DROP TABLE t1;
ALTER TABLE t2 RENAME t1;
</pre>

<h3><a name="alter-view"></a>14.1.8. ALTER VIEW</h3>
<pre>
ALTER
[ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
[SQL SECURITY { DEFINER | INVOKER }]
VIEW <em><code>view_name</code></em> [(<em><code>column_list</code></em>)]
AS <em><code>select_statement</code></em>
[WITH [CASCADED | LOCAL] CHECK OPTION]
</pre>

Этот запрос изменяет определение представления, которое должно существовать.
Синтаксис подобен <a href="#create-view"><code>CREATE VIEW</code></a>,
эффект тот же самый, как для <a href="#create-view"><code>CREATE OR
REPLACE VIEW</code></a>. См. <a href="#create-view">раздел 14.1.18</a>.
Это запрос требует привилегий <a href="security.html#priv_create-view"><code>
CREATE VIEW</code></a> и <a href="security.html#priv_drop"><code>DROP</code>
</a> для представления и некоторой привилегии для каждого столбца,
упомянутого в <a href="#select"><code>SELECT</code></a>.
<a href="#alter-view"><code>ALTER VIEW</code></a>
разрешен только определителю или пользователям с привилегией
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<h3><a name="create-database"></a>14.1.9. CREATE DATABASE</h3>
<pre>
CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] <em><code>db_name</code></em>
[<em><code>create_specification</code></em>] ...

<em><code>create_specification</code></em>:
[DEFAULT] CHARACTER SET [=] <em><code>charset_name</code></em>
  | [DEFAULT] COLLATE [=] <em><code>collation_name</code></em>
</pre>

<a href="#create-database"><code>CREATE DATABASE</code></a>
создает базу данных с именем. Чтобы использовать этот запрос, Вы нуждаетесь в
привилегии <a href="security.html#priv_create"><code>CREATE</code></a>
для базы данных. <a href="#create-database"><code>CREATE SCHEMA</code>
</a> это синоним для <a href="#create-database"><code>CREATE DATABASE
</code></a>.</p>

<p>Ошибка происходит, если база данных существует, и Вы не определяли
<code>IF NOT EXISTS</code>.</p>

<p>В MySQL 8.0 <a href="#create-database"><code>CREATE DATABASE</code>
</a> не разрешен в пределах сеанса, у которого есть активный
<a href="#lock-tables"><code>LOCK TABLES</code></a>.</p>

<p><em><code>create_specification</code></em> определяют характеристики базы
данных. Характеристики базы данных сохранены в словаре данных.
<code>CHARACTER SET</code> определяет набор символов базы данных по
умолчанию. <code>COLLATE</code> определяет сопоставление базы данных
по умолчанию. <a href="global.htm#charset">Раздел 11.1</a>
обсуждает имена сопоставления и набора символов.</p>

<p>База данных в MySQL осуществлена как каталог, содержащий файлы, которые
соответствуют таблицам в базе данных. Поскольку нет никаких таблиц в базе
данных, когда это первоначально создается,
<a href="#create-database"><code>CREATE DATABASE</code></a>
создает только каталог в соответствии с каталогом данных MySQL. Правила для
допустимых имен базы данных даны в
<a href="lang.htm#identifiers">разделе 10.2</a>.
Если имя базы данных содержит специальные символы, название каталога базы
данных содержит закодированные версии тех символов как описано в
<a href="lang.htm#identifier-mapping">разделе 10.2.3</a>.</p>

<p>Создание каталога базы данных, вручную создавая каталог в соответствии с
каталогом данных (например, с помощью <span><strong>mkdir</strong></span>)
временно не поддержано в MySQL 8.0.0.</p>

<p>Вы можете также использовать <a href="programs.htm#mysqladmin"><span>
<strong>mysqladmin</strong></span></a>, чтобы создать базы данных. См.
<a href="programs.htm#mysqladmin">раздел 5.5.2</a>.</p>

<h3><a name="create-event"></a>14.1.10. CREATE EVENT</h3>
<pre>
CREATE
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
EVENT
[IF NOT EXISTS]
<em><code>event_name</code></em>
ON SCHEDULE <em><code>schedule</code></em>
[ON COMPLETION [NOT] PRESERVE]
[ENABLE | DISABLE | DISABLE ON SLAVE]
[COMMENT '<em><code>comment</code></em>']
DO <em><code>event_body</code></em>;

<em><code>schedule</code></em>:
AT <em><code>timestamp</code></em> [+ INTERVAL <em><code>interval</code></em>] ...
  | EVERY <em><code>interval</code></em>
[STARTS <em><code>timestamp</code></em> [+ INTERVAL <em><code>interval</code></em>] ...]
[ENDS <em><code>timestamp</code></em> [+ INTERVAL <em><code>interval</code></em>] ...]

<em><code>interval</code></em>:
<em><code>quantity</code></em> {YEAR | QUARTER | MONTH | DAY | HOUR | MINUTE |
  WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE |
  DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND}
</pre>

Этот запрос создает и намечает новое событие. Оно не будет работать, если
Планировщик Событий не будет включен. Для информации о проверке состояния
Планировщика Событий и включении в случае необходимости см.
<a href="stored.htm#events-configuration">раздел 21.4.2</a>.</p>

<p><a href="#create-event"><code>CREATE EVENT</code></a> требует
привилегию <a href="security.html#priv_event"><code>EVENT</code></a>
для схемы, в которой должно быть создано событие. Это могло бы также
потребовать привилегию <a href="security.html#priv_super"><code>SUPER</code>
</a>, в зависимости от значения <code>DEFINER</code>,
как описано позже в этом разделе.</p>

<p>Минимальные требования для допустимого
<a href="#create-event"><code>CREATE EVENT</code></a>:</p>
<ul><li><p>Ключевые слова <a href="#create-event"><code>CREATE EVENT
</code></a> с именем, которое уникально идентифицирует событие
в схеме базы данных.</li>

<li><code>ON SCHEDULE</code>, который определяет, когда и как
часто случай выполняется.</li>
<li><a href="#do"><code>DO</code></a>, который содержит запрос SQL,
который будет выполнен.</p></li></ul>

<p>Это пример минимального <a href="#create-event"><code>CREATE EVENT
</code></a>:
<pre>
CREATE EVENT myevent ON SCHEDULE
       AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
       DO UPDATE myschema.mytable SET mycol = mycol + 1;
</pre>

Предыдущий запрос создает событие <code>myevent</code>.
Это выполняется однажды в один час после его создания, выполняя запрос SQL,
который постепенно увеличивает значение столбца <code>mycol</code>
в таблице <code>myschema.mytable</code> на 1.</p>

<p><em><code>event_name</code></em> должен быть допустимым идентификатором
MySQL с максимальной длиной 64 символа. Имена событий не являются
чувствительными к регистру, таким образом, у Вас не может быть двух событий,
названных <code>myevent</code> и <code>MyEvent</code> в той же самой схеме.
Вообще, правила, управляющие именами событий, являются теми же самыми, как
для названий сохраненных подпрограмм. См.
<a href="lang.htm#identifiers">раздел 10.2</a>.</p>

<p>Событие связано со схемой. Если никакая схема не обозначена как часть
<em><code>event_name</code></em>, значение по умолчанию (текущая схема)
принято. Чтобы создать событие в определенной схеме, квалифицируйте имя
события с использованием имени схемы
<code><em><code>schema_name</code></em>.<em><code>event_name</code></em>
</code>.</p>

<p><code>DEFINER</code> определяет учетную запись MySQL, которая будет
использоваться, проверяя привилегии доступа во время выполнения событий. Если
<em><code>user</code></em> дано, это должна быть учетная запись MySQL,
определенная как <code>'<em><code>user_name</code></em>'@'<em><code>host_name
</code></em>'</code>,
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a> или
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>.
Значение по умолчанию <code>DEFINER</code>: пользователь, который выполняет
<a href="#create-event"><code>CREATE EVENT</code></a>.
Это то же самое, как определение <code>DEFINER = CURRENT_USER</code>.</p>

<p>Если Вы определяете <code>DEFINER</code>,
эти правила определяют допустимые
пользовательские значения <code>DEFINER</code>:</p>

<ul><li><p>Если Вы не имеете привилегии <a href="security.html#priv_super">
<code>SUPER</code></a>, единственное разрешенное значение
<em><code>user</code></em> Ваша собственная учетная запись, определенная
буквально или при использовании <a href="funct.htm#function_current-user">
<code>CURRENT_USER</code></a>. Вы не можете установить определение в
некоторую другую учетную запись.</li>

<li>Если Вы имеете привилегию <a href="security.html#priv_super"><code>SUPER
</code></a>, Вы можете определить любое синтаксически допустимое имя учетной
записи. Если учетная запись не существует, предупреждение произведено.</li>

<li>Хотя возможно создать событие без <code>DEFINER</code>,
ошибка происходит во время выполнения событий, если учетная
запись не существует.</p></li></ul>
<p>См. <a href="stored.htm#stored-programs-security">раздел 21.6</a>.</p>

<p>В пределах события <a href="funct.htm#function_current-user"><code>
CURRENT_USER()</code></a> возвращает учетную запись для проверки
привилегии во время выполнения события, то есть <code>DEFINER</code>. См.
<a href="security.html#account-activity-auditing">раздел 7.3.12</a>.</p>

<p><code>IF NOT EXISTS</code> для
<a href="#create-event"><code>CREATE EVENT</code></a> имеет тот же
смысл, как для <a href="#create-table"><code>CREATE TABLE</code></a>:
если событие уже существует в той же самой схеме, никакие меры не
предприняты и никакой ошибки нет. (днако, предупреждение будет
произведено в таких случаях.</p>

<p><code>ON SCHEDULE</code> определяет когда, как часто, и как долго
<em><code>event_body</code></em> определен для повторений событий.
Этот пункт принимает одну из двух форм:</p>

<ul><li><p><code>AT <em><code>timestamp</code></em></code>
используется для одноразового случая. Это определяет, что событие
выполняется только один раз в дату и время, заданные
<em><code>timestamp</code></em>, что должно включать дату и время или должно
быть выражением, которое решается к значению datetime.
Вы можете использовать значение любого типа
<a href="types.htm#datetime"><code>DATETIME</code></a> или
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> с этой целью. Если
дата в прошлом, происходит предупреждение, как показано здесь:
<pre>
mysql&gt; SELECT NOW();
+---------------------+
| NOW()               |
+---------------------+
| 2006-02-10 23:59:01 |
+---------------------+
1 row in set (0.04 sec)

mysql&gt; CREATE EVENT e_totals
    -&gt;        ON SCHEDULE AT '2006-02-10 23:59:00'
    -&gt;        DO INSERT INTO test.totals VALUES (NOW());
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1588
Message: Event execution time is in the past and ON COMPLETION NOT
         PRESERVE is set. The event was dropped
         immediately after creation.
</pre>
<a href="#create-event"><code>CREATE EVENT</code></a>, которые
являются самостоятельно неправильными, терпят неудачу с ошибкой.</p>

<p>Вы можете использовать <a href="funct.htm#function_current-timestamp">
<code>CURRENT_TIMESTAMP</code></a>, чтобы определить текущую дату и время.
В таком случае событие действует как только создается.</p>

<p>Создать событие, которое происходит в некоторый момент в будущем
относительно текущей даты и времени, скажем,
<span><span>спустя три недели</span></span>, можно, если использовать
дополнительный параметр <code>+ INTERVAL <em><code>interval</code></em>
</code>. <em><code>interval</code></em> состоит из двух частей, количества
и единицы времени, и следует тем же самым правилам синтаксиса, которые
управляют интервалами, используемыми в функции
<a href="funct.htm#function_date-add"><code>DATE_ADD()</code></a> (см.
<a href="funct.htm#date-and-time-functions">раздел 13.7</a>.
Ключевые слова модулей такие же, за исключением того, что Вы не можете
использовать модули, вовлекающие микросекунды, определяя событие. С
некоторыми типами интервала могут использоваться сложные единицы измерения
времени. Например, <span><span>две минуты и десять секунд</span></span>
может быть выражено как <code>+ INTERVAL '2:10' MINUTE_SECOND</code>.</p>

<p>Вы можете также объединить интервалы. Например, <code>AT
CURRENT_TIMESTAMP + INTERVAL 3 WEEK + INTERVAL 2 DAY</code> задает
<span><span>через три недели и два дня</span></span>.
Каждая часть такого пункта должна начинаться с <code>+ INTERVAL</code>.</li>

<li>Чтобы повторить действия в равном интервале, используйте
<code>EVERY</code>. Ключевое слово <code>EVERY</code> сопровождается
<em><code>interval</code></em>, как описано в предыдущем обсуждении
параметра <code>AT</code>. <code>+ INTERVAL</code> <span><em>не</em></span>
используется с <code>EVERY</code>. Например, <code>EVERY 6 WEEK</code> значит
<span><span>каждые шесть недель</span></span>.</p>

<p>Хотя <code>+ INTERVAL</code> не разрешены в <code>EVERY</code>,
Вы можете использовать те же самые сложные единицы измерения времени,
разрешенные в <code>+ INTERVAL</code>.</p>

<p><code>EVERY</code> может содержать дополнительный параметр
<code>STARTS</code>. <code>STARTS</code> сопровождается
<em><code>timestamp</code></em>, которое указывает, когда действие должно
начать повторяться, и может также использовать <code>+ INTERVAL
<em><code>interval</code></em></code>, чтобы определить количество времени
<span><span>с текущего момента</span></span>. Например,
<code>EVERY 3 MONTH STARTS CURRENT_TIMESTAMP + INTERVAL 1 WEEK</code> значит
<span><span>каждые три месяца, начиная через одну неделю с текущего момента
</span></span>. Точно так же Вы можете выразить <span><span>каждые две
недели, начиная через шесть часов и пятнадцать минут с текущего момента
</span></span> как <code>EVERY 2 WEEK STARTS CURRENT_TIMESTAMP + INTERVAL
'6:15' HOUR_MINUTE</code>. Не определение <code>STARTS</code> аналогично
<code>STARTS CURRENT_TIMESTAMP</code>, то есть, действие, определенное для
события, начинает повторяться непосредственно после создания.</p>

<p><code>EVERY</code> может содержать дополнительное ключевое слово
<code>ENDS</code>. <code>ENDS</code> сопровождается
<em><code>timestamp</code></em>, которое говорит MySQL, когда событие должно
прекратить повторяться. Вы можете также использовать <code>+ INTERVAL
<em><code>interval</code></em></code> с <code>ENDS</code>, например,
<code>EVERY 12 HOUR STARTS CURRENT_TIMESTAMP + INTERVAL 30 MINUTE ENDS
CURRENT_TIMESTAMP + INTERVAL 4 WEEK</code> значит
<span><span>каждые двенадцать часов, начиная через тридцать минут с этого
времени, и заканчивая через четыре недели с этого времени</span></span>.
Не использование <code>ENDS</code> значит, что событие
продолжает запускаться неопределенное число раз.</p>

<p><code>ENDS</code> поддерживает тот же самый синтаксис для сложных единиц
измерения времени, как <code>STARTS</code>.</p>
<p>Вы можете использовать <code>STARTS</code>, <code>ENDS</code>, оба
или ни один в <code>EVERY</code>.</p>

<p>Если повторяющееся событие не заканчивается в пределах его интервала
планирования, результат может быть многократными случаями события,
выполняющегося одновременно. Если это нежелательно, Вы должны установить
механизм, чтобы предотвратить одновременные случаи. Например, Вы могли
использовать функцию <a href="funct.htm#function_get-lock"><code>GET_LOCK()
</code></a>, строчную или табличную блокировку.</p></li></ul>

<p><code>ON SCHEDULE</code> может использовать выражения, вовлекающие
встроенные функции MySQL и пользовательские переменные, чтобы получить любое
из значений <em><code>timestamp</code></em> или <em><code>interval</code>
</em>, которые это содержит. Вы не можете использовать сохраненные функции
или определяемые пользователем функции в таких выражениях, и при этом Вы не
можете использовать табличные ссылки, однако, Вы можете использовать
<code>SELECT FROM DUAL</code>. Это верно для
<a href="#create-event"><code>CREATE EVENT</code></a> и
<a href="#alter-event"><code>ALTER EVENT</code></a>.
Ссылки на сохраненные функции, определяемые пользователем функции и таблицы в
таких случаях определенно не разрешены и терпят неудачу с ошибкой (Bug
#22830).</p>

<p>Времена в <code>ON SCHEDULE</code> интерпретируются, используя значение
<a href="server.htm#sysvar_time_zone"><code>time_zone</code></a> текущего
сеанса. Это становится часовым поясом событий, то есть, часовой пояс, который
используется для планирования события, является текущим в пределах
события при выполнении. Эти времена преобразованы в UTC и сохранены наряду с
часовым поясом событий в таблице <code>mysql.event</code>.
Это позволяет выполнению событий продолжиться как определено, независимо от
любых последующих изменений часового пояса сервера или эффектов летнего
времени. Для дополнительной информации о представлении времен событий см.
<a href="stored.htm#events-metadata">раздел 21.4.4</a>. См. также разделы
<a href="#show-events">14.7.5.18</a> и
<a href="inform.htm#events-table">22.7</a>.</p>

<p>Обычно как только событие истекло, оно немедленно удалено.
Вы можете переопределить это поведение, определяя <code>ON COMPLETION
PRESERVE</code>. Использование <code>ON COMPLETION NOT PRESERVE</code>
просто делает поведение по умолчанию явным.</p>

<p>Вы можете создать событие, но препятствовать тому, чтобы это было активно,
использованием ключевого слова <code>DISABLE</code>.
Альтернативно, Вы можете использовать <code>ENABLE</code>, чтобы
сделать явным состояние значения по умолчанию, которое является активным. Это
является самым полезным в соединении с <a href="#alter-event"><code>
ALTER EVENT</code></a> (см. <a href="#alter-event">раздел 14.1.2</a>).
</p>

<p>Третье значение может также появиться вместо
<code>ENABLE</code> или <code>DISABLE</code>:
<code>DISABLE ON SLAVE</code> установлен для состояния события на ведомом
устройстве, чтобы указать, что событие создавалось на ведущем устройстве и
копировалось к ведомому устройству, но не запущено на ведомом устройстве. См.
<a href="replica.htm#replication-features-invoked">раздел 19.4.1.12</a>.</p>

<p>Вы можете поставлять комментарий для события через
<code>COMMENT</code>. <em><code>comment</code></em>
может быть любая строка до 64 символов, которые Вы хотите использовать для
того, чтобы описать случай. Текст комментария, будучи буквальной строкой,
должен быть окружен кавычками.</p>

<p><a href="#do"><code>DO</code></a> определяет действие, которое
выполняет событие, и состоит из запросов SQL. Почти любой допустимый запрос
MySQL, который может использоваться в сохраненной подпрограмме, может также
использоваться в качестве действия для запланированного события, см.
<a href="restr.htm#stored-program-restrictions">раздел C.1</a>.
Например, следующее событие <code>e_hourly</code> удаляет все строки из
таблицы <code>sessions</code> однажды в час, где эта таблица является частью
схемы <code>site_activity</code>:
<pre>
CREATE EVENT e_hourly ON SCHEDULE
       EVERY 1 HOUR COMMENT 'Clears out sessions table each hour.'
       DO DELETE FROM site_activity.sessions;
</pre>

MySQL хранит <a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>,
когда событие создано или изменено, и всегда запускает событие с этой
установкой в силе, <span><em>независимо от текущего режима SQL сервера, когда
событие начинает выполняться</em></span>.</p>

<p><a href="#create-event"><code>CREATE EVENT</code></a>,
который содержит <a href="#alter-event"><code>ALTER EVENT</code></a>
в <a href="#do"><code>DO</code></a>, кажется, преуспевает, однако,
когда сервер пытается запустить получающееся запланированное событие,
выполнение терпит неудачу с ошибкой.</p>

<p>Такие запросы, как <a href="#select"><code>SELECT</code></a> или
<a href="#show"><code>SHOW</code></a>, которые
просто возвращают набор результатов, не имеют никакого эффекта, когда
используются в событии: вывод от них не посылают MySQL Monitor,
и при этом он не сохранен нигде. Однако, Вы можете использовать такие
запросы, как <a href="#select"><code>SELECT ... INTO</code></a> и
<a href="#insert-select"><code>INSERT INTO ... SELECT</code></a>,
которые сохраняют результат. См. следующий пример в этом разделе
для последнего случая.</p>

<p>Схема, которой принадлежит событие, является схемой по умолчанию для
табличных ссылок в <a href="#do"><code>DO</code></a>.
Любые ссылки на таблицы в других схемах должны быть квалифицированы с
надлежащим именем схемы.</p>

<p>Как с сохраненными подпрограммами, Вы можете использовать синтаксис
составного запроса <a href="#do"><code>DO</code></a> с ключевыми
словами <code>BEGIN</code> и <code>END</code>:
<pre>
delimiter |

CREATE EVENT e_daily
ON SCHEDULE
   EVERY 1 DAY
COMMENT 'Saves total number of sessions then clears the table each day'
DO BEGIN
  INSERT INTO site_activity.totals (time, total)
  SELECT CURRENT_TIMESTAMP, COUNT(*) FROM site_activity.sessions;
  DELETE FROM site_activity.sessions;
END |

delimiter ;
</pre>

Этот пример использует команду <code>delimiter</code>, чтобы изменить
разделитель запроса. См. <a href="stored.htm#stored-programs-defining">раздел
21.1</a>.</p>

<p>Более сложные составные запросы, такие как используемые в сохраненных
подпрограммах, возможны в событии. Этот пример использует местные переменные,
обработчик ошибок и конструкцию управления потоками:
<pre>
delimiter |

CREATE EVENT e
ON SCHEDULE
   EVERY 5 SECOND
DO BEGIN
   DECLARE v INTEGER;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
   SET v = 0;
   WHILE v &lt; 5 DO
     INSERT INTO t1 VALUES (0);
     UPDATE t2 SET s1 = s1 + 1;
     SET v = v + 1;
  END WHILE;
END |

delimiter ;
</pre>

Нет никакого способа передать параметры непосредственно к или от событий,
однако, возможно вызвать сохраненную подпрограмму с
параметрами в пределах события:
<pre>
CREATE EVENT e_call_myproc
ON SCHEDULE
   AT CURRENT_TIMESTAMP + INTERVAL 1 DAY
DO CALL myproc(5, 27);
</pre>

Если определитель имеет привилегию <a href="security.html#priv_super"><code>
SUPER</code></a>, событие может читать и писать глобальные переменные.
Поскольку предоставление этой привилегии влечет за собой потенциал для
злоупотребления, экстремальная забота должна быть проявлена при этом.</p>

<p>Вообще, любые запросы , которые допустимы в сохраненных подпрограммах,
могут использоваться для запросов действия, выполненных событиями.
Для получения дополнительной информации о запросах, допустимых в пределах
сохраненных подпрограмм см.
<a href="stored.htm#stored-routines-syntax">раздел 21.2.1</a>.
Вы можете создать событие как часть сохраненной подпрограммы, но событие не
может быть создано другим событием.</p>

<h3><a name="create-function"></a>14.1.11. CREATE FUNCTION</h3>
<p><a href="#create-function"><code>CREATE FUNCTION</code></a>
используется, чтобы создать сохраненные функции и определяемые
пользователем функции (UDF):</p>

<ul><li><p>Для информации о создании сохраненных функций см.
<a href="#create-procedure">раздел 14.1.13</a>.</li>
<li>Для информации о создании определяемых пользователем функций см.
<a href="#create-function-udf">раздел 14.7.3.1</a>.</p></li></ul>

<h3><a name="create-index"></a>14.1.12. CREATE INDEX</h3>
<pre>
CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX <em><code>index_name</code></em>
[<em><code>index_type</code></em>]
ON <em><code>tbl_name</code></em> (<em><code>index_col_name</code></em>,...)
[<em><code>index_option</code></em>]
[<em><code>algorithm_option</code></em> | <em><code>lock_option</code></em>] ...

<em><code>index_col_name</code></em>:
<em><code>col_name</code></em> [(<em><code>length</code></em>)] [ASC | DESC]

<em><code>index_type</code></em>:
USING {BTREE | HASH}

<em><code>index_option</code></em>:
KEY_BLOCK_SIZE [=] <em><code>value</code></em>
  | <em><code>index_type</code></em>
  | WITH PARSER <em><code>parser_name</code></em>
  | COMMENT '<em><code>string</code></em>'
  | {VISIBLE | INVISIBLE}

<em><code>algorithm_option</code></em>:
ALGORITHM [=] {DEFAULT|INPLACE|COPY}

<em><code>lock_option</code></em>:
LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}
</pre>

<a href="#create-index"><code>CREATE INDEX</code></a> отображен на
<a href="#alter-table"><code>ALTER TABLE</code></a>, чтобы создать
индекс. См. <a href="#alter-table">раздел 14.1.7</a>.
<a href="#create-index"><code>CREATE INDEX</code></a>
не может использоваться, чтобы создать <code>PRIMARY KEY</code>, используйте
<a href="#alter-table"><code>ALTER TABLE</code></a>. См.
<a href="optimiz.htm#mysql-indexes">раздел 9.3.1</a>.</p>

<p>Обычно Вы создаете все индексы на таблице в то время, когда таблица
составлена с <a href="#create-table"><code>CREATE TABLE</code></a>.
См. <a href="#create-table">раздел 14.1.15</a>. Это особенно важно для
<a href="innodb.htm"><code>InnoDB</code></a>, где первичный ключ определяет
физическое расположение строк в файле с данными.
<a href="#create-index"><code>CREATE INDEX</code></a>
позволяет добавить индекс к существующим таблицам.</p>

<p>Список столбцов формы <code>(col1,col2,...)</code>
создает многостолбцовый индекс, значения ключа, сформированы, связывая
значения данных столбцов.</p>

<p>Для строковых столбцов может быть создан индекс, который использует только
ведущую часть значений столбцов, используя
<code><em><code>col_name</code></em>(<em><code>length</code></em>)</code>,
чтобы определить длину префикса:</p>

<ul><li><p>Префиксы могут быть определены для столбцов
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#binary-varbinary"><code>BINARY</code></a> и
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>.</li>

<li>Префиксы <span><em>должны</em></span> быть определены для
<a href="types.htm#blob"><code>BLOB</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>.</li>

<li>Пределы префиксов измерены в байтах, тогда как длина префикса в
<a href="#create-table"><code>CREATE TABLE</code></a>,
<a href="#alter-table"><code>ALTER TABLE</code></a> и
<a href="#create-index"><code>CREATE INDEX</code></a>
интерпретируется как число символов для недвоичных строковых типов
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>)
и число байтов для двоичных строковых типов
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a>).
Примите это во внимание, определяя длину префикса для недвоичного строкового
столбца, который использует многобайтовый набор символов.</li>
<li>Для пространственных столбцов префиксы не могут быть даны, как
описано позже в этом разделе.</p></li></ul>

<p>Запрос, показанный здесь, создает индекс с использованием первых 10
символов столбца <code>name</code> (принимая, что
<code>name</code> имеет недвоичной строковый тип):
<pre>
CREATE INDEX part_of_name ON customer (name(10));
</pre>

Если имена в столбце обычно отличаются по первым 10 символам, это не должно
быть намного медленнее, чем индекс, создаваемый из всего
<code>name</code>. Кроме того, использование приставок столбца для индекса
может сделать индексный файл намного меньшим, что может сохранить много
дискового пространства и может также убыстрить
<a href="#insert"><code>INSERT</code></a>.</p>

<p>Поддержка префиксов и длины (где поддержано) зависят от
механизма хранения. Например, приставка может составить до 767
байтов для <a href="innodb.htm"><code>InnoDB</code></a>, которые используют
формат строки <code><a href="glossary.htm#glos_redundant_row_format">
REDUNDANT</a></code> или <code><a href="glossary.htm#glos_compact_row_format">
COMPACT</a></code>. Предел длины поднят до 3072 байтов для таблиц
<code>InnoDB</code>, которые используют формат строки
<code><a href="glossary.htm#glos_dynamic_row_format">DYNAMIC</a></code> или
<code><a href="glossary.htm#glos_compressed_row_format">COMPRESSED</a>
</code>. Для <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code>
</a> предел префикса составляет 1000 байтов.</p>

<p>Индекс <code>UNIQUE</code> создает ограничение, таким образом, что все
значения в индексе должны быть отличными. Ошибка происходит, если Вы
пытаетесь добавить новую строку со значением ключа, которое соответствует
существующей строке. Для всех механизмов <code>UNIQUE</code>
допускает многократные <code>NULL</code> для столбцов, которые могут
содержать <code>NULL</code>. Если Вы определяете префикс столбца в
<code>UNIQUE</code>, значения столбцов должны быть
уникальными в пределах префикса.</p>

<p><code>FULLTEXT</code> поддержаны только для
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
и могут включать только столбцы
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>.
Индексация всегда происходит по всему столбцу. Префиксы столбца не
поддержаны, любая длина префикса проигнорирована, если определена. См.
<a href="funct.htm#fulltext-search">раздел 13.9</a>.</p>

<p><a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>,
<a href="innodb.htm"><code>InnoDB</code></a>,
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a> и
<a href="storage.htm#archive-storage-engine"><code>ARCHIVE</code></a>
поддерживают пространственные столбцы, например,
<a href="types.htm#spatial-datatypes"><code>POINT</code></a> и
<a href="types.htm#spatial-datatypes"><code>GEOMETRY</code></a>.
См. <a href="types.htm#spatial-extensions">раздел 12.5</a>.
Однако, поддержка пространственной индексации столбца изменяется среди
механизмов. Пространственный и непространственный индексы доступны,
согласно следующим правилам.</p>

<p>Пространственный индекс (создаваемый использованием
<code>SPATIAL INDEX</code>) имееет эти характеристики:</p>
<ul><li><p>Доступный только для <a href="innodb.htm"><code>InnoDB</code></a>
и <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.
Определение <code>SPATIAL INDEX</code> для другого механизма
хранения приводит к ошибке.</li>

<li>Индексированные столбцы должны быть <code>NOT NULL</code>.</li>
<li>Длины префикса столбца запрещены. Полная ширина
каждого столбца индексирована.</p></li></ul>

<p>Характеристики непространственных индексов (создаваемых с
<code>INDEX</code>, <code>UNIQUE</code> или <code>PRIMARY KEY</code>):</p>
<ul><li><p>Разрешены для любого механизма хранения, который поддерживает
пространственные столбцы, кроме <a href="storage.htm#archive-storage-engine">
<code>ARCHIVE</code></a>.</li>

<li>Столбцы могут быть <code>NULL</code>, если индексирование
не является первичным ключом.</li>
<li>Для каждого пространственного столбца в не-<code>SPATIAL</code> индексе,
кроме столбцов <a href="types.htm#spatial-datatypes"><code>POINT</code></a>,
длина префикса столбца должна быть определена. Это же самое требование
касается индексирования столбцов <a href="types.htm#blob"><code>BLOB</code>
</a>. Длина префикса дана в байтах.</li>

<li>Индексный тип для не-<code>SPATIAL</code> индекса
зависит от механизма хранения. В настоящее время используется B-tree.</li>
<li>Вы можете добавить индексирование на столбце, который может иметь
<code>NULL</code>, только для <a href="innodb.htm"><code>InnoDB</code></a>,
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a> и
<a href="storage.htm#memory-storage-engine"><code>MEMORY</code></a>.</li>

<li>Вы можете добавить индексирование на
<a href="types.htm#blob"><code>BLOB</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>
только для <a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>.</li>

<li>Когда включен <a href="innodb.htm#sysvar_innodb_stats_persistent"><code>
innodb_stats_persistent</code></a>, выполняется
<a href="#analyze-table"><code>ANALYZE TABLE</code></a> для таблицы
<a href="innodb.htm"><code>InnoDB</code></a>
после создания индекса на этой таблице.</p></li></ul>

<p><a href="innodb.htm"><code>InnoDB</code></a> допускает вторичные индексы
на виртуальных столбцах. Для получения дополнительной информации см.
<a href="#create-table-secondary-indexes-virtual-columns">раздел
14.1.15.6</a>.</p>

<p><em><code>index_col_name</code></em> может закончиться
<code>ASC</code> или <code>DESC</code>. Эти ключевые слова разрешены для
будущих расширений для того, чтобы определить, что возрастание или убывание
индекса хранится. В настоящее время они разобраны, но проигнорированы,
индексные значения всегда сохранены в порядке возрастания.</p>

<p>После списка столбцов индекса могут быть даны опции.
Значение <em><code>index_option</code></em> может быть любым следующим:</p>
<ul><li><p><code>KEY_BLOCK_SIZE [=] <em><code>value</code></em></code></p>

<p>Для <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
<code>KEY_BLOCK_SIZE</code> произвольно определяет размер в байтах, чтобы
использовать для ключевых блоков индекса.
Значение обработано как подсказка, иной размер может использоваться в случае
необходимости. <code>KEY_BLOCK_SIZE</code>, определенное для индивидуального
определения индекса, переопределяет <code>KEY_BLOCK_SIZE</code>
на уровне таблицы.</p>

<p><code>KEY_BLOCK_SIZE</code> не поддержан на уровне индексов для таблиц
<a href="innodb.htm"><code>InnoDB</code></a>. См.
<a href="#create-table">раздел 14.1.15</a>.</li>

<li><em><code>index_type</code></em></p>
<p>Некоторые механизмы хранения разрешают Вам определять тип индекса,
создавая индекс. <a href="#create-index-storage-engine-index-types">
Таблица 14.1</a> показывает допустимые значения типа, поддержанные различными
механизмами хранения. Где указано несколько типов, первый это значение по
умолчанию, когда не дан спецификатор типа. Механизмы хранения, не
перечисленные в таблице, не поддерживают <em><code>index_type</code></em>.
</p>

<a name="create-index-storage-engine-index-types"></a><p><b>
Таблица 14.1. Типы индексов в механизмах хранения</b></p>
<table border="1">
<thead><tr><th scope="col">Механизм хранения</th>
<th scope="col">Допустимые типы</th></tr></thead>
<tbody><tr><td scope="row"><a href="innodb.htm"><code>InnoDB</code></a></td>
<td><code>BTREE</code></td></tr>
<tr><td scope="row"><a href="storage.htm#myisam-storage-engine"><code>MyISAM
</code></a></td><td><code>BTREE</code></td></tr>
<tr><td scope="row"><a href="storage.htm#memory-storage-engine"><code>MEMORY
</code></a>/<code>HEAP</code></td><td><code>HASH</code>, <code>BTREE</code>
</td></tr>
<tr><td scope="row"><a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a></td><td><code>HASH</code>,
<code>BTREE</code></td></tr></tbody></table>

<p>Пример:
<pre>
CREATE TABLE lookup (id INT) ENGINE = MEMORY;
CREATE INDEX id_index ON lookup (id) USING BTREE;
</pre>
<em><code>index_type</code></em> не может использоваться для
<code>FULLTEXT INDEX</code> или <code>SPATIAL INDEX</code>.</p>

<p>Если Вы определяете тип индекса, который не допустим для данного механизма
хранения, но доступен другой тип, который механизм может использовать, не
затрагивая результаты запроса, механизм использует доступный тип. Анализатор
признает <code>RTREE</code> как имя типа, но в настоящее время это не может
быть определено ни для какого механизма хранения.</p>

<p>Использование опции <em><code>index_type</code></em> перед
<code>ON <em><code>tbl_name</code></em></code> устарело,
поддержка использования опции в этой позиции будет удалена в будущем выпуске
MySQL. Если <em><code>index_type</code></em> дана в ранней и в более поздней
позиции, заключительная опция применяется.</p>

<p><code>TYPE <em><code>type_name</code></em></code>
синоним для <code>USING <em><code>type_name</code></em></code>.
Но <code>USING</code> привилегированная форма.</p>

<p>Для механизмов хранения, которые поддерживают
<em><code>index_type</code></em>,
<a href="#create-index-storage-engine-index-characteristics">
таблица 14.2</a> показывает некоторые характеристики индексов.</p>

<a name="create-index-storage-engine-index-characteristics"></a><p><b>
Таблица 14.2. Характеристики индексов</b></p>
<table border="1">
<thead><tr><th scope="col">Механизм хранения</th><th scope="col">
Индексный тип</th><th scope="col">Класс индекса</th><th scope="col">Хранит
NULL?</th><th scope="col">Разрешены многократные NULL?</th>
<th scope="col">Тип просмотра IS NULL</th>
<th scope="col">Тип просмотра IS NOT NULL</th></tr></thead>

<tbody><tr><td scope="row" rowspan="5" valign="top"><code>InnoDB</code></td>
<td rowspan="3" valign="top"><code>BTREE</code></td><td>Primary key</td>
<td>Нет</td><td>Нет</td><td>Нет данных</td><td>Нет данных</td></tr>
<tr><td scope="row">Unique</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Key</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Неприменимо</td><td><code>FULLTEXT</code></td>
<td>Да</td><td>Да</td><td>Table</td><td>Table</td></tr>
<tr><td scope="row">Неприменимо</td><td><code>SPATIAL</code></td>
<td>Нет</td><td>Нет</td><td>Нет данных</td><td>Нет данных</td></tr>
<tr><td scope="row" rowspan="5" valign="top"><code>MyISAM</code></td>
<td rowspan="3" valign="top"><code>BTREE</code></td><td>Primary key</td>
<td>Нет</td><td>Нет</td><td>Нет данных</td><td>Нет данных</td></tr>
<tr><td scope="row">Unique</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Key</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Неприменимо</td><td><code>FULLTEXT</code></td><td>Да</td>
<td>Да</td><td>Table</td><td>Table</td></tr>
<tr><td scope="row">Неприменимо</td><td><code>SPATIAL</code></td><td>Нет</td>
<td>Нет</td><td>Нет данных</td><td>Нет данных</td></tr>
<tr><td scope="row" rowspan="6" valign="top"><code>MEMORY</code></td>
<td rowspan="3" valign="top"><code>HASH</code></td><td>Primary key</td>
<td>Нет</td><td>Нет</td><td>Нет данных</td><td>Нет данных</td></tr>
<tr><td scope="row">Unique</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Key</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row" rowspan="3" valign="top"><code>BTREE</code></td>
<td>Primary</td><td>Нет</td><td>Нет</td><td>Нет данных</td>
<td>Нет данных</td></tr>
<tr><td scope="row">Unique</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr>
<tr><td scope="row">Key</td><td>Да</td><td>Да</td><td>Index</td>
<td>Index</td></tr></tbody></table></li>

<li><code>WITH PARSER <em><code>parser_name</code></em></code></p>
<p>Эта опция может использоваться только с <code>FULLTEXT</code>.
Это связывает плагин анализатора с индексированием, если полнотекстовая
индексация и поиск операций нуждаются в специальной обработке.
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
поддерживают полнотекстовые плагины анализатора. См.
<a href="extend.htm#writing-full-text-plugins">раздел 26.2.4.4</a>.</li>

<li><code>COMMENT '<em><code>string</code></em>'</code></p>
<p>Индексное определение может включать дополнительный
комментарий до 1024 символов.</p>

<p><a href="innodb.htm#index-page-merge-threshold"><code>MERGE_THRESHOLD
</code></a> указывает, как индексные страницы могут быть сконфигурированы для
индивидуального индекса использованием
<em><code>index_option</code></em> и <code>COMMENT</code> в
<a href="#create-index"><code>CREATE INDEX</code></a>:
<pre>
CREATE TABLE t1 (id INT);
CREATE INDEX id_index ON t1 (id) COMMENT 'MERGE_THRESHOLD=40';
</pre>

Если процент заполнения для индексной страницы падает ниже
<code>MERGE_THRESHOLD</code>, когда строка удалена или когда строка сокращена
работой обновления, <a href="innodb.htm"><code>InnoDB</code></a>
пытается слить индексную страницу с соседней индексной страницей. Значение по
умолчанию <code>MERGE_THRESHOLD</code> 50.</p>

<p><code>MERGE_THRESHOLD</code> может также быть определен на уровне индекса
и таблицы через <a href="#create-table"><code>CREATE TABLE</code></a>
и <a href="#alter-table"><code>ALTER TABLE</code></a>, см.
<a href="innodb.htm#index-page-merge-threshold">раздел 16.6.11</a>.</li>

<li><code>VISIBLE</code>, <code>INVISIBLE</code></p>
<p>Изменяет невидимость, индексы видимы по умолчанию.
Невидимый индекс не используется оптимизатором. Модификация невидимости
индекса относится к первичным ключам (явным или неявным). С MySQL 8.0.1
эта особенность нейтральна для механизма хранения (поддержана для любого
механизма). В MySQL 8.0.0 это применяется только к <code>InnoDB</code>, см.
<a href="optimiz.htm#invisible-indexes">раздел 9.3.10</a>.</p></li></ul>

<p><code>ALGORITHM</code> и <code>LOCK</code> могут быть даны, чтобы влиять
на табличный метод копирования и уровень параллелизма для чтения и записи
таблицы в то время, как индексы изменяются. У них есть то же самое значение,
что в <a href="#alter-table"><code>ALTER TABLE</code></a>. См.
<a href="#alter-table">раздел 14.1.7</a></p>

<h3><a name="create-procedure"></a>14.1.13. CREATE PROCEDURE и
CREATE FUNCTION</h3>
<pre>
CREATE
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
PROCEDURE <em><code>sp_name</code></em> ([<em><code>proc_parameter</code></em>[,...]])
[<em><code>characteristic</code></em> ...] <em><code>routine_body</code></em>

CREATE
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
FUNCTION <em><code>sp_name</code></em> ([<em><code>func_parameter</code></em>[,...]])
RETURNS <em><code>type</code></em>
[<em><code>characteristic</code></em> ...] <em><code>routine_body</code></em>

<em><code>proc_parameter</code></em>:
[ IN | OUT | INOUT ] <em><code>param_name</code></em> <em><code>type</code></em>

<em><code>func_parameter</code></em>:
<em><code>param_name</code></em> <em><code>type</code></em>

<em><code>type</code></em>:
<em><code>Any valid MySQL data type</code></em>

<em><code>characteristic</code></em>:
COMMENT '<em><code>string</code></em>'
  | LANGUAGE SQL
  | [NOT] DETERMINISTIC
  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
  | SQL SECURITY { DEFINER | INVOKER }

<em><code>routine_body</code></em>:
<em><code>Valid SQL routine statement</code></em>
</pre>

Эти запросы создают сохраненные подпрограммы. По умолчанию подпрограмма
связана с базой данных значения по умолчанию. Чтобы связать подпрограмму явно
с данной базой данных, определите имя как
<em><code>db_name.sp_name</code></em>, когда Вы создаете это.</p>

<p><a href="#create-function"><code>CREATE FUNCTION</code></a>
также используется в MySQL, чтобы поддержать UDF (определяемые пользователем
функции). См. <a href="extend.htm#adding-functions">раздел 26.4</a>.
UDF может быть расценен как внешняя сохраненная функция. Сохраненные функции
совместно используют свое пространство имен с UDF. См.
<a href="lang.htm#function-resolution">раздел 10.2.4</a>.</p>

<p>Чтобы вызвать хранимую процедуру, используйте
<a href="#call"><code>CALL</code></a> (см.
<a href="#call">раздел 14.2.1</a>).
Чтобы вызвать сохраненную функцию, обратитесь к ней в выражении.
Функция возвращает значение во время оценки выражения.</p>

<p><a href="#create-procedure"><code>CREATE PROCEDURE</code></a> и
<a href="#create-function"><code>CREATE FUNCTION</code></a> требуют
привилегию <a href="security.html#priv_create-routine"><code>CREATE ROUTINE
</code></a>. Они могли бы также потребовать привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>, в зависимости от
значения <code>DEFINER</code>, как описано позже в этом разделе. Если
двоичное журналирование включено, <a href="#create-function"><code>
CREATE FUNCTION</code></a> может потребовать привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>, см.
<a href="stored.htm#stored-programs-logging">раздел 21.7</a>.</p>

<p>По умолчанию MySQL автоматически предоставляет привилегии
<a href="security.html#priv_alter-routine"><code>ALTER ROUTINE</code></a> и
<a href="security.html#priv_execute"><code>EXECUTE</code></a>
создателю подпрограммы. Это поведение может быть изменено, отключая
<a href="server.htm#sysvar_automatic_sp_privileges"><code>
automatic_sp_privileges</code></a>. См.
<a href="stored.htm#stored-routines-privileges">раздел 21.2.2</a>.</p>

<p><code>DEFINER</code> и <code>SQL SECURITY</code>
определяют контекст безопасности, который будет использоваться, проверяя
привилегии доступа в обычное время выполнения, как описано
позже в этом разделе.</p>

<p>Если имя подпрограммы совпадает с названием встроенной функции SQL,
синтаксическая ошибка происходит, если Вы не используете пробел между именем
и следующей круглой скобкой, определяя подпрограмму или вызывая это позже.
Поэтому избегайте использования названий существующих функций SQL для Ваших
собственных сохраненных подпрограмм.</p>

<p>Режим SQL <a href="server.htm#sqlmode_ignore_space"><code>IGNORE_SPACE
</code></a> относится к встроенным функциям, но не к сохраненным
подпрограммам. Всегда допустимо иметь пробелы после имени сохраненной
подпрограммы, независимо от <a href="server.htm#sqlmode_ignore_space"><code>
IGNORE_SPACE</code></a> значения.</p>

<p>Список параметров в пределах круглых скобок должен всегда присутствовать.
Если нет никаких параметров, пустой список параметров <code>()</code>
применен. Названия параметра не являются чувствительными к регистру.</p>

<p>Каждый параметр <code>IN</code> это параметр по умолчанию. Чтобы
определить иное для параметра, используйте ключевое слово
<code>OUT</code> или <code>INOUT</code> перед названием параметра.</p>

<p>Определение параметра как <code>IN</code>,
<code>OUT</code> или <code>INOUT</code> допустимо только для
<code>PROCEDURE</code>. Для <code>FUNCTION</code>
параметры всегда расцениваются как <code>IN</code>.</p>

<p><code>IN</code> передает значение в процедуру. Процедура могла бы изменить
значение, но модификация не видна вызывающему, когда процедура возвращается.
<code>OUT</code> передает значение из процедуры назад. Его начальное значение
<code>NULL</code> в пределах процедуры, и значение видимо вызывающему, когда
процедура возвращается. <code>INOUT</code> инициализирован вызывающим, может
быть изменен процедурой, и любое изменение, произведенное процедурой, видимо
вызывающему, когда процедура возвращается.</p>

<p>Для каждого <code>OUT</code> или <code>INOUT</code>
передайте определяемую пользователем переменную в
<a href="#call"><code>CALL</code></a>, которое вызывает процедуру так,
чтобы Вы могли получить ее значение, когда процедура возвращается. Если Вы
вызываете процедуру изнутри другой хранимой процедуры или функции, Вы можете
также передать параметр или местную переменную как
<code>IN</code> или <code>INOUT</code>.</p>

<p>На параметры нельзя сослаться в запросах, подготовленных в пределах
подпрограммы, см. <a href="restr.htm#stored-program-restrictions">раздел C.1
</a>.</p>

<p>Следующий пример показывает простую хранимую процедуру,
которая использует <code>OUT</code>:
<pre>
mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE simpleproc (OUT param1 INT)
    -&gt; BEGIN
    -&gt;   SELECT COUNT(*) INTO param1 FROM t;
    -&gt; END//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; delimiter ;

mysql&gt; CALL simpleproc(@a);
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @a;
+----+
| @a |
+----+
| 3  |
+----+
1 row in set (0.00 sec)
</pre>

Пример использует команду <code>delimiter</code>, чтобы изменить разделитель
запросов с <code>;</code> на <code>//</code> в то время, как процедура
определяется. Это позволяет разделитель <code>;</code>, используемый в теле
процедуры, который пройдет к серверу вместо того, чтобы интерпретироваться
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>. См.
<a href="stored.htm#stored-programs-defining">раздел 21.1</a>.</p>

<p><code>RETURNS</code> может быть определен только для
<code>FUNCTION</code>, для которой это принудительно. Это указывает на тип
возврата функции, и функциональное тело должно содержать команду
<code>RETURN <em><code>value</code></em></code>. Если
<a href="#return"><code>RETURN</code></a> возвращает значение
иного типа, значение приведено к надлежащему типу. Например, если функция
определяет <a href="types.htm#enum"><code>ENUM</code></a> или
<a href="types.htm#set"><code>SET</code></a> в <code>RETURNS</code>, но
<a href="#return"><code>RETURN</code></a>
возвращает целое число, значение, возвращенное из функции, является строкой
для передачи члена <a href="types.htm#enum"><code>ENUM</code></a> или
<a href="types.htm#set"><code>SET</code></a>.</p>

<p>Следующая функция в качестве примера берет параметр, выполняет работу,
используя функцию SQL, и возвращает результат. В этом случае не нужно
использовать <code>delimiter</code>, потому что функциональное определение
не содержит внутренний <code>;</code>:
<pre>
mysql&gt; CREATE FUNCTION hello (s CHAR(20))
mysql&gt; RETURNS CHAR(50) DETERMINISTIC
    -&gt; RETURN CONCAT('Hello, ',s,'!');
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT hello('world');
+----------------+
| hello('world') |
+----------------+
| Hello, world!  |
+----------------+
1 row in set (0.00 sec)
</pre>

Типы параметра и функциональные типы возвращения используют любой допустимый
тип данных. <code>COLLATE</code> может использоваться, если предшествующий
признак <code>CHARACTER SET</code>.</p>

<p><em><code>routine_body</code></em> состоит из допустимых запросов SQL.
Это может быть простым запросом, например,
<a href="#select"><code>SELECT</code></a> или
<a href="#insert"><code>INSERT</code></a>,
или составным запросом с <code>BEGIN</code> и <code>END</code>.
Составные запросы могут содержать декларации, циклы и другие проверки
утверждения структуры. Синтаксис для этих запросов описан в
<a href="#sql-syntax-compound-statements">разделе 14.6</a>.</p>

<p>MySQL разрешает подпрограммам содержать запросы DDL, такие как
<code>CREATE</code> и <code>DROP</code>. MySQL также разрешает хранимым
процедурам (но не сохраненным функциям) содержать операционные запросы SQL,
такие как <a href="#commit"><code>COMMIT</code></a>.
Сохраненные функции, возможно, не содержат запросы, которые явно или неявно
закрывают транзакцию. Поддержка этих запросов не требуется стандартом SQL,
который заявляет, что каждый поставщик системы управления базами данных может
решить, разрешить ли их.</p>

<p>Запросы, которые возвращают набор результатов, могут использоваться в
пределах хранимой процедуры, но не в пределах сохраненной функции. Этот
запрет включает <a href="#select"><code>SELECT</code></a>, которые не
имеют <code>INTO <em><code>var_list</code></em></code>, и другие запросы,
например, <a href="#show"><code>SHOW</code></a>,
<a href="#explain"><code>EXPLAIN</code></a> и
<a href="#check-table"><code>CHECK TABLE</code></a>.
Для запросов, которые могут возвратить набор результатов, происходит ошибка
<code>Not allowed to return a result set from a function</code>
(<a href="error.htm#error_er_sp_no_retset"><code>ER_SP_NO_RETSET</code></a>).
Для запросов, которые могут во времени выполнения возвратить набор
результатов, происходит ошибка <code>PROCEDURE %s can't return a result set
in the given context</code> (<a href="error.htm#error_er_sp_badselect"><code>
ER_SP_BADSELECT</code></a>).</p>

<p><a href="#use"><code>USE</code></a> в пределах сохраненных
подпрограмм не разрешены. Когда подпрограмма вызвана, неявный
<code>USE <em><code>db_name</code></em></code> выполнен (и отменен, когда
подпрограмма заканчивается). Это сделано, чтобы иметь базу данных по
умолчанию, в то время как подпрограмма выполняется. Ссылки на объекты в базах
данных кроме базы данных значения по умолчанию должны быть квалифицированы с
соответствующим именем базы данных.</p>

<p>MySQL хранит <a href="server.htm#sysvar_sql_mode"><code>sql_mode</code>
</a>, установленную, когда подпрограмма создана или изменена, и всегда
выполняет подпрограмму с этой установкой,
<span><em>независимо от текущего режима SQL сервера, когда
подпрограмма начинает выполняться</em></span>.</p>

<p>Переключение режима SQL происходит после оценки параметров и назначения
получающихся значений параметрам. Если Вы определяете подпрограмму в строгом
режиме SQL, но вызываете в нестрогом режиме, назначение параметров обычным
параметрам не имеет места в строгом режиме.
Если Вы требуете, чтобы выражения, которые передают подпрограмме, были
назначены в строгом режиме SQL, Вы должны вызвать подпрограмму
со строгим режимом.</p>

<p><code>COMMENT</code> расширение MySQL, и может использоваться, чтобы
описать сохраненную подпрограмму. Эта информация выведена на экран
<a href="#show-create-procedure"><code>SHOW CREATE PROCEDURE</code>
</a> и <a href="#show-create-function"><code>SHOW CREATE FUNCTION
</code></a>.</p>

<p><code>LANGUAGE</code>указывает на язык, на котором написана подпрограмма.
Сервер игнорирует эту характеристику, только подпрограммы SQL поддержаны.</p>
<p>Подпрограмму считают <span><span>deterministic</span></span>, если это
всегда приводит к тому же самому результату для тех же самых входных
параметров, и <span><span>not deterministic</span></span> иначе.
Если ни один из параметров <code>DETERMINISTIC</code> или <code>NOT
DETERMINISTIC</code> не задн в определении, значение по умолчанию
<code>NOT DETERMINISTIC</code>. Чтобы объявить, что функция детерминирована,
Вы должны определить <code>DETERMINISTIC</code> явно.</p>

<p>Оценка природы подпрограммы основана на
<span><span>honesty</span></span> создателя: MySQL не проверяет, что
подпрограмма, объявленная <code>DETERMINISTIC</code>, свободна от запросов,
которые приводят к недетерминированным результатам. Однако,
<code>DETERMINISTIC</code> подпрограмма могла бы затронуть результаты.
Объявление недетерминированной подпрограммы как <code>NONDETERMINISTIC</code>
может привести к неожиданным результатам, заставляя оптимизатор сделать
неправильный выбор плана выполнения. Объявление детерминированной
подпрограммы как <code>NONDETERMINISTIC</code> могло бы уменьшить работу,
заставляя доступную оптимизацию не использоваться.</p>

<p>Если двоичное журналирование включено, <code>DETERMINISTIC</code>
влияет на обработку определений подпрограмм MySQL. См.
<a href="stored.htm#stored-programs-logging">раздел 21.7</a>.</p>

<p>Подпрограмма, которая содержит <a href="funct.htm#function_now"><code>
NOW()</code></a> (возможно, синонимы) или
<a href="funct.htm#function_rand"><code>RAND()</code></a>
недетерминирована, но это может быть безопасно для репликации. Для
<a href="funct.htm#function_now"><code>NOW()</code></a>
двоичной журнал включает timestamp и копирует правильно.
<a href="funct.htm#function_rand"><code>RAND()</code></a>
также копирует правильно, пока вызывается только единственный раз
во время выполнения подпрограммы. Вы можете рассмотреть timestamp
и случайное число как неявные вводы, которые идентичны на
ведущем и ведомом устройствах.</p>

<p>Несколько характеристик предоставляют информацию о природе использования
данных подпрограммой. В MySQL эти характеристики только консультация. Сервер
не использует их, чтобы ограничить, какие виды запросов
подпрограмме разрешат выполнить.</p>

<ul><li><p><code>CONTAINS SQL</code> указывает, что подпрограмма не содержит
запросы, которые читают или пишут данные. Это значение по умолчанию, если ни
одна из этих характеристик не дана явно. Примеры таких запросов
<code>SET @x = 1</code> или <code>DO RELEASE_LOCK('abc')</code>,
которые выполняются, но данные не читают и не пишут.</li>

<li><code>NO SQL</code> указывает, что подпрограмма не содержит запросов SQL.
</li>
<li><code>READS SQL DATA</code> указывает, что подпрограмма содержит запросы,
которые читают данные (например, <a href="#select"><code>SELECT</code>
</a>), но не запросы, которые пишут данные.</li>

<li><code>MODIFIES SQL DATA</code> указывает, что подпрограмма содержит
запросы, которые могут писать данные (например,
<a href="#insert"><code>INSERT</code></a> или
<a href="#delete"><code>DELETE</code></a>).</p></li></ul>

<p><code>SQL SECURITY</code> может быть <code>DEFINER</code> или
<code>INVOKER</code>, чтобы определить контекст безопасности, то есть,
выполняет ли подпрограмма использование привилегий учетной записи, названной
в подпрограмме <code>DEFINER</code> или пользователя, который вызывает.
У этой учетной записи должно быть разрешение получить доступ к базе данных, с
которой связана подпрограмма. Значение по умолчанию <code>DEFINER</code>.
Пользователь, который вызывает подпрограмму, должен иметь привилегию
<a href="security.html#priv_execute"><code>EXECUTE</code></a> для этого.</p>

<p><code>DEFINER</code> определяет учетную запись MySQL, которая будет
использоваться, проверяя привилегии доступа во время выполнения для
подпрограмм, которые имеют <code>SQL SECURITY DEFINER</code>.</p>

<p>Если значение <em><code>user</code></em> дано для <code>DEFINER</code>,
это должна быть учетная запись MySQL, определенная как
<code>'<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'
</code>, <a href="funct.htm#function_current-user"><code>CURRENT_USER</code>
</a> или <a href="funct.htm#function_current-user"><code>CURRENT_USER()
</code></a>. По умолчанию <code>DEFINER</code> это пользователь, который
выполняет <a href="#create-procedure"><code>CREATE PROCEDURE</code>
</a> или <a href="#create-function"><code>CREATE FUNCTION</code></a>.
Это то же самое, как определение <code>DEFINER = CURRENT_USER</code> явно.
</p>

<p>Если Вы определяете <code>DEFINER</code>, эти правила определяют
допустимые пользовательские значения <code>DEFINER</code>:</p>
<ul><li><p>Если Вы не имеете привилегии <a href="security.html#priv_super">
<code>SUPER</code></a>, единственное разрешенное значение
<em><code>user</code></em> Ваша собственная учетная запись, определенная
буквально или при использовании <a href="funct.htm#function_current-user">
<code>CURRENT_USER</code></a>. Вы не можете установить definer в некоторую
другую учетную запись.</li>

<li>Если Вы имеете привилегию <a href="security.html#priv_super"><code>SUPER
</code></a>, Вы можете определить любое синтаксически допустимое имя учетной
записи. Если учетная запись не существует, предупреждение произведено.</li>

<li>Хотя возможно создать подпрограмму с несуществующим <code>DEFINER</code>,
ошибка происходит во время выполнения, если <code>SQL SECURITY</code> =
<code>DEFINER</code>, но учетная запись не существует.</p></li></ul>
<p>См. <a href="stored.htm#stored-programs-security">раздел 21.6</a>.</p>

<p>В пределах сохраненной подпрограммы, которая определена с <code>SQL
SECURITY DEFINER</code>, <a href="funct.htm#function_current-user"><code>
CURRENT_USER</code></a> возвращает значение <code>DEFINER</code>.
Для информации об аудите пользователей в пределах сохраненных подпрограмм см.
<a href="security.html#account-activity-auditing">раздел 7.3.12</a>.</p>

<p>Рассмотрите следующую процедуру, которая выводит на экран количество
учетных записей MySQL, перечисленных в <code>mysql.user</code>:
<pre>
CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()
BEGIN
  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;
END;
</pre>

Процедуре назначают <code>DEFINER</code> = <code>'admin'@'localhost'</code>,
независимо от того, какой пользователь определяет это. Это выполняется с
привилегиями той учетной записи, независимо от того, какой пользователь
вызывает это (потому что характеристика безопасности по умолчанию
<code>DEFINER</code>). Процедура преуспевает или терпит неудачу в
зависимости от того, имеет ли вызывающий привилегию
<a href="security.html#priv_execute"><code>EXECUTE</code></a> для нее,
и имеет ли <code>'admin'@'localhost'</code> привилегию
<a href="security.html#priv_select"><code>SELECT</code></a> на таблице
<code>mysql.user</code>.</p>

<p>Теперь предположите, что процедура определена с
<code>SQL SECURITY INVOKER</code>:
<pre>
CREATE DEFINER = 'admin'@'localhost' PROCEDURE account_count()
SQL SECURITY INVOKER
BEGIN
  SELECT 'Number of accounts:', COUNT(*) FROM mysql.user;
END;
</pre>

У процедуры все еще есть <code>DEFINER</code> =
<code>'admin'@'localhost'</code>, но в этом случае, это выполняется с
привилегиями пользователя вызова. Таким образом, процедура преуспевает или
терпит неудачу в зависимости от того, имеет ли вызывающий привилегию
<a href="security.html#priv_execute"><code>EXECUTE</code></a> для нее и
привилегию <a href="security.html#priv_select"><code>SELECT</code></a>
для таблицы <code>mysql.user</code>.</p>

<p>Сервер обрабатывает тип данных параметра, местной переменной,
создаваемой <a href="#declare"><code>DECLARE</code></a>,
или функциональное возвращаемое значение следующим образом:</p>

<ul><li><p>Назначения проверены на несоответствия типа данных и переполнение.
Преобразование и проблемы переполнения приводят к предупреждениям или ошибкам
в строгом режиме SQL.</li>

<li>Только скалярные значения могут быть назначены. Например, такой запрос,
как <code>SET x = (SELECT 1, 2)</code> не годится.</li>
<li>Для символьных типов данных, если есть <code>CHARACTER SET</code>
в декларации, указанный набор символов и его сопоставление по умолчанию
используются. Если указан <code>COLLATE</code>, то используется указанное
сопоставление, а не сопоставление по умолчанию.</p>

<p>Если не указаны <code>CHARACTER SET</code> и <code>COLLATE</code>,
используются набор символов базы данных и сопоставление в действительности во
время создания подпрограммы. Чтобы избежать использования набор символов базы
данных и сопоставления сервера, обеспечивают явные параметры
<code>CHARACTER SET</code> и <code>COLLATE</code>
для символьных параметров данных.</p>

<p>Если Вы изменяете набор символов по умолчанию базы данных или
сопоставление, сохраненные подпрограммы, которые используют значения по
умолчанию базы данных, должны быть удалены и обновлены так, чтобы они
использовали новые значения по умолчанию.</p>

<p>Набор символов базы данных и сопоставление даны значениями
<a href="server.htm#sysvar_character_set_database"><code>
character_set_database</code></a> и
<a href="server.htm#sysvar_collation_database"><code>collation_database
</code></a>. См. <a href="global.htm#charset-database">раздел 11.1.3.3</a>.
</p></li></ul>

<h3><a name="create-server"></a>14.1.14. CREATE SERVER</h3>
<pre>
CREATE SERVER <em><code>server_name</code></em>
FOREIGN DATA WRAPPER <em><code>wrapper_name</code></em>
OPTIONS (<em><code>option</code></em> [, <em><code>option</code></em>] ...)

<em><code>option</code></em>:
  { HOST <em><code>character-literal</code></em>
  | DATABASE <em><code>character-literal</code></em>
  | USER <em><code>character-literal</code></em>
  | PASSWORD <em><code>character-literal</code></em>
  | SOCKET <em><code>character-literal</code></em>
  | OWNER <em><code>character-literal</code></em>
  | PORT <em><code>numeric-literal</code></em> }
</pre>

Это запрос создает определение сервера для использования с
механизмом хранения <code>FEDERATED</code>. <code>CREATE SERVER</code>
создает новую строку в таблице <code>servers</code> базы данных
<code>mysql</code>. Этот запрос требует привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p><code><em><code>server_name</code></em></code> должен быть
уникальной ссылкой на сервер. Определения сервера глобальны в рамках сервера,
невозможно квалифицировать определение сервера для определенной базы данных.
<code><em><code>server_name</code></em></code> имеет максимальную длину 64
символов (имена длиннее 64 символов являются тихо усеченными), и
нечувствительно к регистру. Вы можете определить имя как
заключенную в кавычки строку.</p>

<p><code><em><code>wrapper_name</code></em></code> должен быть
<code>mysql</code>, может быть заключен в кавычки с единственными кавычками.
Другие значения для <code><em><code>wrapper_name</code></em></code>
в настоящее время не поддерживаются.</p>

<p>Для каждой <code><em><code>option</code></em></code>
Вы должны определить символьный или числовой литерал. Символьные литералы
UTF-8 поддерживают максимальную длину 64 символа и значение по умолчанию
пустая строка. Строковые литералы являются тихо усеченными к 64 символам.
Числовые должны быть числом между 0 и 9999, по умолчанию 0.</p>

<p><code>OWNER</code> в настоящее время не применяется и не имеет никакого
эффекта на собственность или работу соединения сервера, которое создается.
</p>
<p><code>CREATE SERVER</code> создает запись в таблице
<code>mysql.servers</code>, которая может позже использоваться с
<a href="#create-table"><code>CREATE TABLE</code></a>, создавая
таблицу <code>FEDERATED</code>. Опции, которые Вы определяете, будут
использоваться, чтобы заполнить столбцы в <code>mysql.servers</code>.
Столбцы таблицы: <code>Server_name</code>, <code>Host</code>,
<code>Db</code>, <code>Username</code>,
<code>Password</code>, <code>Port</code> и <code>Socket</code>.</p>

<p>Например:
<pre>
CREATE SERVER s FOREIGN DATA WRAPPER mysql
       OPTIONS (USER 'Remote', HOST '192.168.1.106', DATABASE 'test');
</pre>

Убедитесь, что определили все опции, необходимые, чтобы установить соединение
с сервером. Имя пользователя, имя хоста и имя базы данных принудительны.
Другие опции, такие как пароль, могли бы требоваться также.</p>

<p>Данные в таблице могут использоваться, создавая
соединение с таблицей <code>FEDERATED</code>:
<pre>
CREATE TABLE t (s1 INT) ENGINE=FEDERATED CONNECTION='s';
</pre>
См. <a href="storage.htm#federated-storage-engine">раздел 17.8</a>.</p>

<p><code>CREATE SERVER</code> автоматически закрывает транзакцию.</p>
<p>В MySQL 8.0 <code>CREATE SERVER</code> не записан в двоичный журнал,
независимо от формата журналирования, который используется.</p>

<h3><a name="create-table"></a>14.1.15. CREATE TABLE</h3>
<pre>
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] <em><code>tbl_name</code></em>
(<em><code>create_definition</code></em>,...)
[<em><code>table_options</code></em>]
[<em><code>partition_options</code></em>]

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] <em><code>tbl_name</code></em>
[(<em><code>create_definition</code></em>,...)]
[<em><code>table_options</code></em>]
[<em><code>partition_options</code></em>]
[IGNORE | REPLACE]
[AS] <em><code>query_expression</code></em>

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] <em><code>tbl_name</code></em>
{ LIKE <em><code>old_tbl_name</code></em> | (LIKE <em><code>old_tbl_name</code></em>) }

<em><code>create_definition</code></em>:
<em><code>col_name</code></em> <em><code>column_definition</code></em>
  | [CONSTRAINT [<em><code>symbol</code></em>]] PRIMARY KEY [<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...)
  [<em><code>index_option</code></em>] ...
  | {INDEX|KEY} [<em><code>index_name</code></em>] [<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...)
  [<em><code>index_option</code></em>] ...
  | [CONSTRAINT [<em><code>symbol</code></em>]] UNIQUE [INDEX|KEY]
  [<em><code>index_name</code></em>] [<em><code>index_type</code></em>] (<em><code>index_col_name</code></em>,...)
  [<em><code>index_option</code></em>] ...
  | {FULLTEXT|SPATIAL} [INDEX|KEY] [<em><code>index_name</code></em>] (<em><code>index_col_name</code></em>,...)
  [<em><code>index_option</code></em>] ...
  | [CONSTRAINT [<em><code>symbol</code></em>]] FOREIGN KEY
  [<em><code>index_name</code></em>] (<em><code>index_col_name</code></em>,...) <em><code>reference_definition</code></em>
  | CHECK (<em><code>expr</code></em>)

<em><code>column_definition</code></em>:
<em><code>data_type</code></em> [NOT NULL | NULL] [DEFAULT <em><code>default_value</code></em>]
  [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY]
  [COMMENT '<em><code>string</code></em>']
  [COLUMN_FORMAT {FIXED|DYNAMIC|DEFAULT}]
  [<em><code>reference_definition</code></em>]
  | <em><code>data_type</code></em> [GENERATED ALWAYS] AS (<em><code>expression</code></em>)
  [VIRTUAL | STORED] [UNIQUE [KEY]] [COMMENT <em><code>comment</code></em>]
  [NOT NULL | NULL] [[PRIMARY] KEY]

<em><code>data_type</code></em>:
BIT[(<em><code>length</code></em>)]
  | TINYINT[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | SMALLINT[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | MEDIUMINT[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | INT[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | INTEGER[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | BIGINT[(<em><code>length</code></em>)] [UNSIGNED] [ZEROFILL]
  | REAL[(<em><code>length</code></em>,<em><code>decimals</code></em>)] [UNSIGNED] [ZEROFILL]
  | DOUBLE[(<em><code>length</code></em>,<em><code>decimals</code></em>)] [UNSIGNED] [ZEROFILL]
  | FLOAT[(<em><code>length</code></em>,<em><code>decimals</code></em>)] [UNSIGNED] [ZEROFILL]
  | DECIMAL[(<em><code>length</code></em>[,<em><code>decimals</code></em>])] [UNSIGNED] [ZEROFILL]
  | NUMERIC[(<em><code>length</code></em>[,<em><code>decimals</code></em>])] [UNSIGNED] [ZEROFILL]
  | DATE
  | TIME[(<em><code>fsp</code></em>)]
  | TIMESTAMP[(<em><code>fsp</code></em>)]
  | DATETIME[(<em><code>fsp</code></em>)]
  | YEAR
  | CHAR[(<em><code>length</code></em>)] [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | VARCHAR(<em><code>length</code></em>) [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | BINARY[(<em><code>length</code></em>)]
  | VARBINARY(<em><code>length</code></em>)
  | TINYBLOB
  | BLOB
  | MEDIUMBLOB
  | LONGBLOB
  | TINYTEXT [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | TEXT [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | MEDIUMTEXT [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | LONGTEXT [BINARY]
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | ENUM(<em><code>value1</code></em>,<em><code>value2</code></em>,<em><code>value3</code></em>,...)
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | SET(<em><code>value1</code></em>,<em><code>value2</code></em>,<em><code>value3</code></em>,...)
  [CHARACTER SET <em><code>charset_name</code></em>] [COLLATE <em><code>collation_name</code></em>]
  | JSON
  | <em><code>spatial_type</code></em>

<em><code>index_col_name</code></em>:
<em><code>col_name</code></em> [(<em><code>length</code></em>)] [ASC | DESC]

<em><code>index_type</code></em>:
USING {BTREE | HASH}

<em><code>index_option</code></em>:
KEY_BLOCK_SIZE [=] <em><code>value</code></em>
  | <em><code>index_type</code></em>
  | WITH PARSER <em><code>parser_name</code></em>
  | COMMENT '<em><code>string</code></em>'
  | {VISIBLE | INVISIBLE}

<em><code>reference_definition</code></em>:
REFERENCES <em><code>tbl_name</code></em> (<em><code>index_col_name</code></em>,...)
  [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]
  [ON DELETE <em><code>reference_option</code></em>]
  [ON UPDATE <em><code>reference_option</code></em>]

<em><code>reference_option</code></em>:
RESTRICT | CASCADE | SET NULL | NO ACTION

<em><code>table_options</code></em>:
<em><code>table_option</code></em> [[,] <em><code>table_option</code></em>] ...

<em><code>table_option</code></em>:
ENGINE [=] <em><code>engine_name</code></em>
  | AUTO_INCREMENT [=] <em><code>value</code></em>
  | AVG_ROW_LENGTH [=] <em><code>value</code></em>
  | [DEFAULT] CHARACTER SET [=] <em><code>charset_name</code></em>
  | CHECKSUM [=] {0 | 1}
  | [DEFAULT] COLLATE [=] <em><code>collation_name</code></em>
  | COMMENT [=] '<em><code>string</code></em>'
  | COMPRESSION [=] {'ZLIB'|'LZ4'|'NONE'}
  | CONNECTION [=] '<em><code>connect_string</code></em>'
  | DATA DIRECTORY [=] '<em><code>absolute path to directory</code></em>'
  | DELAY_KEY_WRITE [=] {0 | 1}
  | ENCRYPTION [=] {'Y' | 'N'}
  | INDEX DIRECTORY [=] '<em><code>absolute path to directory</code></em>'
  | INSERT_METHOD [=] { NO | FIRST | LAST }
  | KEY_BLOCK_SIZE [=] <em><code>value</code></em>
  | MAX_ROWS [=] <em><code>value</code></em>
  | MIN_ROWS [=] <em><code>value</code></em>
  | PACK_KEYS [=] {0 | 1 | DEFAULT}
  | PASSWORD [=] '<em><code>string</code></em>'
  | ROW_FORMAT [=] {DEFAULT|DYNAMIC|FIXED|COMPRESSED|REDUNDANT|COMPACT}
  | STATS_AUTO_RECALC [=] {DEFAULT|0|1}
  | STATS_PERSISTENT [=] {DEFAULT|0|1}
  | STATS_SAMPLE_PAGES [=] <em><code>value</code></em>
  | TABLESPACE <em><code>tablespace_name</code></em>
  | UNION [=] (<em><code>tbl_name</code></em>[,<em><code>tbl_name</code></em>]...)

<em><code>partition_options</code></em>:
PARTITION BY
{ [LINEAR] HASH(<em><code>expr</code></em>)
| [LINEAR] KEY [ALGORITHM={1|2}] (<em><code>column_list</code></em>)
| RANGE{(<em><code>expr</code></em>) | COLUMNS(<em><code>column_list</code></em>)}
| LIST{(<em><code>expr</code></em>) | COLUMNS(<em><code>column_list</code></em>)} }
[PARTITIONS <em><code>num</code></em>]
[SUBPARTITION BY
{ [LINEAR] HASH(<em><code>expr</code></em>)
| [LINEAR] KEY [ALGORITHM={1|2}] (<em><code>column_list</code></em>) }
  [SUBPARTITIONS <em><code>num</code></em>]
]
[(<em><code>partition_definition</code></em> [, <em><code>partition_definition</code></em>] ...)]

<em><code>partition_definition</code></em>:
PARTITION <em><code>partition_name</code></em> [VALUES
{LESS THAN {(<em><code>expr</code></em> | <em><code>value_list</code></em>) | <code>MAXVALUE</code>}
| IN (<em><code>value_list</code></em>)}]
[[STORAGE] ENGINE [=] <em><code>engine_name</code></em>]
[COMMENT [=] <em><code>'comment_text'</code></em> ]
[DATA DIRECTORY [=] '<code><em><code>data_dir</code></em></code>']
[INDEX DIRECTORY [=] '<code><em><code>index_dir</code></em></code>']
[MAX_ROWS [=] <em><code>max_number_of_rows</code></em>]
[MIN_ROWS [=] <em><code>min_number_of_rows</code></em>]
[TABLESPACE [=] tablespace_name]
[(<em><code>subpartition_definition</code></em> [, <em><code>subpartition_definition</code></em>] ...)]

<em><code>subpartition_definition</code></em>:
SUBPARTITION <em><code>logical_name</code></em>
[[STORAGE] ENGINE [=] <em><code>engine_name</code></em>]
[COMMENT [=] <em><code>'comment_text'</code></em> ]
[DATA DIRECTORY [=] '<code><em><code>data_dir</code></em></code>']
[INDEX DIRECTORY [=] '<code><em><code>index_dir</code></em></code>']
[MAX_ROWS [=] <em><code>max_number_of_rows</code></em>]
[MIN_ROWS [=] <em><code>min_number_of_rows</code></em>]
[TABLESPACE [=] tablespace_name]

<em><code>query_expression:</code></em>
SELECT ...   (<em><code>Some valid select or union statement</code></em>)
</pre>

<a href="#create-table"><code>CREATE TABLE</code></a>
составляет таблицу с именем. Вы должны иметь привилегию
<a href="security.html#priv_create"><code>CREATE</code></a> для таблицы.</p>

<p>Правила для допустимых имен таблиц даны в
<a href="lang.htm#identifiers">разделе 10.2</a>.
По умолчанию таблица составлена в базе данных по умолчанию, используя
механизм хранения <a href="innodb.htm"><code>InnoDB</code></a>.
Ошибка происходит, если таблица существует, если нет никакой базы данных
по умолчанию, или если база данных не существует.</p>

<p>Имя таблицы может быть определено как
<em><code>db_name.tbl_name</code></em>, чтобы составлять таблицу в
определенной базе данных. Это работает независимо от того, есть ли база
данных по умолчанию, предполагая, что база данных существует. Если Вы
используете заключенные в кавычки идентификаторы, то заключите в кавычки
имена базы данных и имена таблиц отдельно. Например,
<code>`mydb`.`mytbl`</code> не <code>`mydb.mytbl`</code>.</p>

<h4><a name="idm139965344016032"></a>Клонирование или копирование таблицы
</h4>
<p><code>CREATE TABLE ... LIKE</code> составляет пустую таблицу, основанную
на определении другой таблицы, включая любые параметры столбца и индексы,
определенные в оригинальной таблице:
<pre>
CREATE TABLE <em><code>new_tbl</code></em> LIKE <em><code>orig_tbl</code></em>;
</pre>
См. <a href="#create-table-like">раздел 14.1.15.1</a>.</p>

<p>Чтобы составить одну таблицу от другой, добавьте
<a href="#select"><code>SELECT</code></a> в конце
<a href="#create-table"><code>CREATE TABLE</code></a>:
<pre>
CREATE TABLE <em><code>new_tbl</code></em> SELECT * FROM <em><code>orig_tbl</code></em>;
</pre>
См. <a href="#create-table-select">раздел 14.1.15.2</a>.</p>

<h4><a name="create-temporary-table"></a>Временные таблицы</h4>
<p>Вы можете использовать ключевое слово <code>TEMPORARY</code>, составляя
таблицу. Таблица <code>TEMPORARY</code> видима только текущему сеансу и
удалена автоматически, когда сеанс закрыт. Это означает, что два различных
сеанса могут использовать то же самое временное имя таблицы, не находясь в
противоречии друг с другом или с существующими не-<code>TEMPORARY</code>
таблицами. Существующая таблица скрыта, пока временная таблица не удалена.
Чтобы составить временные таблицы, Вы должны иметь привилегию
<a href="security.html#priv_create-temporary-tables"><code>
CREATE TEMPORARY TABLES</code></a>.</p>

<p><code>InnoDB</code> не поддерживает сжатые временные таблицы. Когда
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> включен (значение по умолчанию),
<a href="#create-table"><code>CREATE TEMPORARY TABLE</code></a>
возвращает ошибку, если <code>ROW_FORMAT=COMPRESSED</code> или
указан <code>KEY_BLOCK_SIZE</code>. Если
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> отключен, предупреждения выпущены, и временная таблица
составлена, используя несжатый формат строки. Временные таблицы
<code>InnoDB</code> составлены в совместно используемом временном табличном
пространстве <code>ibtmp1</code>.
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>innodb_file_per-table
</code></a> не затрагивает создание временных таблиц <code>InnoDB</code>.</p>

<p><a href="#create-table"><code>CREATE TABLE</code></a>
автоматически не закрывает текущую активную транзакцию, если Вы используете
ключевое слово <code>TEMPORARY</code>.</p>

<p>Таблицы <code>TEMPORARY</code> имеют очень свободные отношения с базами
данных (схемами). Удаление базы данных автоматически не удаляет таблицы
<code>TEMPORARY</code> в пределах той базы данных. Кроме того, Вы можете
создать таблицу <code>TEMPORARY</code> в несуществующей базе данных, если Вы
квалифицируете имя таблицы с именем базы данных в
<code>CREATE TABLE</code>. В этом случае все последующие ссылки на таблицу
должны быть квалифицированы с именем базы данных.</p>

<h4><a name="idm139965343983120"></a>Существующая таблица с тем
же самым именем</h4>
<p>Ключевые слова <code>IF NOT EXISTS</code> не дают ошибке произойти, если
таблица существует. Однако, нет никакой проверки, что у существующей таблицы
есть структура, идентичная обозначенной в <a href="#create-table">
<code>CREATE TABLE</code></a>.</p>

<h4><a name="idm139965343979872"></a>Физическое представление</h4>
<p>Для таблицы <code>InnoDB</code> в табличном пространстве file-per-table
или общем табличном пространстве табличных данные и связанные индексы
сохранены в <a href="glossary.htm#glos_ibd_file">файле ibd</a>
в каталоге базы данных. Когда таблица <code>InnoDB</code>
составлена в системном табличном пространстве, табличные данные и индексы
сохранены в <a href="glossary.htm#glos_ibdata_file">файлах ibdata*</a>,
которые представляют системное табличное пространство.
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>
innodb_file_per_table</code></a> управляет, составлены ли таблицы в табличных
пространствах file-per-table или системном табличном пространстве по
умолчанию. Опция <code>TABLESPACE</code>
может использоваться, чтобы поместить таблицу в табличное пространство
file-per-table, общее табличное пространство или системное табличное
пространство, независимо от
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>innodb_file_per_table
</code></a>.</p>

<p>Для <code>MyISAM</code> механизм хранения создает файлы с данными и
индексные файлы. Таким образом, для каждой таблицы <code>MyISAM</code>
<em><code>tbl_name</code></em> есть два дисковых файла.</p>

<table border="1">
<thead><tr><th scope="col">Файл</th><th scope="col">Назначение</th></tr>
</thead>
<tbody><tr><td scope="row"><code><em><code>tbl_name</code></em>.MYD</code>
</td><td>Данные</td></tr>
<tr><td scope="row"><code><em><code>tbl_name</code></em>.MYI</code></td>
<td>Индексы</td></tr></tbody></table>

<p><a href="storage.htm">Глава 17</i></a> описывает то, что регистрирует
каждый механизм хранения, чтобы представить таблицы. Если имя таблицы
содержит специальные символы, названия табличных файлов содержат
закодированные версии тех символов как описано в
<a href="lang.htm#identifier-mapping">разделе 10.2.3</a>.</p>

<h4><a name="idm139965343957504"></a>Типы данных и признаки для столбцов</h4>
<p><em><code>data_type</code></em> представляет тип данных в определении
столбца. <em><code>spatial_type</code></em> представляет пространственный тип
данных. Показанный синтаксис типа данных является только образцом.
Для полного описания синтаксиса, доступного для определения типов данных
столбца, так же как и для информации о свойствах каждого типа см.
<a href="types.htm">главу 12</a> и <a href="types.htm#spatial-extensions">
раздел 12.5</a>. Тип данных <a href="types.htm#json"><code>JSON</code></a>
также поддержан для столбцов таблицы, см.
<a href="types.htm#json">раздел 12.6</a>.</p>

<p>Некоторые признаки не относятся ко всем типам данных.
<code>AUTO_INCREMENT</code> применяется только к целому числу и типам
с плавающей запятой. <code>DEFAULT</code> не относится к типам
<a href="types.htm#blob"><code>BLOB</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>, <code>GEOMETRY</code> и
<a href="types.htm#json"><code>JSON</code></a>.</p>

<ul><li><p>Если <code>NULL</code> или <code>NOT NULL</code> не определен,
столбец обработан как если бы был определен <code>NULL</code>.</li>

<li>У целого числа или столбца с плавающей запятой может быть дополнительный
признак <code>AUTO_INCREMENT</code>. Когда Вы вставляете значение
<code>NULL</code> (рекомендуемый) или <code>0</code> в индексированный
столбец <code>AUTO_INCREMENT</code>, столбец установлен в следующее значение
последовательности. Как правило, это <code><em><code>value</code></em>+1
</code>, где <em><code>value</code></em> самое большое значение для столбца в
настоящее время в таблице. Последовательности <code>AUTO_INCREMENT</code>
начинаются с <code>1</code>.</p>

<p>Чтобы получить значение <code>AUTO_INCREMENT</code> после вставки строки,
используйте <a href="funct.htm#function_last-insert-id"><code>
LAST_INSERT_ID()</code></a> или
<a href="connect.htm#mysql-insert-id"><code>mysql_insert_id()</code></a> C
API. См. разделы <a href="funct.htm#information-functions">13.14</a> и
<a href="connect.htm#mysql-insert-id">25.8.7.38</a>.</p>

<p>Если включен режим SQL <a href="server.htm#sqlmode_no_auto_value_on_zero">
<code>NO_AUTO_VALUE_ON_ZERO</code></a>, Вы можете сохранить <code>0</code> в
столбец <code>AUTO_INCREMENT</code> именно как <code>0</code>,
не производя новое значение последовательности. См.
<a href="server.htm#sql-mode">раздел 6.1.8</a>.</p>

<p>Может быть только один столбец <code>AUTO_INCREMENT</code>
на таблицу, это должно быть индексировано, и у этого не может быть значения
<code>DEFAULT</code>. <code>AUTO_INCREMENT</code> работает должным образом,
только если он содержит только положительные значения. Вставка отрицательного
числа расценена как вставка очень большого положительного числа. Это сделано,
чтобы избежать проблем точности, когда числа
<span><span>переходят</span></span> с положительных на отрицательне и также
гарантировать, что Вы случайно не дойдете до <code>0</code> в
<code>AUTO_INCREMENT</code>.</p>

<p>Для <code>MyISAM</code> Вы можете определить вторичный столбец
<code>AUTO_INCREMENT</code> в ключе из нескольких столбцов. См.
<a href="tutorial.html#example-auto-increment">раздел 4.6.9</a>.</p>

<p>Чтобы сделать MySQL совместимым с некоторыми приложениями ODBC, Вы можете
найти <code>AUTO_INCREMENT</code> для последней вставленной
строки следующим запросом:
<pre>
SELECT * FROM <em><code>tbl_name</code></em> WHERE <em><code>auto_col</code></em> IS NULL
</pre>

Этот метод требует, чтобы <a href="server.htm#sysvar_sql_auto_is_null"><code>
sql_auto_is_null</code></a> не был 0. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p>Для информации о <code>InnoDB</code> и <code>AUTO_INCREMENT</code> см.
<a href="innodb.htm#innodb-auto-increment-handling">раздел 16.8.5</a>.
Для информации о <code>AUTO_INCREMENT</code> и репликации MySQL см.
<a href="replica.htm#replication-features-auto-increment">раздел 19.4.1.1
</a>.</li>

<li>Символьные типы данных (<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>) могут включать атрибуты
<code>CHARACTER SET</code> и <code>COLLATE</code>, чтобы определить набор
символов и сопоставление для столбца. Для деталей см.
<a href="global.htm#charset">раздел 11.1</a>. <code>CHARSET</code> синоним
для <code>CHARACTER SET</code>:
<pre>
CREATE TABLE t (c CHAR(20) CHARACTER SET utf8 COLLATE utf8_bin);
</pre>

MySQL 8.0 интерпретирует технические требования длины в символьных
определениях столбца в символах. Длины для
<a href="types.htm#binary-varbinary"><code>BINARY</code></a> и
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> в байтах.
</li>

<li><code>DEFAULT</code> определяет значение по умолчанию для столбца. С
одним исключением значение по умолчанию должно быть константой, это не может
быть функция или выражение. Это означает, например, что Вы не можете
установить значение по умолчанию для столбца даты, чтобы быть значением
функции, такой как <a href="funct.htm#function_now"><code>NOW()</code></a>
или <a href="funct.htm#function_current-date"><code>CURRENT_DATE</code></a>.
Исключение: Вы можете определить
<a href="funct.htm#function_current-timestamp"><code>CURRENT_TIMESTAMP</code>
</a> как значение по умолчанию для <a href="types.htm#datetime"><code>
TIMESTAMP</code></a> или <a href="types.htm#datetime"><code>DATETIME</code>
</a>. См. <a href="types.htm#timestamp-initialization">раздел 12.3.5</a>.</p>

<p>Если определение столбца включает неявное значение
<code>DEFAULT</code>, MySQL определяет значение по умолчанию как описано в
<a href="types.htm#data-type-defaults">раздел 12.7</a>.</p>

<p><a href="types.htm#blob"><code>BLOB</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a> и
<a href="types.htm#json"><code>JSON</code></a>
нельзя назначить значение по умолчанию.</p>

<p>Если режим SQL <a href="server.htm#sqlmode_no_zero_date"><code>
NO_ZERO_DATE</code></a> или <a href="server.htm#sqlmode_no_zero_in_date">
<code>NO_ZERO_IN_DATE</code></a> включен, и значение даты по умолчанию не
правильно, согласно тому режиму, <a href="#create-table"><code>CREATE
TABLE</code></a> производит предупреждение, если строгий режим SQL не
включен, и ошибку, если строгий режим включен. Например, с включенным
<a href="server.htm#sqlmode_no_zero_in_date"><code>NO_ZERO_IN_DATE</code></a>
<code>c1 DATE DEFAULT '2010-00-00'</code> производит предупреждение.</li>

<li>Комментарий для столбца может быть определен опцией <code>COMMENT</code>
до 1024 символов в длину. Комментарий выведен на экран
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a> и
<a href="#show-columns"><code>SHOW FULL COLUMNS</code></a>.</li>

<li><code>COLUMN_FORMAT</code> используется MySQL Cluster, чтобы определить
формат хранения столбца. Эта опция в настоящее время не имеет никакого
эффекта на столбцы таблиц, используя механизмы хранения, кроме
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>. В MySQL 8.0 и выше
<code>COLUMN_FORMAT</code> тихо проигнорирован.</li>

<li><code>KEY</code> синоним для <code>INDEX</code>. Ключевой признак
<code>PRIMARY KEY</code> может также быть определен как только
<code>KEY</code> дано в определении столбца. Это было осуществлено для
совместимости с другими системами базы данных.</li>

<li>Индекс <code>UNIQUE</code> создает ограничение, таким образом, что все
значения в индексировании должны быть отличными. Ошибка происходит, если Вы
пытаетесь добавить новую строку со значением ключа, которое соответствует
существующей строке. Для всех механизмов <code>UNIQUE</code>
разрешает многократные значения <code>NULL</code>
для столбцов, которые могут содержать <code>NULL</code>.</li>

<li><code>PRIMARY KEY</code> уникальный индекс, где все ключевые столбцы
должны быть определены как <code>NOT NULL</code>. Если они явно не объявлены
как <code>NOT NULL</code>, MySQL объявляет их так неявно (и тихо). У таблицы
может быть только один <code>PRIMARY KEY</code>. Имя <code>PRIMARY KEY</code>
всегда <code>PRIMARY</code>, который таким образом не может использоваться
как имя любого другого индекса.</p>

<p>Если у Вас нет <code>PRIMARY KEY</code> и приложение просит
<code>PRIMARY KEY</code> в Ваших таблицах, MySQL возвращает первый индекс
<code>UNIQUE</code>, который не имеет столбцов <code>NULL</code>,
как <code>PRIMARY KEY</code>.</p>

<p>В <code>InnoDB</code> сохраните <code>PRIMARY KEY</code> коротким, чтобы
минимизировать хранение для вторичного индекса. Каждая запись вторичного
индекса содержит копию столбцов первичного ключа для соответствующей строки.
См. <a href="innodb.htm#innodb-index-types">раздел 16.8.8</a>.</li>

<li>В составленной таблице <code>PRIMARY KEY</code>
помещен сначала, сопровождается всеми <code>UNIQUE</code> и затем
групповые индексы. Это помогает оптимизатору MySQL расположить по
приоритетам, которые индексы использовать, а также более быстро обнаружить
дублированный ключ <code>UNIQUE</code>.</li>

<li><code>PRIMARY KEY</code> может быть многостолбцовым.
Однако, Вы не можете создать многостолбцовый индекс с использованием
<code>PRIMARY KEY</code> в спецификации столбца. Выполнение этого только
помечает единственный столбец как основной. Вы должны использовать отдельный
параметр <code>PRIMARY KEY(<em><code>index_col_name</code></em>, ...)</code>.
</li>

<li>Если <code>PRIMARY KEY</code> или <code>UNIQUE</code>
состоит только из одного столбца, у которого есть тип целого числа, Вы можете
также обратиться к столбцу как к <code>_rowid</code> в
<a href="#select"><code>SELECT</code></a>.</li>

<li>В MySQL имя <code>PRIMARY KEY</code> <code>PRIMARY</code>.
Для других индексов, если Вы не назначаете имя, индексу назначают имя первого
индексированного столбца с дополнительным суффиксом (<code>_2</code>,
<code>_3</code>, <code>...</code>), чтобы сделать это уникальным. Вы можете
видеть названия для таблицы, используя <code>SHOW INDEX FROM
<em><code>tbl_name</code></em></code>. См.
<a href="#show-index">раздел 14.7.5.22</a>.</li>

<li>Некоторые механизмы хранения разрешают Вам определять тип индекса,
создавая индексирование. Синтаксис для <em><code>index_type</code></em>:
<code>USING <em><code>type_name</code></em></code>.</p>

<p>Например:
<pre>
CREATE TABLE lookup (id INT, INDEX USING BTREE (id)) ENGINE = MEMORY;
</pre>

Привилегированная позиция для <code>USING</code> после списка столбцов
индекса. Это может быть дано перед списком столбца, но поддержка
использования опции в той позиции устарела
и будет удалена в будущем выпуске MySQL.</p>

<p><em><code>index_option</code></em> определяют дополнительные опции для
индекса. <code>USING</code> одна такая опция. <code>WITH PARSER</code>
может использоваться только с <code>FULLTEXT</code>. Это связывает плагин
анализатора с индексированием, если полнотекстовая индексация и поиск
операций нуждаются в специальной обработке.
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
поддерживают полнотекстовые плагины анализатора. Если у Вас есть таблица
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
со связанным полнотекстовым плагином анализатора, Вы можете преобразовать
таблицу в <code>InnoDB</code> через <code>ALTER TABLE</code>.</p></li>

<li>В MySQL 8.0 только <code>InnoDB</code>, <code>MyISAM</code> и
<code>MEMORY</code> поддерживают индекс на столбцах, которые могут иметь
значения <code>NULL</code>. В других случаях Вы должны объявить
индексированные столбцы как <code>NOT NULL</code> или будет ошибка.</li>

<li>Для <a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#binary-varbinary"><code>BINARY</code></a> и
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>
может быть создан индекс, который использует только начальную часть
значений столбцов, используя <code><em><code>col_name</code></em>(<em>
<code>length</code></em>)</code>, чтобы определить длину префикса.
<a href="types.htm#blob"><code>BLOB</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>
также могут быть индексированы, но длина префикса
<span><em>должна</em></span> быть задана явно. Длины префикса даны в символах
для недвоичных строковых типов и в байтах для двоичных строковых типов. Таким
образом, индексная запись состоит из первых <em><code>length</code></em>
символов каждого значения столбца для
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a> или первых
<em><code>length</code></em> байт каждого значения столбца для
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a> и
<a href="types.htm#blob"><code>BLOB</code></a>.
Индексация только префиксов значений столбцов может сделать индексный файл
намного меньшим. Для дополнительной информации о префиксах см.
<a href="#create-index">раздел 14.1.12</a>.</p>

<p>Только <code>InnoDB</code> и <code>MyISAM</code>
имеют поддержку индексов <a href="types.htm#blob"><code>BLOB</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>:
<pre>
CREATE TABLE test (blob_col BLOB, INDEX(blob_col(10)));
</pre>

Префиксы могут составить до 767 байтов для таблиц <code>InnoDB</code>,
которые используют формат строки
<code><a href="glossary.htm#glos_redundant_row_format">REDUNDANT</a></code>
или <code><a href="glossary.htm#glos_compact_row_format">COMPACT</a></code>.
Предел длины поднят до 3072 байтов для таблиц <code>InnoDB</code>,
которые используют формат строки
<code><a href="glossary.htm#glos_dynamic_row_format">DYNAMIC</a></code> или
<code><a href="glossary.htm#glos_compressed_row_format">COMPRESSED</a>
</code>. Для MyISAM предел префикса составляет 1000 байт.</p>

<p>Пределы префиксов измерены в байтах, тогда как длина префикса в
<a href="#create-table"><code>CREATE TABLE</code></a>,
<a href="#alter-table"><code>ALTER TABLE</code></a> и
<a href="#create-index"><code>CREATE INDEX</code></a>
интерпретируется как число символов для недвоичных строковых типов
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>)
и число байтов для двоичных строковых типов
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a>).
Примите это во внимание, определяя длину префикса для недвоичного строкового
столбца, который использует многобайтовый набор символов.</p></li>

<li><em><code>index_col_name</code></em> может закончиться
<code>ASC</code> или <code>DESC</code>.
Эти ключевые слова разрешены для будущих расширений для того, чтобы
определить хранение значения по возрастанию или убыванию. В настоящее время
они разобраны, но проигнорированы, индексные значения всегда
сохранены в порядке возрастания.</li>

<li>Когда Вы используете <code>ORDER BY</code> или <code>GROUP BY</code>
на столбце в <a href="#select"><code>SELECT</code></a>,
сервер сортирует значения, используя только начальное число байтов,
обозначенное <a href="server.htm#sysvar_max_sort_length">
<code>max_sort_length</code></a>.</li>

<li>Вы можете создать особенный индекс <code>FULLTEXT</code>,
который используется для полнотекстовых поисков. Только
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
имеют поддержку <code>FULLTEXT</code>. Они могут быть созданы только из
столбцов <a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>.
Индексация всегда происходит по всему столбцу, префиксы столбца не
поддержаны, любая длина префикса проигнорирована, если определена. См.
<a href="funct.htm#fulltext-search">раздел 13.9</a>.
<code>WITH PARSER</code> может быть определен как
<em><code>index_option</code></em>, чтобы связать плагин анализатора с
индексированием, если полнотекстовая индексация и поиск операций нуждаются в
специальной обработке. Этот пункт допустим только для <code>FULLTEXT</code>.
<a href="innodb.htm"><code>InnoDB</code></a> и
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
поддерживают полнотекстовые плагины анализатора. См.
<a href="extend.htm#writing-full-text-plugins">раздел 26.2.4.4</a>.</li>

<li>Вы можете создать индекс <code>SPATIAL</code> на пространственных типах
данных. Пространственные типы поддержаны только для
<code>InnoDB</code> и <code>MyISAM</code>, и индексированные столбцы должны
быть объявлены как <code>NOT NULL</code>. См.
<a href="types.htm#spatial-extensions">раздел 12.5</a>.</li></li>

<li><a href="glossary.htm#glos_generated_virtual_column">
Произведенные сохраненные столбцы</a> могут быть индексированы.
<code>InnoDB</code> поддерживает вторичные индексы на
<a href="glossary.htm#glos_generated_virtual_column">произведенных
виртуальных столбцах</a>. См.
<a href="#create-table-secondary-indexes-virtual-columns">раздел
14.1.15.6</a>.</li>

<li>Столбцы <a href="types.htm#json"><code>JSON</code></a>
не могут быть индексированы. Вы можете создать индекс на произведенном
столбце, который извлекает скалярное значение из <code>JSON</code>. См.
<a href="#create-table-secondary-indexes-virtual-columns">раздел
14.1.15.6</a>.</li>

<li>В MySQL 8.0 определение индекса может включать дополнительный
комментарий до 1024 символов.</li>
<li><a href="innodb.htm"><code>InnoDB</code></a> поддерживают
проверку ограничений внешнего ключа. Столбцы таблицы, на которую ссылаются,
нужно всегда явно называть. <code>ON DELETE</code> и <code>ON UPDATE</code>
действуют на внешних ключах. Для более подробной информации и примеров см.
<a href="#create-table-foreign-keys">раздел 14.1.15.3</a>.</p>

<p>Для других механизмов хранения MySQL Server разбирает и игнорирует
<code>FOREIGN KEY</code> и <code>REFERENCES</code> в
<a href="#create-table"><code>CREATE TABLE</code></a>. Параметр
<code>CHECK</code> разобран, но проигнорирован всеми механизмами хранения.
См. <a href="intro.htm#ansi-diff-foreign-keys">раздел 1.8.2.3</a>.</p>

<p>Для пользователей, знакомых с ANSI/ISO SQL Standard,
отметьте, что никакой механизм хранения, включая <code>InnoDB</code>,
не признает или проводит в жизнь <code>MATCH</code>,
используемый в определениях ограничения целостности. Использование явного
<code>MATCH</code> не будет иметь указанного эффекта, и также вызывает
<code>ON DELETE</code> и <code>ON UPDATE</code>, которые будут
проигнорированы. По этим причинам, определять <code>MATCH</code> не надо.</p>

<p><code>MATCH</code> в SQL управляет тем, как значения <code>NULL</code>
в соединенном (многократные столбцы) внешнем ключе обработаны, сравниваясь с
первичным ключом. <code>InnoDB</code> по существу осуществляет семантику,
определенную <code>MATCH SIMPLE</code>, которая разрешают внешнему ключу быть
всему или частично <code>NULL</code>. В этом случае строке дочерней таблицы,
содержащей такой внешний ключ, разрешают быть вставленной и не
соответствовать строке в родительской таблице, на которую ссылаются.
Возможно осуществить другую семантику, используя триггеры.</p>

<p>Дополнительно, MySQL требует, чтобы столбцы, на которые ссылаются, были
индексированы для работы. Однако, <code>InnoDB</code>
не проводит в жизнь требования что столбцы, на которые ссылаются, должны
быть объявлены <code>UNIQUE</code> или <code>NOT NULL</code>.
Обработка ссылок внешнего ключа на групповые ключи или ключи, которые
содержат <code>NULL</code>, не четко определены для таких операций, как
<code>UPDATE</code> или <code>DELETE CASCADE</code>. Вам советуют
использовать внешние ключи, которые ссылаются только на ключи, которые
являются <code>UNIQUE</code> (или <code>PRIMARY</code>) и
<code>NOT NULL</code> сразу.</p>

<p>MySQL разбирает, но игнорирует <span><span>inline
<code>REFERENCES</code> specifications</span></span> (как
определено в стандарте SQL), где ссылки определены как часть спецификации
столбца. MySQL принимает <code>REFERENCES</code> только когда определено, как
часть отдельной специфиувции <code>FOREIGN KEY</code>.</p>

<p>Разделенные таблицы, использующие
<a href="innodb.htm"><code>InnoDB</code></a>,
не поддерживают внешние ключи. См.
<a href="partit.htm#partitioning-limitations">раздел 20.6</a>.</p></li>

<li>Есть жесткий предел 4096 столбцов на таблицу, но эффективный максимум
может быть меньше для данной таблицы и зависит от факторов, обсужденных в
<a href="restr.htm#column-count-limit">разделе C.10.4</a>.</p></li></ul>

<h4><a name="idm139965343674976"></a>Механизмы хранения</h4>
<p>Опция <code>ENGINE</code> определяет механизм хранения для таблицы,
используя одно из имен, показанных в следующей таблице. Имя механизма может
быть взято в кавычки. Заключенное в кавычки имя <code>'DEFAULT'</code>
признано, но проигнорировано.</p>

<table border="1">
<thead><tr><th scope="col">Механизм хранения</th>
<th scope="col">Описание</th></tr></thead>
<tbody><tr><td scope="row"><code>InnoDB</code></td>
<td>Транзакционно-безопасные таблицы с блокировкой строки и внешними ключами.
Механизм хранения значения по умолчанию для новых таблиц. См.
<a href="innodb.htm">главу 16</a>.</td></tr>
<tr><td scope="row"><code>MyISAM</code></td><td>
Двоичной механизм хранения, который прежде всего используется для рабочих
нагрузок, главным образом, чтения или только для чтения. См.
<a href="storage.htm#myisam-storage-engine">раздел 17.2</a>.</td></tr>
<tr><td scope="row"><code>MEMORY</code></td><td>Данные для этого механизма
хранятся только в памяти. См. <a href="storage.htm#memory-storage-engine">
раздел 17.3</a>.</td></tr>
<tr><td scope="row"><code>CSV</code></td><td>Таблицы, которые хранят строки в
отделенном запятыми формате значений. См.
<a href="storage.htm#csv-storage-engine">раздел 17.4</a>.</td></tr>
<tr><td scope="row"><code>ARCHIVE</code></td>
<td>Механизм хранения архивирования. См.
<a href="storage.htm#archive-storage-engine">раздел 17.5</a>.</td></tr>
<tr><td scope="row"><code>EXAMPLE</code></td>
<td>Механизм в качестве примера. См.
<a href="storage.htm#example-storage-engine">раздел 17.9</a>.</td></tr>
<tr><td scope="row"><code>FEDERATED</code></td>
<td>Механизм хранения, который получает доступ к удаленным таблицам. См.
<a href="storage.htm#federated-storage-engine">раздел 17.8</a>.</td></tr>
<tr><td scope="row"><code>HEAP</code></td><td>Синоним для
<code>MEMORY</code>.</td></tr>
<tr><td scope="row"><code>MERGE</code></td><td>Набор таблиц
<code>MyISAM</code>, используемых в качестве одной таблицы. Также известен
как <code>MRG_MyISAM</code>. См.
<a href="storage.htm#merge-storage-engine">раздел 17.7</a>.</td>
</tr></tbody></table>

<p>По умолчанию, если определен механизм хранения, который не доступен,
запрос терпит неудачу с ошибкой. Вы можете переопределить это поведение,
удаляя режим SQL <a href="server.htm#sqlmode_no_engine_substitution"><code>
NO_ENGINE_SUBSTITUTION</code></a> (см.
<a href="server.htm#sql-mode">раздел 6.1.8</a>), чтобы MySQL позволил замену
указанного механизма механизмом хранения по умолчанию вместо этого. Обычно в
таких случаях это <code>InnoDB</code>, который является значением по
умолчанию для <a href="server.htm#sysvar_default_storage_engine"><code>
default_storage_engine</code></a>. Когда <code>NO_ENGINE_SUBSTITUTION</code>
выключен, предупреждение происходит, если спецификация механизма
хранения не соблюдается.</p>

<h4><a name="idm139965343637152"></a>Оптимизация работы</h4>
<p>Другие табличные опции используются, чтобы оптимизировать поведение
таблицы. В большинстве случаев Вы не должны определить ни одну из них. Эти
опции относятся ко всем механизмам хранения, если иное не обозначено. Опции,
которые не относятся к данному механизму хранения, могут быть приняты как
часть табличного определения. Такие опции тогда применяются, если Вы позже
используете <a href="#alter-table"><code>ALTER TABLE</code></a>, чтобы
преобразовать таблицу, чтобы использовать различный механизм хранения.</p>

<ul><li><p><code>AUTO_INCREMENT</code></p>
<p>Начальное <code>AUTO_INCREMENT</code>
значение для таблицы. В MySQL 8.0 это работает на таблицах
<code>MyISAM</code>, <code>MEMORY</code>, <code>InnoDB</code> и
<code>ARCHIVE</code>. Установить первое значение
для механизмов, которые не поддерживают <code>AUTO_INCREMENT</code>,
вставьте строку со значением меньше, чем требуемое значение после составления
таблицы, и затем удалите фиктивную строку.</p>

<p>Для механизмов, которые поддерживают <code>AUTO_INCREMENT</code>
в <a href="#create-table"><code>CREATE TABLE</code></a>,
Вы можете также использовать <code>ALTER TABLE
<em><code>tbl_name</code></em> AUTO_INCREMENT =
<em><code>N</code></em></code>, чтобы сбрасывать <code>AUTO_INCREMENT</code>.
Значение не может в настоящее время устанавливаться ниже, чем
максимальное значение в столбце.</li>

<li><code>AVG_ROW_LENGTH</code></p>
<p>Приближение средней длины строки для Вашей таблицы. Вы должны установить
это только для больших таблиц со строками переменного размера.</p>

<p>Когда Вы создаете <code>MyISAM</code>, MySQL использует
<code>MAX_ROWS</code> и <code>AVG_ROW_LENGTH</code>, чтобы решить, насколько
большая будет таблица. Если Вы не определяете ни одну опцию, максимальный
размер для <code>MyISAM</code> по умолчанию 256 TB.
Если Ваша операционная система не поддерживает большие файлы, табличные
размеры ограничены пределом размера файла. Если Вы хотите подавить размеры
указателя, чтобы сделать индексирование меньше и быстрее и Вы действительно
не нуждаетесь в больших файлах, Вы можете уменьшить размер указателя по
умолчанию, устанавливая <a href="server.htm#sysvar_myisam_data_pointer_size">
<code>myisam_data_pointer_size</code></a>. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.
Если Вы хотите, чтобы все Ваши таблицы были в состоянии вырасти выше значения
по умолчанию и готовы, что Ваши таблицы немного медленнее и больше, чем
необходимо, Вы можете увеличить размер указателя по умолчанию, устанавливая
эту переменную. Установка значения 7 увеличит размер таблицы до 65536 TB.
</li>

<li><code>[DEFAULT] CHARACTER SET</code></p>
<p>Определите набор символов значения по умолчанию для таблицы.
<code>CHARSET</code> синоним <code>CHARACTER SET</code>.
Если имя набора символов <code>DEFAULT</code>, набор символов
базы данных используется.</li>

<li><code>CHECKSUM</code></p>
<p>Установите это в 1, если Вы хотите, чтобы MySQL поддержал живую
контрольную сумму для всех строк (то есть, контрольная сумма, которую MySQL
обновляет автоматически, поскольку таблица изменяется).
Это делает таблицу немного медленнее, чтобы обновить, но также и облегчает
поиск поврежденных таблиц. Запрос <a href="#checksum-table"><code>
CHECKSUM TABLE</code></a> сообщает о контрольной сумме (только
<code>MyISAM</code>).</li>

<li><code>[DEFAULT] COLLATE</code></p>
<p>Определите сопоставление по умолчанию для таблицы.</li>
<li><code>COMMENT</code></p>
<p>Комментарий для таблицы до 2048 символов.</p>

<p><a name="create-table-comment-innodb-merge-threshold"></a><b>
Установка InnoDB MERGE_THRESHOLD с табличными комментариями. </b>
<a href="innodb.htm#index-page-merge-threshold">MERGE_THRESHOLD</a>
для индексных страниц может быть сконфигурирован для индексов таблицы
<code>InnoDB</code> через параметр <code>COMMENT</code> в
<a href="#create-table"><code>CREATE TABLE</code></a>:
<pre>
CREATE TABLE t1 (id INT, KEY id_index (id)) COMMENT='MERGE_THRESHOLD=45';
</pre>

Если процент заполнения страницы для индексной страницы падает ниже
<code>MERGE_THRESHOLD</code>, когда строка удалена или сокращена работой
обновления, <code>InnoDB</code> пытается слить индексную страницу с соседней
индексной страницей. Значение по умолчанию 50.</p>

<p><code>MERGE_THRESHOLD</code> может также быть определен для индексов
таблиц <code>InnoDB</code> через
<a href="#alter-table"><code>ALTER TABLE</code></a> (опция
<code>COMMENT</code>). <code>MERGE_THRESHOLD</code>
может быть определен для индивидуального индекса через использование
<a href="#create-index"><code>CREATE INDEX</code></a> или опции
<code>COMMENT</code> в <a href="#create-table"><code>CREATE TABLE
</code></a> или <a href="#alter-table"><code>ALTER TABLE</code></a>.
См. <a href="innodb.htm#index-page-merge-threshold">раздел 16.6.11</a>.</li>

<li><code>COMPRESSION</code></p>
<p>Алгоритм сжатия, используемый для сжатия уровня страницы таблиц
<code>InnoDB</code>. Поддержанные значения включают
<code>Zlib</code>, <code>LZ4</code> и <code>None</code>. Атрибут
<code>COMPRESSION</code> был начат с прозрачной особенности сжатия страницы.
Сжатие страницы поддержано только с <code>InnoDB</code>, которые находятся в
табличных пространствах <a href="glossary.htm#glos_file_per_table">
file-per-table</a> и доступны только на Linux и Windows, которые поддерживают
редкие файлы и hole punching. См.
<a href="innodb.htm#innodb-page-compression">раздел 16.9.2</a>.</li>

<li><code>CONNECTION</code></p>
<p>Строка подключения для таблицы <code>FEDERATED</code>.</p>
<p>Более старые версии MySQL использовали опцию <code>COMMENT</code>
для строки подключения.</p></li>

<li><code>DATA DIRECTORY</code>, <code>INDEX DIRECTORY</code></p>
<p>Для <code>InnoDB</code> <code>DATA DIRECTORY='<em><code>directory</code>
</em>'</code> позволяет Вам создавать табличные пространства file-per-table
вне каталога данных MySQL. В пределах каталога, который Вы определяете, MySQL
создает подкаталог, соответствующий имени базы данных, а в его этого файл
<code>.ibd</code> для таблицы. Опция
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>innodb_file_per_table
</code></a> должна быть включена для работы <code>DATA
DIRECTORY</code> с <code>InnoDB</code>. Полный путь к каталогу должен быть
определен. См. <a href="innodb.htm#tablespace-placing">раздел 16.7.5</a>.</p>

<p>Создавая таблицы <code>MyISAM</code>, Вы можете использовать
<code>DATA DIRECTORY='<em><code>directory</code></em>'</code>,
<code>INDEX DIRECTORY='<em><code>directory</code></em>'</code> или обе.
Они определяют, куда поместить файлы <code>MyISAM</code>.
В отличие от таблицы <code>InnoDB</code>, MySQL не создает
подкаталоги, которые соответствуют имени базы данных, создавая таблицу
<code>MyISAM</code> с <code>DATA DIRECTORY</code> или <code>INDEX
DIRECTORY</code>. Файлы создаются в каталоге, который определен.</p>

<p>Опции табличного уровня <code>DATA DIRECTORY</code> и
<code>INDEX DIRECTORY</code> проигнорированы для разделенных таблиц (Bug
#32091).</p>

<p>Эти опции работают только, когда Вы не используете
<a href="server.htm#option_mysqld_symbolic-links"><code>
--skip-symbolic-links</code></a>.
У Вашей операционной системы должен также быть безопасный для потоков
вызов <code>realpath()</code>. См.
<a href="optimiz.htm#symbolic-links-to-tables">раздел 9.12.2.2</a>.</p>

<p>Если <code>MyISAM</code> составлена без <code>DATA DIRECTORY</code>,
фпйл <code>.MYD</code> создается в каталоге базы данных. По умолчанию, если
<code>MyISAM</code> находит существующий файл <code>.MYD</code>
в этом случае, он перезаписывает его. То же самое относится к файлам
<code>.MYI</code> для таблиц, составленных без <code>INDEX DIRECTORY</code>.
Чтобы подавить это поведение, запустите сервер с
<a href="server.htm#sysvar_keep_files_on_create"><code>
--keep_files_on_create</code></a>, тогда <code>MyISAM</code> не будет
перезаписывать существующие файлы и возвращает ошибку вместо этого.</p>

<p>Если <code>MyISAM</code> составлена с опцией
<code>DATA DIRECTORY</code> или <code>INDEX DIRECTORY</code>
и существующий файл <code>.MYD</code> или <code>.MYI</code> найден, MyISAM
всегда возвращает ошибку. Это не будет перезаписывать
файл в указанном каталоге.</p>

<p>Вы не можете использовать пути, которые содержат каталог данных MySQL с
<code>DATA DIRECTORY</code> или <code>INDEX DIRECTORY</code>.
Это включает разделенные таблицы и отдельное табличное разделение (см. Bug
#32167).</p></li>

<li><code>DELAY_KEY_WRITE</code></p>
<p>Установите это в 1, если Вы хотите задержать ключевые обновления для
таблицы, пока таблица не закрыта. См. описание
<a href="server.htm#sysvar_delay_key_write"><code>delay_key_write</code></a>
в <a href="server.htm#server-system-variables">разделе 6.1.5</a>
(только <code>MyISAM</code>).</li>

<li><code>ENCRYPTION</code></p>
<p>Установите опцию <code>ENCRYPTION</code> в <code>'Y'</code>, чтобы
включить шифрованию данных на уровне страницы для таблиц <code>InnoDB</code>
в табличном пространстве <a href="glossary.htm#glos_file_per_table">
file-per-table</a>. Значения опции не являются чувствительными к регистру.
<code>ENCRYPTION</code> была введена с особенностью шифрования табличного
пространства <code>InnoDB</code>, см.
<a href="innodb.htm#innodb-tablespace-encryption">раздел 16.7.10</a>. Плагин
<code>keyring_file</code> должен быть загружен для
использования опции <code>ENCRYPTION</code>.</li>

<li><code>INSERT_METHOD</code></p>
<p>Если Вы хотите вставить данные в таблицу <code>MERGE</code>,
Вы должны определить с <code>INSERT_METHOD</code>
таблицу, в которую должна быть вставлена строка. <code>INSERT_METHOD</code>
опция, полезная для таблиц <code>MERGE</code>.
Используйте значение <code>FIRST</code> или <code>LAST</code>, чтобы
вставить в первую или последнюю таблицу, или значение <code>NO</code>, чтобы
не вставлять вообще. См. <a href="storage.htm#merge-storage-engine">раздел
17.7</a>.</li>

<li><code>KEY_BLOCK_SIZE</code></p>
<p>Для <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>
<code>KEY_BLOCK_SIZE</code> произвольно определяет размер в байтах, чтобы
использовать для индексных ключевых блоков. Значение обработано как
подсказка, иной размер может использоваться в случае необходимости.
<code>KEY_BLOCK_SIZE</code> определенное для индивидуального индекса,
переопределяет значение на уровне таблицы.</p>

<p>Для <a href="innodb.htm"><code>InnoDB</code></a>
<code>KEY_BLOCK_SIZE</code> произвольно определяет размер
<a href="glossary.htm#glos_page">страницы</a>
(в килобайтах), чтобы использовать для
<a href="glossary.htm#glos_compression">сжатых</a> таблиц. Значение
обработано как подсказка, иной размер может использоваться в случае
необходимости. <code>KEY_BLOCK_SIZE</code> может быть только меньше или равно
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>. Значение 0 представляет сжатый размер страницы по умолчанию, который
является половиной <a href="innodb.htm#sysvar_innodb_page_size"><code>
innodb_page_size</code></a>. В зависимости от
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>, возможные значения <code>KEY_BLOCK_SIZE</code> включают 0, 1, 2, 4, 8 и
16. См. <a href="innodb.htm#innodb-table-compression">раздел 16.9.1</a>.</p>

<p>Oracle рекомендует включить <a href="innodb.htm#sysvar_innodb_strict_mode">
<code>innodb_strict_mode</code></a>, определяя <code>KEY_BLOCK_SIZE</code>
для <code>InnoDB</code>. Когжда
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> включен, определение недопустимого <code>KEY_BLOCK_SIZE</code>
возвращает ошибку. Если <a href="innodb.htm#sysvar_innodb_strict_mode"><code>
innodb_strict_mode</code></a> выключен, недопустимое значение
<code>KEY_BLOCK_SIZE</code> вернет предупреждение, а опция
<code>KEY_BLOCK_SIZE</code> проигнорирована.</p>

<p><code>InnoDB</code> поддерживает <code>KEY_BLOCK_SIZE</code> только
на табличном уровне.</p>
<p><code>KEY_BLOCK_SIZE</code> не поддержан с 32k и 64k
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>. Табличное сжатие не поддерживает эти размеры страниц.</p>
<p>С MySQL 8.0.0 <code>InnoDB</code> не поддерживает
<code>KEY_BLOCK_SIZE</code>, составляя временные таблицы.</li>

<li><code>MAX_ROWS</code></p>
<p>Максимальное количество строк, которое Вы планируете сохранить в таблице.
Это не жесткий предел, а скорее подсказка механизму хранения, что таблица
должна быть в состоянии сохранить, по крайней мере, так много строк.</p>
<p>Максимум <code>MAX_ROWS</code> 4294967295,
большие значения являются усеченными к этому пределу.</li>

<li><code>MIN_ROWS</code></p>
<p>Минимальное число строк, которое Вы планируете сохранить в таблице.
Механизм хранения <a href="storage.htm#memory-storage-engine"><code>MEMORY
</code></a> использует эту опцию в качестве подсказки
об использовании памяти.</li>

<li><code>PACK_KEYS</code></p>
<p><code>PACK_KEYS</code> вступает в силу только с <code>MyISAM</code>.
Установите эту опцию в 1, если Вы хотите иметь меньший индекс.
Это обычно делает обновления медленнее и читает быстрее. Установка опции к 0
отключает всю упаковку ключей. Установка этого к <code>DEFAULT</code>
говорит механизму хранения упаковывать только большие столбцы
<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#binary-varbinary"><code>BINARY</code></a> или
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>.</p>

<p>Если Вы не используете <code>PACK_KEYS</code>, значение по умолчанию
должно упаковать строки, но не числа. Если Вы используете
<code>PACK_KEYS=1</code>, числа упакованы также.</p>

<p>При упаковке двоичных числовых ключей MySQL использует сжатие префиксов:
</p>
<ul><li><p>Каждый ключ нуждается в одном дополнительном байте, чтобы указать,
сколько байтов предыдущего ключа те же самые для следующего ключа.</li>
<li>Указатель на строку сохранен в порядке "старший байт сначала"
непосредственно после ключа, чтобы улучшить сжатие.</p></li></ul>

<p>Это означает, что, если у Вас есть много равных ключей на двух
последовательных строках, все последующие ключи обычно берут только два байта
(включая указатель на строку). Сравните это с обычным случаем, где следующие
ключи берут по <code>storage_size_for_key + pointer_size</code> (где
размер указателя обычно 4). Наоборот, Вы извлекаете существенную пользу из
сжатия, только если у Вас есть много чисел, которые являются теми же самыми.
Если все ключи полностью отличаются, Вы используете один байт на ключ больше,
если ключ не может иметь <code>NULL</code>. В этом случае упакованная длина
ключа сохранена в том же самом байте, который используется, чтобы отметить,
что ключ <code>NULL</code>.</li>

<li><code>PASSWORD</code></p>
<p>Не используется.</li>
<li><code>ROW_FORMAT</code></p>
<p>Определяет физический формат, в котором сохранены строки. Выбор отличается
в зависимости от механизма хранения, используемого для таблицы.</p>

<p>Для <code>InnoDB</code>:</p>
<ul><li><p>Формат строки по умолчанию определен
<a href="innodb.htm#sysvar_innodb_default_row_format"><code>
innodb_default_row_format</code></a>,
у которого есть настройка по умолчанию <code>DYNAMIC</code>.
Формат строки по умолчанию используется, когда опция
<code>ROW_FORMAT</code> не определена или когда используется
<code>ROW_FORMAT=DEFAULT</code>.</p>

<p>Если <code>ROW_FORMAT</code> не определена или
<code>ROW_FORMAT=DEFAULT</code>, операции, которые пересоздают таблицу, также
тихо изменяют формат строки таблицы к значению по умолчанию, определенному
<a href="innodb.htm#sysvar_innodb_default_row_format"><code>
innodb_default_row_format</code></a>. См.
<a href="innodb.htm#innodb-row-format-specification">раздел 16.10.2</a>.</li>

<li>Для более эффективного хранения типов данных, особенно
<a href="types.htm#blob"><code>BLOB</code></a>, лучше
<code>DYNAMIC</code>. См. <a href="innodb.htm#innodb-row-format-dynamic">
раздел 16.10.3</a>.</li>

<li>Чтобы включить сжатие для <code>InnoDB</code>, определите
<code>ROW_FORMAT=COMPRESSED</code>. Опция <code>ROW_FORMAT=COMPRESSED</code>
не поддержана, составляя временные таблицы. См.
<a href="innodb.htm#innodb-compression">раздел 16.9</a>.</li>

<li>Формат строки, используемый в более старых версиях MySQL, можно все еще
требовать, определяя формат <code>REDUNDANT</code>.</li>
<li>Когда Вы определяете <code>ROW_FORMAT</code> не по умолчанию,
рассмотрите также включение <a href="innodb.htm#sysvar_innodb_strict_mode">
<code>innodb_strict_mode</code></a>.</li>

<li><code>ROW_FORMAT=FIXED</code> не поддержан. Если
<code>ROW_FORMAT=FIXED</code> определен в то время, как
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> выключен, <code>InnoDB</code> выпускает предупреждение и
предполагает <code>ROW_FORMAT=COMPACT</code>. Если
<code>ROW_FORMAT=FIXED</code> определен в то время, как
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> включен, <code>InnoDB</code> возвращает ошибку.</li>
<li>См. <a href="innodb.htm#innodb-row-format">раздел 16.10</a>.
</p></li></ul>

<p>Для <code>MyISAM</code> значение опции может быть
<code>FIXED</code> или <code>DYNAMIC</code>
для формата строки статической или переменной длины.
<a href="programs.htm#myisampack"><span><strong>myisampack</strong></span>
</a> устанавливает тип в <code>COMPRESSED</code>. См.
<a href="storage.htm#myisam-table-formats">раздел 17.2.3</a>.</p>

<p>Выполняя <a href="#create-table"><code>CREATE TABLE</code></a>,
если Вы определяете формат строки, который не поддержан механизмом хранения,
который используется для таблицы, таблица создается, используя формат строки
по умолчанию для механизма хранения. Информация в этом столбце ответа
<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a>
показывает фактический используемый формат строки. Это может отличаться от
значения в столбце <code>Create_options</code>, поскольку оригинал
<a href="#create-table"><code>CREATE TABLE</code></a>
определения сохранен во время создания.</p></li>

<li><code>STATS_AUTO_RECALC</code></p>
<p>Определяет, вычислить ли повторно автоматически
<a href="glossary.htm#glos_persistent_statistics">постоянную статистику
</a> для <code>InnoDB</code>. <code>DEFAULT</code>
заставляет постоянную установку статистики для таблицы быть определенной
опцией <a href="innodb.htm#sysvar_innodb_stats_auto_recalc"><code>
innodb_stats_auto_recalc</code></a>. Значение <code>1</code> указывает, что
статистика повторно вычислена, когда 10% данных в таблице изменились.
Значение <code>0</code> предотвращает автоматический пересчет для этой
таблицы, с этой установкой используйте <a href="#analyze-table"><code>
ANALYZE TABLE</code></a>, чтобы повторно вычислить статистику после создания
существенных изменений таблицы. Для получения дополнительной информации о
постоянной статистике см. <a href="innodb.htm#innodb-persistent-stats">раздел
16.6.10.1</a>.</li>

<li><code>STATS_PERSISTENT</code></p>
<p>Определяет, включить ли
<a href="glossary.htm#glos_persistent_statistics">постоянную статистику
</a> для <code>InnoDB</code>. <code>DEFAULT</code> заставляет постоянную
статистику для таблицы быть определенной опцией
<a href="innodb.htm#sysvar_innodb_stats_persistent"><code>
innodb_stats_persistent</code></a>. Значение <code>1</code>
включает постоянную статистику для таблицы, в то время как значение
<code>0</code> выключает. После включения постоянной статистике через
<code>CREATE TABLE</code> или <code>ALTER TABLE</code> скомандуйте
<a href="#analyze-table"><code>ANALYZE TABLE</code></a>, чтобы
вычислить статистику после загрузки представительных данных в таблицу. Для
получения дополнительной информации о постоянной статистике см.
<a href="innodb.htm#innodb-persistent-stats">раздел 16.6.10.1</a>.</li>

<li><code>STATS_SAMPLE_PAGES</code></p>
<p>Число индексных страниц, оценивая количество элементов и другую статистику
для индексированного столбца, такую как вычисленная
<a href="#analyze-table"><code>ANALYZE TABLE</code></a>. См.
<a href="innodb.htm#innodb-persistent-stats">раздел 16.6.10.1</a>.</li>

<li><code>TABLESPACE</code></p>
<p><code>TABLESPACE</code> может использоваться, чтобы составить таблицу в
существующем общем табличном пространстве, табличном пространстве
file-per-table или системном табличном пространстве.
<pre>
CREATE TABLE <em><code>tbl_name</code></em> ...
       TABLESPACE [=] <em><code>tablespace_name</code></em>
</pre>
См. <a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</p>

<p><code><em><code>tablespace_name</code></em></code>
чувствительный к регистру идентификатор. Это может быть заключено в кавычки.
Символ наклонной черты вправо (<span><span>/</span></span>)
не разрешен. Имена, начинающиеся с <span><span>innodb_</span></span>
зарезервированы для специального использования.</p>

<p><code>TABLESPACE</code> может использоваться, чтобы назначить
табличное разделение или подразделение к
<a href="glossary.htm#glos_general_tablespace">общему табличному
пространству</a>, отдельному табличному пространству file-per-table
или системному табличному пространству. Все разделение должно принадлежать
тому же самому механизму хранения.</p>

<p>Табличное пространство, определенное на табличном уровне, становится
табличным пространством по умолчанию для нового разделения и подразделения.
Табличное пространство по умолчанию может быть переопределено, определяя
табличное пространство на уровне разделения или подразделения в
<a href="#create-table"><code>CREATE TABLE</code></a> или
<a href="#alter-table"><code>ALTER TABLE</code></a>. Следующий пример
показывает табличные пространства, определенные на табличном
уровне и уровне разделения.
<pre>
mysql&gt; CREATE TABLE t1 (a INT NOT NULL, PRIMARY KEY (a))
    -&gt;        ENGINE=InnoDB TABLESPACE ts1
    -&gt;        PARTITION BY RANGE (a) PARTITIONS 3 (
    -&gt;        PARTITION P1 VALUES LESS THAN (2),
    -&gt;        PARTITION P2 VALUES LESS THAN (4) TABLESPACE ts2,
    -&gt;        PARTITION P3 VALUES LESS THAN (6) TABLESPACE ts3);
</pre>
См. <a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</p>

<p>Чтобы составить таблицу в системном табличном пространстве, определите
<code>innodb_system</code> как имя табличного пространства.
<pre>
CREATE TABLE <em><code>tbl_name</code></em> ... TABLESPACE [=] innodb_system
</pre>

Используя <code>TABLESPACE [=] innodb_system</code>,
Вы можете поместить таблицу любого несжатого формата строки в системном
табличном пространстве, независимо от
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>
innodb_file_per_table</code></a>.
Например, Вы можете добавить таблицу с <code>ROW_FORMAT=DYNAMIC</code>
к системному табличному пространству, используя
<code>TABLESPACE [=] innodb_system</code>.</p>

<p>Чтобы составить таблицу в табличном пространстве file-per-table,
определите <code>innodb_file_per_table</code>
как имя табличного пространства.
<pre>
CREATE TABLE <em><code>tbl_name</code></em> ... TABLESPACE [=] innodb_file_per_table
</pre>

<p>Если включена <a href="innodb.htm#sysvar_innodb_file_per_table"><code>
innodb_file_per_table</code></a>, Вы не должны определять
<code>TABLESPACE=innodb_file_per_table</code> при создании
табличного пространства file-per-table. Таблицы <code>InnoDB</code>
составлены в табличных пространствах file-per-table по умолчанию, когда
включена опция <a href="innodb.htm#sysvar_innodb_file_per_table">
<code>innodb_file_per_table</code></a>.</p>

<p><code>DATA DIRECTORY</code> допустим с <code>CREATE TABLE ...
TABLESPACE=innodb_file_per_table</code>, но иное не поддержано для
использования в комбинации с опцией <code>TABLESPACE</code>.</p>

<p><code>TABLESPACE</code> поддержана с
<a href="#alter-table"><code>ALTER TABLE</code></a> и
<a href="#alter-table"><code>ALTER TABLE ... REORGANIZE PARTITION
</code></a>, которые могут использоваться, чтобы переместить таблицы и
разделение от одного табличного пространства в другое, соответственно. Для
получения дополнительной информации см.
<a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</li>

<li><a href="#union"><code>UNION</code></a></p>
<p><a href="#union"><code>UNION</code></a>
используется, когда Вы хотите получить доступ к набору идентичных таблиц
<code>MyISAM</code> как к одной. Это работает только с <code>MERGE</code>.
См. <a href="storage.htm#merge-storage-engine">раздел 17.7</a>.</p>

<p>Вы должны иметь привилегии <a href="security.html#priv_select"><code>
SELECT</code></a>, <a href="security.html#priv_update"><code>UPDATE</code>
</a> и <a href="security.html#priv_delete"><code>DELETE</code></a>
для таблиц, которые Вы отображаете на <code>MERGE</code>.</p>

<p>Прежде, все используемые таблицы должны были быть в той же самой базе
данных, где <code>MERGE</code>. Это ограничение больше не применяется.
</p></li></ul>

<h4><a name="create-table-partitioning"></a>Составление разделенных таблиц
</h4>
<p><em><code>partition_options</code></em> может использоваться, чтобы
управлять разделением таблицы, составленной с
<a href="#create-table"><code>CREATE TABLE</code></a>.</p>

<p>Не все варианты в синтаксисе для <em><code>partition_options</code></em>
в начале этого раздела доступны для всех типов разделения. Пожалуйста, см.
списки для следующих отдельных типов для информации, определенной для каждого
типа, и см. <a href="partit.htm">главу 20</a> для подробностей.</p>

<p>Если используется, <em><code>partition_options</code></em> начинается с
<code>PARTITION BY</code>. Этот пункт содержит функцию, которая используется,
чтобы определить разделение, функция возвращает целочисленное значение в
пределах от 1 до <em><code>num</code></em>, где <em><code>num</code></em>
число разделов. Максимальное количество определяемых пользователем разделов,
которые может содержать таблица, 1024, число подразделов рассматривается
позже и включено в этот максимум. Выбор, который доступен для этой функции в
MySQL 8.0, показывают в следующем списке:</p>

<ul><li><p><code>HASH(<em><code>expr</code></em>)</code>:
Хеширует один или более столбцов, чтобы создать ключ для размещения и
расположения строк. <em><code>expr</code></em> это выражение, использующее
один или более столбцов таблицы. Это может быть любым допустимым выражением
MySQL (включая функции MySQL), которое приводит к единственному
целочисленному значению. Например, эти два допустимы для
<a href="#create-table"><code>CREATE TABLE</code></a>
<code>PARTITION BY HASH</code>:
<pre>
CREATE TABLE t1 (col1 INT, col2 CHAR(5)) PARTITION BY HASH(col1);
CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATETIME)
       PARTITION BY HASH (YEAR(col3));
</pre>
Вы не можете использовать также <code>VALUES LESS THAN</code> или
<code>VALUES IN</code> с <code>PARTITION BY HASH</code>.</p>

<p><code>PARTITION BY HASH</code> использует остаток от
<em><code>expr</code></em> разделенный на число разделов (то есть, модуль).
Для примеров и дополнительной информации см.
<a href="partit.htm#partitioning-hash">раздел 20.2.4</a>.</p>

<p><code>LINEAR</code> влечет за собой несколько различный алгоритм. В
этом случае номер раздела, в котором сохранена строка, вычислен как результат
одной или более логических операций <a href="funct.htm#operator_and"><code>
AND</code></a>. См. <a href="partit.htm#partitioning-linear-hash">раздел
20.2.4.1</a>.</li>

<li><code>KEY(<em><code>column_list</code></em>)</code>:
Это подобно <code>HASH</code>, за исключением того, что MySQL поставляет
хеширующую функцию, чтобы гарантировать даже распределение данных.
<em><code>column_list</code></em> просто список из 1 или более столбцов
таблицы (максимум: 16). Этот пример показывает простую таблицу,
разделенную ключом, с 4 разделами:
<pre>
CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)
       PARTITION BY KEY(col3)
       PARTITIONS 4;
</pre>

Для таблиц, которые разделены ключом, Вы можете использовать линейное
разделение при использовании <code>LINEAR</code>. Это имеет тот же самый
эффект, как с таблицами, которые разделены <code>HASH</code>.
Таким образом, номер раздела найден, используя оператор
<a href="funct.htm#operator_bitwise-and"><code>&amp;</code></a> (см. разделы
<a href="partit.htm#partitioning-linear-hash">20.2.4.1</a> и
<a href="partit.htm#partitioning-key">20.2.5</a>). Этот пример использует
линейное разделение ключом, чтобы распределить данные между 5 разделами:
<pre>
CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE)
       PARTITION BY LINEAR KEY(col3)
       PARTITIONS 5;
</pre>

Опция <code>ALGORITHM={1|2}</code> поддержана с
<code>[SUB]PARTITION BY [LINEAR] KEY</code>. <code>ALGORITHM=1</code>
заставляет сервер использовать те же самые хеширующие ключ функции, как в
5.1, <code>ALGORITHM=2</code> значит, что сервер использует хеширующие ключ
функции, осуществленные и используемые по умолчанию для нового варианта
<code>KEY</code> в MySQL 5.5 и позже.
Разделенные таблицы, составленные с хеширующими ключ функциями, используемыми
в MySQL 5.5 и позже, не могут использоваться MySQL 5.1.
Неопределение опции имеет тот же самый эффект, как использование
<code>ALGORITHM=2</code>. Эта опция предназначена для использования в
основном, обновляя таблицы, разделенные <code>[LINEAR] KEY</code>
между MySQL 5.1 и более поздними версиями MySQL, или для того, чтобы
составить таблицы, разделенные <code>KEY</code> или <code>LINEAR KEY</code>
в MySQL 5.5 или более позднем сервере, который может использоваться на MySQL
5.1. См. <a href="#alter-table-partition-operations">раздел
14.1.7.1</a>.</p>

<p><a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span>
</a> в MySQL 5.7 (и позже) пишет эту опцию в комментарии версии:
<pre>
CREATE TABLE t1 (a INT)
/*!50100 PARTITION BY KEY */ <span><em>/*!50611 ALGORITHM = 1 */</em></span> /*!50100 ()
  PARTITIONS 3 */
</pre>

Это заставляет MySQL 5.6.10 и более ранние серверы игнорировать опцию,
которая иначе вызвала бы синтаксическую ошибку в тех версиях. Если Вы
планируете загрузить дамп, сделанный на MySQL 5.7, где Вы используете
таблицы, которые разделены или подразделены <code>KEY</code> в MySQL 5.6
до 5.6.11, см. <a href="../../../dev.mysql.com/doc/refman/5.6/en/upgrading-from-previous-series.html"
target="_top">Changes Affecting Upgrades to MySQL 5.6</a>.
Информация, найденная там, также применяется, если Вы загружаете дамп,
содержащий разделенные или подразделенные <code>KEY</code>
таблицы, сделанные в MySQL 5.7-5.6.11 или позже в MySQL 5.5.30
или более ранний сервер.</p>

<p>В MySQL 5.6.11 и позже <code>ALGORITHM=1</code>
показан когда необходимо в выводе
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>
использование версионного комментария в той же самой манере, как в
<a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span></a>.
<code>ALGORITHM=2</code> всегда опускается из вывода <code>SHOW CREATE TABLE
</code>, даже если эта опция была определена, составляя оригинальную таблицу.
</p>

<p>Вы не можете использовать также <code>VALUES LESS THAN</code> или
<code>VALUES IN</code> с <code>PARTITION BY KEY</code>.</li>
<li><code>RANGE(<em><code>expr</code></em>)</code>: В этом случае
<em><code>expr</code></em> показывает диапазон значений, используя ряд
операторов <code>VALUES LESS THAN</code>. Используя разделение диапазона, Вы
должны определить по крайней мере одно использование разделения
<code>VALUES LESS THAN</code>. Вы не можете использовать
<code>VALUES IN</code> с разделением диапазона.</p>

<p>Для таблиц, разделенных <code>RANGE</code>,
<code>VALUES LESS THAN</code> должен использоваться или с целым числом
или с выражением, которое приводит к единственному целочисленному значению.
В MySQL 8.0 Вы можете преодолеть это ограничение в таблице, которая
определена, используя <code>PARTITION BY RANGE COLUMNS</code>,
как описано позже в этом разделе.</p>

<p>Предположите, что у Вас есть таблица, которую Вы хотите разделить на
столбце, содержащем значения года, согласно следующей схеме.</p>
<table border="1">
<thead><tr><th scope="col">Номер раздела</th><th scope="col">Диапазон лет
</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>1990 и раньше</td></tr>
<tr><td scope="row">1</td><td>1991-1994</td></tr>
<tr><td scope="row">2</td><td>1995-1998</td></tr>
<tr><td scope="row">3</td><td>1999-2002</td></tr>
<tr><td scope="row">4</td><td>2003-2005</td></tr>
<tr><td scope="row">5</td><td>2006 и позже</td></tr></tbody></table>

<p>Таблица, осуществляющая такую схему разделения, может быть создана
<a href="#create-table"><code>CREATE TABLE</code></a>:
<pre>
CREATE TABLE t1 (year_col INT, some_data INT)
       PARTITION BY RANGE (year_col) (PARTITION p0 VALUES LESS THAN (1991),
                 PARTITION p1 VALUES LESS THAN (1995),
                 PARTITION p2 VALUES LESS THAN (1999),
                 PARTITION p3 VALUES LESS THAN (2002),
                 PARTITION p4 VALUES LESS THAN (2006),
                 PARTITION p5 VALUES LESS THAN MAXVALUE);
</pre>

<code>PARTITION ... VALUES LESS THAN ...</code>
работают последовательным способом. <code>VALUES LESS THAN MAXVALUE</code>,
чтобы определить <span><span>левые</span></span>
значения, которые больше, чем максимальное значение, определенное иначе.</p>

<p><code>VALUES LESS THAN</code> работают последовательно в манере, подобной
<code>case</code> в <code>switch ... case</code> блоке (как в языках
C, Java и PHP). Таким образом, пункты должны быть расположены таким способом,
которым верхний предел определил в каждом последовательном
<code>VALUES LESS THAN</code> значение больше, чем из предыдущего, со ссылкой
<code>MAXVALUE</code> на последнее из всех в списке.</li>

<li><code>RANGE COLUMNS(<em><code>column_list</code></em>)</code>:
Эта разновидность <code>RANGE</code> облегчает сокращение разделения для
запросов, используя условия диапазона на многих столбцах (то есть, имея такие
условия, как <code>WHERE a = 1 AND b &lt; 10</code> или
<code>WHERE a = 1 AND b = 10 AND c &lt; 10</code>).
Это позволяет Вам определить диапазоны значения при использовании списка
столбцов в <code>COLUMNS</code> и ряд значений столбцов в каждом
<code>PARTITION ... VALUES LESS THAN (<em><code>value_list</code></em>)
</code>. В самом простом случае этот набор состоит из единственного столбца.
Максимальное количество столбцов, на которые можно сослаться в
<em><code>column_list</code></em> и <em><code>value_list</code></em> 16.</p>

<p><em><code>column_list</code></em> используемый в <code>COLUMNS</code>
может содержать только названия столбцов, каждый столбец в списке должен быть
одним из следующих типов данных MySQL: типы целого числа, строковые и типы
времени или даты. Использование столбцов
<code>BLOB</code>, <code>TEXT</code>, <code>SET</code>, <code>ENUM</code>,
<code>BIT</code> или пространственных типов не разрешено, столбцы, которые
используют типы числа с плавающей запятой, также не разрешены. Вы также не
можете использовать функции или арифметические выражения в
<code>COLUMNS</code>.</p>

<p><code>VALUES LESS THAN</code> , используемый в определении разделения,
должен определить литеральное значение для каждого столбца, который
появляется в <code>COLUMNS()</code>,
то есть, список значений для каждого <code>VALUES LESS THAN</code>
должен содержать то же самое число значений, сколько есть столбцов,
перечисленных в <code>COLUMNS</code>. Попытка использовать больше или меньше
значений в <code>VALUES LESS THAN</code>, чем есть в <code>COLUMNS</code>
заставляет запрос терпеть неудачу с ошибкой <span>Inconsistency
in usage of column lists for partitioning...</span>.
Вы не можете использовать <code>NULL</code>
для любого значения, появляющегося в <code>VALUES LESS THAN</code>.
Возможно использовать <code>MAXVALUE</code>
не раз для любого столбца, кроме первого, как показано в этом примере:
<pre>
CREATE TABLE rc (a INT NOT NULL, b INT NOT NULL)
PARTITION BY RANGE COLUMNS(a,b) (PARTITION p0 VALUES LESS THAN (10,5),
          PARTITION p1 VALUES LESS THAN (20, 10),
          PARTITION p2 VALUES LESS THAN (MAXVALUE, 15),
          PARTITION p3 VALUES LESS THAN (MAXVALUE, MAXVALUE));
</pre>

Каждое значение в списке значения <code>VALUES LESS THAN</code>
должно соответствовать типу соответствующего столбца точно: никакое
преобразование не сделано. Например, Вы не можете использовать строку
<code>'1'</code> для значения, которое соответствует столбцу, который
использует тип целого числа (Вы должны использовать цифру <code>1</code>),
и при этом Вы не можете использовать цифру <code>1</code>
для значения, которое соответствует столбцу, который использует строковый тип
(в таком случае, Вы должны использовать заключенную в кавычки строку
<code>'1'</code>).</p></li>

<li><code>LIST(<em><code>expr</code></em>)</code>:
Это полезно, назначая разделение, основанное на столбце таблицы с
ограниченным набором возможных значений, например, статус или код страны.
В таком случае все строки, имеющие отношение к определенному статусу
или стране, могут быть назначены на единственный раздел
или раздел может быть сохранен для определенного набора статусов
или стран. Это подобно <code>RANGE</code>, за исключением того, что только
<code>VALUES IN</code> может использоваться, чтобы определить допустимые
значения для каждого раздела.</p>

<p><code>VALUES IN</code> используется со списком значений, которые будут
соответствующими. Например, Вы могли создать схему разделения,
такую как следующее:
<pre>
CREATE TABLE client_firms (id INT, name VARCHAR(35))
       PARTITION BY LIST (id) (PARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21),
                 PARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22),
                 PARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23),
                 PARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24));
</pre>

Используя разделение списка, Вы должны определить по крайней мере одно
использование <code>VALUES IN</code>. Вы не можете использовать
<code>VALUES LESS THAN</code> с <code>PARTITION BY LIST</code>.</p>

<p>Для таблиц, разделенных <code>LIST</code> список значений, используемый с
<code>VALUES IN</code>, должен состоять только из целочисленных значений. В
MySQL 8.0 Вы можете преодолеть это ограничение использованием <code>LIST
COLUMNS</code>, который описан позже в этом разделе.</p></li>

<li><code>LIST COLUMNS(<em><code>column_list</code></em>)</code>:
Это разновидность <code>LIST</code> облегчает сокращение разделения для
запросов, используя условия сравнения на многих столбцах (то есть, имея
условия вроде <code>WHERE a = 5 AND b = 5</code> или
<code>WHERE a = 1 AND b = 10 AND c = 5</code>).
Это позволяет Вам определить значения во многих
столбцах при использовании списка столбцов в <code>COLUMNS</code>
и ряд значений столбцов в каждом <code>PARTITION ... VALUES IN
(<em><code>value_list</code></em>)</code>.</p>

<p>Правила относительно типов данных для списка столбца, используемого в
<code>LIST COLUMNS(<em><code>column_list</code></em>)</code> и
списке значений в <code>VALUES IN(<em><code>value_list</code></em>)</code>
те же самые, как для списка столбцов, используемого в <code>RANGE
COLUMNS(<em><code>column_list</code></em>)</code> и списке значений в
<code>VALUES LESS THAN(<em><code>value_list</code></em>)</code>,
соответственно, за исключением того, что в <code>VALUES IN</code>
<code>MAXVALUE</code> не разрешен, и Вы можете использовать <code>NULL</code>.
</p>

<p>Есть одно важное различие между списком значений, используемых для
<code>VALUES IN</code> с <code>PARTITION BY LIST COLUMNS</code>
в противоположность тому, когда это используется с
<code>PARTITION BY LIST</code>. В <code>PARTITION BY LIST COLUMNS</code>
каждый элемент в <code>VALUES IN</code> должен быть рядом значений столбцов,
число значений в каждом наборе должно быть тем же самым, как число столбцов,
используемых в <code>COLUMNS</code>, типы данных этих значений должны
соответствовать таковым из столбцов (и в том же самом порядке). В самом
простом случае набор состоит из единственного столбца. Максимальное
количество столбцов, которые могут использоваться в
<em><code>column_list</code></em> и в элементах, составляющих
<em><code>value_list</code></em> 16.</p>

<p>Таблица определена следующим <code>CREATE TABLE</code>
обеспечивает пример табличного использования <code>LIST COLUMNS</code>:
<pre>
CREATE TABLE lc (a INT NULL, b INT NULL)
       PARTITION BY LIST COLUMNS(a,b)
         (PARTITION p0 VALUES IN((0,0), (NULL,NULL)),
          PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2)),
          PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1)),
          PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3)));
</pre></li>

<li>Число разделов может произвольно быть определено с
<code>PARTITIONS <em><code>num</code></em></code>, где
<em><code>num</code></em> число разделов. Если этот пункт
<span><em>и</em></span> любой <code>PARTITION</code> используются,
<em><code>num</code></em> должно быть равным общему количеству разделов,
которое объявлено, используя <code>PARTITION</code>.</p>

<p>Используете ли Вы <code>PARTITIONS</code>
в составлении таблицы, которая разделена <code>RANGE</code> или
<code>LIST</code>, Вы должны все еще включить по крайней мере один
<code>PARTITION VALUES</code> в табличном определении (см. ниже).</p></li>

<li>Раздел может быть произвольно разделен на много подразделов. Это может
быть обозначено при использовании дополнительного
<code>SUBPARTITION BY</code>. Подраздел может быть сделан
<code>HASH</code> или <code>KEY</code>. Любой из них может быть
<code>LINEAR</code>. Они работают таким же образом, как ранее описано для
эквивалентных типов разделов. Это не относится к подразделам
<code>LIST</code> или <code>RANGE</code>.</p>

<p>Число подразделов может быть обозначено, используя
<code>SUBPARTITIONS</code> с целочисленным значением.</li>
<li>Строгая проверка значения, используемого в <code>PARTITIONS</code> или
<code>SUBPARTITIONS</code> применена, и это значение должно
придерживаться следующих правил:</p>

<ul><li><p>Значение должно быть положительным целым числом, отличным от нуля.
</li>
<li>Никакие начальные нули не разрешены.</li>
<li>Значение должно быть целым числом и не может
быть выражением. Например, <code>PARTITIONS 0.2E+01</code> не разрешен, даже
при том, что <code>0.2E+01</code> это <code>2</code> (Bug #15890).
</p></li></ul></li></ul>

<p>Выражение (<em><code>expr</code></em>) в <code>PARTITION BY</code>
не может отнестись ни к каким столбцам не в составленной таблице, такие
ссылки определенно не разрешены и заставляют запрос терпеть
неудачу с ошибкой (Bug #29444).</p>

<p>Каждое разделение может быть индивидуально определено, используя
<em><code>partition_definition</code></em>.
Отдельные части, составляющие этот пункт, следующие:</p>
<ul><li><p><code>PARTITION <em><code>partition_name</code></em></code>:
Это определяет логическое имя для разделения.</li>

<li><code>VALUES</code>: Для разделения диапазона каждое разделение должно
включать <code>VALUES LESS THAN</code>, для разделения списка Вы должны
определить <code>VALUES IN</code> для каждого раздела. Это используется,
чтобы определить, какие строки должны быть сохранены в этом разделе.
См. обсуждения разделения типов в <a href="partit.htm">главе 20</a>.</li>

<li><code>COMMENT</code> может использоваться, чтобы определить строку,
которая описывает раздел. Пример:
<pre>
COMMENT = 'Data for the years previous to 1999'
</pre>
Максимальная длина для комментария 1024 символа.</li>

<li><code>DATA DIRECTORY</code> и <code>INDEX DIRECTORY</code>
может использоваться, чтобы указать на каталог, где данные и индекс для этого
раздела должны быть сохранены, соответственно. Оба
<code><em><code>data_dir</code></em></code> и
<code><em><code>index_dir</code></em></code>
должны быть абсолютными системными путями. Пример:
<pre>
CREATE TABLE th (id INT, name VARCHAR(30), adate DATE)
       PARTITION BY LIST(YEAR(adate))
                 (PARTITION p1999 VALUES IN (1995, 1999, 2003)
                  DATA DIRECTORY = '<code>/var/appdata/95/data</code>'
                  INDEX DIRECTORY = '<code>/var/appdata/95/idx</code>',
                  PARTITION p2000 VALUES IN (1996, 2000, 2004)
                  DATA DIRECTORY = '<code>/var/appdata/96/data</code>'
                  INDEX DIRECTORY = '<code>/var/appdata/96/idx</code>',
                  PARTITION p2001 VALUES IN (1997, 2001, 2005)
                  DATA DIRECTORY = '<code>/var/appdata/97/data</code>'
                  INDEX DIRECTORY = '<code>/var/appdata/97/idx</code>',
                  PARTITION p2002 VALUES IN (1998, 2002, 2006)
                  DATA DIRECTORY = '<code>/var/appdata/98/data</code>'
                  INDEX DIRECTORY = '<code>/var/appdata/98/idx</code>');
</pre>

<code>DATA DIRECTORY</code> и <code>INDEX DIRECTORY</code>
ведут себя таким же образом, как в
<a href="#create-table"><code>CREATE TABLE</code></a>
<em><code>table_option</code></em> для таблиц <code>MyISAM</code>.</p>

<p>Один каталог данных и индекса может быть определен на раздел. Если
оставлено не указанным, данные и индекс сохранены по умолчанию в каталоге
базы данных таблицы.</p>

<p><code>DATA DIRECTORY</code> и <code>INDEX DIRECTORY</code>
проигнорированы для того, чтобы составить разделенные таблицы, если
работает <a href="server.htm#sqlmode_no_dir_in_create"><code>
NO_DIR_IN_CREATE</code></a>.</li>

<li><code>MAX_ROWS</code> и <code>MIN_ROWS</code>
может использоваться, чтобы определить, соответственно, максимальное и
минимальное число строк, которые будут сохранены в разделе. Значения для
<em><code>max_number_of_rows</code></em> и
<em><code>min_number_of_rows</code></em> должны быть положительные целые
числа. Как с опциями на уровне таблицы с теми же самыми именами, они
действуют только как <span><span>подсказки</span></span>
серверу и не являются жесткими пределами.</li>

<li><code>TABLESPACE</code> может использоваться, чтобы назначить
табличное разделение или подразделение <code>InnoDB</code> к
<a href="glossary.htm#glos_general_tablespace">общему табличному
пространству</a>, отдельному табличному пространству file-per-table
или системному табличному пространству. Все разделение должно принадлежать
тому же самому механизму хранения. Для получения дополнительной информации
см. <a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</li>

<li>MySQL понимает <code>[STORAGE] ENGINE</code> для
<code>PARTITION</code> и <code>SUBPARTITION</code>.
В настоящее время единственный путь, которым может использоваться эта опция,
состоит в том, чтобы установить все разделение или все подразделение к тому
же самому механизму хранения, попытка установить различные механизмы хранения
для разделения или подразделения в той же самой таблице даст ошибку
<span>ERROR 1469 (HY000): The mix of handlers in the partitions is not
permitted in this version of MySQL</span>.</li>

<li>Определение разделения может произвольно содержать один или больше
<em><code>subpartition_definition</code></em>. Каждый из них состоит
минимум из <code>SUBPARTITION <em><code>name</code></em></code>, где
<em><code>name</code></em> идентификатор для подразделения. За исключением
замены <code>PARTITION</code> на <code>SUBPARTITION</code>,
синтаксис для определения подразделения идентичен синтаксису
для определения разделения.</p>

<p>Подразделение должно быть сделано <code>HASH</code> или
<code>KEY</code> и может быть сделано только на
<code>RANGE</code> или <code>LIST</code>. См.
<a href="partit.htm#partitioning-subpartitions">раздел 20.2.6</a>.
</p></li></ul>

<p>Разделение произведенными столбцами разрешено. Например:
<pre>
CREATE TABLE t1 (s1 INT, s2 INT AS (EXP(s1)) STORED)
       PARTITION BY LIST (s2) (PARTITION p1 VALUES IN (1));
</pre>

Разделение рассматривает произведенный столбец как регулярный столбец,
который является обходным решениям для ограничений на функции, которые не
разрешены для того, чтобы разделить (см.
<a href="partit.htm#partitioning-limitations-functions">раздел 20.6.3</a>).
Предыдущий пример демонстрирует этот метод: <a href="funct.htm#function_exp">
<code>EXP()</code></a> не может использоваться непосредственно в
<code>PARTITION BY</code>, но произведенный столбец определил использование
<a href="funct.htm#function_exp"><code>EXP()</code></a>.</p>

<p>яРазделение может быть изменено, слито, добавлено к таблицам и исключено
из таблиц. Для основной информации о запросах MySQL, чтобы выполнить эти
задачи, см. <a href="#alter-table">раздел 14.1.7</a>. Подробности в
<a href="partit.htm#partitioning-management">разделе 20.3</a>.</p>

<p>Оригинал <a href="#create-table"><code>CREATE TABLE</code></a>,
включая все технические требования и табличные опции сохранено MySQL, когда
таблица составлена. Это сделано, чтобы, если Вы изменяете сопоставления или
другие настройки, используя
<a href="#alter-table"><code>ALTER TABLE</code></a>,
оригинальные табличные определенные опции были сохранены. Это позволяет Вам
изменять табличные типы даже при том, что форматы строки, поддержанные этими
двумя механизмами, могут отличаться.</p>

<p>Поскольку текст оригинального запроса сохранен, но из-за способа, которым
могут быть тихо реконфигурированы определенные значения и опции (хотя бы
<code>ROW_FORMAT</code>), активное табличное определение (доступно через
<a href="#describe"><code>DESCRIBE</code></a> или
<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a>)
и табличная строка создания (доступна через
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>)
сообщат различные значения.</p>

<h4><a name="create-table-like"></a>14.1.15.1. CREATE TABLE ... LIKE</h4>
<p><code>CREATE TABLE ... LIKE</code> применяется, чтобы
составить пустую таблицу, основанную на определении другой таблицы, включая
любой столбец, префикс и индекс, определенные в оригинальной таблице:
<pre>
CREATE TABLE <em><code>new_tbl</code></em> LIKE <em><code>orig_tbl</code></em>;
</pre>

Копия создается, используя ту же самую версию табличного формата хранения,
как оригинальная таблица. Привилегия <a href="security.html#priv_select">
<code>SELECT</code></a> требуется на оригинальной таблице.</p>
<p><code>LIKE</code> работает только для базовых таблиц,
не для представлений.</p>

<p>Вы не можете выполнить <code>CREATE TABLE</code> или
<code>CREATE TABLE ... LIKE</code> в то время, как есть запрос
<a href="#lock-tables"><code>LOCK TABLES</code></a>.</p>

<p><a href="#create-table"><code>CREATE TABLE ... LIKE</code></a>
осуществляет те же самые проверки, как
<a href="#create-table"><code>CREATE TABLE</code></a>.
Это означает, что, если текущий режим SQL отличается от режима в
действительности, когда оригинальная таблица была составлена, табличное
определение можно было бы считать недопустимым для нового режима, и
запрос потерпит неудачу.</p>

<p>Для <code>CREATE TABLE ... LIKE</code>
целевая таблица сохраняет произведенную информацию о столбце
от оригинальной таблицы.</p>

<p><code>CREATE TABLE ... LIKE</code> не сохраняет табличные опции
<code>DATA DIRECTORY</code> или <code>INDEX DIRECTORY</code>, которые были
определены для оригинальной таблицы, или любые определения внешнего ключа.
</p>

<p>Если оригинальная таблица <code>TEMPORARY</code>,
<code>CREATE TABLE ... LIKE</code> не сохраняет <code>TEMPORARY</code>.
Чтобы создать целевую таблицу <code>TEMPORARY</code>, надо использовать
<code>CREATE TEMPORARY TABLE ... LIKE</code>.</p>

<h4><a name="create-table-select"></a>14.1.15.2. CREATE TABLE ... SELECT</h4>
<p>Вы можете составить одну таблицу от другой, добавляя
<a href="#select"><code>SELECT</code></a> в конец
the <a href="#create-table"><code>CREATE TABLE</code></a>:
<pre>
CREATE TABLE <em><code>new_tbl</code></em> [AS] SELECT * FROM <em><code>orig_tbl</code></em>;
</pre>

MySQL создает новые столбцы для всех элементов в
<a href="#select"><code>SELECT</code></a>:
<pre>
mysql&gt; CREATE TABLE test (a INT NOT NULL AUTO_INCREMENT,
    -&gt;        PRIMARY KEY (a), KEY(b))
    -&gt;        ENGINE=MyISAM SELECT b,c FROM test2;
</pre>

Это создает <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code>
</a> с тремя столбцами, <code>a</code>, <code>b</code> и <code>c</code>.
<code>ENGINE</code> часть <a href="#create-table"><code>CREATE TABLE
</code></a> и не должно использоваться после
<a href="#select"><code>SELECT</code></a>, это привело бы к
синтаксической ошибке. То же самое истина для других опций
<a href="#create-table"><code>CREATE TABLE</code></a>,
например, для <code>CHARSET</code>.</p>

<p>Заметьте, что столбцы из
<a href="#select"><code>SELECT</code></a> добавлены
к правой стороне таблицы. Возьмите следующий пример:
<pre>
mysql&gt; SELECT * FROM foo;
+---+
| n |
+---+
| 1 |
+---+

mysql&gt; CREATE TABLE bar (m INT) SELECT n FROM foo;
Query OK, 1 row affected (0.02 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql&gt; SELECT * FROM bar;
+------+---+
| m    | n |
+------+---+
| NULL | 1 |
+------+---+
1 row in set (0.00 sec)
</pre>

Для каждой строки в таблице  <code>foo</code> строка вставлена в
<code>bar</code> со значениями из <code>foo</code>
и значениями по умолчанию для новых столбцов.</p>

<p>В таблице, следующей из <a href="#create-table"><code>CREATE TABLE
... SELECT</code></a>, столбцы, названные только в части
<a href="#create-table"><code>CREATE TABLE</code></a>
на первом месте. Столбцы, названные в обеих частях или только в
<a href="#select"><code>SELECT</code></a>, прибывают после этого.
Тип данных столбцов <a href="#select"><code>SELECT</code></a>
могут быть переопределены, также определяя столбец в части
<a href="#create-table"><code>CREATE TABLE</code></a>.</p>

<p>Если какие-либо ошибки происходят, копируя данные к таблице, таблица
автоматически удалена и не создана.</p>

<p>Вы можете предшествовать <a href="#select"><code>SELECT</code></a>
<code>IGNORE</code> или <a href="#replace"><code>REPLACE</code></a>,
чтобы указать, как обработать строки, которые дублируют уникальные значения
ключа. С <code>IGNORE</code> отказываются от строк, которые дублируют
существующую строку на уникальном значении ключа. С
<a href="#replace"><code>REPLACE</code></a> новые строки заменяют
строки, у которых есть то же самое уникальное значение ключа. Если
<code>IGNORE</code> или <a href="#replace"><code>REPLACE</code></a>
не определен, будет ошибка дубликата уникального значения ключа.</p>

<p>Поскольку упорядочивание строк в основном
<a href="#select"><code>SELECT</code></a>
не может всегда определяться, <code>CREATE TABLE ... IGNORE SELECT</code>
и <code>CREATE TABLE ... REPLACE SELECT</code>
отмечены как опасные для основанной на запросе репликации.
С этим изменением такие запросы производят предупреждение в журнале,
используя основанный на запросе режим и зарегистрированы, используя
основанный на строке формат, используя режим <code>MIXED</code>.
См. <a href="replica.htm#replication-sbr-rbr">раздел 19.2.1.1</a>.</p>

<p><a href="#create-table"><code>CREATE TABLE ... SELECT</code></a>
автоматически не создает индекс. Это сделано преднамеренно, чтобы сделать
запрос настолько гибким насколько возможно. Если Вы хотите иметь индексы в
составленной таблице, Вы должны определить их перед
<a href="#select"><code>SELECT</code></a>:
<pre>
mysql&gt; CREATE TABLE bar (UNIQUE (n)) SELECT n FROM foo;
</pre>

Для <code>CREATE TABLE ... SELECT</code> целевая таблица
не сохраняет информацию о том, являются ли столбцы, выбранные из исходной
таблицы, произведенными столбцами. Часть <a href="#select"><code>
SELECT</code></a> не может назначить значения на произведенные
столбцы в целевой таблице.</p>

<p>Некоторое преобразование типов данных могло бы произойти. Например,
<code>AUTO_INCREMENT</code> не сохранен, и
<a href="types.htm#char"><code>VARCHAR</code></a> могут стать
<a href="types.htm#char"><code>CHAR</code></a>. Сохраняются признаки
<code>NULL</code> (или <code>NOT NULL</code>) для тех столбцов, у которых они
есть, <code>CHARACTER SET</code>, <code>COLLATION</code>,
<code>COMMENT</code> и <code>DEFAULT</code>.</p>

<p>Составляя таблицу с <a href="#create-table-select"><code>CREATE
TABLE ... SELECT</code></a>, удостоверьтесь в псевдонимах любых вызовов
функции или выражения в запросе. Если Вы не делаете этого,
<code>CREATE</code> мог бы потерпеть неудачу или привести к
нежелательным именам столбцов.
<pre>
CREATE TABLE artists_and_works
  SELECT artist.name, COUNT(work.artist_id) AS number_of_works
  FROM artist LEFT JOIN work ON artist.id = work.artist_id
  GROUP BY artist.id;
</pre>

Вы можете также явно определить тип данных для столбца в составленной таблице:
<pre>
CREATE TABLE foo (a TINYINT NOT NULL) SELECT b+1 AS a FROM bar;
</pre>

Для <a href="#create-table"><code>CREATE TABLE
... SELECT</code></a>, если задано <code>IF NOT EXISTS</code>
и целевая таблица существует, ничто не вставлено в целевую таблицу, и
запрос не зарегистрирован.</p>

<p>Чтобы гарантировать, что двоичный журнал может использоваться, чтобы
обновить оригинальные таблицы, MySQL не разрешает параллельные вставки во
время <a href="#create-table"><code>CREATE TABLE ... SELECT</code>
</a>.</p>

<p>Вы не можете использовать <code>FOR UPDATE</code> как часть
<a href="#select"><code>SELECT</code></a> в таком запросе, как
<a href="#create-table-select"><code>CREATE
TABLE <em><code>new_table</code></em> SELECT ... FROM
<em><code>old_table</code></em> ...</code></a>.
Если Вы пытаетесь сделать так, запрос терпит неудачу.</p>

<h4><a name="create-table-foreign-keys"></a>14.1.15.3.
Используя ограничения FOREIGN KEY</h4>
<p>MySQL поддерживает внешние ключи, которые позволяют Вам перекрестно
ссылаться на связанные данные через таблицы, и
<a href="glossary.htm#glos_foreign_key_constraint">ограничения внешнего
ключа</a>, которые сохраняют эти данные распространения последовательными.
Существенный синтаксис для определения ограничения внешнего ключа в
<a href="#create-table"><code>CREATE TABLE</code></a> или
<a href="#alter-table"><code>ALTER TABLE</code></a> похож на это:
<pre>
[CONSTRAINT [<em><code>symbol</code></em>]] FOREIGN KEY
[<em><code>index_name</code></em>] (<em><code>index_col_name</code></em>, ...)
REFERENCES <em><code>tbl_name</code></em> (<em><code>index_col_name</code></em>,...)
[ON DELETE <em><code>reference_option</code></em>]
[ON UPDATE <em><code>reference_option</code></em>]

<em><code>reference_option</code></em>:
RESTRICT | CASCADE | SET NULL | NO ACTION
</pre>

<em><code>index_name</code></em> представляет ID внешнего ключа.
<em><code>index_name</code></em> проигнорировано, если уже есть явно
определенный индекс на дочерней таблице, которая может поддержать внешний
ключ. Иначе MySQL неявно создает индекс внешнего ключа, который называют
согласно следующим правилам:</p>

<ul><li><p>Если определено, <code>CONSTRAINT</code>
<em><code>symbol</code></em>. Иначе <code>FOREIGN KEY</code>
<em><code>index_name</code></em>.</li>

<li>Если <code>CONSTRAINT</code> <em><code>symbol</code></em> или
<code>FOREIGN KEY</code> <em><code>index_name</code></em>
не определен, имя индекса внешнего ключа произведено, используя название
столбца внешнего ключа ссылки.</p></li></ul>

<p>Определения внешних ключей подвергаются следующим условиям:</p>
<ul><li><p>Отношения внешнего ключа вовлекают
<a href="glossary.htm#glos_parent_table">родительскую таблицу</a>,
которая содержит центральные значения данных, и
<a href="glossary.htm#glos_child_table">дочернюю таблицу</a>
с идентичными значениями, указывающими на родителя. <code>FOREIGN KEY</code>
определен в дочерней таблице. Родительские и дочерние таблицы должны
использовать тот же самый механизм хранения.
Они не должны быть <code>TEMPORARY</code>.</p>

<p>В MySQL 8.0 создание ограничения внешнего ключа требует привилегию
<a href="security.html#priv_references"><code>REFERENCES</code></a>
для родительской таблицы.</li>

<li>У соответствующих столбцов во внешнем ключе и ключе, на который
ссылаются, должны быть подобные типы данных. <span><em>Размер и знак типов
целого числа должны быть теми же самыми</em></span>.
Длина строковых типов не должна быть той же самой. Для недвоичных
(символьных) строковых столбцов набор символов и сопоставление должны быть
теми же самыми.</li>

<li>При включенном <a href="server.htm#sysvar_foreign_key_checks"><code>
foreign_key_checks</code></a>, что является настройкой по умолчанию,
преобразование набора символов не разрешено на таблицах, которые включают
столбец строки символов, используемый в ограничение внешнего ключа. Обходное
решение описано в <a href="#alter-table">разделе 14.1.7</a>.</li>

<li>MySQL требует, индекс на внешних ключах и ключах, на которые ссылаются,
чтобы проверки внешнего ключа могли быть быстрыми и не требовали сканирования
таблицы. В таблице ссылки должно быть индексирование, где столбцы внешнего
ключа перечислены как <span><em>первые</em></span> столбцы в том же самом
порядке. Такой индекс создается на таблице ссылки автоматически, если он не
существует. Это индекс может быть тихо удален позже, если Вы создаете другой
индекс, который может использоваться, чтобы провести в жизнь ограничение
внешнего ключа. <em><code>index_name</code></em>, если дано, используется
как описано ранее.</li>

<li><code>InnoDB</code> разрешает внешнему ключу ссылаться на любой столбец
или группу столбцов. Однако, в таблице, на которую ссылаются, должен быть
индекс, где столбцы, на которые ссылаются, перечислены как
<span><em>первые</em></span> столбцы в том же самом порядке.</li>

<li>Префиксы индекса на столбцах внешнего ключа не поддержаны. Одно
последствие этого: <a href="types.htm#blob"><code>BLOB</code></a> и
<a href="types.htm#blob"><code>TEXT</code></a>
не могут быть включены во внешний ключ, потому что индекс на тех столбцах,
должен всегда включать длину префикса.</li>

<li>Если дано <code>CONSTRAINT <em><code>symbol</code></em></code>,
<em><code>symbol</code></em>, если используется, должно быть уникальным в
базе данных. Дубликат <em><code>symbol</code></em> приведет к ошибке:
<span>ERROR 1022 (2300): Can't write;
duplicate key in table '#sql- 464_1'</span>.
Если пункт не дан, или <em><code>symbol</code></em>
не включен после <code>CONSTRAINT</code>,
название ограничения создается автоматически.</li>

<li><a href="innodb.htm"><code>InnoDB</code></a> в настоящее время не
поддерживает внешние ключи для таблиц с определяемым пользователем
разделением. Это включает родительские и дочерние таблицы.</p></li></ul>

<h5><a name="idm139965342937168"></a>Справочные действия</h5>
<p>Этот раздел описывает, как ссылка внешних ключей гарантирует
<a href="glossary.htm#glos_referential_integrity">целостность</a>.</p>

<p>Для механизмов хранения, поддерживающих внешние ключи, MySQL отклоняет
любой <a href="#insert"><code>INSERT</code></a> или
<a href="#update"><code>UPDATE</code></a>, который
пытается создать значение внешнего ключа в дочерней таблице, если есть не
соответствующее значение ключа в родительской таблице.</p>

<p>Когда <a href="#update"><code>UPDATE</code></a> или
<a href="#delete"><code>DELETE</code></a>
затрагивает значение ключа в родительской таблице, у которой есть
соответствие строк в дочерней таблице, результат зависит от
<span><em>действия</em></span>, определенного, используя
<code>ON UPDATE</code> и <code>ON DELETE</code> в <code>FOREIGN KEY</code>.
MySQL поддерживает пять опций относительно действия, перечисленных здесь:</p>

<ul><li><p><code>CASCADE</code>: Удалит или обновит строку из родительской
таблицы и автоматически удалит или обновит соответствующие строки в дочерней
таблице. <code>ON DELETE CASCADE</code> и <code>ON UPDATE CASCADE</code>
поддержаны. Между двумя таблицами не определяйте несколько
<code>ON UPDATE CASCADE</code>, которые действуют на тот же самый столбец в
родительской или в дочерней таблице.</p>
<p>Каскадные действия внешнего ключа не активируют триггеры.</p></li>

<li><code>SET NULL</code>: Удалит или обновит строку из родительской таблицы и
установит столбец внешнего ключа или столбцы в дочерней таблице к
<code>NULL</code>. <code>ON DELETE SET NULL</code> и <code>ON UPDATE
SET NULL</code> поддержаны.</p>

<p>Если Вы определяете <code>SET NULL</code>,
<span><em>удостоверьтесь, что Вы не объявили столбцы в дочерней таблице как
<code>NOT NULL</code></em></span>.</li>

<li><code>RESTRICT</code>: Отклоняет работу удаления или обновления для
родительской таблицы. Определение <code>RESTRICT</code> (или <code>NO ACTION
</code>) то же самое, как исключение <code>ON DELETE</code>
или <code>ON UPDATE</code>.</li>

<li><code>NO ACTION</code>: Ключевое слово от стандартного SQL. В MySQL
эквивалент <code>RESTRICT</code>. MySQL Server отклоняет работу удаления или
обновления для родительской таблицы, если есть связанное значение внешнего
ключа в таблице, на которую ссылаются. Некоторые системы базы данных
задерживают проверки, и <code>NO ACTION</code> это задержанная проверка. В
MySQL ограничения внешнего ключа немедленно проверены, таким образом,
<code>NO ACTION</code> то же самое, как <code>RESTRICT</code>.</li>

<li><code>SET DEFAULT</code>: Это действие признано анализатором MySQL, но
<a href="innodb.htm"><code>InnoDB</code></a>
отклоняет табличные определения, содержащие
<code>ON DELETE SET DEFAULT</code> или <code>ON UPDATE SET DEFAULT</code>.
</p></li></ul>

<p>Для <code>ON DELETE</code> или <code>ON UPDATE</code>
действие значения по умолчанию всегда <code>RESTRICT</code>.</p>
<p>MySQL поддерживает ссылки внешнего ключа между одним столбцом и другим в
пределах таблицы. У столбца не может быть ссылки внешнего ключа на себя.
В этих случаях <span><span>дочерняя таблица</span></span> действительно
обращается к зависимым записям в пределах той же самой таблицы.</p>

<p>Ограничение внешнего ключа на произведенный сохраненный столбец не может
использовать <code>ON UPDATE CASCADE</code>, <code>ON DELETE SET NULL</code>,
<code>ON UPDATE SET NULL</code>, <code>ON DELETE SET DEFAULT</code> или
<code>ON UPDATE SET DEFAULT</code>.</p>

<p>Ограничение внешнего ключа не может сослаться на
произведенный виртуальный столбец.</p>
<p>Для <code>InnoDB</code> ограничения, связанные с внешними ключами и
произведенными столбцами, см. в
<a href="innodb.htm#innodb-foreign-key-constraints">разделе 16.8.6</a>.</p>

<h5><a name="idm139965342891344"></a>Примеры пунктов внешнего ключа</h5>
<p>Вот простой пример, который имеет отношение таблиц <code>parent</code>
и <code>child</code> через внешний ключ единственного столбца:
<pre>
CREATE TABLE parent (id INT NOT NULL,
                     PRIMARY KEY (id)) ENGINE=INNODB;
CREATE TABLE child (id INT, parent_id INT, INDEX par_ind (parent_id),
                    FOREIGN KEY (parent_id) REFERENCES parent(id)
                    ON DELETE CASCADE) ENGINE=INNODB;
</pre>

Более сложный пример, в котором у таблицы <code>product_order</code>
есть внешние ключи для двух других таблиц. Один внешний ключ ссылается на
индекс из двух столбцов в таблице <code>product</code>.
Второй ссылается на индекс из единственного столбца в <code>customer</code>:
<pre>
CREATE TABLE product (category INT NOT NULL, id INT NOT NULL,
                      price DECIMAL, PRIMARY KEY(category, id))
                      ENGINE=INNODB;

CREATE TABLE customer (id INT NOT NULL, PRIMARY KEY (id)) ENGINE=INNODB;
CREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,
                            product_category INT NOT NULL,
                            product_id INT NOT NULL,
                            customer_id INT NOT NULL, PRIMARY KEY(no),
                            INDEX (product_category, product_id),
                            INDEX (customer_id),
                            FOREIGN KEY (product_category, product_id)
                            REFERENCES product(category, id)
                            ON UPDATE CASCADE ON DELETE RESTRICT,
                            FOREIGN KEY (customer_id)
                            REFERENCES customer(id)) ENGINE=INNODB;
</pre>

<h5><a name="idm139965342882400"></a>Добавление внешних ключей</h5>
<p>Вы можете добавить новое ограничение внешнего ключа к существующей таблице
при использовании <a href="#alter-table"><code>ALTER TABLE</code></a>.
Синтаксис, касающийся внешних ключей для этого запроса:
<pre>
ALTER TABLE <em><code>tbl_name</code></em>
ADD [CONSTRAINT [<em><code>symbol</code></em>]] FOREIGN KEY
[<em><code>index_name</code></em>] (<em><code>index_col_name</code></em>, ...)
REFERENCES <em><code>tbl_name</code></em> (<em><code>index_col_name</code></em>,...)
[ON DELETE <em><code>reference_option</code></em>]
[ON UPDATE <em><code>reference_option</code></em>]
</pre>

Внешний ключ может быть сам ссылочным (обращающийся к той же самой таблице).
Когда Вы добавляете ограничение внешнего ключа к таблице через
<a href="#alter-table"><code>ALTER TABLE</code></a>,
<span><em>не забудьте создать необходимый индекс сначала</em></span>.</p>

<h5><a name="idm139965342873552"></a>Удаление внешних ключей</h5>
<p>Вы можете также использовать <a href="#alter-table"><code>ALTER
TABLE</code></a>, чтобы удалить внешние ключи, используя
синтаксис, показанный здесь:
<pre>
ALTER TABLE <em><code>tbl_name</code></em> DROP FOREIGN KEY <em><code>fk_symbol</code></em>;
</pre>

Если <code>FOREIGN KEY</code> включал имя <code>CONSTRAINT</code>,
когда Вы создали внешний ключ, Вы можете обратиться к тому имени, чтобы
удалить внешний ключ. Иначе значение <em><code>fk_symbol</code></em>
произведено внутренне, когда внешний ключ создается. Чтобы узнать символьное
значение, когда Вы хотите удалить внешний ключ, используйте
<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>:
<pre>
mysql&gt; SHOW CREATE TABLE ibtest11c\G
*************************** 1. row ***************************
   Table: ibtest11c
Create Table: CREATE TABLE `ibtest11c` (
  `A` int(11) NOT NULL auto_increment,
  `D` int(11) NOT NULL default '0',
  `B` varchar(200) NOT NULL default '',
  `C` varchar(175) default NULL,
  PRIMARY KEY  (`A`,`D`,`B`),
  KEY `B` (`B`,`C`),
  KEY `C` (`C`),
  CONSTRAINT `0_38775` FOREIGN KEY (`A`, `D`)
REFERENCES `ibtest11a` (`A`, `D`)
ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `0_38776` FOREIGN KEY (`B`, `C`)
REFERENCES `ibtest11a` (`B`, `C`)
ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=INNODB CHARSET=latin1
1 row in set (0.01 sec)

mysql&gt; ALTER TABLE ibtest11c DROP FOREIGN KEY `0_38775`;
</pre>

Добавление и удаление внешнего ключа в том же самом
<a href="#alter-table"><code>ALTER TABLE</code></a> поддержано для
<a href="#alter-table"><code>ALTER TABLE ... ALGORITHM=INPLACE</code>
</a>, но не поддержано для
<a href="#alter-table"><code>ALTER TABLE ... ALGORITHM=COPY</code>
</a>.</p>

<p>В MySQL 8.0 сервер запрещает изменения столбцов внешнего ключа с
потенциалом потери справочной целостности. Обходное решение должно
использовать <a href="#alter-table"><code>ALTER TABLE ... DROP FOREIGN
KEY</code></a> прежде, чем изменить определение столбца и
<a href="#alter-table"><code>ALTER TABLE ... ADD
FOREIGN KEY</code></a> позже.</p>

<h5><a name="idm139965342850224"></a>Внешние ключи и другие запросы MySQL
</h5>
<p>Таблица и идентификаторы столбца в <code>FOREIGN KEY ...
REFERENCES ...</code> могут быть заключены в кавычки в пределах обратных
кавычек (<code>`</code>). Альтернативно, двойные кавычки (<code>"</code>)
может использоваться, если включен режим SQL
<a href="server.htm#sqlmode_ansi_quotes"><code>ANSI_QUOTES</code></a>.
Установка <a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a> также принята во внимание.</p>

<p>Вы можете рассмотреть определения внешнего ключа дочерней таблицы как
часть вывода <a href="#show-create-table"><code>SHOW CREATE TABLE
</code></a>:
<pre>
SHOW CREATE TABLE <em><code>tbl_name</code></em>;
</pre>

Вы можете также получить информацию о внешних ключах, запрашивая таблицу
<a href="inform.htm#key-column-usage-table">
<code>INFORMATION_SCHEMA.KEY_COLUMN_USAGE</code></a>.</p>

<p>Вы можете считать информацию о внешних ключах, используемую таблицами
<a href="innodb.htm"><code>InnoDB</code></a> в
<a href="inform.htm#innodb-sys-foreign-table"><code>INNODB_SYS_FOREIGN</code>
</a> и <a href="inform.htm#innodb-sys-foreign-cols-table"><code>
INNODB_SYS_FOREIGN_COLS</code></a> в базе
данных <code>INFORMATION_SCHEMA</code>.</p>

<p><a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span>
</a> производит правильные определения таблиц в файле дампа, включая внешние
ключи для дочерних таблиц.</p>

<p>Чтобы облегчить перезагрузку файла дампа для таблиц, у которых есть
отношения внешнего ключа, <a href="programs.htm#mysqldump"><span><strong>
mysqldump</strong></span></a> автоматически, включает запрос в вывод дампа,
чтобы установить <a href="server.htm#sysvar_foreign_key_checks"><code>
foreign_key_checks</code></a> в 0. Это избегает проблем с таблицами, имеющими
необходимость быть перезагруженными в особом порядке, когда дамп
перезагружен. Также возможно установить эту переменную вручную:
<pre>
mysql&gt; SET foreign_key_checks = 0;
mysql&gt; SOURCE <em><code>dump_file_name</code></em>;
mysql&gt; SET foreign_key_checks = 1;
</pre>

Это позволяет Вам импортировать таблицы в любом порядке, если файл дампа
содержит таблицы, которые правильно не упорядочены для внешних ключей.
Это также ускоряет работу импорта. Установка
<a href="server.htm#sysvar_foreign_key_checks"><code>foreign_key_checks
</code></a> в 0 может также быть полезна для игнорирования ограничений
внешнего ключа во время <a href="#load-data"><code>LOAD DATA</code>
</a> и <a href="#alter-table"><code>ALTER TABLE</code></a>.
Однако, даже если <a href="server.htm#sysvar_foreign_key_checks"><code>
foreign_key_checks = 0</code></a>, MySQL не разрешает создание ограничения
внешнего ключа, где столбец ссылается на несоответствующий тип столбца. Кроме
того, если у таблицы есть ограничения внешнего ключа,
<a href="#alter-table"><code>ALTER TABLE</code></a>
не может использоваться, чтобы изменить таблицу, чтобы использовать другой
механизм хранения. Чтобы изменить механизм хранения, Вы должны сначала
удалить любые ограничения внешнего ключа.</p>

<p>Вы не можете использовать <a href="#drop-table"><code>DROP TABLE
</code></a> для таблицы, на которую ссылается ограничение <code>FOREIGN KEY
</code>, если Вы не делаете <code>SET foreign_key_checks = 0</code>.
Когда Вы удаляете таблицу, любые ограничения, которые были определены в
запросе, используемом, чтобы составить эту таблицу, также удалены.</p>

<p>Если Вы обновляете таблицу, которая была удалена, у нее
должно быть определение, которое соответствует ограничениям внешнего ключа,
ссылающимся на нее. У этого должны быть правильные имена столбцов и типы, и
таблица должна иметь индекс на ключах, на которые ссылаются, как заявлено
ранее. Если эти условия не удовлетворены, MySQL возвращает Error 1005 и
Error 150 в сообщении об ошибке, что означает, что ограничение внешнего ключа
не было правильно сформировано. Точно так же, если
<a href="#alter-table"><code>ALTER TABLE</code></a>
терпит неудачу из-за Error 150, это означает, что определение внешнего ключа
было неправильно сформировано для измененной таблицы.</p>

<p>Для таблиц <code>InnoDB</code> Вы можете получить подробное объяснение
ошибки внешнего ключа в MySQL Server, просмотрев вывод
<a href="#show-engine"><code>SHOW ENGINE INNODB STATUS</code></a>.</p>

<p>Для пользователей, знакомых с ANSI/ISO SQL Standard,
отметьте, что никакой механизм хранения, включая <code>InnoDB</code>,
не признает или проводит в жизнь <code>MATCH</code>
в определениях ограничения справочной целостности. Использование явного
<code>MATCH</code> не будет иметь указанного эффекта, и также вызывает
<code>ON DELETE</code> и <code>ON UPDATE</code>, которые будут
проигнорированы. По этим причинам определть <code>MATCH</code> не надо.</p>

<p><code>MATCH</code> в стандарте SQL управляет, как
<code>NULL</code> обработаны в сложном (из нескольких столбцов) внешнем
ключе, сравниваясь с первичным ключом. MySQL по существу осуществляет
семантику, определенную <code>MATCH SIMPLE</code>, которые разрешают внешнему
ключу быть всему или частично <code>NULL</code>. В этом случае (дочерняя
таблица) строке, содержащей такой внешний ключ, разрешают быть вставленной
и не соответствовать строке в (родительской) таблице, на которую ссылаются.
Возможно осуществить другую семантику, используя триггеры.</p>

<p>Дополнительно, MySQL требует, чтобы столбцы, на которые ссылаются,
были индексированы по исполнительным причинам. Однако, система не проводит в
жизнь требование, что столбцы, на которые ссылаются, <code>UNIQUE</code>
или объявлены <code>NOT NULL</code>. Обработка ссылок внешнего ключа на
групповые ключи или ключи, которые содержат <code>NULL</code> не четко
определены для таких операций, как
<a href="#update"><code>UPDATE</code></a> или <code>DELETE CASCADE
</code>. Вам советуют использовать внешние ключи, которые ссылаются только на
<code>UNIQUE</code> (включая <code>PRIMARY</code>) и
ключи <code>NOT NULL</code>.</p>

<p>Кроме того, MySQL разбирает, но игнорирует <span><span>inline
<code>REFERENCES</code></span></span> (как определено в SQL),
где ссылки определены как часть спецификации столбца. MySQL принимает
<code>REFERENCES</code> только когда определено как часть отдельного
<code>FOREIGN KEY</code>. Для механизмов хранения, которые не поддерживают
внешние ключи (<a href="storage.htm#myisam-storage-engine"><code>MyISAM
</code></a>, например), MySQL Server
разбирает и игнорирует технические требования внешнего ключа.</p>

<h4><a name="silent-column-changes"></a>14.1.15.4.
В некоторых случаях, MySQL тихо изменяет технические требования столбца от
данных в <a href="#create-table"><code>CREATE TABLE</code></a> или
<a href="#alter-table"><code>ALTER TABLE</code></a>.
Они могли бы быть изменениями типа данных, признаков, связанных с типом
данных или спецификации индекса.</p>

<p>Все изменения подвергаются внутреннему пределу размера строки 65535
байтов, которые могут заставить некоторые попытки изменений типа данных
терпеть неудачу. См. <a href="restr.htm#column-count-limit">раздел C.10.4
</a>.</p>

<ul><li><p>Столбцы, которые являются частью <code>PRIMARY KEY</code>
сделаны <code>NOT NULL</code>, даже если так не объявлены.</li>
<li>Конечные пробелы автоматически удалены из
<a href="types.htm#enum"><code>ENUM</code></a> и
<a href="types.htm#set"><code>SET</code></a>, когда таблица составлена.</li>

<li>MySQL отображает определенные типы данных от других поставщиков
баз данных SQL к типам MySQL. См.
<a href="types.htm#other-vendor-data-types">раздел 12.10</a>.</li>

<li>Если Вы включаете <code>USING</code>, чтобы определить тип индекса,
который не разрешен для данного механизма хранения, но есть другой доступный
тип индекса, который механизм может использовать, не затрагивая результаты
запроса, механизм использует доступный тип.</li>

<li>Если строгий режим SQL не включен,
<a href="types.htm#char"><code>VARCHAR</code></a>
со спецификацией длины больше 65535 преобразован в
<a href="types.htm#blob"><code>TEXT</code></a>, а
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>
со спецификацией длины больше 65535 преобразован в
<a href="types.htm#blob"><code>BLOB</code></a>.
Иначе ошибка происходит в любом из этих случаев.</li>

<li>Определение <code>CHARACTER SET binary</code>
для символьного типа данных заставляет столбец создаваться как
соответствующий тип двоичных данных:
<a href="types.htm#char"><code>CHAR</code></a> станет
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a> станет
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a> станет
<a href="types.htm#blob"><code>BLOB</code></a>.
<a href="types.htm#enum"><code>ENUM</code></a> и
<a href="types.htm#set"><code>SET</code></a> это не происходит: они создаются
как объявлено. Предположите, что Вы определяете таблицу,
используя это определение:
<pre>
CREATE TABLE t (c1 VARCHAR(10) CHARACTER SET binary,
                c2 TEXT CHARACTER SET binary,
                c3 ENUM('a','b','c') CHARACTER SET binary);
</pre>

У получающейся таблицы есть это определение:
<pre>
CREATE TABLE t (c1 VARBINARY(10), c2 BLOB,
                c3 ENUM('a','b','c') CHARACTER SET binary);
</pre></li></ul>

<p>Чтобы видеть, использовал ли MySQL тип данных кроме того, который Вы
определили, используйте <a href="#describe"><code>DESCRIBE</code></a>
или <a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>
после создания или изменения таблицы.</p>

<p>Определенные другие изменения типа данных могут произойти, если Вы
сжимаете таблицу, используя <a href="programs.htm#myisampack"><span><strong>
myisampack</strong></span></a>. См.
<a href="storage.htm#compressed-format">раздел 17.2.3.3</a>.</p>

<h4><a name="create-table-generated-columns"></a>14.1.15.5.
CREATE TABLE и произведенные столбцы</h4>
<p><a href="#create-table"><code>CREATE TABLE</code></a>
поддерживает спецификацию произведенных столбцов. Значения произведенного
столбца вычислены от выражения, включенного в определение столбца.</p>

<p>Следующий простой пример показывает таблицу, которая хранит длины сторон
прямоугольных треугольников в столбцах <code>sidea</code> и <code>sideb
</code> и вычисляет длину гипотенузы в <code>sidec</code>
(квадратный корень сумм квадратов других сторон):
<pre>
CREATE TABLE triangle (sidea DOUBLE, sideb DOUBLE,
       sidec DOUBLE AS (SQRT(sidea * sidea + sideb * sideb)));
INSERT INTO triangle (sidea, sideb) VALUES(1,1),(3,4),(6,8);
</pre>

Выбор из таблицы приводит к этому результату:
<pre>
mysql&gt; SELECT * FROM triangle;
+-------+-------+--------------------+
| sidea | sideb | sidec              |
+-------+-------+--------------------+
| 1     | 1     | 1.4142135623730951 |
| 3     | 4     | 5                  |
| 6     | 8     | 10                 |
+-------+-------+--------------------+
</pre>

Любое приложение, которое использует таблицу <code>triangle</code> имеет
доступ к значениям гипотенузы, не имея необходимость определять выражение,
которое вычисляет их.</p>

<p>У произведенных определений столбца есть этот синтаксис:
<pre>
<em><code>col_name</code></em> <em><code>data_type</code></em>
   [GENERATED ALWAYS] AS (<em><code>expression</code></em>)
   [VIRTUAL | STORED] [UNIQUE [KEY]] [COMMENT <em><code>comment</code></em>]
   [[NOT] NULL] [[PRIMARY] KEY]
</pre>

<code>AS (<em><code>expression</code></em>)</code>
указывает, что столбец произведен и определяет выражение, используемое, чтобы
вычислить значения столбцов. <code>AS</code> можно предшествовать
<code>GENERATED ALWAYS</code>, чтобы сделать произведенную природу столбца
более явной. Конструкции, которые разрешены или запрещены в
выражении, обсуждены позже.</p>

<p><code>VIRTUAL</code> или <code>STORED</code>
указывает, как сохранены значения столбцов, у которого есть значения
для использования столбца:</p>

<ul><li><p><code>VIRTUAL</code>: Значения столбцов не сохранены, но оценены,
когда строки считаны, немедленно после любого триггера <code>BEFORE</code>.
Виртуальный столбец не занимает места в памяти.</p>

<p><code>InnoDB</code> допускает вторичные индексы на
на виртуальных столбцах. См.
<a href="#create-table-secondary-indexes-virtual-columns">
раздел 14.1.15.6</a>.</li>

<li><code>STORED</code>: Значения столбцов оценены и сохранены, когда строки
вставлены или обновлены. Сохраненный столбец действительно требует места для
хранения и может быть индексирован.</p></li></ul>

<p>Значение по умолчанию <code>VIRTUAL</code>,
если никакое ключевое слово не определено.</p>
<p>Разрешено смешивать столбцы <code>VIRTUAL</code> и
<code>STORED</code> в пределах таблицы.</p>

<p>Другие признаки могут быть даны, чтобы указать, индексирован ли столбец
или может быть <code>NULL</code>. Отметьте, что порядок этих признаков
отличается от их порядка в непроизведенных определениях столбца.</p>

<p>Произведенные выражения столбца должны придерживаться следующих правил.
Ошибка происходит, если выражение содержит отвергнутые конструкции.</p>
<ul><li><p>Литералы, детерминированные встроенные функции и операторы
разрешены. Функция детерминирована, если, учитывая те же самые данные в
таблицах, многократные вызовы приводят к тому же самому результату,
независимо от соединенного пользователя. Примеры функций, которые подходят
под это определение:
<a href="funct.htm#function_connection-id"><code>CONNECTION_ID()</code></a>,
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>,
<a href="funct.htm#function_now"><code>NOW()</code></a>.</li>

<li>Подзапросы, параметры, переменные, сохранненные
и определяемые пользователем функции не разрешены. </li>
<li>Произведенное определение столбца может отнестись к другим произведенным
столбцам, но только тем, которые происходят ранее в табличном определении.
Произведенное определение столбца может отнестись к (непроизведенному)
столбцу в таблице, происходит ли его определение ранее или позже.</li>

<li><code>AUTO_INCREMENT</code> не может использоваться в
произведенном определении столбца.</li>
<li><code>AUTO_INCREMENT</code> не может использоваться в качестве основного
в произведенном определении столбца.</li>

<li>Если оценка выражения вызывает усечение или обеспечивает неправильный
ввод функции, <a href="#create-table"><code>CREATE TABLE</code></a>
заканчивается с ошибкой, и работа DDL отклонена.</p></li></ul>

<p>Если выражение оценивается к типу данных, который отличается от
заявленного типа столбца, принуждение к заявленному типу происходит согласно
обычным правилам преобразования типа MySQL. См.
<a href="funct.htm#type-conversion">раздел 13.2</a>.</p>

<p>Если какой-либо компонент выражения зависит от режима SQL, различные
результаты могут произойти для различного использования таблицы, если режим
SQL не тот же самый во время всего использования.</p>

<p>Для <a href="#create-table-like"><code>CREATE TABLE ... LIKE</code>
</a> целевая таблица сохраняет произведенную информацию о столбце
от оригинальной таблицы.</p>

<p>Для <a href="#create-table-select"><code>CREATE
TABLE ... SELECT</code></a> целевая таблица не сохраняет информацию о том,
являются ли столбцы в выборке произведенными столбцами. Часть
<a href="#select"><code>SELECT</code></a> может назначить значения на
произведенные столбцы в целевой таблице.</p>

<p>Разделение произведенными столбцами разрешено.</p>
<p>Ограничение внешнего ключа на произведенный сохраненный столбец не может
использовать <code>ON UPDATE CASCADE</code>, <code>ON DELETE SET NULL</code>,
<code>ON UPDATE SET NULL</code>, <code>ON DELETE SET DEFAULT</code> или
<code>ON UPDATE SET DEFAULT</code>.</p>

<p>Ограничение внешнего ключа не может сослаться на
произведенный виртуальный столбец.</p>
<p>Для <code>InnoDB</code> ограничения, связанные с внешними ключами и
произведенными столбцами, см. в
<a href="innodb.htm#innodb-foreign-key-constraints">разделе 16.8.6</a>.</p>

<p>Триггеры не могут использовать
<code>NEW.<em><code>col_name</code></em></code> или
<code>OLD.<em><code>col_name</code></em></code>, чтобы
обратиться к произведенным столбцам.</p>

<p>Для <a href="#insert"><code>INSERT</code></a>,
<a href="#replace"><code>REPLACE</code></a> и
<a href="#update"><code>UPDATE</code></a>,
если произведенный столбец вставлен, заменил или обновил явно, единственное
разрешенное значение <code>DEFAULT</code>.</p>

<p>Произведенный столбец в представлении считают обновляемым, потому что
возможно назначить ему значение. Однако, если такой столбец обновлен явно,
единственное разрешенное значение <code>DEFAULT</code>.</p>

<p>У произведенных столбцов есть несколько случаев использования:</p>
<ul><li><p>Виртуальные произведенные столбцы могут использоваться в качестве
способа упростить и объединить запросы. Сложное условие может быть определено
как произведенный столбец и упомянуто из многих запросов на таблице, чтобы
гарантировать, что все они используют точно то же самое условие.</li>

<li>Сохраненные произведенные столбцы могут использоваться в качестве
осуществленного кэша для сложных условий, которые являются дорогостоящими,
чтобы вычислить на лету.</li>

<li>Произведенные столбцы могут моделировать функциональный индекс:
Используйте сохраненный столбец, чтобы определить функциональное выражение
и индекс. Это может быть полезно для работы со столбцами типов, которые не
могут быть индексированы непосредственно, например,
<a href="types.htm#json"><code>JSON</code></a>, см.
<a href="#create-table-secondary-indexes-virtual-columns">
раздел 14.1.15.6</a>.</p>

<p>Недостаток такого подхода: значения сохранены дважды, однажды как значение
произведенного столбца и однажды в индексировании.</li>
<li>Если произведенный столбец индексирован, оптимизатор признает выражения
запроса, которые соответствуют определению столбца, и использует индекс от
столбца как соответствующий во время выполнения запроса, даже если запрос не
обращается к столбцу непосредственно по имени. Для деталей см.
<a href="optimiz.htm#generated-column-index-optimizations">раздел 9.3.9</a>.
</p></li></ul>

<p>Предположите, что таблица <code>t1</code> содержит столбцы
<code>first_name</code> и <code>last_name</code>,
и приложения часто создает полное имя, используя выражение:
<pre>
SELECT CONCAT(first_name,' ',last_name) AS full_name FROM t1;
</pre>

Один способ избежать выписывать выражение состоит в том, чтобы создать
представление <code>v1</code> на <code>t1</code>, которое упрощает
приложения, позволяя им выбрать <code>full_name</code> непосредственно,
не используя выражение:
<pre>
CREATE VIEW v1 AS
       SELECT *, CONCAT(first_name,' ',last_name) AS full_name FROM t1;
       SELECT full_name FROM v1;
</pre>

Произведенный столбец также позволяет приложениям выбрать
<code>full_name</code> непосредственно, без
потребности определить представление:
<pre>
CREATE TABLE t1 (first_name VARCHAR(10), last_name VARCHAR(10),
                 full_name VARCHAR(255) AS
                 (CONCAT(first_name, ' ', last_name)));
SELECT full_name FROM t1;
</pre>

<h4><a name="create-table-secondary-indexes-virtual-columns"></a>14.1.15.6.
Вторичный индекс и произведенные виртуальные столбцы</h4>
<p><code>InnoDB</code> поддерживает вторичный индекс
на виртуальных произведенных столбцах. Другой тип индекса не поддержан.</p>

<p>Вторичный индекс может быть создан на одном или более виртуальных столбцах
или на комбинации виртуальных столбцов и непроизведенных виртуальных
столбцов. Вторичный индекс на виртуальных столбцах может быть
определен как <code>UNIQUE</code>.</p>

<p>Когда вторичный индекс создается на произведенном виртуальном столбце,
произведенные значения столбцов осуществлены в записях
индекса. Если индексирование является
<a href="glossary.htm#glos_covering_index">покрывающим</a> (который включает
все столбцы, полученные запросом), произведенные значения столбцов получены
от осуществленных значений в индексе вместо вычисленного на лету.</p>

<p>Если вторичный индекс не определен на виртуальном столбце, есть
дополнительные затраты для чтений, поскольку виртуальные значения столбцов
должны быть вычислены каждый раз, когда строка столбца исследована.</p>

<p>Значения индексированного виртуального столбца MVCC-зарегистрированы,
чтобы избежать ненужного перевычисления произведенных значений столбцов во
время отката или во время работы чистки. Длина данных зарегистрированных
значений ограничена ключевым пределом 767 байтов для
<code>COMPACT</code> и <code>REDUNDANT</code> или 3072 байтами для
<code>DYNAMIC</code> и <code>COMPRESSED</code>.</p>

<p>Добавление или удаление вторичного индекса
на виртуальном столбце это оперативная работа.</p>
<p>До MySQL 8.0.1 ограничение внешнего ключа не может сослаться на вторичный
индекс, определенный на произведенном виртуальном столбце.</p>

<h5><a name="json-column-indirect-index"></a>
Использование произведенного виртуального столбца индекса, чтобы
косвенно индексировать столбцы JSON</h5>
<p>Как отмечено выше, <a href="types.htm#json"><code>JSON</code></a>
не могут быть индексированы непосредственно. Чтобы создать
индексирование, которое ссылается на такой столбец косвенно,
Вы можете определить произведенный столбец, который извлекает информацию,
которая должна быть индексирована, затем создать индексирование на
произведенном столбце, как показано в этом примере:
<pre>
mysql&gt; CREATE TABLE jemp (c JSON,
    -&gt;        g INT GENERATED ALWAYS AS (JSON_EXTRACT(c, '$.id')),
    -&gt;        INDEX i (g));
Query OK, 0 rows affected (0.28 sec)

mysql&gt; INSERT INTO jemp (c) VALUES
     &gt;   ('{"id":"1","name": "Fred"}'), ('{"id": "2","name": "Wilma"}'),
     &gt;   ('{"id":"3","name": "Barney"}'), ('{"id": "4","name": "Betty"}');
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql&gt; SELECT JSON_UNQUOTE(JSON_EXTRACT(c, '$.name')) AS name
     &gt;        FROM jemp WHERE g &gt; 2;
+--------+
| name   |
+--------+
| Barney |
| Betty  |
+--------+
2 rows in set (0.00 sec)

mysql&gt; EXPLAIN SELECT JSON_UNQUOTE(JSON_EXTRACT(c, '$.name')) AS name
     &gt;         FROM jemp WHERE g &gt; 2\G
*************************** 1. row ***************************
   id: 1
  select_type: SIMPLE
table: jemp
   partitions: NULL
 type: range
possible_keys: i
  key: i
  key_len: 5
  ref: NULL
 rows: 2
 filtered: 100.00
Extra: Using where
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select json_unquote(json_extract(`test`.`jemp`.`c`,'$.name'))
AS `name` from `test`.`jemp` where (`test`.`jemp`.`g` &gt; 2)
1 row in set (0.00 sec)
</pre></p>

<p>MySQL 8.0 поддерживает две формы для того, чтобы получить доступ к
значению путем <a href="types.htm#json"><code>JSON</code></a>:</p>
<ul><li><p><a href="funct.htm#operator_json-column-path"><code>-&gt;</code>
</a> эквивалентно <a href="funct.htm#function_json-extract"><code>
JSON_EXTRACT()</code></a>.</li>

<li><a href="funct.htm#operator_json-inline-path"><code>-&gt;&gt;</code></a>
эквивалентно запросу <a href="funct.htm#function_json-unquote"><code>
JSON_UNQUOTE()</code></a> на результате <code>JSON_EXTRACT()</code>.
</p></li></ul>

<p>Таким образом, запрос <code>SELECT JSON_UNQUOTE(JSON_EXTRACT(c, '$.name'))
FROM jemp</code> может быть переписан в более короткой форме как <code>SELECT
JSON_UNQUOTE(c-&gt;'$.name') FROM jemp</code> или еще более сжато как
<code>SELECT c-&gt;&gt;'$.name' FROM jemp</code>.</p>

<p>Когда Вы используете <a href="#explain"><code>EXPLAIN</code></a>
для <a href="#select"><code>SELECT</code></a>
или другого запроса SQL, содержащего одно или более выражений, которые
используют <code>-&gt;</code> или <code>-&gt;&gt;</code>,
эти выражения преобразованы в их эквивалент с <code>JSON_EXTRACT()</code> и
(если нужно) <code>JSON_UNQUOTE()</code>, как показано в выводе
<a href="#show-warnings"><code>SHOW WARNINGS</code></a>
немедленно после <code>EXPLAIN</code>:
<pre>
mysql&gt; EXPLAIN SELECT c-&gt;"$.name"
     &gt;         FROM jemp WHERE g &gt; 2\G ORDER BY c-&gt;"$.name"
*************************** 1. row ***************************
   id: 1
  select_type: SIMPLE
table: jemp
   partitions: NULL
 type: range
possible_keys: i
  key: i
  key_len: 5
  ref: NULL
 rows: 2
 filtered: 100.00
Extra: Using where; Using filesort
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select json_extract(`test`.`jemp`.`c`,'$.name') AS
  `c-&gt;"$.name"` from `test`.`jemp` where (`test`.`jemp`.`g` &gt; 2)
  order by json_extract(`test`.`jemp`.`c`,'$.name')
1 row in set (0.00 sec)
</pre></p>

<p>Этот метод также может использоваться, чтобы обеспечить косвенный индекс
столбцов других типов, которые не могут быть индексированы непосредственно,
например, для <code>GEOMETRY</code>.</p>

<h3><a name="create-tablespace"></a>14.1.16. CREATE TABLESPACE</h3>
<pre>
CREATE TABLESPACE <em><code>tablespace_name</code></em>
ADD DATAFILE '<em><code>file_name</code></em>'
[FILE_BLOCK_SIZE = value]
[ENGINE [=] <em><code>engine_name</code></em>]
</pre>

Этот запрос используется, чтобы создать табличное пространство
<code>InnoDB</code>. Оно упоминается как
<span><em>общее табличное пространство</em></span>.</p>

<p>Общее табличное пространство это совместно используемое табличное
пространство, подобное системному табличному пространству. Это может
содержать многократные таблицы и поддерживает все форматы строки таблицы.
Общие табличные пространства могут также быть созданы в местоположении
относительно или независимо от каталога данных MySQL.</p>

<p>После создания общего табличного пространства, Вы можете использовать
<a href="#create-table"><code>CREATE TABLE <em><code>tbl_name</code>
</em> ... TABLESPACE [=] <em><code>tablespace_name</code></em></code></a> или
<a href="#alter-table"><code>ALTER TABLE
<em><code>tbl_name</code></em> TABLESPACE [=]
<em><code>tablespace_name</code></em></code></a>, чтобы
добавить таблицы к табличному пространству.</p>
<p>См. <a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</p>

<p><code>CREATE TABLESPACE</code> поддержан с <code>InnoDB</code> с MySQL
5.7.6. В более ранних выпусках <code>CREATE TABLESPACE</code> поддержан
только <a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>, который является механизмом
хранения MySQL Cluster.</p>

<h4><a name="idm139965342576416"></a>Опции</h4>
<ul><li><p><code>ADD DATAFILE</code>: Определяет название файла с данными
табличного пространства. Файл с данными должен быть определен
<code>CREATE TABLESPACE</code>, имя должно иметь расширение
<code>.ibd</code>. Общее табличное пространство поддерживает только
единственный файл с данными.</p>

<p>Поместить файл с данными в местоположение за пределами каталога данных
MySQL (<a href="server.htm#sysvar_datadir"><code>DATADIR</code></a>) можно,
включив абсолютный путь к каталогу или путь относительно каталога данных
MySQL. Если Вы не определяете путь, общее табличное пространство создается в
каталоге данных MySQL.</p>

<p>Чтобы избежать конфликтов с неявно создаваемыми табличными пространствами
file-per-table, создание общего табличного пространства в подкаталоге в
соответствии с каталогом данных MySQL не поддержано. Кроме того, создавая
общее табличное пространство за пределами каталога данных MySQL, каталог
должен существовать до создания табличного пространства.</p>

<p><code><em><code>file_name</code></em></code>,
включая (дополнительный) путь, должен быть заключен в кавычки.
Имена файла (без расширения <span><span>.ibd</span></span>)
и имена каталогов должны составить по крайней мере один байт в длину.
Нулевые имена файлов и каталогов не поддержаны.</li>

<li><code>FILE_BLOCK_SIZE</code>: Определяет размер блока файла с данными
табличного пространства. Если Вы не определяете эту опцию,
<code>FILE_BLOCK_SIZE</code> по умолчанию
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>. <code>FILE_BLOCK_SIZE</code> требуется только, если Вы будете
использовать табличное пространство, чтобы сохранить сжатые таблицы
<code>InnoDB</code> (<code>ROW_FORMAT=COMPRESSED</code>).
В этом случае Вы должны определить <code>FILE_BLOCK_SIZE</code>,
создавая табличное пространство.</p>

<p>Если <code>FILE_BLOCK_SIZE</code> =
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>, табличное пространство может содержать только таблицы с несжатым
форматом строки (<code>COMPACT</code>, <code>REDUNDANT</code> и
<code>DYNAMIC</code>). Таблицы с форматом <code>COMPRESSED</code> имеют
иной физический размер страницы, чем несжатые таблицы. Поэтому сжатые таблицы
не могут сосуществовать в том же самом табличном пространстве,
где несжатые таблицы.</p>

<p>Для общего табличного пространства, чтобы содержать сжатые таблицы
должен быть определен <code>FILE_BLOCK_SIZE</code> и оно
должно быть допустимым сжатым размером страницы относительно
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a>. Кроме того, физический размер страницы сжатой таблицы
(<code>KEY_BLOCK_SIZE</code>) должно быть равным
<code>FILE_BLOCK_SIZE/1024</code>. Например, если
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size=16K
</code></a>, <code>FILE_BLOCK_SIZE=8K</code>, <code>KEY_BLOCK_SIZE</code>
должен быть 8. См. <a href="innodb.htm#general-tablespaces">раздел 16.7.9
</a>.</li>

<li><code>ENGINE</code>: Определяет механизм хранения, который использует
табличное пространство, где <em><code>engine_name</code></em> задает
название механизма хранения. В настоящее время поддержан только
механизм хранения <code>InnoDB</code>. <code>ENGINE = InnoDB</code>
должен быть определен как часть
<code>CREATE TABLESPACE</code> или <code>InnoDB</code>
должен быть определен как механизм хранения по умолчанию
(<a href="server.htm#sysvar_default_storage_engine"><code>
default_storage_engine=InnoDB</code></a>).</p></li></ul>

<h4><a name="idm139965342540160"></a>Примечания</h4>
<ul><li><p><code><em><code>tablespace_name</code></em></code>
чувствительный к регистру идентификатор для табличного
пространства. Это может быть заключено в кавычки. Символ наклонной черты
вправо (<span><span>/</span></span>) не разрешен. Имена, начинающиеся с
<code>innodb_</code> не разрешены или сохранены
для специального использования.</li>

<li>Создание временных общих табличных пространств не поддержано.</li>
<li>Общие табличные пространства не поддерживают временные таблицы.</li>
<li><code>TABLESPACE</code> может использоваться с
<a href="#create-table"><code>CREATE TABLE</code></a> или
<a href="#alter-table"><code>ALTER TABLE</code></a>, чтобы
назначать табличное разделение или подразделение к
a <a href="glossary.htm#glos_general_tablespace">общему табличному
пространству</a>, отдельному табличному пространству file-per-table или
системному табличному пространству. Все разделение должно принадлежать тому
же самому механизму хранения. Для получения дополнительной информации см.
<a href="innodb.htm#general-tablespaces">раздел 16.7.9</a>.</li>

<li>Общие табличные пространства поддерживают добавление таблиц любого
формата строки <a href="#create-table"><code>CREATE TABLE ...
TABLESPACE</code></a>. <a href="innodb.htm#sysvar_innodb_file_per_table">
<code>innodb_file_per_table</code></a> не должен быть включен.</li>

<li><a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a> не применимо к общим табличным пространствам. Управленческие
правила табличного пространства строго проведены в жизнь, независимо от
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a>. Если параметры <code>CREATE TABLESPACE</code>
являются неправильными или несовместимыми, работа терпит неудачу независимо
от <a href="innodb.htm#sysvar_innodb_strict_mode"><code>innodb_strict_mode
</code></a>. Когда таблица добавлена к общему табличному пространству
через <a href="#create-table"><code>CREATE TABLE ... TABLESPACE</code>
</a> или <a href="#alter-table"><code>ALTER TABLE ... TABLESPACE
</code></a>, <a href="innodb.htm#sysvar_innodb_strict_mode"><code>
innodb_strict_mode</code></a> проигнорирован, но запрос оценен как будто
<a href="innodb.htm#sysvar_innodb_strict_mode"><code>
innodb_strict_mode</code></a> включен.</li>

<li><code>DROP TABLESPACE</code> удаляет общее табличное пространство. Все
таблицы должны быть исключены из общего табличного пространства через
<a href="#drop-table"><code>DROP TABLE</code></a>
до удаления табличного пространства.</li>

<li>Все части таблицы, добавленной к общему табличному пространству,
находятся в общем табличном пространстве, включая
индекс и страницы <a href="types.htm#blob"><code>BLOB</code></a>.</li>

<li>Подобно системному табличному пространству, усекая или удаляя
таблицы, сохраненные в общем табличном пространстве, создается свободное
пространство внутренне в общем табличном пространстве
<a href="glossary.htm#glos_ibd_file">файл .ibd</a>, которое может
использоваться только для новых данных <code>InnoDB</code>.
Пространство не освобождено назад к операционной системе, как это
происходит для табличных пространств file-per-table.</li>

<li>Общее табличное пространство не связано ни с какой базой
данных или схемой.</li>
<li><a href="#alter-table"><code>ALTER TABLE ...
DISCARD TABLESPACE</code></a> и
<a href="#alter-table"><code>ALTER TABLE ...IMPORT TABLESPACE</code>
</a> не поддержаны для таблиц, которые принадлежат
общему табличному пространству.</li>

<li>Сервер использует блокировку метаданных на уровне табличного пространства
для DDL, который ссылается на общие табличные пространства. Сервер использует
блокировку метаданных на уровне таблицы для DDL, который ссылается на
таблицу в табличном пространстве file-per-table.</li>

<li>Произведенное или существующее табличное пространство не может быть
изменено на общее табличное пространство.</li>
<li>Нет никакого конфликта между общими именами табличного пространства и
именами табличного пространства. Символ <span><span>/</span></span>, который
присутствует в именах табличного пространства file-per-table,
не разрешен в именах общего табличного пространства.</p></li></ul>

<h4><a name="idm139965342498544"></a>Примеры</h4>
<p>Этот пример демонстрирует создание общего табличного пространства и
добавление трех несжатых таблиц различных форматов строки.
<pre>
mysql&gt; CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' Engine=InnoDB;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts1
                 ROW_FORMAT=REDUNDANT;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1
                 ROW_FORMAT=COMPACT;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE TABLE t3 (c1 INT PRIMARY KEY) TABLESPACE ts1
                 ROW_FORMAT=DYNAMIC;
Query OK, 0 rows affected (0.00 sec)
</pre>

Этот пример демонстрирует создание общего табличного пространства и
добавление сжатой таблицы. Пример принимает значение по умолчанию
<a href="innodb.htm#sysvar_innodb_page_size"><code>innodb_page_size</code>
</a> 16K. <code>FILE_BLOCK_SIZE</code> = 8192
требует, чтобы у сжатой таблицы был <code>KEY_BLOCK_SIZE</code> = 8.
<pre>
mysql&gt; CREATE TABLESPACE `ts2` ADD DATAFILE 'ts2.ibd'
                 FILE_BLOCK_SIZE = 8192 Engine=InnoDB;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CREATE TABLE t4 (c1 INT PRIMARY KEY) TABLESPACE ts2
                 ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;
Query OK, 0 rows affected (0.00 sec)
</pre>

<h3><a name="create-trigger"></a>14.1.17. CREATE TRIGGER</h3>
<pre>
CREATE
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
TRIGGER <em><code>trigger_name</code></em>
<em><code>trigger_time</code></em> <em><code>trigger_event</code></em>
ON <em><code>tbl_name</code></em> FOR EACH ROW
[<em><code>trigger_order</code></em>]
<em><code>trigger_body</code></em>
<em><code>trigger_time</code></em>: { BEFORE | AFTER }
<em><code>trigger_event</code></em>: { INSERT | UPDATE | DELETE }
<em><code>trigger_order</code></em>: { FOLLOWS | PRECEDES } <em><code>other_trigger_name</code></em>
</pre>

Этот запрос создает новый триггер. Это объект базы данных, который связан с
таблицей и активируется, когда особое событие имеет место для таблицы.
Триггер становится связанным с таблицей, названной
<em><code>tbl_name</code></em>, которая должна быть постоянной.
Вы не можете связать триггер с таблицей
<code>TEMPORARY</code> или представлением.</p>

<p>Более аккуратные имена существуют в пространстве имен схемы, означая,
что у всех триггеров должны быть уникальные имена в пределах схемы. У
триггеров в различных схемах может быть то же самое имя.</p>

<p>Этот раздел описывает <a href="#create-trigger"><code>CREATE
TRIGGER</code></a>. Подробности в <a href="stored.htm#trigger-syntax">
разделе 21.3.1</a>.</p>

<p><a href="#create-trigger"><code>CREATE TRIGGER</code></a>
требует привилегию <a href="security.html#priv_trigger"><code>TRIGGER</code>
</a> для таблицы связаланной с триггером. Запрос может также потребовать
привилегию <a href="security.html#priv_super"><code>SUPER</code></a>
в зависимости от значения <code>DEFINER</code>.
Если двоичное журналирование включено,
<a href="#create-trigger"><code>CREATE TRIGGER</code></a>
мог бы потребовать привилегию <a href="security.html#priv_super">
<code>SUPER</code></a>, см.
<a href="stored.htm#stored-programs-logging">раздел 21.7</a>.</p>

<p><code>DEFINER</code> определяет контекст безопасности, который
будет использоваться, проверяя привилегии доступа во
время активации, как описано позже в этом разделе.</p>

<p><em><code>trigger_time</code></em> время срабатывания. Это может быть
<code>BEFORE</code> или <code>AFTER</code>, чтобы
указать, что триггер активируется прежде или после каждой строки,
которая будет изменена.</p>

<p><em><code>trigger_event</code></em>
указывает на вид работы, которая активирует триггер.
Допустимые значения <em><code>trigger_event</code></em>:</p>

<ul><li><p><a href="#insert"><code>INSERT</code></a>:
триггер активируется всякий раз, когда новая строка вставлена в таблицу,
например, через <a href="#insert"><code>INSERT</code></a>,
<a href="#load-data"><code>LOAD DATA</code></a> и
<a href="#replace"><code>REPLACE</code></a>.</li>

<li><a href="#update"><code>UPDATE</code></a>:
триггер активируется всякий раз, когда строка изменена, например, через
<a href="#update"><code>UPDATE</code></a>.</li>

<li><a href="#delete"><code>DELETE</code></a>:
триггер активируется всякий раз, когда строка удалена из таблицы,
например, через <a href="#delete"><code>DELETE</code></a> и
<a href="#replace"><code>REPLACE</code></a>.
<a href="#drop-table"><code>DROP TABLE</code></a> и
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
<span><em>не</em></span> активируют этот триггер, потому что они не
используют <a href="#delete"><code>DELETE</code></a>.
Удаление разделения не активирует <a href="#delete"><code>DELETE
</code></a>, а зачит и триггер.</p></li></ul>

<p><em><code>trigger_event</code></em> не представляет буквальный тип
запроса SQL, который активирует триггер, поскольку это представляет тип
табличной работы. Например, триггер
<a href="#insert"><code>INSERT</code></a> активируется не только для
<a href="#insert"><code>INSERT</code></a>, но и для
<a href="#load-data"><code>LOAD DATA</code></a>, потому что оба
запроса вставляют строки в таблицу.</p>

<p>Потенциально запутывающий пример этого <code>INSERT INTO ... ON DUPLICATE
KEY UPDATE ...</code>: триггер <code>BEFORE INSERT</code>
активируется для каждой строки, сопровождаемой любым триггером
<code>AFTER INSERT</code> или триггерами <code>BEFORE UPDATE</code> и
<code>AFTER UPDATE</code> в зависимости от того, было ли дублирование
ключа для строки.</p>
<p>Каскадные действия внешнего ключа не активируют триггеры.</p>

<p>Возможно определить многократные триггеры для данной таблицы, у которых
есть тот же самый случай и время действия. Например, Вы можете иметь два
триггера <code>BEFORE UPDATE</code>.
По умолчанию, триггеры, у которых есть тот же самый
случай и время действия, активируются в порядке, в котором они создавались.
Чтобы затронуть порядок, определите <em><code>trigger_order</code></em>,
который указывает <code>FOLLOWS</code> или <code>PRECEDES</code>
и название существующего триггера, у которого также есть тот же самый
случай и время действия. С <code>FOLLOWS</code>
новый триггер активируется после существующего, с <code>PRECEDES</code>
перед существующим триггером.</p>


<p><em><code>trigger_body</code></em> запрос, чтобы выполнить, когда триггер
активируется. Чтобы выполнить много запросов, используйте
<a href="#begin-end"><code>BEGIN ... END</code></a>.
Это также позволяет Вам использовать те же самые запросы, которые разрешены в
пределах сохраненных подпрограмм. См. <a href="#begin-end">раздел
14.6.1</a>. Некоторые запросы не разрешены в триггерах, см.
<a href="restr.htm#stored-program-restrictions">раздел C.1</a>.</p>

<p>В пределах тела триггера Вы можете обратиться к столбцам в подчиненной
таблице (таблица, связанная с триггером) при использовании псевдонимов
<code>OLD</code> и <code>NEW</code>. <code>OLD.<em><code>col_name</code></em>
</code> обращается к столбцу существующей строки прежде, чем это будет
обновлено или удалено. <code>NEW.<em><code>col_name</code></em></code>
обращается к столбцу новой строки, которая будет вставлена или существующей
строки после того, как столбец обновлен.</p>

<p>Триггеры не могут использовать
<code>NEW.<em><code>col_name</code></em></code> или
<code>OLD.<em><code>col_name</code></em></code>, чтобы обратиться к
произведенным столбцам. Для информации о произведенных столбцах см.
<a href="#create-table-generated-columns">раздел 14.1.15.5</a>.</p>

<p>MySQL хранит <a href="server.htm#sysvar_sql_mode"><code>sql_mode</code>
</a> когда триггер создается, и всегда выполняет триггер с этой установкой,
<span><em>независимо от текущего режима SQL, когда триггер выполняется
</em></span>.</p>

<p><code>DEFINER</code> определяет учетную запись MySQL, которая будет
использоваться, проверяя привилегии доступа во время активации. Если
<em><code>user</code></em> задано, это должна быть учетная запись MySQL,
определенная как <code>'<em><code>user_name</code></em>'@'<em><code>
host_name</code></em>'</code>,
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a> или
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>.
Значение по умолчанию <code>DEFINER</code>: пользователь, который выполняет
<a href="#create-trigger"><code>CREATE TRIGGER</code></a>.
Это то же самое, как определение <code>DEFINER = CURRENT_USER</code>.</p>

<p>Если Вы определяете <code>DEFINER</code>,
эти правила определяют допустимое значение <code>DEFINER</code>:</p>

<ul><li><p>Если Вы не имеете привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>,
разрешено единственное значение <em><code>user</code></em>: Ваша собственная
учетная запись, определенная буквально или при использовании
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>.
Вы не можете установить значение в некоторую другую учетную запись.</li>

<li>Если Вы имеете привилегию <a href="security.html#priv_super"><code>
SUPER</code></a>, Вы можете определить любое синтаксически допустимое имя
учетной записи. Если учетная запись не существует, предупреждение произведено.
</li>

<li>Хотя возможно создать триггер с несуществующей учетной записью
<code>DEFINER</code>, это не хорошая идея для таких триггеров, которые будут
активированы, пока учетная запись фактически не существует. Иначе поведение
относительно проверки привилегии неопределено.</p></li></ul>

<p>MySQL берет во внимание <code>DEFINER</code>, проверяя
привилегии следующим образом:</p>
<ul><li><p>В ходе <a href="#create-trigger"><code>CREATE TRIGGER
</code></a> пользователь, который делает запрос, должен иметь привилегию
<a href="security.html#priv_trigger"><code>TRIGGER</code></a>.</li>

<li>Во время активации привилегии проверены по <code>DEFINER</code>.
У этого пользователя должны быть эти привилегии:</p>
<ul><li><p><a href="security.html#priv_trigger"><code>TRIGGER</code></a>
для подчиненной таблицы.</li>

<li><a href="security.html#priv_select"><code>SELECT</code></a>
для подчиненной таблицы, если ссылки на столбцы таблицы происходят, используя
<code>OLD.<em><code>col_name</code></em></code> или
<code>NEW.<em><code>col_name</code></em></code> в триггере.</li>

<li><a href="security.html#priv_update"><code>UPDATE</code></a>
для подчиненной таблицы, если столбцы таблицы это цели
<code>SET NEW.<em><code>col_name</code></em> =
<em><code>value</code></em></code> в триггере.</li>
<li>Независимо от того, что другие привилегии обычно требуются для
запросов, выполненных триггером.</p></li></ul></li></ul>
<p>См. <a href="stored.htm#stored-programs-security">раздел 21.6</a>.</p>

<p>В пределах тела триггера <a href="funct.htm#function_current-user"><code>
CURRENT_USER()</code></a> возвращает учетную запись для проверки
привилегии во время активации. Это <code>DEFINER</code>, но
не пользователь, действия которого заставили триггер быть активированным. Для
информации о пользователе в пределах триггеров см.
<a href="security.html#account-activity-auditing">раздел 7.3.12</a>.</p>

<p>Если Вы используете <a href="#lock-tables"><code>LOCK TABLES</code>
</a>, чтобы заблокировать таблицу, у которой есть триггеры, таблицы,
используемые в пределах триггера, также заблокированы, как описано в
<a href="#lock-tables-and-triggers">разделе 14.3.5.2</a>.</p>
<p>См. <a href="stored.htm#trigger-syntax">раздел 21.3.1</a>.</p>

<h3><a name="create-view"></a>14.1.18. CREATE VIEW</h3>
<pre>
CREATE
[OR REPLACE]
[ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}]
[DEFINER = { <em><code>user</code></em> | CURRENT_USER }]
[SQL SECURITY { DEFINER | INVOKER }]
VIEW <em><code>view_name</code></em> [(<em><code>column_list</code></em>)]
AS <em><code>select_statement</code></em>
[WITH [CASCADED | LOCAL] CHECK OPTION]
</pre>

<a href="#create-view"><code>CREATE VIEW</code></a>
создает новое представление или заменяет существующее представление, если
указано <code>OR REPLACE</code>. Если представление не существует,
<a href="#create-view"><code>CREATE OR REPLACE VIEW</code></a>
то же самое, как <a href="#create-view"><code>CREATE VIEW</code></a>.
Если представление действительно существует,
<a href="#create-view"><code>CREATE OR REPLACE VIEW</code></a> то же
самое, как <a href="#alter-view"><code>ALTER VIEW</code></a>.</p>
<p>См. <a href="restr.htm#view-restrictions">раздел C.5</a>.</p>

<p><em><code>select_statement</code></em> это
<a href="#select"><code>SELECT</code></a>, который обеспечивает
определение представления. Выбирая из представления, выбираете в
действительности, используя именно этот
<a href="#select"><code>SELECT</code></a>.
<em><code>select_statement</code></em>
может выбрать из базовых таблиц или других представлений.</p>

<p>Определение представления <span><span>заморожено</span></span>
во время создания и не затронуто последующими изменениями определений
основных таблиц. Например, если представление определено как
<code>SELECT *</code> на таблице новые столбцы, добавленные к таблице позже,
не становятся частью представления, а столбцы, исключенные из таблицы,
приведут к ошибке, выбирая из представления.</p>

<p><code>ALGORITHM</code> затрагивает, как MySQL обрабатывает представление.
<code>DEFINER</code> и <code>SQL SECURITY</code> определяют контекст
безопасности, который будет использоваться, проверяя привилегии доступа во
время запроса представления. <code>WITH CHECK OPTION</code>
может быть дан, чтобы ограничить вставки или обновления строк в таблицах, на
которые ссылается представление. Эти пункты описаны позже в этом разделе.</p>

<p><a href="#create-view"><code>CREATE VIEW</code></a> требует
привилегии <a href="security.html#priv_create-view"><code>CREATE VIEW</code>
</a> для представления, и некоторую привилегию для каждого столбца,
выбранного <a href="#select"><code>SELECT</code></a>.
Для столбцов, используемых в другом месте в
<a href="#select"><code>SELECT</code></a>, Вы должны иметь привилегию
<a href="security.html#priv_select"><code>SELECT</code></a>. Если указано
<code>OR REPLACE</code>, Вы должны также иметь привилегию
<a href="security.html#priv_drop"><code>DROP</code></a> для представления.
<a href="#create-view"><code>CREATE VIEW</code></a>
мог бы также потребовать привилегию <a href="security.html#priv_super"><code>
SUPER</code></a> в зависимости от значения <code>DEFINER</code>, как описано
позже в этом разделе.</p>

<p>Когда на представление ссылаются, проверка привилегии происходит как
описано позже в этом разделе.</p>
<p>Представление принадлежит базе данных. По умолчанию, новое представление
создается в базе данных по умолчанию. Чтобы создать представление явно в
данной базе данных, надо использовать <em><code>db_name.view_name</code>
</em>, чтобы квалифицировать имя представления с именем базы данных:
<pre>
CREATE VIEW test.v AS SELECT * FROM t;
</pre>

Неквалифицированное имя таблицы или представления в
<a href="#select"><code>SELECT</code></a> также интерпретируется
относительно базы данных значения по умолчанию. Представление может
обратиться к таблицам или представлениям в других базах данных, квалифицируя
таблицу или рассмотреть имя с соответствующим именем базы данных.</p>

<p>В пределах базы данных базовые таблицы и представления совместно
используют то же самое пространство имен, таким образом, у базовой таблицы и
представления не может быть того же самого имени.</p>

<p>Столбцы, полученные <a href="#select"><code>SELECT</code></a>,
могует быть простыми ссылками на столбцы таблицы или выражениями, которые
используют функции, постоянные величины, операторы и т.д.</p>

<p>У представления должны быть уникальные имена столбцов без дубликатов,
точно так же, как у базовой таблицы. По умолчанию названия столбцов,
полученных <a href="#select"><code>SELECT</code></a>,
используются для имен столбцов представления. Чтобы определить явные названия
столбцов представления, определите дополнительно
<em><code>column_list</code></em> как список отделенных запятыми
идентификаторов. Число имен в <em><code>column_list</code></em>
должно быть то же самое, как число столбцов, полученных
<a href="#select"><code>SELECT</code></a>.</p>

<p>Представление может быть создано из многих видов
<a href="#select"><code>SELECT</code></a>.
Это может сослаться на базовые таблицы или другие представления.
Это может использовать соединения,
<a href="#union"><code>UNION</code></a> и подзапросы.
<a href="#select"><code>SELECT</code></a> даже не обязан
обращаться к таблицам вообще:
<pre>
CREATE VIEW v_today (today) AS SELECT CURRENT_DATE;
</pre>

Следующий пример определяет представление, которое выбирает два столбца из
другой таблицы, так же как выражение, вычисленное от тех столбцов:
<pre>
mysql&gt; CREATE TABLE t (qty INT, price INT);
mysql&gt; INSERT INTO t VALUES(3, 50);
mysql&gt; CREATE VIEW v AS SELECT qty, price, qty*price AS value FROM t;
mysql&gt; SELECT * FROM v;
+-----+-------+-------+
| qty | price | value |
+-----+-------+-------+
| 3   | 50    |   150 |
+-----+-------+-------+
</pre>
Определение представления подвергается следующим ограничениям:</p>

<ul><li><p><a href="#select"><code>SELECT</code></a> не может
отнестись к системным или определяемым пользователем переменным.</li>
<li>В пределах сохраненной программы
<a href="#select"><code>SELECT</code></a>
не может отнестись к параметрам программы или местным переменным.</li>
<li><a href="#select"><code>SELECT</code></a>
не может отнестись к готовым параметрам запроса.</li>

<li>Любая таблица или представление, упомянутое в определении, должны
существовать. Если после того как представление было создано, таблица или
представление удалено, использование результатов приведет к ошибке. Чтобы
проверить определение представления на проблемы этого вида, используйте
<a href="#check-table"><code>CHECK TABLE</code></a>.</li>

<li>Определение не может отнестись к таблицам <code>TEMPORARY</code>,
Вы не можете создать представление <code>TEMPORARY</code>.</li>
<li>Вы не можете связать триггер с представлением.</li>

<li>Псевдонимы для имен столбцов в
<a href="#select"><code>SELECT</code></a>
проверены по максимальной длине столбца 64 символов (не максимальной
длине псевдонима 256 символов).</p></li></ul>

<p><code>ORDER BY</code> разрешен в определении представления, но это
проигнорировано, если Вы выбираете из представления, используя запрос, у
которого есть его собственный <code>ORDER BY</code>.</p>

<p>Для других опций или пунктов в определении эффект не определен. Например,
если определение представления включает <code>LIMIT</code>,
и Вы выбираете из представления, используя запрос, у которого есть его
собственный <code>LIMIT</code>, не определено, какой предел применяется. Этот
же самый принцип относится к таким опциям, как
<code>ALL</code>, <code>DISTINCT</code> или <code>SQL_SMALL_RESULT</code>,
<code>INTO</code>, <code>FOR UPDATE</code>,
<code>LOCK IN SHARE MODE</code> и <code>PROCEDURE</code>.</p>

<p>Результаты, полученные из представления, могут быть затронуты, если Вы
изменяете окружающую среду обработки запроса, меняя переменные системы:
<pre>
mysql&gt; CREATE VIEW v (mycol) AS SELECT 'abc';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SET sql_mode = '';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT "mycol" FROM v;
+-------+
| mycol |
+-------+
| mycol |
+-------+
1 row in set (0.01 sec)

mysql&gt; SET sql_mode = 'ANSI_QUOTES';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT "mycol" FROM v;
+-------+
| mycol |
+-------+
| abc   |
+-------+
1 row in set (0.00 sec)
</pre>

<code>DEFINER</code> и <code>SQL SECURITY</code>
определяют, который пользователь MySQL
использовать, проверяя привилегии доступа на представлении, когда запрос
выполнен. Допустимые <code>SQL SECURITY</code>:
<code>DEFINER</code>(значение по умолчанию) и <code>INVOKER</code>.
Они указывают, что необходимые привилегии должны быть проведены
пользователем, который определил или вызвал представление, соответственно.
</p>

<p>Если <em><code>user</code></em> задано для <code>DEFINER</code>,
это должна быть учетная запись MySQL, определенная как
<code>'<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'
</code>,
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a> или
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>.
Значение по умолчанию <code>DEFINER</code> это пользователь, который
выполняет <a href="#create-view"><code>CREATE VIEW</code></a>.
Это то же самое, как определение <code>DEFINER = CURRENT_USER</code>.</p>

<p>Если <code>DEFINER</code> задан, эти правила определяют
допустимое значение <code>DEFINER</code>:</p>
<ul><li><p>Если Вы не имеете привилегии <a href="security.html#priv_super">
<code>SUPER</code></a>, единственное допустимое значение
<em><code>user</code></em> это Ваша собственная учетная запись, определенная
буквально или при использовании
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>.
Вы не можете установить definer в некоторую другую учетную запись.</li>

<li>Если Вы имеете привилегию <a href="security.html#priv_super"><code>SUPER
</code></a>, Вы можете определить любое синтаксически допустимое имя учетной
записи. Если учетная запись не существует, предупреждение произведено.</li>

<li>Хотя возможно создать представление с несуществующим
<code>DEFINER</code>, ошибка происходит, когда на представление ссылаются,
если <code>SQL SECURITY</code> = <code>DEFINER</code>, но definer нет.
</p></li></ul>
<p>См. <a href="stored.htm#stored-programs-security">раздел 21.6</a>.</p>

<p>В пределах определения представления
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>
возвращает значение по умолчанию <code>DEFINER</code>.
Для представлений, определенных с <code>SQL SECURITY INVOKER</code>,
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>
возвращает учетку вызывающего представление. См.
<a href="security.html#account-activity-auditing">раздел 7.3.12</a>.</p>

<p>В пределах сохраненной подпрограммы, которая определена с <code>SQL
SECURITY DEFINER</code>, <a href="funct.htm#function_current-user"><code>
CURRENT_USER</code></a> возвращает <code>DEFINER</code> подпрограммы.
Это также затрагивает представление, определенное в пределах такой
подпрограммы, если определение представления содержит <code>DEFINER</code>
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a>.</p>

<p>MySQL проверяет привилегии представления:</p>
<ul><li><p>Во время определения представления создателю представления нужны
были привилегии, чтобы использовать высокоуровневые объекты, к которым
получает доступ представление. Например, если определение представления
ссылается на столбцы таблицы, у создателя должна быть некоторая привилегия
для каждого столбца в избранном списке определения и привилегия
<a href="security.html#priv_select"><code>SELECT</code></a>
для каждого столбца, используемого в другом месте в определении. Если
определение относится к сохраненной функции, только привилегии нужные для
вызова функцию, могут быть проверены. Привилегии, требуемые в функции,
могут быть проверены только когда она выполняется: для различных вызовов
могли быть взяты различные пути выполнения в пределах функции.</li>

<li>У пользователя, который ссылается на представление, должны быть
соответствующие привилегии, чтобы получить доступ
(<a href="security.html#priv_select"><code>SELECT</code></a>,
<a href="security.html#priv_insert"><code>INSERT</code></a> и т.д.).</li>

<li>Когда на представление сослались, привилегии для объектов, к которым
получает доступ представление, проверены по привилегиям, проводимым
<code>DEFINER</code> представления для создателя или обращающегося,
смотря по значению <code>SQL SECURITY</code>
(<code>DEFINER</code> или <code>INVOKER</code>).</li>

<li>Если ссылка на представление вызывает выполнение сохраненной функции,
проверка привилегий запросов, выполненных в пределах функции, зависит от
<code>SQL SECURITY</code> функции. Если характеристика безопасности
<code>DEFINER</code>, функция работает с привилегиями учетки
<code>DEFINER</code>. Если характеристика безопасности
<code>INVOKER</code>, функция работает с привилегиями, определенными
<code>SQL SECURITY</code> представления.</p></li></ul>

<p>Пример: представление могло бы зависеть от сохраненной функции, а функция
могла бы вызвать другие сохраненные подпрограммы. Например, следующее
представление вызывает сохраненную функцию <code>f()</code>:
<pre>
CREATE VIEW v AS SELECT * FROM t WHERE t.id = f(t.name);
</pre>

Предположите, что <code>f()</code> содержит запрос:
<pre>
IF name IS NULL then
   CALL p1();
ELSE
   CALL p2();
END IF;
</pre>

Привилегии, требуемые для того, чтобы выполнить запрос в пределах
<code>f()</code>, будут проверены, когда выполняется <code>f()</code>.
Это могло бы означать, что привилегии необходимы для <code>p1()</code> или
<code>p2()</code>, в зависимости от пути выполнения в пределах
<code>f()</code>. Те привилегии должны быть проверены во время выполнения, и
пользователь, который должен обладать привилегиями, определен <code>SQL
SECURITY</code> представления <code>v</code> и функции <code>f()</code>.</p>

<p><code>DEFINER</code> и <code>SQL SECURITY</code> для представлений это
расширения к стандартному SQL. В стандартном SQL представления обработаны,
используя правила для <code>SQL SECURITY DEFINER</code>.
Стандарт говорит, что definer представления, который является тем же самым,
как владельцем схемы представления, получает применимые права на
представлении (например, <a href="security.html#priv_select"><code>SELECT
</code></a>) и может предоставить их. У MySQL нет никакого понятия
<span><span>владельца</span></span> схемы, таким образом, MySQL добавляет
пункт, чтобы идентифицировать definer. <code>DEFINER</code>
расширение, где намерение состоит в том, чтобы иметь то, что имеет стандарт,
то есть, постоянный отчет о том, кто определил представление.
Это то, почему значение по умолчанию <code>DEFINER</code>
учетная запись создателя представления.</p>

<p><code>ALGORITHM</code> тоже расширение MySQL.
Это затрагивает, как MySQL обрабатывает представление.
<code>ALGORITHM</code> берет три значения:
<code>MERGE</code>, <code>TEMPTABLE</code> или <code>UNDEFINED</code>.
См. разделы <a href="stored.htm#view-algorithms">21.5.2</a> и
<a href="optimiz.htm#derived-table-optimization">9.2.1.18.3</a>.</p>

<p>Некоторые представления обновляемые. Таким образом, Вы можете использовать
их в запросах <a href="#update"><code>UPDATE</code></a>,
<a href="#delete"><code>DELETE</code></a> или
<a href="#insert"><code>INSERT</code></a>, чтобы
обновить содержание основной таблицы. Для представления, чтобы быть
обновляемым, должны быть непосредственные отношения между строками в
представлении и строками в основной таблице. Есть также определенные другие
конструкции, которые делают представление необновляемым.</p>

<p>Произведенный столбец в представлении считают обновляемым, потому что
возможно назначить на него значение. Однако, если такой столбец обновлен
явно, единственное разрешенное значение <code>DEFAULT</code>. См.
<a href="#create-table-generated-columns">раздел 14.1.15.5</a>.</p>

<p><code>WITH CHECK OPTION</code> может быть дан для обновляемого
представления, чтобы предотвратить вставки или обновления к строкам кроме
тех, для которых <code>WHERE</code> в
<em><code>select_statement</code></em> истина.</p>

<p>В <code>WITH CHECK OPTION</code> для обновляемого представления
ключевые слова <code>LOCAL</code> и <code>CASCADED</code>
определяют контекст проверки, когда представление определено с точки зрения
другого представления. <code>LOCAL</code> ограничивает
<code>CHECK OPTION</code> только к определяемому представлению.
<code>CASCADED</code> вызывает проверку на то, чтобы лежать в основе
представлений, которые будут оценены также. Когда никакое ключевое слово не
дано, значение по умолчанию <code>CASCADED</code>.</p>
<p>См. разделы <a href="stored.htm#view-updatability">21.5.3</a> и
<a href="stored.htm#view-check-option">21.5.4</a>.</p>

<h3><a name="drop-database"></a>14.1.19. DROP DATABASE</h3>
<pre>
DROP {DATABASE | SCHEMA} [IF EXISTS] <em><code>db_name</code></em>
</pre>

<a href="#drop-database"><code>DROP DATABASE</code></a> удаляет
все таблицы в базе данных и базу данных. Будьте
<span><em>очень</em></span> осторожны с этим запросом! Чтобы использовать
<a href="#drop-database"><code>DROP DATABASE</code></a>, нужна
привилегия <a href="security.html#priv_drop"><code>DROP</code></a>
на базе данных. <a href="#drop-database"><code>DROP SCHEMA</code></a>
синоним для <a href="#drop-database"><code>DROP DATABASE</code></a>.
</p>

<p>Когда база данных удалена, пользовательские привилегии на базе данных
<span><em>не</em></span> удалены автоматически. см.
<a href="#grant">раздел 14.7.1.6</a>.</p>

<p><code>IF EXISTS</code> используется, чтобы препятствовать ошибке,
если база данных не существует.</p>
<p>Если база данных по умолчанию удалена, она сброшена
(<a href="funct.htm#function_database"><code>DATABASE()</code></a>
вернет <code>NULL</code>).</p>

<p>Если Вы используете <a href="#drop-database"><code>DROP DATABASE
</code></a> на символически соединенной базе данных, удалены ссылка и
оригинальная база данных.</p>
<p><a href="#drop-database"><code>DROP DATABASE</code></a>
возвращает число таблиц, которые были удалены.</p>

<p><a href="#drop-database"><code>DROP DATABASE</code></a>
удаляет из данного каталога базы данных те файлы и каталоги, которые сам
MySQL может создать во время нормального функционирования. Это включает все
файлы с расширениями, показанными в следующей таблице.</p>

<table border="1">
<tbody><tr><td scope="row"><code>.BAK</code></td><td><code>.DAT</code></td>
<td><code>.HSH</code></td><td><code>.MRG</code></td></tr>
<tr><td scope="row"><code>.MYD</code></td><td><code>.MYI</code></td>
<td><code>.cfg</code></td><td><code>.db</code></td></tr>
<tr><td scope="row"><code>.ibd</code></td><td><code>.ndb</code></td>
<td> </td><td> </td></tr></tbody></table>

<p>Если другие файлы или каталоги остаются в каталоге базы данных после того,
как MySQL удаляет только перечисленных, каталог базы данных не может быть
удален. В этом случае, Вы должны удалить любые остающиеся файлы или каталоги
вручную и снова использовать <a href="#drop-database"><code>DROP
DATABASE</code></a>.</p>

<p>Удаление базы данных не удаляет таблицы <code>TEMPORARY</code>, которые
были составлены в той базе данных. Таблицы <code>TEMPORARY</code>
автоматически удалены, когда сеанс, который создал их, заканчивается.</p>

<p>Вы можете также удалить базы данных с помощью
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin</strong></span>
</a>. см. <a href="programs.htm#mysqladmin">раздел 5.5.2</a>.</p>

<h3><a name="drop-event"></a>14.1.20. DROP EVENT</h3>
<pre>
DROP EVENT [IF EXISTS] <em><code>event_name</code></em>
</pre>
Этот запрос удаляет событие <em><code>event_name</code></em>.
Оно немедленно прекращает быть активным и удалено полностью из сервера.</p>

<p>Если событие не существует, будет ошибка <span>ERROR 1517
(HY000): Unknown event '<em><code>event_name</code></em>'</span>.
Вы можете переопределить это и заставить запрос вместо этого производить
предупреждение для несуществующих событий, используя <code>IF EXISTS</code>.
</p>
<p>Это запрос требует привилегии <a href="security.html#priv_event"><code>
EVENT</code></a> для схемы, к которой принадлежит удаляемое событие.</p>

<h3><a name="drop-function"></a>14.1.21. DROP FUNCTION</h3>
<p><a href="#drop-function"><code>DROP FUNCTION</code></a>
используется, чтобы удалить сохраненные функции и определяемые
пользователем функции (UDF):</p>

<ul><li><p>См. <a href="#drop-procedure">раздел 14.1.23</a>.</li>
<li>См. <a href="#drop-function-udf">раздел 14.7.3.2</a>.
</p></li></ul>

<h3><a name="drop-index"></a>14.1.22. DROP INDEX</h3>
<pre>
DROP INDEX <em><code>index_name</code></em> ON <em><code>tbl_name</code></em>
[<em><code>algorithm_option</code></em> | <em><code>lock_option</code></em>] ...

<em><code>algorithm_option</code></em>:
ALGORITHM [=] {DEFAULT|INPLACE|COPY}

<em><code>lock_option</code></em>:
LOCK [=] {DEFAULT|NONE|SHARED|EXCLUSIVE}
</pre>

<a href="#drop-index"><code>DROP INDEX</code></a>
удаляет индекс <em><code>index_name</code></em> из таблицы
<em><code>tbl_name</code></em>. Отображен на
<a href="#alter-table"><code>ALTER TABLE</code></a>, чтобы удалить
индекс. См. <a href="#alter-table">раздел 14.1.7</a>.</p>

<p>Чтобы удалить первичный ключ, имя индекса всегда
<code>PRIMARY</code>, которое должно быть определено как заключенный в
кавычки идентификатор, потому что <code>PRIMARY</code> спецслово:
<pre>
DROP INDEX `PRIMARY` ON t;
</pre>

<code>ALGORITHM</code> и <code>LOCK</code> могут быть указаны.
Они влияют на табличный метод копирования и уровень параллелизма для чтения и
записи таблицы в то время, как индекс изменяется. У них есть то же самое
значение, что <a href="#alter-table"><code>ALTER TABLE</code></a>.
См. <a href="#alter-table">раздел 14.1.7</a>.</p>

<h3><a name="drop-procedure"></a>14.1.23. DROP PROCEDURE и DROP FUNCTION
</h3>
<pre>
DROP {PROCEDURE | FUNCTION} [IF EXISTS] <em><code>sp_name</code></em>
</pre>

Этот запрос используется, чтобы удалить хранимую процедуру или функцию. Таким
образом, указанная подпрограмма удалена из сервера. Вы должны иметь
привилегию <a href="security.html#priv_alter-routine"><code>ALTER ROUTINE
</code></a> для подпрограммы. Если включена <code>automatic_sp_privileges
</code>, эта привилегия и <a href="security.html#priv_execute"><code>EXECUTE
</code></a> предоставлены автоматически создателю, когда подпрограмма создана
и удалены у создателя, когда подпрограмма удалена. См.
<a href="stored.htm#stored-routines-privileges">раздел 21.2.2</a>.</p>

<p><code>IF EXISTS</code> расширение MySQL. Это препятствует ошибке, если
процедура или функция не существуют. Предупреждение произведено, которое
может быть рассмотрено с <a href="#show-warnings"><code>SHOW WARNINGS
</code></a>.</p>

<p><a href="#drop-function"><code>DROP FUNCTION</code></a>
также используется, чтобы удалить определяемые пользователем функции (см.
<a href="#drop-function-udf">раздел 14.7.3.2</a>).</p>

<h3><a name="drop-server"></a>14.1.24. DROP SERVER</h3>
<pre>
DROP SERVER [ IF EXISTS ] <em><code>server_name</code></em>
</pre>

Удаляет определение сервера для названного сервера
<code><em><code>server_name</code></em></code>. The
Соответствующая строка в <code>mysql.servers</code> удалена. Это запрос
требует привилегию <a href="security.html#priv_super"><code>SUPER</code></a>.
</p>

<p>Удаление сервера для таблицы не затрагивает таблицы
<code>FEDERATED</code>, которые использовали эту информацию о соединении,
когда они создавались. См. <a href="#create-server">раздел 14.1.14
</a>.</p>

<p><code>DROP SERVER</code> не закрывает транзакцию.</p>
<p><code>DROP SERVER</code> не записан в двоичный журнал, независимо от
формата журналирования, который используется.</p>

<h3><a name="drop-table"></a>14.1.25. DROP TABLE</h3>
<pre>
DROP [TEMPORARY] TABLE [IF EXISTS]
<em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>] ...
[RESTRICT | CASCADE]
</pre>

<a href="#drop-table"><code>DROP TABLE</code></a>
удаляет одну или более таблиц. Вы должны иметь привилегию
<a href="security.html#priv_drop"><code>DROP</code></a>
для каждой таблицы. Все табличные данные и табличное определение
<span><em>удалены</em></span>, так что <span><em>будьте осторожны</em>
</span>! Если какая-либо из таблиц, названных в списке параметров, не
существует, MySQL возвращает ошибку, указывая по имени, какие несуществующие
таблицы не удалось удалить, но удаляет все таблицы в списке,
которые действительно существуют.</p>

<p>Когда таблица удалена, пользовательские привилегии на таблице
<span><em>не</em></span> удалены автоматически. См.
<a href="#grant">раздел 14.7.1.6</a>.</p>

<p>Для разделенной таблицы <a href="#drop-table"><code>DROP TABLE
</code></a> удаляет табличное определение, все его разделение и все данные,
которые хранились в разделении. Это также удаляет определения разделения,
связанные с удаленной таблицей.</p>

<p><code>IF EXISTS</code> препятствует ошибке
для таблиц, которые не существуют. <code>NOTE</code>
произведен для каждой несуществующей таблицы, используя
<code>IF EXISTS</code>. См. <a href="#show-warnings">раздел 14.7.5.40
</a>.</p>

<p><code>RESTRICT</code> и <code>CASCADE</code> разрешены, чтобы сделать
проще портирование. В MySQL 8.0 ничего они не делают.</p>
<p><a href="#drop-table"><code>DROP TABLE</code></a> автоматически
закрывает текущую активную транзакцию, если Вы
не используете <code>TEMPORARY</code>.</p>

<p><code>TEMPORARY</code> имеет следующие эффекты:</p>
<ul><li><p>Запрос удаляется только таблицы <code>TEMPORARY</code>.</li>
<li>Запрос не заканчивает продолжающуюся транзакцию.</li>

<li>Никакие права доступа не проверены (<code>TEMPORARY</code>
видима только сеансу, который создал ее, таким образом, никакая
проверка не нужна).</p></li></ul>
<p>Применение <code>TEMPORARY</code> хороший способ гарантировать, что Вы
случайно не удаляете не-<code>TEMPORARY</code> таблицу.</p>

<h3><a name="drop-tablespace"></a>14.1.26. DROP TABLESPACE</h3>
<pre>
DROP TABLESPACE <em><code>tablespace_name</code></em>
   [ENGINE [=] <em><code>engine_name</code></em>]
</pre>

Этот запрос используется, чтобы удалить общее табличное пространство
<code>InnoDB</code>, которое создавалось, используя
<a href="#create-tablespace"><code>CREATE TABLESPACE</code></a> (см.
<a href="#create-tablespace">раздел 14.1.16</a>).</p>

<p>Все таблицы должны быть исключены из табличного пространства до
<code>DROP TABLESPACE</code>. Если табличное пространство не пусто,
<code>DROP TABLESPACE</code> возвращает ошибку.</p>

<p><code><em><code>tablespace_name</code></em></code>
чувствительный к регистру идентификатор в MySQL.</p>
<p><code>ENGINE</code>: Определяет механизм хранения, который использует
табличное пространство, где <em><code>engine_name</code></em>
название механизма хранения. В настоящее время только <code>InnoDB</code>
поддержан. Вы не должны определить <code>ENGINE = InnoDB</code>, если
<code>InnoDB</code> определен как механизм хранения по умолчанию
(<a href="server.htm#sysvar_default_storage_engine"><code>
default_storage_engine=InnoDB</code></a>).</p>

<p><code>DROP TABLESPACE</code> поддержан с <code>InnoDB</code> с MySQL
5.7.6. В более ранних выпусках <code>DROP TABLESPACE</code> поддерживает
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>, MySQL Cluster.
<code>DROP TABLESPACE</code> поддерживает
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a> в MySQL 5.7 когда MySQL Cluster
переходит кодовой базы MySQL 5.7. Последняя версия MySQL Cluster
основана на MySQL 5.6.</p>

<h4><a name="idm139965341991712"></a>Примечания</h4>
<ul><li><p>Табличное пространство не удалено автоматически, когда последняя
таблица в табличном пространстве удалена. Табличное пространство должно быть
удалено явно, используя <code>DROP TABLESPACE <em><code>tablespace_name
</code></em></code>.</li>

<li><a href="#drop-database"><code>DROP DATABASE</code></a>
может удалить таблицы, которые принадлежат общему табличному пространству, но
она не может удалить табличное пространство, даже если удаляет все таблицы,
которые принадлежат табличному пространству. Табличное пространство должно
быть удалено явно, используя <code>DROP TABLESPACE
<em><code>tablespace_name</code></em></code>.</li>

<li>Подобно системному табличному пространству, усекание или удаление таблиц,
сохраненных в общем табличном пространстве, создает свободное пространство
внутренне в общем табличном пространстве <code>InnoDB</code>.</p></li></ul>

<h4><a name="idm139965341981968"></a>Пример</h4>
<p>Этот пример демонстрирует, как удалить общее табличное пространство
<code>InnoDB</code>. Общее табличное пространство <code>ts1</code>
создается с единственной таблицей. Прежде чем удалить табличное пространство,
таблица должна быть удалена.
<pre>
mysql&gt; CREATE TABLESPACE `ts1` ADD DATAFILE 'ts1.ibd' Engine=InnoDB;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CREATE TABLE t1 (c1 INT PRIMARY KEY) TABLESPACE ts10 Engine=InnoDB;
Query OK, 0 rows affected (0.02 sec)

mysql&gt; DROP TABLE t1;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; DROP TABLESPACE ts1;
Query OK, 0 rows affected (0.01 sec)
</pre>

<h3><a name="drop-trigger"></a>14.1.27. DROP TRIGGER</h3>
<pre>
DROP TRIGGER [IF EXISTS] [<em><code>schema_name</code></em>.]<em><code>trigger_name</code></em>
</pre>

Этот запрос удаляет триггер. Имя хемы (базы данных) является дополнительным.
Если схема опущена, триггер исключен из схемы по умолчанию.
<a href="#drop-trigger"><code>DROP TRIGGER</code></a> требует
привилегию <a href="security.html#priv_trigger"><code>TRIGGER</code></a>
для таблицы с триггером.</p>

<p><code>IF EXISTS</code> препятствовует ошибке
для триггера, который не существует. См.
<a href="#show-warnings">раздел 14.7.5.40</a>.</p>
<p>Триггеры для таблицы также удалены, если Вы удаляете таблицу.</p>

<h3><a name="drop-view"></a>14.1.28. DROP VIEW</h3>
<pre>
DROP VIEW [IF EXISTS]
<em><code>view_name</code></em> [, <em><code>view_name</code></em>] ...
[RESTRICT | CASCADE]
</pre>

<a href="#drop-view"><code>DROP VIEW</code></a>
удаляет одно или более представлений. Вы должны иметь
привилегию <a href="security.html#priv_drop"><code>DROP</code></a>
для каждого представления. Если какое-либо из представлений, названных в
списке параметров, не существует, MySQL возвращает ошибку, указывая по имени,
какие несуществующие представления это было неспособно удалить, но удаляет
все представления в списке, которые действительно существуют.</p>

<p><code>IF EXISTS</code> препятствует ошибке
для представлений, которые не существуют. См.
<a href="#show-warnings">раздел 14.7.5.40</a>.</p>
<p><code>RESTRICT</code> и <code>CASCADE</code>,
если дано, разобраны и проигнорированы.</p>

<h3><a name="rename-table"></a>14.1.29. RENAME TABLE</h3>
<pre>
RENAME TABLE <em><code>tbl_name</code></em> TO <em><code>new_tbl_name</code></em>
[, <em><code>tbl_name2</code></em> TO <em><code>new_tbl_name2</code></em>] ...
</pre>

Это запрос переименовывает одну или более таблиц. Работа сделана атомарно,
что означает, что никакой другой сеанс не может получить доступ ни к одной из
таблиц в то время, как переименование работает.</p>

<p>Например, таблица <code>old_table</code> может быть
переименована <code>new_table</code>:
<pre>
RENAME TABLE old_table TO new_table;
</pre>

Этот запрос эквивалентен
<a href="#alter-table"><code>ALTER TABLE</code></a>:
<pre>
ALTER TABLE old_table RENAME new_table;
</pre>

Если запрос переименовывает больше, чем одну таблицу, операции сделаны слева
направо. Если Вы хотите поменять два имени таблиц, Вы можете сделать так
(<code>tmp_table</code> пока нет):
<pre>
RENAME TABLE old_table TO tmp_table, new_table TO old_table,
       tmp_table TO new_table;
</pre>

MySQL проверяет целевое имя таблицы прежде, чем проверить, существует ли
исходная таблица. Например, если <code>new_table</code> уже есть, а
<code>old_table</code> пока нет, следующий запрос терпит неудачу,
как показано здесь:
<pre>
mysql&gt; SHOW TABLES;
+----------------+
| Tables_in_mydb |
+----------------+
| table_a        |
+----------------+
1 row in set (0.00 sec)

mysql&gt; RENAME TABLE table_b TO table_a;
ERROR 1050 (42S01): Table 'table_a' already exists
</pre>

Если две базы данных находятся на той же самой файловой системе, Вы можете
использовать <a href="#rename-table"><code>RENAME TABLE</code></a>,
чтобы перемещать таблицу от одной базы данных в другую:
<pre>
RENAME TABLE <em><code>current_db.tbl_name</code></em>
       TO <em><code>other_db.tbl_name;</code></em>
</pre>

Вы можете использовать этот метод, чтобы переместить все таблицы от одной
базы данных в другую, в действительности переименовывая базу данных. У MySQL
нет никакого спецзапроса, чтобы выполнить эту задачу.</p>

<p>Если есть какие-либо триггеры, связанные с таблицей, которая перемещена
в иную базу данных, запрос терпит неудачу с ошибкой
<span>Trigger in wrong schema</span>.</p>

<p>Внешние ключи, которые указывают на переименованную таблицу, автоматически
не обновлены. В таких случаях Вы должны удалить и обновить внешние ключи,
чтобы функционировать должным образом.</p>

<p><code>RENAME TABLE</code> также работает для представлений, пока Вы не
пытаетесь переименовать представление в иную базу данных.</p>
<p>Любые привилегии, предоставленные определенно для переименованной таблицы
или представления, не мигрируют к новому имени.
Они должны быть изменены вручную.</p>

<p>Когда Вы выполняете <code>RENAME TABLE</code>, у Вас не может быть никаких
заблокированных таблиц или активных транзакций. Вы должны также иметь
привилегии <a href="security.html#priv_alter"><code>ALTER</code></a> и
<a href="security.html#priv_drop"><code>DROP</code></a>
на оригинальной таблице, <a href="security.html#priv_create"><code>CREATE
</code></a> и <a href="security.html#priv_insert"><code>INSERT</code></a>
на новой таблице.</p>

<p>Если MySQL сталкивается с проблемами, когда переименовывает много таблиц,
он делает всех действий, чтобы возвратить все к исходному состоянию.</p>

<p>Вы не можете использовать <code>RENAME TABLE</code>, чтобы
переименовать таблицу <code>TEMPORARY</code>. Однако, Вы можете использовать
<a href="#alter-table"><code>ALTER TABLE</code></a>.</p>

<p>Подобно <code>RENAME TABLE</code>, <code>ALTER TABLE ... RENAME</code>
может также использоваться, чтобы переместить таблицу в иную базу данных.
Независимо от запроса, используемого, чтобы выполнить переименовывание, если
работа переместила бы таблицу в базу данных, расположенную в иной файловой
системе, успех результата определен платформой и зависит от основных
требований операционной системы, используемых, чтобы
переместить табличные файлы.</p>

<h3><a name="truncate-table"></a>14.1.30. TRUNCATE TABLE</h3>
<pre>
TRUNCATE [TABLE] <em><code>tbl_name</code></em>
</pre>

<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
освобождает таблицу полностью. Это требует привилегии
<a href="security.html#priv_drop"><code>DROP</code></a>. Логически
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a> это
<a href="#delete"><code>DELETE</code></a>, который удаляет все строки,
или последовательность <a href="#drop-table"><code>DROP TABLE</code>
</a> и <a href="#create-table"><code>CREATE TABLE</code></a>.</p>

<p>В MySQL 8.0 <a href="#truncate-table"><code>TRUNCATE TABLE</code>
</a> отображен на <a href="#drop-table"><code>DROP TABLE</code></a> и
<a href="#create-table"><code>CREATE TABLE</code></a>.
В результате этого изменения <a href="#truncate-table"><code>TRUNCATE
TABLE</code></a> является временно не атомным. Сьой сервера во время
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
может привести к удаленной таблице и ограничениям внешнего ключа в
системных таблицах <code>InnoDB</code> <code>SYS_FOREIGN</code> и
<code>SYS_FOREIGN_COLS</code>.</p>

<p>Чтобы достигнуть высокой производительности,
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
обходит метод DML удаления данных. Таким образом, это не может быть откачено,
это не вызывает триггеры <code>ON DELETE</code> и это не может быть выполнено
для таблиц <code>InnoDB</code> с родительско-дочерними
отношениями внешнего ключа.</p>

<p>Хотя <a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
подобно <a href="#delete"><code>DELETE</code></a>,
это классифицировано как запрос DDL, а не запрос DML. Это отличается от
<a href="#delete"><code>DELETE</code></a>:</p>

<ul><li><p>Усеченные операции удаляют и обновляют таблицу намного быстрее,
чем удаление строк, особенно для больших таблиц.</li>
<li>Усеченные операции вызывают неявное закрытие транзакции и
не могут быть откачены.</li>

<li>Операции усечения не могут быть выполнены, если сеанс держит
активную табличную блокировку.</li>
<li><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
терпит неудачу для таблицы <code>InnoDB</code> или
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>,
если есть ограничения <code>FOREIGN KEY</code> от других таблиц. Ограничения
внешнего ключа между столбцами той же самой таблицы разрешены.</li>

<li>Операции усечения не возвращают значащее значение для числа удаленных
строк. Обычный результат <span><span>0 rows affected</span></span>, который
должен интерпретироваться как <span><span>нет данных</span></span>.</li>

<li>Пока табличное определение допустимо, таблица может быть обновлена как
пустая таблица с <a href="#truncate-table"><code>TRUNCATE TABLE</code>
</a>, даже если файлы с данными или индексные файлы стали поврежденными.</li>

<li>Любое значение <code>AUTO_INCREMENT</code> сброшено к его стартовому
значению. Это истина даже для <code>MyISAM</code> и <code>InnoDB</code>,
которые обычно не используют значения последовательности снова.</li>

<li>Когда используется с разделенными таблицами,
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
сохраняет разделение, то есть, файлы с данными и индексные файлы удалены и
обновлены в то время, как определения разделения не затронуты.</li>
<li><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
не вызывает триггеры <code>ON DELETE</code> triggers.</p></li></ul>

<p><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
закрывает все обработчики для таблицы, которые были открыты с
<a href="#handler"><code>HANDLER OPEN</code></a>.</p>

<p><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
пишется в репликацию как <a href="#drop-table"><code>DROP TABLE</code>
</a> и <a href="#create-table"><code>CREATE TABLE</code></a>, то есть
DDL вместо DML. Это вследствие того, что, используя
<a href="innodb.htm"><code>InnoDB</code></a> и другие транзакционные
механизмы хранения, где операционный уровень изоляции не разрешает основанное
на запросе журналирование (<a href="innodb.htm#isolevel_read-committed">
<code>READ COMMITTED</code></a> или
<a href="innodb.htm#isolevel_read-uncommitted"><code>READ
UNCOMMITTED</code></a>), запрос не был зарегистрирован и копировался,
используя режим <code>STATEMENT</code> или <code>MIXED</code> (Bug #36763).
</p>

<p>В MySQL 5.7 и ранее на системе с большим буферным пулом и включенным
<a href="innodb.htm#sysvar_innodb_adaptive_hash_index"><code>
innodb_adaptive_hash_index</code></a> <code>TRUNCATE TABLE</code>
может вызвать временное падение системной работы из-за просмотра LRU, который
произошел, когда удаление индекса адаптивного хеша таблицы записано
(Bug #68184). Переотображение <a href="#truncate-table"><code>TRUNCATE
TABLE</code></a> на <a href="#drop-table"><code>DROP TABLE</code></a>
и <a href="#create-table"><code>CREATE TABLE</code></a> в MySQL 8.0
избегает проблематичного просмотра LRU.</p>

<p><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
может использоваться с Performance Schema, но эффект состоит в том, чтобы
сбросить сводные столбцы к 0 или <code>NULL</code>, а не удалению строк. См.
<a href="perfor.htm#performance-schema-summary-tables">раздел 23.9.15</a>.
</p>

<h2><a name="sql-syntax-data-manipulation"></a>14.2. Манипуляции данными</h2>
<h3><a name="call"></a>14.2.1. CALL</h3>
<pre>
CALL <em><code>sp_name</code></em>([<em><code>parameter</code></em>[,...]])
CALL <em><code>sp_name</code></em>[()]
</pre>

<a href="#call"><code>CALL</code></a>
вызывает хранимую процедуру, которая была определена ранее с
<a href="#create-procedure"><code>CREATE PROCEDURE</code></a>.</p>

<p>Хранимые процедуры, которые не берут параметров, могут быть вызваны без
круглых скобок. Таким образом,
<code>CALL p()</code> и <code>CALL p</code> аналогичны.</p>

<p><a href="#call"><code>CALL</code></a> может передать назад
значения, используя параметры, которые объявлены как
<code>OUT</code> или <code>INOUT</code>.
Когда процедура возвращается, программа клиента может также получить число
строк, затронутых для заключительного запроса, выполненного в пределах
подпрограммы: на уровне SQL вызовите
<a href="funct.htm#function_row-count"><code>ROW_COUNT()</code></a>, из
C API вызовите <a href="connect.htm#mysql-affected-rows"><code>
mysql_affected_rows()</code></a>.</p>

<p>Чтобы возвращать значение из процедуры, используя параметр
<code>OUT</code> или <code>INOUT</code>, передайте параметр посредством
пользовательской переменной, а затем проверьте значение переменной после
возвращений процедуры. Если Вы вызываете процедуру изнутри другой хранимой
процедуры или функции, Вы можете также передать обычный параметр или местную
переменную как параметр <code>IN</code> или <code>INOUT</code>.
Для <code>INOUT</code> инициализируйте его значение прежде, чем передать к
процедуре. Следующая процедура имеет параметры <code>OUT</code>,
которые процедура устанавливает к текущей версии сервера, и значение
<code>INOUT</code>, которое процедура постепенно увеличивает:
<pre>
CREATE PROCEDURE p (OUT ver_param VARCHAR(25), INOUT incr_param INT)
BEGIN
  # Set value of OUT parameter
  SELECT VERSION() INTO ver_param;
  # Increment value of INOUT parameter
  SET incr_param = incr_param + 1;
END;
</pre>

Прежде, чем вызвать процедуру, инициализируйте переменную, которую передадут
как <code>INOUT</code>. После запроса процедуры значения этих двух переменных
будут установлены или изменены:
<pre>
mysql&gt; SET @increment = 10;
mysql&gt; CALL p(@version, @increment);
mysql&gt; SELECT @version, @increment;
+--------------+------------+
| @version     | @increment |
+--------------+------------+
| 5.5.3-m3-log | 11         |
+--------------+------------+
</pre>

В готовом запросе <a href="#call"><code>CALL</code></a>,
используемом с <a href="#prepare"><code>PREPARE</code></a> и
<a href="#execute"><code>EXECUTE</code></a>,
заполнители могут использоваться для параметров
<code>IN</code>, <code>OUT</code> и <code>INOUT</code>.
Эти типы параметров могут использоваться следующим образом:
<pre>
mysql&gt; SET @increment = 10;
mysql&gt; PREPARE s FROM 'CALL p(?, ?)';
mysql&gt; EXECUTE s USING @version, @increment;
mysql&gt; SELECT @version, @increment;
+--------------+------------+
| @version     | @increment |
+--------------+------------+
| 5.5.3-m3-log | 11         |
+--------------+------------+
</pre>

Чтобы написать программу на C, которая использует
<a href="#call"><code>CALL</code></a>, чтобы выполнить хранимые
процедуры, которые производят наборы результатов, флаг
<code>CLIENT_MULTI_RESULTS</code> должен быть включен. Это потому, что
каждый вызов <a href="#call"><code>CALL</code></a> возвращает
результат, чтобы указать на состояние запроса, в дополнение к любым наборам
результатов, которые могли бы быть возвращены запросами, выполненными в
пределах процедуры. <code>CLIENT_MULTI_RESULTS</code>
должен также быть включен, если <a href="#call"><code>CALL</code></a>
используется, чтобы выполнить любую хранимую процедуру, которая содержит
готовые запросы. Не может быть определено, когда такая процедура загружена,
произведут ли те запросы наборы результатов, таким образом, будет необходимо
предположить, что они будут.</p>

<p><code>CLIENT_MULTI_RESULTS</code> может быть включен, когда Вы вызываете
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a>, явно, передавая <code>CLIENT_MULTI_RESULTS</code>
непосредственно, или неявно, передавая <code>CLIENT_MULTI_STATEMENTS</code>
(который также включает <code>CLIENT_MULTI_RESULTS</code>). В MySQL 8.0
<code>CLIENT_MULTI_RESULTS</code> включен по умолчанию.</p>

<p>Чтобы обработать результат <a href="#call"><code>CALL</code></a>,
используя <a href="connect.htm#mysql-query"><code>mysql_query()</code></a>
или <a href="connect.htm#mysql-real-query"><code>mysql_real_query()</code>
</a>, используйте цикл, который вызывает
<a href="connect.htm#mysql-next-result"><code>mysql_next_result()</code></a>,
чтобы определить, есть ли больше результатов. Для примера см.
<a href="connect.htm#c-api-multiple-queries">раздел 25.8.17</a>.</p>

<p>В MySQL 8.0 программы на C могут использовать интерфейс готового запроса,
чтобы выполнить <a href="#call"><code>CALL</code></a> и обратиться
к параметрам <code>OUT</code> и <code>INOUT</code>.
Это сделано, обрабатывая результат <a href="#call"><code>CALL</code>
</a>, используя цикл, который вызывает
<a href="connect.htm#mysql-stmt-next-result"><code>mysql_stmt_next_result()
</code></a>, чтобы определить, есть ли больше результатов. Для примера см.
<a href="connect.htm#c-api-prepared-call-statements">раздел 25.8.20</a>.
Языки, которые обеспечивают интерфейс MySQL, могут использовать
подготовленный <a href="#call"><code>CALL</code></a>, чтобы
непосредственно получить параметры процедуры
<code>OUT</code> и <code>INOUT</code>.</p>

<p>В MySQL 8.0 метаданные, измененные объектами, упомянутыми сохраненными
программами, обнаружены и вызывают автоматический перепарсинг затронутых
запросов, когда программа затем выполнена. Для получения дополнительной
информации см. <a href="optimiz.htm#statement-caching">раздел 9.10.4</a>.</p>

<h3><a name="delete"></a>14.2.2. DELETE</h3>
<p><code>DELETE</code> это запрос DML, который удаляет строки из таблицы.</p>
<h4><a name="idm139965341754432"></a>Однотабличный синтаксис</h4>
<pre>
DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[WHERE <em><code>where_condition</code></em>]
[ORDER BY ...]
[LIMIT <em><code>row_count</code></em>]
</pre>

<code>DELETE</code> удаляет строки из <em><code>tbl_name</code></em>
и возвращает число удаленных строк. Чтобы проверить число удаленных строк,
вызовите <a href="funct.htm#function_row-count"><code>ROW_COUNT()</code></a>,
см. <a href="funct.htm#information-functions">раздел 13.14</a>.</p>

<h4><a name="idm139965341747648"></a>Главные предложения</h4>
<p>Условия в дополнительном <code>WHERE</code> идентифицирует, которые строки
удалить. Без <code>WHERE</code> все строки удалены.</p>

<p><em><code>where_condition</code></em> выражение, которое оценивается к
истине для каждой строки, которая будет удалена. Это определено как описано в
<a href="#select">разделе 14.2.9</a>.</p>

<p>Если указан <code>ORDER BY</code>, строки удалены в порядке, который
определен. <code>LIMIT</code> устанавливает границу числа строк, которые
могут быть удалены. Эти пункты относятся к единственной таблице, но не к
удалению из нескольких таблиц.</p>

<h4><a name="idm139965341741344"></a>Многотабличный синтаксис</h4>
<pre>
DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
<em><code>tbl_name</code></em>[.*] [, <em><code>tbl_name</code></em>[.*]] ...
FROM <em><code>table_references</code></em>
[WHERE <em><code>where_condition</code></em>]
</pre>

Или:
<pre>
DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
FROM <em><code>tbl_name</code></em>[.*] [, <em><code>tbl_name</code></em>[.*]] ...
USING <em><code>table_references</code></em>
[WHERE <em><code>where_condition</code></em>]
</pre>

<h4><a name="idm139965341734224"></a>Привилегии</h4>
<p>Вы нуждаетесь в привилегии <a href="security.html#priv_delete"><code>
DELETE</code></a> на таблице, чтобы удалить строки из нее. Вы нуждаетесь
только в привилегии <a href="security.html#priv_select"><code>SELECT</code>
</a> для любых столбцов, которые только считаны, такие
как названные в <code>WHERE</code>.</p>

<h4><a name="idm139965341729808"></a>Работа</h4>
<p>Когда Вы не должны знать число удаленных строк,
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
более быстрый способ освободить таблицу, чем
<a href="#delete"><code>DELETE</code></a> без <code>WHERE</code>.
В отличие от этого, <a href="#truncate-table"><code>TRUNCATE TABLE
</code></a> не может использоваться в пределах транзакции, или если у Вас
есть блокировка на таблице. См. разделы
<a href="#truncate-table">14.1.30</a> и
<a href="#lock-tables">14.3.5</a>.</p>

<p>Скорость операции удаления может также быть затронута факторами,
обсужденными в <a href="optimiz.htm#delete-speed">разделе 9.2.2.3</a>.</p>
<p>Чтобы гарантировать, что данный запрос <a href="#delete"><code>
DELETE</code></a> не занимает слишком много времени, параметр
<code>LIMIT <em><code>row_count</code></em></code>
для <a href="#delete"><code>DELETE</code></a>
определяет максимальное количество строк, которые будут удалены. Если число
строк, чтобы удалить, больше предела, повторите <code>DELETE</code>
до числа затронутых строк меньше <code>LIMIT</code>.</p>

<h4><a name="idm139965341714640"></a>Подзапросы</h4>
<p>Вы не можете удалить из таблицы и выбрать из той же самой
таблицы в одном подзапросе.</p>

<h4><a name="idm139965341713456"></a>Разделенные таблицы</h4>
<p><code>DELETE</code> поддерживает явный выбор разделения, используя опцию
<code>PARTITION</code>, которая берет список разделенных запятой значений
названий из одного или более разделов или подразделов (или обоих), из
которых можно выбрать строки, которые будут исключены. Проигнорировано
разделение, не включенное в список. Учитывая разделенную таблицу
<code>t</code> с разделом <code>p0</code>, выполнение <code>DELETE
FROM t PARTITION (p0)</code> имеет тот же самый эффект на таблицу как
выполнение <a href="#alter-table"><code>ALTER
TABLE t TRUNCATE PARTITION (p0)</code></a>,
в обоих случаях все строки в разделе <code>p0</code> удалены.</p>

<p><code>PARTITION</code> может использоваться наряду с <code>WHERE</code>,
тогда условие проверено только на строках в перечисленном разделе. Например,
<code>DELETE FROM t PARTITION (p0) WHERE c &lt; 5</code>
удаляет строки только из раздела <code>p0</code> для которых верно условие
<code>c &lt; 5</code>, строки в любом другом разделе не проверены и таким
образом не затронуты <code>DELETE</code>.</p>

<p>Опция <code>PARTITION</code> может также использоваться в многотабличном
<code>DELETE</code>. Вы можете использовать до одной такой опции на таблицу,
названную в опции <code>FROM</code>.</p>
<p>См. <a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<h4><a name="idm139965341697040"></a>Столбцы Auto-Increment</h4>
<p>Если Вы удаляете строку, содержащую максимальное значение для
<code>AUTO_INCREMENT</code>, значение не использовано снова для
<code>MyISAM</code> или <code>InnoDB</code>. Если Вы удаляете все строки в
таблице с <code>DELETE FROM <em><code>tbl_name</code></em></code> (без
<code>WHERE</code>) в режиме <a href="server.htm#sysvar_autocommit"><code>
autocommit</code></a>, последовательность запускается для всех механизмов
хранения, кроме <code>InnoDB</code> и <code>MyISAM</code>.
Есть некоторые исключения к этому поведению для <code>InnoDB</code>, см.
<a href="innodb.htm#innodb-auto-increment-handling">раздел 16.8.5</a>.</p>

<p>Для <code>MyISAM</code> Вы можете определить второй столбец
<code>AUTO_INCREMENT</code> в многостолбцовом ключе. В этом случае повторное
использование значений, удаленных из вершины последовательности, происходит
даже для <code>MyISAM</code>. См.
<a href="tutorial.html#example-auto-increment">раздел 4.6.9</a>.</p>

<h4><a name="idm139965341684336"></a>Модификаторы</h4>
<p><a href="#delete"><code>DELETE</code></a>
поддерживает следующие модификаторы:</p>

<ul><li><p>Если Вы определяете <code>LOW_PRIORITY</code>, сервер задерживает
выполнение <a href="#delete"><code>DELETE</code></a>
пока никакие другие клиенты не читают из таблицы. Это затрагивает только
механизмы хранения, которые используют только блокировку на уровне таблицы
(такие, как <code>MyISAM</code>, <code>MEMORY</code> и <code>MERGE</code>).
</li>

<li>Для <code>MyISAM</code> таблицы, если Вы используете параметр
<code>QUICK</code>, механизм хранения не сливает листья индекса во время
удаления, что может убыстрить некоторые виды удаления.</li>

<li><code>IGNORE</code> заставляет MySQL игнорировать ошибки во время
процесса удаления строк. Ошибки, с которыми сталкиваются во время этапа
парсинга, обработаны в обычной манере. Ошибки, которые проигнорированы из-за
использования <code>IGNORE</code>, возвращены как предупреждения.
</p></li></ul>

<h4><a name="idm139965341670848"></a>Порядок удаления</h4>
<p>Если <a href="#delete"><code>DELETE</code></a> включает
<code>ORDER BY</code>, строки удалены в порядке, определенном пунктом. Это
полезно прежде всего в соединении с <code>LIMIT</code>.
Например, следующий запрос находит строки, соответствующие
<code>WHERE</code>, сортирует их по <code>timestamp_column</code>
и удаляет первую (самый старую):
<pre>
DELETE FROM somelog WHERE user = 'jcole'
       ORDER BY timestamp_column LIMIT 1;
</pre>
<code>ORDER BY</code> также помогает удалить строки в порядке, требуемом,
чтобюы избегать нарушений ссылочной целостности.</p>

<h4><a name="idm139965341663520"></a>Таблицы InnoDB</h4>
<p>Если Вы удаляете много строк из большой таблицы, Вы можете превысить
табличный размер блокировки для <code>InnoDB</code>.
Чтобы избежать этой проблемы или просто минимизировать время, когда таблица
остается заблокированной, следующая стратегия (которая не использует
<a href="#delete"><code>DELETE</code></a> вообще), могла
бы быть полезным:</p>

<ol type="1"><li><p>Выберите строки, которые <span><em>не</em></span>
будут удалены в пустую таблицу, у которой есть та же самая
структура, как у оригинальной:
<pre>
INSERT INTO t_copy SELECT * FROM t WHERE ... ;
</pre></li>

<li>Используйте <a href="#rename-table"><code>RENAME TABLE</code></a>,
чтобы атомарно переместить оригинальную таблицу из пути и переименовать
копию к настоящему имени:
<pre>
RENAME TABLE t TO t_old, t_copy TO t;
</pre></li>

<li>Удалите оригинальную таблицу:
<pre>
DROP TABLE t_old;
</pre></li></ol>

<p>Никакие другие сеансы не могут получить доступ к вовлеченным таблицам в то
время, как работает <a href="#rename-table"><code>RENAME TABLE</code>
</a>, таким образом, переименование не подвергается проблемам параллелизма.
См. <a href="#rename-table">раздел 14.1.29</a>.</p>

<h4><a name="idm139965341650416"></a>Таблицы MyISAM</h4>
<p>В <code>MyISAM</code> удаленные строки поддержаны в связанном списке и
последующие <a href="#insert"><code>INSERT</code></a>
повторно используют старые позиции строки. Чтобы восстановить неиспользуемое
место и уменьшить размеры файла, используйте
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a> или
<a href="programs.htm#myisamchk"><span><strong>myisamchk</strong></span></a>,
чтобы реорганизовать таблицы. <a href="#optimize-table"><code>OPTIMIZE
TABLE</code></a> легче использовать, но <a href="programs.htm#myisamchk">
<span><strong>myisamchk</strong></span></a> быстрее. См. разделы
<a href="#optimize-table">14.7.2.4</a> и
<a href="programs.htm#myisamchk">5.6.4</a>.</p>

<p><code>QUICK</code>затрагивает, слиты ли листья индекса для операции
удаления. <code>DELETE QUICK</code> является самым полезным для приложений,
где индексные значения для удаленных строк заменены подобными индексными
значениями от строк, вставленных позже. В этом случае места, оставленные
удаленными значениями, снова использованы.</p>

<p><code>DELETE QUICK</code> не полезно, когда удаленные значения приводят к
слишком сильному опустошению индексных блоков, охватывающих диапазон
значений, для которых новые вставки происходят снова. В этом случае
использование <code>QUICK</code> может привести к потраченному впустую
пространству в индексировании, которое остается неисправленным. Вот
пример такого сценария:</p>

<ol type="1"><li><p>Составьте таблицу, которая содержит индексированный
столбец <code>AUTO_INCREMENT</code>.</li>
<li>Вставьте много строк в таблицу. Каждая вставка в индекс добавляет
значение к верхнему концу индекса.</li>
<li>Удалите блок строк на нижнем конце диапазона столбца,
используя <code>DELETE QUICK</code>.</p></li></ol>

<p>В этом сценарии блоки индекса, связанные с удаленными
значениями, становятся сильно пустыми, но не слиты с другим блоками индекса
из-за использования <code>QUICK</code>. Они остаются такими,
когда новые вставки происходят, потому что новые строки не имеют индексных
значений в удаленном диапазоне. Кроме того, они остаются пустыми
даже если Вы позже используете
<a href="#delete"><code>DELETE</code></a> без <code>QUICK</code>,
если некоторые из удаленных индексных значений лежат в
блоках в пределах или смежных с незаполненными блоками.
Чтобы исправить неиспользованное индексное пространство при этих
обстоятельствах, используют <a href="#optimize-table"><code>
OPTIMIZE TABLE</code></a>.</p>

<p>Если Вы собираетесь удалить много строк из таблицы, могло бы быть быстрее,
использовать <code>DELETE QUICK</code> сопровождаемый
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>.
Это восстанавливает индексирование вместо того, чтобы делать много
операций слияния индексных блоков.</p>

<h4><a name="idm139965341624320"></a>Мультитабличное удаление</h4>
<p>Вы можете определить много таблиц в
<a href="#delete"><code>DELETE</code></a>, чтобы удалить строки из
одной или более таблиц в зависимости от условия в <code>WHERE</code>.
Вы не можете использовать <code>ORDER BY</code> или <code>LIMIT</code> в
многотабличном <code>DELETE</code>. <em><code>table_references</code></em>
перечисляет таблицы, вовлеченные в соединение, как описано в
<a href="#join">разделе 14.2.9.2</a>.</p>

<p>Для первого многотабличного синтаксиса соответствуют только строки от
таблиц, перечисленных перед <code>FROM</code>. Для второго
соответствуют только строки от таблиц, перечисленных в
<code>FROM</code> (до <code>USING</code>). Эффект состоит в том, что Вы
можете удалить строки из многих таблиц в то же самое время и иметь
дополнительные таблицы, которые используются только для того, чтобы искать:
<pre>
DELETE t1, t2 FROM t1 INNER JOIN t2 INNER JOIN t3
       WHERE t1.id=t2.id AND t2.id=t3.id;
</pre>

Или:
<pre>
DELETE FROM t1, t2 USING t1 INNER JOIN t2 INNER JOIN t3
       WHERE t1.id=t2.id AND t2.id=t3.id;
</pre>
Эти запросы используют все три таблицы, ища строки, чтобы удалить, но удаляют
соответствующие строки только из таблиц <code>t1</code> и <code>t2</code>.
</p>

<p>Предыдущее использование в качестве примера <code>INNER JOIN</code>, но
мультитабличный <a href="#delete"><code>DELETE</code></a> может
использовать другие типы соединения, разрешенные в
<a href="#select"><code>SELECT</code></a>, например,
<code>LEFT JOIN</code>. Например, чтобы удалить строки, которые существуют в
<code>t1</code>, у которых нет никакого соответствия в
<code>t2</code>, используйте <code>LEFT JOIN</code>:
<pre>
DELETE t1 FROM t1 LEFT JOIN t2 ON t1.id=t2.id WHERE t2.id IS NULL;
</pre>

Синтаксис допускает <code>.*</code> после каждого
<em><code>tbl_name</code></em> для совместимости с
<span><strong>Access</strong></span>.</p>

<p>Если Вы используете многотабличный <a href="#delete"><code>DELETE
</code></a> с таблицами <code>InnoDB</code>, для которых есть ограничения
внешнего ключа, оптимизатор MySQL мог бы обработать таблицы в порядке,
который отличается от их родительских/дочерних отношений. В этом случае
запрос терпит неудачу и откатывается. Вместо этого Вы должны удалить из
единственной таблицы и использовать <code>ON DELETE</code>, который
обеспечивает <code>InnoDB</code>, чтобы заставить другие таблицы
быть измененными соответственно.</p>

<p>Если Вы объявляете псевдоним для таблицы, Вы должны использовать
псевдоним, обращаясь к таблице:
<pre>
DELETE t1 FROM test AS t1, test2 WHERE ...
</pre>

<p>Табличные псевдонимы в многотабличном
<a href="#delete"><code>DELETE</code></a>
должны быть объявлены только в части <em><code>table_references</code></em>.
В другом месте ссылки псевдонима разрешены, но не декларации псевдонима.</p>

<p>Правильно:
<pre>
DELETE a1, a2 FROM t1 AS a1 INNER JOIN t2 AS a2
       WHERE a1.id=a2.id;

DELETE FROM a1, a2 USING t1 AS a1 INNER JOIN t2 AS a2
       WHERE a1.id=a2.id;
</pre>

Неправильно:
<pre>
DELETE t1 AS a1, t2 AS a2 FROM t1 INNER JOIN t2 WHERE a1.id=a2.id;
DELETE FROM t1 AS a1, t2 AS a2 USING t1 INNER JOIN t2 WHERE a1.id=a2.id;
</pre>

<h3><a name="do"></a>14.2.3. DO</h3>
<pre>
DO <em><code>expr</code></em> [, <em><code>expr</code></em>] ...
</pre>

<a href="#do"><code>DO</code></a> выполняет выражения, но не
возвращает результатов. В большинстве отношений
<a href="#do"><code>DO</code></a> сокращение для <code>SELECT
<em><code>expr</code></em>, ...</code>, но имеет преимущество, что это
немного быстрее, когда Вы не заботитесь о результате.</p>

<p><a href="#do"><code>DO</code></a> полезно прежде всего с функциями,
у которых есть побочные эффекты, например, с
<a href="funct.htm#function_release-lock"><code>RELEASE_LOCK()</code></a>.
</p>

<p>Пример: Этот <a href="#select"><code>SELECT</code></a>
тормозит запросы, но также и производит набор результатов:
<pre>
mysql&gt; SELECT SLEEP(5);
+----------+
| SLEEP(5) |
+----------+
| 0        |
+----------+
1 row in set (5.02 sec)
</pre>

<a href="#do"><code>DO</code></a>, с другой стороны, делает такую же
паузу, не производя набор результатов:
<pre>
mysql&gt; DO SLEEP(5);
Query OK, 0 rows affected (4.99 sec)
</pre>
Это могло быть полезно, например в сохраненной функции или триггере
которые запрещают запросы, которые производят наборы результатов.</p>

<p><a href="#do"><code>DO</code></a>
только выполняет выражения. Это не может использоваться во всех случаях,
где <code>SELECT</code>. Например, <code>DO id FROM t1</code>
недопустимо, потому что это ссылается на таблицу.</p>

<h3><a name="handler"></a>14.2.4. HANDLER</h3>
<pre>
HANDLER <em><code>tbl_name</code></em> OPEN [ [AS] <em><code>alias</code></em>]
HANDLER <em><code>tbl_name</code></em> READ <em><code>index_name</code></em>
        { = | &lt;= | &gt;= | &lt; | &gt; } (<em><code>value1</code></em>,
        <em><code>value2</code></em>,...)
        [ WHERE <em><code>where_condition</code></em> ] [LIMIT ... ]
HANDLER <em><code>tbl_name</code></em> READ <em><code>index_name</code></em>
        { FIRST | NEXT | PREV | LAST }
        [ WHERE <em><code>where_condition</code></em> ] [LIMIT ... ]
HANDLER <em><code>tbl_name</code></em> READ { FIRST | NEXT }
        [ WHERE <em><code>where_condition</code></em> ] [LIMIT ... ]
HANDLER <em><code>tbl_name</code></em> CLOSE
</pre>

<code>HANDLER</code> обеспечивает прямой доступ к табличным интерфейсам
механизма хранения. Это доступно для
<code>InnoDB</code> и <code>MyISAM</code>.</p>

<p><code>HANDLER ... OPEN</code> открывает таблицу, делая это доступным
последующму использованию <code>HANDLER ... READ</code>.
Этот табличный объект не использован совместно другими сеансами и не закрыт
до <code>HANDLER ... CLOSE</code> или конца сеанса.</p>

<p>Если Вы открываете таблицу, используя псевдоним, дальнейшие ссылки на
открытую таблицу с другим <code>HANDLER</code> должны использовать псевдоним,
а не имя таблицы. Если Вы не используете псевдоним, но открываете таблицу,
используя имя таблицы, квалифицированное именем базы данных, дальнейшие
ссылки должны использовать неквалифицированное имя таблицы. Например, для
таблицы, открытой, используя <code>mydb.mytable</code>,
дальнейшие ссылки должны использовать <code>mytable</code>.</p>

<p>Первый синтаксис <code>HANDLER ... READ</code>
приносит строку, где указанный индекс удовлетворяет данные значения и
соблюдает <code>WHERE</code>. Если у Вас есть многостолбцовый индекс,
укажите список значений столбцов как список разделенных запятой значений. Или
определите значения для всех столбцов в индексировании, или определите
значения для крайнего левого префикса индекса столбцов. Предположите, что
индекс <code>my_idx</code> включает три столбца
<code>col_a</code>, <code>col_b</code> и <code>col_c</code>, в этом порядке.
<code>HANDLER</code> может определить значения для всех трех столбцов в
индексе или для столбцов в крайнем левом префиксе. Например:
<pre>
HANDLER ... READ my_idx = (col_a_val,col_b_val,col_c_val) ...
HANDLER ... READ my_idx = (col_a_val,col_b_val) ...
HANDLER ... READ my_idx = (col_a_val) ...
</pre>

Чтобы использовать <code>HANDLER</code> интерфейс, чтобы обратиться к таблице
<code>PRIMARY KEY</code>, используйте заключенный в
кавычки идентификатор <code>`PRIMARY`</code>:
<pre>
HANDLER <em><code>tbl_name</code></em> READ `PRIMARY` ...
</pre>
Второй синтаксис <code>HANDLER ... READ</code> приносит строку от таблицы в
порядке индекса, который соответствует <code>WHERE</code>.</p>

<p>Третий синтаксис <code>HANDLER ... READ</code>
приносит строку от таблицы в естественном порядке строк, который
соответствует <code>WHERE</code>. Это быстрее
<code>HANDLER <em><code>tbl_name</code></em> READ
<em><code>index_name</code></em></code>,
когда полное сканирование таблицы желаемо. Естественный порядок строк
это порядок, в котором строки сохранены в файле данных.
Это запрос работает на <code>InnoDB</code> также, но нет такого понятия,
потому что нет никакого отдельного файла с данными.</p>

<p>Без <code>LIMIT</code> все формы <code>HANDLER ... READ</code>
принесут единственную строку.
Чтобы возвратить определенное число строк, включайте <code>LIMIT</code>.
У него есть тот же самый синтаксис, как у
<a href="#select"><code>SELECT</code></a>, см.
<a href="#select">раздел 14.2.9</a>.</p>

<p><code>HANDLER ... CLOSE</code> закрывает таблицу, которая была
открыта <code>HANDLER ... OPEN</code>.</p>
<p>Есть несколько причин использовать интерфейс <code>HANDLER</code>
вместо нормального <a href="#select"><code>SELECT</code></a>:</p>

<ul><li><p><code>HANDLER</code> быстрее
<a href="#select"><code>SELECT</code></a>:</p>
<ul><li><p>Определяемый объект обработчика механизма хранения выделен для
<code>HANDLER ... OPEN</code>. Объект снова использован для последующего
<code>HANDLER</code> для этой таблицы: это не должно быть повторно
инициализировано для каждого.</li>

<li>Меньше работает парсинг.</li>
<li>Нет никакого оптимизатора или проверки запроса.</li>
<li>Интерфейс обработчика не должен обеспечить последовательный вид данных
(например, <a href="glossary.htm#glos_dirty_read">грязные чтения</a>
разрешены), таким образом, механизм хранения может использовать оптимизацию,
которую <a href="#select"><code>SELECT</code></a>
обычно не разрешает.</p></li></ul></li>

<li><code>HANDLER</code> облегчает портирование на MySQL
приложения MySQL, которые используют низкий уровень <code>ISAM</code>
См. <a href="innodb.htm#innodb-memcached">раздел 16.19</a>.</li>

<li><code>HANDLER</code> позволяет Вам пересечь базу данных в манере, которая
является трудной (или даже невозможной) с
<a href="#select"><code>SELECT</code></a>. <code>HANDLER</code>
более естественный способ смотреть на данные, работая с приложениями, которые
обеспечивают интерактивный пользовательский интерфейс базе данных.
</p></li></ul>

<p><code>HANDLER</code> несколько низкоуровневый запрос. Например, это не
обеспечивает последовательность. Таким образом,
<code>HANDLER ... OPEN</code> <span><em>не</em></span>
берет снимок таблицы, и <span><em>не</em></span>
блокирует таблицу. Это означает, что после <code>HANDLER ... OPEN</code>
табличные данные могут быть изменены (текущим сеансом или другими сеансами),
и эти модификации могли бы быть только частично видимыми в
<code>HANDLER ... NEXT</code> или <code>HANDLER ... PREV</code>.</p>

<p>Открытый обработчик может быть закрыт и отмечен для повторного открытия,
когда обработчик теряет свою позицию в таблице. Это происходит, когда оба из
следующих обстоятельств истинны:</p>

<ul><li><p>Любой сеанс выполняет
<a href="#flush"><code>FLUSH TABLES</code></a>
или запросы DDL на таблице обработчика.</li>
<li>Сеанс, в котором обработчик открыт, выполняет не-<code>HANDLER</code>
запросы для таблицы.</p></li></ul>

<p><a href="#truncate-table"><code>TRUNCATE TABLE</code></a>
закрывает все обработчики для таблицы, которые были
открыты с <a href="#handler"><code>HANDLER OPEN</code></a>.</p>

<p>Если таблица сбрасывается с <a href="#flush"><code>FLUSH TABLES
<em><code>tbl_name</code></em> WITH READ LOCK</code></a>, обработчик неявно
сбрасывается и теряет свою позицию.</p>

<h3><a name="insert"></a>14.2.5. INSERT</h3>
<pre>
INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[(<em><code>col_name</code></em>,...)]
{VALUES | VALUE} ({<em><code>expr</code></em> | DEFAULT},...),(...),...
[ ON DUPLICATE KEY UPDATE
  <em><code>col_name</code></em>=<em><code>expr</code></em>
[, <em><code>col_name</code></em>=<em><code>expr</code></em>] ... ]
</pre>

Или:
<pre>
INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
SET <em><code>col_name</code></em>={<em><code>expr</code></em> | DEFAULT}, ...
[ ON DUPLICATE KEY UPDATE
  <em><code>col_name</code></em>=<em><code>expr</code></em>
[, <em><code>col_name</code></em>=<em><code>expr</code></em>] ... ]
</pre>

Или:
<pre>
INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[(<em><code>col_name</code></em>,...)]
SELECT ...
[ ON DUPLICATE KEY UPDATE
  <em><code>col_name</code></em>=<em><code>expr</code></em>
[, <em><code>col_name</code></em>=<em><code>expr</code></em>] ... ]
</pre>

<a href="#insert"><code>INSERT</code></a>
вставляет новые строки в существующую таблицу.
<a href="#insert"><code>INSERT ... VALUES</code></a> и
<a href="#insert"><code>INSERT ... SET</code></a>
формы вставляют строки, основанные на явно указанных значениях.
<a href="#insert-select"><code>INSERT ... SELECT</code></a>
вставляет строки, выбранные из другой таблицы или таблиц.
<a href="#insert-select"><code>INSERT ... SELECT</code></a>
рассмотрена в <a href="#insert-select">разделе 14.2.5.1</a>.</p>

<p>Вставляя в разделенную таблицу, Вы можете управлять, какие раздел и
подраздел принимают новые строки. <code>PARTITION</code>
берет список разделенных запятой значений названий одного или более раздела
или подразда (или оба) таблицы. Если любая из строк, которые будут вставлены
данным <code>INSERT</code> не соответствует одному из перечисленных
разделов, <code>INSERT</code> терпит неудачу с ошибкой
<span>Found a row not matching the given partition set</span>. См.
<a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p>В MySQL 8.0 <code>DELAYED</code> принято, но проигнорировано сервером. См.
<a href="#insert-delayed">раздел 14.2.5.2</a>.</p>
<p>Вы можете использовать <a href="#replace"><code>REPLACE</code></a>
вместо <a href="#insert"><code>INSERT</code></a>, чтобы
перезаписывать старые строки. <a href="#replace"><code>REPLACE</code>
</a> копия <a href="#insert"><code>INSERT IGNORE</code></a> в
обработке новых строк, которые содержат уникальные значения ключа, которые
дублируют старые строки: новые строки используются, чтобы заменить старые
строки вместо того, чтобы отказать, см. <a href="#replace">раздел
14.2.8</a>.</p>

<p><em><code>tbl_name</code></em> таблица, в которую должны быть вставлены
строки. Столбцы, для которых запрос обеспечивает значения, могут быть
определены следующим образом:</p>

<ul><li><p>Вы можете обеспечить список разделенных запятой значений имен
столбцов после имени таблицы. В этом случае значение для каждого названного
столбца должно быть обеспечено списком <code>VALUES</code> или
<a href="#select"><code>SELECT</code></a>.</li>

<li>Если Вы не определяете список имен столбцов для
<a href="#insert"><code>INSERT ... VALUES</code></a> или
<a href="#insert-select"><code>INSERT ... SELECT</code></a>,
значения для каждого столбца в таблице должны быть обеспечены
<code>VALUES</code> или <a href="#select"><code>SELECT</code></a>.
Если Вы не знаете порядка столбцов в таблице, надо использовать
<code>DESCRIBE <em><code>tbl_name</code></em></code>.</li>
<li><code>SET</code> указывает на имена столбцов явно.</p></li></ul>

<p>Значения столбцов могут быть даны несколькими способами:</p>
<ul><li><p>Если Вы не работаете в строгом режиме SQL, любой столбец, не
явно заданный, установлен в его значение по умолчанию (явное или неявное).
Например, если Вы определяете список столбца, который не называет все столбцы
в таблице, неназванные столбцы установлены в их значения по умолчанию.
Назначение значения по умолчанию описано в
<a href="types.htm#data-type-defaults">разделе 12.7</a>. См.
<a href="intro.htm#constraint-invalid-data">раздел 1.8.3.3</a>.</p>

<p>Если Вы хотите, чтобы <a href="#insert"><code>INSERT</code></a>
произвел ошибку, если Вы явно не определяете значения для всех столбцов, у
которых нет значения по умолчанию, Вы должны использовать строгий режим. См.
<a href="server.htm#sql-mode">раздел 6.1.8</a>.</li>

<li>Используйте ключевое слово <code>DEFAULT</code>, чтобы установить столбец
явно в его значение по умолчанию. Это облегчает написание
<a href="#insert"><code>INSERT</code></a>, которые назначают значения
всем кроме нескольких столбцов, потому что это позволяет Вам избежать писать
неполный список <code>VALUES</code>, который не включает значение для каждого
столбца в таблице. Иначе, Вы должны были бы выписать список имен столбцов,
соответствующих каждому значению в <code>VALUES</code>.</p>

<p>Вы можете также использовать <a href="funct.htm#function_default"><code>
DEFAULT(<em><code>col_name</code></em>)</code></a> как более общую форму,
которая может использоваться в выражениях, чтобы произвести значение по
умолчанию данного столбца.</li>

<li>Если и список столбца и <code>VALUES</code> список пуст,
<a href="#insert"><code>INSERT</code></a> создает строку с каждым
столбцом, установленным к его значению по умолчанию:
<pre>
INSERT INTO <em><code>tbl_name</code></em> () VALUES();
</pre>

В строгом режиме происходит ошибка, если у какого-либо столбца нет значения
по умолчанию. Иначе MySQL использует неявное значение по умолчанию для любого
столбца, у которого нет явно определенного значения по умолчанию.</li>

<li>Вы можете определить выражение <em><code>expr</code></em>, чтобы
обеспечить значение столбца. Это могло бы вовлечь преобразование типа, если
тип выражения не соответствует тип столбца, и преобразование данного значения
может привести к различным вставленным значениям в зависимости от типа
данных. Например, вставка строки <code>'1999.0e-2'</code> в
<a href="types.htm#integer-types"><code>INT</code></a>,
<a href="types.htm#floating-point-types"><code>FLOAT</code></a>,
<code>DECIMAL(10,6)</code> или
<a href="types.htm#year"><code>YEAR</code></a> приводит к значениям
<code>1999</code>, <code>19.9921</code>, <code>19.992100</code> и
<code>1999</code>, соответственно. Причина: значение, сохраненное в
<a href="types.htm#integer-types"><code>INT</code></a> и
<a href="types.htm#year"><code>YEAR</code></a> <code>1999</code>
это конверсия строки к целому числу только на такое большое количество
начальной части строки, как может считаться допустимым целым числом или
годом. Для столбцов с плавающей запятой и столбцов фиксированной точки,
преобразование строки к плавающей запятой считает всю строку допустимым
значением с плавающей запятой.</p>

<p><em><code>expr</code></em> может обратиться к любому столбцу, который был
установлен ранее в списке значения. Например, Вы можете сделать это потому,
что значение для <code>col2</code> обращается к <code>col1</code>,
который был ранее назначен:
<pre>
INSERT INTO <em><code>tbl_name</code></em> (col1,col2) VALUES(15,col1*2);
</pre>

Но следующее не является законным, потому что значение для
<code>col1</code> обращается к <code>col2</code>,
который назначен после <code>col1</code>:
<pre>
INSERT INTO <em><code>tbl_name</code></em> (col1,col2) VALUES(col2*2,15);
</pre>

Одно исключение вовлекает столбцы, которые содержат
<code>AUTO_INCREMENT</code>. Поскольку <code>AUTO_INCREMENT</code>
произведено после других значений, любые ссылки на столбец
<code>AUTO_INCREMENT</code> возвращают <code>0</code>.</p></li></ul>

<p><a href="#insert"><code>INSERT</code></a> с использованием
<code>VALUES</code> может вставить многократные строки. Чтобы сделать это,
включайте многократные списки значений столбцов, каждый в пределах круглых
скобок и отделенный запятыми. Пример:
<pre>
INSERT INTO <em><code>tbl_name</code></em> (a,b,c)
       VALUES(1,2,3), (4,5,6), (7,8,9);
</pre>

Список значений для каждой строки должен быть приложен в пределах круглых
скобок. Следующий запрос незаконный, потому что число значений в списке не
соответствует числу имен столбцов:
<pre>
INSERT INTO <em><code>tbl_name</code></em> (a,b,c)
       VALUES(1,2,3,4,5,6,7,8,9);
</pre>

<code>VALUE</code> синоним <code>VALUES</code> этом контексте. Ни один ничего
не подразумевает о числе списков значений, и может использоваться, есть ли
единственный список значений или многократные списки.</p>

<p>Число затронутых строк для <a href="#insert"><code>INSERT</code>
</a> может быть получено, используя <a href="funct.htm#function_row-count">
<code>ROW_COUNT()</code></a> (см. <a href="funct.htm#information-functions">
раздел 13.14</a>) или <a href="connect.htm#mysql-affected-rows"><code>
mysql_affected_rows()</code></a> C API (см.
<a href="connect.htm#mysql-affected-rows">раздел 25.8.7.1</a>).</p>

<p>Если Вы используете <a href="#insert"><code>INSERT ... VALUES
</code></a> с многократными списками значения или
<a href="#insert-select"><code>INSERT ... SELECT</code></a>, запрос
возвращает информационную строку в этом формате:
<pre>
Records: 100 Duplicates: 0 Warnings: 0
</pre>

<code>Records</code> указывает на число строк, обработанных запросом.
Это не обязательно число строк, фактически вставленных, потому что
<code>Duplicates</code> может быть отличным от нуля. <code>Duplicates</code>
указывает на число строк, которые не могли быть вставлены, потому что они
дублируют некоторые существующие уникальные индексные значения.
<code>Warnings</code> указывает на число попыток вставить значения столбцов,
которые были проблематичны в некотором роде. Предупреждения могут произойти
при любом из следующих условий:</p>

<ul><li><p>Вставка <code>NULL</code> в столбец, который был объявлен
<code>NOT NULL</code>. Для многострочного
<a href="#insert"><code>INSERT</code></a> или
<a href="#insert-select"><code>INSERT INTO ... SELECT</code></a>
столбец установлен в неявное значение по умолчанию для типа данных столбца.
Это <code>0</code> для числовых типов, пустая строка (<code>''</code>)
для строковых типов и <span><span>нулевое</span></span> значение для типов
времени и даты. <a href="#insert-select"><code>INSERT INTO ...
SELECT</code></a> обработаны так же, как многократные строки, потому что
сервер не исследует набор результатов от
<a href="#select"><code>SELECT</code></a>, чтобы
видеть, возвращает ли это единственную строку. Для единственной строки
<a href="#insert"><code>INSERT</code></a> никакое предупреждение не
происходит, когда <code>NULL</code> вставлен в столбец <code>NOT NULL</code>.
Вместо этого запрос терпит неудачу с ошибкой.</li>

<li>Установка числового столбца к значению, которое находится вне диапазона
столбца. Значение отсечено к самой близкой конечной точке диапазона.</li>
<li>Назначение такого значения, как <code>'10.34 a'</code>
числовому столбцу. Нечисловой текст отрезан, а остающаяся числовая часть
вставлена. Если у строкового значения нет никакой ведущей числовой части,
столбец установлен в <code>0</code>.</li>

<li>Вставка строки в строковый столбец
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a> или
<a href="types.htm#blob"><code>BLOB</code></a>), которая
превышает максимальную длину столбца. Значение является усеченным к
максимальной длине столбца.</li>

<li>Вставка значения, которое незаконен для типа данных,
в столбец даты или времени. Столбец установлен в соответствующее нулевое
значение для типа.</p></li></ul>

<p>Если произведенный столбец вставлен явно, единственное разрешенное
значение <code>DEFAULT</code>. См.
<a href="#create-table-generated-columns">раздел 14.1.15.5</a>.</p>

<p>Если Вы используете C API, информационная строка может быть получена,
вызывая <a href="connect.htm#mysql-info"><code>mysql_info()</code></a>, см.
<a href="connect.htm#mysql-info">раздел 25.8.7.36</a>.</p>

<p>Если <a href="#insert"><code>INSERT</code></a>
вставляет строку в таблицу, которая имеет <code>AUTO_INCREMENT</code>,
Вы можете считать значение для этого столбца при использовании SQL
<a href="funct.htm#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>.
Из C API используйте <a href="connect.htm#mysql-insert-id"><code>
mysql_insert_id()</code></a>. Однако, Вы должны отметить, что две функции не
всегда ведут себя тождественно. Поведение
<a href="#insert"><code>INSERT</code></a> относительно
<code>AUTO_INCREMENT</code> рассмотрено в разделах
<a href="funct.htm#information-functions">13.14</a> и
<a href="connect.htm#mysql-insert-id">25.8.7.38</a>.</p>

<p><a href="#insert"><code>INSERT</code></a>
поддерживает следующие модификаторы:</p>
<ul><li><p><a href="#insert-delayed"><code>INSERT DELAYED</code></a>
устарел в MySQL 5.7 и намечен для возможного удаления. В MySQL 8.0
<code>DELAYED</code> принято, но проигнорировано. Надо использовать
<code>INSERT</code> (без <code>DELAYED</code>), см.
<a href="#insert-delayed">раздел 14.2.5.2</a>.</li>

<li>Если Вы используете <code>LOW_PRIORITY</code>, выполнение
<a href="#insert"><code>INSERT</code></a> отсрочено, пока никакие
другие клиенты не читают из таблицы. Это включает других клиентов, которые
начали читать в то время, как существующие клиенты читают, и в то время как
<code>INSERT LOW_PRIORITY</code> ждет. Возможно, поэтому, для клиента,
который выполнил <code>INSERT LOW_PRIORITY</code> ждать долго.</p>

<p><code>LOW_PRIORITY</code> не должен обычно использоваться с таблицами
<code>MyISAM</code>, потому что его выполнение отключает параллельные
вставки. См. <a href="optimiz.htm#concurrent-inserts">раздел 9.11.3</a>.</p>

<p>Если Вы определяете <code>HIGH_PRIORITY</code>, это переопределяет эффект
<a href="server.htm#option_mysqld_low-priority-updates"><code>
--low-priority-updates</code></a>, если сервер был запущен с этой опцией. Это
также заставляет параллельные вставки не использоваться. См.
<a href="optimiz.htm#concurrent-inserts">раздел 9.11.3</a>.</p>

<p><code>LOW_PRIORITY</code> и <code>HIGH_PRIORITY</code>
затронут только механизмы хранения, которые используют только блокировку на
уровне таблицы (<code>MyISAM</code>,
<code>MEMORY</code> и <code>MERGE</code>).</li>

<li>Если Вы используете <code>IGNORE</code>,
ошибки, которые происходят, выполняя
<a href="#insert"><code>INSERT</code></a>
проигнорированы. Например, без <code>IGNORE</code>
строка, которая дублирует существующий индекс <code>UNIQUE</code> или
значение <code>PRIMARY KEY</code> в таблице вызывает ошибку, и запрос
прерван. С <code>IGNORE</code> от строки отказываются, и никакая ошибка не
происходит. Проигнорированные ошибки производят предупреждения вместо этого.
</p>

<p><code>IGNORE</code> имеет подобный эффект на вставки в разделенные
таблицы, где никакой раздел, соответствующий данному значению, не найден.
Без <code>IGNORE</code> <a href="#insert"><code>INSERT</code></a>
прерван с ошибкой, однако, когда <a href="#insert"><code>INSERT
IGNORE</code></a> применен, работа вставки терпит неудачу тихо для строки,
содержащей несоответствующее значение, но любые строки, которые являются
соответствующими, вставлены. Для примера см.
<a href="partit.htm#partitioning-list">раздел 20.2.2</a>.</p>

<p>Преобразования данных, которые вызвали бы ошибки, прерывают запрос, если
<code>IGNORE</code> не определен. С <code>IGNORE</code>
недопустимые значения скорректированы к самым близким значениям и вставлены,
предупреждения произведены, но запрос не прерывается. Вы можете определить с
<a href="connect.htm#mysql-info"><code>mysql_info()</code></a> C API, сколько
строк было фактически вставлено в таблицу.</p></li>

<li>Если Вы определяете <code>ON DUPLICATE KEY UPDATE</code>, и строка
вставлена, которая вызвала бы дубликат значения в индексе
<code>UNIQUE</code> или <code>PRIMARY KEY</code>,
<a href="#update"><code>UPDATE</code></a> из старой строки выполнен.
Значение затронутых строк за строку 1, если строка вставлена как новая
строка, 2, если существующая строка обновлена, и 0, если существующая строка
установлена в ее текущее значение. Если Вы определяете
<code>CLIENT_FOUND_ROWS</code> для
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a>, соединяясь с <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a>, значение затронутых строк 1 (не 0), если существующая
строка установлена в ее текущее значение. См.
<a href="#insert-on-duplicate">раздел 14.2.5.3</a>.</p></li></ul>

<p>Вставка в таблицу требует привилегии
<a href="security.html#priv_insert"><code>INSERT</code></a>
для таблицы. Если <code>ON DUPLICATE KEY UPDATE</code> используется, и
дубликат ключа вызывает<a href="#update"><code>UPDATE</code></a>
вместо этого, запрос требует привилегию
<a href="security.html#priv_update"><code>UPDATE</code></a>
для столбцов, которые будут обновлены. Для столбцов, которые считаны, но
не изменены, нужна только <a href="security.html#priv_select"><code>SELECT
</code></a> (для столбцов в правой части
<em><code>col_name</code></em>=<em><code>expr</code></em>
в <code>ON DUPLICATE KEY UPDATE</code>).</p>

<p>В MySQL 8.0 <code>INSERT</code>, затрагивающий разделенную таблицу,
используя такой механизм хранения, как
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>, который
использует блокировки на уровне таблицы, блокирует только тот раздел, в
который фактически вставлены строки. Для механизмов хранения вроде
<a href="innodb.htm"><code>InnoDB</code></a>, которые используют
блокировку на уровне строки, никакая блокировка раздела не имеет места. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h4><a name="insert-select"></a>14.2.5.1. INSERT ... SELECT</h4>
<pre>
INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[(<em><code>col_name</code></em>,...)]
SELECT ...
[ ON DUPLICATE KEY UPDATE <em><code>col_name</code></em>=<em><code>expr</code></em>, ... ]
</pre>

С <a href="#insert-select"><code>INSERT ... SELECT</code></a>
Вы можете быстро вставить много строк в таблицу от одной или
многих таблиц. Например:
<pre>
INSERT INTO tbl_temp2 (fld_id)
       SELECT tbl_temp1.fld_order_id
       FROM tbl_temp1 WHERE tbl_temp1.fld_order_id &gt; 100;
</pre>

Следующие условия держатся для
<a href="#insert-select"><code>INSERT ... SELECT</code></a>:</p>
<ul><li><p>Определите <code>IGNORE</code>, чтобы
проигнорировать строки, которые вызвали бы ошибки дублирования ключа.</li>

<li>Целевая таблица <a href="#insert"><code>INSERT</code></a>
может появиться в <code>FROM</code> части <a href="#select"><code>
SELECT</code></a> запроса. Это не было возможно в некоторых более старых
версиях MySQL. Однако, Вы не можете вставить в таблицу и выбрать из той же
самой таблицы в подзапросе.</p>

<p>Выбирая из и вставляя в таблицу в то же самое время, MySQL составляет
временную таблицу, чтобы держать строки из <a href="#select"><code>
SELECT</code></a> и затем вставляет те строки в целевую таблицу. Однако, это
остается истиной, что Вы не можете использовать <code>INSERT INTO t ...
SELECT ... FROM t</code>, когда <code>t</code> <code>TEMPORARY</code>,
потому что таблицы <code>TEMPORARY</code> не могут быть упомянуты дважды в
том же самом запросе (см. <a href="error.htm#temporary-table-problems">раздел
B.5.6.2</a>).</li>

<li><code>AUTO_INCREMENT</code> работают как обычно.</li>
<li>Чтобы гарантировать, что двоичный журнал может использоваться, чтобы
обновить оригинальные таблицы, MySQL не разрешает параллельные вставки для
<a href="#insert-select"><code>INSERT ... SELECT</code></a> (см.
<a href="optimiz.htm#concurrent-inserts">раздел 9.11.3</a>).</li>

<li>Чтобы избегать неоднозначных ссылочных проблем столбца, когда
<a href="#select"><code>SELECT</code></a> и
<a href="#insert"><code>INSERT</code></a> обращаются
к той же самой таблице, обеспечьте уникальный псевдоним для каждой таблицы,
используемой в части <a href="#select"><code>SELECT</code></a>,
и определите имена столбцов в этой части с соответствующим псевдонимом.
</p></li></ul>

<p>Вы можете явно выбрать, какой раздел или подраздел (или оба) источника или
таблицы назначения (или обеих) должны использоваться с опцией
<code>PARTITION</code> после названия таблицы. Когда <code>PARTITION</code>
используется с названием исходной таблицы в части
<a href="#select"><code>SELECT</code></a>,
строки выбраны только из раздела или подраздела, названного в его списке
разделов. Когда <code>PARTITION</code>
используется с названием целевой таблицы для части
<a href="#insert"><code>INSERT</code></a>,
тогда должно быть возможно вставить все строки в раздел или подраздел,
названный в списке разделов после опции, иначе <code>INSERT ...
SELECT</code> терпит неудачу. Для получения дополнительной информации и
примеров см. <a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p>В части значений <code>ON DUPLICATE KEY UPDATE</code>
Вы можете обратиться к столбцам в других таблицах, пока Вы не используете
<code>GROUP BY</code> в части <a href="#select"><code>SELECT</code>
</a>. Один побочный эффект состоит в том, что Вы должны квалифицировать
групповые имена столбцов в части значений.</p>

<p>Порядок, в котором строки возвращены
<a href="#select"><code>SELECT</code></a> без
<code>ORDER BY</code> не определен. Это означает, что, используя репликацию
нет никакой гарантии, что такой <code>SELECT</code>
возвращает в том же самом порядке на ведущем и ведомом устройствах, это может
привести к несогласованностям между ними. Чтобы препятствовать этому,
Вы должны всегда писать <code>INSERT ... SELECT</code>, которые должны
копироваться как <code>INSERT ... SELECT ... ORDER BY <em><code>column</code>
</em></code>. Выбор <em><code>column</code></em>
не имеет значения, пока тот же самый порядок строк проведен в жизнь на
ведущем и на ведомом устройствах. См. также
<a href="replica.htm#replication-features-limit">раздел 19.4.1.17</a>.</p>

<p>Из-за этой проблемы
<a href="#insert-on-duplicate"><code>INSERT ...
SELECT ON DUPLICATE KEY UPDATE</code></a> и
<a href="#insert-select"><code>INSERT IGNORE ... SELECT</code></a>
отмечены как опасные для основанной на запросе репликации. С этим изменением
такие запросы производят предупреждение в журнале, используя основанный на
запросе режим и зарегистрированы, используя основанный на строке формат,
используя режим <code>MIXED</code> (Bug #11758262, Bug #50439).</p>
<p>См. также <a href="replica.htm#replication-sbr-rbr">раздел 19.2.1.1</a>.
</p>

<p>В MySQL 8.0 <code>INSERT ... SELECT</code>, который действовал на
разделенные таблицы, используя такой механизм хранения, как
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>, который
использует блокировки на уровне таблицы, блокирует все разделы целевой
таблицы. Однако, только тот раздел, который фактически считан из исходной
таблицы, заблокирован. Это не происходит с таблицами, используя такие
механизмы хранения, как <a href="innodb.htm"><code>InnoDB</code></a>,
которые работают с блокировкой на уровне строки. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h4><a name="insert-delayed"></a>14.2.5.2. INSERT DELAYED</h4>
<pre>
INSERT DELAYED ...
</pre>

Опция <code>DELAYED</code> для
<a href="#insert"><code>INSERT</code></a> в MySQL это
расширение MySQL к стандартному SQL. В предыдущих версиях MySQL это может
использоваться для определенных видов таблиц (таких, как
<code>MyISAM</code>), таким образом это, когда клиент использует
<a href="#insert-delayed"><code>INSERT DELAYED</code></a>,
регистрируется сервером сразу, и строка стоит в очереди, чтобы быть
вставленной, когда таблица не находится в использовании
никаким другим потоком.</p>

<p><code>DELAYED</code> устарела в MySQL 5.6.6. В MySQL 8.0
<code>DELAYED</code> не поддерживается. Сервер признает, но игнорирует
<code>DELAYED</code>, обрабатывает вставку как неотсроченную вставку и
производит предупреждение <code>ER_WARN_LEGACY_SYNTAX_CONVERTED</code>
(<span><span>INSERT DELAYED is no longer supported. The statement was
converted to INSERT</span></span>). <code>DELAYED</code>
намечено для удаления в будущем выпуске.</p>

<h4><a name="insert-on-duplicate"></a>14.2.5.3. INSERT ... ON DUPLICATE
KEY UPDATE</h4>
<p>Если Вы определяете <code>ON DUPLICATE KEY UPDATE</code>, и строка
вставлена, которая вызвала бы дубликат значения в индексе
<code>UNIQUE</code> или <code>PRIMARY KEY</code>, MySQL применит
<a href="#update"><code>UPDATE</code></a> из старой строки.
Например, если столбец <code>a</code> объявлен как <code>UNIQUE</code> и
содержит значение <code>1</code>, следующие два запроса
имеют подобный эффект:
<pre>
INSERT INTO table (a,b,c) VALUES (1,2,3)
       ON DUPLICATE KEY UPDATE c=c+1;
UPDATE table SET c=c+1 WHERE a=1;
</pre>

Эффекты не идентичны для таблицы <code>InnoDB</code>,
где <code>a</code> столбец auto-increment. Со столбцом auto-increment
<code>INSERT</code> увеличивает значение auto-increment, но
<code>UPDATE</code> не делает.</p>

<p><code>ON DUPLICATE KEY UPDATE</code>
может содержать многократные назначения столбца, отделенные запятыми.</p>

<p>С <code>ON DUPLICATE KEY UPDATE</code> значение затронутых строк за строку
1, если строка вставлена как новая строка, 2, если существующая строка
обновлена, и 0, если существующая строка установлена в ее текущее значение.
Если Вы определяете <code>CLIENT_FOUND_ROWS</code> для
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a> соединяясь с <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a>, значение затронутых строк 1 (не 0), если существующая строка
установлена в ее текущее значение.</p>

<p>Если <code>b</code> также уникален,
<a href="#insert"><code>INSERT</code></a> эквивалентен
<a href="#update"><code>UPDATE</code></a>:
<pre>
UPDATE table SET c=c+1 WHERE a=1 OR b=2 LIMIT 1;
</pre>

Если <code>a=1 OR b=2</code> соответствует несколько строк, только одна
обновлена. Вообще, Вы должны попытаться избегать использования
<code>ON DUPLICATE KEY UPDATE</code> на таблицах с
уникальным многократным индексом.</p>

<p>Вы можете использовать <a href="funct.htm#function_values"><code>
VALUES(<em><code>col_name</code></em>)</code></a> в
<a href="#update"><code>UPDATE</code></a>, чтобы обратиться к
значениям столбцов из части <a href="#insert"><code>INSERT</code></a>
запроса <a href="#insert-on-duplicate"><code>INSERT ...
ON DUPLICATE KEY UPDATE</code></a>. Другими словами,
<a href="funct.htm#function_values"><code>VALUES(<em><code>col_name</code>
</em>)</code></a> в <code>ON DUPLICATE KEY UPDATE</code> относится к значению
<em><code>col_name</code></em> было бы вставлено, если бы не было никакой
ошибки дублирования ключа. Эта функция особенно полезна при вставке многих
строк. <a href="funct.htm#function_values"><code>VALUES()</code></a>
является значащей только в <code>INSERT ... UPDATE</code>,
иначе вернет <code>NULL</code>:
<pre>
INSERT INTO table (a,b,c) VALUES (1,2,3),(4,5,6)
       ON DUPLICATE KEY UPDATE c=VALUES(a)+VALUES(b);
</pre>

Этот запрос идентичен следующим двум запросам:
<pre>
INSERT INTO table (a,b,c) VALUES (1,2,3)
       ON DUPLICATE KEY UPDATE c=3;
INSERT INTO table (a,b,c) VALUES (4,5,6)
       ON DUPLICATE KEY UPDATE c=9;
</pre>

Если таблица содержит <code>AUTO_INCREMENT</code> и
<a href="#insert-on-duplicate"><code>INSERT ... ON DUPLICATE KEY
UPDATE</code></a> вставляет или обновляет строку,
<a href="funct.htm#function_last-insert-id"><code>LAST_INSERT_ID()</code></a>
возвращает значение <code>AUTO_INCREMENT</code>.</p>

<p><code>DELAYED</code> проигнорирована, когда Вы используете
<code>ON DUPLICATE KEY UPDATE</code>.</p>
<p>Поскольку результаты
<a href="#insert-select"><code>INSERT ... SELECT</code></a>
зависят от упорядочивания строк из
<a href="#select"><code>SELECT</code></a>
и этот порядок не может всегда гарантироваться, возможно, регистрируя
<a href="#insert-on-duplicate"><code>INSERT ...
SELECT ON DUPLICATE KEY UPDATE</code></a> для ведущего и ведомого устройств
получить разные результаты. Таким образом,
<a href="#insert-on-duplicate"><code>INSERT ...
SELECT ON DUPLICATE KEY UPDATE</code></a> отмечены как опасные для основанной
на запросе репликации. С этим изменением такие запросы производят
предупреждение в журнале, используя основанный на запросе режим и
зарегистрированы, используя основанный на строке формат, используя режим
<code>MIXED</code>. Кроме того,
<a href="#insert-on-duplicate"><code>INSERT ...
ON DUPLICATE KEY UPDATE</code></a>
для таблицы, имеющей больше чем один уникальный или первичный ключ, также
отмечен как опасный (Bug #11765650, Bug #58637), см.
<a href="replica.htm#replication-sbr-rbr">раздел 19.2.1.1</a>.</p>

<p>В MySQL 8.0 <code>INSERT ... ON DUPLICATE KEY UPDATE</code>
на разделенной таблице, используя механизм хранения
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>, который
использует блокировки на уровне таблицы, блокирует любой раздел таблицы, в
котором обновлен ключевой столбец раздела. Для механизмов хранения, которые
используют блокировку на уровне строки, это не так. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h3><a name="load-data"></a>14.2.6. LOAD DATA INFILE</h3>
<pre>
LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE '<em><code>file_name</code></em>'
[REPLACE | IGNORE]
INTO TABLE <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[CHARACTER SET <em><code>charset_name</code></em>]
[{FIELDS | COLUMNS}
[TERMINATED BY '<em><code>string</code></em>']
[[OPTIONALLY] ENCLOSED BY '<em><code>char</code></em>']
[ESCAPED BY '<em><code>char</code></em>']
]
[LINES
[STARTING BY '<em><code>string</code></em>']
[TERMINATED BY '<em><code>string</code></em>']
]
[IGNORE <em><code>number</code></em> {LINES | ROWS}]
[(<em><code>col_name_or_user_var</code></em>,...)]
[SET <em><code>col_name</code></em> = <em><code>expr</code></em>,...]
</pre>

<a href="#load-data"><code>LOAD DATA INFILE</code></a>
читает строки из текстового файла в таблицу на сверхвысокой скорости.
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
дополнение <a href="#select-into"><code>SELECT ... INTO OUTFILE</code>
</a>, см. <a href="#select-into">раздел 14.2.9.1</a>).
Чтобы писать данные из таблицы в файл, надо использовать
<a href="#select-into"><code>SELECT ... INTO OUTFILE</code></a>.
Чтобы считать файл назад в таблицу, надо использовать
<a href="#load-data"><code>LOAD DATA INFILE</code></a>. Синтаксис
<code>FIELDS</code> и <code>LINES</code>
тот же самый для обоих запросов. Оба пункта являются дополнительными, но
<code>FIELDS</code> должен предшествовать <code>LINES</code>,
если оба определены.</p>

<p>Вы можете также загрузить файлы с данными при использовании
<a href="programs.htm#mysqlimport"><span><strong>mysqlimport</strong></span>
</a>, это работает, посылая серверу запрос
<a href="#load-data"><code>LOAD DATA INFILE</code></a>. Опция
<a href="programs.htm#option_mysqlimport_local"><code>--local</code></a>
заставляет <a href="programs.htm#mysqlimport"><span><strong>mysqlimport
</strong></span></a> читать файлы с данными из хоста клиента. Вы можете
определить <a href="programs.htm#option_mysqlimport_compress"><code>
--compress</code></a>, чтобы получить лучшую работу по медленным сетям, если
клиент и сервер поддерживают сжатый протокол. См.
<a href="programs.htm#mysqlimport">раздел 5.5.5</a>.</p>

<p>Имя файла должно быть дано как буквальная строка. На Windows определите
наклонные черты влево в путях как наклонные черты вправо или удвоенные
наклонные черты влево. <a href="server.htm#sysvar_character_set_filesystem">
<code>character_set_filesystem</code></a>
управляет интерпретацией имени файла.</p>

<p><code>LOAD DATA</code> поддерживает явный выбор раздел, используя
<code>PARTITION</code> со списком разделенных запятой значений одного или
более названий разделов, подразделов или обоих. Когда эта опция используется,
если какие-либо строки из файла не могут быть вставлены ни в один раздел,
названный в списке, запрос терпит неудачу с ошибкой
<span>Found a row not matching the given partition set</span>. См.
<a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p>Для разделенных таблиц, используя механизмы хранения, которые используют
табличные блокировки, например, <a href="storage.htm#myisam-storage-engine">
<code>MyISAM</code></a>, <code>LOAD DATA</code>
не может сократить блокировки раздела. Это не относится к таблицам,
использующим механизмы хранения, которые используют блокировку на уровне
строки, например, <a href="innodb.htm"><code>InnoDB</code></a>. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<p>Сервер использует набор символов, обозначенный
<a href="server.htm#sysvar_character_set_database"><code>
character_set_database</code></a>, чтобы интерпретировать информацию в файле.
<a href="#set-names"><code>SET NAMES</code></a> и установка
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a> не затрагивают интерпретацию ввода. Если содержание входного
файла использует набор символов, который отличается от значения по умолчанию,
обычно предпочтительно определить набор символов файла при использовании
<code>CHARACTER SET</code>. Набор символов <code>binary</code>
определяет отсутствие конвертации.</p>

<p><a href="#load-data"><code>LOAD DATA INFILE</code></a>
интерпретирует все области в файле как наличие того же самого набора
символов, независимо от типов данных столбцов, в которые загружены значения
полей. Для правильной интерпретации содержания файла Вы должны гарантировать,
что он был написан с правильным набором символов. Например, если Вы пишете
файл с данными с <a href="programs.htm#mysqldump"><span><strong>mysqldump -T
</strong></span></a> или через <a href="#select-into"><code>SELECT ...
INTO OUTFILE</code></a> в <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a>, надо убедиться, что использовали опцию
<code>--default-character-set</code>, чтобы вывод был написан в наборе
символов, который будет использоваться, когда файл загружен
<a href="#load-data"><code>LOAD DATA INFILE</code></a>.</p>

<p>Невозможно загрузить файлы с данными, которые используют
<code>ucs2</code>, <code>utf16</code>,
<code>utf16le</code> или <code>utf32</code>.</p>

<p>Если Вы используете <code>LOW_PRIORITY</code>, выполнение
<a href="#load-data"><code>LOAD DATA</code></a>
отсрочено, пока никакие другие клиенты не читают из таблицы. Это затрагивает
только механизмы хранения, которые используют только блокировку на уровне
таблицы (<code>MyISAM</code>, <code>MEMORY</code> и <code>MERGE</code>).</p>

<p>Если Вы определяете <code>CONCURRENT</code> с
<code>MyISAM</code>, которая удовлетворяет условию для параллельных вставок
(то есть, не содержит свободных блоков в середине), другие потоки могут
получить данные от таблицы в то время, как работает
<a href="#load-data"><code>LOAD DATA</code></a>.
Эта опция затрагивает исполнение <a href="#load-data"><code>LOAD
DATA</code></a>, даже если никакой другой поток не использует таблицу в то
же самое время.</p>

<p>С основанной на строке репликацией <code>CONCURRENT</code>
копируется независимо от версии MySQL. С основанной на запросе репликацией
<code>CONCURRENT</code> не копируется до MySQL 5.5.1 (см. Bug #34628). См.
<a href="replica.htm#replication-features-load-data">раздел 19.4.1.18</a>.
</p>

<p><code>LOCAL</code> затрагивает ожидаемое местоположение файла и обработку
ошибок, как описано позже. <code>LOCAL</code> применим
только если Ваш сервер и Ваш клиент оба были сконфигурированы, чтобы
разрешить это. Например, если <a href="programs.htm#mysqld"><span><strong>
mysqld</strong></span></a> был запущен с
<a href="server.htm#sysvar_local_infile"><code>--local-infile=0</code></a>,
<code>LOCAL</code> не работает. См. <a href="security.html#load-data-local">
раздел 7.1.6</a>.</p>

<p><code>LOCAL</code> затрагивает, где файл, как ожидают, будет найден:</p>
<ul><li><p>Если <code>LOCAL</code> определен, файл считан программой клиента
на хосте клиента и послан на сервер. Файл может быть дан как полный путь,
чтобы определить его точное местоположение. Если дано как относительный путь,
имя интерпретируется относительно каталога, в котором была
запущена программа клиента.</p>

<p>Используя <code>LOCAL</code> с <a href="#load-data"><code>LOAD DATA
</code></a>, копия файла создается во временном каталоге сервера. Это не
каталог, определенный значением
<a href="server.htm#sysvar_tmpdir"><code>tmpdir</code></a> или
<a href="replica.htm#sysvar_slave_load_tmpdir"><code>slave_load_tmpdir</code>
</a>, а временный каталог операционной системы, и он не конфигурируем в
сервере MySQL. Как правило, временный каталог системы <code>/tmp</code> в
Linux и <code>C:\WINDOWS\TEMP</code> в Windows. Нехватка достаточного
пространства для копии в этом каталоге может вызвать сбой
<a href="#load-data"><code>LOAD DATA LOCAL</code></a>.</li>

<li>Если <code>LOCAL</code> не определен, файл должен быть расположен на
машине сервера и считан непосредственно сервером. Сервер использует следующие
правила определения местонахождения файла:</p>

<ul><li><p>Если имя файла абсолютный путь, сервер использует его как дано.
</li>
<li>Если имя файла относительный путь с одним или более
компонентами, сервер ищет файл относительно каталога данных сервера.</li>
<li>Если имя файла без ведущих компонентов дано, сервер ищет файл в каталоге
базы данных по умолчанию.</p></li></ul></li></ul>

<p>В не-<code>LOCAL</code> случае эти правила означают, что файл
<code>./myfile.txt</code> считан из каталога данных сервера, тогда как файл
<code>myfile.txt</code> считан из каталога базы данных по умолчанию.
Например, если база данных значения по умолчанию <code>db1</code>,
следующий запрос <a href="#load-data"><code>LOAD DATA</code></a>
читает файл <code>data.txt</code> из каталога базы данных <code>db1</code>,
даже при том, что запрос явно загружает файл в таблицу в <code>db2</code>:
<pre>
LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;
</pre>

Из соображений безопасности, читая текстовые файлы, расположенные на сервере,
файлы должны находиться в каталоге базы данных или быть читаемыми учетной
записью пользователя, используемой, чтобы выполнить сервер. Кроме того, чтобы
использовать <a href="#load-data"><code>LOAD DATA INFILE</code></a>
на файлах сервера Вы должны иметь привилегию
<a href="security.html#priv_file"><code>FILE</code></a>. См.
<a href="security.html#privileges-provided">раздел 7.2.1</a>.
Для не-<code>LOCAL</code>, если <a href="server.htm#sysvar_secure_file_priv">
<code>secure_file_priv</code></a> установлена в непустое имя каталога, файл,
который будет загружен, должен быть расположен в том каталоге.</p>

<p>Использование <code>LOCAL</code> немного медленнее, чем разрешение серверу
получить доступ к файлам непосредственно, потому что содержание файла должен
послать по соединению клиент к серверу. С другой стороны, Вы не нуждаетесь в
привилегии <a href="security.html#priv_file"><code>FILE</code></a>, чтобы
загрузить местные файлы.</p>

<p><code>LOCAL</code> также меняет обработку ошибок:</p>
<ul><li><p>С <a href="#load-data"><code>LOAD DATA INFILE</code></a>
интерпретация данных и ошибки дубликата ключа заканчивают работу.</li>

<li>С <a href="#load-data"><code>LOAD DATA LOCAL INFILE</code></a>
интерпретация данных и ошибки дубликата ключа
становятся предупреждениями, и работа продолжается, потому что у сервера нет
никакого способа остановить передачу файла в середине работы.
Для ошибок дубликата ключа это то же самое, как будто указан
<code>IGNORE</code>. <code>IGNORE</code> объяснен позже в этом разделе.
</p></li></ul>

<p><code>REPLACE</code> и <code>IGNORE</code> управляют обработкой входных
строк, которые дублируют существующие строки на уникальных значениях ключа:
</p>
<ul><li><p>Если указан <code>REPLACE</code>, входные строки заменяют
существующие строки. Другими словами, строки, у которых есть то же самое
значение для первичного ключа или уникального индекса как у
существующей строки. См. <a href="#replace">раздел 14.2.8</a>.</li>

<li>Если указан <code>IGNORE</code>, от строк, которые дублируют существующую
строку на уникальном значении ключа, отказываются.</li>
<li>Если Вы не определяете ни одну опцию, поведение зависит от
<code>LOCAL</code>. Без <code>LOCAL</code> ошибка происходит, когда
дублирующее значение ключа найдено, и остальная часть текстового файла
проигнорирована. С <code>LOCAL</code> поведение по умолчанию то же самое, как
будто <code>IGNORE</code> определен, потому что у сервера нет никакого
способа остановить передачу файла в середине работы.</p></li></ul>

<p>Чтобы проигнорировать ограничения внешнего ключа во время работы загрузки,
установите <code>SET foreign_key_checks = 0</code> перед
<a href="#load-data"><code>LOAD DATA</code></a>.</p>

<p>Если Вы используете <a href="#load-data"><code>LOAD DATA
INFILE</code></a> на пустой таблице <code>MyISAM</code>, все групповые
индексы создаются в отдельном пакете (что касается
<a href="#repair-table"><code>REPAIR TABLE</code></a>).
Обычно это делает <a href="#load-data"><code>LOAD DATA INFILE</code>
</a> намного быстрее, когда Вы имеете много индексов. В некоторых крайних
случаях Вы можете создать индексирование еще быстрее, выключая их с
<code>ALTER TABLE ... DISABLE KEYS</code>
прежде, чем загрузить файл в таблицу и используя
<code>ALTER TABLE ... ENABLE KEYS</code>, чтобы пересоздать
индексирование после загрузки файла. См.
<a href="optimiz.htm#insert-speed">раздел 9.2.2.1</a>.</p>

<p>Для <a href="#load-data"><code>LOAD DATA INFILE</code></a> и
<a href="#select-into"><code>SELECT ... INTO OUTFILE</code></a>
синтаксис <code>FIELDS</code> и <code>LINES</code> одинаков.
Оба пункта являются дополнительными, но <code>FIELDS</code>
должен предшествовать <code>LINES</code>, если оба определены.</p>

<p>Если Вы определяете <code>FIELDS</code>, каждый из его подпунктов
(<code>TERMINATED BY</code>, <code>[OPTIONALLY] ENCLOSED BY</code> и
<code>ESCAPED BY</code>) является также дополнительным, за исключением того,
что Вы должны определить по крайней мере один из них.</p>

<p>Если Вы не определяете <code>FIELDS</code> или <code>LINES</code>,
значения по умолчанию те же самые, как будто Вы написали:
<pre>
FIELDS TERMINATED BY '\t' ENCLOSED BY '' ESCAPED BY '\\'
LINES TERMINATED BY '\n' STARTING BY ''
</pre>

Наклонная черта влево это символ ESC MySQL в пределах строк в запросах SQL,
чтобы определить буквальную наклонную черту влево, Вы должны определить две
наклонных черты влево для значения, которое будет интерпретироваться как
единственная наклонная черта влево. Escape-последовательности
<code>'\t'</code> и <code>'\n'</code> определяют символы
tab и newline, соответственно.</p>

<p>Другими словами, по умолчанию в
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
спецсимволы обработаны следующим образом, когда ввод читается:</p>

<ul><li><p>Ищет границы строки в новых строках.</li>
<li>Не перескакивает ни через какие префиксы строки.</li>
<li>Разрывы строк в полях по tab.</li>
<li>Не ожидается, что области будут в пределах любых
символов заключения в кавычки.</li>

<li>Интерпретируются символы, которым предшествует символ ESC
<code>\</code> как escape-последовательности. Например,
<code>\t</code>, <code>\n</code> и <code>\\</code> значат
tab, newline и backslash, соответственно. См. обсуждение <code>FIELDS ESCAPED
BY</code> позже для полного списка escape-последовательностей.
</p></li></ul>

<p>Наоборот значения по умолчанию <a href="#select-into"><code>
SELECT ... INTO OUTFILE</code></a> в выводе:</p>
<ul><li><p>Пишет tab между областями.</li>
<li>Не помещает области в пределах любых символов заключения в кавычки.</li>
<li>Использует <code>\</code>, чтобы отметить tab, newline или
<code>\</code>, где это происходит в пределах значений полей.</li>
<li>Пишет новые строки в концах строк.</p></li></ul>

<p>Если Вы произвели текстовый файл на системе Windows, Вам, возможно,
придется использовать <code>LINES TERMINATED BY '\r\n'</code>, чтобы
считать файл должным образом, потому что программы Windows, как правило,
используют два символа в качестве разделителя строки. Некоторые программы,
такие как <span><strong>WordPad</strong></span>,
могли бы использовать <code>\r</code> как разделитель строки при записи
файлов. Чтобы считать такие файлы, надо использовать
<code>LINES TERMINATED BY '\r'</code>.</p>

<p>Если у всех строк, которые Вы хотите читать, есть общий префикс,
который Вы хотите проигнорировать, Вы можете использовать
<code>LINES STARTING BY '<em><code>prefix_string</code></em>'</code>,
чтобы перескакивать через префикс <span><em>и что-либо перед ним</em></span>.
Если строка не включает префикс, вся строка пропущена. Предположите, что Вы
делаете следующий запрос:
<pre>
LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test
     FIELDS TERMINATED BY ','  LINES STARTING BY 'xxx';
</pre>

Если файл с данными похож на это:
<pre>
xxx"abc",1
something xxx"def",2
"ghi",3
</pre>
Получающиеся строки будут <code>("abc",1)</code> и <code>("def",2)</code>.
Третья строка в файле пропущена, потому что это не содержит префикс.</p>

<p><code>IGNORE <em><code>number</code></em> LINES</code>
может использоваться, чтобы проигнорировать строки в начале файла. Например,
Вы можете использовать <code>IGNORE 1 LINES</code>, чтобы
перескакивать через начальную строку заголовка, содержащую имена столбцов:
<pre>
LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES;
</pre>

Когда Вы используете <a href="#select-into"><code>SELECT
... INTO OUTFILE</code></a> c <a href="#load-data"><code>LOAD DATA
INFILE</code></a>, чтобы написать данные от базы данных в файл и затем
считать файл назад в базу данных позже, опции для обоих запросов должны
соответствовать. Иначе <a href="#load-data"><code>LOAD DATA
INFILE</code></a> не будет интерпретировать содержание файла должным образом.
Предположите, что Вы используете <a href="#select-into"><code>SELECT
... INTO OUTFILE</code></a>, чтобы написать файл с
областями, разграниченными запятыми:
<pre>
SELECT * INTO OUTFILE 'data.txt' FIELDS TERMINATED BY ',' FROM table2;
</pre>

Чтобы считать файл разделенных запятыми значений назад, правильный запрос:
<pre>
LOAD DATA INFILE 'data.txt' INTO TABLE table2
     FIELDS TERMINATED BY ',';
</pre>

Если бы вместо этого Вы попытались читать файл запросом, показанным ниже, то
это не работало бы, потому что это инструктирует
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
искать tab между областями:
<pre>
LOAD DATA INFILE 'data.txt' INTO TABLE table2 FIELDS TERMINATED BY '\t';
</pre>
Вероятный результат состоит в том, что каждая входная строка
интерпретировалась бы как единственная область.</p>

<p><a href="#load-data"><code>LOAD DATA INFILE</code></a>
может использоваться, чтобы считать файлы, полученные из внешних источников.
Например, много программ могут экспортировать данные в формате отделенных
запятыми значений (CSV). Если строки в таком файле закончены возвратом
каретки и новой строкой, запрос, показанный здесь, иллюстрирует опции,
которые Вы использовали бы, чтобы загрузить файл:
<pre>
LOAD DATA INFILE 'data.txt' INTO TABLE <em><code>tbl_name</code></em>
     FIELDS TERMINATED BY ',' ENCLOSED BY '"'
     LINES TERMINATED BY '\r\n' IGNORE 1 LINES;
</pre>
Если входные значения не обязательно приложены в пределах кавычек, надо
использовать <code>OPTIONALLY</code> перед <code>ENCLOSED BY</code>.</p>

<p>Любая опция может определить пустую строку (<code>''</code>). Если не
пуста, значения <code>FIELDS [OPTIONALLY] ENCLOSED BY</code> и <code>FIELDS
ESCAPED BY</code> должны быть единственным символом.
<code>FIELDS TERMINATED BY</code>, <code>LINES STARTING BY</code> и
<code>LINES TERMINATED BY</code> могут быть больше, чем одним символом.
Например, чтобы написать строки, которые закончены возвратом каретки/
переводом строки или считать файл, содержащий такие строки, определяют
<code>LINES TERMINATED BY '\r\n'</code> clause.</p>

<p>Считать файл, содержащий записи, которые отделены строками, состоящими из
<code>%%</code>, можно таким запросом:
<pre>
CREATE TABLE jokes (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
       joke TEXT NOT NULL);
LOAD DATA INFILE '/tmp/jokes.txt' INTO TABLE jokes
     FIELDS TERMINATED BY '' LINES TERMINATED BY '\n%%\n' (joke);
</pre>

<code>FIELDS [OPTIONALLY] ENCLOSED BY</code> управляет цитированием полей.
Для вывода (<a href="#select-into"><code>SELECT ... INTO OUTFILE
</code></a>), если Вы опускаете слово <code>OPTIONALLY</code>,
все области заключены в символ <code>ENCLOSED BY</code>.
Пример такого вывода (использующий запятую в качестве полевого разделителя):
<pre>
"1","a string","100.20"
"2","a string containing a , comma","102.20"
"3","a string containing a \" quote","102.20"
"4","a string containing a \", quote and comma","102.20"
</pre>

Если указано <code>OPTIONALLY</code>, символ <code>ENCLOSED BY</code>
используется только, чтобы приложить значения от столбцов, у которых есть
строковый тип данных
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a> или
<a href="types.htm#enum"><code>ENUM</code></a>):
<pre>
1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a \" quote",102.20
4,"a string containing a \", quote and comma",102.20
</pre>

Возникновения символа <code>ENCLOSED BY</code>
в пределах значения поля оставляют, предварительно помечая их символом
<code>ESCAPED BY</code>. Также отметьте, что если Вы определяете пустой
<code>ESCAPED BY</code>, возможно неосторожно произвести вывод, который не
может быть считан должным образом <a href="#load-data"><code>LOAD DATA
INFILE</code></a>. Например, предыдущий вывод выглядел бы следующим образом,
если символ ESC пуст. Заметьте, что вторая область в четвертой строке
содержит запятую после кавычки, которая ошибочно заканчивает область:
<pre>
1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a " quote",102.20
4,"a string containing a ", quote and comma",102.20
</pre>

Для ввода символ <code>ENCLOSED BY</code>, если есть, отрезан от концов
значений полей. Это истина, независимо от того, определен ли
<code>OPTIONALLY</code>, <code>OPTIONALLY</code>
не имеет никакого эффекта на входную интерпретацию. Возникновения
символа <code>ENCLOSED BY</code>, которому предшествует символ
<code>ESCAPED BY</code> интерпретируются как часть текущего значения поля.
</p>

<p>Если область начинается с <code>ENCLOSED BY</code>, экземпляры
того символа признаны завершением значения поля, только если сопровождаемы
областью или строкой <code>TERMINATED BY</code>.
Чтобы избегать двусмысленности возникновений, <code>ENCLOSED BY</code>
в пределах значения поля может быть удвоен и интерпретируется как
единственный случай символа. Например, если <code>ENCLOSED BY '"'</code>
определен, кавычки обработаны как показано здесь:
<pre>
"The ""BIG"" boss"  -&gt; The "BIG" boss
The "BIG" boss  -&gt; The "BIG" boss
The ""BIG"" boss-&gt; The ""BIG"" boss
</pre>
<code>FIELDS ESCAPED BY</code> определяет,
как читать или писать специальные символы:</p>

<ul><li><p>Для ввода, если <code>FIELDS ESCAPED BY</code>
не пуст, возникновения этого символа обрезаны
и следующий символ взят буквально в качестве части значения поля. Некоторые
двухсимвольные последовательности, которые являются исключениями, где первый
символ это символ ESC. Эти последовательности показывают в следующей таблице
(использован <code>\</code> для символа ESC). Правила для обработки
<code>NULL</code> описаны позже в этом разделе.</p>

<table border="1">
<thead><tr><th scope="col">Символ</th><th scope="col">
Escape-последовательность</th></tr></thead>
<tbody><tr><td scope="row"><code>\0</code>
</td><td>ASCII NUL (<code>X'00'</code>)</td></tr>
<tr><td scope="row"><code>\b</code>
</td><td>backspace</td></tr>
<tr><td scope="row"><code>\n</code>
</td><td>newline (linefeed)</td></tr>
<tr><td scope="row"><code>\r</code>
</td><td>carriage return</td></tr>
<tr><td scope="row"><code>\t</code>
</td><td>tab</td></tr>
<tr><td scope="row"><code>\Z</code>
</td><td>ASCII 26 (Control+Z)</td></tr>
<tr><td scope="row"><code>\N</code>
</td><td>NULL</td></tr></tbody></table>

<p>Если <code>FIELDS ESCAPED BY</code> пуст,
интерпретация escape-последовательности не происходит.</li>
<li>Для вывода, если <code>FIELDS ESCAPED BY</code> не пуст, он используется
как префикс следующих символов:</p>

<ul><li><p><code>FIELDS ESCAPED BY</code>.</li>
<li><code>FIELDS [OPTIONALLY] ENCLOSED BY</code>.</li>
<li>Первый символ <code>FIELDS TERMINATED BY</code> и
<code>LINES TERMINATED BY</code>.</li>
<li>ASCII <code>0</code> (что фактически написано после символа ESC, ASCII
<code>0</code>, не нулевой байт).</p></li></ul>

<p>Если <code>FIELDS ESCAPED BY</code> пуст, никаких символов не оставляют и
<code>NULL</code> выведен как <code>NULL</code>, не <code>\N</code>.
Это, вероятно, не хорошая идея определить пустой символ ESC, особенно если
значения полей в Ваших данных содержат какой-либо из символов
из данного списка.</p></li></ul>

<p>В определенных случаях взаимодействуют опции:</p>
<ul><li><p>Если <code>LINES TERMINATED BY</code> пустая, а
<code>FIELDS TERMINATED BY</code> непустая, строки также закончены с
<code>FIELDS TERMINATED BY</code>.</li>

<li>Если <code>FIELDS TERMINATED BY</code> и <code>FIELDS ENCLOSED BY</code>
обе пусты (<code>''</code>), (неразграниченный) формат фиксированной строки
используется. С форматом фиксированной строки никакие разделители не
используются между областями (но у Вас может все еще быть разделитель
строки). Вместо этого значения столбцов считаны и написаны, используя
ширину, достаточно большую, чтобы содержать все значения в области. Для
<a href="types.htm#integer-types"><code>TINYINT</code></a>,
<a href="types.htm#integer-types"><code>SMALLINT</code></a>,
<a href="types.htm#integer-types"><code>MEDIUMINT</code></a>,
<a href="types.htm#integer-types"><code>INT</code></a> и
<a href="types.htm#integer-types"><code>BIGINT</code></a>
ширина 4, 6, 8, 11 и 20, соответственно, независимо от того какова
заявленная ширина отображения.</p>

<p><code>LINES TERMINATED BY</code> все еще используется, чтобы отделить
строки. Если строка не содержит все области, остальная часть столбцов
установлена в их значения по умолчанию. Если у Вас нет разделителя строки, Вы
должны установить это в <code>''</code>. В этом случае текстовый файл должен
содержать все области для каждой строки.</p>

<p>Формат фиксированной строки также затрагивает обработку
<code>NULL</code>, как описано позже.</p>
<p>Формат фиксированной строки не работает, если Вы используете
многобайтовый набор символов.</p></li></ul>

<p>Обработка <code>NULL</code> изменяется
согласно <code>FIELDS</code> и <code>LINES</code>:</p>
<ul><li><p>Для значения по умолчанию <code>FIELDS</code> и
<code>LINES</code> <code>NULL</code> написан как значение поля
<code>\N</code>, для вывода, и значение поля <code>\N</code> считано как
<code>NULL</code> для ввода (предполагается, что <code>ESCAPED BY</code>
<code>\</code>).</li>

<li>Если <code>FIELDS ENCLOSED BY</code> не пусто, область, содержащая
буквальное слово <code>NULL</code> считана как <code>NULL</code>.
Это отличается от слова <code>NULL</code> в пределах <code>FIELDS ENCLOSED BY
</code>, которое считано как строка <code>'NULL'</code>.</li>

<li>Если <code>FIELDS ESCAPED BY</code> пуст, <code>NULL</code>
написан как слово <code>NULL</code>.</li>
<li>С форматом фиксрованной строки (который используется, когда
<code>FIELDS TERMINATED BY</code> и <code>FIELDS ENCLOSED BY</code> пусты),
<code>NULL</code> написан как пустая строка. Это делает значения
<code>NULL</code> и пустые строки в таблице неразличимыми, когда написаны
в файл, потому что оба написаны как пустые строки. Если Вы должны быть в
состоянии их отличить, когда идет чтение файла
Вы не должны использовать формат фиксированной строки.</p></li></ul>

<p>Попытка загрузить <code>NULL</code> в столбец <code>NOT NULL</code>
вызывает назначение неявного значения по умолчанию для типа данных столбца и
предупреждения или ошибки в строгом режиме SQL. Неявные значения по умолчанию
обсуждены в <a href="types.htm#data-type-defaults">раздел 12.7</a>.</p>

<p>Некоторые случаи не поддержаны
<a href="#load-data"><code>LOAD DATA INFILE</code></a>:</p>
<ul><li><p>Строки фиксированного размера (<code>FIELDS TERMINATED BY</code> и
<code>FIELDS ENCLOSED BY</code> пусты) и столбцы
<a href="types.htm#blob"><code>BLOB</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>.</li>

<li>Если Вы определяете один разделитель, который является тем же самым как
префикс другого, <a href="#load-data"><code>LOAD DATA INFILE</code>
</a> не может интерпретировать ввод должным образом. Например, следующее
<code>FIELDS</code> вызовет проблемы:
<pre>
FIELDS TERMINATED BY '"' ENCLOSED BY '"'
</pre></li>

<li>Если <code>FIELDS ESCAPED BY</code> пуст,
значение поля, которое содержит возникновение <code>FIELDS ENCLOSED BY</code>
или <code>LINES TERMINATED BY</code>, сопровождаемый
<code>FIELDS TERMINATED BY</code>,
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
прекратит читать область или строку слишком рано. Это происходит потому, что
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
не может должным образом определить, где область или строка кончается.
</p></li></ul>

<p>Следующий пример загружает все
столбцы таблицы <code>persondata</code>:
<pre>
LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;
</pre>

По умолчанию, когда никакой список столбцов не обеспечен в конце
<a href="#load-data"><code>LOAD DATA INFILE</code></a>,
входные строки, как ожидают, будут содержать область для каждого столбца
таблицы. Если Вы хотите загрузить только некоторые из столбцов таблицы,
определите список столбцов:
<pre>
LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata (col1,col2,...);
</pre>

Вы должны также определить список столбцов, если порядок областей во входном
файле отличается от порядка столбцов в таблице. Иначе, MySQL не может
сказать, как соотнести поля ввода со столбцами таблицы.</p>

<p>Список столбцов может содержать имена столбцов или пользовательские
переменные. С пользовательскими переменными <code>SET</code>
позволяет Вам выполнить преобразования на их значениях прежде, чем
назначить результат столбцам.</p>

<p>Пользовательские переменные в <code>SET</code> могут
использоваться несколькими способами. Следующий пример использует первый
входной столбец непосредственно для значения <code>t1.column1</code>
и назначает второй входной столбец на пользовательскую переменную, которая
подвергнута делению прежде, чем назначена <code>t1.column2</code>:
<pre>
LOAD DATA INFILE 'file.txt' INTO TABLE t1 (column1, @var1)
     SET column2 = @var1/100;
</pre>

<code>SET</code> может использоваться, чтобы поставлять значения, не
сделанные во входном файле. Следующий запрос установит
<code>column3</code> к текущей дате и времени:
<pre>
LOAD DATA INFILE 'file.txt' INTO TABLE t1 (column1, column2)
     SET column3 = CURRENT_TIMESTAMP;
</pre>

Вы можете также отказаться от входного значения, назначая его
на пользовательскую переменную, но не назначая переменную столбцу таблицы:
<pre>
LOAD DATA INFILE 'file.txt' INTO TABLE t1
     (column1, @dummy, column2, @dummy, column3);
</pre>

Использование списка столбца/переменной и <code>SET</code>
подвергается следующим ограничениям:</p>
<ul><li><p>У <code>SET</code> должны быть только имена столбцов на левой
стороне операторов назначения.</li>

<li>Вы можете использовать подзапросы в правой стороне <code>SET</code>.
Подзапрос, который возвращает значение, которое будет назначено на столбец,
может быть только скалярным подзапросом. Кроме того, Вы не можете
использовать подзапрос, чтобы выбрать из таблицы, которая загружается.</li>

<li>Строки, проигнорированные <code>IGNORE</code>,
не обработаны для списка столбца/переменной или <code>SET</code>.</li>
<li>Пользовательские переменные не могут использоваться, загружая данные с
форматом фиксированной строки, потому что у пользовательских переменных
нет ширины отображения.</p></li></ul>

<p>Обрабатывая входную строку, <a href="#load-data"><code>LOAD
DATA</code></a> разделяет ее на области
и использует значения согласно списку столбца/переменной и <code>SET</code>,
если они присутствуют. Тогда получающаяся строка вставлена в таблицу. Если
есть <code>BEFORE INSERT</code> или <code>AFTER INSERT</code> триггеры для
таблицы, они активированы прежде или после вставки строки, соответственно.
</p>

<p>Если у входной строки есть слишком много областей, дополнительные области
проигнорированы, и число предупреждений увеличено.</p>
<p>Если у входной строки есть слишком мало областей, столбцы таблицы, для
которых отсутствуют поля ввода, установлены в их значения по умолчанию.
Назначение значения по умолчанию описано в
<a href="types.htm#data-type-defaults">разделе 12.7</a>.</p>

<p>Пустое значение поля интерпретируется как отличающееся
от недостающей области:</p>
<ul><li><p>Для строковых типов столбец установлен в пустую строку.</li>
<li>Для числовых типов столбец установлен в <code>0</code>.</li>
<li>Для типов даты и времени, столбец установлен в соответствующее
<span><span>нулевое</span></span>. См.
<a href="types.htm#date-and-time-types">раздел 12.3</a>.</p></li></ul>

<p>Это те же самые значения, которые будут результатом, если Вы назначаете
пустую строку явно на строку, число или тип даты или времени явно в
<a href="#insert"><code>INSERT</code></a> или
<a href="#update"><code>UPDATE</code></a>.</p>

<p>Обработка пустых или неправильных значений полей отличается от только что
описанного, если режим SQL установлен в строгое значение. Например, если
<a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>
<a href="server.htm#sqlmode_traditional"><code>TRADITIONAL</code></a>,
преобразование пустого значения или значения такого, как <code>'x'</code>
для числового столбца приводит к ошибке, а не преобразованию в 0. С
<code>LOCAL</code> или <code>IGNORE</code>
предупреждения происходят, а не ошибки, даже со строгим
<a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>,
и строка вставлены, используя то же самое поведение самого близкого значения,
используемое для не ограничивающих режимов SQL. Это происходит, потому что у
сервера нет никакого способа остановить передачу файла в середине работы.
</p>

<p><a href="types.htm#datetime"><code>TIMESTAMP</code></a>
установлены в текущую дату и время, только если есть значение
<code>NULL</code> для столбца (то есть, <code>\N</code>) и столбец не
разрешает значения <code>NULL</code> или если значение по умолчанию столбца
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> текущий timestamp
и это опущено в полевом списке, когда полевой список определен.</p>

<p><a href="#load-data"><code>LOAD DATA INFILE</code></a>
воспринимает весь ввод как строки, таким образом, Вы не можете использовать
числовые значения для <a href="types.htm#enum"><code>ENUM</code></a> или
<a href="types.htm#set"><code>SET</code></a>, как с
<a href="#insert"><code>INSERT</code></a>. Все значения
<a href="types.htm#enum"><code>ENUM</code></a> и
<a href="types.htm#set"><code>SET</code></a> должны быть
определены как строки.</p>

<p>Значения <a href="types.htm#bit-type"><code>BIT</code></a>
не могут быть загружены, используя двоичную запись (например,
<code>b'011010'</code>). Чтобы работать вокруг этого, определите значения как
регулярные целые числа и используйте <code>SET</code>, чтобы преобразовать их
так, чтобы MySQL выполнил числовое преобразование типа и загрузил их в
столбец <a href="types.htm#bit-type"><code>BIT</code></a> должным образом:
<pre>
shell&gt; cat /tmp/bit_test.txt
2
127

shell&gt; mysql test
mysql&gt; LOAD DATA INFILE '/tmp/bit_test.txt'
    -&gt;      INTO TABLE bit_test (@var1) SET b = CAST(@var1 AS UNSIGNED);
Query OK, 2 rows affected (0.00 sec)
Records: 2  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; SELECT BIN(b+0) FROM bit_test;
+----------+
| bin(b+0) |
+----------+
| 10       |
| 1111111  |
+----------+
2 rows in set (0.00 sec)
</pre>

В Unix, если <a href="#load-data"><code>LOAD DATA</code></a> надо
читать из канала, Вы можете использовать следующий метод (пример загружает
каталог <code>/</code> в таблицу <code>db1.t1</code>):
<pre>
mkfifo /mysql/data/db1/ls.dat
chmod 666 /mysql/data/db1/ls.dat
find / -ls &gt; /mysql/data/db1/ls.dat &amp;
mysql -e "LOAD DATA INFILE 'ls.dat' INTO TABLE t1" db1
</pre>

Здесь Вы должны выполнить команду, которая производит данные, которые будут
загружены и <a href="programs.htm#mysql"><span><strong>mysql</strong></span>
</a> на отдельных терминалах или выполнить процесс генерации данных в фоне
(как показано в предыдущем примере). Если Вы не сделаете этого, то канал
заблокируется, пока данные не считаны процессом <a href="programs.htm#mysql">
<span><strong>mysql</strong></span></a>.</p>

<p>Когда <a href="#load-data"><code>LOAD DATA INFILE</code></a>
завершится, это возвращает информационную строку в следующем формате:
<pre>
Records: 1  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

Предупреждения происходят при тех же самых обстоятельствах как
когда значения вставлены, используя <a href="#insert"><code>INSERT
</code></a> (см. <a href="#insert">раздел 14.2.5</a>),
за исключением того, что <a href="#load-data"><code>LOAD DATA
INFILE</code></a> также производит предупреждения, когда есть слишком мало
или слишком много областей во входной строке.</p>

<p>Вы можете использовать <a href="#show-warnings"><code>SHOW WARNINGS
</code></a>, чтобы получить список первых
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>
предупреждений как информацию о том, что пошло не так, как надо. См.
<a href="#show-warnings">раздел 14.7.5.40</a>.</p>

<p>Если Вы используете C API, Вы можете получить информацию о запросе,
вызывая <a href="connect.htm#mysql-info"><code>mysql_info()</code></a>. См.
<a href="connect.htm#mysql-info">раздел 25.8.7.36</a>.</p>

<h3><a name="load-xml"></a>14.2.7. LOAD XML</h3>
<pre>
LOAD XML [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE '<em><code>file_name</code></em>'
[REPLACE | IGNORE]
INTO TABLE [<em><code>db_name</code></em>.]<em><code>tbl_name</code></em>
[CHARACTER SET <em><code>charset_name</code></em>]
[ROWS IDENTIFIED BY '&lt;<em><code>tagname</code></em>&gt;']
[IGNORE <em><code>number</code></em> {LINES | ROWS}]
[(<em><code>field_name_or_user_var</code></em>,...)]
[SET <em><code>col_name</code></em> = <em><code>expr</code></em>,...]
</pre>

<a href="#load-xml"><code>LOAD XML</code></a>
читает данные из XML-файла в таблицу. <em><code>file_name</code></em>
должен быть дан как буквальная строка. <em><code>tagname</code></em>
в дополнительном <code>ROWS IDENTIFIED BY</code>
должен также быть дан как буквальная строка, и должен быть окружен
угловыми скобками (<code>&lt;</code> и <code>&gt;</code>).</p>

<p><a href="#load-xml"><code>LOAD XML</code></a>
работает как дополнение выполнения
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
в режим вывода XML (то есть, запуская клиента с
<a href="programs.htm#option_mysql_xml"><code>--xml</code></a>).
Чтобы написать данные от таблицы в XML-файл, Вы можете вызвать
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a> с
опциями <a href="programs.htm#option_mysql_xml"><code>--xml</code></a> и
<a href="programs.htm#option_mysql_execute"><code>-e</code></a>:
<pre>
shell&gt; mysql --xml -e 'SELECT * FROM mydb.mytable' &gt; file.xml
</pre>

Чтобы считать файл назад в таблицу, надо использовать
<a href="#load-xml"><code>LOAD XML INFILE</code></a>.
По умолчанию элемент <code>&lt;row&gt;</code>
является эквивалентом строки таблицы базы данных, это может быть изменено,
используя <code>ROWS IDENTIFIED BY</code>.</p>

<p>Этот запрос поддерживает три различных формата XML:</p>
<ul><li><p>Имена столбцов как признаки и значения столбцов
как значения атрибута:
<pre>
&lt;<em><code>row</code></em> <em><code>column1</code></em>="<em><code>value1</code></em>"
<em><code>column2</code></em>="<em><code>value2</code></em>" .../&gt;
</pre></li>

<li>Имена столбцов как теги и значения столбцов как контент этих тегов:
<pre>
&lt;<em><code>row</code></em>&gt;
  &lt;<em><code>column1</code></em>&gt;<em><code>value1</code></em>&lt;/<em><code>column1</code></em>&gt;
  &lt;<em><code>column2</code></em>&gt;<em><code>value2</code></em>&lt;/<em><code>column2</code></em>&gt;
&lt;/<em><code>row</code></em>&gt;
</pre></li>

<li>Имена столбцов <code>name</code> признаки тэгов
<code>&lt;field&gt;</code>, значения как содержание этих тегов:
  contents of these tags:
<pre>
&lt;row&gt;
  &lt;field name='<em><code>column1</code></em>'&gt;<em><code>value1</code></em>&lt;/field&gt;
  &lt;field name='<em><code>column2</code></em>'&gt;<em><code>value2</code></em>&lt;/field&gt;
&lt;/row&gt;
</pre>

Это формат, используемый другими инструментами MySQL, такими как
<a href="programs.htm#mysqldump"><span><strong>mysqldump</strong></span></a>.
</p></li></ul>

<p>Все три формата могут использоваться в том же самом XML-файле,
подпрограмма импорта автоматически обнаруживает формат для каждой строки и
интерпретирует это правильно. Теги являются соответствующими, основываясь на
теге или названии атрибута и имени столбца.</p>

<p>Следующие пункты работают для
<a href="#load-xml"><code>LOAD XML</code></a> по существу аналогично
<a href="#load-data"><code>LOAD DATA</code></a>:</p>

<ul><li><p><code>LOW_PRIORITY</code> или <code>CONCURRENT</code></li>
<li><code>LOCAL</code></li>
<li><code>REPLACE</code> или <code>IGNORE</code></li>
<li><code>CHARACTER SET</code></li>
<li><code>SET</code></p></li></ul>
<p>См. <a href="#load-data">раздел 14.2.6</a>.</p>

<p><code>(<em><code>field_name_or_user_var</code></em>, ...)</code>
список разделенных запятой значений одной или более областей XML или
пользовательских переменных. Название пользовательской переменной,
используемой с этой целью, должно соответствовать название области из
XML-файла с префиксом <code>@</code>. Вы можете использовать имена полей,
чтобы выбрать только желаемые области. Пользовательские переменные могут
использоваться, чтобы сохранить соответствующие значения полей для
последующего повторного использования.</p>

<p><code>IGNORE <em><code>number</code></em> LINES</code> или <code>IGNORE
<em><code>number</code></em> ROWS</code> пропускает первые
<em><code>number</code></em> строк в XML-файле. Это походит на
<a href="#load-data"><code>LOAD DATA</code></a>
<code>IGNORE ... LINES</code>.</p>

<p>Предположите, что нам назвали таблицу <code>person</code>,
создаваемую как показано здесь:
<pre>
USE test;
CREATE TABLE person (person_id INT NOT NULL PRIMARY KEY,
       fname VARCHAR(40) NULL, lname VARCHAR(40) NULL,
       created TIMESTAMP);
</pre>
Предположите далее, что эта таблица первоначально пуста.</p>

<p>Теперь предположите, что у нас есть простой XML-файл
<code>person.xml</code>, чье содержание показано здесь:
<pre>
&lt;list&gt;
  &lt;person person_id="1" fname="Kapek" lname="Sainnouine"/&gt;
  &lt;person person_id="2" fname="Sajon" lname="Rondela"/&gt;
  &lt;person person_id="3"&gt;&lt;fname&gt;Likame&lt;/fname&gt;&lt;lname&gt;ц√rrtmons&lt;/lname&gt;&lt;/person&gt;
  &lt;person person_id="4"&gt;&lt;fname&gt;Slar&lt;/fname&gt;&lt;lname&gt;Manlanth&lt;/lname&gt;&lt;/person&gt;
  &lt;person&gt;&lt;field name="person_id"&gt;5&lt;/field&gt;&lt;field name="fname"&gt;Stoma&lt;/field&gt;
&lt;field name="lname"&gt;Milu&lt;/field&gt;&lt;/person&gt;
  &lt;person&gt;&lt;field name="person_id"&gt;6&lt;/field&gt;&lt;field name="fname"&gt;Nirtam&lt;/field&gt;
&lt;field name="lname"&gt;Sklц╤d&lt;/field&gt;&lt;/person&gt;
  &lt;person person_id="7"&gt;&lt;fname&gt;Sungam&lt;/fname&gt;&lt;lname&gt;Dulbц╔d&lt;/lname&gt;&lt;/person&gt;
  &lt;person person_id="8" fname="Sraref" lname="Encmelt"/&gt;
&lt;/list&gt;
</pre>
Каждый из допустимых форматов XML, обсужденных ранее, представлен в этом
файле в качестве примера.</p>

<p>Импортировать данные из <code>person.xml</code> в таблицу
<code>person</code> можно так:
<pre>
mysql&gt; LOAD XML LOCAL INFILE 'person.xml'
    -&gt;      INTO TABLE person
    -&gt;      ROWS IDENTIFIED BY '&lt;person&gt;';

Query OK, 8 rows affected (0.00 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

Здесь мы принимаем, что <code>person.xml</code>
расположен в каталоге данных MySQL. Если файл не может быть найден,
то будет ошибка:
<pre>
<span>ERROR 2 (HY000): File '/person.xml' not found (Errcode: 2)</span>
</pre>

<code>ROWS IDENTIFIED BY '&lt;person&gt;'</code> означает, что каждый
элемент <code>&lt;person&gt;</code> в XML-файле считают эквивалентным строке
в таблице, в которую должны быть импортированы данные. В этом случае это
таблица <code>person</code> в базе данных <code>test</code>.</p>

<p>Как видно из ответа по серверу, 8 строк были импортированы в таблицу
<code>test.person</code>. Это может быть проверено простым
<a href="#select"><code>SELECT</code></a>:
<pre>
mysql&gt; SELECT * FROM person;
+-----------+--------+------------+---------------------+
| person_id | fname  | lname      | created             |
+-----------+--------+------------+---------------------+
| 1         | Kapek  | Sainnouine | 2007-07-13 16:18:47 |
| 2         | Sajon  | Rondela    | 2007-07-13 16:18:47 |
| 3         | Likame | ц√rrtmons  | 2007-07-13 16:18:47 |
| 4         | Slar   | Manlanth   | 2007-07-13 16:18:47 |
| 5         | Stoma  | Nilu       | 2007-07-13 16:18:47 |
| 6         | Nirtam | Sklц╤d     | 2007-07-13 16:18:47 |
| 7         | Sungam | Dulbц╔d    | 2007-07-13 16:18:47 |
| 8         | Sreraf | Encmelt    | 2007-07-13 16:18:47 |
+-----------+--------+------------+---------------------+
8 rows in set (0.00 sec)
</pre>

Это показывает, как заявлено ранее в этом разделе, что любые из 3 форматов
XML могут появиться в единственном файле и быть считаны при использовании
<a href="#load-xml"><code>LOAD XML</code></a>.</p>

<p>Инверсия работы импорта то есть, вывод табличных данных MySQL в XML,
может быть достигнута, используя <a href="programs.htm#mysql"><span><strong>
mysql</strong></span></a>:
<pre>
shell&gt; mysql --xml -e "SELECT * FROM test.person" &gt; person-dump.xml
shell&gt; cat person-dump.xml
&lt;?xml version="1.0"?&gt;

&lt;resultset statement="SELECT * FROM test.person" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;row&gt;
&lt;field name="person_id"&gt;1&lt;/field&gt;
&lt;field name="fname"&gt;Kapek&lt;/field&gt;
&lt;field name="lname"&gt;Sainnouine&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;2&lt;/field&gt;
&lt;field name="fname"&gt;Sajon&lt;/field&gt;
&lt;field name="lname"&gt;Rondela&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;3&lt;/field&gt;
&lt;field name="fname"&gt;Likema&lt;/field&gt;
&lt;field name="lname"&gt;ц√rrtmons&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;4&lt;/field&gt;
&lt;field name="fname"&gt;Slar&lt;/field&gt;
&lt;field name="lname"&gt;Manlanth&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;5&lt;/field&gt;
&lt;field name="fname"&gt;Stoma&lt;/field&gt;
&lt;field name="lname"&gt;Nilu&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;6&lt;/field&gt;
&lt;field name="fname"&gt;Nirtam&lt;/field&gt;
&lt;field name="lname"&gt;Sklц╤d&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;7&lt;/field&gt;
&lt;field name="fname"&gt;Sungam&lt;/field&gt;
&lt;field name="lname"&gt;Dulbц╔d&lt;/field&gt;
  &lt;/row&gt;

  &lt;row&gt;
&lt;field name="person_id"&gt;8&lt;/field&gt;
&lt;field name="fname"&gt;Sreraf&lt;/field&gt;
&lt;field name="lname"&gt;Encmelt&lt;/field&gt;
  &lt;/row&gt;
&lt;/resultset&gt;
</pre>

<p>Опция <a href="programs.htm#option_mysql_xml"><code>--xml</code></a>
предписывает клиенту <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a> использовать XML-формат для его вывода, опция
<a href="programs.htm#option_mysql_execute"><code>-e</code></a>
заставляет клиента немедленно выполнить запрос SQL после опции. См.
<a href="programs.htm#mysql">раздел 5.5.1</a>.</p>

<p>Вы можете проверить, что дамп допустим, создавая копию <code>person</code>
и импортируя файл дампа в новую таблицу:
<pre>
mysql&gt; USE test;
mysql&gt; CREATE TABLE person2 LIKE person;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; LOAD XML LOCAL INFILE 'person-dump.xml' INTO TABLE person2;
Query OK, 8 rows affected (0.01 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; SELECT * FROM person2;
+-----------+--------+------------+---------------------+
| person_id | fname  | lname      | created             |
+-----------+--------+------------+---------------------+
| 1         | Kapek  | Sainnouine | 2007-07-13 16:18:47 |
| 2         | Sajon  | Rondela    | 2007-07-13 16:18:47 |
| 3         | Likema | ц√rrtmons  | 2007-07-13 16:18:47 |
| 4         | Slar   | Manlanth   | 2007-07-13 16:18:47 |
| 5         | Stoma  | Nilu       | 2007-07-13 16:18:47 |
| 6         | Nirtam | Sklц╤d     | 2007-07-13 16:18:47 |
| 7         | Sungam | Dulbц╔d    | 2007-07-13 16:18:47 |
| 8         | Sreraf | Encmelt    | 2007-07-13 16:18:47 |
+-----------+--------+------------+---------------------+
8 rows in set (0.00 sec)
</pre>

Нет никакого требования что каждая область в XML-файле быть соответствующей
столбцу в соответствующей таблице.
Пропущены области, у которых нет никаких соответствующих столбцов. Вы можете
видеть это, опустошив таблицу <code>person2</code> и удалив столбец
<code>created</code>, затем используйте тот же самый <code>LOAD XML</code>:
<pre>
mysql&gt; TRUNCATE person2;
Query OK, 8 rows affected (0.26 sec)

mysql&gt; ALTER TABLE person2 DROP COLUMN created;
Query OK, 0 rows affected (0.52 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; SHOW CREATE TABLE person2\G
*************************** 1. row ***************************
   Table: person2
Create Table: CREATE TABLE `person2` (
  `person_id` int(11) NOT NULL,
  `fname` varchar(40) DEFAULT NULL,
  `lname` varchar(40) DEFAULT NULL,
  PRIMARY KEY (`person_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)

mysql&gt; LOAD XML LOCAL INFILE 'person-dump.xml' INTO TABLE person2;
Query OK, 8 rows affected (0.01 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; SELECT * FROM person2;
+-----------+--------+------------+
| person_id | fname  | lname      |
+-----------+--------+------------+
| 1         | Kapek  | Sainnouine |
| 2         | Sajon  | Rondela    |
| 3         | Likema | ц√rrtmons  |
| 4         | Slar   | Manlanth   |
| 5         | Stoma  | Nilu       |
| 6         | Nirtam | Sklц╤d     |
| 7         | Sungam | Dulbц╔d    |
| 8         | Sreraf | Encmelt    |
+-----------+--------+------------+
8 rows in set (0.00 sec)
</pre>

Порядок, в котором области даны в каждой строке XML-файла, не затрагивает
работу <code>LOAD XML</code>, полевой порядок может измениться от строки до
строки, и не обязан быть в том же самом порядке, как
соответствующие столбцы в таблице.</p>

<p>Как упомянуто ранее, Вы можете использовать список из одной или более
областей XML <code>(<em><code>field_name_or_user_var</code></em>, ...)
</code> (чтобы выбрать желаемые области только) или пользовательские
переменные (чтобы сохранить соответствующие значения полей для более позднего
использования). Пользовательские переменные могут быть особенно полезными,
когда Вы хотите вставить данные из XML-файла в столбцы таблицы, имена которых
не соответствуют таковым из областей XML. Чтобы видеть, как это работает, мы
сначала составляем таблицу <code>individual</code>, которая соответствует
структуре <code>person</code>, но столбцы называются по-другому:
<pre>
mysql&gt; CREATE TABLE individual (individual_id INT NOT NULL PRIMARY KEY,
    -&gt;        name1 VARCHAR(40) NULL,
    -&gt;        name2 VARCHAR(40) NULL, made TIMESTAMP);
Query OK, 0 rows affected (0.42 sec)
</pre>

В этом случае Вы не можете просто загрузить XML-файл непосредственно в
таблицу, потому что имена полей и имена столбцов не соответствуют:
<pre>
mysql&gt; LOAD XML INFILE '../bin/person-dump.xml' INTO TABLE test.individual;
ERROR 1263 (22004): Column set to default value; NULL supplied to
NOT NULL column 'individual_id' at row 1
</pre>

Это происходит, потому что сервер MySQL ищет имена полей, соответствующие
имена столбцов целевой таблицы. Вы можете работать вокруг этой проблемы,
выбирая значения полей в пользовательские переменные, затем устанавливая
столбцы целевой таблицы, равные значениям тех переменных, через использование
<code>SET</code>. Вы можете выполнить обе эти операции в единственном
запросе, как показано здесь:
<pre>
mysql&gt; LOAD XML INFILE '../bin/person-dump.xml'
    -&gt;      INTO TABLE test.individual (@person_id, @fname, @lname, @created)
    -&gt;      SET individual_id=@person_id, name1=@fname, name2=@lname, made=@created;
Query OK, 8 rows affected (0.05 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; SELECT * FROM individual;
+---------------+--------+------------+---------------------+
| individual_id | name1  | name2      | made                |
+---------------+--------+------------+---------------------+
| 1             | Kapek  | Sainnouine | 2007-07-13 16:18:47 |
| 2             | Sajon  | Rondela    | 2007-07-13 16:18:47 |
| 3             | Likema | ц√rrtmons  | 2007-07-13 16:18:47 |
| 4             | Slar   | Manlanth   | 2007-07-13 16:18:47 |
| 5             | Stoma  | Nilu       | 2007-07-13 16:18:47 |
| 6             | Nirtam | Sklц╤d     | 2007-07-13 16:18:47 |
| 7             | Sungam | Dulbц╔d    | 2007-07-13 16:18:47 |
| 8             | Srraf  | Encmelt    | 2007-07-13 16:18:47 |
+---------------+--------+------------+---------------------+
8 rows in set (0.00 sec)
</pre>

Названия пользовательских переменных <span><em>должны</em></span>
соответствовать таковым из соответствующих областей XML-файла с добавлением
необходимого префикса <code>@</code>, чтобы указать, что это переменные.
Пользовательские переменные не должны быть перечислены или назначены в том же
самом порядке в качестве соответствующих областей.</p>

<p>Используя <code>ROWS IDENTIFIED BY '&lt;<em><code>tagname</code>
</em>&gt;'</code> возможно импортировать данные из того же самого XML-файла в
таблицы базы данных с различными определениями.
Для этого примера, предположите, что Вам назвали файл
<code>address.xml</code>, который содержит следующий XML:
<pre>
&lt;?xml version="1.0"?&gt;

&lt;list&gt;
  &lt;person person_id="1"&gt;
&lt;fname&gt;Robert&lt;/fname&gt;
&lt;lname&gt;Jones&lt;/lname&gt;
&lt;address address_id="1" street="Mill Creek Road" zip="45365" city="Sidney"/&gt;
&lt;address address_id="2" street="Main Street" zip="28681" city="Taylorsville"/&gt;
  &lt;/person&gt;

  &lt;person person_id="2"&gt;
&lt;fname&gt;Mary&lt;/fname&gt;
&lt;lname&gt;Smith&lt;/lname&gt;
&lt;address address_id="3" street="River Road" zip="80239" city="Denver"/&gt;
&lt;!-- &lt;address address_id="4" street="North Street" zip="37920" city="Knoxville"/&gt; --&gt;
  &lt;/person&gt;

&lt;/list&gt;
</pre>

Вы можете снова использовать таблицу <code>test.person</code>
как определено ранее в этом разделе, после очистки всех существующих
записей из таблицы и затем показа ее структуры как показано здесь:
<pre>
mysql&lt; TRUNCATE person;
Query OK, 0 rows affected (0.04 sec)

mysql&lt; SHOW CREATE TABLE person\G
*************************** 1. row ***************************
   Table: person
Create Table: CREATE TABLE `person` (
  `person_id` int(11) NOT NULL,
  `fname` varchar(40) DEFAULT NULL,
  `lname` varchar(40) DEFAULT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`person_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1
1 row in set (0.00 sec)
</pre>

Теперь создайте таблицу <code>address</code> в базе данных <code>test</code>,
используя следующий запрос <a href="#create-table"><code>CREATE TABLE
</code></a>:
<pre>
CREATE TABLE address (address_id INT NOT NULL PRIMARY KEY,
       person_id INT NULL, street VARCHAR(40) NULL,
       zip INT NULL, city VARCHAR(40) NULL, created TIMESTAMP);
</pre>

Чтобы импортировать данные из XML-файла в <code>person</code>,
выполните следующий запрос <a href="#load-xml"><code>LOAD XML</code>
</a>, который определяет, что строки должны быть
определены элементом <code>&lt;person&gt;</code>;
<pre>
mysql&gt; LOAD XML LOCAL INFILE 'address.xml'
    -&gt;      INTO TABLE person
    -&gt;      ROWS IDENTIFIED BY '&lt;person&gt;';
Query OK, 2 rows affected (0.00 sec)
Records: 2  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

Вы можете проверить, что записи были импортированы, используя
<a href="#select"><code>SELECT</code></a>:
<pre>
mysql&gt; SELECT * FROM person;
+-----------+--------+-------+---------------------+
| person_id | fname  | lname | created             |
+-----------+--------+-------+---------------------+
| 1         | Robert | Jones | 2007-07-24 17:37:06 |
| 2         | Mary   | Smith | 2007-07-24 17:37:06 |
+-----------+--------+-------+---------------------+
2 rows in set (0.00 sec)
</pre>
Начиная с <code>&lt;address&gt;</code> у элементов в XML-файле нет никаких
соответствующих столбцов в <code>person</code>, они пропущены.</p>

<p>Чтобы импортировать данные из элементов <code>&lt;address&gt;</code>
в таблицу <code>address</code>, используйте <a href="#load-xml">
<code>LOAD XML</code></a> так:
<pre>
mysql&gt; LOAD XML LOCAL INFILE 'address.xml'
    -&gt;      INTO TABLE address
    -&gt;      ROWS IDENTIFIED BY '&lt;address&gt;';
Query OK, 3 rows affected (0.00 sec)
Records: 3  Deleted: 0  Skipped: 0  Warnings: 0
</pre>

Вы можете видеть, что данные были импортированы, используя такой
запрос <a href="#select"><code>SELECT</code></a>, как этот:
<pre>
mysql&gt; SELECT * FROM address;
+------------+-----------+-----------------+-------+--------------+---------------------+
| address_id | person_id | street          | zip   | city         | created             |
+------------+-----------+-----------------+-------+--------------+---------------------+
|  1         | 1         | Mill Creek Road | 45365 | Sidney       | 2007-07-24 17:37:37 |
|  2         | 1         | Main Street     | 28681 | Taylorsville | 2007-07-24 17:37:37 |
|  3         | 2         | River Road      | 80239 | Denver       | 2007-07-24 17:37:37 |
+------------+-----------+-----------------+-------+--------------+---------------------+
3 rows in set (0.00 sec)
</pre>

Данные из элемента <code>&lt;address&gt;</code>, который приложен в
XML-комментариях, не импортированы. Однако, начиная со столбца
<code>person_id</code> в таблице <code>address</code>,
значение <code>person_id</code> от родительского элемента
<code>&lt;person&gt;</code> для каждого <code>&lt;address&gt;</code>
<span><em>импортировано</em></span> в таблицу <code>address</code>.</p>

<p><b>Соображения безопасности. </b>
Как с <a href="#load-data"><code>LOAD DATA</code></a>,
передача XML-файла от хоста клиента до узла сервера начата сервером MySQL. В
теории исправленный сервер мог быть создан, который скажет программе клиента
передавать файл, выбранный сервером, а не файл, названный клиентом в
<a href="#load-xml"><code>LOAD XML</code></a>.
Такой сервер мог получить доступ к любому файлу на хосте клиента, к которому
пользователь клиента имеет доступ.</p>

<p>В Web клиенты обычно соединяются с MySQL от веб-сервера. Пользователь,
который может выполнить любую команду сервера MySQL, может использовать
<a href="#load-xml"><code>LOAD XML LOCAL</code></a>, чтобы
читать любые файлы, к которым процесс веб-сервера имеет доступ.
В этой окружающей среде клиент относительно сервера MySQL фактически
веб-сервер, а не удаленная программа, выполняемая пользователем, который
соединяется с веб-сервером.</p>

<p>Вы можете отключить загрузку XML-файлов от клиентов, запуская сервер с
опциецй <a href="server.htm#sysvar_local_infile"><code>--local-infile=0
</code></a> или <a href="server.htm#sysvar_local_infile"><code>
--local-infile=OFF</code></a>. Эта опция может также использоваться, запуская
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>,
чтобы выключить <a href="#load-xml"><code>LOAD XML</code></a>
для этого сеанса клиента.</p>

<p>Чтобы препятствовать тому, чтобы клиент загрузил XML-файлы из сервера, не
предоставляйте привилегию <a href="security.html#priv_file"><code>FILE</code>
</a> соответствующей учетной записи пользователя MySQL или отмените эту
привилегию, если у учетной записи пользователя клиента она уже есть.</p>

<p>Отмена привилегии <a href="security.html#priv_file"><code>FILE</code></a>
(или не предоставление этого) не даст пользователю выполнять только
<a href="#load-xml"><code>LOAD XML INFILE</code></a>
(так же как <a href="funct.htm#function_load-file"><code>LOAD_FILE()</code>
</a>), это <span><em>не</em></span> препятствует тому, чтобы пользователь
выполнил <a href="#load-xml"><code>LOAD XML LOCAL INFILE</code></a>.
Чтобы отвергнуть этот запрос, Вы должны запустить сервер или клиента с
опцией <code>--local-infile=OFF</code>.</p>

<p>Другими словами, привилегия <a href="security.html#priv_file"><code>FILE
</code></a> затрагивает только, может ли клиент читать файлы на сервере,
у этого нет никакого действия, может ли клиент считать файлы в
местной файловой системе.</p>

<p>Для разделенных таблиц, используя механизмы хранения, которые используют
табличные блокировки, например, <a href="storage.htm#myisam-storage-engine">
<code>MyISAM</code></a>, любые блокировки, вызванные <code>LOAD XML</code>,
блокируют все разделы таблицы. Это не относится к таблицам, использующим
механизмы хранения, которые используют блокировку на уровне строки, например,
<a href="innodb.htm"><code>InnoDB</code></a>. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h3><a name="replace"></a>14.2.8. REPLACE</h3>
<pre>
REPLACE [LOW_PRIORITY | DELAYED]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[(<em><code>col_name</code></em>,...)]
{VALUES | VALUE} ({<em><code>expr</code></em> | DEFAULT},...),(...),...
</pre>

Или:
<pre>
REPLACE [LOW_PRIORITY | DELAYED]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
SET <em><code>col_name</code></em>={<em><code>expr</code></em> | DEFAULT}, ...
</pre>

Или:
<pre>
REPLACE [LOW_PRIORITY | DELAYED]
[INTO] <em><code>tbl_name</code></em>
[PARTITION (<em><code>partition_name</code></em>,...)]
[(<em><code>col_name</code></em>,...)]
SELECT ...
</pre>

<a href="#replace"><code>REPLACE</code></a> работает точно как
<a href="#insert"><code>INSERT</code></a>, за исключением того, что,
если у старой строки в таблице есть то же самое значение, как новая строка
для <code>PRIMARY KEY</code> или индекса <code>UNIQUE</code>,
старая строка удалена прежде, чем новая строка вставлена. См.
<a href="#insert">раздел 14.2.5</a>.</p>

<p><a href="#replace"><code>REPLACE</code></a> это
расширение MySQL к стандарту SQL. Это вставляет или <span><em>удаляет</em>
</span> и вставляет. Для другого расширения MySQL к стандарту SQL, которое
вставляет или <span><em>обноввляет</em></span>, см.
<a href="#insert-on-duplicate">раздел 14.2.5.3</a>.</p>

<p><code>DELAYED</code> вставки и замены устарели в
MySQL 5.6.6. В MySQL 8.0 <code>DELAYED</code> не работает.
Сервер признает, но игнорирует <code>DELAYED</code>,
обрабатывает замену как неотсроченную замену, и производит предупреждение
<code>ER_WARN_LEGACY_SYNTAX_CONVERTED</code> (<span><span>REPLACE DELAYED is
no longer supported. The statement was converted to REPLACE</span></span>).
<code>DELAYED</code> будет удалено в будущем выпуске.</p>

<p><a href="#replace"><code>REPLACE</code></a>
имеет смысл, только если у таблицы есть
<code>PRIMARY KEY</code> или индекс <code>UNIQUE</code>.
Иначе это становится эквивалентным
<a href="#insert"><code>INSERT</code></a>, потому что нет индекса,
чтобы определить, дублирует ли новая строка другую.</p>

<p>Значения для всех столбцов взяты от значений, определенных в
<a href="#replace"><code>REPLACE</code></a>.
Любые недостающие столбцы установлены в их значения по умолчанию, как это
происходит для <a href="#insert"><code>INSERT</code></a>.
Вы не можете обратиться к значениям от текущей строки и использовать их в
новой строке. Если Вы используете такое назначение, как
<code>SET <em><code>col_name</code></em> = <em><code>col_name</code></em>+1
</code>, ссылка на имя столбца на правой стороне обработана как
<a href="funct.htm#function_default"><code>DEFAULT(<em><code>col_name</code>
</em>)</code></a>, таким образом, назначение эквивалентно
<code>SET <em><code>col_name</code></em> =
DEFAULT(<em><code>col_name</code></em>) + 1</code>.</p>

<p>Если произведенный столбец заменен явно, единственное разрешенное значение
<code>DEFAULT</code>. Для информации о произведенных столбцах см.
<a href="#create-table-generated-columns">раздел 14.1.15.5</a>.</p>

<p>Чтобы использовать <a href="#replace"><code>REPLACE</code></a>,
у Вас должны быть обе привилегии
<a href="security.html#priv_insert"><code>INSERT</code></a> и
<a href="security.html#priv_delete"><code>DELETE</code></a> для таблицы.</p>

<p><code>REPLACE</code> поддерживает явный выбор раздела, используя
<code>PARTITION</code> со списком разделенных запятой значений названий
разделов, подразделов или обоих. Как с <a href="#insert"><code>INSERT
</code></a>, если не возможно вставить новую строку в какой-либо раздел или
подраздел, <code>REPLACE</code> терпит неудачу с ошибкой <span>Found a row
not matching the given partition set</span>. См.
<a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p><a href="#replace"><code>REPLACE</code></a> возвращает количество,
чтобы указать на число затронутых строк. Это сумма удаленных и вставленных
строк. Если количество 1 для однострочного
<a href="#replace"><code>REPLACE</code></a>,
строка была вставлена, но никакие строки не были удалены. Если количество
больше 1, одна или более старых строк были удалены прежде, чем новая строка
была вставлена. Для единственной строки возможно заменить больше, чем одну
старую строку, если таблица содержит много уникальных индексов, и новые
значения дубликатов строки для различных старых строк в
разных уникальных индексах.</p>

<p>Количество затронутых строк облегчает определение того, что
<a href="#replace"><code>REPLACE</code></a> только добавил строку или
заменял также какие-либо строки: проверьте, является ли счетчик 1 (добавил)
или больше (заменил).</p>

<p>Если Вы используете C API, количество затронутых строк может быть
получено, используя <a href="connect.htm#mysql-affected-rows"><code>
mysql_affected_rows()</code></a>.</p>

<p>Вы не можете заменять в таблице и выбрать из той же
самой таблицы в подзапросе.</p>
<p>MySQL использует следующий алгоритм для
<a href="#replace"><code>REPLACE</code></a> (и
<code>LOAD DATA ... REPLACE</code>):</p>

<ol type="1"><li><p>Попытайтесь вставить новую строку в таблицу.</li>
<li>В то время как вставка терпит неудачу, потому что
происходит ошибка дублирования ключа для первичного ключа
или уникального индекса:</p>

<ol type="a"><li><p>Удалите из таблицы противоречивую строку, у которой есть
дублирующее значение ключа.</li>
<li>Попробуйте еще раз вставлять новую строку в таблицу.
</p></li></ol></li></ol>

<p>Возможно, что в случае
ключевой ошибки, механизм хранения может обработать
<code>REPLACE</code> как обновление, а не удаление плюс вставка, но семантика
та же самая. Нет никаких видимых пользователем эффектов, кроме возможной
разницы в том, как механизм хранения постепенно увеличивает переменную
<code>Handler_<em><code>xxx</code></em></code>.</p>

<p>Поскольку результаты <code>REPLACE ... SELECT</code>
зависят от упорядочивания строк из <a href="#select"><code>SELECT
</code></a>, и этот порядок не может всегда гарантироваться, возможно,
регистрируя эти запросы для ведущего и ведомого устройств получить разный
порядок. Поэтому <code>REPLACE ... SELECT</code>
отмечены как опасный для основанной на запросе репликации. С этим изменением
такие запросы производят предупреждение в журнале, используя
двоичной режим журналирования <code>STATEMENT</code> и зарегистрированы,
используя основанный на строке формат, используя режим <code>MIXED</code>.
См. <a href="replica.htm#replication-sbr-rbr">раздел 19.2.1.1</a>.</p>

<p>Изменяя существующую таблицу, которая не разделена, чтобы добавить
разделение или изменяя разделение уже разделенной таблицы, Вы можете
рассмотреть изменение первичного ключа таблицы (см.
<a href="partit.htm#partitioning-limitations-partitioning-keys-unique-keys">
раздел 20.6.1</a>). Вы должны знать что, если Вы делаете это, результаты
<code>REPLACE</code> могут быть затронуты, как если бы Вы изменили первичный
ключ неразделенной таблицы. Считайте таблицу создаваемой следующим
запросом <a href="#create-table"><code>CREATE TABLE</code></a>:
<pre>
CREATE TABLE test (id INT UNSIGNED NOT NULL AUTO_INCREMENT,
       data VARCHAR(64) DEFAULT NULL,
       ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON
       UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id));
</pre>

Когда мы составляем эту таблицу и выполняем запросы, показанные в
клиенте mysql, результаты следующие:
<pre>
mysql&gt; REPLACE INTO test VALUES (1, 'Old', '2014-08-20 18:47:00');
Query OK, 1 row affected (0.04 sec)

mysql&gt; REPLACE INTO test VALUES (1, 'New', '2014-08-20 18:47:42');
Query OK, 2 rows affected (0.04 sec)

mysql&gt; SELECT * FROM test;
+----+------+---------------------+
| id | data | ts                  |
+----+------+---------------------+
|  1 | New  | 2014-08-20 18:47:42 |
+----+------+---------------------+
1 row in set (0.00 sec)
</pre>

Теперь мы составляем вторую таблицу, почти идентичную первой
, за исключением того, что первичный ключ теперь покрывает 2 столбца, как
показано здесь (подчеркнутый текст):
<pre>
CREATE TABLE test2 (id INT UNSIGNED NOT NULL AUTO_INCREMENT,
       data VARCHAR(64) DEFAULT NULL,
       ts TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON
       UPDATE CURRENT_TIMESTAMP,
       <span><em>PRIMARY KEY (id, ts)</em></span>);
</pre>

Когда мы работаем с <code>test2</code>, те же самые два
<code>REPLACE</code>, как мы сделали на оригинальной таблице
<code>test</code>, дают различный результат:
<pre>
mysql&gt; REPLACE INTO test2 VALUES (1, 'Old', '2014-08-20 18:47:00');
Query OK, 1 row affected (0.05 sec)

mysql&gt; REPLACE INTO test2 VALUES (1, 'New', '2014-08-20 18:47:42');
Query OK, 1 row affected (0.06 sec)

mysql&gt; SELECT * FROM test2;
+----+------+---------------------+
| id | data | ts                  |
+----+------+---------------------+
|  1 | Old  | 2014-08-20 18:47:00 |
|  1 | New  | 2014-08-20 18:47:42 |
+----+------+---------------------+
2 rows in set (0.00 sec)
</pre>

Это потому, что значения столбцов <code>id</code> и <code>ts</code> должны
соответствовать таковым из существующей строки для строки, которая будет
заменена, иначе строка вставлена.</p>

<p>В MySQL 8.0 <code>REPLACE</code>, затрагивающий разделенную таблицу,
используя механизм хранения подобный
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>,
блокирует на уровне таблицы только раздел, содержащий строки, которые
соответствуют параметру <code>WHERE</code> в <code>REPLACE</code>, пока ни
один из столбцов раздела таблицы не обновлен,
иначе вся таблица заблокирована. Для механизмов хранения вроде
<a href="innodb.htm"><code>InnoDB</code></a> с
блокировкой на уровне строки, никакой блокировки раздела нет. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h3><a name="select"></a>14.2.9. SELECT</h3>
<pre>
SELECT
[ALL | DISTINCT | DISTINCTROW ]
  [HIGH_PRIORITY]
  [MAX_STATEMENT_TIME = <em><code>N</code></em>]
  [STRAIGHT_JOIN]
  [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
  [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
<em><code>select_expr</code></em> [, <em><code>select_expr</code></em> ...]
[FROM <em><code>table_references</code></em>
  [PARTITION <em><code>partition_list</code></em>]
[WHERE <em><code>where_condition</code></em>]
[GROUP BY {<em><code>col_name</code></em> | <em><code>expr</code></em> | <em><code>position</code></em>}
  [ASC | DESC], ... [WITH ROLLUP]]
[HAVING <em><code>where_condition</code></em>]
[ORDER BY {<em><code>col_name</code></em> | <em><code>expr</code></em> | <em><code>position</code></em>}
  [ASC | DESC], ...]
[LIMIT {[<em><code>offset</code></em>,] <em><code>row_count</code></em> |
         <em><code>row_count</code></em> OFFSET <em><code>offset</code></em>}]
[PROCEDURE <em><code>procedure_name</code></em>(<em><code>argument_list</code></em>)]
[INTO OUTFILE '<em><code>file_name</code></em>'
[CHARACTER SET <em><code>charset_name</code></em>]
<em><code>export_options</code></em>
  | INTO DUMPFILE '<em><code>file_name</code></em>'
  | INTO <em><code>var_name</code></em> [, <em><code>var_name</code></em>]]
[FOR UPDATE | LOCK IN SHARE MODE]]
</pre>

<a href="#select"><code>SELECT</code></a>
используется, чтобы получить строки, выбранные из одной или более таблиц, и
может включать <a href="#union"><code>UNION</code></a> и подзапросы.
См. разделы <a href="#union">14.2.9.3</a> и
<a href="#subqueries">14.2.10</a>.</p>

<p>Обычно используемые параметры
<a href="#select"><code>SELECT</code></a>:</p>
<ul><li><p>Каждый <em><code>select_expr</code></em>
указывает на столбец, который Вы хотите получить. Должен быть по крайней
мере один <em><code>select_expr</code></em>.</li>

<li><em><code>table_references</code></em> указывает на таблицу или таблицы,
из которых нужно получить строки. Его синтаксис описан в
<a href="#join">разделе 14.2.9.2</a>.</li>

<li><code>SELECT</code> поддерживает явный выбор раздела, используя
<code>PARTITION</code> со списком разделов или подраздов (или обоих) после
названия таблицы в <em><code>table_reference</code></em> (см.
<a href="#join">раздел 14.2.9.2</a>). В этом случае строки выбраны
только из перечисленного раздела, и любой другой раздел таблицы
проигнорирован. Для получения дополнительной информации и примеров см.
<a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p><code>SELECT ... PARTITION</code> от таблиц, используя механизмы хранения
вроде <a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>,
который выполняет блокировки на уровне таблицы (и таким образом блокировки
разделов), блокирует только разделы или подразделы,
названные в опции <code>PARTITION</code>.</p>

<p>См. <a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</li>
<li><code>WHERE</code>, если есть, указывает на условие или условия, которым
строки должны удовлетворять, чтобы быть выбранными.
<em><code>where_condition</code></em> выражение, которое оценивается
к истине для каждой строки, которая будет выбрана. Запрос выбирает все
строки, если нет <code>WHERE</code>.</p>

<p>В <code>WHERE</code> Вы можете использовать любую из функций и операторов,
которые MySQL поддерживает, за исключением совокупных (итоговых) функций. См.
<a href="lang.htm#expressions">раздел 10.5</a> и
<a href="funct.htm">главу 13</a>.</p></li></ul>

<p><a href="#select"><code>SELECT</code></a>
может также использоваться, чтобы получить строки, вычисленные независимо
от любой таблицы.</p>

<p>Например:
<pre>
mysql&gt; SELECT 1 + 1;
    -&gt; 2
</pre>

Вам разрешают определить <code>DUAL</code> как фиктивное имя таблицы в
ситуациях, где ни на какие таблицы не ссылаются:
<pre>
mysql&gt; SELECT 1 + 1 FROM DUAL;
    -&gt; 2
</pre>

<code>DUAL</code> просто для удобства людей, которые требуют, что все
запросы <a href="#select"><code>SELECT</code></a>
должны иметь <code>FROM</code> и, возможно, другие параметры. MySQL
может проигнорировать параметры. MySQL не требует <code>FROM DUAL</code>,
если ни на какие таблицы не ссылаются.</p>

<p>Вообще, используемые пункты должны быть поданы точно в порядке, показанном
в описании синтаксиса. Например, <code>HAVING</code> должен быть после любого
<code>GROUP BY</code> и перед любым <code>ORDER BY</code>.
Исключение то, что <code>INTO</code> может появиться как показано в описании
синтаксиса или немедленно после списка <em><code>select_expr</code></em>.
См. <a href="#select-into">раздел 14.2.9.1</a>.</p>

<p>Список <em><code>select_expr</code></em> включают избранный список,
который указывает, которые столбцы получить. Это определяет столбец или
выражение или может использовать <code>*</code>-сокращения:</p>

<ul><li><p>Список, состоящий только из <code>*</code>
может использоваться, чтобы выбрать все столбцы из всех таблиц:
<pre>
SELECT * FROM t1 INNER JOIN t2 ...
</pre></li>

<li><code><em><code>tbl_name</code></em>.*</code>
может использоваться, чтобы выбрать все столбцы из названной таблицы:
<pre>
SELECT t1.*, t2.* FROM t1 INNER JOIN t2 ...
</pre></li>

<li>Использование <code>*</code> с другими элементами в избранном списке
может произвести ошибку разбора. Чтобы избежать этой проблемы, используйте
<code><em><code>tbl_name</code></em>.*</code>:
<pre>
SELECT AVG(score), t1.* FROM t1 ...
</pre></li></ul>

<p>Следующий список обеспечивает дополнительную информацию о
других параметрах <code>SELECT</code>:</p>
<ul><li><p><em><code>select_expr</code></em> может быть дан использованием
псевдонима <code>AS <em><code>alias_name</code></em></code>.
Псевдоним используется в качестве имени столбца выражения и может
использоваться в <code>GROUP BY</code>,
<code>ORDER BY</code> или <code>HAVING</code>:
<pre>
SELECT CONCAT(last_name,', ',first_name) AS full_name
       FROM mytable ORDER BY full_name;
</pre>

<code>AS</code> является дополнительным, когда совмещение имен
<em><code>select_expr</code></em> с идентификатором. Предыдущий пример может
быть написан так:
<pre>
SELECT CONCAT(last_name,', ',first_name) full_name
       FROM mytable ORDER BY full_name;
</pre>

Однако, потому что <code>AS</code> является дополнительным, тонкая проблема
может произойти, если Вы забываете запятую между двумя
<em><code>select_expr</code></em>: MySQL интерпретирует второе как имя
псевдонима. Например, в следующем запросе, <code>columnb</code>
обработан как имя псевдонима:
<pre>
SELECT columna columnb FROM mytable;
</pre>
Поэтому хорошая практика иметь привычку использовать
<code>AS</code> явно, определяя псевдонимы столбца.</p>

<p>Недопустимо обратиться к псевдониму столбца в <code>WHERE</code>,
потому что значение столбца еще не могло бы быть определено, когда
<code>WHERE</code> выполнен, см.
<a href="error.htm#problems-with-alias">раздел B.5.4.4</a>.</li>

<li><code>FROM <em><code>table_references</code></em></code>
указывает на таблицу или таблицы, из которых можно получить строки. Если Вы
называете больше, чем одну таблицу, Вы выполняете соединение. Для информации
о синтаксисе соединения см. <a href="#join">раздел 14.2.9.2</a>.
Для каждой определенной таблицы Вы можете произвольно определить псевдоним.
<pre>
<em><code>tbl_name</code></em> [[AS] <em><code>alias</code></em>] [<em><code>index_hint</code></em>]
</pre>

<p>Использование индексной подсказки предоставляет оптимизатору информацию о
том, как выбрать индекс во время обработки запроса. Для описания синтаксиса,
чтобы определить эти подсказки см. <a href="optimiz.htm#index-hints">раздел
9.9.4</a>.</p>

<p>Вы можете использовать <code>SET
max_seeks_for_key=<em><code>value</code></em></code>
как альтернативный способ вынудить MySQL предпочесть просмотр ключей вместо
сканирования таблицы. См. <a href="server.htm#server-system-variables">раздел
6.1.5</a>.</li>

<li>Вы можете обратиться к таблице в пределах базы данных по умолчанию как
<em><code>tbl_name</code></em> или как
<em><code>db_name</code></em>.<em><code>tbl_name</code></em>,
чтобы определить базу данных явно. Вы можете обратиться к столбцу как
<em><code>col_name</code></em>,
<em><code>tbl_name</code></em>.<em><code>col_name</code></em> или
<em><code>db_name</code></em>.<em><code>tbl_name</code></em>.<em>
<code>col_name</code></em>. Вы не должны определить префикс
<em><code>tbl_name</code></em> или <em><code>db_name</code></em>.<em><code>
tbl_name</code></em> для ссылки на столбец, если ссылка не была бы
неоднозначна. См. <a href="lang.htm#identifier-qualifiers">раздел 10.2.1</a>.
</li>

<li>Табличная ссылка может быть псевдонимом с использованием
<code><em><code>tbl_name</code></em> AS
<em><code>alias_name</code></em></code> или
<em><code>tbl_name alias_name</code></em>:
<pre>
SELECT t1.name, t2.salary FROM employee AS t1, info AS t2
       WHERE t1.name = t2.name;
SELECT t1.name, t2.salary FROM employee t1, info t2
       WHERE t1.name = t2.name;
</pre></li>

<li>Столбцы, выбранные для вывода, могут быть упомянуты в
<code>ORDER BY</code> и <code>GROUP BY</code>,
используя имена столбцов, псевдонимы столбца или позиции столбца. Позиции
столбца это целые числа и начинаются с 1:
<pre>
SELECT college, region, seed FROM tournament ORDER BY region, seed;
SELECT college, region AS r, seed AS s FROM tournament ORDER BY r, s;
SELECT college, region, seed FROM tournament ORDER BY 2, 3;
</pre>

Чтобы сортировать в обратном порядке, добавьте <code>DESC</code>
к названию столбца в <code>ORDER BY</code>, которым Вы сортируете. Значение
по умолчанию: порядок по возрастанию, это может быть определено
явно, используя <code>ASC</code>.</p>

<p>Если <code>ORDER BY</code> происходит в пределах подзапроса и также
применен во внешнем запросе, наиболее удаленный <code>ORDER BY</code>
имеет приоритет. Например, результаты следующего запроса отсортированы в
порядке убывания, а не по возрастанию:
<pre>
(SELECT ... ORDER BY a) ORDER BY a DESC;
</pre>
Использование позиций столбца устарело, потому что синтаксис был удален
из стандарта SQL.</li>

<li>Если Вы используете <code>GROUP BY</code>, выходные строки сортированы
согласно <code>GROUP BY</code>, как будто Вы имели <code>ORDER BY</code> для
тех же самых столбцов. Чтобы избегать повторной сортировки
этого <code>GROUP BY</code>, добавьте <code>ORDER BY NULL</code>:
<pre>
SELECT a, COUNT(b) FROM test_table GROUP BY a ORDER BY NULL;
</pre>

Доверие неявному <code>GROUP BY</code> в MySQL 8.0 устарело.
Чтобы достигнуть определенного порядка сортировки сгруппированных
результатов, предпочтительно использовать явное <code>ORDER BY</code>.
Сортировка <code>GROUP BY</code> это расширение MySQL, которое может
измениться в будущем выпуске, например, чтобы позволить оптимизатору
упорядочить группировки в любой манере, которую он считает самой эффективной
и избегать издержек сортировки.</li>

<li>MySQL расширяет <code>GROUP BY</code>
так, чтобы Вы могли также определить <code>ASC</code> и <code>DESC</code>
после того, как назвали столбцы:
<pre>
SELECT a, COUNT(b) FROM test_table GROUP BY a DESC;
</pre></li>

<li>MySQL расширяет использование <code>GROUP BY</code>, чтобы разрешить
выбирать области, которые не упомянуты в <code>GROUP BY</code>.
Если Вы не получаете результаты, которые Вы ожидаете от своего запроса,
читайте описание <code>GROUP BY</code>
<a href="funct.htm#group-by-functions-and-modifiers">разделе 13.19</a>.</li>

<li><code>GROUP BY</code> позволяет модификатор <code>WITH ROLLUP</code>.
См. <a href="funct.htm#group-by-modifiers">раздел 13.19.2</a>.</li>
<li><code>HAVING</code> применен почти последним, непосредственно
перед тем, как элементы посылают клиенту, без оптимизации. <code>LIMIT</code>
применен после <code>HAVING</code>.</p>

<p>SQL требует, что <code>HAVING</code> должен сослаться только на столбцы в
<code>GROUP BY</code> или столбцы, которые используются в совокупных
функциях. Однако, MySQL поддерживает расширение к этому поведению и разрешает
<code>HAVING</code> обратиться к столбцам в
<a href="#select"><code>SELECT</code></a>
и столбцам во внешних подзапросах также.</p>

<p>Если <code>HAVING</code> относится к столбцу, который неоднозначен,
предупреждение происходит. В следующем запросе <code>col2</code>
неоднозначно, потому что это используется в качестве псевдонима и в
качестве имени столбца:
<pre>
SELECT COUNT(col1) AS col2 FROM t GROUP BY col2 HAVING col2 = 2;
</pre>

Предпочтение отдано стандартному поведению SQL, так если
имя столбца <code>HAVING</code> используется в <code>GROUP BY</code> и как
псевдоним столбца в выходном списке столбца, предпочтение отдано
столбцу в <code>GROUP BY</code>.</li>

<li>Не надо использовать <code>HAVING</code> для элементов, которые должны
быть в <code>WHERE</code>. Например, не пишите следующее:
<pre>
SELECT <em><code>col_name</code></em> FROM <em><code>tbl_name</code></em>
       HAVING <em><code>col_name</code></em> &gt; 0;
</pre>

Пишите это так:
<pre>
SELECT <em><code>col_name</code></em> FROM <em><code>tbl_name</code></em>
       WHERE <em><code>col_name</code></em> &gt; 0;
</pre></li>

<li><code>HAVING</code> может отнестись к совокупным функциям, которые
<code>WHERE</code> не может:
<pre>
SELECT user, MAX(salary) FROM users GROUP BY user HAVING MAX(salary) &gt; 10;
</pre>
Это не работало в некоторых более старых версиях MySQL.</li>

<li>MySQL разрешает дублировать имена столбцов. Таким образом, может быть
больше, чем один <em><code>select_expr</code></em>
с тем же самым именем. Это расширение к стандартному SQL. Поскольку MySQL
также разрешает <code>GROUP BY</code> и <code>HAVING</code> обратиться к
<em><code>select_expr</code></em>, это может привести к двусмысленности:
<pre>
SELECT 12 AS a, a FROM t GROUP BY a;
</pre>

В этом запросе у обоих столбцов есть имя <code>a</code>. Чтобы гарантировать,
что правильный столбец используется для того, чтобы сгруппировать,
используйте различные имена для каждого <em><code>select_expr</code></em>.
</li>

<li>MySQL разрешает неквалифицированный столбец или ссылки псевдонима в
<code>ORDER BY</code> ища в <em><code>select_expr</code></em>,
затем в столбцах таблиц в <code>FROM</code>.
Для <code>GROUP BY</code> или <code>HAVING</code>
это ищет <code>FROM</code> прежде, чем искать в
<em><code>select_expr</code></em>. Для <code>GROUP BY</code> и
<code>HAVING</code> это отличается от pre-MySQL 5.0, которые использовали те
же самые правила, что касаются <code>ORDER BY</code>.</li>

<li><code>LIMIT</code> может использоваться, чтобы ограничить число строк,
возвращенных <a href="#select"><code>SELECT</code></a>.
<code>LIMIT</code> берет один или два числовых параметра, которые должны оба
быть неотрицательными константами целого числа, с этими исключениями:</p>

<ul><li><p>В пределах готовых запросов <code>LIMIT</code> параметры могут
быть определены, используя маркеры заполнителя <code>?</code>.</li>
<li>В пределах сохраненных программ <code>LIMIT</code>
параметры могут быть определены, используя оцененные к целому числу
обычные параметры или местные переменные.</p></li></ul>

<p>С двумя параметрами первый параметр определяет смещение первой строки,
чтобы возвратить, второе определяет максимальное количество строк, чтобы
возвратить. Смещение начальной строки 0 (не 1):
<pre>
SELECT * FROM tbl LIMIT 5,10;  # Вернет строки 6-15
</pre>

Чтобы получить все строки от определенного смещения до конца набора
результатов, Вы можете использовать некоторое большое количество для второго
параметра. Это запрос получает все строки от 96-ой строки до последней:
<pre>
SELECT * FROM tbl LIMIT 95,18446744073709551615;
</pre>

С одним параметром значение определяет число строк, чтобы возвратить
с начала набора результатов:
<pre>
SELECT * FROM tbl LIMIT 5; # Вернет первые 5 строк
</pre>
Другими словами, <code>LIMIT <em><code>row_count</code></em></code>
эквивалентно <code>LIMIT 0, <em><code>row_count</code></em></code>.</p>

<p>Для готовых запросов Вы можете использовать заполнители. Следующие
запросы возвратят одну строку из <code>tbl</code>:
<pre>
SET @a=1;
PREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?';
EXECUTE STMT USING @a;
</pre>

Следующие запросы возвратят строки 2-6 из <code>tbl</code>:
<pre>
SET @skip=1; SET @numrows=5;
PREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?, ?';
EXECUTE STMT USING @skip, @numrows;
</pre>

Для совместимости с PostgreSQL MySQL также поддерживает синтаксис
<code>LIMIT <em><code>row_count</code></em> OFFSET
<em><code>offset</code></em></code>.</p>

<p>Если <code>LIMIT</code> происходит в пределах подзапроса и также применен
во внешнем запросе, наиболее удаленный <code>LIMIT</code>
имеет приоритет. Например, следующий запрос производит две строки, не одну:
<pre>
(SELECT ... LIMIT 1) LIMIT 2;
</pre></li>

<li><code>PROCEDURE</code> вызывает процедуру, которая должна обработать
данные в наборе результатов. Для примера см.
<a href="optimiz.htm#procedure-analyse">раздел 9.4.2.4</a>,
который описывает <code>ANALYSE</code>, процедуру, которая может
использоваться, чтобы получить предложения для оптимальных типов данных
столбца, которые могут помочь уменьшить табличные размеры.</p>

<p><code>PROCEDURE</code> не разрешен в
<a href="#union"><code>UNION</code></a>.</li>
<li><a href="#select-into"><code>SELECT ... INTO</code></a>
позволяет результату запроса быть записанным в файл или сохранится в
переменных. Для получения дополнительной информации см.
<a href="#select-into">раздел 14.2.9.1</a>.</li>

<li>Если Вы используете <code>FOR UPDATE</code> с механизмом хранения,
который использует блокировку страницы или строки, строки, исследованные
запросом, блокированы на запись до конца текущей транзакции. Использование
<code>LOCK IN SHARE MODE</code> устанавливает совместно используемую
блокировку, которая разрешает другим транзакциям читать исследованные строки,
но не обновлять или удалять их. См. <a href="innodb.htm#innodb-locking-reads">
раздел 16.5.2.4</a>.</p>

<p>Кроме того, Вы не можете использовать <code>FOR UPDATE</code> как часть
<a href="#select"><code>SELECT</code></a> в таком запросе, как
<a href="#create-table-select"><code>CREATE
TABLE <em><code>new_table</code></em> SELECT ... FROM
<em><code>old_table</code></em> ...</code></a>.
Если Вы пытаетесь сделать так, запрос отклонен с ошибкой
<span>Can't update table '<em><code>old_table</code></em>' while
'<em><code>new_table</code></em>' is being created</span>.
Это изменение в поведении MySQL 5.5 и ранее, который разрешал
<a href="#create-table-select"><code>CREATE TABLE ... SELECT</code>
</a>, чтобы произвести изменения в таблицах кроме составленной таблицы.
</p></li></ul>

<p>После <a href="#select"><code>SELECT</code></a>
Вы можете использовать много опций, которые затрагивают работу запроса.
<code>HIGH_PRIORITY</code>, <code>MAX_STATEMENT_TIME</code>,
<code>STRAIGHT_JOIN</code> и опции <code>SQL_</code> это
расширения MySQL к стандартному SQL.</p>

<ul><li><p><code>ALL</code> и <code>DISTINCT</code>
определяют, должны ли дублирующиеся строки быть возвращены.
<code>ALL</code> (значение по умолчанию), определяет, что все строки
соответствия должны быть возвращены, включая дубликаты.
<code>DISTINCT</code> определяет удаление дублирующихся строк из набора
результатов. Ошибка определить обе опции.
<code>DISTINCTROW</code> синоним для <code>DISTINCT</code>.</li>

<li><code>HIGH_PRIORITY</code> дает <a href="#select"><code>SELECT
</code></a> более высокий приоритет, чем запросу, который обновляет таблицу.
Вы должны использовать это только для запросов, которые очень быстры и должны
быть сделаны сразу. <code>SELECT HIGH_PRIORITY</code>
блокирует таблицу для чтения, даже если есть запрос обновления, ждущий
таблицу. Это затрагивает только механизмы хранения, которые используют только
блокировку на уровне таблицы
(<code>MyISAM</code>, <code>MEMORY</code> и <code>MERGE</code>).</p>

<p><code>HIGH_PRIORITY</code> не может использоваться с
<a href="#select"><code>SELECT</code></a>,
которые являются частью <a href="#union"><code>UNION</code></a>.</li>

<li><code>STRAIGHT_JOIN</code> вынуждает оптимизатор присоединять таблицы в
порядке, в котором они перечислены в <code>FROM</code>.
Вы можете использовать это, чтобы ускорить запрос, если оптимизатор
присоединяет таблицы в неоптимальном порядке.
<code>STRAIGHT_JOIN</code> также может использоваться в
<em><code>table_references</code></em>. См.
<a href="#join">раздел 14.2.9.2</a>.</p>

<p><code>STRAIGHT_JOIN</code> не относится ни к какой таблице, которую
оптимизатор обрабатывает как <a href="optimiz.htm#jointype_const"><code>
const</code></a> или <a href="optimiz.htm#jointype_system"><code>system
</code></a>. Такая таблица производит единственную строку, считанную во время
фазы оптимизации выполнения запроса, и ссылки на ее столбцы заменены
соответствующими значениями столбцов прежде, чем выполнение запроса
продолжится. Эти таблицы будут казаться первыми в плане запроса, выведенном
на экран <a href="#explain"><code>EXPLAIN</code></a>. См.
<a href="optimiz.htm#using-explain">раздел 9.8.1</a>.
Это исключение, возможно, не относится к таблицам
<a href="optimiz.htm#jointype_const"><code>const</code></a> или
<a href="optimiz.htm#jointype_system"><code>system</code></a>, которые
используются на <code>NULL</code>-стороне
внешнего соединения (то есть, таблица правой стороны в <code>LEFT JOIN</code>
или таблица левой стороны в <code>RIGHT JOIN</code>.</li>

<li><code>SQL_BIG_RESULT</code> или <code>SQL_SMALL_RESULT</code>
может использоваться с <code>GROUP BY</code> или <code>DISTINCT</code>, чтобы
сказать оптимизатору, что набор результатов имеет много строк или является
небольшим, соответственно. Для <code>SQL_BIG_RESULT</code> MySQL
непосредственно использует основанные на диске временные таблицы, если нужно,
и предпочитает сортировать с использованием временной таблицы с ключом
элементы <code>GROUP BY</code>. Для <code>SQL_SMALL_RESULT</code> MySQL
использует быстрые временные таблицы, чтобы сохранить получающуюся таблицу
вместо того, чтобы использовать сортировку. Это не должно
обычно быть необходимо.</li>

<li><code>SQL_BUFFER_RESULT</code> вынуждает результат быть помещенным во
временную таблицу. Это помогает MySQL освободить табличные блокировки рано и
помогает в случаях, где требуется много времени, чтобы послать набор
результатов клиенту. Эта опция может использоваться только для верхнего
уровня <a href="#select"><code>SELECT</code></a>, не для подзапросов
или после <a href="#union"><code>UNION</code></a>.</li>

<li><code>SQL_CALC_FOUND_ROWS</code> говорит MySQL вычислять сколько строк
было бы в наборе результатов, игнорируя любой <code>LIMIT</code>.
Число строк может тогда быть получено с <code>SELECT FOUND_ROWS()</code>. См.
<a href="funct.htm#information-functions">раздел 13.14</a>.</li>

<li><code>SQL_CACHE</code> и <code>SQL_NO_CACHE</code>
влияют на кэширование результатов запроса в кэше запроса (см.
<a href="optimiz.htm#query-cache">раздел 9.10.3</a>). <code>SQL_CACHE</code>
говорит MySQL хранить результат в кэше запроса, если это кэшируемо и значение
<a href="server.htm#sysvar_query_cache_type"><code>query_cache_type</code>
</a> <code>2</code> или <code>DEMAND</code>. С <code>SQL_NO_CACHE</code>
сервер не использует кэш запроса. Это не проверяет кэш запроса, чтобы видеть,
кэшировал ли результат уже, и при этом не кэширует результат запроса.</p>

<p>Эти две опции являются взаимоисключающими, и ошибка происходит, если они
обе определены. Кроме того, эти опции не разрешены в подзапросах (включая
подзапросы в <code>FROM</code>), и <a href="#select"><code>SELECT
</code></a> в объединениях кроме первого
<a href="#select"><code>SELECT</code></a>.</p>

<p>Для представлений <code>SQL_NO_CACHE</code>
применяется, если это появляется в каком-либо
<a href="#select"><code>SELECT</code></a> в запросе. Для кэшируемого
запроса <code>SQL_CACHE</code> применяется, если это появляется в первом
<a href="#select"><code>SELECT</code></a>
из представления, упомянутого запросом.</p></li></ul>

<p>В MySQL 8.0 <code>SELECT</code> из разделенной таблицы, используя такой
механизм хранения, как <a href="storage.htm#myisam-storage-engine"><code>
MyISAM</code></a>, блокируется только раздел, содержащий строки, которые
соответствуют параметру <code>WHERE</code> в <code>SELECT</code>.
Это не происходит с механизмами хранения вроде <a href="innodb.htm"><code>
InnoDB</code></a>, которые используют блокировку на уровне строки. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h4><a name="select-into"></a>14.2.9.1. SELECT ... INTO</h4>
<p><a href="#select-into"><code>SELECT ... INTO</code></a>
позволяет результату запроса быть сохраненным в переменных или файле:</p>

<ul><li><p><code>SELECT ... INTO <em><code>var_list</code></em></code>
выбирает значения столбцов и хранит их в переменных.</li>
<li><code>SELECT ... INTO OUTFILE</code> пишет выбранные строки в файл.
Столбец и разделители строки могут быть определены, чтобы произвести
определенный выходной формат.</li>
<li><code>SELECT ... INTO DUMPFILE</code> пишет
единственную строку в файл без форматирования.</p></li></ul>

<p><a href="#select"><code>SELECT</code></a>
(см. <a href="#select">раздел 14.2.9</a>) показывает <code>INTO</code>
около конца запроса. Также возможно использовать <code>INTO</code> немедленно
после <em><code>select_expr</code></em>.</p>

<p><code>INTO</code> не должен использоваться во вложенном
<a href="#select"><code>SELECT</code></a> потому что такой
<a href="#select"><code>SELECT</code></a>
должен возвратить его результат к внешнему контексту.</p>

<p><code>INTO</code> может назвать список из одной или более переменных,
которые могут быть определяемыми пользователем переменными, параметрами
хранимой процедуры или функции или местными переменными сохраненной
программы. В пределах готового <code>SELECT ... INTO OUTFILE</code>
только определяемые пользователем переменные разрешены, см.
<a href="#local-variable-scope">раздел 14.6.4.2</a>.</p>

<p>Выбранные значения назначены на переменные. Число переменных должно
соответствовать числу столбцов. Запрос должен возвратить единственную строку.
Если запрос не возвращает строк, происходит предупреждение с кодом ошибки
1329 (<code>No data</code>), и значения переменных остаются неизменными. Если
запрос возвращает много строк, происходит ошибка (<code>Result consisted of
more than one row</code>). Если возможно, что запрос может получить много
строк, Вы можете использовать <code>LIMIT 1</code>, чтобы
ограничить набор результатов единственной строкой.
<pre>
SELECT id, data INTO @x, @y FROM test.t1 LIMIT 1;
</pre>
Пользовательские имена переменных не являются чувствительными к регистру. См.
<a href="lang.htm#user-variables">раздел 10.4</a>.</p>

<p><a href="#select-into"><code>SELECT ... INTO
OUTFILE '<em><code>file_name</code></em>'</code></a>
пишет выбранные строки в файл. Файл создается на сервере, таким образом, Вы
должны иметь привилегию <a href="security.html#priv_file"><code>FILE</code>
</a>. <em><code>file_name</code></em> не может быть существующим файлом.
<a href="server.htm#sysvar_character_set_filesystem"><code>
character_set_filesystem</code></a>
управляет интерпретацией имени файла.</p>

<p><a href="#select-into"><code>SELECT ... INTO OUTFILE</code></a>
предназначено прежде всего, чтобы позволить Вам очень быстро выводить таблицу
в текстовый файл на машине сервера. Если Вы хотите создать получающийся файл
на некотором другом хосте, чем сервер, Вы обычно не можете использовать
<a href="#select-into"><code>SELECT ... INTO OUTFILE</code></a>.</p>

<p>Однако, если клиентское программное обеспечение MySQL установлено на
удаленной машине, Вы можете вместо этого использовать команду клиента
<code>mysql -e "SELECT ..." &gt; <em><code>file_name</code></em></code>,
чтобы произвести файл на хосте клиента.</p>

<p>Также возможно создать получающийся файл на ином хосте
кроме сервера, если к местоположению файла на удаленном хосте можно получить
доступ, используя отображенный на сеть путь в файловой системе сервера. В
этом случае присутствие <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a> не требуется на целевом хосте.</p>

<p><a href="#select-into"><code>SELECT ... INTO OUTFILE</code></a>
дополнение <a href="#load-data"><code>LOAD DATA INFILE</code></a>.
Значения столбцов записаны преобразованными в набор символов, определенный в
<code>CHARACTER SET</code>. Если никакой такой пункт не присутствует,
значения выведены, используя <code>binary</code>.
В действительности нет никакого преобразования набора символов. Если набор
результатов будет содержать столбцы в нескольких наборах символов, то файл
выходных данных будет такой же, и Вы не можете перезагрузить файл правильно.
</p>

<p>Синтаксис для <em><code>export_options</code></em>
состоит из тех же самых
<code>FIELDS</code> и <code>LINES</code> из
<a href="#load-data"><code>LOAD DATA INFILE</code></a>. См.
<a href="#load-data">раздел 14.2.6</a>.</p>

<p><code>FIELDS ESCAPED BY</code> управляет, как написать специальные
символы. Если <code>FIELDS ESCAPED BY</code> не пуст, он используется, когда
необходимо избежать двусмысленности как префикс, который предшествует
следующим символам в выводе:</p>

<ul><li><p><code>FIELDS ESCAPED BY</code>.</li>
<li><code>FIELDS [OPTIONALLY] ENCLOSED BY</code>.</li>
<li>Первый символ <code>FIELDS TERMINATED BY</code> и
<code>LINES TERMINATED BY</code>.</li>
<li>ASCII <code>NUL</code> (нулевой байт, то, что фактически написано после
символа ESC, является ASCII <code>0</code>).</p></li></ul>

<p><code>FIELDS TERMINATED BY</code>, <code>ENCLOSED BY</code>,
<code>ESCAPED BY</code> или <code>LINES TERMINATED BY</code>
<span><em>нужно</em></span> экранировать, чтобы Вы могли читать файл назад.
</p>

<p>Получающийся файл не должен соответствовать синтаксису SQL, таким
образом, ничто иное не должно быть экранировано.</p>
<p>Если <code>FIELDS ESCAPED BY</code> символ пуст, никакие символы не
экранируются, <code>NULL</code> в выводе будет
<code>NULL</code>, не <code>\N</code>. Вероятно, не хорошая идея определить
пустой символ ESC, особенно если значения полей в Ваших данных содержат
какой-либо из символов в списке.</p>

<p>Вот пример, который производит файл с отделенными запятыми значениями
(формат CSV), используемый многими программами:
<pre>
SELECT a, b, a+b INTO OUTFILE '/tmp/result.txt'
       FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
       LINES TERMINATED BY '\n' FROM test_table;
</pre>

<p>Если Вы используете <code>INTO DUMPFILE</code> вместо
<code>INTO OUTFILE</code>, MySQL пишет только одну строку в файл, без любого
столбца или завершения строки и не выполняя обработки escape. Это полезно,
если Вы хотите сохранить <a href="types.htm#blob"><code>BLOB</code>
</a> в файл.</p>

<p>Любой файл, создаваемый <code>INTO OUTFILE</code> или
<code>INTO DUMPFILE</code> перезаписываем всеми пользователями на сервере.
Причина этого состоит в том, что сервер MySQL не может создать файл, который
принадлежит никому, кроме пользователя, от учетной записи которого он
работает. Вы никогда не должны выполнять <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> как <code>root</code>.
Файл таким образом должен быть перезаписываемым всеми, чтобы Вы могли
управлять его содержанием.</p>

<p>Если <a href="server.htm#sysvar_secure_file_priv"><code>secure_file_priv
</code></a> установлена в непустое имя каталога, файл, который будет написан,
должен быть расположен в том каталоге.</p>

<p>В контексте <a href="#select-into"><code>SELECT ... INTO</code></a>
запросы, которые происходят как часть событий, запущенных Планировщиком
Событий, сообщения диагностики (не только ошибки, но также и предупреждения)
написаны в журнал ошибок и в Windows в журнал событий приложения. Для
дополнительной информации см. <a href="stored.htm#events-status-info">раздел
21.4.5</a>.</p>

<h4><a name="join"></a>14.2.9.2. JOIN</h4>
<p>MySQL поддерживает следующие синтаксисы <code>JOIN</code> для
части <em><code>table_references</code></em> в
<a href="#select"><code>SELECT</code></a> и мультитабличных
<a href="#delete"><code>DELETE</code></a> и
<a href="#update"><code>UPDATE</code></a>:
<pre>
<em><code>table_references:</code></em>
<em><code>escaped_table_reference</code></em> [, <em><code>escaped_table_reference</code></em>] ...

<em><code>escaped_table_reference</code></em>:
<em><code>table_reference</code></em>
  | { OJ <em><code>table_reference</code></em> }

<em><code>table_reference</code></em>:
<em><code>table_factor</code></em>
  | <em><code>join_table</code></em>

<em><code>table_factor</code></em>:
<em><code>tbl_name</code></em> [PARTITION (<em><code>partition_names</code></em>)]
[[AS] <em><code>alias</code></em>] [<em><code>index_hint_list</code></em>]
  | <em><code>table_subquery</code></em> [AS] <em><code>alias</code></em>
  | ( <em><code>table_references</code></em> )

<em><code>join_table</code></em>:
<em><code>table_reference</code></em> [INNER | CROSS] JOIN <em><code>table_factor</code></em>
  [<em><code>join_condition</code></em>]
  | <em><code>table_reference</code></em> STRAIGHT_JOIN <em><code>table_factor</code></em>
  | <em><code>table_reference</code></em> STRAIGHT_JOIN <em><code>table_factor</code></em>
    ON <em><code>conditional_expr</code></em>
  | <em><code>table_reference</code></em> {LEFT|RIGHT} [OUTER] JOIN
    <em><code>table_reference</code></em> <em><code>join_condition</code></em>
  | <em><code>table_reference</code></em> NATURAL [INNER | {LEFT|RIGHT} [OUTER]]
    JOIN <em><code>table_factor</code></em>

<em><code>join_condition</code></em>:
ON <em><code>conditional_expr</code></em>
  | USING (<em><code>column_list</code></em>)

<em><code>index_hint_list</code></em>:
<em><code>index_hint</code></em> [, <em><code>index_hint</code></em>] ...

<em><code>index_hint</code></em>:
USE {INDEX|KEY}
  [FOR {JOIN|ORDER BY|GROUP BY}] ([<em><code>index_list</code></em>])
  | IGNORE {INDEX|KEY}
  [FOR {JOIN|ORDER BY|GROUP BY}] (<em><code>index_list</code></em>)
  | FORCE {INDEX|KEY}
  [FOR {JOIN|ORDER BY|GROUP BY}] (<em><code>index_list</code></em>)

<em><code>index_list</code></em>:
<em><code>index_name</code></em> [, <em><code>index_name</code></em>] ...
</pre>
Табличная ссылка также известна как выражение соединения.</p>

<p>Табличная ссылка (когда это обращается к разделенной таблице) может
содержать <code>PARTITION</code>, включая список разделенных запятой значений
разделов. Эта опция следует за названием таблицы и предшествует любой
декларации псевдонима. Эффект этой опции состоит в том, что строки выбраны
только из перечисленного раздела. Другими словами, любой раздел или
подраздел, не названный в списке, проигнорирован. Для получения
дополнительной информации см. <a href="partit.htm#partitioning-selection">
раздел 20.5</a>.</p>

<p>Синтаксис <em><code>table_factor</code></em> расширен по сравнению со
стандартом SQL. Последний принимает только <em><code>table_reference</code>
</em>, а не список в круглых скобках.</p>

<p>Это консервативное расширение, если мы рассматриваем каждую запятую в
списке <em><code>table_reference</code></em>
как эквивалент внутреннему соединению. Например:
<pre>
SELECT * FROM t1 LEFT JOIN (t2, t3, t4) ON (t2.a=t1.a AND t3.b=t1.b AND
         t4.c=t1.c)
</pre>

аналогично вот этому:
<pre>
SELECT * FROM t1 LEFT JOIN (t2 CROSS JOIN t3 CROSS JOIN t4) ON
         (t2.a=t1.a AND t3.b=t1.b AND t4.c=t1.c)
</pre>

В MySQL <code>JOIN</code>, <code>CROSS JOIN</code> и <code>INNER JOIN</code>
синтаксические эквиваленты (они могут заменить друг друга). В стандартном SQL
они не эквивалентны. <code>INNER JOIN</code> используется с
<code>ON</code>, <code>CROSS JOIN</code> иначе.</p>

<p>Вообще, круглые скобки могут быть проигнорированы в выражениях соединения,
содержащих только внутренние операции соединения. MySQL также поддерживает
вложенные соединения (см. <a href="optimiz.htm#nested-join-optimization">
раздел 9.2.1.11</a>).</p>

<p>Индексные подсказки могут быть определены, чтобы затронуть, как
оптимизатор MySQL использует индекс. Для получения дополнительной информации
см. <a href="optimiz.htm#index-hints">раздел 9.9.4</a>.</p>

<p>Следующий список описывает общие факторы, чтобы принять во внимание
при написании соединений.</p>
<ul><li><p>Табличная ссылка может быть использованием псевдонима
<code><em><code>tbl_name</code></em> AS
<em><code>alias_name</code></em></code> или
<em><code>tbl_name alias_name</code></em>:
<pre>
SELECT t1.name, t2.salary
       FROM employee AS t1 INNER JOIN info AS t2 ON t1.name = t2.name;
SELECT t1.name, t2.salary
       FROM employee t1 INNER JOIN info t2 ON t1.name = t2.name;
</pre></li>

<li><em><code>table_subquery</code></em> также известен как подзапрос в
<code>FROM</code>. Такие подзапросы <span><em>должны</em></span> включать
псевдоним, чтобы дать результату подзапроса имя таблицы. Тривиальный пример
следует, см. также <a href="#from-clause-subqueries">раздел 14.2.10.8
</a>.
<pre>
SELECT * FROM (SELECT 1, 2, 3) AS t1;
</pre></li>

<li><code>INNER JOIN</code> и запятая (<code>,</code>)
семантически эквивалентны в отсутствие условия соединения: оба производят
объединение между указанными таблицами (то есть, каждая строка в первой
таблице соединена с каждой строкой во второй таблице).</p>

<p>Однако, приоритет оператора запятой меньше, чем
<code>INNER JOIN</code>, <code>CROSS JOIN</code>, <code>LEFT JOIN</code> и
и т.д. Если Вы смешиваете соединения запятой с другими типами соединения,
когда есть условие соединения, может произойти ошибка формы
<code>Unknown column '<em><code>col_name</code></em>' in 'on clause'</code>.
Информация о контакте с этой проблемой дана позже в этом разделе.</li>

<li><em><code>conditional_expr</code></em>, используемый с <code>ON</code>,
это любое условное выражение формы, которая может использоваться в
<code>WHERE</code>. Вообще Вы должны использовать <code>ON</code> для
условий, которые определяют, как присоединиться к таблицам, и
<code>WHERE</code>, чтобы ограничить, какие строки Вы
хотите в наборе результатов.</li>

<li>Если нет никакой строки соответствия для правильной таблицы в
<code>ON</code> или <code>USING</code> в <code>LEFT JOIN</code>,
строка со всем набором столбцов установлена в <code>NULL</code> и
используется для правой таблицы. Вы можете использовать этот факт, чтобы
найти строки в таблице, у которых нет никакой копии в другой таблице:
<pre>
SELECT left_tbl.* FROM left_tbl LEFT JOIN right_tbl ON
       left_tbl.id = right_tbl.id
       WHERE right_tbl.id IS NULL;
</pre>

Этот пример находит все строки в <code>left_tbl</code> с
<code>id</code>, которое не присутствует в <code>right_tbl</code>
(то есть, все строки в <code>left_tbl</code> без соответствующей строки в
<code>right_tbl</code>). Это принимает, что
<code>right_tbl.id</code> <code>NOT NULL</code>. См.
<a href="optimiz.htm#left-join-optimization">раздел 9.2.1.9</a>.</li>

<li><code>USING(<em><code>column_list</code></em>)</code>
называет список столбцов, которые должны существовать в обеих таблицах. Если
таблицы <code>a</code> и <code>b</code> обе содержат столбцы <code>c1</code>,
<code>c2</code> и <code>c3</code>, следующее соединение сравнивает
соответствующие столбцы от этих двух таблиц:
<pre>
a LEFT JOIN b USING (c1,c2,c3)
</pre></li>

<li><code>NATURAL [LEFT] JOIN</code> из двух таблиц определен, чтобы быть
семантически эквивалентным <code>INNER JOIN</code> или <code>LEFT JOIN</code>
с <code>USING</code>, который называет все столбцы, которые
существуют в обеих таблицах.</li>

<li><code>RIGHT JOIN</code> аналог <code>LEFT JOIN</code>.
Чтобы сохранить код портируемым через базы данных, рекомендуется, чтобы Вы
использовали <code>LEFT JOIN</code> вместо <code>RIGHT JOIN</code>.</li>

<li><code>{ OJ ... }</code> синтаксис, показанный в описании синтаксиса
соединения, существует только для совместимости с ODBC. Вьющиеся скобы в
синтаксисе должны быть написаны буквально: они не метасинтаксис как в
другом месте в описаниях синтаксиса.
<pre>
SELECT left_tbl.* FROM { OJ left_tbl LEFT OUTER JOIN right_tbl ON
       left_tbl.id = right_tbl.id }
       WHERE right_tbl.id IS NULL;
</pre>

Вы можете использовать другие типы соединений в пределах
<code>{ OJ ...}</code>, например,
<code>INNER JOIN</code> или <code>RIGHT OUTER JOIN</code>.
Это помогает с совместимостью с некоторыми имеющими отношение к третьей
стороне приложениями, но не является официальным синтаксисом ODBC.</li>

<li><code>STRAIGHT_JOIN</code> подобен <code>JOIN</code>,
за исключением того, что левая таблица всегда читается перед правой таблицей.
Это может использоваться для тех случаев, для которых оптимизатор помещает
таблицы в неправильном порядке.</p></li></ul>

<p>Некоторые примеры соединения:
<pre>
SELECT * FROM table1, table2;
SELECT * FROM table1 INNER JOIN table2 ON table1.id=table2.id;
SELECT * FROM table1 LEFT JOIN table2 ON table1.id=table2.id;
SELECT * FROM table1 LEFT JOIN table2 USING (id);
SELECT * FROM table1 LEFT JOIN table2 ON table1.id=table2.id
         LEFT JOIN table3 ON table2.id=table3.id;
</pre>

<span><strong>Присоединитесь к изменениям обработки в MySQL 5.0.12</strong>
</span></p>
<p>Естественные соединения и соединения с <code>USING</code>,
включая внешние разновидности соединения, обработаны согласно стандарту
SQL:2003. Цель состояла в том, чтобы выровнять синтаксис и семантику MySQL
относительно <code>NATURAL JOIN</code> и <code>JOIN ... USING</code>
согласно SQL:2003. Однако, эти изменения в обработке соединения могут
привести к различным выходным столбцам для некоторых соединений. Кроме того,
некоторые запросы, которые, казалось, работали правильно в более старых
версиях (до 5.0.12) должны быть переписаны, чтобы выполнить стандарт.</p>

<p>У этих изменений есть пять основных аспектов:</p>
<ul><li><p>Способ, из которого MySQL определяет столбцы результата
операции соединения <code>NATURAL</code> или <code>USING</code>
(и таким образом результат всего <code>FROM</code>).</li>

<li>Расширение <code>SELECT *</code> и <code>SELECT
<em><code>tbl_name</code></em>.*</code> в список выбранных столбцов.</li>
<li>Разрешение имен столбцов в соединениях
<code>NATURAL</code> или <code>USING</code>.</li>

<li>Преобразование <code>NATURAL</code> или
<code>USING</code> в <code>JOIN ... ON</code>.</li>
<li>Разрешение имен столбцов в выражении <code>ON</code>
<code>JOIN ... ON</code>.</p></li></ul>

<p>Следующий список обеспечивает больше деталей относительно нескольких
эффектов текущей обработки соединения против обработки в более старых
версиях. Термин <span><span>старые</span></span> значит <span><span>до
MySQL 5.0.12.</span></span></p>

<ul><li><p>Столбцы в <code>NATURAL</code> или <code>USING</code>
при соединении могут отличаться от того, что было ранее. Определенно,
избыточные выходные столбцы больше не появляются, и порядок столбцов для
<code>SELECT *</code> может отличаться.</p>

<p>Рассмотрите этот набор запросов:
<pre>
CREATE TABLE t1 (i INT, j INT);
CREATE TABLE t2 (k INT, j INT);
INSERT INTO t1 VALUES(1,1);
INSERT INTO t2 VALUES(1,1);
SELECT * FROM t1 NATURAL JOIN t2;
SELECT * FROM t1 JOIN t2 USING (j);
</pre>
Ранее, запросы произвели этот вывод:
<pre>
+---+---+---+---+
| i | j | k | j |
+---+---+---+---+
| 1 | 1 | 1 | 1 |
+---+---+---+---+
+---+---+---+---+
| i | j | k | j |
+---+---+---+---+
| 1 | 1 | 1 | 1 |
+---+---+---+---+
</pre>

В первом <a href="#select"><code>SELECT</code></a>
столбец <code>j</code> появляется в обеих таблицах и таким образом становится
столбцом соединения, таким образом, согласно стандартному SQL, это должно
появиться только однажды в выводе, а не дважды. Точно так же во втором
SELECT столбец <code>j</code> назван в <code>USING</code>
и должен появиться только однажды в выводе, а не дважды. Но в обоих случаях
избыточный столбец не устранен. Кроме того, порядок столбцов не правилен,
согласно стандартному SQL.</p>

<p>Теперь запросы производят этот вывод:
<pre>
+---+---+---+
| j | i | k |
+---+---+---+
| 1 | 1 | 1 |
+---+---+---+
+---+---+---+
| j | i | k |
+---+---+---+
| 1 | 1 | 1 |
+---+---+---+
</pre>

Избыточный столбец устранен, и порядок следования столбцов
правилен, согласно стандартному SQL:</p>
<ul><li><p>Во-первых, общие столбцы двух таблиц присоединяются в порядке, в
котором они происходят в первой таблице.</li>
<li>Во-вторых, столбцы, уникальные для первой таблицы, в порядке, в котором
они происходят в той таблице.</li>
<li>В-третьих, столбцы, уникальные для второй таблицы, в порядке, в котором
они происходят в той таблице.</p></li></ul>

<p>Единственный столбец результата, который заменяет два общих столбца,
определен, используя объединение. Таким образом, для двух столбцов
<code>t1.a</code> и <code>t2.a</code>
получающийся единственный столбец соединения <code>a</code>
определен как <code>a = COALESCE(t1.a, t2.a)</code>, где:
<pre>
COALESCE(x, y) = (CASE WHEN V1 IS NOT NULL THEN V1 ELSE V2 END)
</pre>

Если работа соединения какое-либо другое соединение, столбцы результата
соединения состоит из связи всех столбцов таблиц, к которым присоединяются.
Это то же самое, как ранее.</p>

<p>Последствие определения соединенных столбцов:
для внешних соединений соединенный столбец содержит значение столбца
не-<code>NULL</code>, если один из двух столбцов всегда <code>NULL</code>.
Если ни один или оба столбца не <code>NULL</code>, у обоих общих столбцов
есть то же самое значение, таким образом, не имеет значения, какой выбран в
качестве значения соединенного столбца.
Простой способ интерпретировать это состоит в том, чтобы полагать, что
соединенный столбец внешнего соединения представлен общим столбцом внутренней
таблицы <code>JOIN</code>. Предположите, что таблицы
<code>t1(a,b)</code> и <code>t2(a,c)</code> имеют следующее содержание:
<pre>
t1    t2
----  ----
1 x   2 z
2 y   3 w
</pre>

Тогда:
<pre>
mysql&gt; SELECT * FROM t1 NATURAL LEFT JOIN t2;
+---+---+------+
| a | b | c    |
+---+---+------+
| 1 | x | NULL |
| 2 | y | z    |
+---+---+------+
</pre>

Здесь столбец <code>a</code> содержит значения <code>t1.a</code>.
<pre>
mysql&gt; SELECT * FROM t1 NATURAL RIGHT JOIN t2;
+---+---+------+
| a | c | b    |
+---+---+------+
| 2 | z | y    |
| 3 | w | NULL |
+---+---+------+
</pre>Здесь столбец <code>a</code> содержит значения <code>t2.a</code>.</p>

<p>Сравните эти результаты с иначе эквивалентными
запросами с <code>JOIN ... ON</code>:
<pre>
mysql&gt; SELECT * FROM t1 LEFT JOIN t2 ON (t1.a = t2.a);
+---+---+------+------+
| a | b | a    | c    |
+---+---+------+------+
| 1 | x | NULL | NULL |
| 2 | y | 2    | z    |
+---+---+------+------+

mysql&gt; SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a = t2.a);
+------+------+---+---+
| a    | b    | a | c |
+------+------+---+---+
| 2    | y    | 2 | z |
| NULL | NULL | 3 | w |
+------+------+---+---+
</pre></li>

<li>Ранее <code>USING</code> мог быть переписан как <code>ON</code>,
который сравнивает соответствующие столбцы. Например, следующие два пункта
были семантически идентичны:
<pre>
a LEFT JOIN b USING (c1,c2,c3)
a LEFT JOIN b ON a.c1=b.c1 AND a.c2=b.c2 AND a.c3=b.c3
</pre>

Теперь эти два пункта больше не вполне то же самое:</p>
<ul><li><p>Относительно определения, какие строки удовлетворяют условие
соединения, оба соединения остаются семантически идентичными.</li>

<li>Относительно определения, которые столбцы вывести для
<code>SELECT *</code>, два соединения не семантически идентичны.
<code>USING</code> соединение выбирает соединенное значение соответствующих
столбцов, тогда как <code>ON</code> выбирает все столбцы из всех таблиц. Для
предыдущего <code>USING</code> <code>SELECT *</code> выбирает эти значения:
<pre>
COALESCE(a.c1,b.c1), COALESCE(a.c2,b.c2), COALESCE(a.c3,b.c3)
</pre>

Для <code>ON</code> <code>SELECT *</code> выбирает эти значения:
<pre>
a.c1, a.c2, a.c3, b.c1, b.c2, b.c3
</pre>

С внутренним соединением <a href="funct.htm#function_coalesce"><code>
COALESCE(a.c1,b.c1)</code></a> то же самое, как
<code>a.c1</code> или <code>b.c1</code> потому что у обоих столбцов будет то
же самое значение. С внешним соединением (например, <code>LEFT JOIN</code>)
один из двух столбцов может быть <code>NULL</code>. Тот столбец будет
убран из результата.</p></li></ul></li>

<li>Оценка многоканальных естественных соединений отличается очень важным
способом, который затрагивает результат
<code>NATURAL</code> или <code>USING</code>,
и это может потребовать перезаписи запроса. Предположите, что у Вас есть три
таблицы <code>t1(a,b)</code>, <code>t2(c,b)</code> и <code>t3(a,c)</code>,
которые имеют одну строку: <code>t1(1,2)</code>, <code>t2(10,2)</code> и
<code>t3(7,10)</code>. Предположите также, что у Вас есть
<code>NATURAL JOIN</code> на этих трех таблицах:
<pre>
SELECT ... FROM t1 NATURAL JOIN t2 NATURAL JOIN t3;
</pre>

Ранее, левый операнд второго соединения, как полагали, был <code>t2</code>,
тогда как это должно быть вложенное соединение <code>(t1 NATURAL JOIN t2)
</code>. В результате столбцы <code>t3</code> проверены на общие столбцы
только в <code>t2</code>, и, если <code>t3</code> имеет общие столбцы с
<code>t1</code>, эти столбцы не используются в качестве столбцов equi-join.
Таким образом, ранее, предыдущий запрос был преобразован к
следующему equi-соединению:
<pre>
SELECT ... FROM t1, t2, t3 WHERE t1.b = t2.b AND t2.c = t3.c;
</pre>

То соединение пропускает еще один предикат equi-соединения
<code>(t1.a = t3.a)</code>. В результате это производит одну строку, а не
пустой результат, как должно. Правильный эквивалентный запрос:
<pre>
SELECT ... FROM t1, t2, t3 WHERE t1.b = t2.b AND t2.c = t3.c AND t1.a = t3.a;
</pre>

Если Вы требуете того же самого результата запроса в текущих версиях MySQL,
как в более старых версиях, переписывайте естественное соединение как
первое equi-соединение.</li>

<li>Ранее у оператора запятой (<code>,</code>) и <code>JOIN</code> был тот же
самый приоритет, таким образом, выражение соединения
<code>t1, t2 JOIN t3</code> интерпретировалось как
<code>((t1, t2) JOIN t3)</code>. Теперь <code>JOIN</code> имеет более высокий
приоритет, таким образом, выражение интерпретируется как <code>(t1, (t2 JOIN
t3))</code>. Это изменение затрагивает запросы, которые используют
<code>ON</code>, потому что тот пункт может отнестись только к столбцам в
операндах соединения, и изменению в интерпретации изменений приоритета того,
каковы те операнды.</p>

<p>Например:
<pre>
CREATE TABLE t1 (i1 INT, j1 INT);
CREATE TABLE t2 (i2 INT, j2 INT);
CREATE TABLE t3 (i3 INT, j3 INT);
INSERT INTO t1 VALUES(1,1);
INSERT INTO t2 VALUES(1,1);
INSERT INTO t3 VALUES(1,1);
SELECT * FROM t1, t2 JOIN t3 ON (t1.i1 = t3.i3);
</pre>

Ранее <a href="#select"><code>SELECT</code></a>
было законным из-за неявной группировки
<code>t1,t2</code> как <code>(t1,t2)</code>. Теперь <code>JOIN</code>
имеет приоритет, таким образом, операнды для <code>ON</code>
это <code>t2</code> и <code>t3</code>. Поскольку <code>t1.i1</code>
не столбец в любом из операндов, результат: ошибка <code>Unknown column
't1.i1' in 'on clause'</code>. Чтобы позволить соединению быть обработанным,
сгруппируйте первые две таблицы явно с круглыми скобками так, чтобы операнды
для <code>ON</code> <code>(t1,t2)</code> и <code>t3</code>:
<pre>
SELECT * FROM (t1, t2) JOIN t3 ON (t1.i1 = t3.i3);
</pre>

Альтернативно, избегите использования оператора запятой и используйте
вместо него <code>JOIN</code>:
<pre>
SELECT * FROM t1 JOIN t2 JOIN t3 ON (t1.i1 = t3.i3);
</pre>

Это изменение также относится к запросам, которые смешивают оператор запятой
с <code>INNER JOIN</code>, <code>CROSS JOIN</code>, <code>LEFT JOIN</code> и
<code>RIGHT JOIN</code>, у всех из которых теперь есть более высокий
приоритет, чем у оператора запятой.</li>

<li>Ранее <code>ON</code> мог отнестись к столбцам в таблицах, названных с
правой стороны от него. Теперь <code>ON</code>
может отнестись только к его операндам.</p>

<p>Пример:
<pre>
CREATE TABLE t1 (i1 INT);
CREATE TABLE t2 (i2 INT);
CREATE TABLE t3 (i3 INT);
SELECT * FROM t1 JOIN t2 ON (i1 = i3) JOIN t3;
</pre>

Ранее <a href="#select"><code>SELECT</code></a>
был законным. Теперь запрос терпит неудачу с ошибкой
<code>Unknown column 'i3' in 'on clause'</code>, поскольку
<code>i3</code> столбец в <code>t3</code>,
который не является операндом <code>ON</code>.
Запрос должен быть переписан следующим образом:
<pre>
SELECT * FROM t1 JOIN t2 JOIN t3 ON (i1 = i3);
</pre></li>

<li>Разрешение имен столбцов в соединениях <code>NATURAL</code> или
<code>USING</code> отличаются от того, что было ранее.
Для имен столбцов, которые вне <code>FROM</code>, MySQL
теперь обрабатывает супернабор запросов по сравнению с ранней логикой. Таким
образом, в случаях, когда MySQL прежде выпустил ошибку, что некоторый столбец
неоднозначен, запрос теперь обработан правильно. Это вследствие того, что
MySQL теперь обрабатывает общие столбцы соединения
<code>NATURAL</code> или <code>USING</code> как единственный столбец, так
что, когда запрос обращается к таким столбцам, компилятор запроса не
рассматривает их как неоднозначные.</p>

<p>Пример:
<pre>
SELECT * FROM t1 NATURAL JOIN t2 WHERE b &gt; 1;
</pre>

Ранее этот запрос произвел бы ошибку <code>ERROR 1052 (23000): Column 'b' in
where clause is ambiguous</code>.
Теперь запрос приводит к правильному результату:
<pre>
+---+---+---+
| b | c | y |
+---+---+---+
| 4 | 2 | 3 |
+---+---+---+
</pre>

Одно расширение MySQL по сравнению со стандартом SQL:2003 состоит в том, что
MySQL позволяет Вам указать общие (coalesced) столбцы соединения
<code>NATURAL</code> или <code>USING</code> (так же, как ранее) в то время,
как стандарт отвергает это.</p></li></ul>

<h4><a name="union"></a>14.2.9.3. UNION</h4>
<pre>
SELECT ... UNION [ALL | DISTINCT] SELECT ...
           [UNION [ALL | DISTINCT] SELECT ...]
</pre>
<a href="#union"><code>UNION</code></a>
используется, чтобы объединить следствие многократного
<a href="#select"><code>SELECT</code></a> в
единственный набор результатов.</p>

<p>Имена столбцов из первого <a href="#select"><code>SELECT</code></a>
используются как имена столбцов для возврата результатов. Выбранные столбцы
перечислены в соответствующих позициях каждого
<a href="#select"><code>SELECT</code></a>
должны иметь тот же самый тип данных. Например, у первого столбца, выбранного
первым запросом, должен быть тот же самый тип, как первый столбец,
выбранный другими запросами.</p>

<p>Если типы данных соответствующих столбцов
<a href="#select"><code>SELECT</code></a>
не соответствуют типам и длинам столбцов в
<a href="#union"><code>UNION</code></a>,
принимаются во внимание значения, полученные всеми
<a href="#select"><code>SELECT</code></a>.
Например, рассмотрите следующее:
<pre>
mysql&gt; SELECT REPEAT('a',1) UNION SELECT REPEAT('b',10);
+---------------+
| REPEAT('a',1) |
+---------------+
| a             |
| bbbbbbbbbb    |
+---------------+
</pre>

<a href="#select"><code>SELECT</code></a> это нормальные
запросы, но со следующими ограничениями:</p>
<ul><li><p>Только последний <a href="#select"><code>SELECT</code></a>
может использовать <code>INTO OUTFILE</code>. Однако, все результаты
<a href="#union"><code>UNION</code></a> написаны в файл.</li>

<li><code>HIGH_PRIORITY</code> не может использоваться с
<a href="#select"><code>SELECT</code></a>, которые являются частью
<a href="#union"><code>UNION</code></a>.
Если Вы определяете это для первого
<a href="#select"><code>SELECT</code></a>,
это не имеет никакого эффекта. Если Вы определяете это для кого-либо
последующего <a href="#select"><code>SELECT</code></a>,
будет синтаксическая ошибка.</p></li></ul>

<p>Поведение по умолчанию для <a href="#union"><code>UNION</code></a>:
дублирующиеся строки удалены из результата. Дополнительно
<code>DISTINCT</code> не имеет никакого эффекта кроме значения по умолчанию,
потому что это также определяет удаление дублирующейся строки. С
дополнительным <code>ALL</code> удаления дублирующейся строки не происходит,
и результат включает все строки соответствия от всех
<a href="#select"><code>SELECT</code></a>.</p>

<p>Вы можете смешать <a href="#union"><code>UNION
ALL</code></a> и <a href="#union"><code>UNION DISTINCT</code></a> в
запросе. Смешанные <a href="#union"><code>UNION</code></a>
обработаны таким образом, что
a <code>DISTINCT</code> переопределяет любой <code>ALL</code>
с его левой стороны. <code>DISTINCT</code> может быть произведен явно при
использовании <a href="#union"><code>UNION DISTINCT</code></a>
или неявно при использовании <a href="#union"><code>UNION</code></a>
без следующего <code>DISTINCT</code> или <code>ALL</code>.</p>

<p>Применять <code>ORDER BY</code> или <code>LIMIT</code> к отдельному
<a href="#select"><code>SELECT</code></a> можно, поместив его
в круглых скобках, которые сопровождают
<a href="#select"><code>SELECT</code></a>:
<pre>
(SELECT a FROM t1 WHERE a=10 AND B=1 ORDER BY a LIMIT 10) UNION
(SELECT a FROM t2 WHERE a=11 AND B=2 ORDER BY a LIMIT 10);
</pre>

Однако, использование <code>ORDER BY</code> для отдельного
<a href="#select"><code>SELECT</code></a>
ничего не подразумевает о порядке, в котором строки появляются в
окончательном результате, потому что
<a href="#union"><code>UNION</code></a> по умолчанию производит
неупорядоченный набор строк. Поэтому, использование <code>ORDER BY</code>
в этом контексте, как правило, находится в соединении с
<code>LIMIT</code>, чтобы это использовалось, чтобы определить подмножество
выбранных строк для <a href="#select"><code>SELECT</code></a>,
даже при том, что это не обязательно затрагивает порядок тех строк в
финальном результате <a href="#union"><code>UNION</code></a>. Если
<code>ORDER BY</code> появляется без <code>LIMIT</code> в
<a href="#select"><code>SELECT</code></a>,
это оптимизировано далеко, потому что это не будет иметь никакого эффекта
так или иначе.</p>

<p>Используя <code>ORDER BY</code> или <code>LIMIT</code>, чтобы
сортировать или ограничить все
<a href="#union"><code>UNION</code></a>, введите индивидуальный
<a href="#select"><code>SELECT</code></a>
поместите <code>ORDER BY</code> или <code>LIMIT</code> после последнего.
Следующий пример использует оба параметра:
<pre>
(SELECT a FROM t1 WHERE a=10 AND B=1) UNION
          (SELECT a FROM t2 WHERE a=11 AND B=2)
          ORDER BY a LIMIT 10;
</pre>
Запрос без круглых скобок эквивалентен одному параметру, как показано.</p>

<p>Этот <code>ORDER BY</code> не может использовать ссылки столбца, которые
включают имя таблицы (то есть, имена в формате
<em><code>tbl_name</code></em>.<em><code>col_name</code></em>).
Вместо этого обеспечьте псевдоним столбца в первом
<a href="#select"><code>SELECT</code></a>
и обратитесь к псевдониму в <code>ORDER BY</code>.
Альтернативно, обратитесь к столбцу в <code>ORDER BY</code> с использованием
его позиции столбца. Однако, использование позиций столбца устарело.</p>

<p>Кроме того, если столбец, который будет сортирован, является псевдонимом,
<code>ORDER BY</code> <span><em>должен</em></span> отнестись к псевдониму, а
не имени столбца. Первый из следующих запросов будет работать, но второй
потерпит неудачу с ошибкой <code>Unknown column 'a' in 'order clause'</code>:
<pre>
(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY b;
(SELECT a AS b FROM t) UNION (SELECT ...) ORDER BY a;
</pre>

При вызове строк в <a href="#union"><code>UNION</code></a>
результат будет состоять из наборов строк, полученных каждым
<a href="#select"><code>SELECT</code></a>
один за другим, выберите дополнительный столбец в каждом
<a href="#select"><code>SELECT</code></a>, чтобы
использовать в качестве столбца сортировки и добавить
<code>ORDER BY</code> после последнего
<a href="#select"><code>SELECT</code></a>:
<pre>
(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1) UNION
          (SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col;
</pre>

Чтобы дополнительно поддержать порядок сортировки в пределах
<a href="#select"><code>SELECT</code></a>, добавьте вторичный
столбец к <code>ORDER BY</code>:
<pre>
(SELECT 1 AS sort_col, col1a, col1b, ... FROM t1) UNION
          (SELECT 2, col2a, col2b, ... FROM t2) ORDER BY sort_col, col1a;
</pre>

Использование дополнительного столбца также позволяет Вам определить,
из которого <a href="#select"><code>SELECT</code></a>
каждая строка прибывает. Дополнительные столбцы могут предоставить другую
информацию об идентификации также, такую как строку, которая указывает
на имя таблицы.</p>

<p>Запросы <a href="#union"><code>UNION</code></a>
с совокупной функцией в <code>ORDER BY</code> отклонены с ошибкой
<a href="error.htm#error_er_aggregate_order_for_union"><code>
ER_AGGREGATE_ORDER_FOR_UNION</code></a>:
<pre>
SELECT 1 AS foo UNION SELECT 2 ORDER BY MAX(1);
</pre>

<h3><a name="subqueries"></a>14.2.10. Синтаксис подзапроса</h3>
<p>Подзапрос это <a href="#select"><code>SELECT</code></a>
в пределах другого запроса.</p>

<p>Все подформы запросов и операции, которых требует стандарт SQL,
поддержаны, так же как несколько особенностей, которые
являются MySQL-определенными.</p>

<p>Вот пример подзапроса:
<pre>
SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);
</pre>

В этом примере <code>SELECT * FROM t1 ...</code>
<span><em>внешний запрос</em></span>, а <code>(SELECT column1 FROM t2)</code>
<span><em>подзапрос</em></span>. Мы говорим, что подзапрос
<span><em>вложен</em></span> в пределах внешнего запроса и фактически
возможно вложить подзапросы в пределах других подзапросов на значительную
глубину. Подзапрос должен всегда появляться в пределах круглых скобок.</p>

<p>Основные преимущества подзапросов:</p>
<ul><li><p>Они позволяют запросы, которые
<span><em>структурированы</em></span> так, чтобы было возможно изолировать
каждую часть запроса.</li>

<li>Они обеспечивают альтернативные способы выполнить операции, которые иначе
потребовали бы сложных соединений и союзов.</li>
<li>Много людей считают подзапросы более читаемыми, чем сложные соединения
или союзы. Действительно, это было новшество подзапросов, которые дали людям
оригинальную идею назвать ранний SQL
<span><span>Structured Query Language.</span></span></p></li></ul>

<p>Вот запрос в качестве примера, который показывает важные пункты о
синтаксисе подзапроса, как определено стандартом SQL и поддержано в MySQL:
<pre>
DELETE FROM t1 WHERE s11 &gt; ANY
       (SELECT COUNT(*) /* no hint */ FROM t2
               WHERE NOT EXISTS (SELECT * FROM t3 WHERE ROW(5*t2.s1,77)=
               (SELECT 50,11*s1 FROM t4 UNION SELECT 50,77 FROM
               (SELECT * FROM t5) AS t5)));
</pre>

Подзапрос может возвратить скаляр (единственное значение), единственную
строку, единственный столбец или таблицу (одна или более строк одного или
более столбцов). Их называют скаляром, столбцом, строкой и табличными
подзапросами. Подзапросы, которые возвращают особый вид результата, часто
могут использоваться только в определенных контекстах, как
описано в следующих разделах.</p>

<p>Есть немного ограничений на тип запросов, в которых могут использоваться
подзапросы. Подзапрос может содержать многие из ключевых слов, которые
допустимы в рамках <a href="#select"><code>SELECT</code></a>:
<code>DISTINCT</code>, <code>GROUP BY</code>,
<code>ORDER BY</code>, <code>LIMIT</code>, объединения,
<a href="#union"><code>UNION</code></a>,
комментарии, функции и так далее.</p>

<p>Внешний запрос подзапроса может быть любым из:
<a href="#select"><code>SELECT</code></a>,
<a href="#insert"><code>INSERT</code></a>,
<a href="#update"><code>UPDATE</code></a>,
<a href="#delete"><code>DELETE</code></a>,
<a href="#set-variable"><code>SET</code></a> или
<a href="#do"><code>DO</code></a>.</p>

<p>В MySQL Вы не можете изменить таблицу и выбрать из той же самой таблицы в
подзапросе. Это относится к таким запросам, как
<a href="#delete"><code>DELETE</code></a>,
<a href="#insert"><code>INSERT</code></a>,
<a href="#replace"><code>REPLACE</code></a>,
<a href="#update"><code>UPDATE</code></a>
и (потому что подзапросы могут использоваться в <code>SET</code>)
<a href="#load-data"><code>LOAD DATA INFILE</code></a>.</p>

<h4><a name="scalar-subqueries"></a>14.2.10.1.
Подзапрос как скалярный операнд</h4>
<p>В его самой простой форме подзапрос это скалярный подзапрос, который
возвращает единственное значение. Скалярный подзапрос это простой операнд, и
Вы можете использовать его почти где угодно, единственное значение столбца
или литерал является законным, и Вы можете ожидать, что у этого будут те
характеристики, которые имеют все операнды: тип данных, длина, признак, что
это может быть <code>NULL</code> и так далее. Например:
<pre>
CREATE TABLE t1 (s1 INT, s2 CHAR(5) NOT NULL);
INSERT INTO t1 VALUES(100, 'abcde');
SELECT (SELECT s2 FROM t1);
</pre>

Подзапрос в этом <a href="#select"><code>SELECT</code></a>
возвращает единственное значение (<code>'abcde'</code>), у этого есть тип
данных <a href="types.htm#char"><code>CHAR</code></a>, длина 5,
набор символов и сопоставление, равное значениям по умолчанию во время
<a href="#create-table"><code>CREATE TABLE</code></a>,
и признак, что значение в столбце может быть <code>NULL</code>.
Такие значения, выбранные скалярным подзапросом, не скопированы, потому что,
если результат подзапроса пуст, результат <code>NULL</code>. Для показанного
подзапроса, если <code>t1</code> пуст, результат будет <code>NULL</code> даже
при том, что <code>s2</code> <code>NOT NULL</code>.</p>

<p>Есть несколько контекстов, в которых не может использоваться скалярный
подзапрос. Если запрос разрешает только буквальное значение, Вы не можете
использовать подзапрос. Например, <code>LIMIT</code> требует буквальных
параметров целого числа, и
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
требует буквального строкового имени файла. Вы не можете использовать
подзапросы, чтобы поставлять эти значения.</p>

<p>Когда Вы видите примеры в следующих разделах, которые содержат довольно
спартанскую конструкцию <code>(SELECT column1 FROM t1)</code>,
предположите, что Ваш собственный код содержит намного более
разнообразные и сложные конструкции.</p>

<p>Предположите, что мы делаем две таблицы:
<pre>
CREATE TABLE t1 (s1 INT);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (s1 INT);
INSERT INTO t2 VALUES (2);
</pre>

Тогда выполните <a href="#select"><code>SELECT</code></a>:
<pre>
SELECT (SELECT s1 FROM t2) FROM t1;
</pre>
Результат <code>2</code> потому что есть строка в <code>t2</code>, содержащая
столбец <code>s1</code>, а у этого есть значение <code>2</code>.</p>

<p>Скалярный подзапрос может быть частью выражения, но помните про круглые
скобки, даже если подзапрос это операнд, который обеспечивает параметр
для функции. Например:
<pre>
SELECT UPPER((SELECT s1 FROM t1)) FROM t2;
</pre>

<h4><a name="comparisons-using-subqueries"></a>14.2.10.2.
Сравнения, используя подзапросы</h4>
<p>Наиболее популярный способ использования подзапроса находится в форме:
<pre>
<em><code>non_subquery_operand</code></em> <em><code>comparison_operator</code></em>
(<em><code>subquery</code></em>)
</pre>

Здесь <em><code>comparison_operator</code></em> один из этих операторов:
<pre>
=  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt;  !=  &lt;=&gt;
</pre>
Например:
<pre>
... WHERE 'a' = (SELECT column1 FROM t1)
</pre>

MySQL также разрешает эту конструкцию:
<pre>
<em><code>non_subquery_operand</code></em> LIKE (<em><code>subquery</code></em>)
</pre>

Когда-то единственное место для подзапроса было на правой стороне сравнения,
и Вы могли бы все еще найти некоторые старые DBMS, которые
настаивают на этом.</p>

<p>Вот пример сравнения подзапроса стандартной формы, которое Вы не можете
сделать с соединением. Это находит все строки в таблице  <code>t1</code> для
которых <code>column1</code> равно максимальному значению в таблице
<code>t2</code>:
<pre>
SELECT * FROM t1 WHERE column1 = (SELECT MAX(column2) FROM t2);
</pre>

Вот другой пример, который снова невозможен с соединением, потому что он
вовлекает соединение для одной из таблиц. Это находит все строки в таблице
<code>t1</code>, содержа значение, которое встречается
дважды в данном столбце:
<pre>
SELECT * FROM t1 AS t WHERE 2 = (SELECT COUNT(*) FROM t1 WHERE t1.id = t.id);
</pre>

Для сравнения подзапроса и скаляра подзапрос должен возвратить скаляр.
Для сравнения подзапроса со строкой подзапрос должен быть подзапросом строки,
который возвращает строку с тем же самым числом значений, как
конструктор строки. См.
<a href="#row-subqueries">раздел 14.2.10.5</a>.</p>

<h4><a name="any-in-some-subqueries"></a>14.2.10.3.
Подзапросы с ANY, IN или SOME</h4>
<pre>
<em><code>operand</code></em> <em><code>comparison_operator</code></em> ANY (<em><code>subquery</code></em>)
<em><code>operand</code></em> IN (<em><code>subquery</code></em>)
<em><code>operand</code></em> <em><code>comparison_operator</code></em> SOME (<em><code>subquery</code></em>)
</pre>

Здесь <em><code>comparison_operator</code></em> одно из:
<pre>
=  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt;  !=
</pre>

<code>ANY</code> должно следовать за оператором сравнения, означает
<span><span>вернуть <code>TRUE</code>, если сравнение <code>TRUE</code> для
<code>ANY</code> из значений в столбце, который вернул подзапрос
</span></span>:
<pre>
SELECT s1 FROM t1 WHERE s1 &gt; ANY (SELECT s1 FROM t2);
</pre>

Предположите, что есть строка в таблице <code>t1</code>, содержащая
<code>(10)</code>. Выражение  <code>TRUE</code>, если таблица <code>t2</code>
содержит <code>(21,14,7)</code> потому, что есть значение <code>7</code> в
<code>t2</code>, это меньше <code>10</code>. Выражение <code>FALSE</code>,
если таблица <code>t2</code> содержит <code>(20,10)</code>, или если таблица
<code>t2</code> пуста. Выражение <span><em>неизвестно</em></span> (то есть,
<code>NULL</code>), если таблица <code>t2</code> содержит
<code>(NULL,NULL,NULL)</code>.</p>

<p>Когда используется с подзапросом <code>IN</code> псевдоним для
<code>= ANY</code>. Таким образом, эти два запроса то же самое:
<pre>
SELECT s1 FROM t1 WHERE s1 = ANY (SELECT s1 FROM t2);
SELECT s1 FROM t1 WHERE s1 IN(SELECT s1 FROM t2);
</pre>

<code>IN</code> и <code>= ANY</code> не синонимы, когда используются
со списком выражений. <code>IN</code> может взять список выражений, но
<code>= ANY</code> нет, см. <a href="funct.htm#comparison-operators">раздел
13.3.2</a>.</p>

<p><code>NOT IN</code> псевдоним не для <code>&lt;&gt; ANY</code>, а для
<code>&lt;&gt; ALL</code>. См.
<a href="#all-subqueries">раздел 14.2.10.4</a>.</p>

<p><code>SOME</code> псевдоним для <code>ANY</code>.
Таким образом, эти два запроса то же самое:
<pre>
SELECT s1 FROM t1 WHERE s1 &lt;&gt; ANY  (SELECT s1 FROM t2);
SELECT s1 FROM t1 WHERE s1 &lt;&gt; SOME (SELECT s1 FROM t2);
</pre>

Использование слова <code>SOME</code> редко, но этот пример показывает,
почему это могло бы быть полезно. Большинству людей фраза
<span><span>a не равный любому b</span></span> означает
<span><span>нет никакого b, который равен a</span></span>,
но это не то, что предназначается синтаксисом SQL. Синтаксис означает
<span><span>есть некоторый b, который не равен a</span></span>. Использование
<code>&lt;&gt; SOME</code> вместо этого помогает гарантировать, что все
понимают значение запроса.</p>

<h4><a name="all-subqueries"></a>14.2.10.4. Подзапросы с ALL</h4>
<pre>
<em><code>operand</code></em> <em><code>comparison_operator</code></em>
    ALL (<em><code>subquery</code></em>)
</pre>

<code>ALL</code>, который должен следовать за оператором сравнения, означает
<span><span>вернуть <code>TRUE</code>, если сравнение <code>TRUE</code> для
<code>ALL</code> значений в столбце, который вернул подзапрос</span></span>:
<pre>
SELECT s1 FROM t1 WHERE s1 &gt; ALL (SELECT s1 FROM t2);
</pre>

Предположите, что есть строка в таблице <code>t1</code>, содержащая
<code>(10)</code>. Выражение <code>TRUE</code>, если таблица <code>t2</code>
содержит <code>(-5,0,+5)</code>, поскольку <code>10</code>
больше чем все три значения в <code>t2</code>. Выражение <code>FALSE</code>,
если таблица <code>t2</code> содержит <code>(12,6,NULL,-100)</code> потому,
что есть единственное значение <code>12</code> в таблице <code>t2</code>,
которое больше <code>10</code>. Выражение <span><em>неизвестно</em></span>
(то есть, <code>NULL</code>), если таблица <code>t2</code> содержит
<code>(0,NULL,1)</code>.</p>

<p>Наконец, выражение <code>TRUE</code>, если таблица <code>t2</code> пуста.
Так, следующее выражение <code>TRUE</code>,
когда таблица <code>t2</code> пуста:
<pre>
SELECT * FROM t1 WHERE 1 &gt; ALL (SELECT s1 FROM t2);
</pre>

Но это выражение <code>NULL</code>, когда таблица <code>t2</code> пуста:
<pre>
SELECT * FROM t1 WHERE 1 &gt; (SELECT s1 FROM t2);
</pre>

Кроме того, следующее выражение <code>NULL</code>
когда таблица <code>t2</code> пуста:
<pre>
SELECT * FROM t1 WHERE 1 &gt; ALL (SELECT MAX(s1) FROM t2);
</pre>

Вообще, <span><em>таблицы, содержащие значения <code>NULL</code></em></span>
и <span><em>пустые таблицы</em></span> проблемные ситуации
при написании подзапросов, всегда рассматривайте, приняли ли Вы эти две
возможности во внимание.</p>

<p><code>NOT IN</code> псевдоним для <code>&lt;&gt; ALL</code>.
Таким образом, эти два запроса те же самые:
<pre>
SELECT s1 FROM t1 WHERE s1 &lt;&gt; ALL (SELECT s1 FROM t2);
SELECT s1 FROM t1 WHERE s1 NOT IN (SELECT s1 FROM t2);
</pre>

<h4><a name="row-subqueries"></a>14.2.10.5. Подзапросы строки</h4>
<p>Скаляр или подзапросы столбца возвращают единственное значение или столбец
значений. <span><em>Подзапрос строки</em></span> это разновидность
подзапроса, которая возвращает единственную строку и может таким образом
возвратить больше, чем одно значение столбца.
Операторы для сравнений подзапроса строки:
<pre>
=  &gt;  &lt;  &gt;=  &lt;=  &lt;&gt;  !=  &lt;=&gt;
</pre>

Вот два примера:
<pre>
SELECT * FROM t1 WHERE (col1,col2) = (SELECT col3, col4 FROM t2
         WHERE id = 10);
SELECT * FROM t1 WHERE ROW(col1,col2) = (SELECT col3, col4 FROM t2
         WHERE id = 10);
</pre>

Для обоих запросов, если таблица <code>t2</code> содержит единственную
строку с <code>id = 10</code>, подзапрос возвращает единственную строку. Если
эта строка имеет значения <code>col3</code> и <code>col4</code>, равные
<code>col1</code> и <code>col2</code> любых строк в
<code>t1</code>, <code>WHERE</code> <code>TRUE</code>
и каждый запрос возвращает те строки <code>t1</code>. Если значения строк
<code>col3</code> и <code>col4</code> в <code>t2</code> не равны
значениям <code>col1</code> и <code>col2</code> любой строки в
<code>t1</code>, выражение <code>FALSE</code> и запрос возвращает пустой
набор результатов. Выражение <span><em>неизвестно</em></span>
(то есть, <code>NULL</code>), если подзапрос не производит строк. Ошибка
происходит, если подзапрос производит много строк, потому что подзапрос
строки может возвратить самое большее одну строку.</p>

<p>Выражения <code>(1,2)</code> и <code>ROW(1,2)</code> иногда называются
<span class="firstterm">конструкторами строки</span>. Эти два эквивалентны.
Конструктор строки и строка, возвращенная подзапросом, должны содержать то же
самое число значений.</p>

<p>Конструктор строки используется для сравнений с подзапросами, которые
возвращают два или больше столбца. Когда подзапрос возвращает единственный
столбец, это расценено как скалярное значение, а не как строка, таким
образом, конструктор строки не может использоваться с подзапросом, который не
возвращает по крайней мере два столбца. Таким образом, следующий запрос
терпит неудачу с синтаксической ошибкой:
<pre>
SELECT * FROM t1 WHERE ROW(1) = (SELECT column1 FROM t2)
</pre>

Конструкторы строки являются законными в других контекстах. Например,
следующие два запроса семантически эквивалентны (и обработаны таким
же образом оптимизатором):
<pre>
SELECT * FROM t1 WHERE (column1,column2) = (1,1);
SELECT * FROM t1 WHERE column1 = 1 AND column2 = 1;
</pre>

Следующий запрос отвечает на запрос <span><span>найти все строки в таблице
<code>t1</code>, которые также существуют в таблице
<code>t2</code></span></span>:
<pre>
SELECT column1,column2,column3 FROM t1 WHERE (column1,column2,column3) IN
       (SELECT column1,column2,column3 FROM t2);
</pre>

<h4><a name="exists-and-not-exists-subqueries"></a>14.2.10.6.
Подзапросы с EXISTS или NOT EXISTS</h4>
<p>Если подзапрос возвращает какие-либо строки вообще, <code>EXISTS
<em><code>subquery</code></em></code>
<code>TRUE</code>, а <code>NOT EXISTS
<em><code>subquery</code></em></code> <code>FALSE</code>:
<pre>
SELECT column1 FROM t1 WHERE EXISTS (SELECT * FROM t2);
</pre>

Традиционно подзапрос <code>EXISTS</code> начинается с
<code>SELECT *</code>, но это могло начаться  с
<code>SELECT 5</code> или <code>SELECT column1</code>
или вообще с чего угодно. MySQL игнорирует список
<a href="#select"><code>SELECT</code></a>
в таком подзапросе, таким образом, это не имеет никакого значения.</p>

<p>Для предыдущего примера, если <code>t2</code> содержит любые строки, даже
строки только со значениями <code>NULL</code>, условие <code>EXISTS</code>
<code>TRUE</code>. Это фактически маловероятный пример потому, что
подзапрос <code>[NOT] EXISTS</code> почти всегда содержит корреляции.
Вот некоторые более реалистические примеры:</p>

<ul><li><p>Какое хранилище присутствует в одном или более городах?
<pre>
SELECT DISTINCT store_type FROM stores
       WHERE EXISTS (SELECT * FROM cities_stores
       WHERE cities_stores.store_type = stores.store_type);
</pre></li>

<li>Какое хранилище не присутствует ни в каких городах?
<pre>
SELECT DISTINCT store_type FROM stores
       WHERE NOT EXISTS (SELECT * FROM cities_stores
       WHERE cities_stores.store_type = stores.store_type);
</pre></li>

<li>Какое хранилище присутствует во всех городах?
<pre>
SELECT DISTINCT store_type FROM stores s1
       WHERE NOT EXISTS (SELECT * FROM cities WHERE NOT EXISTS (
       SELECT * FROM cities_stores
                WHERE cities_stores.city = cities.city AND
                cities_stores.store_type = stores.store_type));
</pre></li></ul>

<p>Последний пример двоичным образом вложенный запрос
<code>NOT EXISTS</code>. Таким образом, у этого есть
<code>NOT EXISTS</code> в пределах <code>NOT EXISTS</code>.
Формально это отвечает на вопрос <span><span>есть ли город
с хранилищем, которое не находится в <code>Stores</code></span></span>?
Но легче сказать что вложенный <code>NOT EXISTS</code> отвечает на вопрос
<span><span>есть ли <em><code>x</code></em> <code>TRUE</code>
для всех <em><code>y</code></em>?</span></span></p>

<h4><a name="correlated-subqueries"></a>14.2.10.7.
Коррелированые подзапросы</h4>
<p><span><em>Коррелированый подзапрос</em></span> это подзапрос, который
содержит ссылку на таблицу, которая также появляется во
внешнем запросе. Например:
<pre>
SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2
         WHERE t2.column2 = t1.column2);
</pre>

Заметьте, что подзапрос содержит ссылку на столбец <code>t1</code> даже при
том, что <code>FROM</code> подзапроса не упоминает таблицу <code>t1</code>.
MySQL смотрит вне подзапроса и находит <code>t1</code>
во внешнем запросе.</p>

<p>Предположите, что таблица <code>t1</code>
содержит строку, где
<code>column1 = 5</code> и <code>column2 = 6</code>,
тем временем таблица <code>t2</code> содержит строку, где
<code>column1 = 5</code> и <code>column2 = 7</code>. Простое выражение
<code>... WHERE column1 = ANY (SELECT column1 FROM t2)</code> было бы
<code>TRUE</code>, но в этом примере <code>WHERE</code> в пределах подзапроса
<code>FALSE</code> (потому что <code>(5,6)</code> не <code>(5,7)</code>),
таким образом, выражение в целом <code>FALSE</code>.</p>

<p><span><strong>Правило обзора данных:</strong></span> MySQL
оценивает изнутри к внешней стороне. Например:
<pre>
SELECT column1 FROM t1 AS x WHERE x.column1 = (SELECT column1 FROM t2 AS x
       WHERE x.column1 = (SELECT column1 FROM t3
       WHERE x.column2 = t3.column1));
</pre>

В этом запросе <code>x.column2</code> должен быть столбец в таблице
<code>t2</code> потому, что <code>SELECT column1 FROM t2 AS x ...</code>
переименовывает <code>t2</code>. Это не столбец в таблице <code>t1</code>,
потому что <code>SELECT column1 FROM t1 ...</code>
внешний запрос, который <span><em>дальше</em></span> отсутствует.</p>

<p>Для подзапросов в <code>HAVING</code> или <code>ORDER BY</code> MySQL
также ищет имена столбцов во внешнем избранном списке.</p>
<p>Для определенных случаев оптимизирован коррелированый подзапрос. Например:
<pre>
<em><code>val</code></em> IN (SELECT <em><code>key_val</code></em> FROM
<em><code>tbl_name</code></em> WHERE <em><code>correlated_condition</code></em>)
</pre>
Иначе они неэффективны и вероятны будут медленными. Запрос переписан,
поскольку соединение могло бы улучшить работу.</p>

<p>Совокупные функции в коррелированых подзапросах могут содержать внешние
ссылки, если функция содержит только внешние ссылки,
и если функция не содержится в другой функции или выражении.</p>

<h4><a name="from-clause-subqueries"></a>14.2.10.8. Подзапросы в FROM</h4>
<p>Подзапросы являются законными в параметре <code>FROM</code>
<a href="#select"><code>SELECT</code></a>:
<pre>
SELECT ... FROM (<em><code>subquery</code></em>) [AS] <em><code>name</code></em> ...
</pre>

<code>[AS] <em><code>name</code></em></code> принудителен, потому что каждая
таблица в <code>FROM</code> должна иметь имя. Любые столбцы в
<em><code>subquery</code></em> должны иметь уникальные имена.</p>

<p>Ради иллюстрации предположите, что у Вас есть эта таблица:
<pre>
CREATE TABLE t1 (s1 INT, s2 CHAR(5), s3 FLOAT);
</pre>

Вот как использовать подзапрос в <code>FROM</code>, используя
таблицу в качестве примера:
<pre>
INSERT INTO t1 VALUES (1,'1',1.0);
INSERT INTO t1 VALUES (2,'2',2.0);
SELECT sb1,sb2,sb3 FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1)
       AS sb WHERE sb1 &gt; 1;
</pre>
Результат: <code>2, '2', 4.0</code>.
</p>

<p>Вот другой пример: предположите, что Вы хотите знать среднее число ряда
сумм для сгруппированной таблицы. Это не работает:
<pre>
SELECT AVG(SUM(column1)) FROM t1 GROUP BY column1;
</pre>

Однако, этот запрос предоставляет желаемую информацию:
<pre>
SELECT AVG(sum_column1) FROM (SELECT SUM(column1) AS sum_column1
       FROM t1 GROUP BY column1) AS t1;
</pre>
Заметьте, что имя столбца, использованное в пределах подзапроса
(<code>sum_column1</code>), признано во внешнем запросе.</p>

<p>Подзапросы в <code>FROM</code> могут
возвратить скаляр, столбец, строку или таблицу. Подзапросы в
<code>FROM</code> не могут быть коррелированными подзапросами, если не
используются в пределах <code>ON</code> в <code>JOIN</code>.</p>

<p>В MySQL 8.0 оптимизатор определяет информацию о полученных таблицах таким
способом, для которого не происходит материализация их для
<a href="#explain"><code>EXPLAIN</code></a>. См.
<a href="optimiz.htm#derived-table-optimization">раздел 9.2.1.18.3</a>.</p>

<p>Возможно при определенных обстоятельствах изменить табличное использование
данных, применив <a href="#explain"><code>EXPLAIN SELECT</code></a>.
Это может произойти, если внешние запросы обращаются к
любым таблицам, а внутренний запрос вызывает сохраненную функцию, которая
изменяет одну или более строк таблицы. Предположите, что есть две таблицы
<code>t1</code> и <code>t2</code> в базе данных <code>d1</code>, создаваемой
как показано здесь:
<pre>
mysql&gt; CREATE DATABASE d1;
Query OK, 1 row affected (0.00 sec)

mysql&gt; USE d1;
Database changed

mysql&gt; CREATE TABLE t1 (c1 INT);
Query OK, 0 rows affected (0.15 sec)

mysql&gt; CREATE TABLE t2 (c1 INT);
Query OK, 0 rows affected (0.08 sec)
</pre>

Теперь мы создаем сохраненную функцию <code>f1</code>, которая изменяет
<code>t2</code>:
<pre>
mysql&gt; DELIMITER //
mysql&gt; CREATE FUNCTION f1(p1 INT) RETURNS INT
mysql&gt;   BEGIN
mysql&gt; INSERT INTO t2 VALUES (p1);
mysql&gt; RETURN p1;
mysql&gt;   END //
Query OK, 0 rows affected (0.01 sec)

mysql&gt; DELIMITER ;
</pre>

Ссылка на функцию непосредственно в
<a href="#explain"><code>EXPLAIN SELECT</code></a>
не имеет никакого эффекта на <code>t2</code>, как показано здесь:
<pre>
mysql&gt; SELECT * FROM t2;
Empty set (0.00 sec)

mysql&gt; EXPLAIN SELECT f1(5);
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra          |
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | No tables used |
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
1 row in set (0.00 sec)

mysql&gt; SELECT * FROM t2;
Empty set (0.00 sec)
</pre>

Это потому, что <a href="#select"><code>SELECT</code></a>
не ссылается ни на какие таблицы, как может быть замечено в столбцах
<code>table</code> и <code>Extra</code> вывода.
Это также верно для вложенного следующего
<a href="#select"><code>SELECT</code></a>:
<pre>
mysql&gt; EXPLAIN SELECT NOW() AS a1, (SELECT f1(5)) AS a2;
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra          |
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
|  1 | PRIMARY     | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | No tables used |
+----+-------------+-------+------+---------------+------+---------+------+------+----------------+
1 row in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+------------------------------------------+
| Level | Code | Message                                  |
+-------+------+------------------------------------------+
| Note  | 1249 | Select 2 was reduced during optimization |
+-------+------+------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT * FROM t2;
Empty set (0.00 sec)
</pre>

Однако, если внешний <a href="#select"><code>SELECT</code></a>
ссылаетя на любые таблицы, оптимизатор выполняет запрос в подзапросе также:
<pre>
mysql&gt; EXPLAIN SELECT * FROM t1 AS a1, (SELECT f1(5)) AS a2;
+----+-------------+------------------+--------+---------------+------+---------+------+------+---------------------+
| id | select_type | table            | type   | possible_keys | key  | key_len | ref  | rows | Extra               |
+----+-------------+------------------+--------+---------------+------+---------+------+------+---------------------+
|  1 | PRIMARY     | a1               | system | NULL          | NULL | NULL    | NULL | 0    | const row not found |
|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL          | NULL | NULL    | NULL | 1    |                     |
|  2 | DERIVED     | NULL             | NULL   | NULL          | NULL | NULL    | NULL | NULL | No tables used      |
+----+-------------+------------------+--------+---------------+------+---------+------+------+---------------------+
3 rows in set (0.00 sec)

mysql&gt; SELECT * FROM t2;
+----+
| c1 |
+----+
| 5  |
+----+
1 row in set (0.00 sec)
</pre>

Это также означает, что такой запрос
<a href="#explain"><code>EXPLAIN SELECT</code></a>,
как один показанный здесь, может занять много времени, чтобы выполнить,
потому что функция <a href="funct.htm#function_benchmark"><code>BENCHMARK()
</code></a> выполнена однажды для каждой строки в <code>t1</code>:
<pre>
EXPLAIN SELECT * FROM t1 AS a1, (SELECT BENCHMARK(1000000, MD5(NOW())));
</pre>

<h4><a name="subquery-errors"></a>14.2.10.9. Ошибки подзапроса</h4>
<p>Есть некоторые ошибки, которые применяются только к подзапросам.
Этот раздел описывает их.</p>

<ul><li><p>Неподдержанный синтаксис подзапроса:
<pre>
ERROR 1235 (ER_NOT_SUPPORTED_YET)
SQLSTATE = 42000
Message = "This version of MySQL doesn't yet support
'LIMIT &amp; IN/ALL/ANY/SOME subquery'"
</pre>

Это означает, что MySQL не поддерживает запросы следующей формы:
<pre>
SELECT * FROM t1 WHERE s1 IN (SELECT s2 FROM t2 ORDER BY s1 LIMIT 1)
</pre></li>

<li>Неправильное число столбцов в подзапросе:
<pre>
ERROR 1241 (ER_OPERAND_COL)
SQLSTATE = 21000
Message = "Operand should contain 1 column(s)"
</pre>

Эта ошибка происходит в таких случаях:
<pre>
SELECT (SELECT column1, column2 FROM t2) FROM t1;
</pre>

Вы можете использовать подзапрос, который возвращает много столбцов,
если цель сравнение строк. В других контекстах подзапрос должен быть
скалярным операндом. См.
<a href="#row-subqueries">раздел 14.2.10.5</a>.</li>

<li>Неправильное число строк от подзапроса:
<pre>
ERROR 1242 (ER_SUBSELECT_NO_1_ROW)
SQLSTATE = 21000
Message = "Subquery returns more than 1 row"
</pre>

Эта ошибка происходит для запросов, куда подзапрос должен возвратить самое
большее одну строку, но возвращает много строк. Рассмотрите следующий пример:
<pre>
SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2);
</pre>

Если <code>SELECT column1 FROM t2</code> вернет только одну строку,
предыдущий запрос будет работать. Если подзапрос возвратит больше, чем одну
строку, будет ошибка 1242. В этом случае запрос должен быть переписан так:
<pre>
SELECT * FROM t1 WHERE column1 = ANY (SELECT column1 FROM t2);
</pre></li>

<li>Неправильно используемая таблица в подзапросе:
<pre>
Error 1093 (ER_UPDATE_TABLE_USED)
SQLSTATE = HY000
Message = "You can't specify target table 'x'
for update in FROM clause"
</pre>

Эта ошибка происходит в таких случаях, как следующий, который пытается
изменить таблицу и выбрать из той же самой таблицы в подзапросе:
<pre>
UPDATE t1 SET column2 = (SELECT MAX(column1) FROM t1);
</pre>

Вы можете использовать подзапрос для назначения в пределах
<a href="#update"><code>UPDATE</code></a> потому, что подзапросы
являются законными в <a href="#update"><code>UPDATE</code></a> и
<a href="#delete"><code>DELETE</code></a> так же, как в
<a href="#select"><code>SELECT</code></a>.
Однако, Вы не можете использовать ту же самую таблицу (в этом случае таблица
<code>t1</code>) для обоих подзапросов <code>FROM</code> и цели обновления.
</p></li></ul>

<p>Для транзакционных механизмов хранения отказ подзапроса заставляет весь
запрос терпеть неудачу. Для нетранзакционных механизмов хранения модификации
данных, сделанные прежде, чем столкнулись с ошибкой, сохранены.</p>

<h4><a name="optimizing-subqueries"></a>14.2.10.10. Оптимизация подзапросов
</h4>
<p>Развитие является продолжающимся, таким образом, никакая подсказка по
оптимизации не надежна в течение длительного срока. Следующий список
обеспечивает некоторые интересные уловки, с которыми Вы могли бы работать:
</p>

<ul><li><p>Используйте пункты подзапроса, которые затрагивают число или
порядок строк в подзапросе. Например:
<pre>
SELECT * FROM t1 WHERE t1.column1 IN
         (SELECT column1 FROM t2 ORDER BY column1);
SELECT * FROM t1 WHERE t1.column1 IN (SELECT DISTINCT column1 FROM t2);
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2 LIMIT 1);
</pre></li>

<li>Замените соединение подзапросом. Например, попробуйте это:
<pre>
SELECT DISTINCT column1 FROM t1 WHERE t1.column1 IN (
       SELECT column1 FROM t2);
</pre>

Вместо этого:
<pre>
SELECT DISTINCT t1.column1 FROM t1, t2 WHERE t1.column1 = t2.column1;
</pre></li>

<li>Некоторые подзапросы могут быть преобразованы к соединениям для
совместимости с более старыми версиями MySQL, которые не поддерживают
подзапросы. Однако, в некоторых случаях, преобразование подзапроса к
соединению может улучшить работу. См.
<a href="#rewriting-subqueries">раздел 14.2.10.11</a>.</li>

<li>Переместите пункты снаружи во внутреннюю часть подзапрос.
Например, используйте этот запрос:
<pre>
SELECT * FROM t1 WHERE s1 IN (SELECT s1 FROM t1 UNION ALL SELECT s1 FROM t2);
</pre>

Вместо этого запроса:
<pre>
SELECT * FROM t1 WHERE s1 IN (SELECT s1 FROM t1) OR s1 IN (SELECT s1 FROM t2);
</pre>

Для другого примера используйте этот запрос:
<pre>
SELECT (SELECT column1 + 5 FROM t1) FROM t2;
</pre>

Вместо этого запроса:
<pre>
SELECT (SELECT column1 FROM t1) + 5 FROM t2;
</pre></li>

<li>Используйте подзапрос строки вместо коррелированого подзапроса. Например,
используйте этот запрос:
<pre>
SELECT * FROM t1 WHERE (column1,column2) IN (SELECT column1,column2 FROM t2);
</pre>

Вместо этого запроса:
<pre>
SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2
         WHERE t2.column1=t1.column1 AND
               t2.column2=t1.column2);
</pre></li>

<li>Используйте <code>NOT (a = ANY (...))</code> вместо
<code>a &lt;&gt; ALL (...)</code>.</li>
<li>Используйте <code>x = ANY (<em><code>таблица содержит
(1,2)</code></em>)</code> вместо <code>x=1 OR x=2</code>.</li>
<li>Используйте <code>= ANY</code> вместо <code>EXISTS</code>.</li>

<li>Для некоррелированых подзапросов, которые всегда возвращают одну строку,
<code>IN</code> всегда медленнее <code>=</code>. Например:
<pre>
SELECT * FROM t1 WHERE t1.<em><code>col_name</code></em> = (SELECT a
         FROM t2 WHERE b = <em><code>some_const</code></em>);
</pre>

Вместо этого запроса:
<pre>
SELECT * FROM t1 WHERE t1.<em><code>col_name</code></em> IN
       (SELECT a FROM t2 WHERE b = <em><code>some_const</code></em>);
</pre></li></ul>

<p>Эти уловки могли бы заставить программы идти быстрее или медленнее.
Используя средства MySQL, например,
<a href="funct.htm#function_benchmark"><code>BENCHMARK()</code></a>,
Вы можете понять, что помогает в Вашей ситуации. См.
<a href="funct.htm#information-functions">раздел 13.14</a>.</p>

<p>Некоторая оптимизация, которую делает сам MySQL:</p>
<ul><li><p>MySQL выполняет некоррелированые подзапросы только однажды.
Используйте <a href="#explain"><code>EXPLAIN</code></a>, чтобы
удостовериться, что данный подзапрос действительно является некоррелированым.
</li>

<li>MySQL переписывает <code>IN</code>, <code>ALL</code>, <code>ANY</code> и
<code>SOME</code> в попытке использовать в своих интересах возможность, что
столбцы избранного списка в подзапросе индексированы.</li>

<li>MySQL заменяет подзапросы следующей формы с функцией индекса-поиска,
который <a href="#explain"><code>EXPLAIN</code></a>
описывает как специальный тип соединения
(<a href="optimiz.htm#jointype_unique_subquery"><code>unique_subquery</code>
</a> или <a href="optimiz.htm#jointype_index_subquery"><code>index_subquery
</code></a>):
<pre>
... IN (SELECT <em><code>indexed_column</code></em> FROM <em><code>single_table</code></em> ...)
</pre></li>

<li>MySQL улучшает выражения следующей формы с вовлечением выражения
<a href="funct.htm#function_min"><code>MIN()</code></a> или
<a href="funct.htm#function_max"><code>MAX()</code></a>, если
значения <code>NULL</code> или пустые наборы вовлечены:
<pre>
<em><code>value</code></em> {ALL|ANY|SOME} {&gt; | &lt; | &gt;= | &lt;=}
(<em><code>uncorrelated subquery</code></em>)
</pre>

Например, этот <code>WHERE</code>:
<pre>
WHERE 5 &gt; ALL (SELECT x FROM t)
</pre>

мог бы быть обработан оптимизатором так:
<pre>
WHERE 5 &gt; (SELECT MAX(x) FROM t)
</pre></li></ul>
<p>См. также <a href="../../../dev.mysql.com/doc/internals/en/transformations.html"
target="_top">MySQL Internals: How MySQL Transforms Subqueries</a>.</p>

<h4><a name="rewriting-subqueries"></a>14.2.10.11.
Перезапись подзапросов как соединения</h4>
<p>Иногда есть другие способы проверить членство в ряде значений, чем
использование подзапроса. Кроме того, в некоторых случаях не только возможно
переписать запрос без подзапроса, но может быть более эффективно использовать
некоторые из этих методов, а не использовать подзапросы.
Один из них <code>IN()</code>:</p>

<p>Например, этот запрос:
<pre>
SELECT * FROM t1 WHERE id IN (SELECT id FROM t2);
</pre>

Может быть переписан как:
<pre>
SELECT DISTINCT t1.* FROM t1, t2 WHERE t1.id=t2.id;
</pre>

Запросы:
<pre>
SELECT * FROM t1 WHERE id NOT IN (SELECT id FROM t2);
SELECT * FROM t1 WHERE NOT EXISTS (SELECT id FROM t2 WHERE t1.id=t2.id);
</pre>

Могут быть переписаны как:
<pre>
SELECT table1.* FROM table1 LEFT JOIN table2 ON table1.id=table2.id
                WHERE table2.id IS NULL;
</pre>

<code>LEFT [OUTER] JOIN</code> может быть быстрее, чем эквивалентный
подзапрос, потому что сервер мог бы быть в состоянии оптимизировать это
лучше. До SQL-92 не существовали внешние соединения, таким образом,
подзапросы были единственным способом сделать определенные вещи. Сегодня
MySQL Server и много других современных систем базы данных предлагают широкий
диапазон внешних типов соединения.</p>

<p>MySQL Server поддерживает многотабличный
<a href="#delete"><code>DELETE</code></a>, который может
использоваться, чтобы эффективно удалить строки, основанные на информации от
одной таблицы или даже от многих таблиц в то же самое время. Многотабличный
<a href="#update"><code>UPDATE</code></a> также поддержан. См. разделы
<a href="#delete">14.2.2</a> и
<a href="#update">14.2.11</a>.</p>

<h3><a name="update"></a>14.2.11. UPDATE</h3>
<p>Однотабличный вариант:
<pre>
UPDATE [LOW_PRIORITY] [IGNORE] <em><code>table_reference</code></em>
SET <em><code>col_name1</code></em>={<em><code>expr1</code></em>|DEFAULT}
    [, <em><code>col_name2</code></em>={<em><code>expr2</code></em>|DEFAULT}] ...
[WHERE <em><code>where_condition</code></em>]
[ORDER BY ...]
[LIMIT <em><code>row_count</code></em>]
</pre>

Многотабличный вариант:
<pre>
UPDATE [LOW_PRIORITY] [IGNORE] <em><code>table_references</code></em>
SET <em><code>col_name1</code></em>={<em><code>expr1</code></em>|DEFAULT}
    [, <em><code>col_name2</code></em>={<em><code>expr2</code></em>|DEFAULT}] ...
[WHERE <em><code>where_condition</code></em>]
</pre>

Для однотабличного синтаксиса <a href="#update"><code>UPDATE</code>
</a> обновляет столбцы существующих строк в названной таблице с новыми
значениями. <code>SET</code> указывает, какие столбцы изменить и значения им
нужно дать. Каждое значение может быть дано как выражение или ключевое слово
<code>DEFAULT</code>, чтобы установить столбец явно в его значение по
умолчанию. <code>WHERE</code>, если дано, определяет условия, которые
идентифицируют который строки обновить. Без <code>WHERE</code>
все строки обновлены. Если <code>ORDER BY</code>
определен, строки обновлены в порядке, который определен.
<code>LIMIT</code> устанавливает границу числа строк, которые
могут быть обновлены.</p>

<p>Для многотабличного синтаксиса <a href="#update"><code>UPDATE
</code></a> строки обновлены в каждой таблице, названной в
<em><code>table_references</code></em>, которая удовлетворяет условиям.
Однажды обновлена каждая строка соответствия, даже если она соответствует
условиям многократно. Для многотабличного синтаксиса
<code>ORDER BY</code> и <code>LIMIT</code> не могут использоваться.</p>

<p>Для разделенных таблиц однотабличные и многотабличные
формы этого запросы поддерживают использование <code>PARTITION</code>
как часть табличной ссылки. Эта опция берет список из одного или более
раздела или подраздела (или оба). Только перечисленный раздел (или
подраздел) проверен на соответствия, и строка, которая не находится ни в
одном этом разделе или подразделе, не обновлена, удовлетворяет ли она
<em><code>where_condition</code></em> или нет.</p>

<p>В отличие от случая использования <code>PARTITION</code> с
<a href="#insert"><code>INSERT</code></a> или
<a href="#replace"><code>REPLACE</code></a>
допустимый запрос <code>UPDATE ... PARTITION</code> считают успешным, даже
если никакие строки в перечисленном разделе не соответствуют
<em><code>where_condition</code></em>.</p>
<p>См. <a href="partit.htm#partitioning-selection">раздел 20.5</a>.</p>

<p><em><code>where_condition</code></em> выражение, которое оценивается к
истине для каждой строки, которая будет обновлена. Для синтаксиса выражения
см. <a href="lang.htm#expressions">раздел 10.5</a>.</p>

<p><em><code>table_references</code></em> и
<em><code>where_condition</code></em> определены как описано в
<a href="#select">раздел 14.2.9</a>.</p>

<p>Вы нуждаетесь в привилегии <a href="security.html#priv_update"><code>
UPDATE</code></a> только для столбцов, на которые ссылаются в
<a href="#update"><code>UPDATE</code></a>, которые фактически
обновлены. Вы нуждаетесь только в привилегии
<a href="security.html#priv_select"><code>SELECT</code></a>
для любых столбцов, которые считаны, но не изменены.</p>

<p><a href="#update"><code>UPDATE</code></a>
поддерживает следующие модификаторы:</p>
<ul><li><p>С <code>LOW_PRIORITY</code> выполнение
<a href="#update"><code>UPDATE</code></a> отсрочен, пока никакие
другие клиенты не перестанут читать из таблицы. Это затрагивает только
механизмы хранения, которые используют только блокировку на уровне таблицы
(<code>MyISAM</code>, <code>MEMORY</code> и <code>MERGE</code>).</li>

<li>С <code>IGNORE</code> запрос обновления не прерывается,
даже если ошибки происходят во время обновления. Строки, для которых
конфликты дубликатов ключей происходят на уникальном значении ключа, не
обновлены. Строки, обновленные к значениям, которые вызвали бы конверсионные
ошибки данных, обновлены к самым близким допустимым значениям вместо этого.
</p></li></ul>

<p><a href="#update"><code>UPDATE IGNORE</code></a>, включая тех,
которые имеют <code>ORDER BY</code> отмечены как опасные для основанной на
запросе репликации. Это потому, что порядок, в котором обновлены строки,
определяет, какие строки проигнорированы. С этим изменением такие запросы
производят предупреждение в журнале, используя основанный на запросе режим и
зарегистрированы, используя основанный на строке формат, используя режим
<code>MIXED</code> (Bug #11758262, Bug #50439), см.
<a href="replica.htm#replication-rbr-safe-unsafe">раздел 19.2.1.3</a>.</p>

<p>Если Вы получаете доступ к столбцу от таблицы, которая будет обновлена в
выражении, <a href="#update"><code>UPDATE</code></a>
использует текущее значение столбца. Например, следующий запрос
увеличивает <code>col1</code> на единицу:
<pre>
UPDATE t1 SET col1 = col1 + 1;
</pre>

Второе назначение устанавливает <code>col2</code>
к (обновленному) текущему значению <code>col1</code>, а не оригинальному
<code>col1</code>. Результат:
<code>col1</code> и <code>col2</code>
имеют то же самое значение. Это поведение отличается от стандартного SQL.
<pre>
UPDATE t1 SET col1 = col1 + 1, col2 = col1;
</pre>

Однотабличный <a href="#update"><code>UPDATE</code></a>
вообще оценен слева направо. Для многотабличных обновлений нет никакой
гарантии, что назначения выполнены в любом особом порядке.</p>

<p>Если Вы устанавливаете столбец в значение, которое он в настоящее время
имеет, MySQL замечает это и не обновляет его.</p>
<p>Если Вы обновляете столбец, который был объявлен <code>NOT NULL</code>,
устанавливая в <code>NULL</code>, ошибка происходит если строгий режим SQL
включен, иначе столбец установлен в неявное значение по умолчанию для типа
данных столбца, и количество предупреждений увеличено. Неявное значение по
умолчанию <code>0</code> для числовых типов, пустая строка (<code>''</code>)
для строковых типов и <span><span>нулевое</span></span> значение
для типов времени и даты. См. <a href="types.htm#data-type-defaults">раздел
12.7</a>.</p>

<p>Если произведенный столбец обновлен явно, единственное разрешенное
значение <code>DEFAULT</code>. Для информации о произведенных столбцах см.
<a href="#create-table-generated-columns">раздел 14.1.15.5</a>.</p>

<p><a href="#update"><code>UPDATE</code></a>
возвращает число строк, которые были фактически изменены.
<a href="connect.htm#mysql-info"><code>mysql_info()</code></a> в C API
возвращает число строк, которые были соответствующими и обновлены и число
предупреждений, которые произошли во время <a href="#update"><code>
UPDATE</code></a>.</p>

<p>Вы можете использовать <code>LIMIT
<em><code>row_count</code></em></code>, чтобы ограничить контекст
<a href="#update"><code>UPDATE</code></a>. <code>LIMIT</code>
ограничение соответствующих строк. Запрос останавливается, как только он
нашел <em><code>row_count</code></em> строк, которые удовлетворяют
<code>WHERE</code>, неважно, были ли они фактически изменены.</p>

<p>Если <a href="#update"><code>UPDATE</code></a>
запрос включает <code>ORDER BY</code>,
строки обновлены в порядке, определенном параметром. Это может быть полезно
в определенных ситуациях, которые могли бы иначе привести к ошибке.
Предположите что таблица <code>t</code> содержит столбец <code>id</code>,
у которого есть уникальный индекс. Следующий запрос может потерпеть неудачу с
ошибкой дубликата ключа, в зависимости от порядка,
в котором обновлены строки:
<pre>
UPDATE t SET id = id + 1;
</pre>

Например, если таблица содержит 1 и 2 в столбце <code>id</code>
и 1 обновлен к 2 прежде, чем 2 будет обновлен к 3, ошибка происходит. Чтобы
избежать этой проблемы, добавьте <code>ORDER BY</code>, чтобы строки с
большим <code>id</code> были обновлены перед теми с меньшими значениями:
<pre>
UPDATE t SET id = id + 1 ORDER BY id DESC;
</pre>

Вы можете также использовать <a href="#update"><code>UPDATE</code>
</a>, покрывающий много таблиц. Однако, Вы не можете использовать <code>ORDER
BY</code> или <code>LIMIT</code> с многотабличным
<a href="#update"><code>UPDATE</code></a>.
<em><code>table_references</code></em>
перечисляет таблицы, вовлеченные в соединение. Его синтаксис описан в
<a href="#join">разделе 14.2.9.2</a>:
<pre>
UPDATE items,month SET items.price=month.price
       WHERE items.id=month.id;
</pre>

Предыдущий пример показывает внутреннее соединение, которое использует
оператор запятой, но многотабличный
<a href="#update"><code>UPDATE</code></a>
может использовать любой тип соединения, разрешенного в
<a href="#select"><code>SELECT</code></a>, например, <code>LEFT JOIN
</code>.</p>

<p>Если Вы используете многотабличный <a href="#update"><code>UPDATE
</code></a> с таблицами, для которых есть ограничения внешнего ключа,
оптимизатор MySQL мог бы обработать таблицы в порядке, который отличается от
нужного из их родительских/дочерних отношений. В этом случае запрос терпит
неудачу и откатывается. Вместо этого обновите единственную таблицу и
положитесь на <code>ON UPDATE</code>, который обеспечивает <code>InnoDB
</code>, чтобы заставить другие таблицы быть измененными соответственно. См.
<a href="innodb.htm#innodb-foreign-key-constraints">раздел 16.8.6</a>.</p>

<p>Вы не можете обновить таблицу и выбрать из той же
самой таблицы в подзапросе.</p>
<p>В MySQL 8.0 <code>UPDATE</code>
на разделенной таблице, используя механизм хранения с
блокировками на уровне таблицы, блокирует
только раздел, содержащий строки, которые соответствуют
<code>UPDATE</code> <code>WHERE</code>,
пока ни один из столбцов раздела не обновлен. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<h2><a name="sql-syntax-transactions"></a>14.3.
Транзакционные и блокирующие запросы</h2>
<p>MySQLподдерживает местные транзакции (в пределах данного сеанса клиента)
через запросы <a href="#commit"><code>SET autocommit</code></a>,
<a href="#commit"><code>START TRANSACTION</code></a>,
<a href="#commit"><code>COMMIT</code></a> и
<a href="#commit"><code>ROLLBACK</code></a>. См
<a href="#commit">раздел 14.3.1</a>.
Операционная поддержка XA позволяет MySQL участвовать в распределенных
транзакциях также. См. <a href="#xa">раздел 14.3.7</a>.</p>

<h3><a name="commit"></a>14.3.1. START TRANSACTION, COMMIT и ROLLBACK</h3>
<pre>
START TRANSACTION
[<em><code>transaction_characteristic</code></em> [, <em><code>transaction_characteristic</code></em>] ...]

<em><code>transaction_characteristic</code></em>:
WITH CONSISTENT SNAPSHOT
  | READ WRITE
  | READ ONLY

BEGIN [WORK]
COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE]
SET autocommit = {0 | 1}
</pre>

Эти запросы обеспечивают управление использованием
<a href="glossary.htm#glos_transaction">транзакциями</a>:</p>
<ul><li><p><code>START TRANSACTION</code> или
<code>BEGIN</code> запустит новую транзакцию.</li>

<li><code>COMMIT</code> передает текущую транзакцию, производя
ее постоянные изменения.</li>
<li><code>ROLLBACK</code> удаляет текущую транзакцию, отменяя ее изменения.
</li>
<li><code>SET autocommit</code> отключает или включает режим
автозавершения транзакций для текущего сеанса.</p></li></ul>

<p>По умолчанию MySQL выполняется с включенным
<a href="glossary.htm#glos_autocommit">autocommit</a>.
Это означает, что как только Вы выполняете запрос, который обновляет
(изменяет) таблицу, MySQL хранит обновление на диске, чтобы сделать это
постоянным. Изменение не может быть удалено до прежнего уровня.</p>

<p>Чтобы отключить режим неявно для единственного ряда запросов,
используют <code>START TRANSACTION</code>:
<pre>
START TRANSACTION;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summary=@A WHERE type=1;
COMMIT;
</pre>

С <code>START TRANSACTION</code> autocommit
остается отключенным, пока Вы не заканчиваете транзакцию
<code>COMMIT</code> или <code>ROLLBACK</code>. Режим autocommit тогда
возвращается в его предыдущий статус.</p>

<p><code>START TRANSACTION</code> разрешает несколько модификаторов.
Чтобы определить много модификаторов, отделите их запятыми.</p>
<ul><li><p> <code>WITH CONSISTENT SNAPSHOT</code> запускает
<a href="glossary.htm#glos_consistent_read">последовательное чтение</a>
для механизмов хранения, которые способны к нему. Это применяется только к
<code>InnoDB</code>. Эффект тот же самый, как <code>START TRANSACTION</code>,
сопровождаемый <a href="#select"><code>SELECT</code></a> из любой
таблицы <code>InnoDB</code>, см.
<a href="innodb.htm#innodb-consistent-read">раздел 16.5.2.3</a>.
<code>WITH CONSISTENT SNAPSHOT</code> не изменяет текущий операционный
<a href="glossary.htm#glos_isolation_level">уровень изоляции</a>,
таким образом, это обеспечивает последовательный снимок, только если текущий
уровень изоляции разрешает последовательное чтение.
Единственный уровень изоляции, который разрешает последовательное чтение, это
<a href="innodb.htm#isolevel_repeatable-read"><code>REPEATABLE READ</code>
</a>. Для всех других уровней изоляции <code>WITH CONSISTENT SNAPSHOT</code>
проигнорирован. Предупреждение произведено, когда
<code>WITH CONSISTENT SNAPSHOT</code> проигнорирован.</li>

<li><code>READ WRITE</code> и <code>READ ONLY</code>
устанавливают операционный режим доступа. Они разрешают или запрещают
изменения таблиц, используемых в транзакции. <code>READ ONLY</code>
ограничение препятствует тому, чтобы транзакция изменила или заблокировала
транзакционные и нетранзакционные таблицы, которые видимы другим транзакциям.
Транзакция может все еще изменить или заблокировать временные таблицы.</p>

<p>MySQL включает дополнительную оптимизацию для запросов на
<code>InnoDB</code>, когда транзакция, как известно, только для чтения.
Определение <code>READ ONLY</code> гарантирует, что эта оптимизация применена
в случаях, где состояние только для чтения не может быть определено
автоматически. См. <a href="optimiz.htm#innodb-performance-ro-txn">раздел
9.5.3</a>.</p>

<p>Если никакой режим доступа не определен, режим по умолчанию применяется.
Если значение по умолчанию не было изменено, это чтение-запись. Не разрешено
определять сразу <code>READ WRITE</code> и <code>READ ONLY</code>.</p>

<p>В режиме только для чтения остается возможным изменить таблицы,
составленные с <code>TEMPORARY</code>, используя запросы DML. Изменения,
произведенные запросами DDL, не разрешены, так же,
как с постоянными таблицами.</p>
<p>Подробности в <a href="#set-transaction">разделе 14.3.6</a>.</p>

<p>Если включена <a href="server.htm#sysvar_read_only"><code>read_only
</code></a>, явно запуская транзакцию с <code>START TRANSACTION READ WRITE
</code> Вы должны иметь привилегию <a href="security.html#priv_super"><code>
SUPER</code></a>.</p></li></ul>

<p>Многие API для того, чтобы написать приложения-клиенты MySQL (такие, как
JDBC), обеспечивают их собственные методы для того, чтобы они начали
транзакции, которые могут (и иногда должны) использоваться вместо того, чтобы
послать <code>START TRANSACTION</code>. См. <a href="connect.htm">главу 25
</i></a>.</p>

<p>Чтобы отключить режим явно:
<pre>
SET autocommit=0;
</pre>

После отключения autocommit установкой переменной
<a href="server.htm#sysvar_autocommit"><code>autocommit</code></a> в 0,
изменения безопасных от транзакции таблиц (таких, как
<a href="innodb.htm"><code>InnoDB</code></a> или
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>)
не сделаны постоянными немедленно. Вы должны использовать
<a href="#commit"><code>COMMIT</code></a>, чтобы
сохранить Ваши изменения нв диск, или <code>ROLLBACK</code>, чтобы
проигнорировать все изменения.</p>

<p><a href="server.htm#sysvar_autocommit"><code>autocommit</code></a>
переменная сеанса и должна быть установлена для каждого сеанса. Чтобы
отключить режим для каждого нового соединения, см. описание переменной
<a href="server.htm#sysvar_autocommit"><code>autocommit</code></a> в
<a href="server.htm#server-system-variables">разделе 6.1.5</a>.</p>

<p><code>BEGIN</code> и <code>BEGIN WORK</code> поддержаны как псевдонимы
<code>START TRANSACTION</code>, который является стандартным синтаксисом SQL,
рекомендуемым способ запустить транзакцию, и разрешает модификаторы,
которые в <code>BEGIN</code> отсутствуют.</p>

<p><code>BEGIN</code> отличается от использования ключевого слова
<code>BEGIN</code>, которое запускает <a href="#begin-end"><code>BEGIN
... END</code></a>. Последний не начинает транзакцию. См.
<a href="#begin-end">раздел 14.6.1</a>.</p>

<p>В пределах всех сохраненных программ (хранимые процедуры и функции,
триггеры и события), анализатор обрабатывает <code>BEGIN [WORK]</code>
как начало <a href="#begin-end"><code>BEGIN ... END</code></a>.
Начните транзакцию в этом контексте с
<a href="#commit"><code>START TRANSACTION</code></a>.</p>

<p><code>WORK</code> поддержано для <code>COMMIT</code> и
<code>ROLLBACK</code>, как <code>CHAIN</code> и <code>RELEASE</code>.
<code>CHAIN</code> и <code>RELEASE</code> могут использоваться для
дополнительного управления операционным завершением. Значение
переменной <a href="server.htm#sysvar_completion_type"><code>
completion_type</code></a> определяет поведение завершения по умолчанию. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p><code>AND CHAIN</code> заставляет новую транзакцию начинаться, как только
текущяя заканчивается, и у новой транзакции будет тот же самый уровень
изоляции, как у только что законченной транзакции. <code>RELEASE</code>
заставляет сервер разъединять текущий сеанс клиента после завершения текущей
транзакции. Включение ключевого слова <code>NO</code> подавляет завершение
<code>CHAIN</code> или <code>RELEASE</code>, которое может быть полезным,
если переменная <a href="server.htm#sysvar_completion_type"><code>
completion_type</code></a> установлена, чтобы вызвать завершение объединения
в цепочку или выпуска по умолчанию.</p>

<p>Начало транзакции заставляет любую транзакцию на ожидании быть переданной.
См. <a href="#implicit-commit">раздел 14.3.3</a>.</p>
<p>Начало транзакции также снимает табличные блокировки, приобретенные с
<a href="#lock-tables"><code>LOCK TABLES</code></a>, как если бы Вы
выполнили <a href="#lock-tables"><code>UNLOCK TABLES</code></a>.
Начало транзакции не снимает глобальную блокировку чтения, приобретенную с
<a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>.</p>

<p>Для лучших результатов транзакции должны быть выполнены, используя только
таблицы, которыми управляет единственный безопасный для транзакции механизм
хранения. Иначе, следующие проблемы могут произойти:</p>

<ul><li><p>Если Вы используете таблицы больше чем от одного безопасного для
транзакции механизма хранения (такого, как <code>InnoDB</code>),
и операционный уровень изоляции не
<a href="innodb.htm#isolevel_serializable"><code>SERIALIZABLE</code></a>,
возможно, что, когда одна транзакция передает, другая продолжающаяся
транзакция, которая использует те же самые таблицы, будет видеть только
некоторые из изменений, произведенные первой. Таким образом, валентность
транзакций не гарантируется со смешанными механизмами, и могут быть
несогласованности. Если транзакции смешанного механизма являются нечастыми,
Вы можете использовать <a href="#set-transaction"><code>SET
TRANSACTION ISOLATION LEVEL</code></a>, чтобы установить уровень изоляции в
<a href="innodb.htm#isolevel_serializable"><code>SERIALIZABLE</code></a> на
основе транзакции по мере необходимости.</li>

<li>Если Вы используете таблицы, которые не безопасны для
транзакции в пределах транзакции, изменения тех таблиц сохранены сразу,
независимо от состояния режима autocommit.</li>

<li>Если Вы используете <a href="#commit"><code>ROLLBACK</code></a>
после обновления нетранзакционной таблицы в пределах транзакции, будет
предупреждение <a href="error.htm#error_er_warning_not_complete_rollback">
<code>ER_WARNING_NOT_COMPLETE_ROLLBACK</code></a>.
Изменения безопасных для транзакции таблиц откатываются до прежнего уровня,
но небезопасные для транзакции таблицы не изменяются.</p></li></ul>

<p>Каждая транзакция сохранена в двоичном журнале в одном куске на
<a href="#commit"><code>COMMIT</code></a>.
Ттранзакции, которые откатились, не зарегистрированы.
<span><strong>Исключение</strong></span>: Модификации нетранзакционных таблиц
не могут быть отменены. Если транзакция, которая откачена, включает
модификации нетранзакционных таблиц, вся транзакция зарегистрирована с
<a href="#commit"><code>ROLLBACK</code></a>
в конце, чтобы гарантировать, что модификации к нетранзакционным таблицам
копируются. См. <a href="server.htm#binary-log">раздел 6.4.4</a>.</p>

<p>Вы можете изменить уровень изоляции или режим доступа для транзакций с
<a href="#set-transaction"><code>SET TRANSACTION</code></a>. См.
<a href="#set-transaction">раздел 14.3.6</a>.</p>

<p>Откатывание назад может быть медленной работой, которая может произойти
неявно без пользователя, явно просившего этого (например, когда ошибка
происходит). Из-за этого <a href="#show-processlist"><code>SHOW
PROCESSLIST</code></a> показывает <code>Rolling back</code> в столбце
<code>State</code> для сеанса, не только для явных отмен, выполненных с
<a href="#commit"><code>ROLLBACK</code></a>, но также и для неявных.
</p>

<p>В MySQL 8.0 <code>BEGIN</code>, <code>COMMIT</code> и
<code>ROLLBACK</code> не затронуты правилами
<a href="replica.htm#option_mysqld_replicate-do-db"><code>
--replicate-do-db</code></a> или
<a href="replica.htm#option_mysqld_replicate-ignore-db"><code>
--replicate-ignore-db</code></a>.</p>

<h3><a name="cannot-roll-back"></a>14.3.2.
Запросы, которые не могут быть отменены</h3>
<p>Некоторые запросы не могут быть отменены. Вообще, они включают язык
определения данных (DDL), такие запросы, как те, которые создают или
удаляют базы данных, те, которые создают, удаляют или изменяют таблицы
или сохраненные подпрограммы.</p>

<p>Вы должны разработать свои транзакции, чтобы не включать такие запросы.
Если Вы делаете запрос рано в транзакции, которая не может быть удалена, а
затем другой запрос позже терпит неудачу, полный эффект транзакции не может
быть отменен в таких случаях.</p>

<h3><a name="implicit-commit"></a>14.3.3.
Запросы, которые неявно закрывают транзакцию</h3>
<p>Запросы, перечисленные в этом разделе (и любые синонимы для них) неявно
заканчивают любую транзакцию, активную в текущем сеансе, как будто Вы сделали
<a href="#commit"><code>COMMIT</code></a>
прежде, чем выполнить запрос.</p>

<p>Большинство этих запросов также вызывает неявное закрытие
после выполнения. Намерение состоит в том, чтобы обработать каждый такой
запрос в своей собственной специальной транзакции, потому что это не может
быть отменено так или иначе. Операционное управление и запросы блокировки это
исключения: если неявное завершение происходит перед выполнением, другое
не происходит после.</p>

<ul><li><p>Запросы <span><strong>Data definition language (DDL), которые
определяют или изменяют объекты базы данных.</strong></span>
<a href="#alter-event"><code>ALTER EVENT</code></a>,
<a href="#alter-function"><code>ALTER FUNCTION</code></a>,
<a href="#alter-procedure"><code>ALTER PROCEDURE</code></a>,
<a href="#alter-server"><code>ALTER SERVER</code></a>,
<a href="#alter-table"><code>ALTER TABLE</code></a>,
<a href="#alter-view"><code>ALTER VIEW</code></a>,
<a href="#create-database"><code>CREATE DATABASE</code></a>,
<a href="#create-event"><code>CREATE EVENT</code></a>,
<a href="#create-function"><code>CREATE FUNCTION</code></a>,
<a href="#create-index"><code>CREATE INDEX</code></a>,
<a href="#create-procedure"><code>CREATE PROCEDURE</code></a>,
<a href="#create-role"><code>CREATE ROLE</code></a>,
<a href="#create-server"><code>CREATE SERVER</code></a>,
<a href="#create-table"><code>CREATE TABLE</code></a>,
<a href="#create-trigger"><code>CREATE TRIGGER</code></a>,
<a href="#create-view"><code>CREATE VIEW</code></a>,
<a href="#drop-database"><code>DROP DATABASE</code></a>,
<a href="#drop-event"><code>DROP EVENT</code></a>,
<a href="#drop-function"><code>DROP FUNCTION</code></a>,
<a href="#drop-index"><code>DROP INDEX</code></a>,
<a href="#drop-procedure"><code>DROP PROCEDURE</code></a>,
<a href="#drop-role"><code>DROP ROLE</code></a>,
<a href="#drop-server"><code>DROP SERVER</code></a>,
<a href="#drop-table"><code>DROP TABLE</code></a>,
<a href="#drop-trigger"><code>DROP TRIGGER</code></a>,
<a href="#drop-view"><code>DROP VIEW</code></a>,
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a>,
<a href="#rename-table"><code>RENAME TABLE</code></a>,
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a> и
<a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.</p>

<p><a href="#create-table"><code>CREATE TABLE</code></a> и
<a href="#drop-table"><code>DROP TABLE</code></a> не передают
транзакцию, если ключевое слово <code>TEMPORARY</code> используется.
Это не относится к другим операциям на временных таблицах, например,
<a href="#alter-table"><code>ALTER TABLE</code></a> и
<a href="#create-index"><code>CREATE INDEX</code></a>,
которые действительно закрывают транзакцию. Однако, хотя не происходит
неявное завершение, ни один запрос не может быть удален, что означает, что
использование таких запросов заставляет транзакционную валентность быть
нарушенной. Например, если Вы используете <a href="#create-table">
<code>CREATE TEMPORARY TABLE</code></a>, а затем отмените транзакцию,
таблица остается существующей.</p>

<p><a href="#create-table"><code>CREATE TABLE</code></a> в
<code>InnoDB</code> обработан как единственная транзакция. Это означает, что
<a href="#commit"><code>ROLLBACK</code></a> от пользователя не
отменяет <a href="#create-table"><code>CREATE TABLE</code></a>,
сделанные во время этой транзакции.</p>

<p><a href="#create-table"><code>CREATE TABLE ... SELECT</code></a>
неявно передает прежде и после выполнения запроса, когда Вы составляете
невременные таблицы. Этого не происходит для
<code>CREATE TEMPORARY TABLE ... SELECT</code>.
Это должно предотвратить проблему при репликации, где таблица могла быть
составлена на ведущем устройстве после отката, но не зарегистрирована в
двоичном журнале, а поэтому не копируется к ведомому устройству.</li>

<li><span><strong>Запросы, которые неявно используют или изменяют таблицы в
базе данных <code>mysql</code>.</strong></span>
<a href="#alter-user"><code>ALTER USER</code></a>,
<a href="#create-user"><code>CREATE USER</code></a>,
<a href="#drop-user"><code>DROP USER</code></a>,
<a href="#grant"><code>GRANT</code></a>,
<a href="#rename-user"><code>RENAME USER</code></a>,
<a href="#revoke"><code>REVOKE</code></a> и
<a href="#set-password"><code>SET PASSWORD</code></a>.</li>

<li><span><strong>Операционное управление и запросы блокировки.</strong>
</span> <a href="#commit"><code>BEGIN</code></a>,
<a href="#lock-tables"><code>LOCK TABLES</code></a>, <code>SET
autocommit = 1</code> (если значение еще не 1),
<a href="#commit"><code>START TRANSACTION</code></a> и
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>.</p>

<p><a href="#lock-tables"><code>UNLOCK TABLES</code></a>
передает транзакцию, только если любые таблицы в настоящее время
блокировались с <a href="#lock-tables"><code>LOCK TABLES</code></a>,
чтобы приобретать нетранзакционные табличные блокировки. Этого не происходит
для <a href="#lock-tables"><code>UNLOCK TABLES</code></a> с
<a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>,
потому что последний запрос не приобретает блокировки на уровне таблицы.</p>

<p>Транзакции не могут быть вложены. Это последствие неявного закрытия,
выполненного для любой текущей транзакции, когда Вы выполняете
<a href="#commit"><code>START TRANSACTION</code></a>
или один из его синонимов.</p>

<p>Запросы, которые вызывают неявное закрытие, не могут использоваться в
транзакции XA в то время, как транзакция
находится в состоянии <code>ACTIVE</code>.</p>

<p><a href="#commit"><code>BEGIN</code></a>
отличается от использования ключевого слова <code>BEGIN</code>, которое
начинает блок <a href="#begin-end"><code>BEGIN ... END</code></a>.
Последний не вызывает неявное закрытие. См. <a href="#begin-end">
раздел 14.6.1</a>.</li>

<li><span><strong>Запросы загрузки данных.</strong></span>
<a href="#load-data"><code>LOAD DATA INFILE</code></a>.
<a href="#load-data"><code>LOAD DATA INFILE</code></a>
неявно передают только для таблиц, использующих механизм хранения
<a href="../../../dev.mysql.com/doc/refman/5.7/en/mysql-cluster.html"
target="_top"><code>NDB</code></a>.</li>

<li><span><strong>Административные запросы.</strong></span>
<a href="#analyze-table"><code>ANALYZE TABLE</code></a>,
<a href="#cache-index"><code>CACHE INDEX</code></a>,
<a href="#check-table"><code>CHECK TABLE</code></a>,
<a href="#flush"><code>FLUSH</code></a>,
<a href="#load-index"><code>LOAD INDEX INTO CACHE</code></a>,
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>,
<a href="#repair-table"><code>REPAIR TABLE</code></a> и
<a href="#reset"><code>RESET</code></a>.</li>

<li><span><strong>Управление репликацией</strong></span>.
<a href="#start-slave"><code>START SLAVE</code></a>,
<a href="#stop-slave"><code>STOP SLAVE</code></a>,
<a href="#reset-slave"><code>RESET SLAVE</code></a> и
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>.
</p></li></ul>

<h3><a name="savepoint"></a>14.3.4. SAVEPOINT, ROLLBACK TO
SAVEPOINT и RELEASE SAVEPOINT</h3>
<pre>
SAVEPOINT <em><code>identifier</code></em>
ROLLBACK [WORK] TO [SAVEPOINT] <em><code>identifier</code></em>
RELEASE SAVEPOINT <em><code>identifier</code></em>
</pre>

<code>InnoDB</code> поддерживает запросы SQL
<a href="#savepoint"><code>SAVEPOINT</code></a>,
<a href="#savepoint"><code>ROLLBACK TO SAVEPOINT</code></a>,
<a href="#savepoint"><code>RELEASE SAVEPOINT</code></a>
и дополнительное ключевое слово <code>WORK</code> для
<a href="#commit"><code>ROLLBACK</code></a>.</p>

<p><a href="#savepoint"><code>SAVEPOINT</code></a> устанавливает
точку сохранения с именем <em><code>identifier</code></em>.
Если у текущей транзакции есть точка сохранения с тем же самым именем, старая
удалена, новая установлена.</p>

<p><a href="#savepoint"><code>ROLLBACK TO SAVEPOINT</code></a>
откатывает транзакцию на точку сохранения, не заканчивая транзакцию.
Модификации, которые текущая транзакция сделала со строками после точки
сохранения, отменены, но <code>InnoDB</code> <span><em>не</em></span>
снимает блокировки строки, которые были сохранены в памяти после точки.
Для новой вставленной строки информацию о блокировке переносит операционное
ID, сохраненное в строке, блокировка не сохранена отдельно в памяти. В этом
случае блокировка строки снята при отмене. Точки, которые были установлены в
более позднее время, чем названная, удалены.</p>

<p>Если <a href="#savepoint"><code>ROLLBACK TO SAVEPOINT</code></a>
возвращает следующую ошибку, это означает, что никакой точки с указанным
именем не существует:
<pre>
ERROR 1305 (42000): SAVEPOINT <em><code>identifier</code></em> does not exist
</pre>

<a href="#savepoint"><code>RELEASE SAVEPOINT</code></a>
удаляет названную точку из набора точек текущей транзакции. Завершение или
отмена не происходят. Это ошибка, если точка не существует.</p>

<p>Все точки текущей транзакции удалены, если Вы выполняете
<a href="#commit"><code>COMMIT</code></a> или
<a href="#commit"><code>ROLLBACK</code></a>,
который не называет точку.</p>

<p>Новый уровень точки создается, когда сохраненная функция вызвана, или
триггер активирован. Точки на предыдущих уровнях становятся недоступными и
таким образом не находятся в противоречии с точками на новом уровне. Когда
функция или триггер заканчиваются, любые точки, который это создало, сняты,
и предыдущий уровень точек восстановлен.</p>

<h3><a name="lock-tables"></a>14.3.5. LOCK TABLES и UNLOCK TABLES</h3>
<pre>
LOCK TABLES
<em><code>tbl_name</code></em> [[AS] <em><code>alias</code></em>] <em><code>lock_type</code></em>
[, <em><code>tbl_name</code></em> [[AS] <em><code>alias</code></em>] <em><code>lock_type</code></em>] ...
<em><code>lock_type</code></em>:
READ [LOCAL]
  | [LOW_PRIORITY] WRITE
UNLOCK TABLES
</pre>

MySQL позволяет сеансам клиента приобрести табличные блокировки явно с целью
сотрудничества с другими сеансами для доступа к таблицам, или препятствовать
тому, чтобы другие сеансы изменили таблицы во время периодов, когда сеанс
требует эксклюзивного доступа к ним. Сеанс может приобрести или выпустить
блокировки только для себя. Один сеанс не может приобрести блокировки за
другой сеанс или выпустить блокировки, проводимые другим сеансом.</p>

<p>Блокировки могут использоваться, чтобы подражать транзакциям или получить
больше скорости, обновляя таблицы. Это объяснено более подробно
позже в этом разделе.</p>

<p><a href="#lock-tables"><code>LOCK TABLES</code></a>
явно приобретает табличные блокировки. Табличные блокировки могут быть
приобретены для базовых таблиц или представлений. Вы должны иметь привилегии
<a href="security.html#priv_lock-tables"><code>LOCK TABLES</code></a> и
<a href="security.html#priv_select"><code>SELECT</code></a>
для каждого объекта, который будет заблокирован.</p>

<p>Для блокировки представления <a href="#lock-tables"><code>LOCK
TABLES</code></a> добавляет все базовые таблицы, используемые в
представлении, и блокирует их автоматически. Если Вы блокируете таблицу явно
с <a href="#lock-tables"><code>LOCK TABLES</code></a>,
любые таблицы, используемые в триггерах, также заблокированы неявно, как
описано в <a href="#lock-tables-and-triggers">разделе 14.3.5.2</a>.
</p>

<p><a href="#lock-tables"><code>UNLOCK TABLES</code></a>
явно снимает любые табличные блокировки текущего сеанса.
<a href="#lock-tables"><code>LOCK TABLES</code></a>
неявно снимает любые табличные блокировки, проводимые текущим сеансом прежде,
чем приобрести новые блокировки.</p>

<p>Другое использование <a href="#lock-tables"><code>UNLOCK
TABLES</code></a> должно выпустить глобальную блокировку чтения,
приобретенную с запросом <a href="#flush"><code>FLUSH TABLES WITH READ
LOCK</code></a>, что позволяет Вам заблокировать все таблицы во всех базах
данных. См. <a href="#flush">раздел 14.7.6.3</a>.
Это очень удобный способ получить резервные копии, если у Вас есть файловая
система, такая как Veritas, которая может взять снимки вовремя.</p>

<p>Табличная блокировка защищает только от несоответствующих чтений или
записей другими сеансами. Сеанс, держащий блокировку <code>WRITE</code>,
может выполнить на уровне таблицы такие операции, как
<a href="#drop-table"><code>DROP TABLE</code></a> или
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a>.
Для сеансов, держащих блокировку <code>READ</code>, операции
<a href="#drop-table"><code>DROP TABLE</code></a> и
<a href="#truncate-table"><code>TRUNCATE TABLE</code></a> не разрешены.
</p>

<p>Следующее обсуждение применяется только к таблицам
не-<code>TEMPORARY</code>. <a href="#lock-tables"><code>LOCK TABLES
</code></a> разрешен (но проигнорирован) для <code>TEMPORARY</code>.
К таблице может получить доступ свободно сеанс, в пределах которого она
создавалась, независимо от того, чем другая блокировка может быть в
действительности. Никакая блокировка не необходима, потому что никакой другой
сеанс не может видеть таблицу.</p>

<p><span><strong>Правила для приобретения блокировки</strong></span></p>
<p>Чтобы приобрести табличные блокировки в пределах текущего сеанса,
используйте <a href="#lock-tables"><code>LOCK TABLES</code></a>.
Следующие типы блокировки доступны:</p>

<p><code>READ [LOCAL]</code>:</p>
<ul><li><p>Сеанс, который держит блокировку, может читать таблицу
(но не писать ее).</li>

<li>Многократные сеансы могут приобрести блокировку <code>READ</code>
для таблицы в то же самое время.</li>
<li>Другие сеансы могут читать таблицу, явно
не приобретая блокировку <code>READ</code>.</li>

<li>Модификатор <code>LOCAL</code> позволяет не находиться в противоречии с
<a href="#insert"><code>INSERT</code></a>
(параллельные вставки) с другими сеансами в то время, как блокировка
проводится. См. <a href="optimiz.htm#concurrent-inserts">раздел 9.11.3</a>.
Однако, <code>READ LOCAL</code> не может использоваться, если Вы собираетесь
управлять процессами использования базы данных, внешними к серверу, в то
время как Вы держите блокировку. Для <code>InnoDB</code> <code>READ
LOCAL</code> то же самое, что и <code>READ</code>.</p></li></ul>

<p><code>[LOW_PRIORITY] WRITE</code>:</p>
<ul><li><p>Сеанс, который держит блокировку, может читать и писать таблицу.
</li>
<li>Только сеанс, который держит блокировку, может получить доступ к таблице.
Никакой другой сеанс не может получить доступ к этому, пока
блокировка не выпущена.</li>

<li>Запрос блокировки для таблицы другим сеансом блокируется в то время, как
блокировка <code>WRITE</code> проводится.</li>
<li><code>LOW_PRIORITY</code> не имеет никакого эффекта. В предыдущих версиях
MySQL это затрагивало поведение блокировки, но это больше не так. Это теперь
устарело, и его использование производит предупреждение. Используйте
<code>WRITE</code> без <code>LOW_PRIORITY</code>.</p></li></ul>

<p>Если <a href="#lock-tables"><code>LOCK TABLES</code></a>
должно ждать из-за блокировок, проводимых другими сеансами на любой из
таблиц, он блокируется, пока все блокировки не могут быть приобретены.</p>

<p>Сеанс, который требует блокировок, должен приобрести все блокировки,
которые требуются в одном запросе <a href="#lock-tables"><code>LOCK
TABLES</code></a>. В то время как блокировки, полученные таким образом,
проводятся, сеанс может получить доступ только к заблокированным таблицам.
Например, в следующей последовательности запросов, ошибка происходит для
попытки получить доступ к <code>t2</code>, потому что это не было
заблокировано <a href="#lock-tables"><code>LOCK TABLES</code></a>:
<pre>
mysql&gt; LOCK TABLES t1 READ;
mysql&gt; SELECT COUNT(*) FROM t1;
+----------+
| COUNT(*) |
+----------+
| 3        |
+----------+
mysql&gt; SELECT COUNT(*) FROM t2;
ERROR 1100 (HY000): Table 't2' was not locked with LOCK TABLES
</pre>

Таблицы в <code>INFORMATION_SCHEMA</code> это исключение. К ним можно
получить доступ, не будучи заблокированным явно даже в то время, как сеанс
считает табличные блокировки полученными
<a href="#lock-tables"><code>LOCK TABLES</code></a>.</p>

<p>Вы не можете обратиться к заблокированной таблице многократно в
единственном запросе, используя то же самое имя. Используйте псевдонимы
вместо этого, и получите отдельную блокировку для
таблицы и каждого псевдонима:
<pre>
mysql&gt; LOCK TABLE t WRITE, t AS t1 READ;
mysql&gt; INSERT INTO t SELECT * FROM t;
ERROR 1100: Table 't' was not locked with LOCK TABLES
mysql&gt; INSERT INTO t SELECT * FROM t AS t1;
</pre>

Ошибка происходит для первого <a href="#insert"><code>INSERT</code>
</a>? потому что есть две ссылки на то же самое название заблокированной
таблицы. Второq <a href="#insert"><code>INSERT</code></a>
преуспевает, потому что ссылки на таблицу используют различные имена.</p>

<p>Если Ваши запросы относятся к таблице посредством псевдонима, Вы должны
заблокировать таблицу, используя тот же самый псевдоним. Это не работает,
чтобы заблокировать таблицу, не определяя псевдоним:
<pre>
mysql&gt; LOCK TABLE t READ;
mysql&gt; SELECT * FROM t AS myalias;
ERROR 1100: Table 'myalias' was not locked with LOCK TABLES
</pre>

Наоборот, если Вы блокируете таблицу, используя псевдоним, Вы должны
обратиться к этому в Ваших запросах, используя тот псевдоним:
<pre>
mysql&gt; LOCK TABLE t AS myalias READ;
mysql&gt; SELECT * FROM t;
ERROR 1100: Table 't' was not locked with LOCK TABLES
mysql&gt; SELECT * FROM t AS myalias;
</pre>

Блокировка <code>WRITE</code> обычно имеет более высокий приоритет, чем
<code>READ</code>, чтобы гарантировать, что обновления обработаны как можно
скорее. Это означает, что если один сеанс получает блокировку
<code>READ</code>, а затем другой сеанс просит <code>WRITE</code>,
последующая <code>READ</code> ждет, пока сеанс, который просил
<code>WRITE</code> получит блокировку и выпустит ее.</p>

<p><a href="#lock-tables"><code>LOCK TABLES</code></a>
приобретает блокировки следующим образом:</p>
<ol type="1"><li><p>Сортирует все таблицы, которые будут заблокированы во
внутренне определенном порядке. С пользовательской точки зрения
этот порядок неопределен.</li>

<li>Если таблица должна быть заблокирована с блокировкой чтения и записи,
поместит запрос блокировки записи перед запросом блокировки чтения.</li>
<li>Заблокирует одну таблицу за один раз, пока сеанс не
получает все блокировки.</p></li></ol>

<p>Эта политика гарантирует, что табличная блокировка свободна от тупика.</p>
<p><code>LOCK TABLES</code> или <code>UNLOCK TABLES</code>,
когда относится к разделенной таблице, всегда блокирует всю таблицу, эти
запросы не поддерживают блокировку разделов. См.
<a href="../../../dev.mysql.com/doc/refman/5.7/en/partitioning-limitations-locking.html"
target="_top">Partitioning and Locking</a>.</p>

<p><span><strong>Правила для снятия блокировки</strong></span></p>
<p>Когда табличные блокировки, проводимые сеансом, выпущены, они все
освобождены в то же самое время. Сеанс может выпустить свои блокировки явно,
или блокировки могут быть выпущены неявно при определенных условиях.</p>

<ul><li><p>Сеанс может выпустить свои блокировки явно с
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>.</li>
<li>Если сеанс сделал запрос <a href="#lock-tables"><code>LOCK
TABLES</code></a>, чтобы приобрести блокировку в то время, как имеет
существующие блокировки, они выпущены неявно прежде, чем
новые блокировки предоставляются.</li>

<li>Если сеанс начинает транзакцию (например, с
<a href="#commit"><code>START TRANSACTION</code></a>),
неявный <a href="#lock-tables"><code>UNLOCK TABLES</code></a>
выполнен, который заставляет существующие блокировки быть выпущенными. Для
дополнительной информации о взаимодействии между табличной блокировкой и
транзакциями см. <a href="#lock-tables-and-transactions">раздел
14.3.5.1</a>.</p></li></ul>

<p>Если соединение для сеанса клиента заканчивается, сервер неявно
выпускает все табличные блокировки, проводимые сеансом. Если клиент
повторно соединится, то блокировок больше не будет. Кроме того, если у
клиента была активная транзакция, сервер откатывает ее при разъединии, и
если повторно соединяются, новый сеанс начинается, с включенным autocommit.
Поэтому клиенты могут хотеть отключить автоатическое пересоединение.
С auto-reconnect клиент не уведомлен, если повторно соединяется, но любые
табличные блокировки или текущая транзакция будет потеряна. При выключенном
auto-reconnect, если соединение удаляется, ошибка происходит для следующего
сделанного запроса. Клиент может обнаружить ошибку и принять соответствующие
меры, такие как переприобретение блокировок или восстановление транзакции.
См. <a href="connect.htm#auto-reconnect">раздел 25.8.16</a>.</p>

<p>Если Вы используете <a href="#alter-table"><code>ALTER TABLE</code>
</a> на заблокированной таблице, она может разблокироваться. Например, если
Вы делаете попытку второго <a href="#alter-table"><code>ALTER TABLE
</code></a>, результат может быть ошибкой <code>Table
'<em><code>tbl_name</code></em>' was not locked with LOCK TABLES</code>.
Чтобы обработать это, заблокируйте таблицу снова до второго изменения. См.
также <a href="error.htm#alter-table-problems">раздел B.5.6.1</a>.</p>

<h4><a name="lock-tables-and-transactions"></a>14.3.5.1.
Взаимодействие табличной блокировки и транзакций</h4>
<p><a href="#lock-tables"><code>LOCK TABLES</code></a> и
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>
взаимодействуют с использованием транзакций следующим образом:</p>

<ul><li><p><a href="#lock-tables"><code>LOCK TABLES</code></a>
не безопасно для транзакции и неявно передает любую активную транзакцию
прежде, чем попытаться заблокировать таблицы.</li>

<li><a href="#lock-tables"><code>UNLOCK TABLES</code></a>
неявно передает любую активную транзакцию, но только если
<a href="#lock-tables"><code>LOCK TABLES</code></a>
использовался, чтобы приобрести табличные блокировки. Например, в
следующем наборе запросов <a href="#lock-tables"><code>UNLOCK TABLES
</code></a> выпускает глобальную блокировку чтения, но не передает
транзакцию, потому что никакие табличные блокировки не работают:
<pre>
FLUSH TABLES WITH READ LOCK;
START TRANSACTION;
SELECT ... ;
UNLOCK TABLES;
</pre></li>

<li>Начало транзакции (например, с
<a href="#commit"><code>START TRANSACTION</code></a>)
неявно передает любую текущую транзакцию и выпускает
существующие табличные блокировки.</li>

<li><a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>
приобретает глобальную блокировку чтения и не приобретает табличные
блокировки, таким образом, это не подвергается тому же самому поведению, как
<a href="#lock-tables"><code>LOCK TABLES</code></a> и
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>
относительно табличной блокировки и неявного закрытия транзакций. Например,
<a href="#commit"><code>START TRANSACTION</code></a>
не выпускает глобальную блокировку чтения. См.
<a href="#flush">раздел 14.7.6.3</a>.</li>

<li>Другие запросы, которые неявно заставляют транзакции быть переданными, не
выпускают существующие табличные блокировки. Для списка таких запросов см.
such statements, see <a href="#implicit-commit">раздел 14.3.3</a>.
</li>

<li>Правильный способ использовать <a href="#lock-tables"><code>LOCK
TABLES</code></a> и <a href="#lock-tables"><code>UNLOCK TABLES</code>
</a> с транзакционными таблицами это начать транзакцию с
<code>SET autocommit = 0</code> (не <a href="#commit"><code>START
TRANSACTION</code></a>) вместе с <a href="#lock-tables"><code>LOCK
TABLES</code></a> и не вызывать <a href="#lock-tables"><code>UNLOCK
TABLES</code></a> пока Вы не передаете транзакцию явно. Например, если Вы
должны написать в таблицу <code>t1</code> и читать из таблицы <code>t2</code>:
<pre>
SET autocommit=0;
LOCK TABLES t1 WRITE, t2 READ, ...;
<em><code>... do something with tables t1 and t2 here ...</code></em>
COMMIT;
UNLOCK TABLES;
</pre>

Когда Вы вызываете <a href="#lock-tables"><code>LOCK TABLES</code>
</a>, <code>InnoDB</code> внутренне берет его собственную табличную
блокировку, и MySQL берет свою собственную табличную блокировку.
<code>InnoDB</code> выпускает его внутреннюю табличную блокировку в следующей
передаче транзакции, но для MySQL, чтобы выпустить его табличную блокировку,
Вы должны вызвать <a href="#lock-tables"><code>UNLOCK TABLES</code>
</a>. Вы не должны иметь <a href="server.htm#sysvar_autocommit"><code>
autocommit = 1</code></a>, потому что тогда <code>InnoDB</code> немедленно
выпускает внутреннюю табличную блокировку после вызова
<a href="#lock-tables"><code>LOCK TABLES</code></a>,
и тупики могут очень легко произойти. <code>InnoDB</code> не приобретает
внутреннюю табличную блокировку вообще, если
<a href="server.htm#sysvar_autocommit"><code>autocommit = 1</code></a>,
чтобы помочь старым приложениям избежать ненужных тупиков.</li>
<li><a href="#commit"><code>ROLLBACK</code></a>
не выпускает табличные блокировки.</p></li></ul>

<h4><a name="lock-tables-and-triggers"></a>14.3.5.2. LOCK TABLES и триггеры
</h4>
<p>Если Вы блокируете таблицу явно с <a href="#lock-tables"><code>LOCK
TABLES</code></a>, любые таблицы, используемые в триггерах,
также заблокированы неявно:</p>

<ul><li><p>Блокировки взяты в то же самое время, как приобретенные явно с
<a href="#lock-tables"><code>LOCK TABLES</code></a>.</li>
<li>Блокировка на таблице, используемой в триггере, зависит от того,
используется ли таблица только для того, чтобы читать. Если так, блокировка
чтения достаточна. Иначе используется блокировка записи.</li>

<li>Если таблица заблокирована явно для того, чтобы читать с
<a href="#lock-tables"><code>LOCK TABLES</code></a>,
но надо заблокировать для записи, потому что это могло бы быть изменено в
пределах триггера, блокировка записи, а не блокировка чтения реально взята.
Таким образом, неявная блокировка записи необходимая из-за таблицы в пределах
триггера, заставляет явный запрос блокировки чтения быть преобразованным в
запрос блокировки записи.</p></li></ul>

<p>Предположите, что Вы блокируете две таблицы, <code>t1</code> и
<code>t2</code>, с использованием этого запроса:
<pre>
LOCK TABLES t1 WRITE, t2 READ;
</pre>

Если <code>t1</code> или <code>t2</code> имеют любые триггеры, таблицы,
используемые в пределах триггеров, будут также заблокированы. Предположите,
что <code>t1</code> имеет триггер:
<pre>
CREATE TRIGGER t1_a_ins AFTER INSERT ON t1 FOR EACH ROW
BEGIN
  UPDATE t4 SET count = count+1
  WHERE id = NEW.id AND EXISTS (SELECT a FROM t3);
  INSERT INTO t2 VALUES(1, 2);
END;
</pre>

Результат <a href="#lock-tables"><code>LOCK TABLES</code></a>:
<code>t1</code> и <code>t2</code> заблокированы, потому что они появляются в
запросе, а <code>t3</code> и <code>t4</code> заблокированы, потому что они
используются в пределах триггера:</p>

<ul><li><p><code>t1</code> заблокирована для того, чтобы записать.</li>
<li><code>t2</code> заблокирована для записи, даже при том, что запрос для
блокировки <code>READ</code>. Это происходит потому, что <code>t2</code>
вставлена в пределах триггера, таким образом, запрос <code>READ</code>
преобразован в запрос <code>WRITE</code>.</li>

<li><code>t3</code> заблокирована для того, чтобы читать, потому что это
только считано изнутри триггера.</li>
<li><code>t4</code> заблокирован для того, чтобы записать, потому что это
могло бы быть обновлено в пределах триггера.</p></li></ul>

<h4><a name="lock-tables-restrictions"></a>14.3.5.3.
Блокирующие таблицу ограничения и условия</h4>
<p>Вы можете безопасно использовать <a href="#kill"><code>KILL</code>
</a>, чтобы закончить сеанс, который ждет табличной блокировки. См.
<a href="#kill">раздел 14.7.6.4</a>.</p>

<p><a href="#lock-tables"><code>LOCK TABLES</code></a> и
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>
не может использоваться в пределах сохраненных программ.</p>

<p>Таблица в <code>performance_schema</code> не может быть заблокирована с
<a href="#lock-tables"><code>LOCK TABLES</code></a>, кроме таблиц
<code>setup_<em><code>xxx</code></em></code>.</p>

<p>Следующие запросы запрещены в то время, как
<a href="#lock-tables"><code>LOCK TABLES</code></a> работает:
<a href="#create-table"><code>CREATE TABLE</code></a>,
<a href="#create-table"><code>CREATE TABLE ... LIKE</code></a>,
<a href="#create-view"><code>CREATE VIEW</code></a>,
<a href="#drop-view"><code>DROP VIEW</code></a> и запросы DDL
о сохраненных функциях, процедурах и событиях.</p>

<p>Для некоторых операций нужно получить доступ к системным таблицам в
базе данных <code>mysql</code>. Например,
<a href="#help"><code>HELP</code></a>
требует содержания серверных таблиц справки, и
<a href="funct.htm#function_convert-tz"><code>CONVERT_TZ()</code></a>,
возможно, должен был бы считать таблицы часового пояса. Сервер неявно
блокирует системные таблицы для того, чтобы читать по мере необходимости так,
чтобы Вы не заблокировали их явно. Эти таблицы обработаны так:
<pre>
mysql.help_category
mysql.help_keyword
mysql.help_relation
mysql.help_topic
mysql.proc
mysql.time_zone
mysql.time_zone_leap_second
mysql.time_zone_name
mysql.time_zone_transition
mysql.time_zone_transition_type
</pre>

Если Вы хотите явно поместить блокировку <code>WRITE</code>
блокируйте любую из тех таблиц с <a href="#lock-tables"><code>LOCK
TABLES</code></a>, таблица должна быть единственной заблокированной, никакая
другая таблица не может быть заблокирована с тем же самым запросом.</p>

<p>Обычно Вы не должны заблокировать таблицы, потому что весь
<a href="#update"><code>UPDATE</code></a> атомный,
никакой другой сеанс не может вмешаться ни в какой другой в настоящее время
выполняющийся запрос SQL. Однако, есть несколько случаев, когда блокировка
таблиц может обеспечить преимущество:</p>

<ul><li><p>Если Вы собираетесь выполнить много операций на ряде таблиц
<code>MyISAM</code>, намного быстрее заблокировать таблицы, которые Вы
собираетесь использовать. Блокировка <code>MyISAM</code>
ускоряют вставку, обновление или удаление на них, потому что MySQL не
сбрасывает ключевой кэш для заблокированных таблиц до
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>.
Обычно ключевой кэш сбрасывается после каждого запроса SQL.</p>

<p>Никакой сеанс не может обновить заблокированную как <code>READ</code>
таблица (включая тот, который держит блокировку), и никакой сеанс не может
получить доступ к заблокированной как <code>WRITE</code>
таблице кроме держащего блокировку.</li>

<li>Если Вы используете таблицы для нетранзакционного механизма хранения, Вы
должны использовать <a href="#lock-tables"><code>LOCK TABLES</code>
</a>, если Вы хотите гарантировать, что никакой другой сеанс не изменяет
таблицы между <a href="#select"><code>SELECT</code></a> и
<a href="#update"><code>UPDATE</code></a>. Пример, показанный здесь,
требует <a href="#lock-tables"><code>LOCK TABLES</code></a>,
чтобы выполнять безопасно:
<pre>
LOCK TABLES trans READ, customer WRITE;
SELECT SUM(value) FROM trans WHERE customer_id=<em><code>some_id</code></em>;
UPDATE customer SET total_value=<em><code>sum_from_previous_statement</code></em>
       WHERE customer_id=<em><code>some_id</code></em>;
UNLOCK TABLES;
</pre>

Без <a href="#lock-tables"><code>LOCK TABLES</code></a>
возможно, что другой сеанс мог бы вставить новую строку в таблицу
<code>trans</code> между <a href="#select"><code>SELECT</code></a> и
<a href="#update"><code>UPDATE</code></a>.</p></li></ul>

<p>Вы можете избегать использования <a href="#lock-tables"><code>LOCK
TABLES</code></a> во многих случаях при использовании относительных
обновлений (<code>UPDATE customer SET
<em><code>value</code></em>=<em><code>value</code></em>+<em><code>
new_value</code></em></code>) или функции
<a href="funct.htm#function_last-insert-id"><code>LAST_INSERT_ID()</code>
</a>.</p>

<p>Вы можете также избежать блокировать таблицы в некоторых случаях при
использовании консультативных функций блокировки на уровне пользователя
<a href="funct.htm#function_get-lock"><code>GET_LOCK()</code></a> и
<a href="funct.htm#function_release-lock"><code>RELEASE_LOCK()</code></a>.
Эти блокировки сохранены в хэш-таблице в сервере и осуществлены с
<code>pthread_mutex_lock()</code> и
<code>pthread_mutex_unlock()</code>, см.
<a href="funct.htm#miscellaneous-functions">раздел 13.18</a>.</p>
<p>См. <a href="optimiz.htm#internal-locking">раздел 9.11.1</a>.</p>

<h3><a name="set-transaction"></a>14.3.6. SET TRANSACTION</h3>
<pre>
SET [GLOBAL | SESSION] TRANSACTION
<em><code>transaction_characteristic</code></em> [, <em><code>transaction_characteristic</code></em>] ...

<em><code>transaction_characteristic</code></em>:
ISOLATION LEVEL <em><code>level</code></em>
  | READ WRITE
  | READ ONLY

<em><code>level</code></em>:
REPEATABLE READ
   | READ COMMITTED
   | READ UNCOMMITTED
   | SERIALIZABLE
</pre>

Это запрос определяет параметры
<a href="glossary.htm#glos_transaction">транзакции</a>.
Это берет список из одного или более значений, отделенных запятыми. Эти
характеристики устанавливают операционный
<a href="glossary.htm#glos_isolation_level">уровень изоляции</a>
или режим доступа. Уровень изоляции используется для операций на
<a href="innodb.htm"><code>InnoDB</code></a>. Режим доступа может быть
определен относительно того, работают ли транзакции в чтении-записи или
режиме только для чтения.</p>

<p>Кроме того, <a href="#set-transaction"><code>SET TRANSACTION
</code></a> может включать дополнительный параметр <code>GLOBAL</code> или
<code>SESSION</code>, чтобы указать на контекст запроса.</p>

<h4><a name="set-transaction-scope"></a>Контекст операционных характеристик
</h4>
<p>Вы можете установить операционные характеристики глобально, для текущего
сеанса или для следующей транзакции:</p>

<ul><li><p>С <code>GLOBAL</code> запрос применяется глобально для всех
последующих сеансов. Существующие сеансы не затронуты.</li>
<li>С <code>SESSION</code> запрос относится ко всем последующим транзакциям,
выполненным в пределах текущего сеанса.</li>

<li>Без <code>SESSION</code> или <code>GLOBAL</code>
запрос относится к следующей транзакции, выполненной в пределах текущего
сеанса. Последующие транзакции возвращаются к использованию
уровня изоляции <code>SESSION</code>.</p></li></ul>

<p>Глобальное изменение операционных характеристик требует привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>.
Любой сеанс свободен изменить свои характеристики сеанса (даже в середине
транзакции) или характеристики для следующей транзакции.</p>

<p><a href="#set-transaction"><code>SET TRANSACTION</code></a> без
<code>GLOBAL</code> или <code>SESSION</code>
не разрешен, в то время как есть активная транзакция:
<pre>
mysql&gt; START TRANSACTION;
Query OK, 0 rows affected (0.02 sec)

mysql&gt; SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
ERROR 1568 (25001): Transaction characteristics can't be changed
while a transaction is in progress
</pre>

Чтобы установить глобальный уровень изоляции по умолчанию при запуске
сервера, используйте опцию
<a href="server.htm#option_mysqld_transaction-isolation">
<code>--transaction-isolation=<em><code>level</code></em></code></a>
для <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
в командной строке или в файле опции. Значения <em><code>level</code></em>
для этой опции используют тире, а не пробелы, таким образом, допустимые
значения <a href="innodb.htm#isolevel_read-uncommitted"><code>
READ-UNCOMMITTED</code></a>,
<a href="innodb.htm#isolevel_read-committed"><code>READ-COMMITTED</code></a>,
<a href="innodb.htm#isolevel_repeatable-read"><code>REPEATABLE-READ</code>
</a> или <a href="innodb.htm#isolevel_serializable"><code>SERIALIZABLE</code>
</a>. Например, чтобы установить уровень изоляции по умолчанию в
<a href="innodb.htm#isolevel_repeatable-read"><code>REPEATABLE READ</code>
</a>, используйте эти строки в разделе <code>[mysqld]</code> файла опций:
<pre>
[mysqld]
transaction-isolation = REPEATABLE-READ
</pre>

Возможно проверить или установить глобальные и операционные уровни изоляции
сеанса во времени выполнения при использовании
<a href="server.htm#sysvar_tx_isolation"><code>tx_isolation</code></a>:
<pre>
SELECT @@GLOBAL.tx_isolation, @@tx_isolation;
SET GLOBAL tx_isolation='REPEATABLE-READ';
SET SESSION tx_isolation='SERIALIZABLE';
</pre>

Точно так же, чтобы установить операционный режим доступа при запуске сервера
или во время выполнения, используйте
<a href="server.htm#option_mysqld_transaction-read-only"><code>
--transaction-read-only</code></a> или
<a href="server.htm#sysvar_tx_read_only"><code>tx_read_only</code></a>.
По умолчанию они <code>OFF</code> (режим чтение-запись), но могут быть
установлен в <code>ON</code> для режима по умолчанию только для чтения.</p>

<p>Установка глобального значения или значения сеанса
<a href="server.htm#sysvar_tx_isolation"><code>tx_isolation</code></a> или
<a href="server.htm#sysvar_tx_read_only"><code>tx_read_only</code></a>
эквивалентно установке уровня изоляции или режима доступа с
<a href="#set-transaction"><code>SET GLOBAL TRANSACTION</code></a> или
<a href="#set-transaction"><code>SET SESSION TRANSACTION</code></a>.
</p>

<h4><a name="set-transaction-isolation-level"></a>
Операционные уровни изоляции</h4>
<p>См. <a href="innodb.htm#innodb-transaction-isolation-levels">
раздел 16.5.2.1</a>.</p>

<h4><a name="set-transaction-access-mode"></a>Операционный режим доступа</h4>
<p>Операционный режим доступа может быть определен с
<a href="#set-transaction"><code>SET TRANSACTION</code></a>.
По умолчанию, транзакция имеет место в режиме чтения-записи с чтениями и
записями, разрешенными для таблиц, используемых в транзакции. Этот режим
может быть определен, явно используя режим доступа <code>READ WRITE</code>.
</p>

<p>Если операционный режим доступа установлен в <code>READ ONLY</code>,
изменения таблиц запрещены. Это может позволить механизмам хранения сделать
исполнительные усовершенствования, которые возможны, когда
записи не разрешены.</p>

<p>Не разрешено определить в том же самом запросе <code>READ WRITE</code> и
<code>READ ONLY</code>.</p>

<p>В режиме только для чтения остается возможным изменить таблицы,
составленные с <code>TEMPORARY</code>, используя запросы DML. Изменения,
произведенные с запросами DDL, не разрешены, так же,
как с постоянными таблицами.</p>

<p><code>READ WRITE</code> и <code>READ ONLY</code>
также могут быть определены для отдельной транзакции, используя
<a href="#commit"><code>START TRANSACTION</code></a>.</p>

<h3><a name="xa"></a>14.3.7. Транзакции XA</h3>
<p>Поддержка транзакций <a href="glossary.htm#glos_xa">XA</a>
доступна для <a href="innodb.htm"><code>InnoDB</code></a>. MySQL XA
основан на X/Open CAE <em class="citetitle">Distributed Transaction
Processing: The XA Specification</em>. Этот документ издан The Open Group и
доступен на <a href="../../../www.opengroup.org/public/pubs/catalog/c193.htm"
target="_top">http://www.opengroup.org/public/pubs/catalog/c193.htm</a>.
Ограничения текущего выполнения XA описаны в
<a href="restr.htm#xa-restrictions">раздел C.6</a>.</p>

<p>На стороне клиента нет никаких особых требований. Интерфейс XA к серверу
MySQL состоит из запросов SQL, которые начинаются с <code>XA</code>.
Программы клиента MySQL должны быть в состоянии послать запросы SQL и понять
семантику интерфейса запросов XA.</p>

<p>Среди MySQL Connectors, MySQL Connector/J 5.0.0 и выше
понимает XA непосредственно, посредством интерфейса класса, который
обрабатывает интерфейс XA SQL для Вас.</p>

<p>XA поддерживает распределенные транзакции, то есть, способность разрешить
многократным отдельным транзакционным ресурсам участвовать в глобальной
транзакции. Транзакционные ресурсы часто RDBMS, но могут быть
другими видами ресурсов.</p>

<p>Глобальная транзакция вовлекает несколько действий, которые являются
транзакционными в себе, но что все должны завершиться успешно как группа или
все быть откаченными как группа. В основном это расширяет свойства ACID
так, чтобы многократные транзакции могли быть выполнены как компоненты
глобальной работы, у которой также есть свойства ACID. Как с
нераспределенными транзакциями, <a href="innodb.htm#isolevel_serializable">
<code>SERIALIZABLE</code></a> может быть предпочтен, если Ваши приложения
чувствительны, чтобы считать явления.
<a href="innodb.htm#isolevel_repeatable-read"><code>REPEATABLE READ</code>
</a>, возможно, не достаточно для распределенных транзакций.</p>

<p>Некоторые примеры распределенных транзакций:</p>
<ul><li><p>Приложение может действовать как инструмент интеграции, который
комбинирует службу обмена сообщениями с RDBMS. Приложение удостоверяется, что
транзакции, имеющие дело с посылкой сообщения, извлечением и обработкой,
которые также вовлекают транзакционную базу данных, все происходят в
глобальной транзакции. Вы можете думать об этом как о
<span><span>транзакционной email</span></span>.</li>

<li>Приложение выполняет действия, которые вовлекают различные серверы базы
данных, такие как сервер MySQL и сервер Oracle
(или несколько серверов MySQL), где действия, которые вовлекают многократные
серверы, должны произойти как часть глобальной транзакции, а не как отдельные
транзакции, местные для каждого сервера.</li>

<li>Банк хранит информацию учетной записи в RDBMS, распределяет и получает
деньги через банкоматы (торговые автоматы). Необходимо гарантировать, что
действия торгового автомата правильно отражены в учетных записях, но это не
может быть сделано с один RDBMS. Глобальный менеджер по транзакции объединяет
торговый автомат и ресурсы базы данных, чтобы гарантировать полную
последовательность финансовых операций.</p></li></ul>

<p>Приложения, которые используют глобальные транзакции, вовлекают одного или
более менеджера ресурсов и менеджера транзакций:</p>
<ul><li><p>Resource Manager (RM) обеспечивает доступ к транзакционным
ресурсам. Сервер базы данных это один вид распорядителя ресурсов. Должно быть
возможно передать или удалить транзакции, которыми управляет RM.</li>

<li>Transaction Manager (TM) координирует транзакции, которые являются частью
глобальной транзакции. Это общается с RM, которые обрабатывают каждую из этих
транзакций. Отдельные транзакции в пределах глобальной транзакции это части
глобальной транзакции. Глобальные транзакции и их ответвления
идентифицированы схемой именования, описанной позже.</p></li></ul>

<p>Выполнение MySQL XA позволяет серверу MySQL действовать как Resource
Manager, который обрабатывает транзакции XA в пределах глобальной транзакции.
Программа клиента, которая соединяется с действиями сервера MySQL как
менеджер по транзакции.</p>

<p>Чтобы выполнить глобальную транзакцию, необходимо знать, какие компоненты
вовлечены, и подогнать каждый компонент, когда это может быть передано или
удалено. В зависимости от того, как каждый компонент отчитывается о его
способности преуспеть, они должны все передать или откатиться как атомная
группа. Таким образом, все компоненты должны сработать или откатиться.
Чтобы управлять глобальной транзакцией, необходимо принять во внимание, что
любой компонент или соединяющаяся сеть могли бы потерпеть неудачу.</p>

<p>Процесс для того, чтобы выполнить глобальную транзакцию использует
двухфазовую передачу (2PC). Это имеет место после того, как действия,
выполненные ответвлениями глобальной транзакции, были выполнены.</p>

<ol type="1"><li><p>В первой фазе подготовлены все ответвления. Таким
образом, им говорит ТМ подготовиться передавать. Как правило, это означает
каждый RM, который справляется, ответвление делает запись действий для
ответвления в устойчивом хранении. Ответвления указывают, в состоянии ли
они сделать это, и эти результаты используются для второй фазы.</li>

<li>Во второй фазе ТМ говорит RM передать или откатиться.
Если все ответвления указали, когда они были подготовлены, что они будут в
состоянии передать, всем ответвлениям говорят передать. Если какое-либо
ответвление указало, когда оно было подготовлено, что оно не будет в
состоянии передать, всем ответвлениям говорят откатиться.</p></li></ol>

<p>В некоторых случаях глобальная транзакция могла бы использовать одну
фазу передачи (1PC). Например, когда менеджер по транзакции находит, что
глобальная транзакция состоит только из одного транзакционного ресурса (то
есть, единственное ответвление), ресурсу можно сказать подготовить и передать
в то же самое время.</p>

<h4><a name="xa-statements"></a>14.3.7.1. Синтаксис XA SQL</h4>
<p>Чтобы выполнить транзакции XA в MySQL, используйте следующие запросы:
<pre>
XA {START|BEGIN} <em><code>xid</code></em> [JOIN|RESUME]
XA END <em><code>xid</code></em> [SUSPEND [FOR MIGRATE]]
XA PREPARE <em><code>xid</code></em>
XA COMMIT <em><code>xid</code></em> [ONE PHASE]
XA ROLLBACK <em><code>xid</code></em>
XA RECOVER [CONVERT XID]
</pre>
Для <a href="#xa-statements"><code>XA START</code></a>
<code>JOIN</code> и <code>RESUME</code> не поддержаны.</p>

<p>Для <a href="#xa-statements"><code>XA END</code></a>
<code>SUSPEND [FOR MIGRATE]</code> не поддержан.</p>
<p>Каждый запрос XA начинается <code>XA</code> и большинство из них требуют
значения <em><code>xid</code></em>. <em><code>xid</code></em> это
операционный идентификатор XA. Это указывает, к какой транзакции запрос
относится. <em><code>xid</code></em> поставляются клиентом или произведены
сервером MySQL. <em><code>xid</code></em> имеет от одной до трех частей:
<pre>
<em><code>xid</code></em>: <em><code>gtrid</code></em> [,
<em><code>bqual</code></em> [, <em><code>formatID</code></em> ]]
</pre>

<em><code>gtrid</code></em> это глобальный операционный идентификатор,
<em><code>bqual</code></em> спецификатор ответвления, и
<em><code>formatID</code></em> число, которое идентифицирует формат,
используемый <em><code>gtrid</code></em> и <em><code>bqual</code></em>.
Как обозначено синтаксисом, <em><code>bqual</code></em> и
<em><code>formatID</code></em> являются дополнительными. Значение по
умолчанию <em><code>bqual</code></em> <code>''</code>, если не дано.
Значение по умолчанию <em><code>formatID</code></em> 1, если не дано.</p>

<p><em><code>gtrid</code></em> и <em><code>bqual</code></em>
должны быть строками, каждая до 64 байтов (не символов).
<em><code>gtrid</code></em> и <em><code>bqual</code></em>
может быть определен несколькими способами. Вы можете использовать
заключенную в кавычки строку (<code>'ab'</code>), шестнадцатеричную
строку (<code>X'6162'</code>, <code>0x6162</code>) или битовое значение
(<code>b'<em><code>nnnn</code></em>'</code>).</p>

<p><em><code>formatID</code></em> unsigned integer.</p>
<p><em><code>gtrid</code></em> и <em><code>bqual</code></em>
интерпретируются в байтах основными подпрограммами поддержки XA сервера
MySQL. Однако, в то время, как запрос SQL, содержащмй запрос XA, разбирается,
сервер работает с некоторым определенным набором символов. Чтобы быть
безопасным, пишите <em><code>gtrid</code></em> и
<em><code>bqual</code></em> как шестнадцатеричные строки.</p>

<p><em><code>xid</code></em>, как правило, производятся менеджером по
транзакции. Значения, произведенные одним ТМ, должны отличаться от значений,
произведенных другими ТМ. Данный ТМ должен быть в состоянии признать свой
собственный <em><code>xid</code></em> в списке значений, возвращенных
<a href="#xa-statements"><code>XA RECOVER</code></a>.</p>

<p>Для <a href="#xa-statements"><code>XA START
<em><code>xid</code></em></code></a> запускает транзакцию XA с данным
значением <em><code>xid</code></em>. У каждой транзакции XA должно быть
уникальное значение <em><code>xid</code></em>,
таким образом, значение не должно в настоящее время использоваться другой
транзакцией XA. Уникальность оценена, используя <em><code>gtrid</code></em> и
<em><code>bqual</code></em>. Все последующие запросы XA для транзакции XA
должны быть определены, используя то же самое значение
<a href="#xa-statements"><code>XA START</code></a>.
Если Вы используете какое-либо из тех запросов, но определяете
<em><code>xid</code></em>, которое не соответствует некоторой существующей
транзакции XA, ошибка происходит.</p>

<p>Одна или более транзакций XA могут быть частью той же самой глобальной
транзакции. Все транзакции XA в пределах данной глобальной транзакции должны
использовать то же самое значение <em><code>gtrid</code></em> в
<em><code>xid</code></em>. Поэтому значения <em><code>gtrid</code></em>
должны быть глобально уникальными так, чтобы не было никакой двусмысленности.
<em><code>bqual</code></em> часть <em><code>xid</code></em>
должна отличаться для каждой транзакции XA в пределах глобальной транзакции.
Требование, что значения <em><code>bqual</code></em> должны отличаться,
является ограничением текущего MySQL-выполнения XA.
Это не часть спецификации XA.</p>

<p><a href="#xa-statements"><code>XA RECOVER</code></a>
возвращает информацию для тех транзакций XA на сервере MySQL, которые
находятся в состоянии <code>PREPARED</code>, см.
<a href="#xa-states">раздел 14.3.7.2</a>.
Вывод включает строку для каждой такой транзакции XA на сервере, независимо
от того, который клиент запустил это.</p>

<p><a href="#xa-statements"><code>XA RECOVER</code></a>
выходные строки похожи на это (для примера
<em><code>xid</code></em> состоит из частей
<code>'abc'</code>, <code>'def'</code> и <code>7</code>):
<pre>
mysql&gt; XA RECOVER;
+----------+--------------+--------------+--------+
| formatID | gtrid_length | bqual_length | data   |
+----------+--------------+--------------+--------+
| 7        | 3            | 3            | abcdef |
+----------+--------------+--------------+--------+
</pre>
У выходных столбцов есть следующие значения:</p>
<ul><li><p><code>formatID</code> часть <em><code>formatID</code></em>
<em><code>xid</code></em> транзакции.</li>

<li><code>gtrid_length</code> длина в байтах <em><code>gtrid</code></em>.
</li>
<li><code>bqual_length</code> длина в байтах <em><code>bqual</code></em>.
</li>
<li><code>data</code> конкатенация <em><code>gtrid</code></em> и
<em><code>bqual</code></em>.</p></li></ul>

<p>XID могут содержать непригодные для печати символы.
<a href="#xa-statements"><code>XA RECOVER</code></a>
разрешает дополнительный параметр <code>CONVERT XID</code>
так, чтобы клиенты могли просить значения XID в шестнадцатеричном виде.</p>

<h4><a name="xa-states"></a>14.3.7.2. Операционные состояния XA</h4>
<p>Транзакция XA прогрессирует через следующие состояния:</p>
<ol type="1"><li><p>Используйте <a href="#xa-statements"><code>XA
START</code></a>, чтобы запустить транзакцию XA и
перевести в статус <code>ACTIVE</code>.</li>

<li>Для <code>ACTIVE</code> транзакций XA сделайте запросы SQL, которые
составляют транзакцию, а затем <a href="#xa-statements"><code>XA
END</code></a>. <a href="#xa-statements"><code>XA END</code></a>
отправит транзакцию в состояние <code>IDLE</code>.</li>

<li>Для <code>IDLE</code> транзакций XA Вы можете скомандовать
<a href="#xa-statements"><code>XA PREPARE</code></a> или
<code>XA COMMIT ... ONE PHASE</code>:</p>

<ul><li><p><a href="#xa-statements"><code>XA PREPARE</code></a>
отправит транзакцию в состояние <code>PREPARED</code>.
<a href="#xa-statements"><code>XA RECOVER</code></a>
будет включать <em><code>xid</code></em> транзакции в его выводе, потому что
<a href="#xa-statements"><code>XA RECOVER</code></a> перечисляет все
транзакции XA, которые находятся в состоянии <code>PREPARED</code>.</li>

<li><code>XA COMMIT ... ONE PHASE</code> готовит и передает транзакцию.
<em><code>xid</code></em> не будет перечислено
<a href="#xa-statements"><code>XA RECOVER</code></a>
потому что транзакция заканчивается.</p></li></ul></li>

<li>Для <code>PREPARED</code> XA транзакций Вы можете
скомандовать <a href="#xa-statements"><code>XA COMMIT</code></a>,
чтобы передать и закончить транзакцию, или
<a href="#xa-statements"><code>XA ROLLBACK</code></a> для отката.
</p></li></ol>

<p>Вот простая транзакция XA, которая вставляет строку в таблицу как
часть глобальной транзакции:
<pre>
mysql&gt; XA START 'xatest';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; INSERT INTO mytable (i) VALUES(10);
Query OK, 1 row affected (0.04 sec)

mysql&gt; XA END 'xatest';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; XA PREPARE 'xatest';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; XA COMMIT 'xatest';
Query OK, 0 rows affected (0.00 sec)
</pre>

В пределах контекста данного соединения клиента транзакции XA и местные
транзакции (не-XA) являются взаимоисключающими. Например, если
<a href="#xa-statements"><code>XA START</code></a>
выпущен, чтобы начать транзакцию XA, местная транзакция не может быть
запущена, пока транзакция XA не была передана или отменена. Наоборот, если
местная транзакция была запущена с
<a href="#commit"><code>START TRANSACTION</code></a>,
никакие запросы XA не могут использоваться, пока транзакция не была
передана или отменена.</p>

<p>Если транзакция XA находится в состоянии <code>ACTIVE</code>,
Вы не можете сделать запросы, которые вызывают неявное закрытие
транзакции. Это нарушило бы контракт XA, потому что Вы не могли удалить
транзакцию XA. Вы получите следующую ошибку, если Вы попытаетесь
выполнить такой запрос:
<pre>
ERROR 1399 (XAE07): XAER_RMFAIL: The command cannot be executed
when global transaction is in the ACTIVE state
</pre>
Запросы, к которым применяется предыдущее замечание, перечислены в
<a href="#implicit-commit">разделе 14.3.3</a>.
</p>

<h2><a name="sql-syntax-replication"></a>14.4. Запросы репликации</h2>
<p>Репликацией можно управлять через интерфейс SQL, используя запросы,
описанные в этом разделе. Запросы разделены на группу, которая управляет
главными серверами, группу, которая управляет ведомыми серверами, и группу,
которая может быть применена к любым серверам.</p>

<h3><a name="replication-master-sql"></a>14.4.1.
Запросы SQL для управления главными серверами</h3>
<p>Этот раздел обсуждает запросы для основных серверов.</p>

<p>В дополнение к запросым, описанным здесь,
запросы <a href="#show"><code>SHOW</code></a>
используются с главными серверами. Для информации об этих запросах см.
<a href="#show">раздел 14.7.5</a>.</p>

<ul><li><p><a href="#show-binary-logs"><code>SHOW BINARY LOGS</code>
</a></li>
<li><a href="#show-binlog-events"><code>SHOW BINLOG EVENTS</code></a>
</li>
<li><a href="#show-master-status"><code>SHOW MASTER STATUS</code></a>
</li>
<li><a href="#show-slave-hosts"><code>SHOW SLAVE HOSTS</code></a></p>
</li></ul>

<h4><a name="purge-binary-logs"></a>14.4.1.1. PURGE BINARY LOGS</h4>
<pre>
PURGE { BINARY | MASTER } LOGS
{ TO '<em><code>log_name</code></em>' | BEFORE <em><code>datetime_expr</code></em> }
</pre>

Двоичный журнал это ряд файлов, которые содержат информацию о модификациях
данных, сделанных сервером MySQL. Журнал состоит из ряда двоичных файлов
системного журнала плюс индексный файл (см.
<a href="server.htm#binary-log">раздел 6.4.4</a>).</p>

<p><a href="#purge-binary-logs"><code>PURGE BINARY LOGS</code></a>
удаляет все двоичные файлы системного журнала, перечисленные в индексном
файле журнала до указанного имени файла системного журнала или даты.
<code>BINARY</code> и <code>MASTER</code> синонимы.
Удаленные файлы системного журнала также удалены из списка,
зарегистрированного в индексном файле, так, чтобы данный файл системного
журнала стал первым в списке.</p>

<p>Этот запрос не имеет никакого эффекта, если сервер не был запущен с опцией
<a href="replica.htm#option_mysqld_log-bin"><code>--log-bin</code></a>.</p>
<p>Примеры:
<pre>
PURGE BINARY LOGS TO 'mysql-bin.010';
PURGE BINARY LOGS BEFORE '2008-04-02 22:46:26';
</pre>

<code>BEFORE</code> разновидность параметра
<em><code>datetime_expr</code></em> должен оцениваться к значению
<a href="types.htm#datetime"><code>DATETIME</code></a> (значение в формате
<code>'YYYY-MM-DD hh:mm:ss'</code>).</p>

<p>Этот запрос безопасно выполнить, в то время как ведомые устройства
копируют. Вы не должны остановить их. Если у Вас есть активное ведомое
устройство, которое в настоящее время читает один из файлов системного
журнала, которые Вы пытаетесь удалить, этот запрос ничего не делает и терпит
неудачу с ошибкой. Однако, если ведомое устройство не будет соединено, и Вы
производите чистку одного из файлов системного журнала, которые это должно
все же считать, то ведомое устройство будет неспособно копировать после того,
как повторно соединится.</p>

<p>Чтобы безопасно произвести чистку двоичных файлов системного журнала,
следуйте за этой процедурой:</p>
<ol type="1"><li><p>На каждом ведомом сервере надо использовать
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>,
чтобы проверить, какой файл системного журнала это читает.</li>

<li>Получите перечисление двоичных файлов системного журнала на главном
сервере с помощью <a href="#show-binary-logs"><code>SHOW BINARY LOGS
</code></a>.</li>

<li>Определите самый ранний файл системного журнала среди всех ведомых
устройств. Это конечный файл. Если все ведомые устройства современны, это
последний файл системного журнала в списке.</li>

<li>Сделайте резервное копирование всех файлов системного журнала, которые Вы
собираетесь удалить. Этот шаг является дополнительным, но всегда желательным.
</li>
<li>Произведите чистку всех файлов системного журнала до,
но не включая конечный файл.</p></li></ol>

<p>Вы можете также установить
<a href="server.htm#sysvar_expire_logs_days"><code>expire_logs_days</code>
</a>, чтобы двоичные файлы системного журнала автоматически удалялись после
данного числа дней (см. <a href="server.htm#server-system-variables">раздел
6.1.5</a>). Если Вы используете репликацию, Вы должны установить переменную
не ниже, чем максимальное количество дней, на которое Ваши ведомые устройства
могли бы отстать от ведущего устройства.</p>

<p><code>PURGE BINARY LOGS TO</code> и <code>PURGE BINARY LOGS BEFORE</code>
оба терпят неудачу с ошибкой, когда двоичные файлы системного журнала,
перечисленные в файле <code>.index</code>, были удалены из системы некоторыми
другими средствами (такими, как использование
<span><strong>rm</strong></span> в Linux) (Bug #18199, Bug #18453).
Чтобы обработать такие ошибки, редактируйте файл <code>.index</code>
(который является простым текстовым файлом) вручную, чтобы гарантировать, что
он перечисляет только двоичные файлы системного журнала, которые фактически
присутствуют, затем выполните снова <a href="#purge-binary-logs">
<code>PURGE BINARY LOGS</code></a>.</p>

<h4><a name="reset-master"></a>14.4.1.2. RESET MASTER</h4>
<pre>
RESET MASTER
</pre>

Удаляет все двоичные файлы системного журнала, перечисленные в индексном
файле, сбрасывает двоичной индексный файл журнала и создает новый двоичной
файл системного журнала.</p>

<p><code>RESET MASTER</code> также очищает значения
<a href="replica.htm#sysvar_gtid_purged"><code>gtid_purged</code></a>
так же как глобальное значение
<a href="replica.htm#sysvar_gtid_executed"><code>gtid_executed</code></a>
(но не ее значение сеанса), то есть, выполнение этого запроса устанавливает
каждое из этих значений к пустой строке (<code>''</code>).
Этот запрос также очищает таблицу <code>mysql.gtid_executed</code> (см.
<a href="replica.htm#replication-gtids-gtid-executed-table">
mysql.gtid_executed Table</a>).</p>

<p>Это запрос предназначен, чтобы использоваться только, когда ведущее
устройство запущено впервые.</p>
<p>Эффекты <a href="#reset-master"><code>RESET MASTER</code></a>
отличаются от таковых в <a href="#purge-binary-logs"><code>PURGE
BINARY LOGS</code></a>:</p>

<ol type="1"><li><p><a href="#reset-master"><code>RESET MASTER</code>
</a> удаляет <span><em>все</em></span> двоичные файлы системного журнала,
которые перечислены в индексном файле, оставляя только единственный пустой
двоичной файл системного журнала с числовым суффиксом <code>.000001</code>,
тогда как нумерация не сброшена <a href="#purge-binary-logs"><code>
PURGE BINARY LOGS</code></a>.</li>

<li><a href="#reset-master"><code>RESET MASTER</code></a>
<span><em>не</em></span> предназначен, чтобы использоваться, в то время
как любые ведомые устройства работают. Поведение
<a href="#reset-master"><code>RESET MASTER</code></a>
когда используется в то время, как ведомые устройства работают, неопределено
(и таким образом неподдержано), тогда как
<a href="#purge-binary-logs"><code>PURGE BINARY LOGS</code></a>
может безопасно использоваться в то время, как ведомые устройства работают.
</p></li></ol>
<p>См. <a href="#purge-binary-logs">раздел 14.4.1.1</a>.</p>

<p><a href="#reset-master"><code>RESET MASTER</code></a>
может оказаться полезным, когда Вы сначала настраиваете ведущее и ведомое
устройства, чтобы Вы могли проверить установку следующим образом:</p>

<ol type="1"><li><p>Запустите ведущее и ведомое устройства и запустите
репликацию (см. <a href="replica.htm#replication-howto">раздел 19.1.2</a>).
</li>
<li>Выполните несколько испытательных запросов на ведущем устройстве.</li>
<li>Проверьте, что запросы копировались к ведомому устройству.</li>

<li>Когда репликация работает правильно, скомандуйте
<a href="#stop-slave"><code>STOP SLAVE</code></a> и
<a href="#reset-slave"><code>RESET SLAVE</code></a>
на ведомом устройстве, затем проверьте, что любые нежелательные данные больше
не существуют на ведомом устройстве.</li>
<li>Скомандуйте <a href="#reset-master"><code>RESET MASTER</code></a>
на ведущем устройстве, чтобы очистить испытательные запросы.</p></li></ol>

<p>После подтверждения установки и избавления от файлов системного журнала,
произведенных в ходе проверки, Вы можете запустить ведомое
устройство и начать копировать.</p>

<h4><a name="set-sql-log-bin"></a>14.4.1.3. SET sql_log_bin</h4>
<pre>
SET sql_log_bin = {0|1}
</pre>

<a href="server.htm#sysvar_sql_log_bin"><code>sql_log_bin</code></a>
управляет, сделано ли журналирование к двоичному журналу. Значение по
умолчанию 1 (сделано журналирование). Чтобы изменить журналирование для
текущего сеанса, измените значение этой переменной. Пользователь сеанса
должен иметь привилегию <a href="security.html#priv_super"><code>SUPER</code>
</a>, чтобы установить эту переменную. Установите эту переменную в 0 для
сеанса, чтобы временно отключить двоичное журналирование, производя изменения
в ведущем устройстве, которые Вы не хотите копировать к ведомому устройству.
</p>

<p>С MySQL 5.5 <a href="server.htm#sysvar_sql_log_bin"><code>sql_log_bin
</code></a> может быть установлен как глобальная переменная или переменная
сеанса. Установка <a href="server.htm#sysvar_sql_log_bin"><code>sql_log_bin
</code></a> глобально обнаружена только, когда новый сеанс запущен. На любые
ранее работающие сеансы глобальная установка не воздействует.</p>

<p>Неправильное использование <a href="server.htm#sysvar_sql_log_bin"><code>
sql_log_bin</code></a> с глобальными средствами контекста любые изменения,
произведенные в уже рабочем сеансе <span><em>все еще</em></span>
регистрируются в двоичном журнале и поэтому копируются. Это может
вызвать неожиданные результаты, включая отказ репликации.</p>

<p>В MySQL 5.7 невозможно установить
<code>@@session.sql_log_bin</code>
в пределах транзакции или подзапроса (Bug #53437).</p>

<h3><a name="replication-slave-sql"></a>14.4.2.
Запросы SQL для управления ведомыми серверами</h3>
<p>В дополнение к запросам, описанным здесь,
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a> и
<a href="#show-relaylog-events"><code>SHOW RELAYLOG EVENTS</code></a>
также используются с ведомыми устройствами ответа. Для информации об этих
запросах см. разделы <a href="#show-slave-status">14.7.5.34</a> и
<a href="#show-relaylog-events">14.7.5.32</a>.</p>

<h4><a name="change-master-to"></a>14.4.2.1. CHANGE MASTER TO</h4>
<pre>
CHANGE MASTER TO <em><code>option</code></em> [, <em><code>option</code></em>]
       ... [ <em><code>channel_option</code></em> ]
<em><code>option</code></em>:
MASTER_BIND = '<em><code>interface_name</code></em>'
  | MASTER_HOST = '<em><code>host_name</code></em>'
  | MASTER_USER = '<em><code>user_name</code></em>'
  | MASTER_PASSWORD = '<em><code>password</code></em>'
  | MASTER_PORT = <em><code>port_num</code></em>
  | MASTER_CONNECT_RETRY = <em><code>interval</code></em>
  | MASTER_RETRY_COUNT = <em><code>count</code></em>
  | MASTER_DELAY = <em><code>interval</code></em>
  | MASTER_HEARTBEAT_PERIOD = <em><code>interval</code></em>
  | MASTER_LOG_FILE = '<em><code>master_log_name</code></em>'
  | MASTER_LOG_POS = <em><code>master_log_pos</code></em>
  | MASTER_AUTO_POSITION = {0|1}
  | RELAY_LOG_FILE = '<em><code>relay_log_name</code></em>'
  | RELAY_LOG_POS = <em><code>relay_log_pos</code></em>
  | MASTER_SSL = {0|1}
  | MASTER_SSL_CA = '<em><code>ca_file_name</code></em>'
  | MASTER_SSL_CAPATH = '<em><code>ca_directory_name</code></em>'
  | MASTER_SSL_CERT = '<em><code>cert_file_name</code></em>'
  | MASTER_SSL_CRL = '<em><code>crl_file_name</code></em>'
  | MASTER_SSL_CRLPATH = '<em><code>crl_directory_name</code></em>'
  | MASTER_SSL_KEY = '<em><code>key_file_name</code></em>'
  | MASTER_SSL_CIPHER = '<em><code>cipher_list</code></em>'
  | MASTER_SSL_VERIFY_SERVER_CERT = {0|1}
  | MASTER_TLS_VERSION = '<em><code>protocol_list</code></em>'
  | IGNORE_SERVER_IDS = (<em><code>server_id_list</code></em>)

<em><code>channel_option</code></em>:
FOR CHANNEL <em><code>channel</code></em>

<em><code>server_id_list</code></em>:
[<em><code>server_id</code></em> [, <em><code>server_id</code></em>] ... ]
</pre>

<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
изменяет параметры, которые ведомый сервер использует для того, чтобы
соединиться с главным сервером, для того, чтобы считать основной двоичной
журнал и считать ведомый журнал. Это также обновляет содержание основной
информации и репозитариев информации журнала (см.
<a href="replica.htm#slave-logs">раздел 19.2.4</a>).</p>

<p>Можно использовать <code>CHANGE MASTER TO</code>
запрос о рабочем ведомом устройстве без остановки этого, в зависимости от
статуса ведомого потока SQL и ведомого потока ввода/вывода. Правила,
управляющие таким использованием, обеспечены позже в этом разделе.</p>

<p>Используя мультипоточное ведомое устройство (другими словами,
<a href="replica.htm#sysvar_slave_parallel_workers"><code>
slave_parallel_workers</code></a> больше 0), остановка ведомого устройства
может вызвать <span><span>промежутки</span></span> в последовательности
транзакций, которые были выполнены от журнала, независимо от того, было ли
ведомое устройство остановлено преднамеренно или нет. Когда такие промежутки
существуют, <a href="#change-master-to"><code>CHANGE MASTER TO</code>
</a> терпит неудачу. Решение в этой ситуации состоит в том, чтобы вызвать
<a href="#start-slave"><code>START SLAVE UNTIL SQL_AFTER_MTS_GAPS
</code></a>, который гарантирует, что разрывы преодолены.</p>

<p><code>FOR CHANNEL <em><code>channel</code></em></code>
позволяет Вам выбрать, к которому каналу ответа относится запрос. Если
никакой пункт не установлен, и никакие дополнительные каналы не существуют,
запрос относится к каналу значения по умолчанию и ведет себя как версии MySQL
до 5.7.6. Обеспечение <code>FOR CHANNEL <em><code>channel</code></em></code>
применяет <code>CHANGE MASTER TO</code> к определенному каналу ответа и
используется, чтобы добавить новый канал или изменить существующий канал.
Например, чтобы добавить новый канал, названный channel2:
<pre>
CHANGE MASTER TO MASTER_NAME=host1, MASTER_PORT=3002 FOR CHANNEL channel2
</pre>

Используя многократные каналы ответа, если у <code>CHANGE MASTER TO</code>
нет определенного использования канала <code>FOR CHANNEL <em><code>channel
</code></em></code>, получите ошибку. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p>

<p>Опции, не определенные, сохраняют свое значение, за исключением
обозначенного в следующем обсуждении. Таким образом, в большинстве случаев
нет никакой потребности определить опции, которые не изменяются.</p>

<p><code>MASTER_HOST</code>, <code>MASTER_USER</code>,
<code>MASTER_PASSWORD</code> и <code>MASTER_PORT</code>
предоставляют информацию ведомому устройству о том, как соединиться с
его ведущим устройством:</p>

<ul><li><p><code>MASTER_HOST</code> и <code>MASTER_PORT</code>
имя хоста (или IP-адрес) основного узла и его порта TCP/IP.</p>
<p>Репликация не может использовать файлы сокета Unix.
Вы должны быть в состоянии соединиться с сервером ведущего устройства,
используя TCP/IP.</p>

<p>Если Вы определяете <code>MASTER_HOST</code> или <code>MASTER_PORT</code>,
ведомое устройство предполагает, что главный сервер отличается (даже если
значение опции то же самое, как текущее). В этом случае старые значения для
имени файла основного двоичного системного журнала и позиции больше не
считают применимыми, так, если Вы не определяете
<code>MASTER_LOG_FILE</code> и <code>MASTER_LOG_POS</code> в команде,
<code>MASTER_LOG_FILE=''</code> и <code>MASTER_LOG_POS=4</code>
тихо приложены к этому.</p>

<p>Установка <code>MASTER_HOST=''</code> (то есть, устанавливая его значение
явно в пустую строку) <span><em>не</em></span> то же самое, как не установка
<code>MASTER_HOST</code> вообще. Начиная с MySQL 5.5, попытка установить
<code>MASTER_HOST</code> к пустой строке терпит неудачу с ошибкой. Ранее
установка <code>MASTER_HOST</code> к пустой строке вызывала впоследствии сбой
<a href="#start-slave"><code>START SLAVE</code></a> (Bug #28796).</p>

<p>Значения, используемые для <code>MASTER_HOST</code> и других опций
<code>CHANGE MASTER TO</code> проверены на перевод строки (<code>\n</code>
или <code>0x0A</code>), присутствие таких символов в этих значениях
заставляет запрос терпеть неудачу с
<span>ER_MASTER_INFO</span> (Bug #11758581, Bug #50801).</li>

<li><code>MASTER_USER</code> и <code>MASTER_PASSWORD</code>
имя пользователя и пароль учетной записи, чтобы использовать для того, чтобы
соединиться с ведущим устройством.</p>

<p><code>MASTER_USER</code> не может быть сделан пустым, установка
<code>MASTER_USER = ''</code> вызывает ошибку (Bug #13427949).</p>
<p>Пароль используется для ведомой учетной записи MySQL Replication
в <code>CHANGE MASTER TO</code> ограничен 32 символами в длину,
попытка использовать пароль больше 32 символов приведет к сбою
<code>CHANGE MASTER TO</code>.</p>

<p>До MySQL 5.7.5, если пароль был более длинным, запрос работал,
но любые лишние символы было тихо усечены.</p>
<p>Текст выполнения <a href="#change-master-to"><code>CHANGE MASTER
TO</code></a>, включая значения для <code>MASTER_USER</code> и
<code>MASTER_PASSWORD</code>, может быть виден в выводе параллельного
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>.
Полный текст <a href="#start-slave"><code>START SLAVE</code></a>
также видим в <a href="#show-processlist"><code>SHOW PROCESSLIST
</code></a>.</p></li></ul>

<p>Опции <code>MASTER_SSL_<em><code>xxx</code></em></code>
предоставляют информацию об использовании SSL для соединения. Они
соответствуют опциям <code>--ssl-<em><code>xxx</code></em></code>, описанным
в разделах <a href="security.html#secure-connection-options">7.4.5</a> и
<a href="replica.htm#replication-solutions-secure-connections">19.3.9</a>.
Эти опции могут быть изменены даже на ведомых устройствах, которые собраны
без поддержки SSL. Они сохранены к основному репозитарию информации, но
проигнорированы, если у ведомого устройства нет поддержки SSL.</p>

<p><code>MASTER_SSL=1</code> является предписывающим, не консультативным.
Когда дано, соединение с ведущим устройством должно использовать SSL, или
попытка соединения терпит неудачу.</p>

<p><code>MASTER_TLS_VERSION</code> определяет протоколы шифрования,
разрешенные ведущим устройством для ведомых соединений. Значение походит на
это для <a href="server.htm#sysvar_tls_version"><code>tls_version</code></a>:
список разделенных запятой значений, содержащий одно или более имен
протокола. Протоколы, которые могут быть названы в этой опции, зависят от
библиотеки SSL, использовавшейся, чтобы собрать MySQL. Для деталей см.
<a href="security.html#secure-connection-protocols-ciphers">раздел 7.4.3</a>.
</p>

<p><code>MASTER_CONNECT_RETRY</code> определяет, сколько секунд ждать между
повторениями соединения. Значение по умолчанию 60.</p>
<p><code>MASTER_RETRY_COUNT</code> ограничивает <span><em>number</em></span>
число попыток пересоединения и обновляет значение столбца
<code>Master_Retry_Count</code> в выводе
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>.
Значение по умолчанию 24 * 3600 = 86400. <code>MASTER_RETRY_COUNT</code>
предназначена, чтобы заменить более старую опцию
<a href="replica.htm#option_mysqld_master-retry-count"><code>
--master-retry-count</code></a> и является теперь привилегированным методом
для того, чтобы установить этот предел. Лучше не использовать
<a href="replica.htm#option_mysqld_master-retry-count"><code>
--master-retry-count</code></a> в новых приложениях и, обновляясь до MySQL
8.0, обновить любые существующие приложения, которые полагаются на это, так,
чтобы они использовали <code>CHANGE MASTER TO ... MASTER_RETRY_COUNT</code>.
</p>

<p><code>MASTER_DELAY</code> определяет, на сколько секунд от ведущего
устройства ведомое устройство должно отстать. Событие от ведущего устройства
не запущено, по крайней мере, <em><code>interval</code></em>
секунд. Значение по умолчанию 0. Ошибка происходит, если
<em><code>interval</code></em> не неотрицательное целое число в диапазоне
от 0 до 2<sup>31</sup>-1. См. <a href="replica.htm#replication-delayed">
раздел 19.3.11</a>.</p>

<p><code>CHANGE MASTER TO</code>, использующий опцию
<code>MASTER_DELAY</code> может быть выполнен на рабочем ведомом устройстве,
когда ведомый поток SQL остановлен.</p>

<p><code>MASTER_BIND</code> для использования на ведомых устройствах, имеющих
многократные сетевые интерфейсы, и определяет, какой из сетевых интерфейсов
ведомого устройства выбран для того, чтобы соединиться с ведущим устройством.
</p>

<p>Адрес, сконфигурированный с этой опцией, если таковой вообще имеется,
может быть найден в столбце <code>Master_Bind</code> вывода
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>.
Если Вы используете ведомые таблицы журнала состояния (сервер запускался с
<a href="replica.htm#option_mysqld_master-info-repository"><code>
--master-info-repository=TABLE</code></a>), значение может также быть найдено
как столбец <code>Master_bind</code> таблицы <code>mysql.slave_master_info
</code>.</p>

<p><code>MASTER_HEARTBEAT_PERIOD</code> устанавливает интервал в секундах
между тактами репликации. Всякий раз, когда двоичной журнал ведущего
устройства обновлен, время ожидания для следующего такта сброшено.
<em><code>interval</code></em> это десятичное значение, имеющее диапазон от 0
до 4294967 секунд и разрешение в миллисекунду, самое маленькое ненулевое
значение 0.001. Такты посылает ведущее устройство, только если нет никаких
непосланных событий в двоичном файле системного журнала в течение
периода дольше <em><code>interval</code></em>.</p>

<p>Если Вы регистрируете основную информацию о соединении к таблицам,
<code>MASTER_HEARTBEAT_PERIOD</code> может быть замечен как значение столбца
<code>Heartbeat</code> таблицы <code>mysql.slave_master_info</code>.</p>

<p>Установка <em><code>interval</code></em> к 0 отключает такты вообще.
Значение по умолчанию для <em><code>interval</code></em> равно значению
<a href="replica.htm#sysvar_slave_net_timeout"><code>slave_net_timeout
</code></a>, разделенному на 2.</p>

<p>Установка <code>@@global.slave_net_timeout</code>
к значению меньше текущего интервала приводит к предупреждению. Эффект
<a href="#reset-slave"><code>RESET SLAVE</code></a>
на интервал должен сбросить это к значению по умолчанию.</p>

<p><code>MASTER_LOG_FILE</code> и <code>MASTER_LOG_POS</code>
координаты, в которых ведомый поток ввода/вывода должен начать читать от
ведущего устройства в следующий раз, когда поток запускается.
<code>RELAY_LOG_FILE</code> и <code>RELAY_LOG_POS</code>
координаты, в которых ведомый поток SQL должен начать читать из журнала реле
в следующий раз, когда поток запускается. Если Вы определяете любой из
<code>MASTER_LOG_FILE</code> или <code>MASTER_LOG_POS</code>,
Вы не можете определить <code>RELAY_LOG_FILE</code> или
<code>RELAY_LOG_POS</code>. Если Вы определяете любой из
<code>MASTER_LOG_FILE</code> или <code>MASTER_LOG_POS</code>,
Вы также не можете определить <code>MASTER_AUTO_POSITION = 1</code>
(описан позже в этом разделе). Если ни один из <code>MASTER_LOG_FILE</code>
или <code>MASTER_LOG_POS</code> не определен, ведомое устройство использует
последние координаты <span><em>ведомого потока SQL</em></span> перед
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>.
Это гарантирует, что нет никакой неоднородности в ответе, даже если ведомый
поток SQL был позже по сравнению с ведомым потоком ввода/вывода, когда Вы
просто хотите изменить, скажем, пароль.</p>

<p><code>CHANGE MASTER TO</code>, использующий опции
<code>RELAY_LOG_FILE</code>, <code>RELAY_LOG_POS</code> или обе сразу,
может быть выполнен на рабочем ведомом устройстве, когда ведомый
поток SQL остановлен.</p>

<p>Если <code>MASTER_AUTO_POSITION = 1</code> с <code>CHANGE MASTER TO
</code>, ведомое устройство пытается соединиться с ведущим устройством,
использующим протокол GTID. Эта опция может использоваться
<code>CHANGE MASTER TO</code> только, если ведомый SQL и ведомые потоки
ввода/вывода остановлены.</p>

<p>Используя GTID, ведомое устройство говорит ведущему устройству, какие
транзакции это уже приняло, выполнило или то и другое. Чтобы вычислить этот
набор, это читает глобальное значение
<a href="replica.htm#sysvar_gtid_executed"><code>gtid_executed</code></a>
и значение столбца <code>Retrieved_gtid_set</code> из
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>.
Так как GTID последней переданной транзакции включен в
<code>Retrieved_gtid_set</code>, даже если транзакция была только частично
передана, последний полученный GTID вычтен из этого набора. Таким образом,
ведомое устройство вычисляет следующий набор:
<pre>
UNION(@@global.gtid_executed, Retrieved_gtid_set-<em><code>last_received_GTID</code></em>)
</pre>

Этот набор посылают ведущему устройству как часть начального квитирования,
а ведущее устройство отсылает назад все транзакции, которые выполнило, но
которые не являются частью набора. Если какая-либо из этих транзакций была
уже удалена из двоичного журнала ведущего устройства, ведущее устройство
посылает ошибку <span>ER_MASTER_HAS_PURGED_REQUIRED_GTIDS</span>, и
репликация не запускается.</p>

<p>Когда GTID-репликация используется, координаты, представленные
<code>MASTER_LOG_FILE</code> и <code>MASTER_LOG_POS</code>
не используются, и глобальные операционные идентификаторы используются вместо
этого. Таким образом использование обеих опций вместе с
<code>MASTER_AUTO_POSITION</code> будет ошибкой.</p>

<p>Вы можете видеть, работает ли ответ с автопозиционированием, проверяя
вывод <a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>.
</p>

<p><a href="replica.htm#sysvar_gtid_mode"><code>gtid_mode</code></a>
должен также быть включен перед <code>CHANGE MASTER TO ...
MASTER_AUTO_POSITION = 1</code>.  Иначе запрос терпит неудачу с ошибкой.</p>

<p>Чтобы вернуться к более старому основанному на файле протоколу после
использования GTID, Вы можете скомандовать <code>CHANGE MASTER TO</code>,
который определяет <code>MASTER_AUTO_POSITION = 0</code>,
так же как по крайней мере один из <code>MASTER_LOG_FILE</code> или
<code>MASTER_LOG_POSITION</code>.</p>

<p>Журналы реле сохранены, когда ни ведомый поток SQL, ни ведомый поток
ввода/вывода не остановлены, если оба потока остановлены, все файлы
системного журнала реле не удалены, если Вы указали по крайней мере одну из
опций <code>RELAY_LOG_FILE</code> или <code>RELAY_LOG_POS</code>.</p>

<p><code>RELAY_LOG_FILE</code> может использовать абсолютный или
относительный путь, и использует то же самое базовое имя, как
<code>MASTER_LOG_FILE</code> (Bug #12190).</p>

<p><code>IGNORE_SERVER_IDS</code> берет список разделенных запятой значений
из 0 или больше ID сервера. События, происходящие из соответствующих
серверов, проигнорированы, за исключением событий ротации
и удаления журнала, которые все еще зарегистрированы в журнале реле.</p>

<p>В круговой репликации оригинальный сервер обычно действует как разделитель
его собственных событий, чтобы они не были применены не раз. Таким образом,
эта опция полезна в круговой рпликации, когда один из серверов удален.
Предположите, что у Вас есть круговая установка репликации с 4 серверами,
ID 1, 2, 3 и 4, а сервер 3 упал. Соединяя промежуток, запуская репликацию с
сервера 2 на сервер 4, Вы можете включить <code>IGNORE_SERVER_IDS = (3)
</code> в <a href="#change-master-to"><code>CHANGE MASTER TO</code>
</a> на сервере 4, чтобы сказать этому использовать сервер 2 в качестве его
ведущего устройства вместо сервера 3. Это причина проигнорировать, а не
размножить любые запросы, которые произошли с сервером, который больше
не находится в использовании.</p>

<p>Если <a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
без <code>IGNORE_SERVER_IDS</code>, любой существующий список сохранен. Чтобы
очистить список проигнорированных серверов, необходимо использовать
опцию с пустым списком:
<pre>
CHANGE MASTER TO IGNORE_SERVER_IDS = ();
</pre>
<code>RESET SLAVE ALL</code> очищает
<code>IGNORE_SERVER_IDS</code>. До MySQL 5.7 это не сделано.</p>

<p>Если <code>IGNORE_SERVER_IDS</code> содержит ID сервера, и сервер был
запущен с <a href="replica.htm#option_mysqld_replicate-same-server-id">
<code>--replicate-same-server-id</code></a>, будет ошибка.</p>

<p>В MySQL 8.0 основной репозитарий информации и вывод
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>
обеспечивает список серверов, которые в настоящее время игнорируются. Для
получения дополнительной информации см. разделы
<a href="replica.htm#slave-logs-status">19.2.4.2</a> и
<a href="#show-slave-status">14.7.5.34</a>.</p>

<p>В MySQL 8.0 вызов <a href="#change-master-to"><code>CHANGE
MASTER TO</code></a> вызывает запись предыдущих значений
<code>MASTER_HOST</code>, <code>MASTER_PORT</code>,
<code>MASTER_LOG_FILE</code> и <code>MASTER_LOG_POS</code>
в журнал ошибок, наряду с другой информацией о статусе ведомого
устройства до выполнения.</p>

<p>В MySQL 8.0 <code>CHANGE MASTER TO</code> неявно закрывает
продолжающиеся транзакции. См. <a href="#implicit-commit">раздел
14.3.3</a>.</p>

<p>Строгое требование, чтобы выполнить <a href="#stop-slave"><code>
STOP SLAVE</code></a> до любого <a href="#change-master-to"><code>
CHANGE MASTER TO</code></a> (и <a href="#start-slave"><code>START
SLAVE</code></a> позже) удалено. Вместо этого, в зависимости от того,
остановлено ли ведомое устройство, логика <code>CHANGE MASTER TO</code>
зависит от статуса ведомого потока SQL и ведомых потоков ввода/вывода, какой
из этих потоков остановлен или работает, теперь определяют опции, которые
могут или не могут использоваться с <code>CHANGE MASTER TO</code>
в данном моменте времени. Правила для того, чтобы сделать это
определение перечислены здесь:</p>

<ul><li><p>Если поток SQL остановлен, Вы можете выполнить
<code>CHANGE MASTER TO</code> с использованием любой комбинации, которая
допускается <code>RELAY_LOG_FILE</code>, <code>RELAY_LOG_POS</code> и
<code>MASTER_DELAY</code>, даже если ведомый поток ввода/вывода работает.
Никакие другие опции не могут использоваться с этим запросом, когда поток
ввода/вывода работает.</li>

<li>Если поток ввода/вывода остановлен, Вы можете выполнить
<code>CHANGE MASTER TO</code> с использованием любой из опций для этого
запросы (в любой позволенной комбинации) <span><em>кроме</em></span>
<code>RELAY_LOG_FILE</code>, <code>RELAY_LOG_POS</code> или
<code>MASTER_DELAY</code>, даже когда поток SQL работает. Эти три опции не
могут использоваться, когда поток ввода/вывода работает.</li>

<li>Поток SQL и поток ввода/вывода должны быть остановлены прежде, чем
скомандовать <code>CHANGE MASTER TO</code>, который использует
<code>MASTER_AUTO_POSITION = 1</code>.</p></li></ul>

<p>Вы можете проверить текущее состояние ведомого SQL и потоков
ввода/вывода с использованием <a href="#show-slave-status"><code>
SHOW SLAVE STATUS</code></a>.</p>
<p>См. <a href="replica.htm#replication-solutions-switch">раздел 19.3.8</a>.
</p>

<p>Если Вы используете основанную на запросе репликацию
и временные таблицы, это возможно для <code>CHANGE MASTER TO</code> после
<code>STOP SLAVE</code> оставить позади временные таблицы на ведомом
устройстве. Предупреждение (<span>ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO
</span>) теперь выпущено всякий раз, когда это происходит. Вы можете избежать
этого удостоверяясь, что значение
<a href="server.htm#statvar_Slave_open_temp_tables"><code>
Slave_open_temp_tables</code></a> = 0 до выполнения такого
<code>CHANGE MASTER TO</code>.</p>

<p><a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
полезно для установки ведомого устройства, когда Вы имеете снимок ведущего
устройства и сделали запись основных двоичных координат журнала,
соответствующих времени снимка. После загрузки снимка в ведомое устройство,
чтобы синхронизировать это с ведущим устройством, Вы можете выполнить
<code>CHANGE MASTER TO MASTER_LOG_FILE='<em><code>log_name</code></em>',
MASTER_LOG_POS=<em><code>log_pos</code></em></code> на ведомом устройстве,
чтобы определить координаты, в которых ведомое устройство должно начать
читать основной двоичной журнал.</p>

<p>Следующий пример изменяет главный сервер, который использует ведомое
устройство и устанавливает основные двоичные координаты журнала, из которых
ведомое устройство начинает читать. Это используется, когда Вы хотите
настроить ведомое устройство, чтобы копировать ведущее устройство:
<pre>
CHANGE MASTER TO MASTER_HOST='master2.mycompany.com',
       MASTER_USER='replication', MASTER_PASSWORD='bigs3cret',
       MASTER_PORT=3306, MASTER_LOG_FILE='master2-bin.001',
       MASTER_LOG_POS=4, MASTER_CONNECT_RETRY=10;
</pre>

Следующий пример показывает работу, которая менее часто используется.
Это используется, когда у ведомого устройства есть файлы системного журнала
реле, которые Вы хотите, чтобы это выполнило снова по некоторым причинам.
Вы должны использовать только <a href="#change-master-to"><code>CHANGE
MASTER TO</code></a> и запустите поток SQL (<code>START SLAVE SQL_THREAD
</code>):
<pre>
CHANGE MASTER TO RELAY_LOG_FILE='slave-relay-bin.006',
       RELAY_LOG_POS=4025;
</pre>

Вы можете даже использовать вторую операцию в установке без репликации
с автономным, неведомым, сервером для восстановления после катастрофического
отказа. Предположите, что Ваш сервер отказал, и Вы восстановили его из
резервной копии. Вы хотите переиграть собственные двоичные файлы системного
журнала сервера (не файлы системного журнала реле, а регулярные двоичные
файлы системного журнала), названные (например) <code>myhost-bin.*</code>.
Во-первых, сделайте резервную копию этих двоичных файлов системного журнала в
некотором безопасном месте, в случае, если Вы точно не следуете за процедурой
ниже и случайно имеете чистку двоичного журнала сервера. Используйте
<code>SET GLOBAL relay_log_purge=0</code>
для дополнительной безопасности. Тогда запустите сервер без опции
<a href="replica.htm#option_mysqld_log-bin"><code>--log-bin</code></a>,
вместо этого используйте
<a href="replica.htm#option_mysqld_replicate-same-server-id"><code>
--replicate-same-server-id</code></a>,
<a href="replica.htm#option_mysqld_relay-log"><code>--relay-log=myhost-bin
</code></a> (чтобы заставить сервер полагать, что эти регулярные двоичные
файлы системного журнала это файлы системного журнала реле), и
<a href="replica.htm#option_mysqld_skip-slave-start"><code>
--skip-slave-start</code></a>. После того, как сервер запускается,
сделайте эти запросы:
<pre>
CHANGE MASTER TO RELAY_LOG_FILE='myhost-bin.153',
       RELAY_LOG_POS=410, MASTER_HOST='some_dummy_string';
       START SLAVE SQL_THREAD;
</pre>

Сервер читает и выполняет свои собственные двоичные файлы системного журнала,
таким образом достигая восстановления катастрофического отказа. Как только
восстановление закончено, выполните
<a href="#stop-slave"><code>STOP SLAVE</code></a>,
закройте сервер, очистите основную информацию и репозитарии информации
журнала реле, и перезапустите сервер с его оригинальными опциями.</p>

<p>Определение <code>MASTER_HOST</code> (даже с фиктивным значением) обязано
заставлять сервер думать, что это ведомое устройство.</p>
<p>Следующая таблица показывает максимальную допустимую длину строк опций.
</p>

<table border="1">
<thead><tr><th scope="col">Опция</th><th scope="col">Максимальная длина</th>
</tr></thead>
<tbody><tr><td scope="row"><code>MASTER_HOST</code></td><td>60</td></tr>
<tr><td scope="row"><code>MASTER_USER</code></td><td>16</td></tr>
<tr><td scope="row"><code>MASTER_PASSWORD</code></td><td>32</td></tr>
<tr><td scope="row"><code>MASTER_LOG_FILE</code></td><td>255</td></tr>
<tr><td scope="row"><code>RELAY_LOG_FILE</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CA</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CAPATH</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CERT</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CRL</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CRLPATH</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_KEY</code></td><td>255</td></tr>
<tr><td scope="row"><code>MASTER_SSL_CIPHER</code></td><td>511</td></tr>
</tbody></table>

<h4><a name="change-replication-filter"></a>14.4.2.2.
CHANGE REPLICATION FILTER</h4>
<pre>
CHANGE REPLICATION FILTER <em><code>filter</code></em>[, <em><code>filter</code></em>][, ...]
<em><code>filter</code></em>:
REPLICATE_DO_DB = (<em><code>db_list</code></em>)
  | REPLICATE_IGNORE_DB = (<em><code>db_list</code></em>)
  | REPLICATE_DO_TABLE = (<em><code>tbl_list</code></em>)
  | REPLICATE_IGNORE_TABLE = (<em><code>tbl_list</code></em>)
  | REPLICATE_WILD_DO_TABLE = (<em><code>wild_tbl_list</code></em>)
  | REPLICATE_WILD_IGNORE_TABLE = (<em><code>wild_tbl_list</code></em>)
  | REPLICATE_REWRITE_DB = (<em><code>db_pair_list</code></em>)
<em><code>db_list</code></em>:
<em><code>db_name</code></em>[, <em><code>db_name</code></em>][, ...]
<em><code>tbl_list</code></em>:
<em><code>db_name.table_name</code></em>[, <em><code>db_table_name</code></em>][, ...]
<em><code>wild_tbl_list</code></em>:
'<em><code>db_pattern.table_pattern</code></em>'[, '<em><code>db_pattern.table_pattern</code></em>'][, ...]
<em><code>db_pair_list</code></em>:
(<em><code>db_pair</code></em>)[, (<em><code>db_pair</code></em>)][, ...]
<em><code>db_pair</code></em>:
<em><code>from_db</code></em>, <em><code>to_db</code></em>
</pre>

<code>CHANGE REPLICATION FILTER</code>
определяет один или более фильтров на ведомом устройстве таким же образом,
как при запуске ведомого устройства <a href="programs.htm#mysqld"><span>
<strong>mysqld</strong></span></a> с опциями фильтрации
<a href="replica.htm#option_mysqld_replicate-do-db"><code>--replicate-do-db
</code></a> или <a href="replica.htm#option_mysqld_replicate-wild-ignore-table">
<code>--replicate-wild-ignore-table</code></a>.
В отличие от случая с параметрами сервера, этот запрос не требует перезапуска
сервера, чтобы вступить в силу, только чтобы ведомый поток SQL был
остановлен, используя <a href="#stop-slave"><code>STOP SLAVE
SQL_THREAD</code></a> (и перезапущен через
<a href="#start-slave"><code>START SLAVE SQL_THREAD</code></a>).</p>

<p>Следующий список показывает опции <code>CHANGE REPLICATION FILTER</code>,
и как они касаются параметров сервера <code>--replicate-*</code>:</p>
<ul><li><p><code>REPLICATE_DO_DB</code>: Включить обновления, основанные на
имени базы данных. Эквивалент
<a href="replica.htm#option_mysqld_replicate-do-db"><code>
--replicate-do-db</code></a>.</li>

<li><code>REPLICATE_IGNORE_DB</code>: Исключить обновления, основанные на
имени базы данных. Эквивалент
<a href="replica.htm#option_mysqld_replicate-ignore-db"><code>
--replicate-ignore-db</code></a>.</li>

<li><code>REPLICATE_DO_TABLE</code>: Включить обновления, основанные на
имени таблицы. Эквивалент
<a href="replica.htm#option_mysqld_replicate-do-table"><code>
--replicate-do-table</code></a>.</li>

<li>
<code>REPLICATE_IGNORE_TABLE</code>: Исключить обновления, основанные на
имени таблицы. Эквивалент
<a href="replica.htm#option_mysqld_replicate-ignore-table"><code>
--replicate-ignore-table</code></a>.</li>

<li><code>REPLICATE_WILD_DO_TABLE</code>: Включить обновления, основанные на
на подстановочном образце, соответствующем имени таблицы. Эквивалент
<a href="replica.htm#option_mysqld_replicate-wild-do-table"><code>
--replicate-wild-do-table</code></a>.</li>

<li><code>REPLICATE_WILD_IGNORE_TABLE</code>: Исключить обновления,
основанные на на подстановочном образце, соответствующем имени таблицы.
Эквивалент <a href="replica.htm#option_mysqld_replicate-wild-ignore-table">
<code>--replicate-wild-ignore-table</code></a>.</li>

<li><code>REPLICATE_REWRITE_DB</code>: Выполнить обновления на ведомом
устройстве после замены новым именем на ведомом устройстве для указанной базы
данных по ведущему устройству. Эквивалент
<a href="replica.htm#option_mysqld_replicate-rewrite-db"><code>
--replicate-rewrite-db</code></a>.</p></li></ul>

<p>Точные эффекты <code>REPLICATE_DO_DB</code> и <code>REPLICATE_IGNORE_DB
</code> зависят от того, основана репликация на запросе или на строке в
действительности. См. <a href="replica.htm#replication-rules">раздел 19.2.5
</a>.</p>

<p>Многократные правила фильтрации ответа могут быть созданы в одном запросе
<code>CHANGE REPLICATION FILTER</code> , отделяя правила запятыми,
как показано здесь:
<pre>
CHANGE REPLICATION FILTER
       REPLICATE_DO_DB = (d1), REPLICATE_IGNORE_DB = (d2);
</pre>

Это эквивалентно запуску ведомого устройства
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
опциями <a href="replica.htm#option_mysqld_replicate-do-db"><code>
--replicate-do-db=d1</code></a> и
<a href="replica.htm#option_mysqld_replicate-ignore-db"><code>
--replicate-ignore-db=d2</code></a>.</p>

<p>Если то же самое правило фильтрации определено многократно, только
<span><em>последнее</em></span> такое правило фактически используется.
Например, эти два запросы, показанные здесь, имеют точно тот же самый эффект,
потому что первое правило <code>REPLICATE_DO_DB</code>
в первом запросе проигнорировано:
<pre>
CHANGE REPLICATION FILTER
       REPLICATE_DO_DB = (db1, db2), REPLICATE_DO_DB = (db3, db4);
CHANGE REPLICATION FILTER REPLICATE_DO_DB = (db3,db4);
</pre>

<p>Это поведение отличается от поведения из опции фильтра
<code>--replicate-*</code>, где определение той же самой опции много раз
вызывает создание многократных правил фильтра.</p>

<p>Названия таблиц и базы данных, не содержащих любых специальных
символов, не должны быть заключены в кавычки. Значения, используемые с
<code>REPLICATION_WILD_TABLE</code> и
<code>REPLICATION_WILD_IGNORE_TABLE</code> это
строковые выражения, возможно, содержащие (специальные) подстановочные
символы, и должны быть заключены в кавычки.
Это показывают в следующих запросах в качестве примера:
<pre>
CHANGE REPLICATION FILTER REPLICATE_WILD_DO_TABLE = ('db1.old%');
CHANGE REPLICATION FILTER
       REPLICATE_WILD_IGNORE_TABLE = ('db1.new%', 'db2.new%');
</pre>

Значения, используемые с <code>REPLICATE_REWRITE_DB</code> это
<span><em>пары</em></span> имен базы данных,
каждое такое значение должно быть приложено в круглых скобках. Следующий
запрос переписывает запросы, происходящие в базе данных
<code>dbA</code> в базу данных <code>dbB</code>:
<pre>
CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB = ((db1, db2));
</pre>

Запрос содержит два набора круглых скобок, один включает пару имен базы
данных, другой весь список. Это более легко видно в следующем примере,
который создает два правила <code>rewrite-db</code>,
одно переписывает база данных <code>dbA</code> в <code>dbB</code>, второе
переписывает базу данных <code>dbC</code> в <code>dbD</code>:
<pre>
CHANGE REPLICATION FILTER
       REPLICATE_REWRITE_DB = ((dbA, dbB), (dbC, dbD));
</pre>

Этот запрос оставляет любые существующие правила фильтрации неизменными,
чтобы сбросить все фильтры данного типа, установите значение фильтра в явно
пустой список, как показано в этом примере, который удаляет все существующие
правила <code>REPLICATE_DO_DB</code> и <code>REPLICATE_IGNORE_DB</code>:
<pre>
CHANGE REPLICATION FILTER
       REPLICATE_DO_DB = (), REPLICATE_IGNORE_DB = ();
</pre>

Установка фильтра таким образом удаляет все существующие правила, не создает
новых и не восстанавливает набор правил при использовании запуска
mysqld с опциями <code>--replicate-*</code>.</p>

<p>Значения, используемые с <code>REPLICATE_WILD_DO_TABLE</code> и
<code>REPLICATE_WILD_IGNORE_TABLE</code>, должны быть в формате
<code><em><code>db_name</code></em>.<em><code>tbl_name</code></em></code>.
</p>
<p>См. <a href="replica.htm#replication-rules">раздел 19.2.5</a>.</p>

<h4><a name="master-pos-wait"></a>14.4.2.3. MASTER_POS_WAIT()</h4>
<pre>
SELECT MASTER_POS_WAIT('<em><code>master_log_file</code></em>',
<em><code>master_log_pos</code></em> [, <em><code>timeout</code></em>][,
<em><code>channel</code></em>])
</pre>

Это фактически функция, не запрос. Это используется, чтобы гарантировать, что
ведомое устройство считало и запустило события до данной позиции в двоичном
журнале ведущего устройства. См.
<a href="funct.htm#miscellaneous-functions">раздел 13.18</a>.</p>

<h4><a name="reset-slave"></a>14.4.2.4. RESET SLAVE</h4>
<pre>
RESET SLAVE [ALL] [<em><code>channel_option</code></em>]
<em><code>channel_option</code></em>:
FOR CHANNEL <em><code>channel</code></em>
</pre>

<a href="#reset-slave"><code>RESET SLAVE</code></a>
заставляет ведомое устройство забыть свою позицию в двоичном журнале ведущего
устройства. Этот запрос предназначается для чистого запуска: это очищает
основную информацию и репозитарии информации журнала реле, удаляет все файлы
системного журнала реле и запускает новый файл системного журнала реле. Это
также сбрасывает к 0 задержку, определенную опцией
<code>MASTER_DELAY</code> в <code>CHANGE MASTER TO</code>. Чтобы использовать
<a href="#reset-slave"><code>RESET SLAVE</code></a>, ведомые потоки
должны быть остановлены (с использованием <a href="#stop-slave"><code>
STOP SLAVE</code></a> в случае необходимости).</p>

<p>Все файлы системного журнала реле удалены, даже если они не были полностью
выполнены ведомым потоком SQL. Это условие, чтобы существовать на ведомом
устройстве ответа, если Вы выполнили <a href="#stop-slave"><code>STOP
SLAVE</code></a> или если ведомое устройство чрезвычайно загружено.</p>

<p>Опция <code>FOR CHANNEL <em><code>channel</code></em></code>
позволяет Вам выбрать, к которому каналу ответа относится запрос. Если
никакой пункт не установлен, и никакие дополнительные каналы не существуют,
запрос относится к каналу по умолчанию и ведет себя как версии MySQL до
5.7.6. Обеспечение <code>FOR CHANNEL <em><code>channel</code></em></code>
применяет <code>RESET SLAVE</code> к определенному каналу. Объединение
<code>FOR CHANNEL <em><code>channel</code></em></code> с опцией
<code>ALL</code> удаляет указанный канал. <a href="#reset-slave">
<code>RESET SLAVE ALL</code></a> без <code>FOR CHANNEL
<em><code>channel</code></em></code>, когда многократные каналы существуют,
удаляет <span><em>все</em></span> каналы и обновляет только канал по
умолчанию. См. <a href="replica.htm#replication-channels">раздел 19.2.3</a>.
</p>

<p><a href="#reset-slave"><code>RESET SLAVE</code></a>
не изменяет параметров соединения, таких как основной узел, порт,
пользователь или пароль, которые сохранены в памяти. Это означает, что
<a href="#start-slave"><code>START SLAVE</code></a>
может быть выпущен, не требуя
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
с <a href="#reset-slave"><code>RESET SLAVE</code></a>.</p>

<p>Параметры соединения сброшены <code>RESET SLAVE ALL</code>.
<code>RESET SLAVE</code> сопровождаемый перезапуском
ведомого устройства <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> также делает это.</p>

<p>В MySQL 8.0 <code>RESET SLAVE</code> неявно закрывает транзакции. См.
<a href="#implicit-commit">раздел 14.3.3</a>.</p>

<p>Если ведомый поток SQL был в середине мультиплицирования временных таблиц,
когда это было остановлено, и
<a href="#reset-slave"><code>RESET SLAVE</code></a>
выпущен, эти копируемые временные таблицы удалены на ведомом устройстве.</p>

<p>До MySQL 5.7.5 <code>RESET SLAVE</code> также имеет эффект сброса обоих
периодов такта (<a href="server.htm#statvar_Slave_heartbeat_period"><code>
Slave_heartbeat_period</code></a>) и <code>SSL_VERIFY_SERVER_CERT</code>. Эта
проблема исправлена в MySQL 5.7.5 и позже (Bug #18777899, Bug #18778485).</p>

<p><code>RESET SLAVE ALL</code> очищает список
<code>IGNORE_SERVER_IDS</code>, установленный
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>.</p>

<h4><a name="set-global-sql-slave-skip-counter"></a>14.4.2.5.
SET GLOBAL sql_slave_skip_counter</h4>
<pre>
SET GLOBAL sql_slave_skip_counter = <em><code>N</code></em>
</pre>

Этот запрос пропускает следующие <em><code>N</code></em>
событий от ведущего устройства. Это полезно для восстановления от
остановок, вызванных запросом.</p>
<p>Этот запрос допустим только, когда ведомые потоки не работают.
Иначе это производит ошибку.</p>

<p>Используя этот запрос, важно понять, что двоичной журнал фактически
организован как последовательность групп, известных как
<span class="firstterm">группы событий</span>.
Каждая группа событий состоит из последовательности событий.</p>

<ul><li><p>Для транзакционных таблиц группа событий соответствует транзакции.
</li>
<li>Для нетранзакционных таблиц группа событий соответствует
единственному запросу SQL.</p></li></ul>

<p>Единственная транзакция может содержать изменения
транзакционных и нетранзакционных таблиц.</p>
<p>Когда Вы используете <a href="#set-global-sql-slave-skip-counter">
<code>SET GLOBAL sql_slave_skip_counter</code></a>, чтобы пропускать события,
и результат находится в середине группы, ведомое устройство продолжает
пропускать события, пока это не достигает конца группы. Выполнение тогда
запускается со следующей группы событий.</p>

<h4><a name="start-slave"></a>14.4.2.6. START SLAVE</h4>
<pre>
START SLAVE [<em><code>thread_types</code></em>] [<em><code>until_option</code></em>]
[<em><code>connection_options</code></em>] [<em><code>channel_option</code></em>]
<em><code>thread_types</code></em>:
[<em><code>thread_type</code></em> [, <em><code>thread_type</code></em>] ... ]
<em><code>thread_type</code></em>:
IO_THREAD | SQL_THREAD
<em><code>until_option</code></em>:
UNTIL {{SQL_BEFORE_GTIDS | SQL_AFTER_GTIDS} = <em><code>gtid_set</code></em>
  |  MASTER_LOG_FILE = '<em><code>log_name</code></em>', MASTER_LOG_POS = <em><code>log_pos</code></em>
  |  RELAY_LOG_FILE = '<em><code>log_name</code></em>', RELAY_LOG_POS = <em><code>log_pos</code></em>
  |  SQL_AFTER_MTS_GAPS  }

<em><code>connection_options</code></em>:
[USER='<em><code>user_name</code></em>'] [PASSWORD='<em><code>user_pass</code></em>']
[DEFAULT_AUTH='<em><code>plugin_name</code></em>']
[PLUGIN_DIR='<em><code>plugin_dir</code></em>']
<em><code>channel_option</code></em>:
FOR CHANNEL <em><code>channel</code></em>
<em><code>gtid_set</code></em>:
<em><code>uuid_set</code></em> [, <em><code>uuid_set</code></em>] ... | ''
<em><code>uuid_set</code></em>:
<em><code>uuid</code></em>:<em><code>interval</code></em>[:<em><code>interval</code></em>]...
<em><code>uuid</code></em>:
<em><code>hhhhhhhh</code></em>-<em><code>hhhh</code></em>-<em><code>hhhh</code></em>-<em><code>hhhh</code></em>-<em><code>hhhhhhhhhhhh</code></em>
<em><code>h</code></em>: [0-9,A-F]
<em><code>interval</code></em>:
<em><code>n</code></em>[-<em><code>n</code></em>]
(<em><code>n</code></em> &gt;= 1)
</pre>

<a href="#start-slave"><code>START SLAVE</code></a> без
<em><code>thread_type</code></em> запускает оба ведомых потока.
Поток ввода/вывода читает события из главного сервера и хранит их в журнале
реле. Поток событий SQL читает из журнала реле и выполняет их.
<a href="#start-slave"><code>START SLAVE</code></a> требует привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Если <a href="#start-slave"><code>START SLAVE</code></a>
преуспевает в том, чтобы запустить ведомые потоки, это возвращается без
ошибки. Однако, даже в этом случае, могло бы случиться так, что ведомые
потоки запускаются и затем останавливаются позже (например, потому что им не
удается соединиться с ведущим устройством или считать двоичной журнал).
<a href="#start-slave"><code>START SLAVE</code></a> не предупреждает
Вас об этом. Вы должны проверить журнал ошибок ведомого устройства на
сообщения об ошибках, произведенные ведомыми потоками, или проверить, что они
работают удовлетворительно с помощью <a href="#show-slave-status">
<code>SHOW SLAVE STATUS</code></a>.</p>

<p><code>START SLAVE</code> неявно передает продолжающиеся транзакции. См.
<a href="#implicit-commit">раздел 14.3.3</a>.</p>
<p><a href="replica.htm#sysvar_gtid_next"><code>gtid_next</code></a>
должен быть установлен в <code>AUTOMATIC</code> прежде, чем
сделать этот запрос.</p>

<p><code>FOR CHANNEL <em><code>channel</code></em></code>
позволяет Вам выбрать, к которому каналу ответа относится запрос. Если
не установлен, и никакие дополнительные каналы не существуют, запрос
относится к каналу по умолчанию и ведет себя как MySQL до 5.7.6. Обеспечение
<code>FOR CHANNEL <em><code>channel</code></em></code> применяет
<code>START SLAVE</code> к определенному каналу. Если
<code>START SLAVE</code> не определяли канал, используя многократные каналы,
это запрос запускает указанные потоки для всех каналов. Этот запрос отвергнут
для канала <code>group_replication_recovery</code>. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p>

<p>MySQL 8.0 поддерживает аутентификацию пользовательского пароля с
<code>START SLAVE</code> с параметрами <code>USER</code>,
<code>PASSWORD</code>, <code>DEFAULT_AUTH</code> и <code>PLUGIN_DIR</code>,
как описано в следующем списке:</p>

<ul><li><p><code>USER</code>: Имя пользователя. Не может быть установлено в
пустую строку, если использован <code>PASSWORD</code>.</li>
<li><code>PASSWORD</code>: Пароль.</li>

<li><code>DEFAULT_AUTH</code>: Имя плагина, по умолчанию это
встроенная аутентификация MySQL.</li>
<li><code>PLUGIN_DIR</code>: Местонахождение плагина.</p></li></ul>

<p>Вы не можете использовать <code>SQL_THREAD</code>, определяя любой из
параметров <code>USER</code>, <code>PASSWORD</code>,
<code>DEFAULT_AUTH</code> или <code>PLUGIN_DIR</code>, если
<code>IO_THREAD</code> также предоставлена.</p>
<p>См. <a href="security.html#pluggable-authentication">раздел 7.3.9</a>.</p>

<p>Если опасное соединение используется с какими-либо этими опциями, сервер
выдает предупреждение <span>Sending passwords in plain text without SSL/TLS
is extremely insecure</span>.</p>

<p><code>START SLAVE ... UNTIL</code> поддерживает две дополнительных опции
для использования с глобальными операционными идентификаторами (GTID) (см.
<a href="replica.htm#replication-gtids">раздел 19.1.3</a>).
Каждая из них берет один или более глобальных операционных идентификаторов
<em><code>gtid_set</code></em> как аргумент.</p>

<p>Когда не определен <em><code>thread_type</code></em>,
<code>START SLAVE UNTIL SQL_BEFORE_GTIDS</code>
заставляет ведомый поток SQL обрабатывать транзакции, пока он не достигнет
<span><em>первой</em></span> транзакции, GTID которой перечислен в
<em><code>gtid_set</code></em>. <code>START SLAVE UNTIL SQL_AFTER_GTIDS
</code> заставляет ведомые потоки обрабатывать все транзакции до
<em><code>последней</code></em> транзакции в <em><code>gtid_set</code></em>.
Другими словами, <code>START SLAVE UNTIL SQL_BEFORE_GTIDS</code>
заставляет ведомый поток SQL обрабатывать все транзакции, происходящие перед
первым GTID в <em><code>gtid_set</code></em>, а
<code>START SLAVE UNTIL SQL_AFTER_GTIDS</code> заставляет ведомые потоки
обрабатывать все транзакции, включая те, GTID которых найдены в
<em><code>gtid_set</code></em>, пока не столкнутся с транзакцией, GTID
которой не часть набора. <code>SQL_BEFORE_GTIDS</code> и
<code>SQL_AFTER_GTIDS</code> поддерживают опции <code>SQL_THREAD</code> и
<code>IO_THREAD</code>, хотя использование <code>IO_THREAD</code> с ними в
настоящее время не имеет никакого эффекта.</p>

<p>Например, <code>START SLAVE SQL_THREAD UNTIL SQL_BEFORE_GTIDS =
3E11FA47-71CA-11E1-9E33-C80AA9429562:11-56</code> заставляет ведомый поток
SQL обрабатывать все транзакции, происходящие от ведущего устройства, чей
<a href="replica.htm#sysvar_server_uuid"><code>server_uuid</code></a>
<code>3E11FA47-71CA-11E1-9E33-C80AA9429562</code>, пока это не сталкивается
с транзакцией, имеющей порядковый номер 11, это тогда останавливается, не
обрабатывая эту транзакцию. Другими словами, все транзакции до и включая
транзакцию с порядковым номером 10 обработаны. Выполнение <code>START SLAVE
SQL_THREAD UNTIL SQL_AFTER_GTIDS =
3E11FA47-71CA-11E1-9E33-C80AA9429562:11-56</code> с другой стороны заставил
бы ведомый поток SQL получать все транзакции от ведущего устройства, включая
все транзакции, имеющие порядковые номера 11-56, а затем останавливаться, не
обрабатывая дополнительных транзакций, то есть, транзакция, имеющая
порядковый номер 56, была бы последней транзакцией, принесенной
ведомым потоком SQL.</p>

<p>Используя мультипоточное ведомое устройство, есть шанс промежутков в
последовательности транзакций, которые выполнены от реле.
Это следующие случаи:</p>

<ul><li><p>Уничтожение потока координатора.</li>
<li>После того, как ошибка происходит в рабочих потоках.</li>
<li><a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
закрывается неожиданно.</p></li></ul>

<p>Используйте <a href="#start-slave"><code>START SLAVE
UNTIL SQL_AFTER_MTS_GAPS</code></a>, чтобы заставить потоки мультипоточного
ведомого устройства работать только до промежутков в журнале реле, и затем
остановиться. Этот запрос может взять опцию <code>SQL_THREAD</code>, но
эффект запроса остается неизменным. Это не имеет никакого эффекта на ведомый
поток ввода/вывода (и не может использоваться с <code>IO_THREAD</code>).</p>

<p><a href="#start-slave"><code>START SLAVE</code></a>
на мультипоточном ведомом устройстве с промежутками в последовательности
транзакций, выполненных от журнала, производит предупреждение.
В такой ситуации решение состоит в том, чтобы использовать
<a href="#start-slave"><code>START SLAVE UNTIL
SQL_AFTER_MTS_GAPS</code></a>, затем
<a href="#reset-slave"><code>RESET SLAVE</code></a>, чтобы
удалить любые остающиеся журналы реле. См.
<a href="replica.htm#replication-features-transaction-inconsistencies">раздел
19.4.1.34</a>.</p>

<p>Чтобы изменить неудавшееся мультипоточное ведомое устройство единственного
дерева сообщений, Вы можете выпустить следующий ряд
запросов в показанном порядке:
<pre>
START SLAVE UNTIL SQL_AFTER_MTS_GAPS;
SET @@GLOBAL.slave_parallel_workers = 0;
START SLAVE SQL_THREAD;
</pre>

<p>Возможно рассмотреть весь текст выполнения <code>START SLAVE ...</code>,
включая любые значения <code>USER</code> или <code>PASSWORD</code>, в выводе
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>.
Это также верно для текста выполнения
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>,
включая любые значения <code>MASTER_USER</code> или
<code>MASTER_PASSWORD</code>.</p>

<p><a href="#start-slave"><code>START SLAVE</code></a> посылает
признание пользователю после того, как поток ввода/вывода и поток SQL
запустились. Однако, поток ввода/вывода еще, возможно, не соединился. Поэтому
успешный <a href="#start-slave"><code>START SLAVE</code></a>
показывает в <a href="#show-slave-status"><code>SHOW SLAVE STATUS
</code></a> <code>Slave_SQL_Running=Yes</code>, но это не гарантирует, что
<code>Slave_IO_Running=Yes</code> (поскольку
<code>Slave_IO_Running=Yes</code> только, если поток ввода/вывода
работает <span><em>и соединен</em></span>). Для получения дополнительной
информации см. разделы <a href="#show-slave-status">14.7.5.34</a> и
<a href="replica.htm#replication-administration-status">19.1.7.1</a>.</p>

<p>Вы можете добавить опции <code>IO_THREAD</code> и <code>SQL_THREAD</code>,
чтобы назвать, который из потоков запустить. Опция <code>SQL_THREAD</code>
отвергнута, определяя любой из параметров
<code>USER</code>, <code>PASSWORD</code>, <code>DEFAULT_AUTH</code> или
<code>PLUGIN_DIR</code>, если опция <code>IO_THREAD</code> задана.</p>

<p><code>UNTIL</code> (<em><code>until_option</code></em>
в предыдущей грамматике) может быть добавлен, чтобы определить, что ведомое
устройство должно запуститься и работать, пока поток SQL не достигает данной
точки в основном двоичном журнале, определенной опциями
<code>MASTER_LOG_POS</code> и MASTER_LOG_FILE, или пункта в ведомом журнале
реле, обозначенного опциями <code>RELAY_LOG_POS</code> и
<code>RELAY_LOG_FILE</code>. Когда поток SQL достигает определенной точки,
это останавливается. Если опция <code>SQL_THREAD</code> определена в запросе,
она запускает только поток SQL. Иначе, это запускает оба ведомых потока. Если
поток SQL работает, <code>UNTIL</code> проигнорирован, и предупреждение
выпущено. Вы не можете использовать <code>UNTIL</code> с
опцией <code>IO_THREAD</code>.</p>

<p>Также возможно с <code>START SLAVE UNTIL</code> определить остановку
относительно данного GTID или набора GTID с использованием одной из опций
<code>SQL_BEFORE_GTIDS</code> или <code>SQL_AFTER_GTIDS</code>,
как объяснено ранее в этом разделе. Используя одну из этих опций, Вы можете
определить  <code>SQL_THREAD</code>, <code>IO_THREAD, оба из них, или ни один
из них. Если Вы определяете только <code>SQL_THREAD</code>,
тогда только ведомый поток SQL затронут запросом, если только
<code>IO_THREAD</code> используется, тогда только ведомый поток ввода/вывода
затронут. Если используются оба <code>SQL_THREAD</code> и <code>IO_THREAD
</code>, или если ни один из них не используется, то потоки SQL и
ввода/вывода затронуты запросом.</p>

<p><code>UNTIL</code> не поддержан для мультипоточных ведомых устройств кроме
тех случаев, когда также используется
<a href="#start-slave"><code>SQL_AFTER_MTS_GAPS</code></a>.</p>

<p>Для <code>UNTIL</code> Вы должны определить любое из следующего:</p>
<ul><li><p>Имя файла системного журнала и позицию в этом файле.</li>
<li><code>SQL_BEFORE_GTIDS</code> или
<code>SQL_AFTER_GTIDS</code>.</li>
<li><code>SQL_AFTER_MTS_GAPS</code></p></li></ul>

<p>Не смешивайте ведущее устройство и опции журнала реле. Не смешивайте опции
файла системного журнала с опциями GTID.</p>
<p>Любое условие <code>UNTIL</code> сброшено последующим
<a href="#stop-slave"><code>STOP SLAVE</code></a>,
<a href="#start-slave"><code>START SLAVE</code></a>, который не
включает <code>UNTIL</code>, или перезапуском сервера.</p>

<p>Определяя файл системного журнала и позицию, Вы можете использовать
<code>IO_THREAD</code> с <code>START SLAVE ... UNTIL</code>
даже при том, что только поток SQL затронут этим запросом. Опция
<code>IO_THREAD</code> проигнорирована в таких случаях. Предыдущее
ограничение не применяется, используя одну из опций GTID
(<code>SQL_BEFORE_GTIDS</code> и <code>SQL_AFTER_GTIDS</code>), опции GTID
поддерживают обоих <code>SQL_THREAD</code> и <code>IO_THREAD</code>,
как объяснено ранее в этом разделе.</p>

<p><code>UNTIL</code> может быть полезным для того, чтобы отладить
репликацию. Например, если неблагоразумный
<a href="#drop-table"><code>DROP TABLE</code></a>
был выполнен на ведущем устройстве, Вы можете использовать
<code>UNTIL</code>, чтобы сказать ведомому устройству выполнять до того
пункта, но не дальше. Чтобы найти событие, используйте
<a href="programs.htm#mysqlbinlog"><span><strong>mysqlbinlog</strong></span>
</a> с основным двоичным журналом или ведомым журналом реле, или используйте
<a href="#show-binlog-events"><code>SHOW BINLOG EVENTS</code></a>.</p>

<p>Если Вы используете <code>UNTIL</code>, чтобы
ведомый процесс копировал запросы в разделах, рекомендуется, чтобы Вы
запустили ведомое устройство с опцией
<a href="replica.htm#option_mysqld_skip-slave-start"><code>--skip-slave-start
</code></a>, чтобы препятствовать тому, чтобы поток SQL работал, когда
ведомый сервер запускается. Вероятно, лучше использовать эту опцию в файле
опций, а не в командной строке, чтобы неожиданный перезапуск сервера не
заставил это забыть.</p>

<p><a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>
включает выходные поля, которые выводят на экран
текущее значение <code>UNTIL</code>.</p>
<p>В очень старых версиях MySQL (перед 4.0.5) этот запрос назывался
<code>SLAVE START</code>. В MySQL 8.0 этот синтаксис производит ошибку.</p>

<h4><a name="stop-slave"></a>14.4.2.7. STOP SLAVE</h4>
<pre>
STOP SLAVE [<em><code>thread_types</code></em>]
<em><code>thread_types</code></em>:
[<em><code>thread_type</code></em> [, <em><code>thread_type</code></em>] ... ]
<em><code>thread_type</code></em>: IO_THREAD | SQL_THREAD
<em><code>channel_option</code></em>:
FOR CHANNEL <em><code>channel</code></em>
</pre>

Останавливает ведомые потоки. <a href="#stop-slave"><code>STOP
SLAVE</code></a> требует привилегию <a href="security.html#priv_super"><code>
SUPER</code></a>. Рекомендуемая практика должна выполнить
<code>STOP SLAVE</code> на ведомом устройстве прежде, чем остановить ведомый
сервер (см. <a href="server.htm#server-shutdown">раздел 6.1.12</a>.</p>

<p><span><em>Используя основанный на строке формат журналирования</em>
</span>: Вы должны выполнить <code>STOP SLAVE</code> или <code>STOP SLAVE
SQL_THREAD</code> на ведомом устройстве до закрытия ведомого сервера, если Вы
копируете какие-либо таблицы, которые используют
нетранзакционной механизм хранения.</p>

<p>Как <a href="#start-slave"><code>START SLAVE</code></a>,
этот запрос может использоваться с <code>IO_THREAD</code> и
<code>SQL_THREAD</code>, чтобы назвать поток или потоки,
которые будут остановлены.</p>

<p>В MySQL 8.0 <code>STOP SLAVE</code> неявно передает продолжающиеся
транзакции. См. <a href="#implicit-commit">раздел 14.3.3</a>.</p>
<p><a href="replica.htm#sysvar_gtid_next"><code>gtid_next</code></a>
должен быть установлен в <code>AUTOMATIC</code>
прежде, чем сделать это запрос.</p>

<p>Вы можете управлять, сколько времени <code>STOP SLAVE</code> ждет перед
синхронизацией, устанавливая
<a href="replica.htm#sysvar_rpl_stop_slave_timeout"><code>
rpl_stop_slave_timeout</code></a>. Это может использоваться, чтобы избежать
тупиков между <code>STOP SLAVE</code> и другими ведомыми запросами SQL,
используя различные соединения клиента с ведомым устройством.</p>

<p>Некоторые запросы <code>CHANGE MASTER TO</code> позволены в то время, как
ведомое устройство работает, в зависимости от статуса ведомого SQL и потоков
ввода/вывода. Однако, использование <code>STOP SLAVE</code> до выполнения
<code>CHANGE MASTER TO</code> в таких случаях все еще поддержано. См. разделы
<a href="#change-master-to">14.4.2.1</a> и
<a href="replica.htm#replication-solutions-switch">19.3.8</a>.</p>

<p><code>FOR CHANNEL <em><code>channel</code></em></code>
позволяет Вам выбрать, к которому каналу относится запрос. Если никакой пункт
не установлен, и никакие дополнительные каналы не существуют, запрос
относится к каналу по умолчанию и ведет себя как версии MySQL до 5.7.
Обеспечение <code>FOR CHANNEL <em><code>channel</code></em></code>
применяет <code>STOP SLAVE</code> к определенному каналу. Если
<code>STOP SLAVE</code> не определяли канал, используя многократные каналы,
этот запрос останавливает указанные потоки для всех каналов. Этот запрос не
может использоваться с каналом <code>group_replication_recovery</code>. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p>

<p><span><em>Используя основанную на запросе репликацию</em></span>:
изменение ведущего устройства, в то время как у этого есть открытые временные
таблицы, потенциально опасно. Это одна из причин, почему основанная на
запросе репликация временных таблиц не рекомендуется. Вы можете узнать, есть
ли какие-либо временные таблицы на ведомом устройстве, проверяя значение
<a href="server.htm#statvar_Slave_open_temp_tables"><code>
Slave_open_temp_tables</code></a>, используя основанную на запросе
репликацию, это значение должно быть 0 перед выполнением <code>CHANGE MASTER
TO</code>. Если есть какие-либо временные таблицы, открытые на ведомом
устройстве, <code>CHANGE MASTER TO</code> после <code>STOP SLAVE</code>
вызовет предупреждение <span>ER_WARN_OPEN_TEMP_TABLES_MUST_BE_ZERO</span>.</p>

<p>Используя мультипоточное ведомое устройство
(<a href="replica.htm#sysvar_slave_parallel_workers"><code>
slave_parallel_workers</code></a> не 0),
любые разрывы в последовательности транзакций, выполненных от журнала реле,
преодолены как часть остановки рабочего потока. Если ведомое устройство
неожиданно остановлено (например из-за ошибки в рабочем потоке)
в то время, как <a href="#stop-slave"><code>STOP SLAVE</code></a>
выполняется, последовательность выполненных транзакций от журнала реле может
стать непоследовательной. См.
<a href="replica.htm#replication-features-transaction-inconsistencies">раздел
19.4.1.34</a>.</p>

<p>В MySQL 8.0 <a href="#stop-slave"><code>STOP SLAVE</code></a>
ждет, пока текущая группа событий, затрагивающая одну или
более нетранзакционных таблиц, не закончит выполняться (если есть какая-либо
такая группа) или не будет команды <a href="#kill"><code>KILL QUERY
</code></a> или <a href="#kill"><code>KILL CONNECTION</code></a>
(Bug #319, Bug #38205).</p>

<h3><a name="replication-group-sql"></a>14.4.3.
Запросы SQL для управления группами репликации</h3>
<p>Этот раздел предоставляет информацию о запросах, используемых для того,
чтобы управлять группами репликации.</p>

<h4><a name="start-group-replication"></a>14.4.3.1. START GROUP_REPLICATION
</h4>
<pre>
START GROUP_REPLICATION
</pre>
Запускает группу репликации.</p>

<h4><a name="stop-group-replication"></a>14.4.3.2. STOP GROUP_REPLICATION</h4>
<pre>
STOP GROUP_REPLICATION
</pre>
Останваливает группу репликации.</p>

<h2><a name="sql-syntax-prepared-statements"></a>14.5.
Подготовленные запросы SQL</h2>
<p>MySQL 8.0 оказывает поддержку для подготовленных запросов стороны сервера.
Эта поддержка использует эффективный протокол двоичной синхронной передачи
данных клиент-сервер. Использование готовые запросы с заполнителями для
параметра значения обладает следующими преимуществами:</p>

<ul><li><p>Меньше издержек, чтобы разобрать запрос каждый раз.
Как правило, приложения базы данных обрабатывают большие объемы почти
идентичных запросов только изменениями с переменных значений в таких пунктах,
как <code>WHERE</code> для запросов и удалений и
<code>VALUES</code> для вставок.</li>
<li>Защита от атак с использованием кода на SQL. Значения параметра могут
содержать неоставленную кавычку SQL и символы-разделители.</p></li></ul>

<h3><a name="idm139965337564768"></a>Готовые запросы в приложениях</h3>
<p>Вы можете использовать подготовленные запросы стороны сервера через
клиента, программирующего интерфейсы, включая <a href="connect.htm#c-api">
MySQL C API client library</a> или
<a href="../../../dev.mysql.com/doc/connector-c/en/default.htm" target="_top">MySQL
Connector/C</a> для C-программ,
<a href="../../../dev.mysql.com/doc/connector-j/5.1/en/default.htm" target="_top">MySQL
Connector/J</a> для Java и
<a href="../../../dev.mysql.com/doc/connector-net/en/default.htm" target="_top">MySQL
Connector/Net</a> для .NET. Например, C API обеспечивает ряд вызовов функций,
которые составляют готовый запрос API. См.
<a href="connect.htm#c-api-prepared-statements">раздел 25.8.8</a>.
Другие языковые интерфейсы могут оказать поддержку для готовых запросов,
которые используют протокол двоичной синхронной передачи данных в библиотеке
клиента C, один пример,
<a href="../../../php.net/mysqli" target="_top"><code>mysqli</code>
extension</a>, доступен в PHP 5.0 и выше.</p>

<h3><a name="idm139965337557904"></a>Готовые запросы в скриптах SQL</h3>
<p>Альтернативный интерфейс SQL к готовым запросам доступен. Этот интерфейс
не столь же эффективен, как использование протокола двоичной синхронной
передачи данных через готовый запрос, но не требует никакого
программирования, потому что это доступно непосредственно на уровне SQL:</p>

<ul><li><p>Вы можете использовать это, когда никакой программный интерфейс
не доступен Вам.</li>
<li>Вы можете использовать это из любой программы, которая может послать
запрос SQL серверу, который будет выполнен, такие как <a href="programs.htm#mysql">
<span><strong>mysql</strong></span></a>.</li>

<li>Вы можете использовать это, даже если клиент использует старую версию
библиотеки клиента, пока Вы соединяетесь с выполнением сервера
MySQL 4.1 или выше.</p></li></ul>

<p>Синтаксис SQL для готовых запросов предназначен, чтобы использоваться для
ситуаций, таких как:</p>
<ul><li><p>Проверить, как готовые запросы работают в Вашем приложении прежде,
чем кодировать это.</li>

<li>Использовать подготовленные запросы, когда у Вас нет доступа к
программированию API, который поддерживает их.</li>
<li>В интерактивном режиме, чтобы расследовать проблемы
приложения с готовыми запросами.</li>
<li>Создать прецедент, который воспроизводит проблему с готовыми запросами,
так, чтобы Вы могли зарегистрировать отчет об ошибках.</p></li></ul>

<h3><a name="idm139965337547696"></a>PREPARE, EXECUTE и DEALLOCATE PREPARE
</h3>
<p>Синтаксис SQL для готовых запросов основан на трех запросах SQL:</p>
<ul><li><p><a href="#prepare"><code>PREPARE</code></a> готовит запрос
к выполнению (см. <a href="#prepare">раздел 14.5.1</a>).</li>

<li><a href="#execute"><code>EXECUTE</code></a> выполняет готовый
запрос (см. <a href="#execute">раздел 14.5.2</a>).</li>
<li><a href="#deallocate-prepare"><code>DEALLOCATE PREPARE</code></a>
освобождает готовый запрос (см. <a href="#deallocate-prepare">раздел
14.5.3</a>).</p></li></ul>

<p>Следующие примеры показывают два эквивалентных способа подготовить запрос,
который вычисляет гипотенузу треугольника, данного длинами двух сторон.</p>
<p>Первый пример показывает, как создать готовый запрос при использовании
буквальной строки, чтобы поставлять текст запроса:
<pre>
mysql&gt; PREPARE stmt1 FROM 'SELECT SQRT(POW(?,2)+POW(?,2)) AS hypotenuse';
mysql&gt; SET @a = 3;
mysql&gt; SET @b = 4;
mysql&gt; EXECUTE stmt1 USING @a, @b;
+------------+
| hypotenuse |
+------------+
|  5         |
+------------+
mysql&gt; DEALLOCATE PREPARE stmt1;
</pre>

Второй пример подобен, но поставляет текст запроса
как пользовательскую переменную:
<pre>
mysql&gt; SET @s = 'SELECT SQRT(POW(?,2) + POW(?,2)) AS hypotenuse';
mysql&gt; PREPARE stmt2 FROM @s;
mysql&gt; SET @a = 6;
mysql&gt; SET @b = 8;
mysql&gt; EXECUTE stmt2 USING @a, @b;
+------------+
| hypotenuse |
+------------+
| 10         |
+------------+
mysql&gt; DEALLOCATE PREPARE stmt2;
</pre>

Вот дополнительный пример, который демонстрирует, как выбрать таблицу,
на которой можно выполнить запрос во время выполнения, храня название
таблицы как пользовательскую переменную:
<pre>
mysql&gt; USE test;
mysql&gt; CREATE TABLE t1 (a INT NOT NULL);
mysql&gt; INSERT INTO t1 VALUES (4), (8), (11), (32), (80);
mysql&gt; SET @table = 't1';
mysql&gt; SET @s = CONCAT('SELECT * FROM ', @table);
mysql&gt; PREPARE stmt3 FROM @s;
mysql&gt; EXECUTE stmt3;
+----+
| a  |
+----+
|  4 |
|  8 |
| 11 |
| 32 |
| 80 |
+----+
mysql&gt; DEALLOCATE PREPARE stmt3;
</pre>

Готовый запрос является определенным для сеанса, в котором он создавался.
Если Вы заканчиваете сеанс, не освобождая ранее готовый запрос, сервер
освобождает это автоматически.</p>

<p>Готовый запрос также глобален для сеанса. Если Вы создаете готовый запрос
в пределах сохраненной подпрограммы, это не освобождено, когда
сохраненная подпрограмма заканчивается.</p>

<p>Чтобы принять меры против слишком многих готовых запросов, создаваемых
одновременно, установите
<a href="server.htm#sysvar_max_prepared_stmt_count"><code>
max_prepared_stmt_count</code></a>. Чтобы предотвратить использование готовых
запросов, установите значение в 0.</p>

<h3><a name="idm139965337516416"></a>
Синтаксис SQL, позволенный в готовых запросах</h3>
<p>Следующие запросы SQL могут использоваться в
качестве подготовленных запросов:
<pre>
ALTER TABLE
ALTER USER
ANALYZE TABLE
CACHE INDEX
CALL
CHANGE MASTER
CHECKSUM {TABLE | TABLES}
COMMIT
{CREATE | DROP} INDEX
{CREATE | RENAME | DROP} DATABASE
{CREATE | DROP} TABLE
{CREATE | RENAME | DROP} USER
{CREATE | DROP} VIEW
DELETE
DO
FLUSH {TABLE | TABLES | TABLES WITH READ LOCK | HOSTS | PRIVILEGES
  | LOGS | STATUS | MASTER | SLAVE | DES_KEY_FILE | USER_RESOURCES}
GRANT
INSERT
INSTALL PLUGIN
KILL
LOAD INDEX INTO CACHE
OPTIMIZE TABLE
RENAME TABLE
REPAIR TABLE
REPLACE
RESET {MASTER | SLAVE | QUERY CACHE}
REVOKE
SELECT
SET
SHOW {WARNINGS | ERRORS}
SHOW BINLOG EVENTS
SHOW CREATE {PROCEDURE | FUNCTION | EVENT | TABLE | VIEW}
SHOW {MASTER | BINARY} LOGS
SHOW {MASTER | SLAVE} STATUS
SLAVE {START | STOP}
TRUNCATE TABLE
UNINSTALL PLUGIN
UPDATE
</pre>

Для согласия со стандартом SQL, который заявляет, что запросы диагностики
не могут быть предварительно подготовленными, MySQL не поддерживает следующие
запросы как подготовленные:</p>

<ul><li><p><code>SHOW WARNINGS</code>, <code>SHOW COUNT(*) WARNINGS</code>
</li>
<li><code>SHOW ERRORS</code>, <code>SHOW COUNT(*) ERRORS</code></li>
<li>Запросы, содержащие любую ссылку на
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a> или
<a href="server.htm#sysvar_error_count"><code>error_count</code></a>.
</p></li></ul>
<p>Другие запросы не поддержаны в MySQL 8.0.</p>

<p>Вообще, запросы, не разрешенные в подготовленных запросах SQL,
также не разрешены в сохраненных программах. Исключения отмечены в
<a href="restr.htm#stored-program-restrictions">разделе C.1</a>.</p>

<p>Изменения метаданных таблиц или представлений, упомянутых готовыми
запросыми, обнаружены и вызывают автоматическую переподготовку запроса, когда
это затем выполнено. Для получения дополнительной информации см.
<a href="optimiz.htm#statement-caching">раздел 9.10.4</a>.</p>

<p>Заполнители могут использоваться для параметров <code>LIMIT</code>,
используя подготовленные запросы. См. <a href="#select">раздел 14.2.9
</a>.</p>

<p>В готовом <a href="#call"><code>CALL</code></a>, используемом с
<a href="#prepare"><code>PREPARE</code></a> и
<a href="#execute"><code>EXECUTE</code></a>,
поддержка заполнителя параметров <code>OUT</code> и <code>INOUT</code>
доступна, начиная с MySQL 8.0. См. <a href="#call">раздел 14.2.1</a>
для примера и обходного решения для более ранних версий. Заполнители могут
использоваться для <code>IN</code> независимо от версии.</p>

<p>Синтаксис SQL для готовых запросов не может использоваться вложенным
способом. Таким образом, запрос для
<a href="#prepare"><code>PREPARE</code></a> не может самостоятельно
быть <a href="#prepare"><code>PREPARE</code></a>,
<a href="#execute"><code>EXECUTE</code></a> или
<a href="#deallocate-prepare"><code>DEALLOCATE PREPARE</code></a>.</p>

<p>Синтаксис SQL для готовых запросов отличен от использования готового
вызова API. Например, Вы не можете использовать C API
<a href="connect.htm#mysql-stmt-prepare">
<code>mysql_stmt_prepare()</code></a>, чтобы подготовить
<a href="#prepare"><code>PREPARE</code></a>,
<a href="#execute"><code>EXECUTE</code></a> или
<a href="#deallocate-prepare"><code>DEALLOCATE PREPARE</code></a>.</p>

<p>Синтаксис SQL для готовых запросов может использоваться в пределах
хранимых процедур, но не в сохраненных функциях или триггерах. Однако, курсор
не может использоваться для динамического запроса, который подготовлен и
ыполнен с <a href="#prepare"><code>PREPARE</code></a> и
<a href="#execute"><code>EXECUTE</code></a>.
Запрос для курсора проверено во время создания курсора, таким образом, запрос
не может быть динамическим.</p>

<p>Синтаксис SQL для готовых запросов не поддерживает мультизапросы (то есть,
много запросов в пределах единственной строки, отделенных <code>;</code>).
</p>
<p>Готовые запросы используют кэш запроса при условиях, описанных в
described in <a href="optimiz.htm#query-cache-operation">разделе 9.10.3.1</a>.
</p>

<p>Чтобы писать программы на C, которые используют
<a href="#call"><code>CALL</code></a>, чтобы выполнить хранимые
процедуры, которые содержат готовые запросы, флаг
<code>CLIENT_MULTI_RESULTS</code> должен быть включен. Это потому, что каждый
<a href="#call"><code>CALL</code></a> возвращает результат, чтобы
указать на состояние требования, в дополнение к любым наборам результатов,
которые могли бы быть возвращены запросами в пределах процедуры.</p>

<p><code>CLIENT_MULTI_RESULTS</code> может быть включен, когда Вы вызываете
<a href="connect.htm#mysql-real-connect"><code>mysql_real_connect()</code>
</a>, явно, передавая флаг <code>CLIENT_MULTI_RESULTS</code>, или неявно,
передавая <code>CLIENT_MULTI_STATEMENTS</code> (который также включает
<code>CLIENT_MULTI_RESULTS</code>). См. <a href="#call">раздел 14.2.1
</a>.</p>

<h3><a name="prepare"></a>14.5.1. PREPARE</h3>
<pre>
PREPARE <em><code>stmt_name</code></em> FROM <em><code>preparable_stmt</code></em>
</pre>

<a href="#prepare"><code>PREPARE</code></a> готовит запрос SQL и
назначает ему имя <em><code>stmt_name</code></em>,
которым можно сослаться на запрос позже. Готовый запрос выполнен с
<a href="#execute"><code>EXECUTE</code></a> и выпущен с
<a href="#deallocate-prepare"><code>DEALLOCATE PREPARE</code></a>.
См. <a href="#sql-syntax-prepared-statements">раздел 14.5</a>.</p>

<p>Имена запросов не являются чувствительными к регистру.
<em><code>preparable_stmt</code></em> буквальная строка или пользовательская
переменная, которая содержит текст запроса SQL. Текст должен представить
единственный запрос, не многократные запросы. В пределах запроса символы
<code>?</code> могут использоваться в качестве маркеров параметра, чтобы
указать, где значения данных должны быть связаны с запросом позже, когда Вы
выполняете его. Символы <code>?</code> не должны быть приложены в пределах
кавычек, даже если Вы намереваетесь обязать их представлять значения в виде
строки. Маркеры параметра могут использоваться только там, где значения
данных должны появиться, не для ключевых слов SQL, идентификаторов и т.д.</p>

<p>Если готовый запрос с именем уже существует, это освобождено неявно
прежде, чем новый запрос подготовлен. Это означает, что, если новый запрос
содержит ошибку и не может быть подготовлен, ошибка возвращена и никакой
запрос с именем не существует.</p>

<p>Контекст готового запроса это сеанс, в пределах которого он создается, это
имеет несколько значений:</p>
<ul><li><p>Готовый запрос, создаваемый в одном сеансе,
недоступен другим сеансам.</li>

<li>Когда сеанс заканчивается, его готовые запросы больше не существуют. Если
auto-reconnect включен, клиент не уведомлен, что соединение было потеряно.
Поэтому клиенты могут хотеть отключить auto-reconnect. См.
<a href="connect.htm#auto-reconnect">раздел 25.8.16</a>.</li>

<li>Готовый запрос, создаваемый в пределах сохраненной программы, продолжает
существовать после того, как программа заканчивает выполняться и может быть
выполнен вне программы позже.</li>

<li>Запрос, подготовленный в контексте сохраненной программы, не может
сослаться на хранимую процедуру, функциональные параметры или местные
переменные, потому что они выходят из контекста, когда программа
заканчивается и были бы недоступны, позже вне программы. Как обходное
решение, обратитесь вместо этого к определяемым пользователем переменным, у
которых также есть контекст сеанса, см.
<a href="lang.htm#user-variables">раздел 10.4</a>.</p></li></ul>

<h3><a name="execute"></a>14.5.2. EXECUTE</h3>
<pre>
EXECUTE <em><code>stmt_name</code></em>
[USING @<em><code>var_name</code></em> [, @<em><code>var_name</code></em>] ...]
</pre>

После подготовки запроса с <a href="#prepare"><code>PREPARE</code></a>
Вы выполняете это с <a href="#execute"><code>EXECUTE</code></a>,
который относится к имени готового запроса. Если готовый запрос содержит
какие-либо маркеры параметра, Вы должны поставлять <code>USING</code>,
который перечисляет пользовательские переменные, содержащие значения, которые
будут связаны с параметрами. Значения параметра могут поставляться только
пользовательскими переменными, и <code>USING</code> должен назвать точно
столько переменных, как число маркеров параметра в запросе.</p>

<p>Вы можете выполнить данный подготовленный запрос многократно, передавая
различные переменные или устанавливая переменные в различные значения
перед каждым выполнением.</p>
<p>См. <a href="#sql-syntax-prepared-statements">раздел 14.5</a>.</p>

<h3><a name="deallocate-prepare"></a>14.5.3. DEALLOCATE PREPARE</h3>
<pre>
{DEALLOCATE | DROP} PREPARE <em><code>stmt_name</code></em>
</pre>

Чтобы освободить готовый запрос, произведенный с
<a href="#prepare"><code>PREPARE</code></a>, используйте
<a href="#deallocate-prepare"><code>DEALLOCATE PREPARE</code></a>,
который относится к готовому имени запроса. Попытка выполнить готовый запрос
после освобождения приводит к ошибке. Если слишком много готовых запросов
создаются и не освобождаются <code>DEALLOCATE PREPARE</code>
или концом сеанса, Вы могли бы столкнуться с верхним пределом, проведенным в
жизнь <a href="server.htm#sysvar_max_prepared_stmt_count">
<code>max_prepared_stmt_count</code></a>.</p>
<p>См. <a href="#sql-syntax-prepared-statements">раздел 14.5</a>.</p>

<h2><a name="sql-syntax-compound-statements"></a>14.6.
Синтаксис составного запроса</h2>
<p>Этот раздел описывает синтаксис для составного запроса
<a href="#begin-end"><code>BEGIN ... END</code></a>
и другие запросы, которые могут использоваться в теле сохраненных программ:
хранимые процедуры и функции, триггеры и события. Эти объекты определены с
точки зрения кода SQL, который сохранен на сервере для более позднего
неспешного потребления (см. <a href="stored.htm">главу 21</a>).</p>

<p>Составной запрос это блок, который может содержать другие блоки,
декларации переменных, обработчики условия и курсоров, и конструкции
управления потоками, такие как циклы и условные тесты.</p>

<h3><a name="begin-end"></a>14.6.1. BEGIN ... END</h3>
<pre>
[<em><code>begin_label</code></em>:] BEGIN
[<em><code>statement_list</code></em>]
END [<em><code>end_label</code></em>]
</pre>

<a href="#begin-end"><code>BEGIN ... END</code></a>
используется для того, чтобы написать составные запросы, которые могут
появиться в пределах сохраненных программ (хранимые процедуры и функции,
триггеры и события). Составной запрос может содержать многократные запросы
в <code>BEGIN</code> и <code>END</code>. <em><code>statement_list</code></em>
представляет список из одного или более запросов, каждый закончен точкой с
запятой (<code>;</code>). <em><code>statement_list</code></em>
непосредственно является дополнительным, таким образом, пустой составной
запрос (<code>BEGIN END</code>) допустим.</p>

<p><a href="#begin-end"><code>BEGIN ... END</code></a>
могут быть вложены.</p>
<p>Использование многократных запросов требует, чтобы клиент был в состоянии
послать строки запроса, содержащие разделитель <code>;</code>. В
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
это обработано командой <code>delimiter</code>. Изменение разделителя конца
запроса <code>;</code> (например, на <code>//</code>) позволяет
<code>;</code> использоваться в теле программы. Для примера см.
<a href="stored.htm#stored-programs-defining">раздел 21.1</a>.</p>

<p>Блок <a href="#begin-end"><code>BEGIN ... END</code></a>
может быть маркирован. См. <a href="#statement-labels">раздел 14.6.2
</a>.</p>

<p><code>[NOT] ATOMIC</code> не поддержан. Это означает, что никакая
транзакционная точка восстановления не установлена в начале блока инструкций,
и <code>BEGIN</code>, используемый в этом контексте, не имеет никакого
эффекта на текущую транзакцию.</p>

<p>В пределах всех сохраненных программ анализатор обрабатывает
<a href="#commit"><code>BEGIN [WORK]</code></a> как начало
<a href="#begin-end"><code>BEGIN ... END</code></a>.
Чтобы начать транзакцию в этом контексте, надо использовать
<a href="#commit"><code>START TRANSACTION</code></a>.</p>

<h3><a name="statement-labels"></a>14.6.2. Метки запросов</h3>
<pre>
[<em><code>begin_label</code></em>:] BEGIN
[<em><code>statement_list</code></em>]
END [<em><code>end_label</code></em>]

[<em><code>begin_label</code></em>:] LOOP
<em><code>statement_list</code></em>
END LOOP [<em><code>end_label</code></em>]

[<em><code>begin_label</code></em>:] REPEAT
<em><code>statement_list</code></em>
UNTIL <em><code>search_condition</code></em>
END REPEAT [<em><code>end_label</code></em>]

[<em><code>begin_label</code></em>:] WHILE <em><code>search_condition</code></em> DO
<em><code>statement_list</code></em>
END WHILE [<em><code>end_label</code></em>]
</pre>

Для меток разрешают <a href="#begin-end"><code>BEGIN ... END</code>
</a> блоки, а также команды <a href="#loop"><code>LOOP</code></a>,
<a href="#repeat"><code>REPEAT</code></a> и
<a href="#while"><code>WHILE</code></a>.
Использование метки для тех запросов следует этим правилам:</p>

<ul><li><p><em><code>begin_label</code></em> должен сопровождаться двоеточием.
</li>
<li><em><code>begin_label</code></em> можно дать без
<em><code>end_label</code></em>. Если дано
<em><code>end_label</code></em>, это должно быть то же самое, как
<em><code>begin_label</code></em>.</li>

<li><em><code>end_label</code></em> нельзя дать без
<em><code>begin_label</code></em>.</li>
<li>Метки на том же самом уровне вложенности должны быть отличными.</li>
<li>Метки могут быть до 16 символов в длину.</p></li></ul>

<p>Чтобы обратиться к метке в пределах маркированной конструкции, используйте
<a href="#iterate"><code>ITERATE</code></a> или
<a href="#leave"><code>LEAVE</code></a>.
Следующий пример использует те запросы, чтобы продолжить повторять
или заканчивать цикл:
<pre>
CREATE PROCEDURE doiterate(p1 INT)
BEGIN
  label1: LOOP
SET p1 = p1 + 1;
IF p1 &lt; 10 THEN ITERATE label1; END IF;
LEAVE label1;
  END LOOP label1;
END;
</pre>
Контекст метки блока не включает код для обработчиков, объявленных в пределах
блока. Для деталей см. <a href="#declare-handler">раздел 14.6.7.2</a>.
</p>

<h3><a name="declare"></a>14.6.3. DECLARE</h3>
<p><a href="#declare"><code>DECLARE</code></a>
используется, чтобы определить различные элементы, местные для программы:</p>

<ul><li><p>Местные переменные. См.
<a href="#stored-program-variables">раздел 14.6.4</a>.</li>
<li>Условия и обработчики. См. <a href="#condition-handling">
раздел 14.6.7</a>.</li>
<li>Курсоры. См. <a href="#cursors">раздел 14.6.6</a>.</p></li></ul>

<p><a href="#declare"><code>DECLARE</code></a>
разрешен только внутри <a href="#begin-end"><code>BEGIN ... END</code>
</a> и должен быть в его начале перед любыми другими запросыми.</p>

<p>Декларации должны следовать в определенном порядке. Декларации курсора
должны появиться перед декларациями обработчика. Переменная и декларации
условия должны появиться перед декларациями обработчика или курсором.</p>

<h3><a name="stored-program-variables"></a>14.6.4.
Переменные в сохраненных программах</h3>
<p>Системные переменные и определяемые пользователем переменные могут
использоваться в сохраненных программах, как они могут использоваться вне
контекста сохраненной программы. Кроме того, сохраненные программы могут
использовать <code>DECLARE</code>, чтобы определить местные переменные, а
сохраненные подпрограммы (процедуры и функции) могут объявлять параметры,
которые сообщают значения между подпрограммой и ее вызывающим.</p>

<ul><li><p>Чтобы объявить местные переменные, используйте
<a href="#declare-local-variable"><code>DECLARE</code></a>, как
описано в <a href="#declare-local-variable">разделе 14.6.4.1</a>.</li>

<li>Переменные могут быть установлены непосредственно
<a href="#set-variable"><code>SET</code></a>. См.
<a href="#set-variable">раздел 14.7.4.1</a>.</li>

<li>Следствия запросов могут быть получены в местные переменные через
<a href="#select-into"><code>SELECT ... INTO <em><code>var_list</code>
</em></code></a> или открывая курсор и используя
<a href="#fetch"><code>FETCH ... INTO <em><code>var_list</code></em>
</code></a>. См. разделы <a href="#select-into">14.2.9.1</a> и
<a href="#cursors">14.6.6</a>.</p></li></ul>
<p>См. <a href="#local-variable-scope">раздел 14.6.4.2</a>.</p>

<p>Не разрешено назначить значение <code>DEFAULT</code> местным переменным
в хранимой процедуре или функциональным параметрам (например, с <code>SET
<em><code>var_name</code></em> = DEFAULT</code>).
В MySQL 8.0 это приводит к синтаксической ошибке.</p>

<h4><a name="declare-local-variable"></a>14.6.4.1.
Местная переменная DECLARE</h4>
<pre>
DECLARE <em><code>var_name</code></em> [, <em><code>var_name</code></em>] ...
<em><code>type</code></em> [DEFAULT <em><code>value</code></em>]
</pre>

Этот запрос объявляет местные переменные в пределах сохраненных программ.
Чтобы обеспечить значение по умолчанию для переменной, включайте
<code>DEFAULT</code>. Значение может быть определено как выражение, это не
должна быть константа. Если <code>DEFAULT</code> нет,
начальное значение <code>NULL</code>.</p>

<p>Местные переменные обработаны как сохраненные обычные параметры
относительно проверки переполнения и типа данных. См.
<a href="#create-procedure">раздел 14.1.13</a>.</p>

<p>Переменные декларации должны появиться перед декларациями
обработчика или курсора.</p>
<p>Местные имена переменной не являются чувствительными к регистру.
Допустимые символы и правила заключения в кавычки те же самое, что касаются
других идентификаторов, как описано в <a href="lang.htm#identifiers">разделе
10.2</a>.</p>

<p>Контекст местной переменной это блок
<a href="#begin-end"><code>BEGIN ... END</code></a>
в пределах которого это объявлено. Переменная может быть упомянута в блоках,
вложенных в пределах блока объявления, кроме тех блоков, которые объявляют
переменную с тем же самым именем.</p>
<p>См. <a href="#local-variable-scope">раздел 14.6.4.2</a>.</p>

<h4><a name="local-variable-scope"></a>14.6.4.2.
Местный контекст и разрешение переменных</h4>
<p>Контекст местной переменной это блок
<a href="#begin-end"><code>BEGIN ... END</code></a>
в пределах которого это объявлено. Переменная может быть упомянута в блоках,
вложенных в пределах блока объявления, кроме тех блоков, которые объявляют
переменную с тем же самым именем.</p>

<p>Поскольку местные переменные находятся в контексте только во время
выполнения сохраненной программы, ссылки на них не разрешены в готовых
запросах, создаваемых в пределах сохраненной программы.
Контекст готового запроса это текущий сеанс, а не сохраненная программа,
таким образом, запрос может быть выполнен после конца программы, а тогда
переменные больше не будут в контексте. Например,
<code>SELECT ... INTO <em><code>local_var</code></em></code>
не может использоваться в качестве готового запроса. Это ограничение также
относится к хранимой процедуре и функциональным параметрам. См.
<a href="#prepare">раздел 14.5.1</a>.</p>

<p>У местной переменной не должно быть того же самого имени как у
столбца таблицы. Если запрос SQL, например,
<a href="#select"><code>SELECT ... INTO</code></a>,
содержит ссылку на столбец и заявленную местную переменную с тем же самым
именем, MySQL в настоящее время интерпретирует ссылку как название
переменной. Рассмотрите следующее определение процедуры:
<pre>
CREATE PROCEDURE sp1 (x VARCHAR(5))
BEGIN
  DECLARE xname VARCHAR(5) DEFAULT 'bob';
  DECLARE newname VARCHAR(5);
  DECLARE xid INT;
  SELECT xname, id INTO newname, xid FROM table1 WHERE xname = xname;
  SELECT newname;
END;
</pre>

MySQL понимает <code>xname</code> в
<a href="#select"><code>SELECT</code></a> как ссылку на
<span><em>переменную</em></span> <code>xname</code>, а не на
<span><em>столбец</em></span> <code>xname</code>.
Следовательно, когда процедура <code>sp1()</code> вызвана, переменная
<code>newname</code> возвращает значение <code>'bob'</code>
независимо от значения <code>table1.xname</code>.</p>

<p>Точно так же определение курсора в следующей процедуре содержит
<a href="#select"><code>SELECT</code></a>, который относится к
<code>xname</code>. MySQL интерпретирует это как ссылку на переменную,
а не на столбец.
<pre>
CREATE PROCEDURE sp2 (x VARCHAR(5))
BEGIN
  DECLARE xname VARCHAR(5) DEFAULT 'bob';
  DECLARE newname VARCHAR(5);
  DECLARE xid INT;
  DECLARE done TINYINT DEFAULT 0;
  DECLARE cur1 CURSOR FOR SELECT xname, id FROM table1;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
  OPEN cur1;
  read_loop: LOOP
    FETCH FROM cur1 INTO newname, xid;
    IF done THEN
       LEAVE read_loop;
    END IF;
    SELECT newname;
  END LOOP;
  CLOSE cur1;
END;
</pre>
См. <a href="restr.htm#stored-program-restrictions">раздел C.1</a>.</p>

<h3><a name="flow-control-statements"></a>14.6.5.
Запросы управления потоками</h3>
<p>MySQL поддерживает конструкции <a href="#if"><code>IF</code></a>,
<a href="#case"><code>CASE</code></a>,
<a href="#iterate"><code>ITERATE</code></a>,
<a href="#leave"><code>LEAVE</code></a>
<a href="#loop"><code>LOOP</code></a>,
<a href="#while"><code>WHILE</code></a> и
<a href="#repeat"><code>REPEAT</code></a>
для управления потоками в пределах сохраненных программ. Это также
поддерживает <a href="#return"><code>RETURN</code></a>
в пределах сохраненных функций.</p>

<p>Многие из этих конструкций содержат другие запросы, как обозначено
техническими требованиями грамматики в следующих разделах. Такие конструкции
могут быть вложены. Например, <a href="#if"><code>IF</code></a>
мог бы содержать <a href="#while"><code>WHILE</code></a>, который
непосредственно содержит <a href="#case"><code>CASE</code></a>.</p>
<p>MySQL не поддерживает циклы <code>FOR</code>.</p>

<h4><a name="case"></a>14.6.5.1. CASE</h4>
<pre>
CASE <em><code>case_value</code></em>
WHEN <em><code>when_value</code></em> THEN <em><code>statement_list</code></em>
[WHEN <em><code>when_value</code></em> THEN <em><code>statement_list</code></em>] ...
[ELSE <em><code>statement_list</code></em>]
END CASE
</pre>

Или:
<pre>
CASE
WHEN <em><code>search_condition</code></em> THEN <em><code>statement_list</code></em>
[WHEN <em><code>search_condition</code></em> THEN <em><code>statement_list</code></em>] ...
[ELSE <em><code>statement_list</code></em>]
END CASE
</pre>
<a href="#case"><code>CASE</code></a> для сохраненных программ
осуществляет сложную условную конструкцию.</p>

<p>Есть также <a href="funct.htm#operator_case"><code>CASE</code></a>
<span><em>expression</em></span>, который отличается от
<a href="#case"><code>CASE</code></a> <span><em>statement</em></span>,
описанного здесь. См. <a href="funct.htm#control-flow-functions">раздел 13.4
</a>. <a href="#case"><code>CASE</code></a> не может иметь
<code>ELSE NULL</code> и это закончено с <code>END CASE</code>
вместо <code>END</code>.</p>

<p>Для первого синтаксиса <em><code>case_value</code></em> является
выражением. Это значение сравнивается с <em><code>when_value</code></em>
в каждом <code>WHEN</code> до равенства одному из них. Когда равное
<em><code>when_value</code></em> найдено, соответствующий
<code>THEN</code> <em><code>statement_list</code></em> выполнен. Если нет
равного <em><code>when_value</code></em>, выполнен
<code>ELSE</code> <em><code>statement_list</code></em>, если есть. Если его
нет, то не выполнено ничего.</p>

<p>Этот синтаксис не может использоваться, чтобы проверить на равенство с
<code>NULL</code>, так как <code>NULL = NULL</code> будет false. См.
<a href="tutorial.html#working-with-null">раздел 4.3.4.6</a>.</p>

<p>Для второго синтаксиса каждый <code>WHEN</code>
<em><code>search_condition</code></em> оценено, пока не истина, в какой
<code>THEN</code> <em><code>statement_list</code></em> передать выполнение.
Если нет равного <em><code>when_value</code></em>, выполнен
<code>ELSE</code> <em><code>statement_list</code></em>, если есть. Если его
нет, то не выполнено ничего.</p>

<p>Если нет <em><code>when_value</code></em> или
<em><code>search_condition</code></em>, которое
соответствует проверенному значению, и
<a href="#case"><code>CASE</code></a> не содержит <code>ELSE</code>,
будет ошибка <span>Case not found for CASE statement</span>.</p>

<p>Каждый <em><code>statement_list</code></em> состоит из одного или более
запросов SQL, пустой <em><code>statement_list</code></em> запрещен.</p>
<p>Чтобы обработать ситуации, где никакое значение не является
соответствующим <code>WHEN</code>, используйте <code>ELSE</code>, содержащий
пустой блок <a href="#begin-end"><code>BEGIN ... END</code></a>.
<pre>
DELIMITER |

CREATE PROCEDURE p()
BEGIN
  DECLARE v INT DEFAULT 1;

  CASE v
    WHEN 2 THEN SELECT v;
    WHEN 3 THEN SELECT 0;
    ELSE BEGIN
    END;
  END CASE;
END;
|
</pre>

<h4><a name="if"></a>14.6.5.2. IF</h4>
<pre>
IF <em><code>search_condition</code></em> THEN <em><code>statement_list</code></em>
[ELSEIF <em><code>search_condition</code></em> THEN <em><code>statement_list</code></em>] ...
[ELSE <em><code>statement_list</code></em>]
END IF
</pre>
<a href="#if"><code>IF</code></a>
для сохраненных программ осуществляет основную условную конструкцию.</p>

<p>Есть также <span><em>функция</em></span> <a href="funct.htm#function_if">
<code>IF()</code></a>, которая отличается от <span><em>запроса</em></span>
<a href="#if"><code>IF</code></a>. См.
<a href="funct.htm#control-flow-functions">раздел 13.4</a>. Запрос
<a href="#if"><code>IF</code></a> может иметь
<code>THEN</code>, <code>ELSE</code> и <code>ELSEIF</code>,
и это закончено с <code>END IF</code>.</p>

<p>Если <em><code>search_condition</code></em> true, соответствующий
<code>THEN</code> или <code>ELSEIF</code>
<em><code>statement_list</code></em> выполняется. Если нет подходящего
<em><code>search_condition</code></em>, выполнен <code>ELSE</code>
<em><code>statement_list</code></em>.</p>

<p>Каждый <em><code>statement_list</code></em>
состоит из одного или более запросов SQL: пустой
<em><code>statement_list</code></em> запрещен.</p>

<p><code>IF ... END IF</code>, как все другие блоки управления потоками,
используемые в пределах сохраненных программ, должен быть закончен точкой с
запятой, как показано в этом примере:
<pre>
DELIMITER //

CREATE FUNCTION SimpleCompare(n INT, m INT)
  RETURNS VARCHAR(20)
  BEGIN
    DECLARE s VARCHAR(20);
    IF n &gt; m THEN SET s = '&gt;';
       ELSEIF n = m THEN SET s = '=';
       ELSE SET s = '&lt;';
    END IF;
    SET s = CONCAT(n, ' ', s, ' ', m);
    RETURN s;
  END //

DELIMITER ;
</pre>

Как с другими конструкциями управления потоками, блоки <code>IF ... END IF
</code> могут быть вложены в пределах других конструкций управления потоками,
включая другой запрос <a href="#if"><code>IF</code></a>. Каждый
<a href="#if"><code>IF</code></a> должен быть закончен его собственным
<code>END IF</code> и точкой с запятой. Вы можете использовать углубление,
чтобы сделать вложенные блоки управления потоками более легко читаемыми
людьми (хотя это не требуется MySQL), как показано здесь:
<pre>
DELIMITER //

CREATE FUNCTION VerboseCompare (n INT, m INT)
  RETURNS VARCHAR(50)
  BEGIN
    DECLARE s VARCHAR(50);
    IF n = m THEN SET s = 'equals';
    ELSE
      IF n &gt; m THEN SET s = 'greater';
      ELSE SET s = 'less';
      END IF;
      SET s = CONCAT('is ', s, ' than');
    END IF;
    SET s = CONCAT(n, ' ', s, ' ', m, '.');
  RETURN s;
  END //

DELIMITER ;
</pre>
В этом примере внутренний <a href="#if"><code>IF</code></a>
оценен только, если <code>n</code> не равно <code>m</code>.</p>

<h4><a name="iterate"></a>14.6.5.3. ITERATE</h4>
<pre>
ITERATE <em><code>label</code></em>
</pre>

<a href="#iterate"><code>ITERATE</code></a> может появиться только в
пределах <a href="#loop"><code>LOOP</code></a>,
<a href="#repeat"><code>REPEAT</code></a> и
<a href="#while"><code>WHILE</code></a>.
<a href="#iterate"><code>ITERATE</code></a> значит
<span><span>запустить повтор цикла</span></span>.</p>
<p>См. <a href="#loop">раздел 14.6.5.5</a>.</p>

<h4><a name="leave"></a>14.6.5.4. LEAVE</h4>
<pre>
LEAVE <em><code>label</code></em>
</pre>

Этот запрос используется, чтобы выйти из конструкции управления потоками, у
которой есть данная метка. Если метка для наиболее удаленного сохраненного
блока программы, <a href="#leave"><code>LEAVE</code></a>
выходит из программы.</p>

<p><a href="#leave"><code>LEAVE</code></a> может использоваться в
пределах <a href="#begin-end"><code>BEGIN ... END</code></a>
или конструкции цикла (<a href="#loop"><code>LOOP</code></a>,
<a href="#repeat"><code>REPEAT</code></a>,
<a href="#while"><code>WHILE</code></a>).</p>
<p>См. <a href="#loop">раздел 14.6.5.5</a>.</p>

<h4><a name="loop"></a>14.6.5.5. LOOP</h4>
<pre>
[<em><code>begin_label</code></em>:] LOOP
<em><code>statement_list</code></em>
END LOOP [<em><code>end_label</code></em>]
</pre>

<a href="#loop"><code>LOOP</code></a>
осуществляет простую конструкцию цикла, включая повторное выполнение списка
запросов, который состоит из одного или более запросов, каждый завершенный
точкой с запятой (<code>;</code>). Ззапросы повторены, пока цикл не закончен.
Обычно это достигнуто с помощью <a href="#leave"><code>LEAVE</code>
</a>. В пределах сохраненной функции <a href="#return"><code>RETURN
</code></a> может также использоваться, чтобы выйти из функции полностью.</p>
<p>Если не включать запрос завершения цикла, цикл станет бесконечным.</p>

<p><a href="#loop"><code>LOOP</code></a> может быть маркирован.
Для правил относительно использования меток см.
<a href="#statement-labels">раздел 14.6.2</a>.</p>

<p>Пример:
<pre>
CREATE PROCEDURE doiterate(p1 INT)
BEGIN
  label1: LOOP
    SET p1 = p1 + 1;
    IF p1 &lt; 10 THEN ITERATE label1;
    END IF;
    LEAVE label1;
  END LOOP label1;
  SET @x = p1;
END;
</pre>

<h4><a name="repeat"></a>14.6.5.6. REPEAT</h4>
<pre>
[<em><code>begin_label</code></em>:] REPEAT
<em><code>statement_list</code></em>
UNTIL <em><code>search_condition</code></em>
END REPEAT [<em><code>end_label</code></em>]
</pre>

Список запросов в пределах
<a href="#repeat"><code>REPEAT</code></a> повторено, пока выражение
<em><code>search_condition</code></em> не станет истиной. Таким образом,
<a href="#repeat"><code>REPEAT</code></a> всегда вводит цикл, по
крайней мере, однажды. <em><code>statement_list</code></em> состоит из одного
или более запросов, каждый закрыт точкой с запятой (<code>;</code>).</p>

<p><a href="#repeat"><code>REPEAT</code></a>
может быть маркирован. Для правил относительно использования меток см.
<a href="#statement-labels">раздел 14.6.2</a>.</p>

<p>Пример:
<pre>
mysql&gt; delimiter //

mysql&gt; CREATE PROCEDURE dorepeat(p1 INT)
    -&gt; BEGIN
    -&gt;   SET @x = 0;
    -&gt;   REPEAT
    -&gt; SET @x = @x + 1;
    -&gt;   UNTIL @x &gt; p1 END REPEAT;
    -&gt; END
    -&gt; //
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CALL dorepeat(1000)//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @x//
+------+
| @x   |
+------+
| 1001 |
+------+
1 row in set (0.00 sec)
</pre>

<h4><a name="return"></a>14.6.5.7. RETURN</h4>
<pre>
RETURN <em><code>expr</code></em>
</pre>

<a href="#return"><code>RETURN</code></a>
заканчивает выполнение сохраненной функции и возвращает значение
<em><code>expr</code></em> вызвавшему. Должен быть по крайней мере один
<a href="#return"><code>RETURN</code></a>
в сохраненной функции. Может быть больше, чем один, если у функции есть
много пунктов выхода.</p>

<p>Этот запрос не используется в хранимых процедурах, триггерах или событиях.
<a href="#leave"><code>LEAVE</code></a> может использоваться, чтобы
выйти из сохраненной программы этих типов.</p>

<h4><a name="while"></a>14.6.5.8. WHILE</h4>
<pre>
[<em><code>begin_label</code></em>:] WHILE <em><code>search_condition</code></em> DO
<em><code>statement_list</code></em>
END WHILE [<em><code>end_label</code></em>]
</pre>

Список запросов в пределах <a href="#while"><code>WHILE</code></a>
повторен, пока <em><code>search_condition</code></em> true.
<em><code>statement_list</code></em> состоит из одного или более запросов
SQL, каждый закончен точкой с запятой (<code>;</code>).</p>

<p><a href="#while"><code>WHILE</code></a> может быть маркирован.
Для правил относительно использования меток см.
<a href="#statement-labels">раздел 14.6.2</a>.</p>

<p>Пример:
<pre>
CREATE PROCEDURE dowhile()
BEGIN
  DECLARE v1 INT DEFAULT 5;
  WHILE v1 &gt; 0 DO
    ...
    SET v1 = v1 - 1;
  END WHILE;
END;
</pre>

<h3><a name="cursors"></a>14.6.6. Курсоры</h3>
<p>MySQL поддерживает курсоры в сохраненных программах. Синтаксис как во
встроенном SQL. У курсоров есть эти свойства:</p>

<ul><li><p>Asensitive: сервер может или, возможно, не делает копию
своей таблицы результата.</li>
<li>Только для чтения: Не обновляемые.</li>
<li>Nonscrollable: Может быть просмотрен только в одном направлении и не
может пропустить строки.</p></li></ul>

<p>Декларации курсора должны появиться перед декларациями обработчика и после
деклараций условия и переменной.</p>
<p>Пример:
<pre>
CREATE PROCEDURE curdemo()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE a CHAR(16);
  DECLARE b, c INT;
  DECLARE cur1 CURSOR FOR SELECT id,data FROM test.t1;
  DECLARE cur2 CURSOR FOR SELECT i FROM test.t2;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
  OPEN cur1;
  OPEN cur2;
  read_loop: LOOP
    FETCH cur1 INTO a, b;
    FETCH cur2 INTO c;
    IF done THEN LEAVE read_loop;
    END IF;
    IF b &lt; c THEN
       INSERT INTO test.t3 VALUES (a,b);
       ELSE INSERT INTO test.t3 VALUES (a,c);
    END IF;
  END LOOP;
  CLOSE cur1;
  CLOSE cur2;
END;
</pre>

<h4><a name="close"></a>14.6.6.1. Курсор CLOSE</h4>
<pre>
CLOSE <em><code>cursor_name</code></em>
</pre>
Закрывает ранее открытый курсор. Для примера см.
<a href="#cursors">раздел 14.6.6</a>.</p>

<p>Ошибка происходит, если курсор не открыт.</p>
<p>Если не закрыт явно, курсор закрыт в конце блока
<a href="#begin-end"><code>BEGIN ... END</code></a>, в
котором это было объявлено.</p>

<h4><a name="declare-cursor"></a>14.6.6.2. Курсор DECLARE</h4>
<pre>
DECLARE <em><code>cursor_name</code></em> CURSOR FOR <em><code>select_statement</code></em>
</pre>

Этот запрос объявляет курсор и связывает с
<a href="#select"><code>SELECT</code></a>,
который получает строки, которые будут пересечены курсором. Чтобы принести
строки позже, используйте <a href="#fetch"><code>FETCH</code></a>.
Число столбцов, полученных <a href="#select"><code>SELECT</code></a>,
должно соответствовать числу выходных переменных, определенных в
<a href="#fetch"><code>FETCH</code></a>.</p>

<p><a href="#select"><code>SELECT</code></a>
не может иметь <code>INTO</code>.</p>
<p>Декларации курсора должны появиться перед декларациями обработчика и после
деклараций условия и переменной.</p>

<p>Сохраненная программа может содержать многократные декларации курсора, но
у каждого курсора, объявленного в данном блоке, должно быть уникальное имя.
Для примера см. <a href="#cursors">раздел 14.6.6</a>.</p>

<p>Для информации, доступной через
<a href="#show"><code>SHOW</code></a>,
возможно во многих случаях получить эквивалентную информацию при
использовании курсора с таблицей <code>INFORMATION_SCHEMA</code>.</p>

<h4><a name="fetch"></a>14.6.6.3. Курсор FETCH</h4>
<pre>
FETCH [[NEXT] FROM] <em><code>cursor_name</code></em> INTO
<em><code>var_name</code></em> [, <em><code>var_name</code></em>] ...
</pre>

Этоn запрос приносит следующую строку для
<a href="#select"><code>SELECT</code></a>,
связанным с указанным курсором (который должен быть открыт) и обновляет
указатель курсора. Если строка существует, принесенные столбцы сохранены в
названных переменных. Число столбцов, полученных
<a href="#select"><code>SELECT</code></a>, должно соответствовать
числу выходных переменных, определенных в
<a href="#fetch"><code>FETCH</code></a>.</p>

<p>Если больше строк не доступно, происходит состояние No Data condition
с SQLSTATE value <code>'02000'</code>. Чтобы обнаружить это условие, Вы
можете настроить обработчик для этого (или для условия <code>NOT FOUND
</code>). См. <a href="#cursors">раздел 14.6.6</a>.</p>

<p>Знайте, что другая работа, такая как
<code>SELECT</code> или другой <code>FETCH</code>,
может также заставить обработчик выполняться, поднимая то же самое условие.
Если необходимо различить, какая работа подняла условие, поместите работу в
пределах его собственного блока <a href="#begin-end"><code>BEGIN ...
END</code></a>, чтобы это могло быть связано с собственным обработчиком.</p>

<h4><a name="open"></a>14.6.6.4. Курсор OPEN</h4>
<pre>
OPEN <em><code>cursor_name</code></em>
</pre>
Этот запрос открывает ранее заявленный курсор. Для примера см.
<a href="#cursors">раздел 14.6.6</a>.</p>

<h3><a name="condition-handling"></a>14.6.7. Обработка условия</h3>
<p>Условия могут возникнуть во время сохраненного выполнения программы,
которые требуют специальной обработки, например, выход из текущего блока
программы или продолжения выполнения. Обработчики могут быть определены для
общих условий, таких как предупреждения или исключения, или для особых
условий, таких как особый код ошибки. Особым условиям можно назначить имена.
</p>

<p>Чтобы назвать условие, используйте
<a href="#declare-condition"><code>DECLARE ... CONDITION</code></a>.
Чтобы объявить обработчик, используйте
<a href="#declare-handler"><code>DECLARE ... HANDLER</code></a>. См.
разделы <a href="#declare-condition">14.6.7.1</a> и
<a href="#declare-handler">раздел 14.6.7.2</a>.</p>

<p>Чтобы поднять условие, используйте
<a href="#signal"><code>SIGNAL</code></a>.
Чтобы изменить информацию об условии в пределах обработчика условия, надо
использовать <a href="#resignal"><code>RESIGNAL</code></a>. См.
разделы <a href="#declare-condition">14.6.7.1</a> и
<a href="#declare-handler">14.6.7.2</a>.</p>

<p>Чтобы получить информацию из области диагностики, используйте
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a> (см.
<a href="#get-diagnostics">раздел 14.6.7.3</a>).
Для информации об области диагностики см.
<a href="#diagnostics-area">раздел 14.6.7.7</a>.</p>

<h4><a name="declare-condition"></a>14.6.7.1. DECLARE ... CONDITION</h4>
<pre>
DECLARE <em><code>condition_name</code></em> CONDITION FOR <em><code>condition_value</code></em>
<em><code>condition_value</code></em>:
<em><code>mysql_error_code</code></em>
  | SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>
</pre>

<a href="#declare-condition"><code>DECLARE ... CONDITION</code></a>
объявляет названное состояние ошибки, связывая имя с условием, которое
нуждается в определенной обработке. Имя может быть упомянуто в последующем
<a href="#declare-handler"><code>DECLARE ... HANDLER</code></a> (см.
<a href="#declare-handler">раздел 14.6.7.2</a>).</p>

<p>Декларации условия должны появиться перед декларациями
обработчика или курсором.</p>
<p><em><code>condition_value</code></em> для
<a href="#declare-condition"><code>DECLARE ... CONDITION</code></a>
указывает на особое условие или класс условий, связанный с именем условия.
Это может принять следующие формы:</p>

<ul><li><p><em><code>mysql_error_code</code></em>:
Целое число, указание на код ошибки MySQL.</p>
<p>Не используйте код ошибки MySQL 0, потому что это указывает на успех, а не
состояние ошибки. Для списка кодов ошибок MySQL см.
<a href="error.htm#error-messages-server">раздел B.3</a>.</li>

<li>SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>:
5-символьная строка, указание на значение SQLSTATE.</p>
<p>Не используйте значения SQLSTATE, которые начинаются на <code>'00'</code>,
потому что те указывают на успех, а не на состояние ошибки. Для списка
значений SQLSTATE см. <a href="error.htm#error-messages-server">раздел B.3
</a>.</p></li></ul>

<p>Имена условия, упомянутые в
<a href="#signal"><code>SIGNAL</code></a> или
<a href="#resignal"><code>RESIGNAL</code></a>,
должны быть связаны со значениями SQLSTATE, а не кодами ошибки MySQL.</p>

<p>Использование названия условий может помочь сделать код программы более
ясным. Например, этот обработчик относится к попыткам удалить несуществующую
таблицу, но это очевидно, только если Вы знаете, что 1051 это
код ошибки MySQL для <span><span>unknown table</span></span>:
<pre>
DECLARE CONTINUE HANDLER FOR 1051
  BEGIN
-- body of handler
  END;
</pre>

Объявляя название условия, цель обработчика замечена с большей точностью:
<pre>
DECLARE no_such_table CONDITION FOR 1051;
DECLARE CONTINUE HANDLER FOR no_such_table
  BEGIN
-- body of handler
  END;
</pre>

Вот названное условие для того же самого условия, но основанное на
соответствующем значении SQLSTATE, а не коде ошибки MySQL:
<pre>
DECLARE no_such_table CONDITION FOR SQLSTATE '42S02';
DECLARE CONTINUE HANDLER FOR no_such_table
  BEGIN
-- body of handler
  END;
</pre>

<h4><a name="declare-handler"></a>14.6.7.2. DECLARE ... HANDLER</h4>
<pre>
DECLARE <em><code>handler_action</code></em> HANDLER
FOR <em><code>condition_value</code></em> [, <em><code>condition_value</code></em>] ...
<em><code>statement</code></em>

<em><code>handler_action</code></em>:
CONTINUE
  | EXIT
  | UNDO

<em><code>condition_value</code></em>:
<em><code>mysql_error_code</code></em>
  | SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>
  | <em><code>condition_name</code></em>
  | SQLWARNING
  | NOT FOUND
  | SQLEXCEPTION
</pre>

<a href="#declare-handler"><code>DECLARE ... HANDLER</code></a>
определяет обработчик, который имеет дело с одним или более условиями. Если
одно из этих условий происходит, указанный <em><code>statement</code></em>
выполнится. <em><code>statement</code></em> может быть простым запросом
таким, как <code>SET <em><code>var_name</code></em> =
<em><code>value</code></em></code>, или составным запросом из
<code>BEGIN</code> и <code>END</code> (см.
<a href="#begin-end">раздел 14.6.1</a>).</p>

<p>Декларации обработчика должны появиться после деклараций
условия или переменной.</p>
<p><em><code>handler_action</code></em> указывает на то, что обработчик
предпринимает после выполнения запроса обработчика:</p>

<ul><li><p><code>CONTINUE</code>: Выполнение текущей программы продолжается.
</li>
<li><code>EXIT</code>: Выполнение заканчивается для
<a href="#begin-end"><code>BEGIN ... END</code></a>, в котором
объявлен обработчик. Это истина, даже если условие происходит
во внутреннем блоке.</li>
<li><code>UNDO</code>: Не поддержано.</p></li></ul>

<p><em><code>condition_value</code></em> для
<a href="#declare-handler"><code>DECLARE ... HANDLER</code></a>
указывает на особое условие или класс условий, который активирует обработчик.
Это может принять следующие формы:</p>

<ul><li><p><em><code>mysql_error_code</code></em>:
Целое число, указание на код ошибки MySQL, такой как 1051, определяющий
<span><span>unknown table</span></span>:
<pre>
DECLARE CONTINUE HANDLER FOR 1051
  BEGIN
-- body of handler
  END;
</pre>

Не используйте код ошибки MySQL 0, потому что это указывает на успех, а не
на состояние ошибки. Для списка кодов ошибки MySQL см.
<a href="error.htm#error-messages-server">раздел B.3</a>.</li>

<li>SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>:
5-символьная строка, указание на значение SQLSTATE, такое как
<code>'42S01'</code>, определяющее <span><span>unknown table</span></span>:
<pre>
DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
  BEGIN
-- body of handler
  END;
</pre>

Не используйте значения SQLSTATE, которые начинаются с <code>'00'</code>,
потому что те указывают на успех, а не на состояние ошибки. Для списка
значений SQLSTATE см. <a href="error.htm#error-messages-server">раздел B.3
</a>.</li>

<li><em><code>condition_name</code></em>: Имя условия, ранее определенное с
<a href="#declare-condition"><code>DECLARE ... CONDITION</code></a>.
Имя условия может быть связано с кодом ошибки MySQL или значением SQLSTATE.
См. <a href="#declare-condition">раздел 14.6.7.1</a>.</li>

<li><code>SQLWARNING</code>: Сокращение для класса значений
SQLSTATE, которые начинаются с <code>'01'</code>.
<pre>
DECLARE CONTINUE HANDLER FOR SQLWARNING
  BEGIN
-- body of handler
  END;
</pre></li>

<li><code>NOT FOUND</code>: Сокращение для класса значений SQLSTATE, которые
начинаются с <code>'02'</code>. Это релевантно в пределах контекста курсоров
и используется, чтобы управлять тем, что происходит, когда курсор достигает
конца набора данных. Если больше строк не доступно, No Data condition
происходит со значением SQLSTATE <code>'02000'</code>.
Чтобы обнаружить это условие, Вы можете настроить обработчик для этого или
для <code>NOT FOUND</code>.
<pre>
DECLARE CONTINUE HANDLER FOR NOT FOUND
  BEGIN
-- body of handler
  END;
</pre>

См. <a href="#cursors">раздел 14.6.6</a>. Условие <code>NOT FOUND
</code> также происходит для  <code>SELECT ... INTO <em><code>var_list</code>
</em></code>, которые не получают строк.</li>

<li><code>SQLEXCEPTION</code>: Сокращение для класса значений SQLSTATE,
которые НЕ начинаются с <code>'00'</code>, <code>'01'</code> или
<code>'02'</code>.
<pre>
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  BEGIN
-- body of handler
  END;
</pre></li></ul>
<p>См. <a href="#handler-scope">раздел 14.6.7.6</a>.</p>

<p>Если условие происходит, для которого не был объявлен обработчик,
предпринятые меры зависят от класса условия:</p>
<ul><li><p><code>SQLEXCEPTION</code>: сохраненная программа заканчивается в
запросе, который поднял условие, как будто был <code>EXIT</code>.
Если программу вызвала другая сохраненная программа, дескрипторы программы
запроса, условие относится к своим собственным обработчикам.</li>

<li><code>SQLWARNING</code>: программа продолжает выполняться, как
будто был <code>CONTINUE</code>.</li>
<li><code>NOT FOUND</code>: если условие поднимается обычным порядком,
действие <code>CONTINUE</code>. Если условие поднимается
<a href="#signal"><code>SIGNAL</code></a> или
<a href="#resignal"><code>RESIGNAL</code></a>,
то действие <code>EXIT</code>.</p></li></ul>

<p>Следующий пример использует обработчик для <code>SQLSTATE '23000'</code>,
который происходит для дублирования ключа:
<pre>
mysql&gt; CREATE TABLE test.t (s1 INT, PRIMARY KEY (s1));
Query OK, 0 rows affected (0.00 sec)

mysql&gt; delimiter //
mysql&gt; CREATE PROCEDURE handlerdemo ()
    -&gt; BEGIN
    -&gt;   DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @x2 = 1;
    -&gt;   SET @x = 1;
    -&gt;   INSERT INTO test.t VALUES (1);
    -&gt;   SET @x = 2;
    -&gt;   INSERT INTO test.t VALUES (1);
    -&gt;   SET @x = 3;
    -&gt; END;
    -&gt; //
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CALL handlerdemo()//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @x//
+----+
| @x |
+----+
| 3  |
+----+
1 row in set (0.00 sec)
</pre>

Заметьте, что <code>@x</code> = <code>3</code> после того, как процедура
выполняется, что показывает, что выполнение продолжалось до конца процедуры
после ошибки. Если <a href="#declare-handler"><code>DECLARE ...
HANDLER</code></a> не присутствовало, MySQL предпримет меры по умолчанию
(<code>EXIT</code>) после второго <a href="#insert"><code>INSERT
</code></a> неудавшегося из-за <code>PRIMARY KEY</code> и <code>SELECT @x
</code> возвратил бы <code>2</code>.</p>

<p>Чтобы проигнорировать условие, объявите обработчик <code>CONTINUE</code>
для этого и свяжите его с пустым блоком. Например:
<pre>
DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN END;
</pre>

Контекст метки блока не включает код для обработчиков, объявленных в пределах
блока. Поэтому, запрос, связанный с обработчиком, не может использовать
<a href="#iterate"><code>ITERATE</code></a> или
<a href="#leave"><code>LEAVE</code></a>, чтобы обратиться к меткам для
блоков, которые прилагают декларацию обработчика. Рассмотрите следующий
пример, где у блока <a href="#repeat"><code>REPEAT</code></a>
есть метка <code>retry</code>:
<pre>
CREATE PROCEDURE p ()
BEGIN
  DECLARE i INT DEFAULT 3;
retry:
  REPEAT BEGIN
    DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN
      ITERATE retry;    # illegal
    END;
    IF i &lt; 0 THEN
       LEAVE retry;# legal
    END IF;
    SET i = i - 1;
  END;
  UNTIL FALSE END REPEAT;
END;
</pre>

Метка <code>retry</code> находится в контексте
<a href="#if"><code>IF</code></a>
в пределах блока. Это не находится в контексте для обработчика
<code>CONTINUE</code> , таким образом, ссылка там
недопустима и приводит к ошибке:
<pre>
ERROR 1308 (42000): LEAVE with no matching label: retry
</pre>

Чтобы избежать ссылок на внешние метки в обработчиках, используйте одну
из этих стратегий:</p>
<ul><li><p>Чтобы оставить блок, используйте <code>EXIT</code>.
Если никакая уборка блока не требуется,
<a href="#begin-end"><code>BEGIN ... END</code></a>
может быть пустым:
<pre>
DECLARE EXIT HANDLER FOR SQLWARNING BEGIN END;
</pre>

Иначе, поместите запросы уборки в обработчик:
<pre>
DECLARE EXIT HANDLER FOR SQLWARNING
BEGIN
  <em><code>block cleanup statements</code></em>
END;
</pre></li>

<li>Чтобы продолжить выполнение, установите переменную состояния в обработчик
<code>CONTINUE</code>, который может быть проверен в блоке приложения, чтобы
определить, был ли обработчик вызван. Следующий пример использует переменную
<code>done</code> с этой целью:
<pre>
CREATE PROCEDURE p ()
BEGIN
  DECLARE i INT DEFAULT 3;
  DECLARE done INT DEFAULT FALSE;
retry:
  REPEAT BEGIN
    DECLARE CONTINUE HANDLER FOR SQLWARNING BEGIN
      SET done = TRUE;
    END;
    IF done OR i &lt; 0 THEN
       LEAVE retry;
    END IF;
    SET i = i - 1;
  END;
  UNTIL FALSE END REPEAT;
END;
</pre></li></ul>

<h4><a name="get-diagnostics"></a>14.6.7.3. GET DIAGNOSTICS</h4>
<pre>
GET [CURRENT | STACKED] DIAGNOSTICS
{
<em><code>statement_information_item</code></em>
[, <em><code>statement_information_item</code></em>] ...
  | CONDITION <em><code>condition_number</code></em>
<em><code>condition_information_item</code></em>
[, <em><code>condition_information_item</code></em>] ...
}

<em><code>statement_information_item</code></em>:
<em><code>target</code></em> = <em><code>statement_information_item_name</code></em>
<em><code>condition_information_item</code></em>:
<em><code>target</code></em> = <em><code>condition_information_item_name</code></em>

<em><code>statement_information_item_name</code></em>:
NUMBER
  | ROW_COUNT

<em><code>condition_information_item_name</code></em>:
CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | RETURNED_SQLSTATE
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME

<em><code>condition_number</code></em>, <em><code>target</code></em>:
(see following discussion)
</pre>

Запросы SQL производят диагностическую информацию, которая заполняет область
диагностики. <a href="#get-diagnostics"><code>GET DIAGNOSTICS</code>
</a> позволяет приложениям смотреть эту информацию. Вы можете также
использовать <a href="#show-warnings"><code>SHOW WARNINGS</code></a>
или <a href="#show-errors"><code>SHOW ERRORS</code></a>, чтобы
видеть условия или ошибки.</p>

<p>Никакие специальные привилегии не нужны для
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>.</p>
<p><code>CURRENT</code> позволяет получить информацию из текущей области
диагностики. Ключевое слово <code>STACKED</code> позволяет получить
информацию из второй области диагностики, которая доступна, только если
текущий контекст это обработчик условия. Если никакое ключевое слово не дано,
значение по умолчанию должно использовать текущую область диагностики.</p>

<p><a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>,
как правило, используется в обработчике в пределах сохраненной программы. Это
расширение MySQL, для <a href="#get-diagnostics"><code>GET [CURRENT]
DIAGNOSTICS</code></a> разрешен внешний контекст обработчика, чтобы проверить
выполнение любого запроса SQL. Например, если Вы вызываете
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>,
Вы можете ввести эти запросы:
<pre>
mysql&gt; DROP TABLE test.no_such_table;
ERROR 1051 (42S02): Unknown table 'test.no_such_table'
mysql&gt; GET DIAGNOSTICS CONDITION 1
    -&gt;     @p1 = RETURNED_SQLSTATE, @p2 = MESSAGE_TEXT;
mysql&gt; SELECT @p1, @p2;
+-------+------------------------------------+
| @p1   | @p2                                |
+-------+------------------------------------+
| 42S02 | Unknown table 'test.no_such_table' |
+-------+------------------------------------+
</pre>

Это расширение применяется только к текущей области диагностики.
Это не относится к второй области диагностики потому, что
<code>GET STACKED DIAGNOSTICS</code> разрешен, только если текущий контекст
обработчик условия. Если это не так, происходит ошибка
<code>GET STACKED DIAGNOSTICS when handler not active</code>.</p>

<p>См. <a href="#diagnostics-area">раздел 14.6.7.7</a>.
Кратко, это содержит два вида информации:</p>
<ul><li><p>Информация о запросе, такая как число условий или
количество затронутых строк.</li>

<li>Информация об условии, такая как код ошибки и сообщение. Если запрос
поднимает многократные условия, у этой части области диагностики есть область
условия для каждого. Если запрос не поднимает условий, эта часть
области диагностики пуста.</p></li></ul>

<p>Для запроса, который производит три условия, область диагностики содержит
запрос и информацию об условии:
<pre>
Statement information:
  row count
  ... other statement information items ...
Condition area list:
  Condition area 1:
error code for condition 1
error message for condition 1
... other condition information items ...
  Condition area 2:
error code for condition 2:
error message for condition 2
... other condition information items ...
  Condition area 3:
error code for condition 3
error message for condition 3
... other condition information items ...
</pre>

<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>
может получить запрос или информацию об условии, но не обоих в том
же самом запросе:</p>

<ul><li><p>Чтобы получить информацию о запросе, получите желаемые элементы
запросов в целевые переменные. Этот
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>
назначает число доступных условий и количество затронутых строк к
пользовательским переменным <code>@p1</code> и <code>@p2</code>:
<pre>
GET DIAGNOSTICS @p1 = NUMBER, @p2 = ROW_COUNT;
</pre></li>

<li>Чтобы получить информацию об условии, определите номер условия и получите
желаемые элементы условия в целевые переменные. Этот
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>
назначает значение SQLSTATE и сообщение об ошибке пользовательским переменным
<code>@p3</code> и <code>@p4</code>:
<pre>
GET DIAGNOSTICS CONDITION 1
    @p3 = RETURNED_SQLSTATE, @p4 = MESSAGE_TEXT;
</pre></li></ul>

<p>Список извлечения определяет один или больше
<code><em><code>target</code></em> = <em><code>item_name</code></em></code>,
отделенных запятыми. Каждое назначение называет целевую переменную и любой
указатель <em><code>statement_information_item_name</code></em> или
<em><code>condition_information_item_name</code></em>, в зависимости от того,
получает ли запрос информацию об условии или запрос.</p>

<p>Допустимые указатели <em><code>target</code></em> для того, чтобы хранить
информацию элемента могут быть хранимой процедурой или функциональными
параметрами, местными переменными, объявленными с
<a href="#declare"><code>DECLARE</code></a>, или
определяемыми пользователем переменными.</p>

<p>Допустимые указатели <em><code>condition_number</code></em>
могут быть хранимой процедурой или функциональными параметрами, местными
перемеными, объявленными с <a href="#declare"><code>DECLARE</code>
</a>, определяемыми пользователем переменными, системными переменными или
литералами. Символьный литерал может включать
<em><code>_charset</code></em>. Предупреждение происходит, если номер
условия не находится в диапазоне от 1 до числа областей условия, у которых
есть информация. В этом случае предупреждение добавлено к области
диагностики, не очищая ее.</p>

<p>Когда условие происходит, MySQL не заполняет все элементы условия,
признанные <a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>:
<pre>
mysql&gt; GET DIAGNOSTICS CONDITION 1
    -&gt;     @p5 = SCHEMA_NAME, @p6 = TABLE_NAME;
mysql&gt; SELECT @p5, @p6;
+-----+-----+
| @p5 | @p6 |
+-----+-----+
|     |     |
+-----+-----+
</pre>

В стандартном SQL, если есть многократные условия, первое условие касается
<code>SQLSTATE</code> для предыдущего запроса SQL. В MySQL это не
гарантируется. Чтобы получить основную ошибку, Вы не можете сделать этого:
<pre>
GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO;
</pre>

Вместо этого получите количество условий сначала, затем используйте это,
чтобы определить, которое условие смотреть:
<pre>
GET DIAGNOSTICS @cno = NUMBER;
GET DIAGNOSTICS CONDITION @cno @errno = MYSQL_ERRNO;
</pre>

См. <a href="#diagnostics-area-information-items">раздел 14.6.7.7.2
</a>.</p>
<p>Вот пример, который использует <a href="#get-diagnostics"><code>GET
DIAGNOSTICS</code></a> и обработчик исключения в контексте хранимой
процедуры, чтобы оценить результат работы вставки. Если вставка была успешна,
процедура использует <a href="#get-diagnostics"><code>GET DIAGNOSTICS
</code></a>, чтобы получить количество затронутых строк. Это показывает, что
Вы можете использовать <a href="#get-diagnostics"><code>GET
DIAGNOSTICS</code></a> многократно, чтобы получить информацию о запросе, пока
текущая область диагностики не была очищена.
<pre>
CREATE PROCEDURE do_insert(value INT)
BEGIN
  -- Declare variables to hold diagnostics area information
  DECLARE code CHAR(5) DEFAULT '00000';
  DECLARE msg TEXT;
  DECLARE rows INT;
  DECLARE result TEXT;
  -- Declare exception handler for failed insert
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
BEGIN
  GET DIAGNOSTICS CONDITION 1
  code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
END;
  -- Perform the insert
  INSERT INTO t1 (int_col) VALUES(value);
  -- Check whether the insert was successful
  IF code = '00000' THEN
     GET DIAGNOSTICS rows = ROW_COUNT;
     SET result = CONCAT('insert succeeded, row count = ',rows);
  ELSE
    SET result = CONCAT('insert failed, error = ',code,', message = ',msg);
  END IF;
  -- Say what happened
  SELECT result;
END;
</pre>

Предположите, что <code>t1.int_col</code>
столбец целого числа, который объявлен как <code>NOT NULL</code>.
Процедура приводит к этим результатам когда вызвана, чтобы вставить значения
не-<code>NULL</code> и <code>NULL</code>, соответственно:
<pre>
mysql&gt; CALL do_insert(1);
+---------------------------------+
| result                          |
+---------------------------------+
| insert succeeded, row count = 1 |
+---------------------------------+

mysql&gt; CALL do_insert(NULL);
+-------------------------------------------------------------------------+
| result                                                                  |
+-------------------------------------------------------------------------+
| insert failed, error = 23000, message = Column 'int_col' cannot be null |
+-------------------------------------------------------------------------+
</pre>

Когда обработчик условия активируется, обращение к стеку
области диагностики происходит:</p>
<ul><li><p>Первая (текущая) область диагностики становится второй областью
диагностики, и новая текущая область диагностики создается как копия этого.
</li>

<li><a href="#get-diagnostics"><code>GET [CURRENT] DIAGNOSTICS</code>
</a> и <a href="#get-diagnostics"><code>GET STACKED DIAGNOSTICS</code>
</a> может использоваться в пределах обработчика, чтобы получить доступ к
содержанию областей диагностики.</li>

<li>Первоначально, обе области диагностики возвращают тот же самый результат,
таким образом, возможно получить информацию из текущей области диагностики об
условии, которое активировало обработчик, <span><em>пока</em></span> Вы не
выполняете запросов в пределах обработчика, которые изменяют его
текущую область диагностики.</li>

<li>Однако, выполнение запросов в пределах обработчика может изменить текущую
область диагностики, очищая и устанавливая ее содержание согласно нормальным
правилам (см. <a href="#diagnostics-area-populating">раздел 14.6.7.7.3
</a>).</p>

<p>Более надежный способ получить информацию об активирующем обработчик
условии состоит в том, чтобы использовать стековую область диагностики,
которая не может быть изменена выполнением запросов в пределах обработчика,
кроме <a href="#resignal"><code>RESIGNAL</code></a>. См.
<a href="#diagnostics-area">раздел 14.6.7.7</a>.</p></li></ul>

<p>Следующий пример показывает как <code>GET STACKED DIAGNOSTICS</code>
может использоваться в пределах обработчика, чтобы получить информацию об
обработанном исключении, даже после того, как текущая область диагностики
была изменена запросами обработчика.</p>

<p>В пределах хранимой процедуры <code>p()</code> мы пытаемся вставить два
значения в таблицу, которая содержит столбец <code>TEXT NOT NULL</code>.
Первое значение не-<code>NULL</code> строка, второе <code>NULL</code>.
Столбец запрещает <code>NULL</code>, таким образом, первая вставка
преуспевает, но вторая дает исключение. Процедура включает обработчик
исключения, который отображает попытки вставить <code>NULL</code>:
<pre>
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (c1 TEXT NOT NULL);
DROP PROCEDURE IF EXISTS p;
delimiter //
CREATE PROCEDURE p ()
BEGIN
  -- Declare variables to hold diagnostics area information
  DECLARE errcount INT;
  DECLARE errno INT;
  DECLARE msg TEXT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
  -- Here the current DA is nonempty because no prior statements
  -- executing within the handler have cleared it
    GET CURRENT DIAGNOSTICS CONDITION 1
    errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
    SELECT 'current DA before mapped insert' AS op, errno, msg;
    GET STACKED DIAGNOSTICS CONDITION 1
    errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
    SELECT 'stacked DA before mapped insert' AS op, errno, msg;
    -- Map attempted NULL insert to empty string insert
    INSERT INTO t1 (c1) VALUES('');
    -- Here the current DA should be empty (if the INSERT succeeded),
    -- so check whether there are conditions before attempting to
    -- obtain condition information
    GET CURRENT DIAGNOSTICS errcount = NUMBER;
    IF errcount = 0 THEN
       SELECT 'mapped insert succeeded, current DA is empty' AS op;
    ELSE
      GET CURRENT DIAGNOSTICS CONDITION 1
      errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
      SELECT 'current DA after mapped insert' AS op, errno, msg;
    END IF;
    GET STACKED DIAGNOSTICS CONDITION 1
    errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
    SELECT 'stacked DA after mapped insert' AS op, errno, msg;
  END;
  INSERT INTO t1 (c1) VALUES('string 1');
  INSERT INTO t1 (c1) VALUES(NULL);
END;
//
delimiter ;
CALL p();
SELECT * FROM t1;
</pre>

Когда обработчик активируется, копия текущей области диагностики продвинута к
стеку области диагностики. Обработчик показывает содержание текущей и
стековой областей диагностики, которые являются тем же самым первоначально:
<pre>
+---------------------------------+-------+----------------------------+
| op                              | errno | msg                        |
+---------------------------------+-------+----------------------------+
| current DA before mapped insert |  1048 | Column 'c1' cannot be null |
+---------------------------------+-------+----------------------------+

+---------------------------------+-------+----------------------------+
| op                              | errno | msg                        |
+---------------------------------+-------+----------------------------+
| stacked DA before mapped insert |  1048 | Column 'c1' cannot be null |
+---------------------------------+-------+----------------------------+
</pre>

Запросы, выполняющиеся после <a href="#get-diagnostics"><code>GET
DIAGNOSTICS</code></a>, могут сбросить текущую область диагностики.
Например, обработчик отображает вставку <code>NULL</code>
к пустой строке, вставляет и выводит на экран результат. Новая вставка
следует и очищает текущую область диагностики, но стековая область
диагностики остается неизменной и все еще содержит информацию об условии,
которое активировало обработчик:
<pre>
+----------------------------------------------+
| op                                           |
+----------------------------------------------+
| mapped insert succeeded, current DA is empty |
+----------------------------------------------+

+--------------------------------+-------+----------------------------+
| op                             | errno | msg                        |
+--------------------------------+-------+----------------------------+
| stacked DA after mapped insert |  1048 | Column 'c1' cannot be null |
+--------------------------------+-------+----------------------------+
</pre>

Когда обработчик условия заканчивается, его текущая область диагностики
убрана из стека, и стековая область диагностики становится текущей областью
диагностики в хранимой процедуре.</p>

<p>После возвращений процедуры таблица содержит две строки. Пустая строка
следует из попытки вставить <code>NULL</code>, что
было отображено на пустую строку:
<pre>
+----------+
| c1       |
+----------+
| string 1 |
|          |
+----------+
</pre>

В предыдущем примере первые два <a href="#get-diagnostics"><code>GET
DIAGNOSTICS</code></a> в пределах обработчика условия получают информацию из
текущей и стековой областей диагностики и возвращают те же самые значения.
Это не будет иметь место, если выполняются запросы, которые сбрасывают
текущую область диагностики ранее в пределах обработчика. Предположите, что
<code>p()</code> переписана, чтобы поместить
<a href="#declare"><code>DECLARE</code></a> в
пределах определения обработчика вместо того, чтобы предшествовать этому:
<pre>
CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    -- Declare variables to hold diagnostics area information
    DECLARE errcount INT;
    DECLARE errno INT;
    DECLARE msg TEXT;
    GET CURRENT DIAGNOSTICS CONDITION 1
    errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
    SELECT 'current DA before mapped insert' AS op, errno, msg;
    GET STACKED DIAGNOSTICS CONDITION 1
    errno = MYSQL_ERRNO, msg = MESSAGE_TEXT;
    SELECT 'stacked DA before mapped insert' AS op, errno, msg;
    ...
</pre>
В этом случае результат зависит от версии:</p>

<ul><li><p>До MySQL 5.7.2 <a href="#declare"><code>DECLARE</code></a>
не изменяет текущую область диагностики, таким образом, первые два
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a> возвращают
тот же самый результат, так же, как в оригинальной версии <code>p()</code>.
</p>

<p>В MySQL 5.7.2 работа была сделана, чтобы гарантировать, что все
недиагностические запросы заполняют область диагностики по стандарту SQL.
<a href="#declare"><code>DECLARE</code></a> один из них, таким
образом, в 5.7.2 и выше выполнение запросов <a href="#declare"><code>
DECLARE</code></a> в начале обработчика очищает текущую область диагностики и
запросы <a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>
приводят к различным результатам:
<pre>
+---------------------------------+-------+------+
| op                              | errno | msg  |
+---------------------------------+-------+------+
| current DA before mapped insert |  NULL | NULL |
+---------------------------------+-------+------+

+---------------------------------+-------+----------------------------+
| op                              | errno | msg                        |
+---------------------------------+-------+----------------------------+
| stacked DA before mapped insert |  1048 | Column 'c1' cannot be null |
+---------------------------------+-------+----------------------------+
</pre></li></ul>

<p>Чтобы избегать этой проблемы в пределах обработчика условия, стремясь
получить информацию об условии, которое активировало обработчик, убедитесь,
что получили доступ к стековой области диагностики,
а не текущей области диагностики.</p>

<h4><a name="resignal"></a>14.6.7.4. RESIGNAL</h4>
<pre>
RESIGNAL [<em><code>condition_value</code></em>]
[SET <em><code>signal_information_item</code></em>
[, <em><code>signal_information_item</code></em>] ...]

<em><code>condition_value</code></em>:
SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>
  | <em><code>condition_name</code></em>

<em><code>signal_information_item</code></em>:
<em><code>condition_information_item_name</code></em> = <em><code>simple_value_specification</code></em>

<em><code>condition_information_item_name</code></em>:
CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME

<em><code>condition_name</code></em>, <em><code>simple_value_specification</code></em>:
(see following discussion)
</pre>

<a href="#resignal"><code>RESIGNAL</code></a> передает информацию о
состоянии ошибки, которая доступна во время выполнения обработчика условия в
пределах составного запроса в хранимой процедуре или функции, триггере или
событии. <a href="#resignal"><code>RESIGNAL</code></a>
может изменить некоторую или всю информацию перед передачей этого.
<a href="#resignal"><code>RESIGNAL</code></a> связан с
<a href="#signal"><code>SIGNAL</code></a>,
но вместо того, чтобы породить условие как
<a href="#signal"><code>SIGNAL</code></a>,
<a href="#resignal"><code>RESIGNAL</code></a> передает
существующую информацию об условии, возможно после изменения этого.</p>

<p><a href="#resignal"><code>RESIGNAL</code></a>
позволяет обработать ошибку и возвратить информацию об ошибке. Иначе выполняя
запрос SQL в пределах обработчика, информация, которая вызвала активацию
обработчика, разрушена. <a href="#resignal"><code>RESIGNAL</code></a>
также может сделать некоторые процедуры короче, если данный обработчик может
обработать часть ситуации, то передать условие к другому обработчику.</p>

<p>Никакие специальные привилегии не требуются для
<a href="#resignal"><code>RESIGNAL</code></a>.</p>
<p>Все формы <a href="#resignal"><code>RESIGNAL</code></a>
требуют, чтобы текущий контекст был обработчиком условия. Иначе
<a href="#resignal"><code>RESIGNAL</code></a> будет ошибка
<code>RESIGNAL when handler not active</code>.</p>
<p>См. разделы <a href="#get-diagnostics">14.6.7.3</a> и
<a href="#diagnostics-area">14.6.7.7</a>.</p>

<p>Для <em><code>condition_value</code></em> и
<em><code>signal_information_item</code></em>
определения и правила как для
<a href="#resignal"><code>RESIGNAL</code></a> и
<a href="#signal"><code>SIGNAL</code></a>. Например,
<em><code>condition_value</code></em> может быть <code>SQLSTATE</code>,
значение могут указать на ошибки, предупреждения или <span><span>not found
</span></span>. См. <a href="#signal">раздел 14.6.7.5</a>.</p>

<p><a href="#resignal"><code>RESIGNAL</code></a> берет
<em><code>condition_value</code></em> и <code>SET</code>, оба являются
дополнительными. Это приводит к нескольким возможным применениям:</p>

<ul><li><p><a href="#resignal"><code>RESIGNAL</code></a> один:
<pre>
RESIGNAL;
</pre></li>

<li><a href="#resignal"><code>RESIGNAL</code></a>
с новой информацией о сигнале:
<pre>
RESIGNAL SET <em><code>signal_information_item</code></em>
         [, <em><code>signal_information_item</code></em>] ...;
</pre></li>

<li><a href="#resignal"><code>RESIGNAL</code></a>
со значением условия и возможно новой информацией о сигнале:
<pre>
RESIGNAL <em><code>condition_value</code></em>
         [SET <em><code>signal_information_item</code></em>
         [, <em><code>signal_information_item</code></em>] ...];
</pre></li></ul>

<p>Эти случаи использования изменяют области условия и диагностики:</p>
<ul><li><p>Область диагностики содержит одну или более областей условия.</li>
<li>Область условия содержит единицы информации условия, такую как
значения <code>SQLSTATE</code>, <code>MYSQL_ERRNO</code> или
<code>MESSAGE_TEXT</code>.</p></li></ul>

<p>Есть стек областей диагностики. Когда обработчик берет на себя управление,
он продвигает область диагностики к вершине стека, таким образом во время
выполнения обработчика есть две области диагностики:</p>

<ul><li><p>Первая (текущая) область диагностики, которая запускается как
копия последней области диагностики, но будет перезаписана первым запросом в
обработчике, который изменяет текущую область диагностики.</li>

<li>Последняя (область диагностики, у которой есть области условия, которые
были настроены перед запуском обработчика.</p></li></ul>
<p>Максимальное количество областей условия в области диагностики определено
значением <a href="server.htm#sysvar_max_error_count"><code>max_error_count
</code></a>. См. <a href="#diagnostics-area-system-variables">
раздел 14.6.7.7.5</a>.</p>

<h5><a name="resignal-alone"></a>14.6.7.4.1. RESIGNAL</h5>
<p>Простой <a href="#resignal"><code>RESIGNAL</code></a>
означает, что <span><span>передает ошибку без изменений</span></span>.
Это восстанавливает последнюю область диагностики и делает это текущей
областью диагностики. Таким образом, это <span><span>помещает</span></span>
области диагностики в стек.</p>

<p>В пределах обработчика условия, который ловит условие, использование
<a href="#resignal"><code>RESIGNAL</code></a>
должно выполнить некоторые другие действия, и затем передать без изменения
оригинальную информацию об условии (информацию, которая существовала
перед входом в обработчик).</p>

<p>Пример:
<pre>
DROP TABLE IF EXISTS xx;
delimiter //
CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    SET @error_count = @error_count + 1;
    IF @a = 0 THEN
       RESIGNAL;
    END IF;
  END;
  DROP TABLE xx;
END//
delimiter ;
SET @error_count = 0;
SET @a = 0;
CALL p();
</pre>

Предположите, что запрос <code>DROP TABLE xx</code> терпит неудачу. Стек
области диагностики похож на это:
<pre>
DA 1. ERROR 1051 (42S02): Unknown table 'xx'
</pre>

Тогда выполнение вызывает обработчик <code>EXIT</code>.
Это запускается, продвигая область диагностики к вершине стека, который
теперь похож на это:
<pre>
DA 1. ERROR 1051 (42S02): Unknown table 'xx'
DA 2. ERROR 1051 (42S02): Unknown table 'xx'
</pre>

В этом пункте содержание первых (текущих) и вторых
областей диагностики то же самое. Первая область диагностики может быть
изменена запросами, выполняющимися впоследствии в пределах обработчика.</p>

<p>Обычно запрос процедуры очищает первую область диагностики.
<code>BEGIN</code> исключение, это не очищает, это ничего не делает.
<code>SET</code> не исключение, это очищает, выполняет работу и приводит к
результату <span><span>success</span></span>. Стек области диагностики
теперь похож на это:
<pre>
DA 1. ERROR 0000 (00000): Successful operation
DA 2. ERROR 1051 (42S02): Unknown table 'xx'
</pre>

В этом пункте, если <code>@a = 0</code>,
<a href="#resignal"><code>RESIGNAL</code></a>
помещает область диагностики в стек, который теперь похож на это:
<pre>
DA 1. ERROR 1051 (42S02): Unknown table 'xx'
</pre>
И именно это видит вызывающий.</p>

<p>Если <code>@a</code> не 0, обработчик просто заканчивается, что означает,
что нет больше использования для текущей области диагностики (все
обработано). Таким образом, это может быть выброшено, заставляя стековую
область диагностики стать текущей областью диагностики снова. Стек области
диагностики похож на это:
<pre>
DA 1. ERROR 0000 (00000): Successful operation
</pre>

Детали заставляют это выглядеть сложным, но конечный результат довольно
полезен: обработчики могут выполниться, не разрушая информацию об условии,
которое вызвало активацию обработчика.</p>

<h5><a name="resignal-with-new-signal"></a>14.6.7.4.2.
RESIGNAL с новой информацией о сигнале</h5>
<p><a href="#resignal"><code>RESIGNAL</code></a> с <code>SET</code>
предоставляет новую информацию о сигнале, таким образом, запрос означает, что
<span><span>ошибку передают с изменениями</span></span>:
<pre>
RESIGNAL SET <em><code>signal_information_item</code></em>
         [, <em><code>signal_information_item</code></em>] ...;
</pre>

Как с <a href="#resignal"><code>RESIGNAL</code></a>
идея состоит в том, чтобы вытолкать стек области диагностики так, чтобы
оригинальная информация была снаружи. В отличие от простого
<a href="#resignal"><code>RESIGNAL</code></a>,
что-либо определенное в <code>SET</code> вносит изменения.</p>

<p>Пример:
<pre>
DROP TABLE IF EXISTS xx;
delimiter //
CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    SET @error_count = @error_count + 1;
    IF @a = 0 THEN
       RESIGNAL SET MYSQL_ERRNO = 5;
    END IF;
  END;
  DROP TABLE xx;
END//
delimiter ;
SET @error_count = 0;
SET @a = 0;
CALL p();
</pre>

Помните из предыдущего обсуждения, что
<a href="#resignal"><code>RESIGNAL</code></a>
результаты в области диагностики складывает как это:
<pre>
DA 1. ERROR 1051 (42S02): Unknown table 'xx'
</pre>

<code>RESIGNAL SET MYSQL_ERRNO = 5</code> приводит к этому стеку:
<pre>
DA 1. ERROR 5 (42S02): Unknown table 'xx'
</pre>
Другими словами, это изменяет код ошибки и ничто иное.</p>

<p><a href="#resignal"><code>RESIGNAL</code></a>
может изменить любые из единиц информации сигнала, заставляя первую область
условия области диагностики выглядеть очень отличающейся.</p>

<h5><a name="resignal-with-condition"></a>14.6.7.4.3. RESIGNAL со значением
условия и дополнительной новой информацией о сигнале</h5>
<p><a href="#resignal"><code>RESIGNAL</code></a> с условием
означает, что <span><span>условие продвигают в текущую область диагностики
</span></span>. Если есть <code>SET</code>,
он также изменяет информацию об ошибке.
<pre>
RESIGNAL <em><code>condition_value</code></em>
         [SET <em><code>signal_information_item</code></em>
         [, <em><code>signal_information_item</code></em>] ...];
</pre>

Эта форма <a href="#resignal"><code>RESIGNAL</code></a>
восстанавливает последнюю область диагностики и делает это текущей областью
диагностики. Таким образом, это <span><span>поднимает</span></span>
стек области диагностики, который является тем же самым, как в простом
<a href="#resignal"><code>RESIGNAL</code></a>.
Однако, это также изменяет область диагностики в зависимости от значения
условия или информации о сигнале.</p>

<p>Пример:
<pre>
DROP TABLE IF EXISTS xx;
delimiter //
CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    SET @error_count = @error_count + 1;
    IF @a = 0 THEN
       RESIGNAL SQLSTATE '45000' SET MYSQL_ERRNO=5;
    END IF;
  END;
  DROP TABLE xx;
END//
delimiter ;
SET @error_count = 0;
SET @a = 0;
SET @@max_error_count = 2;
CALL p();
SHOW ERRORS;
</pre>

Это подобно предыдущему примеру и эффекты те же самые, за исключением того,
что если <a href="#resignal"><code>RESIGNAL</code></a> происходит,
область текущего положения выглядит по-другому в конце. Причина: условие
добавляется, а не заменяет существующее значение условия.</p>

<p><a href="#resignal"><code>RESIGNAL</code></a>
включает значение условия (<code>SQLSTATE '45000'</code>),
таким образом, это добавляет новую область условия, приводящую к стеку
области диагностики, который похож на это:
<pre>
DA 1. (condition 2) ERROR 1051 (42S02): Unknown table 'xx'
      (condition 1) ERROR 5 (45000) Unknown table 'xx'
</pre>

Результат <a href="#call"><code>CALL p()</code></a> и
<a href="#show-errors"><code>SHOW ERRORS</code></a>:
<pre>
mysql&gt; CALL p();
ERROR 5 (45000): Unknown table 'xx'
mysql&gt; SHOW ERRORS;
+-------+------+--------------------+
| Level | Code | Message            |
+-------+------+--------------------+
| Error | 1051 | Unknown table 'xx' |
| Error |    5 | Unknown table 'xx' |
+-------+------+--------------------+
</pre>

<h5><a name="resignal-handler"></a>14.6.7.4.4.
RESIGNAL требует контекста обработчика условия</h5>
<p>Все формы <a href="#resignal"><code>RESIGNAL</code></a>
требуют, чтобы текущий контекст был обработчиком условия. Иначе
<a href="#resignal"><code>RESIGNAL</code></a> происходит ошибка
<code>RESIGNAL when handler not active</code>:
<pre>
mysql&gt; CREATE PROCEDURE p () RESIGNAL;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CALL p();
ERROR 1645 (0K000): RESIGNAL when handler not active
</pre>

Here is a more difficult example:
<pre>
delimiter //
CREATE FUNCTION f () RETURNS INT
BEGIN
  RESIGNAL;
  RETURN 5;
END//

CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @a=f();
  SIGNAL SQLSTATE '55555';
END//
delimiter ;
CALL p();
</pre>

<a href="#resignal"><code>RESIGNAL</code></a>
происходит в пределах сохраненной функции <code>f()</code>. Хотя
<code>f()</code> непосредственно вызван в пределах контекста обработчика
<code>EXIT</code>, выполнение в пределах <code>f()</code> имеет его
собственный контекст, который не является контекстом обработчика.
Таким образом, <code>RESIGNAL</code> в пределах <code>f()</code> приводит к
ошибке <span><span>handler not active</span></span>.</p>

<h4><a name="signal"></a>14.6.7.5. SIGNAL</h4>
<pre>
SIGNAL <em><code>condition_value</code></em>
[SET <em><code>signal_information_item</code></em>
[, <em><code>signal_information_item</code></em>] ...]

<em><code>condition_value</code></em>:
SQLSTATE [VALUE] <em><code>sqlstate_value</code></em>
  | <em><code>condition_name</code></em>

<em><code>signal_information_item</code></em>:
<em><code>condition_information_item_name</code></em> = <em><code>simple_value_specification</code></em>

<em><code>condition_information_item_name</code></em>:
CLASS_ORIGIN
  | SUBCLASS_ORIGIN
  | MESSAGE_TEXT
  | MYSQL_ERRNO
  | CONSTRAINT_CATALOG
  | CONSTRAINT_SCHEMA
  | CONSTRAINT_NAME
  | CATALOG_NAME
  | SCHEMA_NAME
  | TABLE_NAME
  | COLUMN_NAME
  | CURSOR_NAME
<em><code>condition_name</code></em>, <em><code>simple_value_specification</code></em>:
(see following discussion)
</pre>

<a href="#signal"><code>SIGNAL</code></a> это способ
<span><span>вернуть</span></span> ошибку. <a href="#signal"><code>
SIGNAL</code></a> предоставляет информацию об ошибке обработчику, внешней
части приложения или клиенту. Кроме того, это обеспечивает управление
характеристиками ошибки (код ошибки, <code>SQLSTATE</code>, сообщение). Без
<a href="#signal"><code>SIGNAL</code></a>
необходимо обратиться к обходным решениям, таким как преднамеренное обращение
к несуществующей таблице, чтобы заставить подпрограмму возвращать ошибку.</p>

<p><em><code>condition_value</code></em> в
<a href="#signal"><code>SIGNAL</code></a> указывает на ошибочное
значение, которое будет возвращено. Это может быть <code>SQLSTATE</code>
(5-символьная строка) или <em><code>condition_name</code></em>, которое
обращается к названному условию, ранее определенному с
<a href="#declare-condition"><code>DECLARE ... CONDITION</code></a>
(см. <a href="#declare-condition">раздел 14.6.7.1</a>).</p>

<p><code>SQLSTATE</code> может указать на ошибки, предупреждения или
<span><span>not found</span></span>. Первые два символа значения указывают на
его ошибочный класс, как обсуждено в
<a href="#signal-condition-information-items">разделе 14.6.7.5.1</a>.
Некоторый сигнал оценивает завершение запроса, см.
<a href="#signal-effects">раздел 14.6.7.5.2</a>.</p>

<p><code>SQLSTATE</code> для <a href="#signal"><code>SIGNAL</code></a>
не должно начинаться с <code>'00'</code> потому, что такие значения указывают
на успех и недопустимы для того, чтобы сигнализировать ошибку. Это истина
для указания <code>SQLSTATE</code> в
<a href="#signal"><code>SIGNAL</code></a>
или в названном условии, упомянутом в запросе. Если значение недопустимо,
будет ошибка <code>Bad SQLSTATE</code>.</p>

<p><a href="#signal"><code>SIGNAL</code></a> произвольно включает
<code>SET</code>, который содержит многократные элементы сигнала в списке
разделенных запятой значений
<em><code>condition_information_item_name</code></em> =
<em><code>simple_value_specification</code></em>.</p>

<p>Каждый <em><code>condition_information_item_name</code></em>
может быть определен только однажды в <code>SET</code>. Иначе будет ошибка
<code>Duplicate condition information item</code>.</p>

<p>Допустимые указатели <em><code>simple_value_specification</code></em>
могут быть определены, используя хранимую процедуру или функциональные
параметры, местные переменные, объявленные с
<a href="#declare"><code>DECLARE</code></a>,
определяемые пользователем переменные, системные переменные или литералы.
Символьный литерал может включать <em><code>_charset</code></em>.</p>
<p>См. <a href="#signal-condition-information-items">раздел 14.6.7.5.1
</a>.</p>

<p>Следующая процедура сигнализирует ошибку или предупреждение в зависимости
от значения <code>pval</code>:
<pre>
CREATE PROCEDURE p (pval INT)
BEGIN
  DECLARE specialty CONDITION FOR SQLSTATE '45000';
  IF pval = 0 THEN SIGNAL SQLSTATE '01000';
  ELSEIF pval = 1 THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'An error occurred';
  ELSEIF pval = 2 THEN
    SIGNAL specialty
    SET MESSAGE_TEXT = 'An error occurred';
  ELSE
    SIGNAL SQLSTATE '01000'
    SET MESSAGE_TEXT = 'A warning occurred', MYSQL_ERRNO = 1000;
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'An error occurred', MYSQL_ERRNO = 1001;
  END IF;
END;
</pre>

Если <code>pval</code> = 0, <code>p()</code> сигнализирует предупреждение,
потому что значения <code>SQLSTATE</code>, которые начинаются с
<code>'01'</code> это сигналы в классе предупреждения. Предупреждение не
заканчивает процедуру, и может быть замечено с
<a href="#show-warnings"><code>SHOW WARNINGS</code></a>
после завершения процедуры.</p>

<p>Если <code>pval</code> = 1, <code>p()</code>
сигнализирует ошибку и устанавливает <code>MESSAGE_TEXT</code>. Ошибка
заканчивает процедуру, и текст возвращен с информацией об ошибке.</p>

<p>Если <code>pval</code> = 2, та же самая ошибка сообщена, хотя значение
<code>SQLSTATE</code> определено, используя названное условие в этом случае.
</p>
<p>Если <code>pval</code> что-то другое, <code>p()</code>
сначала выдает предупреждение и ставит текст сообщения с кодом ошибки. Это
предупреждение не заканчивает процедуру, таким образом, выполнение
продолжается и <code>p()</code> сигнализирует ошибку. Ошибка действительно
заканчивает процедуру. Текст сообщения и код ошибки, установленный
предупреждением, заменены значениями, установленными ошибкой, которые
возвращены с информацией об ошибке.</p>

<p><a href="#signal"><code>SIGNAL</code></a>, как правило,
используется в пределах сохраненных программ, но это расширение MySQL, потому
что этому разрешают внешний контекст обработчика. Например, если Вы вызываете
<a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>, Вы
можете ввести любой из этих запросов при подсказке:
<pre>
mysql&gt; SIGNAL SQLSTATE '77777';
mysql&gt; CREATE TRIGGER t_bi BEFORE INSERT ON t
    -&gt;        FOR EACH ROW SIGNAL SQLSTATE '77777';
mysql&gt; CREATE EVENT e ON SCHEDULE EVERY 1 SECOND
    -&gt;        DO SIGNAL SQLSTATE '77777';
</pre>
<a href="#signal"><code>SIGNAL</code></a>
выполняет согласно следующим правилам:</p>

<p>Если <a href="#signal"><code>SIGNAL</code></a>
указывает на <code>SQLSTATE</code>, то значение используется, чтобы
сигнализировать определенное условие. Пример:
<pre>
CREATE PROCEDURE p (divisor INT)
BEGIN
  IF divisor = 0 THEN
     SIGNAL SQLSTATE '22012';
  END IF;
END;
</pre>

Если <a href="#signal"><code>SIGNAL</code></a> использует названное
условие, это условие должно быть объявлено в некотором контексте, который
относится к <a href="#signal"><code>SIGNAL</code></a>,
и должно быть определено, используя значение <code>SQLSTATE</code>, а не код
ошибки MySQL. Пример:
<pre>
CREATE PROCEDURE p (divisor INT)
BEGIN
  DECLARE divide_by_zero CONDITION FOR SQLSTATE '22012';
  IF divisor = 0 THEN
     SIGNAL divide_by_zero;
  END IF;
END;
</pre>

Если названное условие не существует в пределах
<a href="#signal"><code>SIGNAL</code></a>, будет
ошибка <code>Undefined CONDITION</code>.</p>

<p>Если <a href="#signal"><code>SIGNAL</code></a>
обращается к названному условию, которое определено с кодом ошибки MySQL, а
не значением <code>SQLSTATE</code>, будет ошибка <code>SIGNAL/RESIGNAL
can only use a CONDITION defined with SQLSTATE</code>.
Следующие запросы вызывают эту ошибку, потому что названное условие связано с
кодом ошибки MySQL:
<pre>
DECLARE no_such_table CONDITION FOR 1051;
SIGNAL no_such_table;
</pre>

Если условие с именем объявлено многократно в различных контекстах,
декларация с самым местным контекстом применяется.
Рассмотрите следующую процедуру:
<pre>
CREATE PROCEDURE p (divisor INT)
BEGIN
  DECLARE my_error CONDITION FOR SQLSTATE '45000';
  IF divisor = 0 THEN BEGIN
     DECLARE my_error CONDITION FOR SQLSTATE '22012';
     SIGNAL my_error;
  END;
  END IF;
  SIGNAL my_error;
END;
</pre>

Если <code>divisor</code> = 0, первый
<a href="#signal"><code>SIGNAL</code></a>
выполняется. Самая внутренняя декларация условия <code>my_error</code>
применяется, поднимая <code>SQLSTATE</code> <code>'22012'</code>.</p>

<p>Если <code>divisor</code> не 0, второй
<a href="#signal"><code>SIGNAL</code></a> выполняется.
Наиболее удаленная декларация условия <code>my_error</code> применяется,
поднимая <code>SQLSTATE</code> <code>'45000'</code>.</p>
<p>См. <a href="#handler-scope">раздел 14.6.7.6</a>.</p>

<p>Сигналы могут быть подняты в пределах обработчиков исключения:
<pre>
CREATE PROCEDURE p ()
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    SIGNAL SQLSTATE VALUE '99999'
    SET MESSAGE_TEXT = 'An error occurred';
  END;
  DROP TABLE no_such_table;
END;
</pre>

<code>CALL p()</code> достигает <a href="#drop-table"><code>DROP TABLE
</code></a>. Нет никакой таблицы <code>no_such_table</code>, таким образом,
ошибочный обработчик активирован. Ошибочный обработчик разрушает оригинальную
ошибку (<span><span>no such table</span></span>) и делает новую ошибку с
<code>SQLSTATE</code> <code>'99999'</code> и сообщением
<code>An error occurred</code>.</p>

<h5><a name="signal-condition-information-items"></a>14.6.7.5.1.
Единицы информации условия сигнала</h5>
<p>Следующая таблица приводит названия единиц информации условия области
диагностики, которые могут быть установлены в
<a href="#signal"><code>SIGNAL</code></a> (или
<a href="#resignal"><code>RESIGNAL</code></a>).
Все элементы стандартный SQL кроме <code>MYSQL_ERRNO</code>,
который является расширением MySQL. Для получения дополнительной информации
об этих элементах см. <a href="#diagnostics-area">раздел 14.6.7.7</a>.
<pre>
Item Name           Definition
---------           ----------
CLASS_ORIGIN        VARCHAR(64)
SUBCLASS_ORIGIN     VARCHAR(64)
CONSTRAINT_CATALOG  VARCHAR(64)
CONSTRAINT_SCHEMA   VARCHAR(64)
CONSTRAINT_NAME     VARCHAR(64)
CATALOG_NAME        VARCHAR(64)
SCHEMA_NAME         VARCHAR(64)
TABLE_NAME          VARCHAR(64)
COLUMN_NAME         VARCHAR(64)
CURSOR_NAME         VARCHAR(64)
MESSAGE_TEXT        VARCHAR(128)
MYSQL_ERRNO         SMALLINT UNSIGNED
</pre>
Набор символов для символьных элементов UTF-8.</p>

<p>Незаконно назначить <code>NULL</code> к единице информации условия в
<a href="#signal"><code>SIGNAL</code></a>.</p>
<p><a href="#signal"><code>SIGNAL</code></a> всегда определяет
<code>SQLSTATE</code>, непосредственно или косвенно, обращаясь к названному
условию, определенному с <code>SQLSTATE</code>.
Первые два символа <code>SQLSTATE</code> это его класс, он определяет
значение по умолчанию для единиц информации условия:</p>

<ul><li><p>Class = <code>'00'</code> (success)</p>
<p>Незаконный. <code>SQLSTATE</code>, которые начинаются с
<code>'00'</code> указывают на успех и недопустимы для
<a href="#signal"><code>SIGNAL</code></a>.</li>

<li>Class = <code>'01'</code> (warning)
<pre>
MESSAGE_TEXT = 'Unhandled user-defined warning condition';
MYSQL_ERRNO = <a href="error.htm#error_er_signal_warn"><code>ER_SIGNAL_WARN</code></a>
</pre></li>

<li>Class = <code>'02'</code> (not found)
<pre>
MESSAGE_TEXT = 'Unhandled user-defined not found condition';
MYSQL_ERRNO = <a href="error.htm#error_er_signal_not_found"><code>ER_SIGNAL_NOT_FOUND</code></a>
</pre></li>

<li>Class &gt; <code>'02'</code> (exception)
<pre>
MESSAGE_TEXT = 'Unhandled user-defined exception condition';
MYSQL_ERRNO = <a href="error.htm#error_er_signal_exception"><code>ER_SIGNAL_EXCEPTION</code></a>
</pre></li></ul>

<p>Для допустимых классов другие единицы информации условия
установлены следующим образом:
<pre>
CLASS_ORIGIN = SUBCLASS_ORIGIN = '';
CONSTRAINT_CATALOG = CONSTRAINT_SCHEMA = CONSTRAINT_NAME = '';
CATALOG_NAME = SCHEMA_NAME = TABLE_NAME = COLUMN_NAME = '';
CURSOR_NAME = '';
</pre>

Ошибочные значения, которые доступны после выполнения
<a href="#signal"><code>SIGNAL</code></a> передают значение
<code>SQLSTATE</code>, поднятое <a href="#signal"><code>SIGNAL</code>
</a> и его элементы <code>MESSAGE_TEXT</code> и <code>MYSQL_ERRNO</code>.
Эти значения доступны из C API:</p>

<ul><li><p><code>SQLSTATE</code>: вызывает
<a href="connect.htm#mysql-sqlstate"><code>mysql_sqlstate()</code></a>.</li>
<li><code>MYSQL_ERRNO</code>: вызывает
<a href="connect.htm#mysql-errno"><code>mysql_errno()</code></a>.</li>
<li><code>MESSAGE_TEXT</code>: вызывает
<a href="connect.htm#mysql-error"><code>mysql_error()</code></a>.
</p></li></ul>

<p>Из SQL вывод <a href="#show-warnings"><code>SHOW WARNINGS</code>
</a> и <a href="#show-errors"><code>SHOW ERRORS</code></a>
указывает значения <code>MYSQL_ERRNO</code> и <code>MESSAGE_TEXT</code> в
столбцах <code>Code</code> и <code>Message</code>.</p>

<p>Чтобы получить информацию из области диагностики, используйте
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a> (см.
<a href="#get-diagnostics">раздел 14.6.7.3</a>).</p>

<h5><a name="signal-effects"></a>14.6.7.5.2.
Эффект сигналов на обработчиках, курсорах и запросах</h5>
<p>Сигналы имеют различные эффекты на выполнение запросов в зависимости от
класса сигнала. Класс определяет, насколько серьезна ошибка. MySQL игнорирует
значение <a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>,
в частности, строгий режим SQL не имеет значения. MySQL также игнорирует
<code>IGNORE</code>: <a href="#signal"><code>SIGNAL</code></a> должен
поднять произведенную пользователем ошибку явно, таким образом, сигнал
никогда не игнорируется.</p>

<p>В следующих описаниях <span><span>unhandled</span></span> значит, что
никакой обработчик для сообщенного <code>SQLSTATE</code> не было определен с
<a href="#declare-handler"><code>DECLARE ... HANDLER</code></a>.</p>

<ul><li><p>Class = <code>'00'</code> (success)</p>
<p>Незаконный. <code>SQLSTATE</code>, которые начинаются с <code>'00'</code>,
указывают на успех и недопустимы для <a href="#signal"><code>SIGNAL
</code></a>.</li>

<li>Class = <code>'01'</code> (warning)</p>
<p>Значение <a href="server.htm#sysvar_warning_count"><code>warning_count
</code></a> увеличивается. <a href="#show-warnings"><code>SHOW
WARNINGS</code></a> показывает сигнал. <code>SQLWARNING</code> ловит сигнал.
Если сигнал не обработан в функции, запросы не заканчиваются.</li>

<li>Class = <code>'02'</code> (not found)</p>
<p><code>NOT FOUND</code> ловит сигнал. Нет никакого эффекта на курсоры. Если
сигнал не обработан в функции, запрос закончен.</li>

<li>Class &gt; <code>'02'</code> (exception)</p>
<p><code>SQLEXCEPTION</code> ловит сигнал.
Если сигнал не обработан в функции, запрос закончен.</li>

<li>Class = <code>'40'</code></p>
<p>Обработан как обычное исключение.</p></li></ul>
<p>Пример:
<pre>
mysql&gt; delimiter //
mysql&gt; CREATE FUNCTION f () RETURNS INT
    -&gt; BEGIN
    -&gt;   SIGNAL SQLSTATE '01234';  -- signal a warning
    -&gt;   RETURN 5;
    -&gt; END//
mysql&gt; delimiter ;
mysql&gt; CREATE TABLE t (s1 INT);
mysql&gt; INSERT INTO t VALUES (f());
</pre>

Результат состоит в том, что строка, содержащая 5, вставлена в таблицу
<code>t</code>. Предупреждение, которое сообщено, может быть рассмотрено с
<a href="#show-warnings"><code>SHOW WARNINGS</code></a>.</p>

<h4><a name="handler-scope"></a>14.6.7.6. Правила контекста для обработчиков
</h4>
<p>Сохраненная программа может включать обработчики, которые будут вызваны,
когда определенные условия происходят в пределах программы. Применимость
каждого обработчика зависит от его местоположения в пределах определения
программы и условий, которые это обрабатывает:</p>

<ul><li><p>Обработчик, объявленный в <a href="#begin-end"><code>BEGIN
... END</code></a>, находится в контексте только для запросов SQL после
деклараций обработчика в блоке. Если сам обработчик поднимает условие, он не
может обработать условие, не могут и любые другие обработчики, объявленные
в блоке. В следующем примере обработчики
<code>H1</code> и <code>H2</code>
находятся в контексте для условий, поднятых запросами
<em><code>stmt1</code></em> и <em><code>stmt2</code></em>. Но ни один из
<code>H1</code> и <code>H2</code> не находятся в контексте для условий,
поднятых в теле <code>H1</code> или <code>H2</code>.
<pre>
BEGIN -- outer block
  DECLARE EXIT HANDLER FOR ...;  -- handler H1
  DECLARE EXIT HANDLER FOR ...;  -- handler H2
  <em><code>stmt1</code></em>;
  <em><code>stmt2</code></em>;
END;
</pre></li>

<li>Обработчик находится в контексте только для блока, в котором это
объявлено, и не может быть активирован для условий, происходящих вне этого
блока. В следующем примере обработчик <code>H1</code> находится в контексте
для <em><code>stmt1</code></em> во внутреннем блоке, но не для
<em><code>stmt2</code></em> во внешнем блоке:
<pre>
BEGIN -- outer block
  BEGIN -- inner block
    DECLARE EXIT HANDLER FOR ...;  -- handler H1
    <em><code>stmt1</code></em>;
  END;
  <em><code>stmt2</code></em>;
END;
</pre></li>

<li>Обработчик может быть определенным или общим. Определенный обработчик для
кода ошибки MySQL, значения <code>SQLSTATE</code> или имени условия. Общий
обработчик для условия в классе <code>SQLWARNING</code>,
<code>SQLEXCEPTION</code> или <code>NOT FOUND</code>. Специфика условия
связана с приоритетом условия, как описано позже.</p></li></ul>

<p>Многократные обработчики могут быть объявлены в различных контекстах и с
различными спецификами. Например, мог бы быть определенный обработчик кода
ошибки MySQL во внешнем блоке и общий обработчик <code>SQLWARNING</code>
во внутреннем блоке. Или могли бы быть обработчики для определенного кода
ошибки MySQL и общий для класса <code>SQLWARNING</code> в том же самом блоке.
</p>

<p>Активирован ли обработчик, зависит не только от его собственного контекста
и значения условия, но и от того, что присутствуют другие обработчики. Когда
условие происходит в сохраненной программе, сервер ищет применимые
обработчики в текущем контексте (текущем блоке <a href="#begin-end">
<code>BEGIN ... END</code></a>). Если нет никаких применимых обработчиков,
поиск продолжается направленный наружу с обработчиками в каждом
последовательном контексте (блоке). Когда сервер находит один или более
применимых обработчиков в данном контексте, он выбирает среди них,
исходя из приоритета:</p>

<ul><li><p>Обработчик кода ошибки MySQL имеет
приоритет перед <code>SQLSTATE</code>.</li>
<li>Обработчик значения <code>SQLSTATE</code> имеет приоритет перед общим
обработчиком <code>SQLWARNING</code>, <code>SQLEXCEPTION</code>
или <code>NOT FOUND</code>.</li>

<li><code>SQLEXCEPTION</code> имеет приоритет перед
<code>SQLWARNING</code>.</li>
<li>Возможно иметь несколько применимых обработчиков с тем же самым
приоритетом. Например, запрос может произвести многократные предупреждения с
различными кодами ошибки, для каждого из которых существует определенный для
ошибки обработчик. В этом случае выбор обработчика сервером не определен и
может измениться в зависимости от обстоятельств, при
которых происходит условие.</p></li></ul>

<p>Одно значение правил выбора обработчика: если многократные применимые
обработчики происходят в различных контекстах, обработчики с самым местным
контекстом имеют приоритет перед обработчикам во внешних контекстах, даже для
более особых условий.</p>

<p>Если нет никакого соответствующего обработчика, когда условие происходит,
предпринятые меры зависят от класса условия:</p>
<ul><li><p><code>SQLEXCEPTION</code>: сохраненная программа заканчивается на
запросе, который поднял условие, как будто был <code>EXIT</code>.
Если программу вызвала другая сохраненная программа, условие, используя
правила выбора обработчика, относится к своим собственным обработчикам.</li>

<li><code>SQLWARNING</code>: программа продолжает выполняться, как
будто был <code>CONTINUE</code>.</li>
<li><code>NOT FOUND</code>: если условие обычно поднималось, действие
<code>CONTINUE</code>. Если это было поднято
<a href="#signal"><code>SIGNAL</code></a> или
<a href="#resignal"><code>RESIGNAL</code></a>, действие <code>EXIT
</code>.</p></li></ul>

<p>Следующие примеры демонстрируют, как MySQL применяет
правила выбора обработчика.</p>
<p>Эта процедура содержит два обработчика, один для определенного значения
<code>SQLSTATE</code> (<code>'42S02'</code>) происходит для попыток удалить
несуществующую таблицу, и один для общего класса <code>SQLEXCEPTION</code>:
<pre>
CREATE PROCEDURE p1()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
  SELECT 'SQLSTATE handler was activated' AS msg;
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  SELECT 'SQLEXCEPTION handler was activated' AS msg;
  DROP TABLE test.t;
END;
</pre>

Оба обработчика объявлены в том же самом блоке и имеют тот же самый контекст.
Однако, <code>SQLSTATE</code> имеет приоритет над <code>SQLEXCEPTION</code>,
так что, если таблица <code>t</code> не существует,
<a href="#drop-table"><code>DROP TABLE</code></a>
поднимает условие, которое активируется <code>SQLSTATE</code>:
<pre>
mysql&gt; CALL p1();
+--------------------------------+
| msg                            |
+--------------------------------+
| SQLSTATE handler was activated |
+--------------------------------+
</pre>

Эта процедура содержит те же самые два обработчика. Но на сей раз,
<a href="#drop-table"><code>DROP TABLE</code></a> и
<code>SQLEXCEPTION</code> находятся во внутреннем
блоке относительно <code>SQLSTATE</code>:
<pre>
CREATE PROCEDURE p2()
BEGIN -- outer block
  DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
  SELECT 'SQLSTATE handler was activated' AS msg;
  BEGIN -- inner block
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    SELECT 'SQLEXCEPTION handler was activated' AS msg;
    DROP TABLE test.t; -- occurs within inner block
  END;
END;
</pre>

В этом случае обработчик, который является более местным, где условие
происходит, имеет приоритет. <code>SQLEXCEPTION</code> активируется, даже при
том, что это является более общим, чем <code>SQLSTATE</code>:
<pre>
mysql&gt; CALL p2();
+------------------------------------+
| msg                                |
+------------------------------------+
| SQLEXCEPTION handler was activated |
+------------------------------------+
</pre>

В этой процедуре один из обработчиков объявлен в блоке, внутреннем к
контексту <a href="#drop-table"><code>DROP TABLE</code></a>:
<pre>
CREATE PROCEDURE p3()
BEGIN -- outer block
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
  SELECT 'SQLEXCEPTION handler was activated' AS msg;
  BEGIN -- inner block
    DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
    SELECT 'SQLSTATE handler was activated' AS msg;
  END;
  DROP TABLE test.t; -- occurs within outer block
END;
</pre>

Только <code>SQLEXCEPTION</code> применяется, потому что другой не находится
в контексте для условия, поднятого <a href="#drop-table"><code>
DROP TABLE</code></a>:
<pre>
mysql&gt; CALL p3();
+------------------------------------+
| msg                                |
+------------------------------------+
| SQLEXCEPTION handler was activated |
+------------------------------------+
</pre>

В этой процедуре оба обработчика объявлены в блоке, внутреннем к контексту
<a href="#drop-table"><code>DROP TABLE</code></a>:
<pre>
CREATE PROCEDURE p4()
BEGIN -- outer block
  BEGIN -- inner block
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    SELECT 'SQLEXCEPTION handler was activated' AS msg;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '42S02'
    SELECT 'SQLSTATE handler was activated' AS msg;
  END;
  DROP TABLE test.t; -- occurs within outer block
END;
</pre>

Никакой обработчик не применяется, потому что они не находятся в контексте
для <a href="#drop-table"><code>DROP TABLE</code></a>. Условие,
поднятое запросом, идет необработанное и заканчивает процедуру с ошибкой:
<pre>
mysql&gt; CALL p4();
ERROR 1051 (42S02): Unknown table 'test.t'
</pre>

<h4><a name="diagnostics-area"></a>14.6.7.7. Область диагностики MySQL</h4>
<p>Запросы SQL производят диагностическую информацию, которая заполняет
область диагностики. У стандартного SQL есть стек области диагностики,
содержащий область диагностики для каждого вложенного контекста выполнения.
Стандартный SQL также поддерживает <code>GET STACKED DIAGNOSTICS</code>
для того, чтобы обратиться к второй области диагностики во время выполнения
обработчика условия. MySQL поддерживает <code>STACKED</code> с MySQL 5.7.</p>

<p>Этот раздел описывает структуру области диагностики в MySQL, единицы
информации, признанные MySQL, как запросы, устанавливает область
диагностики и то, как области диагностики продвинуты в стек.</p>

<h5><a name="diagnostics-area-structure"></a>14.6.7.7.1.
Структура области диагностики</h5>
<p>Область диагностики содержит два вида информации:</p>

<ul><li><p>Информация о запросе, такая как число условий, которые произошли,
или количество затронутых строк.</li>
<li>Информация об условии, такая как код ошибки и сообщение.
Если запрос поднимает многократные условия, у этой части области диагностики
есть область условия для каждого. Если запрос не поднимает условий, эта часть
области диагностики пуста.</p></li></ul>

<p>Для запроса, который производит три условия, область диагностики содержит
запрос и информацию об условиях:
<pre>
Statement information:
  row count
  ... other statement information items ...
Condition area list:
  Condition area 1:
error code for condition 1
error message for condition 1
... other condition information items ...
  Condition area 2:
error code for condition 2:
error message for condition 2
... other condition information items ...
  Condition area 3:
error code for condition 3
error message for condition 3
... other condition information items ...
</pre>

<h5><a name="diagnostics-area-information-items"></a>14.6.7.7.2.
Элементы информации в области диагностики</h5>
<p>Область диагностики содержит единицы информации условия и запрос. Числовые
элементы это целые числа. Набор символов для символьных элементов UTF-8.
Никакой элемент не может быть <code>NULL</code>.
Если элемент запросы или условия не установлены запросом, который заполняет
область диагностики, ее значение 0 или пустая строка, в зависимости от
типа данных элемента.</p>

<p>Часть информации о запросе области диагностики содержит эти элементы:</p>
<ul><li><p><code>NUMBER</code>: Целое число, указывающее на число областей
условия, у которых есть информация.</li>

<li><code>ROW_COUNT</code>: Целое число, указывающее на число строк,
затронутых запросом. <code>ROW_COUNT</code> имеет то же самое значение, как
функция <a href="funct.htm#function_row-count"><code>ROW_COUNT()</code></a>
(см. <a href="funct.htm#information-functions">раздел 13.14</a>).
</p></li></ul>

<p>Часть информации об условии области диагностики содержит область условия
для каждого условия. Области условия пронумерованы от 1 до значения
<code>NUMBER</code>. Если <code>NUMBER</code> = 0,
нет никаких областей условия.</p>

<p>Каждая область условия содержит элементы в следующем списке. Все элементы
из стандарта SQL, кроме <code>MYSQL_ERRNO</code>, который является
расширением MySQL. Определения просят условия, произведенные не сигналом
(то есть, <a href="#signal"><code>SIGNAL</code></a> или
<a href="#resignal"><code>RESIGNAL</code></a>).
Для условий не от сигнала MySQL заполняет только те элементы условия,
которые не описаны как всегда пустые. Эффекты сигналов на области
условия описаны позже.</p>

<ul><li><p><code>CLASS_ORIGIN</code>: Строка, содержащая класс значения
<code>RETURNED_SQLSTATE</code>. Если <code>RETURNED_SQLSTATE</code>
начинается со значения класса, определенного в SQL ISO 9075-2 (раздел 24.1),
<code>CLASS_ORIGIN</code> = <code>'ISO 9075'</code>. Иначе
<code>CLASS_ORIGIN</code> = <code>'MySQL'</code>.</li>

<li><code>SUBCLASS_ORIGIN</code>: Строка, содержащая подкласс
<code>RETURNED_SQLSTATE</code>. Если <code>CLASS_ORIGIN</code> =
<code>'ISO 9075'</code> или <code>RETURNED_SQLSTATE</code> заканчивается на
<code>'000'</code>, <code>SUBCLASS_ORIGIN</code> = <code>'ISO 9075'</code>.
Иначе <code>SUBCLASS_ORIGIN</code> = <code>'MySQL'</code>.</li>

<li><code>RETURNED_SQLSTATE</code>: Строка, которая указывает значение
<code>SQLSTATE</code> для условия.</li>
<li><code>MESSAGE_TEXT</code>: Строка, которая указывает на сообщение об
ошибке для условия.</li>

<li><code>MYSQL_ERRNO</code>: Целое число, которое указывает на код ошибки
MySQL для условия.</li>
<li><code>CONSTRAINT_CATALOG</code>, <code>CONSTRAINT_SCHEMA</code>,
<code>CONSTRAINT_NAME</code>: Строки, которые указывают на каталог, схему и
название нарушенного ограничения. Они всегда пусты.</li>

<li><code>CATALOG_NAME</code>, <code>SCHEMA_NAME</code>,
<code>TABLE_NAME</code>, <code>COLUMN_NAME</code>:
Строки, которые указывают на каталог, схему, таблицу и столбец, связанные с
условием. Они всегда пусты.</li>
<li><code>CURSOR_NAME</code>: Строка, которая указывает на имя курсора.
Это всегда пусто.</p></li></ul>

<p>Для <code>RETURNED_SQLSTATE</code>, <code>MESSAGE_TEXT</code> и
<code>MYSQL_ERRNO</code> для особых ошибок см.
<a href="error.htm#error-messages-server">раздел B.3</a>.</p>

<p>Если <a href="#signal"><code>SIGNAL</code></a> (или
<a href="#resignal"><code>RESIGNAL</code></a>)
заполняет область диагностики, <code>SET</code> может назначить любую единицу
информации условия, кроме <code>RETURNED_SQLSTATE</code>.
<a href="#signal"><code>SIGNAL</code></a> также ставит
<code>RETURNED_SQLSTATE</code>, но не непосредственно в <code>SET</code>.
То значение прибывает из параметра <code>SQLSTATE</code>
<a href="#signal"><code>SIGNAL</code></a>.</p>

<p><a href="#signal"><code>SIGNAL</code></a>
также ставит единицы информации запроса. Если <CODE>number</CODE> = 1, то
<code>ROW_COUNT</code> = -1 для ошибок и 0 иначе.</p>

<h5><a name="diagnostics-area-populating"></a>14.6.7.7.3.
Как заполнена область диагностики</h5>
<p>Недиагностические запросы SQL заполняют область диагностики автоматически,
ее содержание может быть установлено явно с
<a href="#signal"><code>SIGNAL</code></a> и
<a href="#resignal"><code>RESIGNAL</code></a>.
Область диагностики может быть исследована с
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>, чтобы
извлечь определенные элементы, или с
<a href="#show-warnings"><code>SHOW WARNINGS</code></a> или
<a href="#show-errors"><code>SHOW ERRORS</code></a>, чтобы
видеть условия или ошибки.</p>

<p>Запросы SQL определяют область диагностики следующим образом:</p>
<ul><li><p>Когда сервер начинает выполнять запрос после парсинга, это очищает
область диагностики для недиагностических запросов. Диагностические запросы
не очищают область диагностики (<a href="#show-warnings"><code>SHOW
WARNINGS</code></a>, <a href="#show-errors"><code>SHOW ERRORS</code>
</a>, <a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>).
</li>

<li>Если запрос поднимает условие, область диагностики очищена от условий,
которые принадлежат более ранним запросам. Исключение: условия, поднятые
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a> и
<a href="#resignal"><code>RESIGNAL</code></a>
добавлены к области диагностики, не очищая ее.</p></li></ul>

<p>Таким образом, даже запрос, который обычно не очищает область диагностики,
когда начинает выполняться, очищает ее, если запрос поднимает условие.</p>
<p>Следующий пример показывает эффект различных запросов в области
диагностики, используя <a href="#show-warnings"><code>SHOW WARNINGS
</code></a>, чтобы вывести на экран информацию об условиях, сохраненных там.
</p>

<p><a href="#drop-table"><code>DROP TABLE</code></a> очищает область
диагностики и заполняет ее, когда условие происходит:
<pre>
mysql&gt; DROP TABLE IF EXISTS test.no_such_table;
Query OK, 0 rows affected, 1 warning (0.01 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+------------------------------------+
| Level | Code | Message                            |
+-------+------+------------------------------------+
| Note  | 1051 | Unknown table 'test.no_such_table' |
+-------+------+------------------------------------+
1 row in set (0.00 sec)
</pre>

<a href="#set-variable"><code>SET</code></a> производит ошибку, таким
образом, очищает и заполняет область диагностики:
<pre>
mysql&gt; SET @x = @@x;
ERROR 1193 (HY000): Unknown system variable 'x'

mysql&gt; SHOW WARNINGS;
+-------+------+-----------------------------+
| Level | Code | Message                     |
+-------+------+-----------------------------+
| Error | 1193 | Unknown system variable 'x' |
+-------+------+-----------------------------+
1 row in set (0.00 sec)
</pre>

<a href="#set-variable"><code>SET</code></a>
произвел единственное условие, таким образом, 1 это единственное допустимое
число условий для <a href="#get-diagnostics"><code>GET DIAGNOSTICS
</code></a>. Следующий запрос использует число условия 2, которое производит
предупреждение, добавленное к области диагностики, не очищая ее:
<pre>
mysql&gt; GET DIAGNOSTICS CONDITION 2 @p = MESSAGE_TEXT;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+------------------------------+
| Level | Code | Message                      |
+-------+------+------------------------------+
| Error | 1193 | Unknown system variable 'xx' |
| Error | 1753 | Invalid condition number     |
+-------+------+------------------------------+
2 rows in set (0.00 sec)
</pre>

Теперь есть два условия в области диагностики, таким образом, тот же самый
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a> работает:
<pre>
mysql&gt; GET DIAGNOSTICS CONDITION 2 @p = MESSAGE_TEXT;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SELECT @p;
+--------------------------+
| @p                       |
+--------------------------+
| Invalid condition number |
+--------------------------+
1 row in set (0.01 sec)
</pre>

<h5><a name="diagnostics-area-stack"></a>14.6.7.7.4.
Как работает стек области диагностики</h5>
<p>Когда происходит помещение области диагностики в стек, первая (текущая)
область диагностики становится второй областью диагностики, и новая текущая
область диагностики создается как копия этого. Области диагностики продвинуты
в стек и извлечены из стека при следующих обстоятельствах:</p>

<ul><li><p>Выполнение сохраненной программы.</p>
<p>Помещение происходит прежде, чем программа выполняется, а выталкивание
происходит позже. Если сохраненная программа заканчивается в то время, как
обработчики выполняются, может быть больше, чем одна область диагностики:
это происходит из-за исключения, для которого нет никаких соответствующих
обработчиков, или из-за
<a href="#return"><code>RETURN</code></a> в обработчике.</p>

<p>Любое предупреждение или ошибка во время выполнения сохраненной программы
добавлены к текущей области диагностики, за исключением того, что для
триггеров добавлены только ошибки. Когда сохраненная программа заканчивается,
вызывающий видит эти условия в ее текущей области диагностики.</li>

<li>Выполнение обработчика условия в пределах сохраненной программы.</p>
<p>Когда помещение в стек происходит в результате активации обработчика
условия, стековая область диагностики это область, которая была актуальна в
пределах сохраненной программы до того. Новая теперь текущая область
диагностики эир текущая область диагностики обработчика.
<a href="#get-diagnostics"><code>GET [CURRENT] DIAGNOSTICS</code></a>
и <a href="#get-diagnostics"><code>GET STACKED DIAGNOSTICS</code></a>
может использоваться в пределах обработчика, чтобы получить доступ к
содержанию текущей (обработчик) и стековой (сохраненная программа) области
диагностики. Первоначально они возвращают тот же самый результат, но
выполнение запросов в пределах обработчика изменяет текущую область
диагностики, очищаяя и устанавливая ее содержание согласно нормальным
правилам (см. <a href="#diagnostics-area-populating">раздел 14.6.7.7.3
</a>). Стековая область диагностики не может быть изменена выполнением
запросов в пределах обработчика, кроме <a href="#resignal"><code>
RESIGNAL</code></a>.</p>

<p>Если обработчик выполняется успешно, текущая (обработчик), область
диагностики возвращена, а стековая (сохраненная программа) область
диагностики снова становится текущей областью диагностики. Условия,
добавленные к области диагностики обработчика во время выполнения
обработчика, добавлены к текущей области диагностики.</li>

<li>Исполнение <a href="#resignal"><code>RESIGNAL</code></a>.</p>
<p><a href="#resignal"><code>RESIGNAL</code></a> передает информацию о
состоянии ошибки, которая доступна во время выполнения обработчика условия в
пределах составного запроса в сохраненной программе.
<a href="#resignal"><code>RESIGNAL</code></a>
может изменить некоторую или всю информацию перед передачей, изменяя стек
диагностики, как описано в <a href="#resignal">раздел 14.6.7.4</a>.
</p></li></ul>

<h5><a name="diagnostics-area-system-variables"></a>14.6.7.7.5.
Системные переменные, связанные с областью диагностики</h5>
<p>Определенные системные переменные управляют или связаны с некоторыми
аспектами области диагностики:</p>

<ul><li><p><a href="server.htm#sysvar_max_error_count"><code>max_error_count
</code></a> управляет числом областей условия в области диагностики. Если
больше условий происходит, MySQL тихо отказывается от информации для лишних
условий. Условия, добавленные <a href="#resignal"><code>RESIGNAL
</code></a>, всегда добавляются с удалением более старых условий по мере
необходимости, чтобы создать место.</li>

<li><a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>
указывает на число условий, которые произошли. Это включает ошибки,
предупреждения и примечания. Обычно <code>NUMBER</code> и
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>
равны. Однако, поскольку число произведенных условий превышает
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>,
значение <a href="server.htm#sysvar_warning_count"><code>warning_count</code>
</a> продолжает повышаться тогда, как <code>NUMBER</code> остается равным
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>,
потому что никакие дополнительные условия не сохранены в области диагностики.
</li>

<li><a href="server.htm#sysvar_error_count"><code>error_count</code></a>
указывает на число ошибок, которые произошли. Это значение включает
<span><span>not found</span></span>
и условия исключения, но исключает предупреждения и примечания. Как
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>, это
значение может превысить
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>.
</li>

<li>Если <a href="server.htm#sysvar_sql_notes"><code>sql_notes</code></a>=0,
примечания не сохранены и не увеличивают
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>.
</p></li></ul>

<p>Пример: Если <a href="server.htm#sysvar_max_error_count"><code>
max_error_count</code></a> = 10, область диагностики может содержать максимум
10 областей условия. Предположите, что запрос поднимает 20 условий, 12 из
которых являются ошибками. В этом случае область диагностики содержит первые
10 условий, <code>NUMBER</code> = 10,
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a> =
20, <a href="server.htm#sysvar_error_count"><code>error_count</code></a> =
12.</p>

<p>Изменения <a href="server.htm#sysvar_max_error_count"><code>
max_error_count</code></a> не имеют никакого эффекта до следующей попытки
изменить область диагностики. Если область диагностики содержит 10 областей
условия и <a href="server.htm#sysvar_max_error_count"><code>max_error_count
</code></a> = 5, это не имеет никакого непосредственного эффекта на размер
или контент области диагностики.</p>

<h2><a name="sql-syntax-server-administration"></a>14.7.
Запросы управления базами данных</h2>
<h3><a name="account-management-sql"></a>14.7.1.
Запросы управления учетными записями</h3>
<p>Информация учетной записи MySQL хранится в таблицах базы данных
<code>mysql</code>. Эта база данных и система управления доступом обсуждены в
<a href="server.htm">главе 6</a>.</p>

<p>Некоторые выпуски MySQL вводят изменения структуры таблиц, чтобы добавить
новые привилегии или особенности. Чтобы гарантировать, что Вы можете
использовать любые новые способности, обновите свои таблицы, чтобы иметь
текущую структуру всякий раз, когда Вы обновляете к новой версии MySQL. См.
<a href="programs.htm#mysql-upgrade">раздел 5.4.5</a>.</p>

<p>Когда <a href="server.htm#sysvar_read_only"><code>read_only</code></a>
включена, запросы управления требуют привилегии
<a href="security.html#priv_super"><code>SUPER</code></a> в дополнение к
любым другим необходимым привилегиям. Это потому, что они изменяют таблицы в
базе данных <code>mysql</code>.</p>

<h4><a name="alter-user"></a>14.7.1.1. ALTER USER</h4>
<pre>
ALTER USER [IF EXISTS]
<em><code>user_specification</code></em> [, <em><code>user_specification</code></em>] ...
[REQUIRE {NONE | <em><code>tls_option</code></em> [[AND] <em><code>tls_option</code></em>] ...}]
[WITH <em><code>resource_option</code></em> [<em><code>resource_option</code></em>] ...]
[<em><code>password_option</code></em> | <em><code>lock_option</code></em>] ...

ALTER USER [IF EXISTS]
USER() IDENTIFIED BY '<em><code>auth_string</code></em>'

ALTER USER [IF EXISTS]
<em><code>user</code></em> DEFAULT ROLE
{NONE | ALL | <em><code>role</code></em> [, <em><code>role</code></em> ] ...}

<em><code>user_specification</code></em>:
<em><code>user</code></em> [ <em><code>auth_option</code></em> ]

<em><code>auth_option</code></em>: {
IDENTIFIED BY '<em><code>auth_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em>
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> BY '<em><code>auth_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> AS '<em><code>hash_string</code></em>'
}

<em><code>tls_option</code></em>: {
   SSL
 | X509
 | CIPHER '<em><code>cipher</code></em>'
 | ISSUER '<em><code>issuer</code></em>'
 | SUBJECT '<em><code>subject</code></em>'
}

<em><code>resource_option</code></em>: {
MAX_QUERIES_PER_HOUR <em><code>count</code></em>
  | MAX_UPDATES_PER_HOUR <em><code>count</code></em>
  | MAX_CONNECTIONS_PER_HOUR <em><code>count</code></em>
  | MAX_USER_CONNECTIONS <em><code>count</code></em>
}

<em><code>password_option</code></em>: {
PASSWORD EXPIRE
  | PASSWORD EXPIRE DEFAULT
  | PASSWORD EXPIRE NEVER
  | PASSWORD EXPIRE INTERVAL <em><code>N</code></em> DAY
}

<em><code>lock_option</code></em>: {
ACCOUNT LOCK
  | ACCOUNT UNLOCK
}
</pre>

<a href="#alter-user"><code>ALTER USER</code></a>
изменяет учетные записи MySQL. Это позволяет аутентификации, SSL/TLS, пределу
ресурсов и свойствам пароля быть измененными для существующих учетных
записей и включает блокировку учетной записи.</p>

<p>За исключением <code>DEFAULT ROLE</code>,
<a href="#alter-user"><code>ALTER USER</code></a> требует глобальной
привилегии <a href="security.html#priv_create-user"><code>CREATE USER</code>
</a> или <a href="security.html#priv_update"><code>UPDATE</code></a>
для базы данных <code>mysql</code>. Для
<code>DEFAULT ROLE</code> <a href="#alter-user"><code>ALTER USER
</code></a> требует этих привилегий:</p>

<ul><li><p>Установить роль по умолчанию для другого пользователя: глобальная
<a href="security.html#priv_create-user"><code>CREATE USER</code></a>
или <a href="security.html#priv_update"><code>UPDATE</code></a> для
<code>mysql.default_roles</code>.</li>

<li>Установить роль значения по умолчанию для вас непосредственно: Никакие
специальные привилегии, пока роль, которую Вы хотите, как значение по
умолчанию, не предоставили Вам.</p></li></ul>

<p>Когда включена <a href="server.htm#sysvar_read_only"><code>read_only
</code></a>, <a href="#alter-user"><code>ALTER USER</code></a> требует
привилегию <a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Ошибка происходит, если Вы пытаетесь изменить учетную запись, которая не
существует. <code>IF EXISTS</code> заставляет запрос производить
предупреждение для каждой названной учетной записи, которая не
существует, а не ошибку.</p>

<p><a href="#alter-user"><code>ALTER USER</code></a> меняет строку
таблицы <code>mysql.user</code> для каждой затронутой учетной записи согласно
опциям, определенным в запросе. Неуказанные свойства сохраняют
свое текущее значение.</p>

<p>Пример 1: Измените пароль учетной записи. В результате пользователь должен
соединиться с названным паролем и выбрать новый в следующем соединении:
<pre>
ALTER USER 'jeffrey'@'localhost'
      IDENTIFIED BY '<em><code>new_password</code></em>' PASSWORD EXPIRE;
</pre>

Пример 2: Измените учетную запись для применения ее плагина аутентификации
<code>sha256_password</code> и данного пароля. Потребуйте, чтобы новый пароль
был выбран каждые 180 дней:
<pre>
ALTER USER 'jeffrey'@'localhost'
      IDENTIFIED WITH sha256_password BY '<em><code>new_password</code></em>'
      PASSWORD EXPIRE INTERVAL 180 DAY;
</pre>

Пример 3: Заблокируйте или разблокируйте учетную запись:
<pre>
ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK;
ALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK;
</pre>

Пример 4: Потребуйте, чтобы учетная запись использовала SSL и установите
предел 20 соединений в час:
<pre>
ALTER USER 'jeffrey'@'localhost'
      REQUIRE SSL WITH MAX_CONNECTIONS_PER_HOUR 20;
</pre>

<p>При некоторых обстоятельствах <a href="#alter-user"><code>ALTER
USER</code></a> может быть зарегистрирован в журналах сервера или на стороне
клиента в файле истории, например, в <code>~/.mysql_history</code>,
что означает, что пароли открытого текста могут быть считаны любым имеющим
доступ к этой информации. Для информации об условиях, при которых это
происходит для журналов сервера и как управлять этим см.
<a href="security.html#password-logging">раздел 7.1.2.3</a>.
Для подобной информации о клиентском журналировании см.
<a href="programs.htm#mysql-logging">раздел 5.5.1.3</a>.</p>

<p>Каждое имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>.
Если Вы определяете только часть имени пользователя имени учетной записи,
часть имени хоста <code>'%'</code>. Также возможно определить
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a> или
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>,
чтобы ссылаться на учетную запись, связанную с текущим сеансом.</p>

<p>Для одного синтаксиса учетная запись может быть определена с помощью
<a href="funct.htm#function_user"><code>USER()</code></a>:
<pre>
ALTER USER USER() IDENTIFIED BY '<em><code>auth_string</code></em>';
</pre>
Этот синтаксис позволяет изменить Ваш собственный пароль, не называя Вашу
учетную запись буквально.</p>

<p>Каждый параметр <em><code>user_specification</code></em>
состоит из имени учетной записи и дополнительного
<em><code>auth_option</code></em>, которое определяет, как учетная запись
подтверждает подлинность. Эти значения позволяют плагинам аутентификации
учетной записи быть определенными. Каждый
<em><code>auth_option</code></em> применяется <span><em>только</em></span> к
пользователю, названному перед этим.</p>

<p>После пользовательских технических требований запрос может включать опции
для SSL/TLS, предела ресурса, истечения пароля и свойств блокировки. Все эти
опции <span><em>глобальны</em></span> для запроса и относятся
<span><em>ко всем</em></span> названным пользователям.</p>

<p>Пример: Это запрос изменяет пароль для <code>jeffrey</code>, но не для
<code>jeanne</code>. Для обеих учетных записей соединения обязаны
использовать SSL, и каждая учетная запись может использоваться максимум для
двух одновременных соединений:
<pre>
ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY '<em><code>new_password</code></em>',
      'jeanne'@'localhost' REQUIRE SSL WITH MAX_USER_CONNECTIONS 2;
</pre>

В отсутствие особого типа опции учетная запись остается неизменной в этом
отношении. Например, без опции блокировки, статус блокировки учетной
записи не изменен.</p>

<p>Есть несколько аспектов <a href="#alter-user"><code>ALTER
USER</code></a>, описанных в этом разделе:</p>
<ul><li><p><a href="#alter-user-authentication">Опции аутентификации
</a></li>
<li><a href="#alter-user-tls">Опции SSL/TLS</a></li>
<li><a href="#alter-user-resource-limits">Опции предела ресурса</a>
</li>

<li><a href="#alter-user-password-expiration">Опции истечения пароля
</a></li>
<li><a href="#alter-user-account-locking">
Опции, блокирующие учетную запись</a></li>
<li><a href="#alter-user-role">Ролевые опции</a></p></li></ul>

<h5><a name="alter-user-authentication"></a>Опции аутентификации</h5>
<p>Имя учетной записи может сопровождаться опцией аутентификации, которая
определяет плагин аутентификации учетной записи:</p>

<ul><li><p><em><code>auth_plugin</code></em>
называет плагин аутентификации. Имя может быть заключенной в кавычки
буквальной строкой или именем. Имена сохранены в столбце
<code>plugin</code> таблицы <code>mysql.user</code>.</li>

<li><code>'<em><code>auth_string</code></em>'</code> или
<code>'<em><code>hash_string</code></em>'</code>
указывает пароль как открытый текст или хешированный в формате, ожидаемом
плагином аутентификации, соответственно. Данные сохранены в столбец
<code>authentication_string</code> таблицы <code>mysql.user</code>.
</p></li></ul>

<p><a href="#alter-user"><code>ALTER USER</code></a>
разрешает такие форматы <em><code>auth_option</code></em>:</p>
<ul><li><p><code>IDENTIFIED BY '<em><code>auth_string</code></em>'</code></p>
<p>Устанавливает плагин аутентификации учетной записи в плагин по умолчанию,
хеширует открытый текст <code>'<em><code>auth_string</code></em>'</code> и
и хранит результат в строке <code>mysql.user</code> учетной записи.</li>

<li><code>IDENTIFIED WITH <em><code>auth_plugin</code></em></code></p>
<p>Устанавливает плагин аутентификации учетной записи в
<em><code>auth_plugin</code></em>, очищает пароль к пустой строке (пароль
связан со старым плагином аутентификации, а не новым) и хранит результат в
строке <code>mysql.user</code> учетной записи.</p>
<p>Кроме того, пароль отмечен как истекший. Пользователь должен
выбрать новый, соединяясь.</li>

<li><code>IDENTIFIED WITH <em><code>auth_plugin</code></em> BY
'<em><code>auth_string</code></em>'</code></p>
<p>Устанавливает плагин аутентификации учетной записи в
<em><code>auth_plugin</code></em>, хеширует открытый текст
<code>'<em><code>auth_string</code></em>'</code>
и хранит результат в строке <code>mysql.user</code> учетной записи.</li>

<li><code>IDENTIFIED WITH <em><code>auth_plugin</code></em> AS
'<em><code>hash_string</code></em>'</code></p>
<p>Устанавливает плагин аутентификации учетной записи в
<em><code>auth_plugin</code></em>, берет хешированный пароль
<code>'<em><code>hash_string</code></em>'</code> как есть
и хранит результат в строке <code>mysql.user</code> учетной записи. Строка
пароля, как предполагается, уже хеширована в формате, требуемом плагином.
</p></li></ul>

<p>Плагин по умолчанию <code>mysql_native_password</code>, если переменная
<a href="server.htm#sysvar_default_authentication_plugin"><code>
default_authentication_plugin</code></a> не установлена иначе. Для описаний
каждого плагина см. <a href="security.html#authentication-plugins">раздел
7.5.1</a>.</p>

<p>Пример 1: Определите пароль как открытый текст, плагин
по умолчанию используется:
<pre>
ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';
</pre>

Пример 2: Определите плагин аутентификации, наряду со значением
пароля открытого текста:
<pre>
ALTER USER 'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password
      BY 'mypass';
</pre>

Пример 3: Определите плагин аутентификации, наряду с
хешированным значением пароля:
<pre>
ALTER USER 'jeffrey'@'localhost' IDENTIFIED WITH mysql_native_password
      AS '*6C8989366EAF75BB670AD8EA7A7FC1176A95CEF4';
</pre>

<h5><a name="alter-user-tls"></a>Опции SSL/TLS</h5>
<p>MySQL может проверить признаки сертификата X509
в дополнение к обычной аутентификации, которая основана на имени пользователя
и пароле. Для вводной информации об использовании SSL с MySQL см.
<a href="security.html#secure-connections">раздел 7.4</a>.</p>

<p>Чтобы определить опции SSL для учетной записи MySQL, используйте
<code>REQUIRE</code>, который определяет одну или
больше <em><code>tls_option</code></em>.</p>

<p><a href="#alter-user"><code>ALTER USER</code></a> разрешает
значения <em><code>tls_option</code></em>:</p>
<ul><li><p><code>NONE</code></p>
<p>Указывает, что у учетной записи нет никакого SSL или требований X509.
Незашифрованные соединения разрешены, если имя пользователя и пароль
допустимы. Однако, зашифрованные соединения могут также использоваться в
опции клиента, если у клиента есть надлежащий сертификат и ключевые файлы.
</p>

<p>Клиент должен определить только опцию
<a href="security.html#option_general_ssl-mode"><code>
--ssl-mode=REQUIRED</code></a>, чтобы получить зашифрованное соединение.
Попытка соединения терпит неудачу, если SSL недоступен.</li>

<li><code>SSL</code></p>
<p>Говорит серверу разрешать только зашифрованные соединения
для учетной записи.
<pre>
ALTER USER 'jeffrey'@'localhost' REQUIRE SSL;
</pre>

Клиент должен определить только
<a href="security.html#option_general_ssl-mode"><code>--ssl-mode=REQUIRED
</code></a>, чтобы получить зашифрованное соединение. Попытка соединения
терпит неудачу, если SSL недоступен.</li>

<li><code>X509</code></p>
<p>Требует, чтобы у клиента был допустимый сертификат, но точный сертификат,
выпускающий и объект не имеют значения. Единственное требование: должно быть
возможно проверить свою подпись с одним из сертификатов CA. Использование
сертификатов X509 всегда подразумевает шифрование, таким образом, опция
<code>SSL</code> является ненужной в этом случае.
<pre>
ALTER USER 'jeffrey'@'localhost' REQUIRE X509;
</pre>

Клиент должен определить опции
<a href="security.html#option_general_ssl-key"><code>--ssl-key</code></a> и
<a href="security.html#option_general_ssl-cert"><code>--ssl-cert</code></a>,
чтобы соединиться. Это рекомендуется, но не требуется:
<a href="security.html#option_general_ssl-ca"><code>--ssl-ca</code></a>
также будет определена, чтобы публичный сертификат сервера
мог быть проверен. Это истина для <code>ISSUER</code> и <code>SUBJECT</code>,
так как опции <code>REQUIRE</code> подразумевают требования
<code>X509</code>.</li>

<li><code>ISSUER '<em><code>issuer</code></em>'</code></p>
<p>Устанавливает ограничение для попыток соединения, которыми клиент должен
представить допустимый сертификат X509, выпущенн CA
<code>'<em><code>issuer</code></em>'</code>.
Если клиент представляет сертификат, который допустим, но имеет иного
выпускающего, сервер отклоняет соединение. Использование серптификатов X509
всегда подразумевает шифрование, таким образом, опция
<code>SSL</code> не нужна.</p>

<p>Так как <code>ISSUER</code> подразумевает требования <code>X509</code>,
клиент должен определить
<a href="security.html#option_general_ssl-key"><code>--ssl-key</code></a> и
<a href="security.html#option_general_ssl-cert"><code>--ssl-cert</code></a>.
Это рекомендуется, но не требуется:
<a href="security.html#option_general_ssl-ca"><code>--ssl-ca</code></a>
также будет определена, чтобы публичный сертификат сервера мог быть проверен.
<pre>
ALTER USER 'jeffrey'@'localhost'
      REQUIRE ISSUER '/C=SE/ST=Stockholm/L=Stockholm/
      O=MySQL/CN=CA/emailAddress=ca@example.com';
</pre></li>

<li><code>SUBJECT '<em><code>subject</code></em>'</code></p>
<p>Устанавливает ограничение для попыток соединения, что клиент должен
представить допустимый сертификат X509, содержащий <em><code>subject</code>
</em>. Если клиент представляет сертификат, который допустим, но имеет иной
subject, сервер отклоняет соединение. Использование сертификатов X509 всегда
подразумевает шифрование, таким образом, опция <code>SSL</code> является
ненужной в этом случае.</p>

<p>Поскольку <code>SUBJECT</code> подразумевает требования <code>X509</code>,
клиент должен определить
<a href="security.html#option_general_ssl-key"><code>--ssl-key</code></a> и
<a href="security.html#option_general_ssl-cert"><code>--ssl-cert</code></a.
Это рекомендуется, но не требуется:
<a href="security.html#option_general_ssl-ca"><code>--ssl-ca</code></a>
также будет определена, чтобы публичный сертификат сервера мог быть проверен.
<pre>
ALTER USER 'jeffrey'@'localhost'
      REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/
      O=MySQL demo client certificate/
      CN=client/emailAddress=client@example.com';
</pre>

MySQL делает простое строковое сравнение
<code>'<em><code>subject</code></em>'</code>
со значением в сертификате, таким образом, регистр символов и порядок
составляющих должны быть даны точно как существующие в сертификате.</p>
<p>Относительно <code>emailAddress</code> см. примечание в
описании <code>REQUIRE ISSUER</code>.</p></li>

<li><code>CIPHER '<em><code>cipher</code></em>'</code></p>
<p>Просит определенный метод шифра для соединений. Эта опция необходима,
чтобы гарантировать, что шифры и длины ключа достаточной силы используются.
Сам SSL может быть слабым, если используются старые алгоритмы, использующие
короткие ключи шифрования.
<pre>
ALTER USER 'jeffrey'@'localhost' REQUIRE CIPHER 'EDH-RSA-DES-CBC3-SHA';
</pre></li></ul>

<p><code>SUBJECT</code>, <code>ISSUER</code> и <code>CIPHER</code>
могут быть объединены в <code>REQUIRE</code>:
<pre>
ALTER USER 'jeffrey'@'localhost'
      REQUIRE SUBJECT '/C=SE/ST=Stockholm/L=Stockholm/
      O=MySQL demo client certificate/
      CN=client/emailAddress=client@example.com' AND
      ISSUER '/C=SE/ST=Stockholm/L=Stockholm/
      O=MySQL/CN=CA/emailAddress=ca@example.com' AND
      CIPHER 'EDH-RSA-DES-CBC3-SHA';
</pre>

Порядок опций не имеет значения, но никакая опция не может быть определена
дважды. <code>AND</code> является дополнительным
между опциями <code>REQUIRE</code>.</p>

<h5><a name="alter-user-resource-limits"></a>Опции предела ресурса</h5>
<p>Возможно установить границы использования ресурсов сервера учетной
записью, как обсуждено в <a href="security.html#user-resources">разделе
7.3.5</a>. Чтобы сделать так, используйте <code>WITH</code>, который
определяет одно или больше значений <em><code>resource_option</code></em>:
</p>

<p><a href="#alter-user"><code>ALTER USER</code></a> допускает такие
значения <em><code>resource_option</code></em>:</p>
<ul><li><p><code>MAX_QUERIES_PER_HOUR <em><code>count</code></em></code>,
<code>MAX_UPDATES_PER_HOUR <em><code>count</code></em></code>,
<code>MAX_CONNECTIONS_PER_HOUR <em><code>count</code></em></code></p>
<p>Эти опции ограничивают число запросов, обновлений и соединений с сервером,
разрешенных этой учетной записи во время любого данного одночасового периода.
Запросы, для которых результаты поданы от кэша запроса, не считаются.
Если <em><code>count</code></em> = <code>0</code> (по умолчанию), это
означает, что нет никакого ограничения для учетной записи.</li>

<li><code>MAX_USER_CONNECTIONS <em><code>count</code></em></code></p>
<p>Ограничивает максимальное количество одновременных соединений с сервером
для учетной записи. Отличное от нуля <em><code>count</code></em>
определяет предел для учетной записи явно. Если
<em><code>count</code></em> = <code>0</code> (по умолчанию),
сервер определяет число одновременных соединений для учетной записи от
глобального значения <a href="server.htm#sysvar_max_user_connections">
<code>max_user_connections</code></a>. Если
<a href="server.htm#sysvar_max_user_connections"><code>max_user_connections
</code></a> тоже 0, нет никакого предела для учетной записи.</p></li></ul>

<p>Пример:
<pre>
ALTER USER 'jeffrey'@'localhost'
      WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;
</pre>
Если данный предел ресурса определен многократно, последний
случай имеет приоритет.</p>

<h5><a name="alter-user-password-expiration"></a>Опции истечения пароля</h5>
<p><a href="#alter-user"><code>ALTER USER</code></a>
поддерживает несколько <em><code>password_option</code></em>
для управления истечением пароля, чтобы истечь пароль учетной записи или
установить его <span><em>логику</em></span>. Стратегические опции не истекают
пароль, вместо этого они определяют, как сервер применяет автоматическое
истечение к учетной записи (см.
<a href="security.html#password-expiration-policy">раздел 7.3.7</a>).</p>

<p>Время жизни пароля оценено с даты и времени последнего изменения.</p>
<p><a href="#alter-user"><code>ALTER USER</code></a> позволяет
эти значения <em><code>password_option</code></em>:</p>

<ul><li><p><code>PASSWORD EXPIRE</code></p>
<p>Истекает пароль учетной записи.
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;
</pre></li>

<li><code>PASSWORD EXPIRE DEFAULT</code></p>
<p>Устанавливает учетную запись так, чтобы глобальная политика истечения
применилась, как определено
<a href="server.htm#sysvar_default_password_lifetime"><code>
default_password_lifetime</code></a>.
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;
</pre></li>

<li><code>PASSWORD EXPIRE NEVER</code></p>
<p>Отключает истечение пароля для учетной записи так, чтобы ее пароль
никогда не истек.
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;
</pre></li>

<li><code>PASSWORD EXPIRE INTERVAL <em><code>N</code></em> DAY</code></p>
<p>Устанавливает жизнь пароля учетной записи в <em><code>N</code></em> дней.
Этот запрос требует, чтобы пароль был изменен каждые 180 дней:
<pre>
ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 180 DAY;
</pre></li></ul>

<p>Если многократные опции истечения пароля определены,
последняя имеет приоритет.</p>
<p>Сеанс клиента работает в ограниченном режиме, если пароль учетной записи
истек вручную или автоматически. В ограниченном режиме операции в пределах
сеанса приводят к ошибке, пока пользователь не устанавливает новый пароль
учетной записи. См. <a href="security.html#password-expiration-policy">раздел
7.3.7</a>.</p>
<p>Возможно <span><span>сбросить</span></span>, устанавливая это в его
текущее значение. Предпочтительно выбрать иной пароль.</p>

<h5><a name="alter-user-account-locking"></a>Блокирующие учетную запись опции
</h5>
<p>MySQL поддерживает блокировку учетной записи через
<code>ACCOUNT LOCK</code> и <code>ACCOUNT UNLOCK</code>,
которые определяют статус блокировки для учетной записи. Для дополнительного
обсуждения см. <a href="security.html#account-locking">раздел 7.3.11</a>.</p>
<p>Если многократные блокирующие учетную запись опции определены,
последняя имеет приоритет.</p>

<h5><a name="alter-user-role"></a>Ролевые опции</h5>
<p><a href="#alter-user"><code>ALTER USER ... DEFAULT ROLE</code></a>
определяет, какие роли становятся активными, когда запрос
<a href="#set-role"><code>SET ROLE DEFAULT</code></a>
выполнен во время сеанса для данного пользователя. После успешной
пользовательской аутентификации сервер неявно выполняет
<a href="#set-role"><code>SET ROLE DEFAULT</code></a>.</p>

<p>Следующий запрос назначает <code>'joe'@'10.0.0.1'</code>
роли по умолчанию <code>administrator</code> и <code>developer</code>:
<pre>
ALTER USER 'joe'@'10.0.0.1' DEFAULT ROLE administrator, developer;
</pre>

<h4><a name="create-role"></a>14.7.1.2. CREATE ROLE</h4>
<pre>
CREATE ROLE [IF NOT EXISTS] <em><code>role</code></em> [, <em><code>role</code></em> ] ...
</pre>

<a href="#create-role"><code>CREATE ROLE</code></a>
создает одну или более ролей, которые называют наборами привилегий. Чтобы
использовать это запрос, у Вас должна быть глобальная привилегия
<a href="security.html#priv_create-role"><code>CREATE ROLE</code></a> или
<a href="security.html#priv_create-user"><code>CREATE USER</code></a>.</p>

<p>Ошибка происходит, если Вы пытаетесь создать роль, которая уже существует.
<code>IF NOT EXISTS</code> заменяет ошибку предупреждением.</p>
<p>Если <a href="#create-role"><code>CREATE ROLE</code></a>
называет многократные роли, это преуспевает для всех названных ролей или
откатывается и не имеет никакого эффекта, если ошибка происходит.</p>

<p>Роль при создании заблокирована, не имеет никакого пароля, и ей назначен
плагин аутентификации по умолчанию.</p>
<p>Для ролевых примеров использования см.
<a href="security.html#roles">раздел 7.3.4</a>.</p>

<h4><a name="create-user"></a>14.7.1.3. CREATE USER</h4>
<pre>
CREATE USER [IF NOT EXISTS]
<em><code>user_specification</code></em> [, <em><code>user_specification</code></em>] ...
[REQUIRE {NONE | <em><code>tls_option</code></em> [[AND] <em><code>tls_option</code></em>] ...}]
[WITH <em><code>resource_option</code></em> [<em><code>resource_option</code></em>] ...]
[<em><code>password_option</code></em> | <em><code>lock_option</code></em>] ...

<em><code>user_specification</code></em>:
<em><code>user</code></em> [ <em><code>auth_option</code></em> ]

<em><code>auth_option</code></em>: {
IDENTIFIED BY '<em><code>auth_string</code></em>'
  | IDENTIFIED BY PASSWORD '<em><code>hash_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em>
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> BY '<em><code>auth_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> AS '<em><code>hash_string</code></em>'
}

<em><code>tls_option</code></em>: {
   SSL
 | X509
 | CIPHER '<em><code>cipher</code></em>'
 | ISSUER '<em><code>issuer</code></em>'
 | SUBJECT '<em><code>subject</code></em>'
}

<em><code>resource_option</code></em>: {
MAX_QUERIES_PER_HOUR <em><code>count</code></em>
  | MAX_UPDATES_PER_HOUR <em><code>count</code></em>
  | MAX_CONNECTIONS_PER_HOUR <em><code>count</code></em>
  | MAX_USER_CONNECTIONS <em><code>count</code></em>
}

<em><code>password_option</code></em>: {
PASSWORD EXPIRE
  | PASSWORD EXPIRE DEFAULT
  | PASSWORD EXPIRE NEVER
  | PASSWORD EXPIRE INTERVAL <em><code>N</code></em> DAY
}

<em><code>lock_option</code></em>: {
ACCOUNT LOCK
  | ACCOUNT UNLOCK
}
</pre>

<a href="#create-user"><code>CREATE USER</code></a>
создает новые учетные записи MySQL. Это позволяет аутентификации, SSL/TLS,
пределу ресурса и свойствам истечения пароля быть установленными для новых
учетных записей, а также управляет, заблокированы ли учетные записи
первоначально или нет.</p>

<p>У учетной записи когда создается нет никаких привилегий и роль
по умолчанию <code>NONE</code>.</p>
<p>Чтобы использовать <a href="#create-user"><code>CREATE USER</code>
</a>, Вы должны иметь глобальную привилегию
<a href="security.html#priv_create-user"><code>CREATE USER</code></a> или
привилегию <a href="security.html#priv_insert"><code>INSERT</code></a>
для базы данных <code>mysql</code>. При включенной переменной
<a href="server.htm#sysvar_read_only"><code>read_only</code></a>
<a href="#create-user"><code>CREATE USER</code></a> дополнительно
требует <a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Ошибка происходит, если Вы пытаетесь создать учетную запись, которая уже
существует. <code>IF NOT EXISTS</code> превращает ошибку в предупреждение.
</p>
<p>Для каждой учетной записи <a href="#create-user"><code>CREATE USER
</code></a> создает новую строку в таблице <code>mysql.user</code>.
Строка отражает свойства, определенные в запросе. Неуказанные свойства
установлены в их значения по умолчанию.</p>

<p>Пример 1: Создайте учетную запись, которая использует плагин
аутентификации по умолчанию и данный пароль. Отметьте пароль как истекший,
чтобы пользователь выбрал новый в первом соединении с сервером:
<pre>
CREATE USER 'jeffrey'@'localhost'
       IDENTIFIED BY '<em><code>new_password</code></em>' PASSWORD EXPIRE;
</pre>

Пример 2: Создайте учетную запись, которая использует
плагин аутентификации <code>sha256_password</code>
и данный пароль. Потребуйте, чтобы новый пароль был выбран каждые 180 дней:
<pre>
CREATE USER 'jeffrey'@'localhost'
       IDENTIFIED WITH sha256_password BY '<em><code>new_password</code></em>'
       PASSWORD EXPIRE INTERVAL 180 DAY;
</pre>

<p>При некоторых обстоятельствах <a href="#create-user"><code>CREATE
USER</code></a> может быть зарегистрирован в журналах сервера или на стороне
клиента в файле истории <code>~/.mysql_history</code>, что означает, что
пароли открытого текста могут быть считаны любым имеющим доступ к этой
информации. Для информации об условиях, при которых это происходит для
журналов сервера и как управлять ею, см.
<a href="security.html#password-logging">раздел 7.1.2.3</a>.</p>

<p>См. разделы <a href="security.html#assigning-passwords">7.3.6</a> и
<a href="security.html#pluggable-authentication">7.3.9</a>.</p>
<p>Каждое имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>:
<pre>
CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';
</pre>
Если Вы определяете только часть имени пользователя имени учетной записи,
часть имени хоста <code>'%'</code>.</p>

<p>Каждый <em><code>user_specification</code></em>
состоит из имени учетной записи и дополнительного значения
<em><code>auth_option</code></em>, которое определяет, как учетная запись
подтверждает подлинность. Эти значения позволяют плагинам аутентификации
учетной записи быть определенными. Каждое значение
<em><code>auth_option</code></em> применяется <span><em>только</em></span>
к пользователю, названному перед этим.</p>

<p>После пользовательских технических требований запрос может включать опции
для SSL/TLS, предела ресурса, истечения пароля и свойств блокировки. Все эти
опции <span><em>глобальны</em></span> для запроса и относятся <span><em>ко
всем</em></span> названным пользователям.</p>

<p>Пример: этот запрос создает две учетных записи, каждую с плагином
аутентификации по умолчанию и паролем. Для обеих учетных записей соединения
должны быть сделаны, используя допустимый сертификат X509, и разрешены до 60
запросов в час. Обе учетных записи заблокированы первоначально
и не могут использоваться, пока администратор не разблокирует их:
<pre>
CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY '<em><code>new_password1</code></em>',
       'jeanne'@'localhost' IDENTIFIED BY '<em><code>new_password2</code></em>'
       REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60 ACCOUNT LOCK;
</pre>
Для опущенных опций используются эти значения по умолчанию:</p>

<ul><li><p>Аутентификация: плагин аутентификации, определенный
<a href="server.htm#sysvar_default_authentication_plugin"><code>
default_authentication_plugin</code></a> и пустой пароль.</li>

<li>SSL/TLS: <code>NONE</code>.</li>
<li>Пределы ресурса: не ограничено.</li>
<li>Истечение пароля: <code>PASSWORD EXPIRE DEFAULT</code>.</li>
<li>Блокировка учетной записи: <code>ACCOUNT UNLOCK</code>.</p></li></ul>

<p>Есть несколько аспектов <a href="#create-user">
<code>CREATE USER</code></a>:</p>
<ul><li><p>Опции аутентификации</li>
<li>Опции SSL/TLS</li>
<li>Опции предела ресурса</li>
<li>Опции истечения пароля</li>
<li>Блокирующие учетную запись опции</p></li></ul>
<p>Все они в целом аналогичны описанным для команды
<a href="#alter-user"><code>ALTER USER</code></a>.</p>

<h4><a name="drop-role"></a>14.7.1.4. DROP ROLE</h4>
<pre>
DROP ROLE [IF EXISTS] <em><code>role</code></em> [, <em><code>role</code></em> ] ...
</pre>

<a href="#drop-role"><code>DROP ROLE</code></a>
удаляет одну или более ролей (наборов привилегий). Чтобы использовать этот
запрос, у Вас должна быть глобальная привилегия
<a href="security.html#priv_drop-role"><code>DROP ROLE</code></a> или
привилегия <a href="security.html#priv_create-user"><code>CREATE USER
</code></a>.</p>

<p>Ошибка происходит, если Вы пытаетесь удалить роль, которая не существует.
<code>IF EXISTS</code> заставляет запрос производить предупреждение, а не
ошибку для каждой названной роли, которая не существует.</p>

<p>Если <a href="#drop-role"><code>DROP ROLE</code></a>
названо много ролей, это преуспевает для всех названных ролей или
откатывается и не имеет никакого эффекта, если ошибка происходит.</p>

<p>Удаленная роль автоматически отменяется от любой учетной записи
пользователя, которой включали роль. Привилегии для любого текущего сеанса
для такой учетной записи скорректированы для следующего запроса,
выполненного в пределах сеанса.</p>

<h4><a name="drop-user"></a>14.7.1.5. DROP USER</h4>
<pre>
DROP USER [IF EXISTS] <em><code>user</code></em> [, <em><code>user</code></em>] ...
</pre>

<a href="#drop-user"><code>DROP USER</code></a>
удаляет одну или более учетных записей MySQL и их привилегии.
Это удаляет строки привилегии для учетной записи из всех таблиц.</p>

<p>Для применения <a href="#drop-user"><code>DROP USER</code></a>
Вы должны иметь глобальную привилегию
<a href="security.html#priv_create-user"><code>CREATE USER</code></a>
или привилегию <a href="security.html#priv_delete"><code>DELETE</code></a>
для базы данных <code>mysql</code>. При включенной опции
<a href="server.htm#sysvar_read_only"><code>read_only</code></a>
<a href="#drop-user"><code>DROP USER</code></a> дополнительно
требует привилегию <a href="security.html#priv_super"><code>SUPER</code></a>.
</p>

<p>Ошибка происходит, если Вы пытаетесь удалить учетную запись, которая не
существует. <code>IF EXISTS</code> превращает ошибку в предупреждение.</p>
<p>Каждое имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>:
<pre>
DROP USER 'jeffrey'@'localhost';
</pre>
Если Вы определяете только часть имени пользователя имени учетной записи,
часть имени хоста <code>'%'</code>.</p>

<p><a href="#drop-user"><code>DROP USER</code></a>
автоматически не закрывает открытых пользовательских сеансов. Когда
пользователь с открытым сеансом удален, запрос не вступает в силу до закрытия
сеанса пользователя. Как только сеанс закрыт, пользователь удален, и
следующая попытка пользователя войти в систему потерпит неудачу.</p>

<p><a href="#drop-user"><code>DROP USER</code></a>
автоматически не удаляет базы данных или объекты в их пределах, которых
создал старый пользователь. Это включает сохраненные программы или
представления, для которых <code>DEFINER</code> это удаленный пользователь.
Попытки получить доступ к таким объектам могут произвести ошибку, если они
выполняются в контексте безопасности определителя.
Для информации о контексте безопасности см.
<a href="stored.htm#stored-programs-security">раздел 21.6</a>.</p>

<h4><a name="grant"></a>14.7.1.6. GRANT</h4>
<pre>
GRANT
<em><code>priv_type</code></em> [(<em><code>column_list</code></em>)]
  [, <em><code>priv_type</code></em> [(<em><code>column_list</code></em>)]] ...
ON [<em><code>object_type</code></em>] <em><code>priv_level</code></em>
TO <em><code>user_specification</code></em> [, <em><code>user_specification</code></em>] ...
[REQUIRE {NONE | <em><code>tls_option</code></em> [[AND] <em><code>tls_option</code></em>] ...}]
[WITH {GRANT OPTION | <em><code>resource_option</code></em>} ...]

GRANT PROXY ON <em><code>user_specification</code></em>
TO <em><code>user_specification</code></em> [, <em><code>user_specification</code></em>] ...
[WITH GRANT OPTION]

GRANT <em><code>role</code></em> [, <em><code>role</code></em>] ...
TO <em><code>user</code></em> [, <em><code>user</code></em>] ...
[WITH ADMIN OPTION]

<em><code>object_type</code></em>: {
TABLE
  | FUNCTION
  | PROCEDURE
}

<em><code>priv_level</code></em>: {
*
  | *.*
  | <em><code>db_name</code></em>.*
  | <em><code>db_name.tbl_name</code></em>
  | <em><code>tbl_name</code></em>
  | <em><code>db_name</code></em>.<em><code>routine_name</code></em>
}

<em><code>user_specification</code></em>:
<em><code>user</code></em> [ <em><code>auth_option</code></em> ]
<em><code>auth_option</code></em>: {
IDENTIFIED BY '<em><code>auth_string</code></em>'
  | IDENTIFIED BY PASSWORD '<em><code>hash_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em>
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> BY '<em><code>auth_string</code></em>'
  | IDENTIFIED WITH <em><code>auth_plugin</code></em> AS '<em><code>hash_string</code></em>'
}

<em><code>tls_option</code></em>: {
SSL
  | X509
  | CIPHER '<em><code>cipher</code></em>'
  | ISSUER '<em><code>issuer</code></em>'
  | SUBJECT '<em><code>subject</code></em>'
}

<em><code>resource_option</code></em>: {
  | MAX_QUERIES_PER_HOUR <em><code>count</code></em>
  | MAX_UPDATES_PER_HOUR <em><code>count</code></em>
  | MAX_CONNECTIONS_PER_HOUR <em><code>count</code></em>
  | MAX_USER_CONNECTIONS <em><code>count</code></em>
}
</pre>

<a href="#grant"><code>GRANT</code></a> позволяет системным
администраторам предоставить привилегии и роли, которые они могут
предоставить учетным записям пользователя и ролям.
Эти ограничения синтаксиса применяются:</p>

<ul><li><p><a href="#grant"><code>GRANT</code></a>
не может смешать предоставление привилегий и ролей в том же самом запросе.
Данный <a href="#grant"><code>GRANT</code></a> должен предоставить
привилегии или роли.</li>

<li><code>ON</code> различает, предоставляет ли запрос привилегии или роли:
</p>
<ul><li><p>С <code>ON</code> запрос предоставляет привилегии.</li>
<li>Без <code>ON</code> запрос предоставляет роли.</p></li></ul></li></ul>

<p>Разрешено назначить привилегии и роли учетной записи, но Вы должны
использовать отдельные запросы <a href="#grant"><code>GRANT</code></a>
для ролей и привилегий.</p>

<p>Чтобы использовать <a href="#grant"><code>GRANT</code></a> Вы
должны иметь привилегию <a href="security.html#priv_grant-option"><code>GRANT
OPTION</code></a> и у Вас должны быть привилегии, которые Вы предоставляете.
Когда включена переменная <a href="server.htm#sysvar_read_only"><code>
read_only</code></a>, <a href="#grant"><code>GRANT</code></a>
дополнительно требует привилегию <a href="security.html#priv_super"><code>
SUPER</code></a>.</p>

<p><a href="#revoke"><code>REVOKE</code></a> связан с
<a href="#grant"><code>GRANT</code></a> и позволяет администраторам
удалить привилегии учетной записи. См.
<a href="#revoke">раздел 14.7.1.8</a>.</p>

<p>Обычно администратор базы данных сначала использует
<a href="#create-user"><code>CREATE USER</code></a>, чтобы
создать учетную запись и определить такие ее характеристики, как пароль,
использует ли это безопасные соединения и ограничения на доступ к ресурсам
сервера, затем использует <a href="#grant"><code>GRANT</code></a>,
чтобы определить привилегии. <a href="#alter-user"><code>ALTER USER
</code></a> может использоваться, чтобы изменить характеристики существующих
учетных записей. Например:
<pre>
CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';
GRANT ALL ON db1.* TO 'jeffrey'@'localhost';
GRANT SELECT ON db2.invoice TO 'jeffrey'@'localhost';
ALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90;
</pre>

<p>Примеры, показанные здесь, не включают <code>IDENTIFIED</code>.
Предполагается, что Вы устанавливаете пароли с
<a href="#create-user"><code>CREATE USER</code></a> во время создания
учетной записи, чтобы избежать создавать опасные учетные записи.</p>

<p>Если учетную запись называют в <a href="#grant"><code>GRANT</code>
</a>, но она не существует, <a href="#grant"><code>GRANT</code></a>
может создать это при условиях, описанных позже в обсуждении режима SQL
<a href="server.htm#sqlmode_no_auto_create_user"><code>NO_AUTO_CREATE_USER
</code></a>. Также возможно использовать <a href="#grant"><code>GRANT
</code></a>, чтобы определить такие характеристики, как использует ли
учетная запись безопасные соединения и пределы доступа к ресурсам сервера.
</p>

<p>Однако, использование <a href="#grant"><code>GRANT</code></a>,
чтобы создать учетные записи или определить характеристики устарело. Вместо
этого выполните эти задачи с использованием <a href="#create-user">
<code>CREATE USER</code></a> или <a href="#alter-user"><code>ALTER
USER</code></a>.</p>

<p>Из <a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
<a href="#grant"><code>GRANT</code></a> отвечает
<code>Query OK, 0 rows affected</code>, когда выполнен успешно. Чтобы
определить, какие привилегии даны, надо использовать
<a href="#show-grants"><code>SHOW GRANTS</code></a>. См.
<a href="#show-grants">раздел 14.7.5.21</a>.</p>

<p>Есть несколько аспектов
<a href="#grant"><code>GRANT</code></a>:</p>
<ul><li><p><a href="#grant-privileges">Привилегии, поддержанные MySQL
</a></li>
<li><a href="#grant-global-privileges">Глобальные привилегии</a></li>
<li><a href="#grant-database-privileges">Привилегии базы данных</a>
</li>
<li><a href="#grant-table-privileges">Табличные привилегии</a></li>
<li><a href="#grant-column-privileges">Привилегии столбца</a></li>
<li><a href="#grant-routine-privileges">
Привилегии сохраненных подпрограмм</a></li>
<li><a href="#grant-proxy-privileges">
Пользовательские привилегии Proxy</a></li>
<li><a href="#grant-accounts-passwords">Имена учетной записи и пароли
</a></li>
<li><a href="#grant-account-creation">Неявное создание учетной записи
</a></li>
<li><a href="#grant-other-characteristics">
Другие характеристики учетной записи</a></li>
<li><a href="#grant-mysql-vs-standard-sql">Версии GRANT MySQL
и стандартного SQL</a></p></li></ul>

<p><a href="#grant"><code>GRANT</code></a>
понимает имена хоста до 60 символов в длину.
База данных, таблица, столбец и имена подпрограмм могут быть до 64 символов.
Имена пользователей могут быть до 32 символов.</p>

<p><span><em>Допустимая длина для имен пользователя не может быть изменена,
изменяя <code>mysql.user</code>. Попытка сделать так приведет к
непредсказуемому поведении, которое может даже лишить возможности
пользователей входить в систему</em></span>. Вы никогда не должны изменять
структуру таблиц в базе данных <code>mysql</code> в любой манере вообще,
кроме процедуры, описанной в
<a href="programs.htm#mysql-upgrade">разделе 5.4.5</a>.</p>

<h5><a name="grant-privileges"></a>Привилегии, поддержанные MySQL</h5>
<p>Следующая таблица суммирует допустимые типы привилегии
<em><code>priv_type</code></em>, которые могут быть определены для
<a href="#grant"><code>GRANT</code></a> и
<a href="#revoke"><code>REVOKE</code></a>,
и уровни, на которых можно предоставить каждую привилегию.
Для дополнительной информации об этих привилегиях см.
<a href="security.html#privileges-provided">раздел 7.2.1</a>.</p>

<a name="idm139965335460064"></a><p><b>Таблица 14.3. Допустимые привилегии
для GRANT и REVOKE</b></p>
<table border="1">
<thead><tr><th scope="col">Привилегия</th>
<th scope="col">Значение и уровни</th></tr></thead>
<tbody><tr><td scope="row"><a href="security.html#priv_all"><code>
ALL [PRIVILEGES]</code></a></td><td>Предоставить все привилегии на
указанном уровне доступа, кроме <a href="security.html#priv_grant-option">
<code>GRANT OPTION</code></a></td></tr>
<tr><td scope="row"><a href="security.html#priv_alter"><code>ALTER</code></a>
</td><td>Включает использование <a href="#alter-table"><code>ALTER
TABLE</code></a>. Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_alter-routine"><code>ALTER
ROUTINE</code></a></td><td>Позволяет сохраненным подпрограммам быть
измененными или удаленными. Уровни: глобальный, база данных, процедура.
</td></tr>
<tr><td scope="row"><a href="security.html#priv_create"><code>CREATE</code>
</a></td><td>Включает создание таблиц и баз данных. Уровни: глобальный,
база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_create-routine"><code>CREATE
ROUTINE</code></a></td><td>Включает создание сохраненных подпрограмм.
Уровни: глобальный, база данных.</td></tr>
<tr><td scope="row"><a href="security.html#priv_create-tablespace"><code>
CREATE TABLESPACE</code></a></td><td>Позволяет создавать, изменять или
удалять табличные пространства и группы файлов системного журнала.
Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_create-temporary-tables">
<code>CREATE TEMPORARY TABLES</code></a></td><td>Разрешает использовать
<a href="#create-table"><code>CREATE TEMPORARY TABLE</code></a>.
Уровни: глобальный, база данных.</td></tr>
<tr><td scope="row"><a href="security.html#priv_create-user"><code>CREATE
USER</code></a></td><td>Позволяет использование
<a href="#create-user"><code>CREATE USER</code></a>,
<a href="#drop-user"><code>DROP USER</code></a>,
<a href="#rename-user"><code>RENAME USER</code></a> и
<a href="#revoke"><code>REVOKE ALL PRIVILEGES</code></a>.
Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_create-view"><code>CREATE
VIEW</code></a></td><td>Позволяет создавать или изменять представления.
Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_delete"><code>DELETE</code>
</a></td><td>Разрешает использовать <a href="#delete"><code>DELETE
</code></a>. Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_drop"><code>DROP</code></a>
</td><td>Позволяет удалять базы данных, таблицы и представления.
Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_event"><code>EVENT</code></a>
</td><td>Включает использование событий для Event Scheduler.
Уровни: глобальный, база данных.</td></tr>
<tr><td scope="row"><a href="security.html#priv_execute"><code>EXECUTE</code>
</a></td><td>Позволяет пользователю выполнить сохраненные подпрограммы.
Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_file"><code>FILE</code></a>
</td><td>Позволяет пользователю заставить сервер читать или писать файлы.
Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_grant-option"><code>GRANT
OPTION</code></a></td><td>Позволяет предоставлять или удалять привилегии из
других учетных записей. Уровни: глобальный, база данных,
таблица, процедура, proxy.</td></tr>
<tr><td scope="row"><a href="security.html#priv_index"><code>INDEX</code></a>
</td><td>Включает создание или удаление индекса. Уровни: глобальный,
база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_insert"><code>INSERT</code>
</a></td><td>Разрешает <a href="#insert"><code>INSERT</code></a>.
Уровни: глобальный, база данных, таблица, столбец.</td></tr>
<tr><td scope="row"><a href="security.html#priv_lock-tables"><code>LOCK
TABLES</code></a></td><td>Включить использование
<a href="#lock-tables"><code>LOCK TABLES</code></a>
на таблицах, для которых Вы имеете привилегию
<a href="#select"><code>SELECT</code></a>.
Уровни: глобальный, база данных.</td></tr>
<tr><td scope="row"><a href="security.html#priv_process"><code>PROCESS</code>
</a></td><td>Позволяет пользователю видеть все процессы с
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>.
Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_proxy"><code>PROXY</code></a>
</td><td>Включает пользователю proxying.
Уровень: От пользователя пользователю.</td></tr>
<tr><td scope="row"><a href="security.html#priv_references"><code>REFERENCES
</code></a></td><td>Включает создание внешнего ключа. Уровни: глобальный,
база данных, таблица, столбец.</td></tr>
<tr><td scope="row"><a href="security.html#priv_reload"><code>RELOAD</code>
</a></td><td>Включает использование <a href="#flush"><code>FLUSH
</code></a>. Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_replication-client"><code>
REPLICATION CLIENT</code></a></td><td>Позволяет пользователю запросить
основные или ведомые серверы. Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_replication-slave"><code>
REPLICATION SLAVE</code></a></td><td>Позволяет ведомым устройствам читать
двоичные события журнала с ведущего устройства. Уровень: глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_select"><code>SELECT</code>
</a></td><td>Включает использование <a href="#select"><code>SELECT
</code></a>. Уровни: глобальный, база данных, таблица, столбец.</td></tr>
<tr><td scope="row"><a href="security.html#priv_show-databases"><code>SHOW
DATABASES</code></a></td><td>Позволяет <a href="#show-databases">
<code>SHOW DATABASES</code></a> показать все базы данных.
Уровень: Глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_show-view"><code>SHOW VIEW
</code></a></td><td>Позволяет <a href="#show-create-view"><code>SHOW
CREATE VIEW</code></a>. Уровни: глобальный, база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_shutdown"><code>SHUTDOWN
</code></a></td><td>Позволяет <a href="programs.htm#mysqladmin"><span>
<strong>mysqladmin shutdown</strong></span></a>. Уровень: Глобальный.</td>
</tr>
<tr><td scope="row"><a href="security.html#priv_super"><code>SUPER</code></a>
</td><td>Позволяет использование других административных задач:
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>,
<a href="#kill"><code>KILL</code></a>,
<a href="#purge-binary-logs"><code>PURGE BINARY LOGS</code></a>,
<a href="#set-variable"><code>SET GLOBAL</code></a> и
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin debug</strong>
</span></a>. Уровень: Глобальный.</td></tr>
<tr><td scope="row"><a href="security.html#priv_trigger"><code>TRIGGER</code>
</a></td><td>Включить работу с триггерами. Уровни: глобальный,
база данных, таблица.</td></tr>
<tr><td scope="row"><a href="security.html#priv_update"><code>UPDATE</code>
</a></td><td>Разрешает <a href="#update"><code>UPDATE</code></a>.
Уровни: глобальный, база данных, таблица, столбец.</td></tr>
<tr><td scope="row"><a href="security.html#priv_usage"><code>USAGE</code></a>
</td><td>Синоним для <span><span>no privileges</span></span>.</td>
</tr></tbody></table>

<p>Триггер связан с таблицей, так что, чтобы создать или удалить триггер, Вы
должны иметь привилегию <a href="security.html#priv_trigger"><code>TRIGGER
</code></a> для таблицы, а не триггера.</p>

<p>В <a href="#grant"><code>GRANT</code></a>
<a href="security.html#priv_all"><code>ALL [PRIVILEGES]</code></a> или
<a href="security.html#priv_proxy"><code>PROXY</code></a>
привилегию нужно назвать отдельно, она не может быть определена наряду с
другими привилегиями. <a href="security.html#priv_all"><code>ALL
[PRIVILEGES]</code></a> синоним для всех привилегий, доступных для уровня, на
котором привилегии предоставлены, за исключением
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a> и
<a href="security.html#priv_proxy"><code>PROXY</code></a>.</p>

<p><a href="security.html#priv_usage"><code>USAGE</code></a>
может быть определен, чтобы создать пользователя, у которого нет никаких
привилегий, или определить <code>REQUIRE</code> или <code>WITH</code>
для учетной записи, не изменяя ее существующие привилегии. Однако,
использование <a href="#grant"><code>GRANT</code></a>, чтобы
определить такие характеристики устарело в MySQL 5.7.6. Используйте
<a href="#create-user"><code>CREATE USER</code></a> или
<a href="#alter-user"><code>ALTER USER</code></a>.</p>

<p>Информация учетной записи MySQL хранится в таблицах базы данных
<code>mysql</code>. Подробности в <a href="security.html#privilege-system">
разделе 7.2</a>.</p>

<p>Если таблицы содержат строки привилегии, которые содержат имена базы
данных или имена таблиц смешанного регистра и
<a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a> не 0, <a href="#revoke"><code>REVOKE
</code></a> не может использоваться, чтобы отменить эти привилегии. Будет
необходимо управлять таблицами непосредственно. (<a href="#grant">
<code>GRANT</code></a> не будет создавать такие строки, когда установлена
<a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a>, но такие строки, возможно, были созданы до
установки этой переменной.</p>

<p>Привилегии можно предоставить на нескольких уровнях, в зависимости от
синтаксиса, используемого для <code>ON</code>. Для
<a href="#revoke"><code>REVOKE</code></a> <code>ON</code>
определяет, которые привилегии удалить.</p>

<p>Для уровней глобального, базы данных, таблицы и подпрограммы
<a href="#grant"><code>GRANT ALL</code></a>
назначает только привилегии, которые существуют на уровне, который Вы
предоставляете. Например, <code>GRANT ALL ON <em><code>db_name</code>
</em>.*</code> на уровне базы данных, таким образом, это не предоставляет
специфических глобальных привилегий, например,
<a href="security.html#priv_file"><code>FILE</code></a>. Предоставление
<a href="security.html#priv_all"><code>ALL</code></a> не назначает
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a> или
<a href="security.html#priv_proxy"><code>PROXY</code></a>.</p>

<p><em><code>object_type</code></em>, если есть, должен быть определен как
<code>TABLE</code>, <code>FUNCTION</code> или <code>PROCEDURE</code>,
когда следующий объект это таблица, сохраненная функция
или хранимая процедура.</p>

<p>Привилегии для базы данных, таблицы, столбца или подпрограммы сформированы
совокупно как логическое <a href="funct.htm#operator_or"><code>OR</code></a>
из привилегий на каждом из уровней. Например, если у пользователя есть
глобальный <a href="security.html#priv_select"><code>SELECT</code></a>,
привилегия не может отрицаться отсутствием привилегии на уровне базы данных,
таблицы или столбца. Детали проверяющей привилегию процедуры представлены в
<a href="security.html#request-access">разделе 7.2.6</a>.</p>

<p>Если Вы используете привилегии таблицы, столбца или подпрограммы даже для
одного пользователя, сервер исследует привилегии таблицы, столбца и
подпрограммы для всех пользователей, а это немного замедляет MySQL. Точно так
же, если Вы ограничиваете число запросов, обновлений или соединений для
каких-либо пользователей, сервер должен контролировать эти значения.</p>

<p>MySQL позволяет Вам предоставить привилегии на базах данных или таблицах,
которые не существуют. Для таблиц привилегии, которые будут предоставлены,
должны включать <a href="security.html#priv_create"><code>CREATE</code></a>.
<span><em>Это поведение проектируется</em></span>, предназначено, чтобы
позволить администратору базы данных подготовить учетные записи пользователя
и привилегии для баз данных или таблиц, которые должны быть составлены в
более позднее время.</p>

<p><span><em>MySQL автоматически не отменяет привилегий, когда Вы удаляете
базу данных или таблицу</em></span>. Однако, если Вы удаляете подпрограмму,
любые привилегии, предоставленные для этой подпрограммы, отменяются.</p>

<h5><a name="grant-global-privileges"></a>Глобальные привилегии</h5>
<p>Глобальные привилегии являются административными или относятся ко всем
базам данных по данному серверу. Чтобы назначить глобальные привилегии,
надо использовать <code>ON *.*</code>:
<pre>
GRANT ALL ON *.* TO 'someuser'@'somehost';
GRANT SELECT, INSERT ON *.* TO 'someuser'@'somehost';
</pre>

<a href="security.html#priv_create-tablespace"><code>CREATE TABLESPACE</code>
</a>, <a href="security.html#priv_create-user"><code>CREATE USER</code></a>,
<a href="security.html#priv_file"><code>FILE</code></a>,
<a href="security.html#priv_process"><code>PROCESS</code></a>,
<a href="security.html#priv_reload"><code>RELOAD</code></a>,
<a href="security.html#priv_replication-client"><code>REPLICATION CLIENT
</code></a>, <a href="security.html#priv_replication-slave"><code>REPLICATION
SLAVE</code></a>, <a href="security.html#priv_show-databases"><code>SHOW
DATABASES</code></a>, <a href="security.html#priv_shutdown"><code>SHUTDOWN
</code></a> и <a href="security.html#priv_super"><code>SUPER</code></a>
являются административными и могут быть предоставлены только глобально.</p>

<p>Другие привилегии можно предоставить глобально или на
более определенных уровнях.</p>
<p>MySQL хранит глобальные привилегии в таблице <code>mysql.user</code>.</p>

<h5><a name="grant-database-privileges"></a>Привилегии базы данных</h5>
<p>Привилегии базы данных относятся ко всем объектам в данной базе данных.
Чтобы назначить привилегии на уровне базы данных, надо использовать
<code>ON <em><code>db_name</code></em>.*</code>:
<pre>
GRANT ALL ON mydb.* TO 'someuser'@'somehost';
GRANT SELECT, INSERT ON mydb.* TO 'someuser'@'somehost';
</pre>

Если Вы используете <code>ON *</code> (вместо <code>ON *.*</code>)
и Вы выбрали базу данных по умолчанию, привилегии назначены на уровне базы
данных для базы данных по умолчанию. Ошибка происходит, если нет никакой базы
данных по умолчанию.</p>

<p><a href="security.html#priv_create"><code>CREATE</code></a>,
<a href="security.html#priv_drop"><code>DROP</code></a>,
<a href="security.html#priv_event"><code>EVENT</code></a>,
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>,
<a href="security.html#priv_lock-tables"><code>LOCK TABLES</code></a> и
<a href="security.html#priv_references"><code>REFERENCES</code></a>
могут быть определены на уровне базы данных. Привилегии таблицы или
подпрограммы также могут быть определены на уровне базы данных, когда они
относятся ко всем таблицам или подпрограммам в базе данных.</p>
<p>MySQL хранит привилегии базы данных в таблице <code>mysql.db</code>.</p>

<h5><a name="grant-table-privileges"></a>Табличные привилегии</h5>
<p>Табличные привилегии относятся ко всем столбцам в данной таблице.
Чтобы назначить привилегии на уровне таблицы, надо использовать
<code>ON <em><code>db_name.tbl_name</code></em></code>:
<pre>
GRANT ALL ON mydb.mytbl TO 'someuser'@'somehost';
GRANT SELECT, INSERT ON mydb.mytbl TO 'someuser'@'somehost';
</pre>

Если Вы определяете <em><code>tbl_name</code></em> вместо
<em><code>db_name.tbl_name</code></em>, запрос относится к
<em><code>tbl_name</code></em> в базе данных по умолчанию. Ошибка происходит,
если нет никакой базы данных по умолчанию.</p>

<p>Допустимые значения <em><code>priv_type</code></em>
на табличном уровне:
<a href="security.html#priv_alter"><code>ALTER</code></a>,
<a href="security.html#priv_create-view"><code>CREATE VIEW</code></a>,
<a href="security.html#priv_create"><code>CREATE</code></a>,
<a href="security.html#priv_delete"><code>DELETE</code></a>,
<a href="security.html#priv_drop"><code>DROP</code></a>,
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>,
<a href="security.html#priv_index"><code>INDEX</code></a>,
<a href="security.html#priv_insert"><code>INSERT</code></a>,
<a href="security.html#priv_references"><code>REFERENCES</code></a>,
<a href="security.html#priv_select"><code>SELECT</code></a>,
<a href="security.html#priv_show-view"><code>SHOW VIEW</code></a>,
<a href="security.html#priv_trigger"><code>TRIGGER</code></a> и
<a href="security.html#priv_update"><code>UPDATE</code></a>.</p>
<p>MySQL хранит табличные привилегии в таблице
<code>mysql.tables_priv</code>.</p>

<h5><a name="grant-column-privileges"></a>Привилегии столбца</h5>
<p>Привилегии столбца относятся к единственному столбцу в данной таблице.
Каждая привилегия, которая будет предоставлена на уровне столбца, должна
сопровождаться столбцом или столбцами, приложенными в круглых скобках.
<pre>
GRANT SELECT (col1), INSERT (col1,col2) ON mydb.mytbl TO 'someuser'@'somehost';
</pre>

Допустимые значения <em><code>priv_type</code></em>
для столбца (то есть, когда Вы используете
<em><code>column_list</code></em>):
<a href="security.html#priv_insert"><code>INSERT</code></a>,
<a href="security.html#priv_references"><code>REFERENCES</code></a>,
<a href="security.html#priv_select"><code>SELECT</code></a> и
<a href="security.html#priv_update"><code>UPDATE</code></a>.</p>
<p>MySQL хранит привилегии столбца в таблице <code>mysql.columns_priv</code>.
</p>

<h5><a name="grant-routine-privileges"></a>Привилегии сохраненных подпрограмм
</h5>
<p><a href="security.html#priv_alter-routine"><code>ALTER ROUTINE</code></a>,
<a href="security.html#priv_create-routine"><code>CREATE ROUTINE</code></a>,
<a href="security.html#priv_execute"><code>EXECUTE</code></a> и
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>
относятся к сохраненным подпрограммам (процедуры и функции). Их можно
предоставить на глобальных уровнях и уровнях базы данных. За исключением
<a href="security.html#priv_create-routine"><code>CREATE ROUTINE</code></a>,
эти привилегии можно предоставить для отдельных подпрограмм.
<pre>
GRANT CREATE ROUTINE ON mydb.* TO 'someuser'@'somehost';
GRANT EXECUTE ON PROCEDURE mydb.myproc TO 'someuser'@'somehost';
</pre>

Допустимые <em><code>priv_type</code></em> на уровне подпрограмм:
<a href="security.html#priv_alter-routine"><code>ALTER ROUTINE</code></a>,
<a href="security.html#priv_execute"><code>EXECUTE</code></a> и
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>.
<a href="security.html#priv_create-routine"><code>CREATE ROUTINE</code></a>
не привилегия на обычном уровне, потому что у Вас должна быть эта
привилегия, чтобы создать подпрограмму</p>
<p>MySQL хранит привилегии для подпрограмм в таблице
<code>mysql.procs_priv</code>.</p>

<h5><a name="grant-proxy-privileges"></a>Привилегии Proxy</h5>
<p><a href="security.html#priv_proxy"><code>PROXY</code></a>
позволяет одному пользователю быть полномочием для другого. Пользователь
является олицетворением или берет личность proxy-пользователя.
<pre>
GRANT PROXY ON 'localuser'@'localhost' TO 'externaluser'@'somehost';
</pre>

Когда <a href="security.html#priv_proxy"><code>PROXY</code></a>
предоставлена, это должна быть единственная привилегия, названная в
<a href="#grant"><code>GRANT</code></a>, <code>REQUIRE</code>
не может быть дан, и разрешен единственный параметр
<code>WITH</code>: <code>WITH GRANT OPTION</code>.</p>

<p>Это требует, чтобы пользователь по доверенности подтвердил подлинность
через плагин, который возвращает имя proxied пользователя к серверу, когда
пользователь по доверенности соединяется, и что пользователь по доверенности
имеет привилегию <code>PROXY</code>. Подробности в
<a href="security.html#proxy-users">разделе 7.3.10</a>.</p>
<p>MySQL хранит привилегии proxy в таблице <code>mysql.proxies_priv</code>.
</p>

<h5><a name="grant-accounts-passwords"></a>Имена учетной записи и пароли</h5>
<p><em><code>user_specification</code></em> называет пользователя и
произвольно предоставляет информацию об аутентификации, такую как пароль.</p>

<p><em><code>user</code></em> указывает на учетную запись MySQL, к которой
<a href="#grant"><code>GRANT</code></a> применяется. Чтобы
приспособить предоставление прав пользователям от произвольных узлов, MySQL
поддерживает определение <em><code>user</code></em> в формате
<code><em><code>user_name</code></em>@<em><code>host_name</code></em></code>.
Если <em><code>user_name</code></em> или <em><code>host_name</code></em>
является законным как идентификатор, Вы не должны заключить его в кавычки.
Однако, кавычки необходимы, чтобы определить
<em><code>user_name</code></em>, содержащее специальные символы (например,
<code>-</code>) или если <em><code>host_name</code></em>
содержит специальные или подстановочные символы (например, <code>%</code>).
Заключите в кавычки имя пользователя и имя хоста отдельно.</p>

<p>Вы можете определить подстановочные знаки в имени хоста. Например,
<code><em><code>user_name</code></em>@'%.example.com'</code>
относится к <em><code>user_name</code></em> для любого узла в домене
<code>example.com</code>, а <code><em><code>user_name</em>@'192.168.1.%'
</code> относится к <em><code>user_name</code></em> для любого узла в
подсети <code>192.168.1</code> класса C.</p>

<p>Простая форма <em><code>user_name</code></em> это синоним для
<code><em><code>user_name</code></em>@'%'</code>.</p>
<p><span><em>MySQL не поддерживает подстановочные знаки в именах
пользователей</em></span>. Чтобы обратиться к анонимному пользователю,
определите учетную запись с пустым именем пользователя с помощью
<a href="#grant"><code>GRANT</code></a>:
<pre>
GRANT ALL ON test.* TO ''@'localhost' ...;
</pre>

В этом случае, любому пользователю, который соединяется от местного узла с
правильным паролем для анонимного пользователя, разрешат доступ с
привилегиями, связанными с анонимной учетной записью пользователя.</p>
<p>См. <a href="security.html#account-names">раздел 7.2.3</a>.</p>

<p>Чтобы определить заключенные в кавычки значения, заключите в кавычки базу
данных, таблицу или столбец как идентификаторы. Имена пользователя и хоста
берутся в кавычки как идентификаторы или как строки. Пароли берутся в кавычки
как строки. Для заключения в кавычки строк и идентификаторов см. разделы
<a href="lang.htm#string-literals">10.1.1</a> и
<a href="lang.htm#identifiers">10.2</a>.</p>

<p><code>_</code> и <code>%</code> разрешены, определяя имена базы данных в
<a href="#grant"><code>GRANT</code></a>, которые предоставляют
привилегии на уровне базы данных. Это означает, например, что, если Вы хотите
использовать <code>_</code> как часть имени базы данных, Вы должны определить
это как <code>\_</code> в <a href="#grant"><code>GRANT</code></a>,
чтобы предотвратить возможность доступа к дополнительным базам данных,
соответствующих подстановочному образцу, например, <code>GRANT ... ON
`foo\_bar`.* TO ...</code>.</p>

<p>Если Вы разрешаете анонимным пользователям соединяться с сервером MySQL,
Вы должны также предоставить привилегии всем местным пользователям как
<code><em><code>user_name</code></em>@localhost</code>.
Иначе анонимная учетная запись пользователя для <code>localhost</code> в
таблице <code>mysql.user</code> (создаваемая во время установки MySQL)
используется, когда названный пользователь пытается войти в систему MySQL
с местной машины. Для деталей см.
<a href="security.html#connection-access">раздел 7.2.5</a>.</p>

<p>Чтобы определить, относится ли предыдущее предупреждение к Вам, выполните
следующий запрос, который перечисляет любых анонимных пользователей:
<pre>
SELECT Host, User FROM mysql.user WHERE User='';
</pre>

Чтобы избежать этой проблемы, удалите местную анонимную учетную запись
пользователя, используя этот запрос:
<pre>
DROP USER ''@'localhost';
</pre>

<p>Чтобы указать, как пользователь должен подтвердить подлинность, соединяясь
с сервером, значение <em><code>user_specification</code></em> может включать
<code>IDENTIFIED</code>, чтобы определить плагин аутентификации, пароль или
обоих. Синтаксис пользовательской спецификации тот же самый, что в
<a href="#create-user"><code>CREATE USER</code></a>. См.
<a href="#create-user">раздел 14.7.1.3</a>.</p>

<p>Если задан <code>IDENTIFIED BY</code> и у Вас есть глобальная привилегия
(<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>),
пароль становится новым паролем для учетной записи, даже если учетная запись
существует и уже имеет пароль. Без <code>IDENTIFIED BY</code>
пароль учетной записи остается неизменным.</p>

<h5><a name="grant-account-creation"></a>Неявное создание учетной записи</h5>
<p>Если учетную запись называют в <a href="#grant"><code>GRANT</code>
</a>, но она не существует, предпринятые меры зависят от значения режима SQL
<a href="server.htm#sqlmode_no_auto_create_user"><code>NO_AUTO_CREATE_USER
</code></a>:</p>

<ul><li><p>Если <a href="server.htm#sqlmode_no_auto_create_user"><code>
NO_AUTO_CREATE_USER</code></a> выключен, <a href="#grant"><code>GRANT
</code></a> создает учетную запись. <span><em>Это очень опасно</em></span>,
если Вы не определяете непустой пароль через <code>IDENTIFIED BY</code>.</li>

<li>Если включен <a href="server.htm#sqlmode_no_auto_create_user"><code>
NO_AUTO_CREATE_USER</code></a>, <a href="#grant"><code>GRANT</code>
</a> не создает учетную запись, если Вы не определяете непустой пароль
через <code>IDENTIFIED BY</code> или плагин аутентификации
через <code>IDENTIFIED WITH</code>.</p></li></ul>

<p>Если учетная запись уже существует, <code>IDENTIFIED WITH</code>
запрещен, потому что это предназначено только для использования, создавая
новые учетные записи.</p>

<h5><a name="grant-other-characteristics"></a>
Другие характеристики учетной записи</h5>
<p>MySQL может проверить признаки сертификата X509 в дополнение к обычной
аутентификации, которая основана на имени пользователя.
Для вводной информации об использовании SSL с MySQL см.
<a href="security.html#secure-connections">раздел 7.4</a>.</p>

<p><code>REQUIRE</code> определяет опции SSL для учетной записи MySQL.
Синтаксис тот же самый, что и в <a href="#create-user"><code>CREATE
USER</code></a>, см. <a href="#create-user">раздел 14.7.1.3</a>.</p>

<p><code>WITH</code> используется в этих целях:</p>
<ul><li><p>Позволять пользователю предоставить
привилегии другим пользователям.</li>
<li>Определить ограничение ресурса для пользователя.</p></li></ul>

<p><code>WITH GRANT OPTION</code> дает пользователю способность дать другим
пользователям любые привилегии, которые пользователь имеет на
указанном уровне привилегии.</p>

<p>Чтобы предоставить <a href="security.html#priv_grant-option"><code>GRANT
OPTION</code></a> учетной записи, иначе не изменяя ее
привилегии, сделайте это:
<pre>
GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION;
</pre>

Два пользователя с различными привилегиями могут быть в
состоянии объединить привилегии!</p>
<p>Вы не можете предоставить другому пользователю привилегию, которую сами
не имеете, <a href="security.html#priv_grant-option"><code>GRANT OPTION
</code></a> позволяет Вам назначить только те привилегии, которыми
Вы обладаете сами.</p>

<p>Знайте что, когда Вы предоставляете пользователю
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>
на особом уровне привилегии, любые привилегии, которыми пользователь обладает
(или может получить в будущем) на этом уровне, могут быть предоставлены им
другим пользователям. Предположите, что Вы предоставляете пользователю
привилегию <a href="security.html#priv_insert"><code>INSERT</code></a>
на базе данных. Если Вы потом предоставляете привилегию
<a href="security.html#priv_select"><code>SELECT</code></a> на базе данных
м указываете <code>WITH GRANT OPTION</code>,
тот пользователь может дать другим пользователям не только
<a href="security.html#priv_select"><code>SELECT</code></a>, но и
<a href="security.html#priv_insert"><code>INSERT</code></a>.
Если Вы позже предоставляете <a href="security.html#priv_update"><code>UPDATE
</code></a> на базе данных, пользователь может предоставить
<a href="security.html#priv_insert"><code>INSERT</code></a>,
<a href="security.html#priv_select"><code>SELECT</code></a> и
<a href="security.html#priv_update"><code>UPDATE</code></a>.</p>

<p>Для неадминистративного пользователя Вы не должны предоставить
<a href="security.html#priv_alter"><code>ALTER</code></a>
глобально или для базы данных <code>mysql</code>. Если Вы делаете это,
пользователь может попытаться ниспровергать систему
привилегий, переименовывая таблицы!</p>
<p>См. <a href="security.html#privileges-provided">раздел 7.2.1</a>.</p>

<p>Возможно установить границы использования ресурсов сервера учетной
записью, как обсуждено в <a href="security.html#user-resources">разделе
7.3.5</a>. Используйте <code>WITH</code> с параметром
<em><code>resource_option</code></em>. Не определенные пределы сохраняют свое
текущее значение. Синтаксис тот же самый, что в
<a href="#create-user"><code>CREATE USER</code></a>, см.
<a href="#create-user">раздел 14.7.1.3</a>.</p>

<h5><a name="grant-mysql-vs-standard-sql"></a>
Версии GRANT в MySQL и стандартном SQL</h5>
<p>Самые большие различия между MySQL и стандартными версиями SQL
<a href="#grant"><code>GRANT</code></a>:</p>

<ul><li><p>MySQL связывает привилегии с комбинацией имени хоста и имени
пользователя а не только с именем пользователя.</li>
<li>У стандартного SQL нет глобальных или привилегий на уровне базы данных, и
при этом он не поддерживает все типы привилегий MySQL.</li>
<li>MySQL не поддерживает стандартную привилегию SQL <code>UNDER</code>.</li>

<li>Стандартные привилегии SQL структурированы в иерархической манере.
Если Вы удаляете пользователя, отменяются все привилегии, которые
предоставили пользователю. Это также истина в MySQL, если Вы используете
<a href="#drop-user"><code>DROP USER</code></a>, см.
<a href="#drop-user">раздел 14.7.1.5</a>.</li>

<li>В стандартном SQL, когда Вы удаляете таблицу, отменяются все привилегии
для таблицы. В стандартном SQL, когда Вы отменяете привилегию, также
отменяются все привилегии, которые предоставили, основываясь на этой
привилегии. В MySQL привилегии могут быть удалены с
<a href="#drop-user"><code>DROP USER</code></a> или
<a href="#revoke"><code>REVOKE</code></a>.</li>

<li>В MySQL возможно иметь <a href="security.html#priv_insert"><code>INSERT
</code></a> только для некоторых столбцов в таблице. В этом случае Вы можете
все еще выполнить <a href="#insert"><code>INSERT</code></a> на
таблице, при условии, что Вы вставляете значения только для тех столбцов, для
которых Вы имеете привилегию <a href="security.html#priv_insert"><code>INSERT
</code></a>. Опущенные столбцы установлены в их неявные значения по
умолчанию, если строгий режим SQL не включен. В строгом режиме запрос
отклонен, если у какого-либо из опущенных столбцов нет никакого значения по
умолчанию. Стандартный SQL требует, чтобы Вы имели привилегию
<a href="security.html#priv_insert"><code>INSERT</code></a>
на всех столбцах. Для информации о строгом режиме SQL и неявных значениях по
умолчанию см. разделы <a href="server.htm#sql-mode">6.1.8</a> и
<a href="types.htm#data-type-defaults">12.7</a>.</p></li></ul>

<h4><a name="rename-user"></a>14.7.1.7. RENAME USER</h4>
<pre>
RENAME USER <em><code>old_user</code></em> TO <em><code>new_user</code></em>
[, <em><code>old_user</code></em> TO <em><code>new_user</code></em>] ...
</pre>

<a href="#rename-user"><code>RENAME USER</code></a>
переименовывает существующие учетные записи MySQL. Ошибка происходит для
старых учетных записей, которые не существуют, или новых учетных записей,
которые уже существуют.</p>

<p>Чтобы использовать <a href="#rename-user"><code>RENAME USER</code>
</a>, у Вас должна быть глобальная привилегия
<a href="security.html#priv_create-user"><code>CREATE USER</code></a> или
привилегия <a href="security.html#priv_update"><code>UPDATE</code></a> для
базы данных <code>mysql</code>. Если включена
<a href="server.htm#sysvar_read_only"><code>read_only</code></a>,
<a href="#rename-user"><code>RENAME USER</code></a> требует привилегии
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Каждое имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>:
<pre>
RENAME USER 'jeffrey'@'localhost' TO 'jeff'@'127.0.0.1';
</pre>
Если Вы определяете только часть имени пользователя имени учетной записи,
используется часть имени хоста <code>'%'</code>.</p>

<p><a href="#rename-user"><code>RENAME USER</code></a> копирует
привилегии старого пользователя новому. Однако,
<a href="#rename-user"><code>RENAME USER</code></a>
автоматически не удаляет базы данных или объекты, которые создал старый
пользователь. Это включает сохраненные программы или представления, для
которых <code>DEFINER</code> это старый пользователь.
Попытки получить доступ к таким объектам могут произвести ошибку, если
они выполняют в контексте безопасности определителя (см.
<a href="stored.htm#stored-programs-security">раздел 21.6</a>).</p>
<p>Изменения привилегий вступают в силу как обозначено в
<a href="security.html#privilege-changes">разделе 7.2.7</a>.</p>

<h4><a name="revoke"></a>14.7.1.8. REVOKE</h4>
<pre>
REVOKE
<em><code>priv_type</code></em> [(<em><code>column_list</code></em>)]
  [, <em><code>priv_type</code></em> [(<em><code>column_list</code></em>)]] ...
ON [<em><code>object_type</code></em>] <em><code>priv_level</code></em>
FROM <em><code>user</code></em> [, <em><code>user</code></em>] ...

REVOKE ALL PRIVILEGES, GRANT OPTION
FROM <em><code>user</code></em> [, <em><code>user</code></em>] ...

REVOKE PROXY ON <em><code>user</code></em>
FROM <em><code>user</code></em> [, <em><code>user</code></em>] ...

REVOKE <em><code>role</code></em> [, <em><code>role</code></em> ] ...
FROM <em><code>user</code></em> [, <em><code>user</code></em> ] ...
</pre>

<a href="#revoke"><code>REVOKE</code></a> позволяет системным
администраторам отменить привилегии и роли, которые он
может отменить от учетных записей пользователя и ролей.</p>

<p>При включенной переменной <a href="server.htm#sysvar_read_only"><code>
read_only</code></a> <a href="#revoke"><code>REVOKE</code></a>
требует привилегии <a href="security.html#priv_super"><code>SUPER</code></a>.
</p>

<p>Каждое имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>:
<pre>
REVOKE INSERT ON *.* FROM 'jeffrey'@'localhost';
</pre>
Если Вы определяете только часть имени пользователя имени учетной записи,
часть имени хоста <code>'%'</code>.</p>

<p>Для деталей об уровнях, на которых привилегии существуют, допустимых
значениях <em><code>priv_type</code></em>,
<em><code>priv_level</code></em> и <em><code>object_type</code></em>
см. <a href="#grant">раздел 14.7.1.6</a>.</p>

<p>Чтобы использовать первый вариант
<a href="#revoke"><code>REVOKE</code></a>, Вы должны иметь привилегию
<a href="security.html#priv_grant-option"><code>GRANT OPTION</code></a>, и у
Вас должны быть привилегии, которые Вы отменяете.</p>

<p>Чтобы отменить все привилегии, используйте второй синтаксис, который
удаляет все привилегии глобальные, базы данных, таблицы и столбца для
названного пользователя или пользователей:
named user or users:
<pre>
REVOKE ALL PRIVILEGES, GRANT OPTION FROM <em><code>user</code></em>
[, <em><code>user</code></em>] ...
</pre>

Чтобы использовать этот вариант <a href="#revoke"><code>REVOKE</code>
</a>, у Вас должна быть глобальная привилегия
<a href="security.html#priv_create-user"><code>CREATE USER</code></a>
или привилегия <a href="security.html#priv_update"><code>UPDATE</code></a>
на базе данных <code>mysql</code>.</p>

<p><code>REVOKE ALL PRIVILEGES, GRANT OPTION FROM
<em><code>user</code></em></code> не отменяет ролей.</p>
<p><a href="#revoke"><code>REVOKE</code></a>
удаляет привилегии, но не удаляет записи таблицы <code>mysql.user</code>.
Чтобы удалить учетную запись пользователя полностью, надо использовать
<a href="#drop-user"><code>DROP USER</code></a> (см.
<a href="#drop-user">раздел 14.7.1.5</a>) или
<a href="#delete"><code>DELETE</code></a>.</p>

<p>Если таблицы содержат строки привилегии, которые содержат имена базы
данных или имена таблиц в смешанном регистре и
<a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a> не 0,
<a href="#revoke"><code>REVOKE</code></a>
не может использоваться, чтобы отменить эти привилегии. Будет необходимо
управлять таблицами непосредственно.
<a href="#grant"><code>GRANT</code></a>
не будет создавать такие строки, когда
<a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a> установлена, но такие строки, возможно,
были созданы до установки переменной.</p>

<p>Когда успешно выполнено из <a href="programs.htm#mysql"><span><strong>
mysql</strong></span></a>, <a href="#revoke"><code>REVOKE</code></a>
отвечает <code>Query OK, 0 rows affected</code>. Чтобы определить результат
команды, используйте <a href="#show-grants"><code>SHOW GRANTS</code>
</a>. См. <a href="#show-grants">раздел 14.7.5.21</a>.</p>

<h4><a name="revoke-role"></a>14.7.1.9. REVOKE ROLE</h4>
<pre>
REVOKE ROLE
{
<em><code>auth_id</code></em> [, <em><code>auth_id</code></em> ] ...
  | ALL ROLES
}
FROM <em><code>auth_id</code></em> [, <em><code>auth_id</code></em> ] ...
<em><code>auth_id</code></em>: <em><code>user_name</code></em>[@<em><code>host_name</code></em>]
</pre>
Это раздел образца.</p>

<h4><a name="set-default-role"></a>14.7.1.10. SET DEFAULT ROLE</h4>
<pre>
SET DEFAULT ROLE
{NONE | ALL | <em><code>role</code></em> [, <em><code>role</code></em> ] ...}
TO <em><code>role</code></em> [, <em><code>role</code></em> ] ...
</pre>

Этот запрос альтернативный синтаксис для
<a href="#alter-user"><code>ALTER USER ... DEFAULT ROLE</code></a>
(см. <a href="#alter-user">раздел 14.7.1.1</a>).
Это определяет, какие роли становятся активными, когда
<a href="#set-role"><code>SET ROLE DEFAULT</code></a>
выполнен во время сеанса для каждой <em><code>role</code></em>
немедленно после <code>TO</code>.</p>

<p><code>DEFAULT ROLE</code> может иметь эти значения:</p>
<ul><li><p><code>NONE</code>: Роль по умолчанию <code>NONE</code>.</li>
<li><code>ALL</code>: Значение по умолчанию: все роли,
предоставленные учетной записи.</li>

<li><code><em><code>role</code></em> [,
<em><code>role</code></em> ] ...</code>: Значение по умолчанию:
все названные роли.</p></li></ul>

<h4><a name="set-password"></a>14.7.1.11. SET PASSWORD</h4>
<pre>
SET PASSWORD [FOR <em><code>user</code></em>] = <em><code>password_option</code></em>
<em><code>password_option</code></em>: {
PASSWORD('<em><code>auth_string</code></em>')
  | '<em><code>auth_string</code></em>'
}
</pre>

<a href="#set-password"><code>SET PASSWORD</code></a>
назначает пароль на учетную запись пользователя MySQL, определенный как
открытый текст (не зашифрован) или как зашифрованное значение:</p>

<ul><li><p><code>'<em><code>auth_string</code></em>'</code>
представляет пароль открытого текста.</li>
<li><code>'<em><code>hash_string</code></em>'</code>
представляет зашифрованный пароль.</p></li></ul>

<ul><li><p><a href="#set-password"><code>SET PASSWORD ... =
PASSWORD('<em><code>auth_string</code></em>')</code></a> устарел в
MySQL 5.7.6 и будет удален в будущем выпуске MySQL.</li>

<li><a href="#set-password"><code>SET PASSWORD
... = '<em><code>auth_string</code></em>'</code></a> не устарел, но
<a href="#alter-user"><code>ALTER USER</code></a>
теперь привилегированное запрос для того, чтобы назначить пароли. Например:
<pre>
ALTER USER <em><code>user</code></em> IDENTIFIED BY '<em><code>auth_string</code></em>';
</pre></li></ul>

<p><a href="#set-password"><code>SET PASSWORD</code></a> может
использоваться с или без явно названной учетной записи пользователя:</p>
<ul><li><p>С <code>FOR <em><code>user</code></em></code>
запрос устанавливает пароль для названной учетной записи,
которая должна существовать:
<pre>
SET PASSWORD FOR 'jeffrey'@'localhost' = <em><code>password_option</code></em>;
</pre>
В этом случае Вы должны иметь привилегию <a href="#update"><code>
UPDATE</code></a> на базе данных <code>mysql</code>.</li>

<li>Без <code>FOR <em><code>user</code></em></code>
запрос устанавливает пароль для текущего пользователя:
<pre>
SET PASSWORD = <em><code>password_option</code></em>;
</pre>

Любой клиент, который соединяется с сервером, используя неанонимную учетную
запись, может изменить пароль для той учетной записи. Чтобы видеть, какая
учетная запись подтверждала Вашу подлинность, вызовите функцию
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>:
<pre>
SELECT CURRENT_USER();
</pre></li></ul>

<p>При включенной опции <a href="server.htm#sysvar_read_only"><code>read_only
</code></a> <a href="#set-password"><code>SET PASSWORD</code></a>
требует привилегию <a href="security.html#priv_super"><code>SUPER</code></a>.
</p>

<p>Если <code>FOR <em><code>user</code></em></code>
дан, имя учетной записи использует формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>.
<em><code>user</code></em> должно быть дано как
<code>'<em><code>user_name</code></em>'@'<em><code>host_name</code></em>'
</code>, где <code>'<em><code>user_name</code></em>'</code> и
<code>'<em><code>host_name</code></em>'</code>
точно как перечислены в столбцах <code>User</code> и <code>Host</code>
строки таблицы <code>mysql.user</code>.
Если Вы определяете только имя пользователя, имя хоста <code>'%'</code>.
Например, чтобы установить пароль для учетной записи с
<code>User</code> и <code>Host</code> соответственно <code>'bob'</code> и
<code>'%.example.org'</code>:
<pre>
SET PASSWORD FOR 'bob'@'%.example.org' = PASSWORD('<em><code>auth_string</code></em>');
</pre>
Пароль может быть определен этими способами:</p>

<ul><li><p>Используя функцию <a href="funct.htm#function_password"><code>
PASSWORD()</code></a> (устарел с MySQL 5.7.6).</p>

<p>Функциональный параметр <code>'<em><code>auth_string</code></em>'</code>
открытый текст (незашифрованный) пароль.
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>
хеширует пароль и возвращает зашифрованную строку пароля для хранения в
строке <code>mysql.user</code>.</p>

<p>Функция <a href="funct.htm#function_password"><code>PASSWORD()</code></a>
хеширует пароль, используя хеширующий метод, определенный значением
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>.
Если <a href="#set-password"><code>SET PASSWORD</code></a>
отклоняет хешированное значение пароля, возвращенное
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>
как не заданное в правильном формате, может быть необходимо изменить
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>,
чтобы изменить хеширующий метод. Например, если учетная запись использует
плагин <code>mysql_native_password</code>, значение
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>
должно быть равно 0:
<pre>
SET old_passwords = 0;
SET PASSWORD FOR 'jeffrey'@'localhost' = PASSWORD('mypass');
</pre>

Если <a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>
отличается от требуемого плагином аутентификации, хешированное значение
пароля, возвращенное <a href="funct.htm#function_password"><code>PASSWORD()
</code></a> не является приемлемым для этого плагина, и попытка установить
пароль, производит ошибку. Разрешенные значения
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>
описаны позже в этом разделе.</li>

<li>Используя строку без
<a href="funct.htm#function_password"><code>PASSWORD()</code></a>.</p>
<p><a href="#set-password"><code>SET PASSWORD</code></a>
интерпретирует строку как строку открытого текста и хеширует это
соответственно для плагина аутентификации учетной записи прежде, чем
сохранить это в строке таблицы <code>mysql.user</code>.</p></li></ul>
<p>См. <a href="security.html#assigning-passwords">раздел 7.3.6</a>.</p>

<p>Следующая таблица показывает разрешенные значения
<a href="server.htm#sysvar_old_passwords"><code>old_passwords</code></a>,
метод хеширования пароля для каждого значения, и какие плагины аутентификации
используют пароли, хешированные с каждым методом.</p>

<table border="1">
<thead><tr><th scope="col">Значение</th><th scope="col">
Метод хеширования пароля</th>
<th scope="col">Связанный плагин аутентификации</th></tr></thead>
<tbody><tr><td scope="row">0</td><td>MySQL 4.1 native</td>
<td><code>mysql_native_password</code></td></tr>
<tr><td scope="row">2</td><td>SHA-256</td>
<td><code>sha256_password</code></td></tr></tbody></table>

<p>Если Вы используете MySQL Replication, в настоящее время,
пароль, используемый ведомым устройством в качестве части
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
ограничен 32 символами в длину, если пароль больше, любые лишние символы
усечены. Это не происходит ни из-за какого предела, наложенного сервером
MySQL вообще, а скорее является проблемой, определенной для MySQL
Replication (см. Bug #43439).</p>

<h4><a name="set-role"></a>14.7.1.12. SET ROLE</h4>
<pre>
SET ROLE
{
DEFAULT
  | NONE
  | ALL
  | ALL EXCEPT <em><code>role</code></em> [, <em><code>role</code></em> ] ...
  | <em><code>role</code></em> [, <em><code>role</code></em> ] ...
}
</pre>

<a href="#set-role"><code>SET ROLE</code></a> изменяет эффективные
привилегии текущего пользователя. Запрос разрешает эти ролевые спецификаторы:
</p>

<ul><li><p><code>DEFAULT</code>:
Установить текущую роль в роль по умолчанию для пользователя.</li>
<li><code>NONE</code>: Установить текущую роль в <code>NONE</code>.</li>
<li><code>ALL</code>: Установить текущую роль во все роли,
предоставленные учетной записи.</li>

<li><code>ALL EXCEPT <em><code>role_list</code></em></code>:
Установить текущую роль во все роли, предоставленные учетной
записи, кроме названных.</li>

<li><code><em><code>role</code></em> [,
<em><code>role</code></em> ] ...</code>:
Установить текущую роль в названные роли.</p></li></ul>

<h3><a name="table-maintenance-sql"></a>14.7.2. Запросы обслуживания таблиц
</h3>
<h4><a name="analyze-table"></a>14.7.2.1. ANALYZE TABLE</h4>
<pre>
ANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE
<em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>] ...
</pre>

<code>ANALYZE TABLE</code> анализирует и хранит ключевое распределение для
таблицы. Во время анализа таблица заблокирована с блокировкой чтения для
<code>InnoDB</code> и <code>MyISAM</code>. Этот запрос работает с
<code>InnoDB</code>, <code>NDB</code> и <code>MyISAM</code>. Для
<code>MyISAM</code> этот запрос эквивалентен использованию
<a href="programs.htm#myisamchk"><span><strong>myisamchk --analyze</strong>
</span></a>. Этот запрос не работает с представлениями.</p>

<p>Для получения дополнительной информации о том, как анализ работает в
пределах <code>InnoDB</code> см. разделы
<a href="innodb.htm#innodb-persistent-stats">16.6.10.1</a>,
<a href="innodb.htm#innodb-analyze-table-complexity">16.6.10.3</a> и
<a href="innodb.htm#innodb-restrictions">16.8.7</a>. В частности, когда Вы
включаете опцию <a href="innodb.htm#sysvar_innodb_stats_persistent"><code>
innodb_stats_persistent</code></a>, Вы должны выполнить
<code>ANALYZE TABLE</code> после загрузки существенных данных в
<code>InnoDB</code> или создания нового индекса.</p>

<p>MySQL использует сохраненное ключевое распределение, чтобы понять порядок,
в котором нужно присоединиться к таблицам, когда Вы выполняете соединение на
чем-то другом, чем константа. Кроме того, ключевые распределения могут
использоваться, решая, который индекс использовать для определенной
таблицы в пределах запроса.</p>

<p>Это запрос требует привилегии
<a href="security.html#priv_select"><code>SELECT</code></a> и
<a href="security.html#priv_insert"><code>INSERT</code></a> на таблице.</p>

<p><code>ANALYZE TABLE</code> поддержан для разделенных таблиц, и Вы можете
использовать <code>ALTER TABLE ... ANALYZE PARTITION</code>, чтобы
проанализировать один или более раздела, для получения дополнительной
информации см. разделы <a href="#alter-table">14.1.7</a> и
<a href="partit.htm#partitioning-maintenance">20.3.4</a>.</p>

<p><code>ANALYZE TABLE</code> возвращает набор результатов
со следующими столбцами.</p>
<table border="1">
<thead><tr><th scope="col">Столбец</th><th scope="col">Значение</th></tr>
</thead>
<tbody><tr><td scope="row"><code>Table</code></td><td>Имя таблицы</td></tr>
<tr><td scope="row"><code>Op</code></td><td>Всегда <code>analyze</code></td>
</tr>
<tr><td scope="row"><code>Msg_type</code></td><td><code>status</code>,
<code>error</code>, <code>info</code>, <code>note</code> или
<code>warning</code></td></tr>
<tr><td scope="row"><code>Msg_text</code></td>
<td>Соответствующее информационное сообщение</td></tr></tbody></table>

<p>Вы можете проверить сохраненное ключевое распределение с
<a href="#show-index"><code>SHOW INDEX</code></a>, см.
<a href="#show-index">раздел 14.7.5.22</a>.</p>

<p>Если таблица не изменилась, начиная с последнего <code>ANALYZE
TABLE</code>, она не проанализирована снова.</p>
<p>По умолчанию сервер пишет <a href="#analyze-table"><code>ANALYZE
TABLE</code></a> в двоичный журнал, чтобы они копировались к ведомым
устройствам репликации. Чтобы подавить журналирование, определите
дополнительное ключевое слово <code>NO_WRITE_TO_BINLOG</code>
или его псевдоним <code>LOCAL</code>.</p>

<h4><a name="check-table"></a>14.7.2.2. CHECK TABLE</h4>
<pre>
CHECK TABLE <em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>]
      ... [<em><code>option</code></em>] ... <em><code>option</code></em> = {
FOR UPGRADE
  | QUICK
  | FAST
  | MEDIUM
  | EXTENDED
  | CHANGED
}
</pre>

<code>CHECK TABLE</code> проверяет таблицу или таблицы на ошибки.
<a href="#check-table"><code>CHECK TABLE</code></a> работает для
таблиц <a href="innodb.htm"><code>InnoDB</code></a>,
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a>,
<a href="storage.htm#archive-storage-engine"><code>ARCHIVE</code></a> и
<a href="storage.htm#csv-storage-engine"><code>CSV</code></a>. Для
<code>MyISAM</code> ключевые статистические данные обновлены также.</p>

<p>Перед выполнением <a href="#check-table"><code>CHECK TABLE</code>
</a> на <code>InnoDB</code> см. <a href="#check-table-innodb">здесь
</a>.</p>

<p>Чтобы проверить таблицу, у Вас должна быть некоторая привилегия для этого.
</p>
<p><code>CHECK TABLE</code> может также проверить представления на проблемы,
такие как таблицы, на которые ссылаются в определении представления, которые
больше не существуют.</p>

<p><code>CHECK TABLE</code> поддержан для разделенных таблиц, и Вы можете
использовать <code>ALTER TABLE ... CHECK PARTITION</code>, чтобы
проверять один или более разделов, для получения дополнительной информации
см. разделы <a href="#alter-table">14.1.7</a> и
<a href="partit.htm#partitioning-maintenance">20.3.4</a>.</p>
<p><code>CHECK TABLE</code> игнорирует произведенные виртуальные столбцы,
которые не индексированы.</p>

<h5><a name="idm139965334739056"></a>Вывод</h5>
<p><code>CHECK TABLE</code> возвращает набор результатов
со следующими столбцами.</p>

<table border="1">
<thead><tr><th scope="col">Столбец</th><th scope="col">Значение</th></tr>
</thead>
<tbody><tr><td scope="row"><code>Table</code></td><td>Имя таблицы</td></tr>
<tr><td scope="row"><code>Op</code></td><td>Всегда <code>check</code></td>
</tr>
<tr><td scope="row"><code>Msg_type</code></td><td><code>status</code>,
<code>error</code>, <code>info</code>, <code>note</code> или
<code>warning</code></td></tr>
<tr><td scope="row"><code>Msg_text</code></td><td>
Соответствующее информационное сообщение</td></tr></tbody></table>

<p>Запрос может произвести много строк информации для каждой проверенной
таблицы. У последней строки есть <code>Msg_type</code> <code>status</code> и
<code>Msg_text</code> обычно должен быть <code>OK</code>. Если это не
<code>OK</code> или <code>Table is already up to date</code> для
<code>MyISAM</code>, Вы должны обычно выполнять ремонт таблицы. См.
<a href="backup.htm#myisam-table-maintenance">раздел 8.6</a>. <code>Table is
already up to date</code> сообщает, что механизм хранения для таблицы указал,
что не было никакой потребности проверить таблицу.</p>

<h5><a name="idm139965334713904"></a>Проверка совместимости вариантов</h5>
<p><code>FOR UPGRADE</code> проверяет, совместимы ли названные таблицы с
текущей версией MySQL. С <code>FOR UPGRADE</code> сервер проверяет каждую
таблицу, чтобы определить, были ли какие-либо несовместимые изменения в
каком-либо из типов данных таблицы или индексе после того, как таблица была
составлена. Если есть возможная несовместимость, сервер осуществляет полную
проверку таблицы (которая может занять время).</p>

<p>Несовместимости могли бы произойти, потому что формат хранения для типа
данных изменился или потому что его порядок сортировки изменился. Наша цель
состоит в том, чтобы избежать этих изменений, но иногда они необходимы, чтобы
исправить проблемы, которые были бы хуже чем несовместимость между выпусками.
</p>

<p><code>FOR UPGRADE</code> обнаруживает эти несовместимости:</p>
<ul><li><p>Порядок индексации в столбцах
<a href="types.htm#blob"><code>TEXT</code></a> для
<code>InnoDB</code> и <code>MyISAM</code>
изменился между MySQL 4.1 и 5.0.</li>

<li>Метод хранения нового типа данных
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
изменился между MySQL 5.0.3 и 5.0.5.</li>

<li>Изменения иногда производятся в наборах символов или сопоставлениях,
которые требуют, чтобы таблица была пересоздана. Для деталей об этих
изменениях и когда <code>FOR UPGRADE</code> их найдет, см.
<a href="install.htm#checking-table-incompatibilities">раздел 2.10.3</a>.
</li>

<li>MySQL 8.0 не поддерживает тип данных <a href="types.htm#year"><code>
YEAR(2)</code></a>, разрешенный в более старых версиях MySQL. Для таблиц,
содержащих столбцы <a href="types.htm#year"><code>YEAR(2)</code></a>,
<a href="#check-table"><code>CHECK TABLE</code></a> рекомендует
<a href="#repair-table"><code>REPAIR TABLE</code></a>, который
конвертирует <a href="types.htm#year"><code>YEAR(2)</code></a> в
<a href="types.htm#year"><code>YEAR(4)</code></a>.</li>
<li>Время создания триггеров поддержано.</p></li></ul>

<h5><a name="idm139965334691312"></a>Проверка последовательности данных</h5>
<p>Следующая таблица показывает другие варианты проверки, которые могут быть
даны. Эти опции передают к механизму хранения, который может использовать
их или нет.</p>

<table border="1">
<thead><tr><th scope="col">Тип</th><th scope="col">Смысл</th></tr></thead>
<tbody><tr><td scope="row"><code>QUICK</code></td><td>Не просматривать
строки, чтобы проверить на неправильные ссылки. Относится к таблицам
<code>InnoDB</code> и <code>MyISAM</code> и представлениям.</td></tr>
<tr><td scope="row"><code>FAST</code></td><td>Проверить только таблицы,
которые не были закрыты должным образом. Применяется только к
<code>MyISAM</code> таблицам и представлениям, проигнорирован для
<code>InnoDB</code>.</td></tr>
<tr><td scope="row"><code>CHANGED</code></td><td>Проверка только таблиц,
которые были изменены, начиная с последней проверки или не были закрыты
должным образом. Применяется только к <code>MyISAM</code> таблицам и
представлениям, проигнорирован для <code>InnoDB</code>.</td></tr>
<tr><td scope="row"><code>MEDIUM</code></td><td>Сканировать строки, чтобы
проверить, которые удаленные ссылки допустимы. Это также вычисляет ключевую
контрольную сумму для строк и проверяет это с расчетной контрольной суммой
для ключей. Применяется только к <code>MyISAM</code>, проигнорирован для
<code>InnoDB</code>.</td></tr>
<tr><td scope="row"><code>EXTENDED</code></td><td>Сделать полный ключевой
поиск для всех ключей для каждой строки. Это гарантирует, что таблица на 100%
последовательна, но занимает много времени. Применяется только к
<code>MyISAM</code>, проигнорирован для <code>InnoDB</code>.
</td></tr></tbody></table>

<p>Если ни одна из опций <code>QUICK</code>,
<code>MEDIUM</code> или <code>EXTENDED</code> не определены, тип проверки
по умолчанию для динамического формата <code>MyISAM</code> <code>MEDIUM
</code>. У этого есть тот же самый результат, как у
<a href="programs.htm#myisamchk"><span><strong>myisamchk
--medium-check <em><code>tbl_name</code></em></strong></span></a>.
Тип проверки по умолчанию также <code>MEDIUM</code> для статического формата
<code>MyISAM</code>, если <code>CHANGED</code> или <code>FAST</code> заданы.
В этом случае значение по умолчанию <code>QUICK</code>. Просмотр строки
пропущен для <code>CHANGED</code> и <code>FAST</code>, так как
строки очень редко повреждаются.</p>

<p>Вы можете объединить опции проверки, как в следующем примере, который
делает быструю проверку на таблице, чтобы определить, было ли это
закрыто должным образом:
<pre>
CHECK TABLE test_table FAST QUICK;
</pre>

<p>Если <a href="#check-table"><code>CHECK TABLE</code></a>
не находит проблем с таблицей, которая отмечена как
<span><span>corrupted</span></span> или <span><span>not closed properly
</span></span>, <a href="#check-table"><code>CHECK TABLE</code></a>
может удалить метку.</p>

<p>Если таблица повреждена, проблема наиболее вероятна в индексировании, а не
в части данных. Все предыдущие типы проверки проверяют индексирование
полностью и должны таким образом найти большинство ошибок.</p>

<p>Если Вы только хотите проверить таблицу, которую Вы считаете нормальной,
Вы не должны использовать опции проверки или <code>QUICK</code>.
Последняя должна использоваться, когда Вы спешите и можете взять на себя
очень маленький риск, что <code>QUICK</code> не находит ошибку в файле с
данными. В большинстве случаев при нормальном использовании MySQL должен
найти любую ошибку в файле с данными. Если это происходит, таблица отмечена
как <span><span>corrupted</span></span> и не может использоваться, пока
она не восстановлена.</p>

<p><code>FAST</code> и <code>CHANGED</code> главным образом предназначены,
чтобы использоваться из скрипта (например, из <span><strong>cron</strong>
</span>), если Вы хотите проверить таблицы время от времени. В большинстве
случаев <code>FAST</code> должен быть предпочтен <code>CHANGED</code>.
Единственный случай, когда это не так, это когда Вы подозреваете, что нашли
ошибку в коде <code>MyISAM</code>.</p>

<p><code>EXTENDED</code> должен использоваться только после того, как Вы
осуществили нормальную проверку, но все еще получаете странные ошибки от
таблицы, когда MySQL пытается обновить строку или найти строку ключом.
Это очень маловероятно, если нормальная проверка преуспела.</p>

<p>Использование <a href="#check-table"><code>CHECK TABLE
... EXTENDED</code></a> может влиять на план
выполнения, произведенный оптимизатором.</p>

<p>Некоторые проблемы, сообщенные <a href="#check-table"><code>CHECK
TABLE</code></a> не могут быть исправлены автоматически:</p>
<ul><li><p><code>Found row where the auto_increment column has the value 0
</code>.</p>

<p>Это означает, что есть строка в таблице, где столбец
<code>AUTO_INCREMENT</code> содержит значение 0. Возможно создать строку, где
<code>AUTO_INCREMENT</code> = 0, явно устанавливая столбец в 0 с помощью
<a href="#update"><code>UPDATE</code></a>.</p>

<p>Это не ошибка само по себе, но может доставить неприятности, если Вы
решаете вывести таблицу в дамп и восстановить ее или сделать
<a href="#alter-table"><code>ALTER TABLE</code></a>. В этом случае
<code>AUTO_INCREMENT</code> изменяет значение согласно правилам
<code>AUTO_INCREMENT</code>, которые могли вызвать проблемы, такие как
ошибка дублирования ключа.</p>

<p>Чтобы избавиться от предупреждения, выполните
<a href="#update"><code>UPDATE</code></a>, чтобы установить
столбец в некоторое значение кроме 0.</p></li></ul>

<h5><a name="check-table-innodb"></a>
Примечания использования CHECK TABLE с InnoDB</h5>
<p>Следующие примечания относятся к таблицам <a href="innodb.htm">
<code>InnoDB</code></a>:</p>

<ul><li><p>Если <a href="#check-table"><code>CHECK TABLE</code></a>
сталкивается с поврежденной страницей, сервер останавливается, чтобы
предотвратить распространение ошибки (Bug #10132). Если повреждение
происходит во вторичном индексе, но табличные данные читаемы, запуск
<a href="#check-table"><code>CHECK TABLE</code></a>
может все еще вызвать выход сервера.</li>

<li>Если <a href="#check-table"><code>CHECK TABLE</code></a>
сталкивается с поврежденным полем <code>DB_TRX_ID</code> или
<code>DB_ROLL_PTR</code> в кластеризируемом индексе,
<a href="#check-table"><code>CHECK TABLE</code></a>
может вызвать доступ <code>InnoDB</code> к недопустимой записи журнала
отмены, приводящей к сбою сервера, связанному с
<a href="glossary.htm#glos_mvcc">MVCC</a>.</li>

<li>Если <a href="#check-table"><code>CHECK TABLE</code></a>
находит ошибки в таблицах или индексах <code>InnoDB</code>,
это сообщает об ошибке и обычно отмечает индекс и иногда таблицу как
поврежденные, предотвращая дальнейшее использование индекса или таблицы.
Такие ошибки включают неправильное число записей во вторичном индексе
или неправильные ссылки.</li>

<li>Если <a href="#check-table"><code>CHECK TABLE</code></a>
находит неправильное число записей во вторичном индексе, он сообщает об
ошибке, но не вызывает выход сервера или запрет доступа к файлу.</li>

<li><a href="#check-table"><code>CHECK TABLE</code></a>
рассматривает структуру индексной страницы, затем рассматривает каждую
запись ключа. Это не проверяет ключевой указатель на кластеризируемую запись
или следует по пути для указателей на
<a href="types.htm#blob"><code>BLOB</code></a>.</li>

<li>Когда таблица <code>InnoDB</code> сохранена в ее собственном
<a href="glossary.htm#glos_ibd_file">файле .ibd</a>, первые 3
<a href="glossary.htm#glos_page">страницы</a> файла <code>.ibd</code>
содержит информацию о заголовке, а не таблицу или данные индекса. <code>CHECK
TABLE</code> не обнаруживает несогласованности, которые затрагивают только
данные о заголовке. Чтобы проверить все содержание файла <code>.ibd</code>,
использщуйте <a href="programs.htm#innochecksum"><span><strong>innochecksum
</strong></span></a>.</li>

<li>Запуская <code>CHECK TABLE</code> на больших таблицах
<code>InnoDB</code>, другие потоки могут быть заблокированы во время
<code>CHECK TABLE</code>. Чтобы избежать тайм-аутов, порог ожидания (600
секунд) расширен на 2 часа (7200 секунд) для <code>CHECK TABLE</code>. Если
<code>InnoDB</code> обнаруживает семафор, который ждет 240 секунд или больше,
он начинает выводить монитор <code>InnoDB</code> в журнал ошибок.
Если запрос блокировки простирается вне порога ожидания семафора,
прерывает процесс. Чтобы избежать возможности семафора ждать тайм-аут
полностью, Вы можете выполнить <code>CHECK TABLE QUICK</code>
вместо <code>CHECK TABLE</code>.</li>

<li><code>CHECK TABLE</code> функциональность для
<code>InnoDB</code> индексов <code>SPATIAL</code>
включает проверку достоверности R-дерева и проверку, чтобы гарантировать,
что количество строк R-дерева соответствует кластеризируемому индексу.</li>

<li><code>CHECK TABLE</code> поддерживает вторичные индексы
на произведенных виртуальных столбцах. <code>InnoDB</code>
имеет поддержку вторичного индекса на произведенных виртуальных столбцах.
</p></li></ul>

<h4><a name="checksum-table"></a>14.7.2.3. CHECKSUM TABLE</h4>
<pre>
CHECKSUM TABLE <em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>]
         ... [ QUICK | EXTENDED ]
</pre>

<a href="#checksum-table"><code>CHECKSUM TABLE</code></a>
сообщает <a href="glossary.htm#glos_checksum">контрольную сумму</a>
для содержания таблицы. Во время работы контрольной суммы таблица
заблокирована с блокировкой чтения для <code>InnoDB</code> и
<code>MyISAM</code>. Вы можете использовать этот запрос, чтобы проверить, что
содержание то же самое прежде и после резервного копирования, отката или
другой работы, которая предназначена, чтобы привести данные в известный
статус. Это запрос требует привилегии
<a href="security.html#priv_select"><code>SELECT</code></a> для таблицы.</p>

<p>Этот запрос не поддержано для представлений. Если Вы выполняете
<code>CHECKSUM TABLE</code> на представлении, значение
<code>Checksum</code> всегда <code>NULL</code> и будет предупреждение.</p>

<h5><a name="idm139965334570832"></a>Исполнительные соображения</h5>
<p>По умолчанию, вся таблица читается построчно, и контрольная сумма
вычислена. Для больших таблиц это может занять много времени, таким образом,
Вы будете только иногда выполнять эту работу. Это вычисление аналогично тому,
что Вы получаете с <code>EXTENDED</code> в <code>InnoDB</code>
и всех других механизмах хранения, кроме <code>MyISAM</code>, а также
таблицах <code>MyISAM</code>, не созданных с <code>CHECKSUM=1</code>.</p>

<p>Для таблиц <code>MyISAM</code>, созданных с
<code>CHECKSUM=1</code>, <code>CHECKSUM TABLE</code> или
<code>CHECKSUM TABLE ... QUICK</code> вернет
<span><span>текущую</span></span> контрольную сумму таблицы,
которая может быть возвращена очень быстро. Если таблица не удовлетворяет
всем этим условиям, <code>QUICK</code> возвращает <code>NULL</code>. См.
<a href="#create-table">раздел 14.1.15</a>.</p>

<p>Для несуществующей таблицы <a href="#checksum-table"><code>CHECKSUM
TABLE</code></a> вернет <code>NULL</code> и предупреждение.</p>
<p>Значение контрольной суммы зависит от формата строки таблицы. Если формат
строки изменяется, контрольная сумма также изменяется. Например, формат
хранения для таких временных типов, как
<a href="types.htm#time"><code>TIME</code></a>,
<a href="types.htm#datetime"><code>DATETIME</code></a> и
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> изменен в MySQL 5.6,
так что при обновлении таблиц с 5.5 до 5.6 значение контрольной
суммы может измениться.</p>

<p>Если контрольные суммы для двух таблиц отличаются, то почти бесспорно, что
таблицы отличаются в некотором роде. Однако, потому что хеширующая функция,
используемая <a href="#checksum-table"><code>CHECKSUM TABLE</code>
</a>, не гарантирована от столкновения, есть небольшой шанс, что две таблицы,
которые не идентичны, могут произвести ту же самую контрольную сумму.</p>

<h4><a name="optimize-table"></a>14.7.2.4. OPTIMIZE TABLE</h4>
<pre>
OPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE
<em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>] ...
</pre>

Реорганизует физическое хранение табличных данных и связанных индексных
данных, чтобы уменьшить место для хранения и улучшить эффективность
ввода/вывода, получая доступ к таблице. Точные изменения, произведенные в
каждой таблице, зависят от <a href="glossary.htm#glos_storage_engine">
механизма хранения</a>, используемого этой таблицей.
Этот запрос не работает с представлениями.</p>

<p>Используйте <a href="#optimize-table"><code>OPTIMIZE TABLE</code>
</a> в этих случаях, в зависимости от типа таблицы:</p>
<ul><li><p>После выполнения существенной вставки, обновления или удаления
на <code>InnoDB</code>, у которой есть ее собственный
<a href="glossary.htm#glos_ibd_file">файл .ibd</a>, потому что она
создавалась с опцией <a href="innodb.htm#sysvar_innodb_file_per_table"><code>
innodb_file_per_table</code></a>. Таблица и индекс реорганизованы, и дисковое
пространство может быть освобождено для использования операционной системой.
</li>

<li>После выполнения существенной вставки, обновления или удаления
на столбцах, которые являются частью <code>FULLTEXT</code> в
<code>InnoDB</code>. Установите опцию
<a href="innodb.htm#sysvar_innodb_optimize_fulltext_only"><code>
innodb_optimize_fulltext_only=1</code></a>.
Чтобы сохранить период обслуживания индекса к соответствующему времени,
установите <a href="innodb.htm#sysvar_innodb_ft_num_word_optimize"><code>
innodb_ft_num_word_optimize</code></a>, чтобы определить, сколько слов
обновить в поисковом индексе, и выполняйте последовательность <code>OPTIMIZE
TABLE</code> до полного обновления поискового индекса.</li>

<li>После удаления значительной части <code>MyISAM</code> или
<code>ARCHIVE</code> или внесения значительных изменений в таблицы
<code>MyISAM</code> или <code>ARCHIVE</code> со строками переменной длины
(таблицы, которые имеют столбцы
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a> или
<a href="types.htm#blob"><code>TEXT</code></a>).
Удаленные строки поддержаны в связанном списке и последующие
<a href="#insert"><code>INSERT</code></a>
повторно используют старые позиции строки. Вы можете использовать
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>, чтобы
восстановить неиспользуемое место и для дефрагментации файла с данными. После
обширных изменений таблицы этот запрос может также улучшить исполнение
запросов, которые используют таблицу, иногда значительно.</p></li></ul>

<p>Этот запрос требует табличных привилегий
<a href="security.html#priv_select"><code>SELECT</code></a> и
<a href="security.html#priv_insert"><code>INSERT</code></a>.</p>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
также поддержан для разделенных таблиц. Для информации об использовании этого
запроса с разделенными таблицами см.
<a href="partit.htm#partitioning-maintenance">раздел 20.3.4</a>.</p>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
работает с таблицами <a href="innodb.htm"><code>InnoDB</code></a>,
<a href="storage.htm#myisam-storage-engine"><code>MyISAM</code></a> и
<a href="storage.htm#archive-storage-engine"><code>ARCHIVE</code></a>.</p>

<p>По умолчанию <a href="#optimize-table"><code>OPTIMIZE TABLE</code>
</a> <span><em>не</em></span> работает для других механизмов хранения
и возвращает результат, указывающий на это. Вы можете сделать, чтобы
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a> работал
для других механизмов хранения, запуская
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a> с
опцией <code>--skip-new</code>. В этом случае
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a> отображен на
<a href="#alter-table"><code>ALTER TABLE</code></a>.</p>

<h5><a name="idm139965334495840"></a>Детали InnoDB</h5>
<p>Для <code>InnoDB</code> <a href="#optimize-table"><code>OPTIMIZE
TABLE</code></a> отображен на
<a href="#alter-table"><code>ALTER TABLE ... FORCE</code></a>,
который пересоздает таблицу, чтобы обновить индексную статистику и свободное
неиспользуемое место в кластеризируемом индексе. Это выведено на экран в
выводе <a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>,
когда Вы выполняете это на <code>InnoDB</code>:
<pre>
mysql&gt; OPTIMIZE TABLE foo;
+----------+----------+----------+-------------------------------------------------------------------+
| Table    | Op       | Msg_type | Msg_text                                                          |
+----------+----------+----------+-------------------------------------------------------------------+
| test.foo | optimize | note     | Table does not support optimize, doing recreate + analyze instead |
| test.foo | optimize | status   | OK                                                                |
+----------+----------+----------+-------------------------------------------------------------------+
</pre>

<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
использует <a href="innodb.htm#innodb-online-ddl">online DDL</a>
(<code>ALGORITHM=INPLACE</code>) для таблиц <code>InnoDB</code>. Это
блокирует таблицу только на краткое время, что уменьшает время простоя для
параллельных операций DML.</p>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
продолжает использовать <code>ALGORITHM=COPY</code>
при следующих условиях:</p>

<ul><li><p>Когда <a href="server.htm#sysvar_old_alter_table"><code>
old_alter_table</code></a> в состоянии ON.</li>
<li>Когда <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> запущен с опцией <code>--skip-new</code>.</p></li></ul>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>,
используя <a href="innodb.htm#innodb-online-ddl">online DDL</a>
(<code>ALGORITHM=INPLACE</code>), не поддержан для таблиц
<code>InnoDB</code> с индексами <code>FULLTEXT</code>.
Тут нужен <code>ALGORITHM=COPY</code>.</p>

<p><code>InnoDB</code> хранит данные, используя метод распределения
страницы и не страдают от фрагментации, как <code>MyISAM</code>.
Оптимизатор рассматривает рабочую нагрузку транзакций, которые
обработает Ваш сервер:</p>

<ul><li><p>Некоторый уровень фрагментации ожидается. <code>InnoDB</code>
заполняет <a href="glossary.htm#glos_page">страницы</a> только на 93%, чтобы
оставить место для обновлений, не имея необходимости разделять страницы.</li>

<li>Операции удаления могут оставить промежутки, которые оставляют страницы
менее заполненными, чем желательно, что может сделать
полезным оптимизировать таблицу.</li>

<li>Обновления строк обычно переписывают данные в пределах той же самой
страницы, в зависимости от типа данных и формата строки, когда достаточное
пространство доступно. См. разделы
<a href="innodb.htm#innodb-compression-internals">16.9.1.5</a> и
<a href="innodb.htm#innodb-row-format-overview">16.10.1</a>.</li>

<li>Рабочие нагрузки высокого параллелизма могли бы оставить промежутки
внутри индекса в течение долгого времени, как <code>InnoDB</code>
сохраняет многократные версии тех же самых данных через его механизм
<a href="glossary.htm#glos_mvcc">MVCC</a>, см.
<a href="innodb.htm#innodb-multi-versioning">раздел 16.3</a>.
</p></li></ul>

<h5><a name="idm139965334454288"></a>Детали MyISAM</h5>
<p>Для таблиц <code>MyISAM</code> <a href="#optimize-table"><code>
OPTIMIZE TABLE</code></a> работает так:</p>

<ol type="1"><li><p>Если таблица удалила или разделила
строки, восстановит таблицу.</li>
<li>Если индексные страницы не сортированы, сортирует их.</li>
<li>Если статистические данные таблицы не современны (и ремонт не может
быть достигнут, сортируя индекс), обновит их.</p></li></ol>

<h5><a name="idm139965334447616"></a>Другие соображения</h5>
<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
возвращает набор результатов со следующими столбцами.</p>

<table border="1">
<thead><tr><th scope="col">Столбец</th><th scope="col">Значение</th></tr>
</thead>
<tbody><tr><td scope="row"><code>Таблица</code></td><td>Имя таблицы</td></tr>
<tr><td scope="row"><code>Op</code></td><td>Всегда <code>optimize</code></td>
</tr>
<tr><td scope="row"><code>Msg_type</code></td><td><code>status</code>,
<code>error</code>, <code>info</code>, <code>note</code> или
<code>warning</code></td></tr>
<tr><td scope="row"><code>Msg_text</code></td><td>
Соответствующее информационное сообщение</td></tr></tbody></table>

<p>Для таблиц <code>InnoDB</code> до 5.7.4 и других табличных типов MySQL
<a href="glossary.htm#glos_table_lock">блокирует таблицу</a>
в течение времени работы <a href="#optimize-table"><code>OPTIMIZE
TABLE</code></a>. <a href="#optimize-table"><code>OPTIMIZE TABLE
</code></a> выполнен онлайн для обычных и
разделенных таблиц <code>InnoDB</code>.</p>

<p>По умолчанию сервер пишет <a href="#optimize-table"><code>OPTIMIZE
TABLE</code></a> в двоичный журнал так, чтобы они копировались к ведомым
устройствам. Чтобы подавить журналирование, определите дополнительный
параметр <code>NO_WRITE_TO_BINLOG</code> или <code>LOCAL</code>.</p>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
не сортирует R-дерево индекса, такое как пространственный индекс на
столбцах <code>POINT</code> (Bug #23578).</p>

<p><a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
ловит и бросает любые ошибки, которые происходят, копируя табличную
статистику от старого файла в недавно созданный. Например. если
пользовательский ID владельца файла <code>.MYD</code> или <code>.MYI</code>
отличается от пользовательского ID процесса <a href="programs.htm#mysqld">
<span><strong>mysqld</strong></span></a>,
<a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
производит ошибку "cannot change ownership of the file", если
<a href="programs.htm#mysqld"><span><strong>mysqld</strong></span></a>
не запущен от имени <code>root</code>.</p>

<h4><a name="repair-table"></a>14.7.2.5. REPAIR TABLE</h4>
<pre>
REPAIR [NO_WRITE_TO_BINLOG | LOCAL] TABLE
<em><code>tbl_name</code></em> [, <em><code>tbl_name</code></em>] ...
[QUICK] [EXTENDED] [USE_FRM]
</pre>

<a href="#repair-table"><code>REPAIR TABLE</code></a>
восстанавливает возможно поврежденную таблицу, для определенных механизмов
хранения. По умолчанию это имеет тот же самый эффект, как
<a href="programs.htm#myisamchk"><span><strong>myisamchk --recover
<em><code>tbl_name</code></em></strong></span></a>.
<a href="#repair-table"><code>REPAIR TABLE</code></a> работает для
таблиц <code>MyISAM</code>, <code>ARCHIVE</code> и <code>CSV</code>, см.
разделы <a href="storage.htm#myisam-storage-engine">17.2</a>
<a href="storage.htm#archive-storage-engine">17.5</a> и
<a href="storage.htm#csv-storage-engine">17.4</a>.
Этот запрос не работает с представлениями.</p>

<p>Нужны привилегии <a href="security.html#priv_select"><code>SELECT</code>
</a> и <a href="security.html#priv_insert"><code>INSERT</code></a>
на уровне таблицы.</p>

<p>Вы можете использовать <code>ALTER TABLE ... REPAIR PARTITION</code>,
чтобы восстановить один или более разделов, см. разделы
<a href="#alter-table">14.1.7</a> и
<a href="partit.htm#partitioning-maintenance">20.3.4</a>.</p>

<p>Хотя обычно Вам никогда не придется выполнять
<a href="#repair-table"><code>REPAIR TABLE</code></a>,
этот запрос, очень вероятно, возвратит все Ваши данные из таблицы
<code>MyISAM</code>. Если Ваши таблицы становятся поврежденными часто,
попытайтесь найти причину этого, чтобы избавиться от необходимости
использовать <a href="#repair-table"><code>REPAIR TABLE</code></a>.
См. разделы <a href="error.htm#crashing">B.5.3.3</a> и
<a href="storage.htm#myisam-table-problems">17.2.4</a>.</p>

<p>Сделайте резервное копирование таблицы прежде, чем выполнить работу по
ремонту таблицы: при некоторых обстоятельствах эта работа может вызвать
потерю данных. Возможные причины включают, но не ограничены ошибками файловой
системы. См. <a href="backup.htm">главу 8</a>.</p>

<p>Если сервер отказывает во время <a href="#repair-table"><code>
REPAIR TABLE</code></a>, важно после перезапуска немедленно выполнить
<a href="#repair-table"><code>REPAIR TABLE</code></a>
для таблицы прежде, чем выполнить любые другие операции на ней. В худшем
случае у Вас мог бы быть новый чистый индексный файл без информации о файле с
данными, и затем следующая работа, которую Вы выполняете, могла перезаписать
файл с данными. Это маловероятный, но возможный сценарий, который
подчеркивает значение создания резервной копии сначала.</p>

<p><a href="#repair-table"><code>REPAIR TABLE</code></a>
возвращает набор результатов со следующими столбцами.</p>
<table border="1">
<thead><tr><th scope="col">Столбец</th><th scope="col">Значение</th></tr>
</thead>
<tbody><tr><td scope="row"><code>Table</code></td><td>Имя таблицы</td></tr>
<tr><td scope="row"><code>Op</code></td><td>Всегда <code>repair</code></td>
</tr>
<tr><td scope="row"><code>Msg_type</code></td><td><code>status</code>,
<code>error</code>, <code>info</code>, <code>note</code> или
<code>warning</code></td></tr>
<tr><td scope="row"><code>Msg_text</code></td><td>
Соответствующее информационное сообщение</td></tr></tbody></table>

<p><a href="#repair-table"><code>REPAIR TABLE</code></a>
может произвести много строк информации для каждой восстановленной таблицы.
У последней строки есть <code>Msg_type</code> = <code>status</code> и
<code>Msg_test</code> обычно должен быть <code>OK</code>. Если это не
<code>OK</code> для таблицы <code>MyISAM</code>, Вы должны попытаться
восстановить ее с <a href="programs.htm#myisamchk"><span><strong>myisamchk
--safe-recover</strong></span></a>. <a href="#repair-table"><code>
REPAIR TABLE</code></a> не осуществляет все опции
<a href="programs.htm#myisamchk"><span><strong>myisamchk</strong></span></a>.
С <a href="programs.htm#myisamchk"><span><strong>myisamchk
--safe-recover</strong></span></a> Вы можете также использовать опции,
которые не поддерживает <a href="#repair-table"><code>REPAIR TABLE
</code></a>, например,
<a href="programs.htm#option_myisamchk_max-record-length"><code>
--max-record-length</code></a>.</p>

<p>Если Вы используете опцию <code>QUICK</code>,
<a href="#repair-table"><code>REPAIR TABLE</code></a>
попытается восстановить только индексный файл, а не файл с данными. Этот тип
ремонта походит на <a href="programs.htm#myisamchk"><span><strong>myisamchk
--recover --quick</strong></span></a>.</p>

<p>Если Вы используете опцию <code>EXTENDED</code>, MySQL
создает индекс строку за строкой вместо того, чтобы создать индекс за один
раз с сортировкой. Этот тип ремонта походит на
<a href="programs.htm#myisamchk"><span><strong>myisamchk --safe-recover
</strong></span></a>.</p>

<p>Опция <code>USE_FRM</code> доступна для использования, если
индексный файл <code>.MYI</code> отсутствует или если его заголовок
поврежден. Эта опция говорит MySQL не доверять информации из заголовка файла
<code>.MYI</code> и обновлять это, используя информацию из словаря данных.
Этот вид ремонта не может быть сделан с <a href="programs.htm#myisamchk">
<span><strong>myisamchk</strong></span></a>.</p>

<p>Используйте <code>USE_FRM</code> <span><em>только</em></span>, если
Вы не можете использовать обычные режимы <code>REPAIR</code>.
Сообщение серверу проигнорировать файл <code>.MYI</code>
делает важные табличные метаданные, сохраненные в <code>.MYI</code>,
недоступными процессу ремонта, у этого могут быть вредные последствия:</p>

<ul><li><p>Текущее значение <code>AUTO_INCREMENT</code> потеряно.</li>
<li>Ссылка к удаленным записям в таблице потеряна, что означает, что
свободное пространство останется незанятым.</li>

<li>Заголовок <code>.MYI</code> указывает, сжата ли таблица. Если сервер
игнорирует эту информацию, он не может сказать, что таблица сжата, и ремонт
может вызвать изменение или потерю табличного содержания. Это означает, что
<code>USE_FRM</code> не должна использоваться со сжатыми таблицами. Это не
должно быть необходимо: сжатые таблицы предназначены только для чтения, таким
образом, они не должны стать поврежденными.</p></li></ul>

<p>Если <code>USE_FRM</code> <span><em>не</em></span> используется,
<a href="#repair-table"><code>REPAIR TABLE</code></a>
проверяет таблицу, чтобы видеть, требуется ли обновление. Если так, это
выполняет обновление по тем же самым правилам, как
<a href="#check-table"><code>CHECK TABLE ... FOR UPGRADE</code></a>.
См. <a href="#check-table">раздел 14.7.2.2</a>.</p>

<p>По умолчанию, сервер пишет <a href="#repair-table"><code>REPAIR
TABLE</code></a> в двоичный журнал так, чтобы они копировались к ведомым
устройствам. Чтобы подавить журналирование, определите дополнительный
параметр <code>NO_WRITE_TO_BINLOG</code> или <code>LOCAL</code>.</p>

<p>Когда таблица на ведущем устройстве становится поврежденной, и Вы
выполняете <a href="#repair-table"><code>REPAIR TABLE</code></a>,
любые получающиеся изменения оригинальной таблицы <span><em>не</em></span>
размножены ведомым устройствам.</p>

<p>Вы можете быть в состоянии увеличить скорость
<a href="#repair-table"><code>REPAIR TABLE</code></a>, устанавливая
определенные системные переменные. См.
<a href="optimiz.htm#repair-table-speed">раздел 9.6.3</a>.</p>

<h3><a name="component-sql"></a>14.7.3. Компоненты, плагины и определяемые
пользователем функциональные запросы</h3>
<h4><a name="create-function-udf"></a>14.7.3.1. CREATE FUNCTION</h4>
<pre>
CREATE [AGGREGATE] FUNCTION <em><code>function_name</code></em>
       RETURNS {STRING|INTEGER|REAL|DECIMAL}
       SONAME <em><code>shared_library_name</code></em>
</pre>

User-defined function (UDF) является способом расширить MySQL с новой
функцией, которая работает как родная (встроенная) функция MySQL, например,
<a href="funct.htm#function_abs"><code>ABS()</code></a> или
<a href="funct.htm#function_concat"><code>CONCAT()</code></a>.</p>

<p><em><code>function_name</code></em> имя, которое должно использоваться в
запросах SQL, чтобы вызвать функцию. <code>RETURNS</code>
указывает на тип возвращаемого значения функции.
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a>
допустимое значение после <code>RETURNS</code>, но в настоящее время
<a href="types.htm#fixed-point-types"><code>DECIMAL</code></a> возвращают
строковые значения и должны быть написаны как <code>STRING</code>.</p>

<p><em><code>shared_library_name</code></em> это базовое имя совместно
используемого файла библиотеки, который содержит код, который осуществляет
функцию. Файл должен быть расположен в каталоге плагинов. Этот каталог дан
значением <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.
См. <a href="extend.htm#udf-compiling">раздел 26.4.2.5</a>.</p>

<p>Чтобы создать функцию, Вы должны иметь привилегию
<a href="security.html#priv_insert"><code>INSERT</code></a> для базы данных
<code>mysql</code>. Это необходимо потому что
<a href="#create-function"><code>CREATE FUNCTION</code></a>
добавляет строку к системной таблице <code>mysql.func</code>, которая делает
запись имени функции и имени библиотеки. Если у Вас нет этой таблицы, Вы
должны выполнить <a href="programs.htm#mysql-upgrade"><span><strong>
mysql_upgrade</strong></span></a>, чтобы создать ее. См.
<a href="programs.htm#mysql-upgrade">раздел 5.4.5</a>.</p>

<p>Активная функция это та, которая была загружена
<a href="#create-function"><code>CREATE FUNCTION</code></a>
и не удалена с <a href="#drop-function"><code>DROP FUNCTION</code></a>.
Все активные функции перезагружены каждый раз, когда сервер запускается, если
Вы не запускаете <a href="programs.htm#mysqld"><span><strong>mysqld</strong>
</span></a> с опцией <a href="server.htm#option_mysqld_skip-grant-tables">
<code>--skip-grant-tables</code></a>. В этом случае инициализация UDF
пропущена и UDF недоступны.</p>

<p>См. <a href="extend.htm#adding-udf">раздел 26.4.2</a>.
Для механизма UDF, чтобы работать, функции должны быть написаны на C или C++
(или другом языке, который может использовать соглашение вызова C), Ваша
операционная система должна поддерживать динамическую загрузку, и Вы должны
собрать <a href="programs.htm#mysqld"><span><strong>mysqld</strong></span>
</a> динамически (не статически).</p>

<p><code>AGGREGATE</code> работает точно как совокупная функция MySQL вроде
<code>SUM</code> или <a href="funct.htm#function_count"><code>COUNT()</code>
</a>. Чтобы <code>AGGREGATE</code> работала, Ваша таблица
<code>mysql.func</code> должна содержать столбец <code>type</code>. Если это
не так, выполните <a href="programs.htm#mysql-upgrade"><span><strong>
mysql_upgrade</strong></span></a> (см. <a href="programs.htm#mysql-upgrade">
раздел 5.4.5</a>.</p>

<p>Чтобы обновить совместно используемую библиотеку UDF, используйте
<a href="#drop-function"><code>DROP FUNCTION</code></a>,
обновите совместно используемую библиотеку, и затем скомандуйте
<a href="#create-function"><code>CREATE FUNCTION</code></a>. Если Вы
обновляете совместно используемую библиотеку сначала и затем используете
<a href="#drop-function"><code>DROP FUNCTION</code></a>,
сервер может рухнуть.</p>

<h4><a name="drop-function-udf"></a>14.7.3.2. DROP FUNCTION</h4>
<pre>
DROP FUNCTION <em><code>function_name</code></em>
</pre>
Этот запрос удаляет определяемую пользователем функцию (UDF)
<em><code>function_name</code></em>.</p>

<p>Чтобы удалить функцию, Вы должны иметь привилегию
<a href="security.html#priv_delete"><code>DELETE</code></a> для базы данных
<code>mysql</code>. Это потому, что
<a href="#drop-function"><code>DROP FUNCTION</code></a>
удаляет строку из системной таблицы <code>mysql.func</code>, которая делает
запись имени функции.</p>

<p><a href="#drop-function"><code>DROP FUNCTION</code></a>
также используется, чтобы удалить сохраненные функции (см.
<a href="#drop-procedure">раздел 14.1.23</a>).</p>

<h4><a name="install-component"></a>14.7.3.3. INSTALL COMPONENT</h4>
<pre>
INSTALL COMPONENT <em><code>component_name</code></em> [, <em><code>component_name</code></em> ] ...
</pre>

Этот запрос устанавливает один или более серверных компонентов, которые
становятся активными немедленно. Компонент оказывает услуги, которые доступны
серверу и другим компонентам.
<a href="#install-component"><code>INSTALL COMPONENT</code></a>
требует привилегию <a href="security.html#priv_insert"><code>INSERT</code>
</a> для таблицы <code>mysql.component</code>.</p>

<p>Служба загрузчика обрабатывает установку компонентов, а
также перечисляет установленные компоненты в <code>mysql.component</code>,
которая служит регистрацией. Для последующих перезапусков сервера любые
компоненты, перечисленные в <code>mysql.component</code>,
установлены службой загрузчика во время запуска. Это происходит, даже если
сервер запущен с <a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a> (это отличается от эффекта той опции в
подавлении загрузки <code>mysql.event</code>,
<code>mysql.func</code> и <code>mysql.proc</code>).</p>

<p>Если компонент зависит от служб, не существующих в регистрации, и Вы
пытаетесь установить компонент, также не устанавливая компонент или
компоненты, которые оказывают услуги, от которых это
зависит, ошибка происходит:
<pre>
ERROR 3527 (HY000): Cannot satisfy dependency for service 'component1'
required by component 'component2'.
</pre>

Чтобы избежать этого, устанавливайте все компоненты в том же самом запросе
или устанавливайте зависимый компонент после установки любых компонентов, от
которых это зависит.</p>

<p>Если ошибка происходит, запрос не имеет никакого эффекта. Например, это
происходит, если название компонента ошибочно, названный компонент не
существует или уже установлен или инициализация терпит неудачу.</p>

<p>В настоящее время названия компонента это URN, которые начинаются
<code>file://</code> и для которого следующее значение имени файла не
содержит имен каталогов и задано относительно каталога, названного
в переменной <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code>
</a>. Названия компонента не включают зависимого от платформы суффикса
имени файла, например, <code>.so</code> или <code>.dll</code>.
Эти детали подвержены изменениям, потому что интерпретация названия
компонента самостоятельно выполнена службой, и составляющая инфраструктура
позволяет заменить выполнение службы по умолчанию альтернативным выполнением.
</p>

<p>Например:
<pre>
INSTALL COMPONENT 'file://component1', 'file://component2';
</pre>
См. <a href="server.htm#server-components">раздел 6.5</a>.</p>

<h4><a name="install-plugin"></a>14.7.3.4. INSTALL PLUGIN</h4>
<pre>
INSTALL PLUGIN <em><code>plugin_name</code></em> SONAME '<em><code>shared_library_name</code></em>'
</pre>

Этот запрос устанавливает плагин сервера. Это требует привилегии
<a href="security.html#priv_insert"><code>INSERT</code></a> для
таблицы <code>mysql.plugin</code>.</p>

<p><em><code>plugin_name</code></em> это название плагина как определено в
дескрипторной структуре, содержавшейся в файле библиотеки (см.
<a href="extend.htm#plugin-data-structures">раздел 26.2.4.2</a>).
Имена не являются чувствительными к регистру. Для максимальной совместимости
имена должны быть ограничены символами ASCII, цифрами
и подчеркиванием, потому что они используются в исходных файлах C и SQL.</p>

<p><em><code>shared_library_name</code></em> название совместно используемой
библиотеки, которая содержит код плагина. Имя включает расширение имени файла
(например, <code>libmyplugin.so</code>,
<code>libmyplugin.dll</code> или <code>libmyplugin.dylib</code>).</p>

<p>Совместно используемая библиотека должна быть расположена в каталоге
плагинов (указан в <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir
</code></a>). Библиотека должна быть непосредственно в каталоге, не в
подкаталоге. По умолчанию
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a> это
подкаталог <code>plugin</code> в соответствии с каталогом, названным
переменной <code>pkglibdir</code>, но это может быть изменено, устанавливая
значение <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>
при запуске сервера. Например, установите ее значение в файле
<code>my.cnf</code>:
<pre>
[mysqld]
plugin_dir=<em><code>/path/to/plugin/directory</code></em>
</pre>

Если значение <a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code>
</a> относительный путь, это взято относительно основного каталога MySQL
(значение <a href="server.htm#sysvar_basedir"><code>basedir</code></a>).</p>

<p><a href="#install-plugin"><code>INSTALL PLUGIN</code></a>
загрузки и инициализируют сменный код, чтобы сделать плагин доступным для
использования. Плагин инициализирован, выполняя его функцию инициализации,
которая обрабатывает любую установку, которую должен выполнить плагин прежде,
чем это сможет использоваться. Когда сервер закрывается, он выполняет функцию
парковки для каждого плагина, который загружен так, чтобы у плагина был шанс
выполнить любую заключительную уборку.</p>

<p><a href="#install-plugin"><code>INSTALL PLUGIN</code></a>
также регистрирует плагин, добавляя строку, которая указывает на имя плагина
и имя файла библиотеки в таблицу <code>mysql.plugin</code>.
При запуске сервера он загружает и инициализирует любой плагин, который
перечислен в <code>mysql.plugin</code>. Это означает, что плагин
установлен с <a href="#install-plugin"><code>INSTALL PLUGIN</code>
</a>, только однажды, а не каждый раз, когда сервер запускается. Загрузки
плагина при запуске не происходит, если сервер запущен с опцией
<a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a>.</p>

<p>Библиотека может содержать много плагинов.
Для каждого из них используйте отдельный запрос
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a>.
Каждый запрос называет различный плагин, но все они определяют то же
самое имя библиотеки.</p>

<p><a href="#install-plugin"><code>INSTALL PLUGIN</code></a>
заставляет сервер читать файл опций (<code>my.cnf</code>), как во время
запуска сервера. Это позволяет плагину поднять любые соответствующие опции от
тех файлов. Возможно добавить опции к файлу опции даже прежде, чем загрузить
плагин (если использовать префикс <code>loose</code>).
Также возможно удалить плагин, отредактировать <code>my.cnf</code> и
установить плагин снова. Перезапуск плагина этим путем приводит к новым
значениям опции без перезапуска сервера.</p>

<p>Для опций, которые управляют отдельным плагином, загружающимся при запуске
сервера, см. <a href="server.htm#server-plugin-loading">
раздел 6.6.2</a>. Если Вы должны загрузить плагины для запуска
сервера, когда задана опция
<a href="server.htm#option_mysqld_skip-grant-tables"><code>
--skip-grant-tables</code></a> (которая говорит серверу не читать системные
таблицы), используйте опцию <a href="server.htm#option_mysqld_plugin-load">
<code>--plugin-load</code></a>, см.
<a href="server.htm#server-options">раздел 6.1.4</a>.</p>

<p>Чтобы удалить плагин, используйте запрос
<a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.</p>
<p>См. <a href="server.htm#server-plugin-loading">раздел 6.6.2</a>.</p>

<p>Чтобы видеть, какие плагины установлены, используйте
<a href="#show-plugins"><code>SHOW PLUGINS</code></a>
или смотрите таблицу <a href="inform.htm#plugins-table">
<code>INFORMATION_SCHEMA.PLUGINS</code></a>.</p>

<p>Если Вы повторно собираете библиотеку и надо повторно установить ее, Вы
можете использовать любой из следующих методов:</p>
<ul><li><p>Используйте <a href="#uninstall-plugin"><code>UNINSTALL
PLUGIN</code></a>, чтобы удалить все плагины в библиотеке, установите новый
файл библиотеки в каталоге, и затем используйте
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a>, чтобы
устанавливать все плагины в библиотеке. У этой процедуры есть преимущество,
что это может использоваться, не останавливая сервер. Однако, если
библиотека содержит много плагинов, Вы должны выпустить много запросов
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a> и
<a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.</li>
<li>Остановите сервер, установите новый файл
библиотеки и перезапустите сервер.</p></li></ul>

<h4><a name="uninstall-component"></a>14.7.3.5. UNINSTALL COMPONENT</h4>
<pre>
UNINSTALL COMPONENT <em><code>component_name</code></em> [, <em><code>component_name</code></em> ] ...
</pre>

Этот запрос дезактивирует и удаляет один или более серверных компонентов. Это
требует привилегии <a href="security.html#priv_delete"><code>DELETE</code>
</a> для таблицы <code>mysql.component</code>.
<a href="#uninstall-component"><code>UNINSTALL COMPONENT</code></a>
дополнение <a href="#install-component"><code>INSTALL COMPONENT</code>
</a>.</p>

<p>Служба загрузчика также разрегистрирует удаленные компоненты в
A loader service also unregisters uninstalled components from
<code>mysql.component</code>. В результате они больше не установлены во время
запуска для последующих перезапусков сервера.</p>

<p>Если ошибка происходит, запрос не имеет никакого эффекта. Например, это
происходит, если название компонента ошибочно, названный компонент не
установлен или не может быть удален, потому что другие установленные
компоненты зависят от этого.</p>
<p>См. <a href="#install-component">раздел 14.7.3.3</a>.</p>

<p>Пример:
<pre>
UNINSTALL COMPONENT 'file://component2';
</pre>
См. <a href="server.htm#server-components">раздел 6.5</a>.</p>

<h4><a name="uninstall-plugin"></a>14.7.3.6. UNINSTALL PLUGIN</h4>
<pre>
UNINSTALL PLUGIN <em><code>plugin_name</code></em>
</pre>

Этот запрос удаляет установленный плагин сервера. Это требует привилегию
<a href="security.html#priv_delete"><code>DELETE</code></a> на системной
таблице <code>mysql.plugin</code>. <a href="#uninstall-plugin"><code>
UNINSTALL PLUGIN</code></a> дополняет <a href="#install-plugin"><code>
INSTALL PLUGIN</code></a>.</p>

<p><em><code>plugin_name</code></em> должно быть названием некоторого плагина,
который перечислен в таблице <code>mysql.plugin</code>.
Сервер выполняет функцию парковки плагина и удаляет строку для плагина из
таблицы <code>mysql.plugin</code>, чтобы последующие перезапуски сервера не
загрузили и инициализировали плагин. <a href="#uninstall-plugin">
<code>UNINSTALL PLUGIN</code></a> не удаляет совместно используемый
файл библиотеки плагина.</p>

<p>Вы не можете удалить плагин, если любая таблица, которая
использует это, открыта.</p>
<p>У удаления есть значения для использования связанных таблиц. Например,
если полнотекстовый плагин анализатора связан с индексом
<code>FULLTEXT</code> таблицы, удаление плагина делает таблицу непригодной.
Любая попытка получить доступ к таблице приводит к ошибке. Таблица не может
даже быть открыта, таким образом, Вы не можете удалить индекс, для которого
используется плагин. Это означает, что удаление плагина является чем-то, что
надо делать аккуратно. Если Вы удаляете плагин без намерения повторно
установить это позже, и Вы заботитесь о табличном содержании, Вы должны
вывести таблицу в дамп с помощью <a href="programs.htm#mysqldump"><span>
<strong>mysqldump</strong></span></a> и удалить <code>WITH PARSER</code> из
<a href="#create-table"><code>CREATE TABLE</code></a> в дампе, чтобы
Вы могли перезагрузить таблицу позже. Если Вы не заботитесь о таблице,
<a href="#drop-table"><code>DROP TABLE</code></a> может
использоваться, даже если какие-либо плагины,
связанные с таблицей, отсутствуют.</p>
<p>См. <a href="server.htm#server-plugin-loading">раздел 6.6.2</a>.</p>

<h3><a name="set-statement"></a>14.7.4. SET</h3>
<p><a href="#set-statement"><code>SET</code></a>
имеет несколько форм:</p>

<ul><li><p><a href="#set-variable"><code>SET
<em><code>var_name</code></em> = <em><code>value</code></em></code></a>
позволяет Вам назначить значения на переменные, которые затрагивают работу
сервера или клиентов. См. <a href="#set-variable">раздел 14.7.4.1</a>.
</li>

<li><a href="#set-character-set"><code>SET CHARACTER SET</code></a> и
<a href="#set-names"><code>SET NAMES</code></a>
назначают значения набора символов и сопоставления, связанные с текущим
соединением с сервером. См. разделы
<a href="#set-character-set">14.7.4.2</a> и
<a href="#set-names">14.7.4.3</a>.</li>

<li><a href="#set-default-role"><code>SET DEFAULT ROLE</code></a> и
<a href="#set-role"><code>SET ROLE</code></a> устанавливают роль по
умолчанию и текущую роль для учетных записей пользователя. См. разделы
<a href="#set-default-role">14.7.1.10</a> и
<a href="#set-role">14.7.1.12</a>.</li>

<li><a href="#set-password"><code>SET PASSWORD</code></a>
назначает пароли учетной записи. См.
<a href="#set-password">раздел 14.7.1.11</a>.</li>

<li><a href="#set-transaction"><code>SET TRANSACTION ISOLATION LEVEL
</code></a> устанавливает уровень изоляции для обработки транзакций. См.
<a href="#set-transaction">раздел 14.3.6</a>.</p></li></ul>

<h4><a name="set-variable"></a>14.7.4.1. SET для назначения переменных</h4>
<pre>
SET <em><code>variable_assignment</code></em> [, <em><code>variable_assignment</code></em>] ...
<em><code>variable_assignment</code></em>:
  <em><code>user_var_name</code></em> = <em><code>expr</code></em>
| <em><code>param_name</code></em> = <em><code>expr</code></em>
| <em><code>local_var_name</code></em> = <em><code>expr</code></em>
| [GLOBAL | SESSION | PERSIST]
<em><code>system_var_name</code></em> = <em><code>expr</code></em>
| [@@global. | @@session. | @@persist. | @@]
<em><code>system_var_name</code></em> = <em><code>expr</code></em>
</pre>

<a href="#set-variable"><code>SET</code></a> для назначения переменных
позволяет Вам назначить значения на различные типы переменных, которые
затрагивают работу сервера или клиентов:</p>

<ul><li><p>Системные переенные. См.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.
Системные переенные также могут быть установлены при запуске сервера, как
описано в <a href="server.htm#using-system-variables">разделе 6.1.6</a>.
Чтобы <span><em>вывести на экран</em></span> имя и значение системные
переменной, используйте <a href="#show-variables"><code>SHOW
VARIABLES</code></a>, см.
<a href="#show-variables">раздел 14.7.5.39</a>.</li>

<li>Определяемые пользователем переменные. См.
<a href="lang.htm#user-variables">раздел 10.4</a>.</li>
<li>Параметры хранимых процедур и функций
и местные переменные сохраненной подпрограммы. См.
<a href="#stored-program-variables">раздел 14.6.4</a>.</p></li></ul>

<p><a href="#set-variable"><code>SET</code></a>, который назначает
переменные значения, не записан в двоичный журнал, таким образом, в скриптах
репликации это затрагивает только хост, на котором Вы выполняете это. Чтобы
затронуть все хосты, выполните запрос на каждом.</p>

<p>Следующие примеры иллюстрируют
<a href="#set-variable"><code>SET</code></a>
для того, чтобы установить переменные. Они используют оператор назначения
<a href="funct.htm#operator_assign-equal"><code>=</code></a>, но оператор
назначения <a href="funct.htm#operator_assign-value"><code>:=</code></a>
также разрешен с этой целью.</p>

<p>Пользовательская переменная записана как
<code>@<em><code>var_name</code></em></code>
и назначено значение выражения следующим образом:
<pre>
SET @<em><code>var_name</code></em> = <em><code>expr</code></em>;
</pre>

Примеры:
<pre>
SET @name = 43;
SET @total_tax = (SELECT SUM(tax) FROM taxable_transactions);
</pre>

Как демонстрирующийся этими запросами, <em><code>expr</code></em>
может быть простым (буквальное значение) или более сложным
(значение, возвращенное скалярным подзапросом).</p>

<p><a href="#set-variable"><code>SET</code></a>
относится к параметрам и местным переменным в контексте объекта, в пределах
которого они определены. Следующая процедура использует
местную переменную <code>counter</code> как счетчик:
<pre>
CREATE PROCEDURE p()
BEGIN
  DECLARE counter INT DEFAULT 0;
  WHILE counter &lt; 10 DO
    -- ... do work ...
    SET counter = counter + 1;
  END WHILE;
END;
</pre>

Много системных переменных являются динамичными и могут быть изменены во
время выполнения при использовании <a href="#set-variable"><code>SET
</code></a>. Список см. в
<a href="server.htm#dynamic-system-variables">разделе 6.1.6.2</a>.
Чтобы изменить системную переменную с
<a href="#set-variable"><code>SET</code></a>,
обратитесь к этому по имени, произвольно предваренному модификатором:</p>

<ul><li><p>Чтобы указать, что переменная глобальная, предшествуйте ее имени
<code>GLOBAL</code> или <code>@@global.</code>:
<pre>
SET GLOBAL max_connections = 1000;
SET @@global.max_connections = 1000;
</pre>
Привилегия <a href="security.html#priv_super"><code>SUPER</code></a> нужна,
чтобы устанавливать глобальные переменные.</li>

<li>Другой способ установить глобальную переменную состоит в том, чтобы
поставить перед именем ключевое слово <code>PERSIST</code> или
<code>@@persist.</code>:
<pre>
SET PERSIST max_connections = 1000;
SET @@persist.max_connections = 1000;
</pre>

<code>SET</code> позволяет Вам произвести изменения конфигурации во время
выполнения, которые также сохраняются через перезапуски сервера. Как
<a href="#set-variable"><code>SET GLOBAL</code></a>,
<a href="#set-variable"><code>SET PERSIST</code></a>
изменяет значение переменной во время выполнения, но также пишет установку
переменной в файл опции <code>mysqld-auto.cnf</code>
в каталоге данных (заменяющий любую существующую установку переменной,
если есть). При запуске сервер обрабатывает этот файл после всех других
файлов опции. Нужна привилегия <a href="security.html#priv_super"><code>
SUPER</code></a>, чтобы сохранять глобальные переменные.</p>

<p>Управление <code>mysqld-auto.cnf</code>
нужно оставить серверу и не выполнять вручную:</p>
<ul><li><p>Удаление файла приведет к потере всех сохраненных настроек при
следующем запуске сервера. Это допустимо, если Ваше намерение состоит в том,
чтобы реконфигурировать сервер без этих настроек.</li>

<li>Изменения файла могут привести к ошибке разбора при запуске сервера. В
этом случае сервер сообщает об ошибке и завершается. Если эта проблема
происходит, запустите сервер с выключенной переменной
<a href="server.htm#sysvar_persisted_globals_load"><code>
persisted_globals_load</code></a> или с опцией <code>--no-defaults</code>.
Альтернативно, удалите файл <code>mysqld-auto.cnf</code>,
но, как отмечено ранее, удаляя этот файл потеряете все сохраненные настройки.
</p></li></ul>

<p>Переменная плагина может быть сохранена, если плагин установлен, когда
выполнен <a href="#set-variable"><code>SET PERSIST</code></a>.
Назначение сохраненной переменной плагина вступает в силу для последующих
перезапусков сервера, если плагин все еще установлен. Если плагин больше не
будет установлен, то переменная не будет существовать, когда сервер будет
читать файл <code>mysqld-auto.cnf</code>. В этом случае сервер пишет
предупреждение в журнал ошибок и продолжает работу:
<pre>
currently unknown variable '<em><code>var_name</code></em>'
was read from the persisted config file
</pre></li>

<li>Чтобы указать, что переменная это переменная сеанса, поставьте перед ее
именем <code>SESSION</code>, <code>@@session.</code> или <code>@@</code>:
<pre>
SET SESSION sql_mode = 'TRADITIONAL';
SET @@session.sql_mode = 'TRADITIONAL';
SET @@sql_mode = 'TRADITIONAL';
</pre>

Установка переменной сеанса обычно не требует никакой специальной привилегии,
хотя есть исключения, которые требуют привилегию
<a href="security.html#priv_super"><code>SUPER</code></a> (например,
<a href="server.htm#sysvar_sql_log_bin"><code>sql_log_bin</code></a>).
Клиент может изменить его собственные переменные сеанса, но не таковые для
любого другого клиента.</p>

<p>Системные переменные только для сеанса не могут быть сохранены. Они не
могут быть установлены при запуске сервера, таким образом нет никакой причины
перечислить их в <code>mysqld-auto.cnf</code>.</li>

<li><code>LOCAL</code> и <code>@@local.</code> синонимы для
<code>SESSION</code> и <code>@@session.</code>.</li>
<li>Если никакой модификатор не присутствует,
<a href="#set-variable"><code>SET</code></a>
меняет переменную сеанса. Если у переменной нет никакого значения
сеанса, ошибка происходит.
<pre>
mysql&gt; SET max_connections = 1000;
ERROR 1229 (HY000): Variable 'max_connections' is a
GLOBAL variable and should be set with SET GLOBAL
</pre></li>

<li>Ошибка происходит при этих обстоятельствах:</p>
<ul><li><p>Используйте <a href="#set-variable"><code>SET
GLOBAL</code></a> (<code>@@global.</code>) или
<a href="#set-variable"><code>SET PERSIST</code></a> (или
<code>@@persist.</code>), устанавливая переменную, у которой есть
только значение сеанса.</li>

<li>Опустите <code>GLOBAL</code> (или
<code>@@global.</code>) или <code>PERSIST</code> (или
<code>@@persist.</code>), устанавливая переменную, у которой есть
только глобальное значение.</li>

<li>Используйте <a href="#set-variable"><code>SET SESSION</code></a>
(или <code>@@SESSION.</code>), устанавливая переменную, у которой есть
только глобальное значение.</p></li></ul></li></ul>

<p>Предыдущие модификаторы применяются только к системным переменным. Ошибка
происходит для попыток применить их к определяемым пользователем переменным,
хранимой процедуре или функциональным параметрам или местным
переменным сохраненной программы.</p>

<p><a href="#set-variable"><code>SET</code></a>
может содержать многократные переменные назначения, отделенные запятыми. Этот
запрос назначает значения на определяемую пользователем
переменную и системную переменную:
<pre>
SET @x = 1, SESSION sql_mode = '';
</pre>

Если Вы устанавливаете многократные системные переменные, новый
модификатор <code>GLOBAL</code> или <code>SESSION</code>
в запросе используется для следующих назначений, у которых нет
никакого определенного модификатора.</p>

<p>Примеры многократно-переменного назначения:
<pre>
SET GLOBAL sort_buffer_size = 1000000, SESSION sort_buffer_size = 1000000;
SET @@global.sort_buffer_size = 1000000, @@local.sort_buffer_size = 1000000;
SET GLOBAL max_connections = 1000, sort_buffer_size = 1000000;
</pre>
Если любое переменное назначение в
<a href="#set-variable"><code>SET</code></a>
терпит неудачу, весь запрос терпит неудачу, никакие переменные не изменены,
<code>mysqld-auto.cnf</code> не изменен тоже.</p>

<p>Если Вы меняете системную переменную сеанса, значение остается в силе в
пределах Вашего сеанса, пока Вы не меняете переменную к иному значению или
завершаете сеанс. Изменение не имеет никакого эффекта на другие сеансы.</p>

<p>Если Вы меняете глобальную системную переменную, значение используется
для новых сеансов, пока Вы не меняете переменную к иному значению или
не завершите сервер. Изменение видимо любому клиенту, который получает доступ
к глобальной переменной. Однако, изменение затрагивает соответствующую
переменную сеанса только для клиентов, которые соединяются после изменения.
Изменение глобальной переменной не затрагивает переменную сеанса для любых
текущих сеансов клиента (даже сеанс, в пределах которого выполнена команда
<a href="#set-variable"><code>SET GLOBAL</code></a>).</p>

<p>Чтобы сделать установку глобальной системной переменной постоянной,
чтобы это применилось через перезапуски сервера, измените это с помощью
<a href="#set-variable"><code>SET PERSIST</code></a>, чтобы
сделать запись в файл <code>mysqld-auto.cnf</code>.
Также возможно использовать <a href="#set-variable"><code>SET
GLOBAL</code></a> и вручную изменить <code>my.cnf</code>, но тут есть
вероятность накосячить. <a href="#set-variable"><code>SET
PERSIST</code></a> более удобно.</p>

<p>Чтобы установить значение <code>GLOBAL</code>
в значение по умолчанию MySQL или соответствующее <code>GLOBAL</code>,
установите переменную к значению <code>DEFAULT</code>. Например, следующие
два запроса идентичны в установке значения
<a href="server.htm#sysvar_max_join_size"><code>max_join_size</code></a>
к текущему глобальному значению:
<pre>
SET @@session.max_join_size=DEFAULT;
SET @@session.max_join_size=@@global.max_join_size;
</pre>

Не все системные переменные могут быть установлены в <code>DEFAULT</code>.
В таких случаях назначение <code>DEFAULT</code> приводит к ошибке.</p>
<p>С <a href="#set-variable"><code>SET
PERSIST</code></a> (или <code>@@persist.</code>),
эффект установки глобальной переменной к ее значению по умолчанию
является определенным версией:</p>

<ul><li><p>С MySQL 8.0.1 установка глобальной переменной в
<code>DEFAULT</code> назначает значение по умолчанию и удаляет это из
файла <code>mysqld-auto.cnf</code>. Установка переменной к ее буквальному
значению по умолчанию назначает значение по умолчанию и добавляет установку
для переменной в файл <code>mysqld-auto.cnf</code>.</p></li>

<li>В MySQL 8.0.0 установка глобальной переменной в <code>DEFAULT</code>
или к буквальной переменной назначает ее значение по умолчанию. Это также
добавляет установку для переменной к файлу <code>mysqld-auto.cnf</code>,
если ее там нет, и удаляет из
<code>mysqld-auto.cnf</code>, если есть.</p></li></ul>

<p>Ошибка происходит для попыток назначить <code>DEFAULT</code> определяемым
пользователем переменным, хранимой процедуре или функциональным параметрам
или местным переменным сохраненной программы.</p>

<p>Чтобы обратиться к значению системной переменной в выражениях, используйте
один из модификаторов <code>@@</code>.
Например, Вы можете получить значения в
<a href="#select"><code>SELECT</code></a>:
<pre>
SELECT @@global.sql_mode, @@session.sql_mode, @@sql_mode;
</pre>

Для ссылки на системную переменную в выражении как
<code>@@<em><code>var_name</code></em></code> (вместо
<code>@@global.</code> или <code>@@session.</code>) MySQL
возвращает значение сеанса, если это существует и глобальное значение иначе.
Это отличается от <code>SET @@<em><code>var_name</code></em> = <em><code>expr
</code></em></code>, который всегда обращается к значению сеанса.</p>
<p><code>@@persist.</code> не разрешен в выражениях.</p>

<h4><a name="set-character-set"></a>14.7.4.2. SET CHARACTER SET</h4>
<pre>
SET {CHARACTER SET | CHARSET}
{<em><code>charset_name</code></em> | DEFAULT}
</pre>

Этот запрос отображает все строки, посланные между сервером и текущим
клиентом с данным отображением. <code>SET CHARACTER SET</code>
устанавливает три системных переменные сеанса:
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a> и
<a href="server.htm#sysvar_character_set_results"><code>character_set_results
</code></a> установлены в данный набор символов, и
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> к значению
<a href="server.htm#sysvar_character_set_database"><code>
character_set_database</code></a>. См.
<a href="global.htm#charset-connection">раздел 11.1.4</a>.</p>

<p>Отображение наборов символов по умолчанию может быть восстановлено при
использовании значения <code>DEFAULT</code>.
Значение по умолчанию зависит от конфигурации сервера.</p>

<p><code>ucs2</code>, <code>utf16</code> и <code>utf32</code>
не может использоваться в качестве набора символов клиента, что означает, что
они не работают в <code>SET CHARACTER SET</code>.</p>

<h4><a name="set-names"></a>14.7.4.3. SET NAMES</h4>
<pre>
SET NAMES {'<em><code>charset_name</code></em>'
[COLLATE '<em><code>collation_name</code></em>'] | DEFAULT}
</pre>

Этот запрос устанавливает три системных переменные сеанса
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>,
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> и
<a href="server.htm#sysvar_character_set_results"><code>
character_set_results</code></a> к данному набору символов. Установка
<a href="server.htm#sysvar_character_set_connection"><code>
character_set_connection</code></a> в <code>charset_name</code>
также установит <a href="server.htm#sysvar_collation_connection"><code>
collation_connection</code></a> к сопоставлению по умолчанию для
<code>charset_name</code>. См.
<a href="global.htm#charset-connection">раздел 11.1.4</a>.</p>

<p>Дополнительный параметр <code>COLLATE</code> может использоваться, чтобы
определить сопоставление явно. Если дано, сопоставление должно быть одним из
разрешенных сопоставлений для <em><code>charset_name</code></em>.</p>

<p>Отображение значения по умолчанию может быть восстановлено при
использовании значения <code>DEFAULT</code>.
Значение по умолчанию зависит от конфигурации сервера.</p>

<p><code>ucs2</code>, <code>utf16</code> и <code>utf32</code>
не может использоваться в качестве набора символов клиента, что означает, что
они не работают в <a href="#set-names"><code>SET NAMES</code></a>.</p>

<h3><a name="show"></a>14.7.5. SHOW</h3>
<p><a href="#show"><code>SHOW</code></a>
имеет много форм, которые предоставляют информацию о базах данных, таблицах,
столбцах или сервере. Этот раздел описывает следующее:
<pre>
SHOW {BINARY | MASTER} LOGS
SHOW BINLOG EVENTS [IN '<em><code>log_name</code></em>']
     [FROM <em><code>pos</code></em>] [LIMIT [<em><code>offset</code></em>,]
     <em><code>row_count</code></em>]
SHOW CHARACTER SET [<em><code>like_or_where</code></em>]
SHOW COLLATION [<em><code>like_or_where</code></em>]
SHOW [FULL] COLUMNS FROM <em><code>tbl_name</code></em>
     [FROM <em><code>db_name</code></em>] [<em><code>like_or_where</code></em>]
SHOW CREATE DATABASE <em><code>db_name</code></em>
SHOW CREATE EVENT <em><code>event_name</code></em>
SHOW CREATE FUNCTION <em><code>func_name</code></em>
SHOW CREATE PROCEDURE <em><code>proc_name</code></em>
SHOW CREATE TABLE <em><code>tbl_name</code></em>
SHOW CREATE TRIGGER <em><code>trigger_name</code></em>
SHOW CREATE VIEW <em><code>view_name</code></em>
SHOW DATABASES [<em><code>like_or_where</code></em>]
SHOW ENGINE <em><code>engine_name</code></em> {STATUS | MUTEX}
SHOW [STORAGE] ENGINES
SHOW ERRORS [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
SHOW EVENTS
SHOW FUNCTION CODE <em><code>func_name</code></em>
SHOW FUNCTION STATUS [<em><code>like_or_where</code></em>]
SHOW GRANTS FOR <em><code>user</code></em>
SHOW INDEX FROM <em><code>tbl_name</code></em> [FROM <em><code>db_name</code></em>]
SHOW MASTER STATUS
SHOW OPEN TABLES [FROM <em><code>db_name</code></em>]
     [<em><code>like_or_where</code></em>]
SHOW PLUGINS
SHOW PROCEDURE CODE <em><code>proc_name</code></em>
SHOW PROCEDURE STATUS [<em><code>like_or_where</code></em>]
SHOW PRIVILEGES
SHOW [FULL] PROCESSLIST
SHOW PROFILE [<em><code>types</code></em>] [FOR QUERY <em><code>n</code></em>]
     [OFFSET <em><code>n</code></em>] [LIMIT <em><code>n</code></em>]
SHOW PROFILES
SHOW RELAYLOG EVENTS [IN '<em><code>log_name</code></em>']
     [FROM <em><code>pos</code></em>] [LIMIT [<em><code>offset</code></em>,]
     <em><code>row_count</code></em>]
SHOW SLAVE HOSTS
SHOW SLAVE STATUS [NONBLOCKING]
SHOW [GLOBAL | SESSION] STATUS [<em><code>like_or_where</code></em>]
SHOW TABLE STATUS [FROM <em><code>db_name</code></em>]
     [<em><code>like_or_where</code></em>]
SHOW [FULL] TABLES [FROM <em><code>db_name</code></em>]
     [<em><code>like_or_where</code></em>]
SHOW TRIGGERS [FROM <em><code>db_name</code></em>]
     [<em><code>like_or_where</code></em>]
SHOW [GLOBAL | SESSION] VARIABLES [<em><code>like_or_where</code></em>]
SHOW WARNINGS [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
     <em><code>like_or_where</code></em>:
LIKE '<em><code>pattern</code></em>'
  | WHERE <em><code>expr</code></em>
</pre>

Если синтаксис для данного <a href="#show"><code>SHOW</code></a>
включает часть <a href="funct.htm#operator_like"><code>LIKE
'<em><code>pattern</code></em>'</code></a>,
<code>'<em><code>pattern</code></em>'</code> это
строка, которая может содержать SQL-символы <code>%</code> и
<code>_</code>. Образец полезен для ограничения вывода
запроса соответствием значений.</p>

<p>Несколько <a href="#show"><code>SHOW</code></a> также принимают
<code>WHERE</code>, который обеспечивает больше гибкости в определении,
которые строки вывести на экран. См.
<a href="inform.htm#extended-show">раздел 22.31</a>.</p>

<p>Много MySQL APIs (например, PHP) позволяют обработать результат
<a href="#show"><code>SHOW</code></a> как набор результатов из
<a href="#select"><code>SELECT</code></a>, см.
<a href="connect.htm">главу 25</a>.
Кроме того, Вы можете работать в SQL с результатами запросов на таблицах
в базе данных <code>INFORMATION_SCHEMA</code>, которые Вы не можете легко
полцить из <a href="#show"><code>SHOW</code></a>. См.
<a href="inform.htm">главу 22</a>.</p>

<h4><a name="show-binary-logs"></a>14.7.5.1. SHOW BINARY LOGS</h4>
<pre>
SHOW BINARY LOGS
SHOW MASTER LOGS
</pre>

Перечисляет двоичные файлы системного журнала на сервере. Это запрос
используется как часть процедуры, описанной в
<a href="#purge-binary-logs">разделе 14.4.1.1</a>,
которая показывает, как определить, какие журналы могут быть очищены.
<pre>
mysql&gt; SHOW BINARY LOGS;
+---------------+-----------+
| Log_name      | File_size |
+---------------+-----------+
| binlog.000015 | 724935    |
| binlog.000016 | 733481    |
+---------------+-----------+
</pre>

<a href="#show-binary-logs"><code>SHOW MASTER LOGS</code></a>
эквивалент <a href="#show-binary-logs"><code>SHOW BINARY LOGS</code>
</a>.</p>

<p>Нужны привилегии <a href="security.html#priv_super"><code>SUPER</code></a>
или <a href="security.html#priv_replication-client"><code>REPLICATION CLIENT
</code></a>.</p>

<h4><a name="show-binlog-events"></a>14.7.5.2. SHOW BINLOG EVENTS</h4>
<pre>
SHOW BINLOG EVENTS
     [IN '<em><code>log_name</code></em>'] [FROM <em><code>pos</code></em>]
     [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
</pre>

Показывает события в двоичном журнале. Если Вы не определяете
<code>'<em><code>log_name</code></em>'</code>,
первый двоичный журнал выведен на экран.</p>

<p><code>LIMIT</code> имеет тот же самый синтаксис, что в
<a href="#select"><code>SELECT</code></a>. См.
<a href="#select">раздел 14.2.9</a>.</p>

<p><a href="#show-binlog-events"><code>SHOW BINLOG EVENTS</code></a>
без <code>LIMIT</code> может занять очень много времени и потреблять ресурс
процесса, потому что сервер возвращает клиенту полное содержание двоичного
журнала (который включает все запросы, выполненные сервером, которые изменяют
данные). Как альтернатива <a href="#show-binlog-events"><code>SHOW
BINLOG EVENTS</code></a>, используйте <a href="programs.htm#mysqlbinlog">
<span><strong>mysqlbinlog</strong></span></a>, чтобы сохранить двоичной
журнал к текстовому файлу для более поздней экспертизы и анализа. См.
<a href="programs.htm#mysqlbinlog">раздел 5.6.8</a>.</p>

<p>Некоторые события, касающиеся установки пользователя и системных
переменных, не включены в вывод <a href="#show-binlog-events"><code>
SHOW BINLOG EVENTS</code></a>. Чтобы получить полный обзор событий в пределах
двоичного журнала, используйте <a href="programs.htm#mysqlbinlog"><span>
<strong>mysqlbinlog</strong></span></a>.</p>

<p><a href="#show-binlog-events"><code>SHOW BINLOG EVENTS</code></a>
<span><em>не</em></span> работает с файлами системного журнала реле. Вы
можете использовать <a href="#show-relaylog-events"><code>SHOW
RELAYLOG EVENTS</code></a> для этого.</p>

<h4><a name="show-character-set"></a>14.7.5.3. SHOW CHARACTER SET</h4>
<pre>
SHOW CHARACTER SET
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-character-set"><code>SHOW CHARACTER SET</code></a>
показывает все доступные наборы символов.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если дан,
указывает, который набор символов соответствует. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>:
<pre>
mysql&gt; SHOW CHARACTER SET LIKE 'latin%';
+---------+-----------------------------+-------------------+--------+
| Charset | Description                 | Default collation | Maxlen |
+---------+-----------------------------+-------------------+--------+
| latin1  | cp1252 West European        | latin1_swedish_ci |  1     |
| latin2  | ISO 8859-2 Central European | latin2_general_ci |  1     |
| latin5  | ISO 8859-9 Turkish          | latin5_turkish_ci |  1     |
| latin7  | ISO 8859-13 Baltic          | latin7_general_ci |  1     |
+---------+-----------------------------+-------------------+--------+
</pre>
<code>Maxlen</code> показывает максимальное количество байтов, требуемых,
чтобы сохранить один символ.</p>

<p><code>filename</code> набора символов только для внутреннего пользования,
<a href="#show-character-set"><code>SHOW CHARACTER SET</code></a>
не выводит его на экран.</p>

<p>Вы можете также получить информацию о наборах символов из
<code>INFORMATION_SCHEMA</code>, которая содержит таблицу
<a href="inform.htm#character-sets-table"><code>CHARACTER_SETS</code></a>.
См. <a href="inform.htm#character-sets-table">раздел 22.1</a>.</p>

<h4><a name="show-collation"></a>14.7.5.4. SHOW COLLATION</h4>
<pre>
SHOW COLLATION
[LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

Этот запрос перечисляет сопоставления, поддержанные сервером. По умолчанию
вывод <a href="#show-collation"><code>SHOW COLLATION</code></a>
включает все доступные сопоставления.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которое сопоставление соответствует. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>:
<pre>
mysql&gt; SHOW COLLATION WHERE Charset = 'latin1';
+-------------------+---------+----+---------+----------+---------+
| Collation         | Charset | Id | Default | Compiled | Sortlen |
+-------------------+---------+----+---------+----------+---------+
| latin1_german1_ci | latin1  |  5 |         | Yes      |       1 |
| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |       1 |
| latin1_danish_ci  | latin1  | 15 |         | Yes      |       1 |
| latin1_german2_ci | latin1  | 31 |         | Yes      |       2 |
| latin1_bin        | latin1  | 47 |         | Yes      |       1 |
| latin1_general_ci | latin1  | 48 |         | Yes      |       1 |
| latin1_general_cs | latin1  | 49 |         | Yes      |       1 |
| latin1_spanish_ci | latin1  | 94 |         | Yes      |       1 |
+-------------------+---------+----+---------+----------+---------+
</pre>

Столбцы <code>Collation</code> и <code>Charset</code>
указывают на названия сопоставления и набора символов, с которым оно связано.
<code>Id</code> ID сопоставления. <code>Default</code>
указывает, является ли сопоставление значением по умолчанию для своего набора
символов. <code>Compiled</code> указывает, собран ли набор символов в сервер.
<code>Sortlen</code> связан с суммой памяти, требуемой, чтобы сортировать
строки, выраженные в наборе символов.</p>

<p>Чтобы видеть сопоставление по умолчанию для каждого набора символов,
используйте следующий запрос. <code>Default</code> это зарезервированное
слово, чтобы использовать это в качестве идентификатора, это должно
быть заключено в кавычки:
<pre>
mysql&gt; SHOW COLLATION WHERE `Default` = 'Yes';
+-------------------+---------+----+---------+----------+---------+
| Collation         | Charset | Id | Default | Compiled | Sortlen |
+-------------------+---------+----+---------+----------+---------+
| big5_chinese_ci   | big5    |  1 | Yes     | Yes      |      1  |
| dec8_swedish_ci   | dec8    |  3 | Yes     | Yes      |      1  |
| cp850_general_ci  | cp850   |  4 | Yes     | Yes      |      1  |
| hp8_english_ci    | hp8     |  6 | Yes     | Yes      |      1  |
| koi8r_general_ci  | koi8r   |  7 | Yes     | Yes      |      1  |
| latin1_swedish_ci | latin1  |  8 | Yes     | Yes      |      1  |
...
</pre>

Вы можете также получить информацию о сопоставлениях из
<code>INFORMATION_SCHEMA</code>, которая содержит таблицу
<a href="inform.htm#collations-table"><code>COLLATIONS</code></a>, см.
<a href="inform.htm#collations-table">раздел 22.2</a>.</p>

<h4><a name="show-columns"></a>14.7.5.5. SHOW COLUMNS</h4>
<pre>
SHOW [FULL] COLUMNS {FROM | IN} <em><code>tbl_name</code></em>
     [{FROM | IN} <em><code>db_name</code></em>]
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-columns"><code>SHOW COLUMNS</code></a>
показывает сведения о столбцах в данной таблице. Это также работает на
представлениях. <a href="funct.htm#operator_like"><code>LIKE</code></a>,
если есть, указывает, которые имена столбцов соответствуют.
<code>WHERE</code> может быть дан, чтобы выбрать строки, используя более
общие условия, как обсуждено в <a href="inform.htm#extended-show">разделе
22.31</a>.</p>

<p><a href="#show-columns"><code>SHOW COLUMNS</code></a>
покажет сведения только для тех столбцов, для которых у Вас
есть некоторая привилегия.
<pre>
mysql&gt; SHOW COLUMNS FROM City;
+------------+----------+------+-----+---------+----------------+
| Field      | Type     | Null | Key | Default | Extra          |
+------------+----------+------+-----+---------+----------------+
| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |
| Name       | char(35) | NO   |     |         |                |
| Country    | char(3)  | NO   | UNI |         |                |
| District   | char(20) | YES  | MUL |         |                |
| Population | int(11)  | NO   |     | 0       |                |
+------------+----------+------+-----+---------+----------------+
5 rows in set (0.00 sec)
</pre>

Если типы данных отличаются от того, что Вы ожидаете, что они будут основаны
на <a href="#create-table"><code>CREATE TABLE</code></a>,
отметьте, что MySQL иногда изменяет типы данных, когда Вы создаете или
изменяете таблицу. Условия, при которых это происходит, описаны в
<a href="#silent-column-changes">раздел 14.1.15.4</a>.</p>

<p><code>FULL</code> заставляет вывод включать сопоставление столбца и
комментарии, так же как привилегии, которые Вы имеете для каждого столбца.
</p>
<p>Вы можете использовать <em><code>db_name.tbl_name</code></em>
как альтернативу <code><em><code>tbl_name</code></em>
FROM <em><code>db_name</code></em></code>.
Другими словами, эти два запроса эквивалентны:
<pre>
mysql&gt; SHOW COLUMNS FROM mytable FROM mydb;
mysql&gt; SHOW COLUMNS FROM mydb.mytable;
</pre>

<a href="#show-columns"><code>SHOW COLUMNS</code></a> покажет
следующие значения для каждого столбца таблицы:</p>
<p><code>Field</code> имя столбца.</p>
<p><code>Type</code> тип данных столбца.</p>
<p><code>Collation</code> указывает на сопоставление для недвоичных строковых
столбцов или <code>NULL</code> для других столбцов. Это значение выведено на
экран, только если Вы используете <code>FULL</code>.</p>

<p>Поле <code>Null</code> содержит <code>YES</code>, если значения
<code>NULL</code> могут быть сохранены в столбце, <code>NO</code> если нет.
</p>
<p>Поле <code>Key</code> указывает, индексирован ли столбец:</p>
<ul><li><p>Если <code>Key</code> пусто, столбец не индексирован или
индексирован только как вторичный столбец в многостолбцовом групповом индексе.
</li>

<li>Если <code>Key</code> <code>PRI</code>, столбец <code>PRIMARY KEY</code>
или один из столбцов в многостолбцовом <code>PRIMARY KEY</code>.</li>
<li>Если <code>Key</code> <code>UNI</code>, это первый столбец индекса
<code>UNIQUE</code>. Он допускает многократные <code>NULL</code>, но Вы
можете сказать, разрешает ли столбец <code>NULL</code>
проверяя поле <code>Null</code>.</li>

<li>Если <code>Key</code> <code>MUL</code>, это первый столбец группового
индекса, в котором многократные возникновения данного значения
разрешены в пределах столбца.</p></li></ul>

<p>Если больше, чем одно из значений <code>Key</code> относится к данному
столбцу таблицы, <code>Key</code> выводит на экран значение с самым высоким
приоритетом, в порядке <code>PRI</code>, <code>UNI</code>, <code>MUL</code>.
</p>

<p>Индекс <code>UNIQUE</code> может быть выведен на экран как
<code>PRI</code>, если это не может содержать <code>NULL</code>
и нет <code>PRIMARY KEY</code> в таблице. <code>UNIQUE</code>
может вывести на экран как <code>MUL</code>, если несколько столбцов
формируют композитный индекс <code>UNIQUE</code>, хотя комбинация столбцов
уникальна, каждый столбец все еще может содержать многократные
возникновения данного значения.</p>

<p>Поле <code>Default</code> указывает на значение по умолчанию, которое
назначено столбцу. Это <code>NULL</code>, если у столбца есть явное значение
по умолчанию <code>NULL</code>, или если определение столбца
не имеет <code>DEFAULT</code>.</p>

<p>Поле <code>Extra</code> содержит любую дополнительную информацию, которая
доступна о данном столбце. Значение не пусто в этих случаях:</p>
<ul><li><p><code>auto_increment</code> для столбцов, которые имеют
признак <code>AUTO_INCREMENT</code>.</li>

<li><code>on update CURRENT_TIMESTAMP</code> для столбцов
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> или
<a href="types.htm#datetime"><code>DATETIME</code></a>, которые имеют признак
<code>ON UPDATE CURRENT_TIMESTAMP</code>.</li>
<li><code>VIRTUAL GENERATED</code> или <code>VIRTUAL STORED</code>
для произведенных столбцов.</p></li></ul>

<p><code>Privileges</code> указывает на привилегии, которые Вы имеете для
столбца. Это значение выведено на экран, только если
Вы используете <code>FULL</code>.</p>

<p><code>Comment</code> указывает на любой комментарий, который имеет
столбец. Это значение выведено на экран, только если
Вы используете <code>FULL</code>.</p>

<p><code>SHOW FIELDS</code> синоним для
<a href="#show-columns"><code>SHOW COLUMNS</code></a>.
Вы можете также перечислить столбцы таблицы с помощью
<a href="programs.htm#mysqlshow"><span><strong>mysqlshow
<em><code>db_name</code></em> <em><code>tbl_name</code></em></strong>
</span></a>.</p>

<p><a href="#describe"><code>DESCRIBE</code></a>
предоставляет информацию, подобную <a href="#show-columns"><code>SHOW
COLUMNS</code></a>. См. <a href="#describe">раздел 14.8.1</a>.</p>

<p><a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>,
<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a> и
<a href="#show-index"><code>SHOW INDEX</code></a>
также предоставляют информацию о таблицах. См. <a href="#show">раздел
14.7.5</a>.</p>

<h4><a name="show-create-database"></a>14.7.5.6 SHOW CREATE DATABASE</h4>
<pre>
SHOW CREATE {DATABASE | SCHEMA} [IF NOT EXISTS] <em><code>db_name</code></em>
</pre>

Показывает запрос <a href="#create-database"><code>CREATE DATABASE
</code></a>, который создает названную базу данных. Если
<code>SHOW</code> включает <code>IF NOT EXISTS</code>,
вывод также включает такой пункт.
<a href="#show-create-database"><code>SHOW CREATE SCHEMA</code></a>
синоним для <a href="#show-create-database"><code>SHOW CREATE DATABASE
</code></a>.
<pre>
mysql&gt; SHOW CREATE DATABASE test\G
*************************** 1. row ***************************
   Database: test
Create Database: CREATE DATABASE `test`
 /*!40100 DEFAULT CHARACTER SET latin1 */

mysql&gt; SHOW CREATE SCHEMA test\G
*************************** 1. row ***************************
   Database: test
Create Database: CREATE DATABASE `test`
 /*!40100 DEFAULT CHARACTER SET latin1 */
</pre>

<a href="#show-create-database"><code>SHOW CREATE DATABASE</code></a>
берет в кавычки имена таблиц и имена столбцов согласно значению опции
<a href="server.htm#sysvar_sql_quote_show_create"><code>sql_quote_show_create
</code></a>. См. <a href="server.htm#server-system-variables">раздел 6.1.5
</a>.</p>

<h4><a name="show-create-event"></a>14.7.5.7. SHOW CREATE EVENT</h4>
<pre>
SHOW CREATE EVENT <em><code>event_name</code></em>
</pre>

Отображает <a href="#create-event"><code>CREATE EVENT</code></a>,
который должен был обновить данное событие. Это требует привилегии
requires the <a href="security.html#priv_event"><code>EVENT</code></a>
для базы данных, из которой нужно показать событие. Например (используя то же
самое событие <code>e_daily</code>, которое использовано в
then altered in <a href="#show-events">разделе 14.7.5.18</a>):
<pre>
mysql&gt; SHOW CREATE EVENT test.e_daily\G
*************************** 1. row ***************************
   Event: e_daily
sql_mode:
   time_zone: SYSTEM
Create Event: CREATE EVENT `e_daily`
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP + INTERVAL 6 HOUR
ON COMPLETION NOT PRESERVE
ENABLE
COMMENT 'Saves total number of sessions then
clears the table each day'
DO BEGIN
  INSERT INTO site_activity.totals (time, total)
SELECT CURRENT_TIMESTAMP, COUNT(*)
FROM site_activity.sessions;
  DELETE FROM site_activity.sessions;
END
character_set_client: latin1
collation_connection: latin1_swedish_ci
  Database Collation: latin1_swedish_ci
</pre>

<code>character_set_client</code> это сессионное значение переменной
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда событие создавалось
<code>collation_connection</code> сессионное значение переменной
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, когда событие создавалось. <code>Database Collation</code>
сопоставление базы данных, с которой связано событие.</p>
<p>Вывод отражает текущий статус события
(<code>ENABLE</code>) вместо состояния, с которым это создавалось.</p>

<h4><a name="show-create-function"></a>14.7.5.8. SHOW CREATE FUNCTION</h4>
<pre>
SHOW CREATE FUNCTION <em><code>func_name</code></em>
</pre>
Этоь запрос подобен <a href="#show-create-procedure"><code>SHOW CREATE
PROCEDURE</code></a>, но для сохраненных функций. См.
<a href="#show-create-procedure">раздел 14.7.5.9</a>.</p>

<h4><a name="show-create-procedure"></a>14.7.5.9. SHOW CREATE PROCEDURE</h4>
<pre>
SHOW CREATE PROCEDURE <em><code>proc_name</code></em>
</pre>

Этот запрос расширение MySQL. Это возвращает точную строку, которая может
использоваться, чтобы обновить названную хранимую процедуру. Подобный запрос,
<a href="#show-create-function"><code>SHOW CREATE FUNCTION</code></a>,
дает информацию о сохраненных функциях (см.
<a href="#show-create-function">раздел 14.7.5.8</a>).</p>

<p>Чтобы использовать любой запрос, Вы должны быть пользователем, названным в
подпрограмме <code>DEFINER</code> или иметь доступ
<a href="#select"><code>SELECT</code></a> к таблице
<code>mysql.proc</code>. Если у Вас нет привилегий для подпрограммы
непосредственно, значение для полей <code>Create Procedure</code> или <
code>Create Function</code> будет <code>NULL</code>.
<pre>
mysql&gt; SHOW CREATE PROCEDURE test.simpleproc\G
*************************** 1. row ***************************
   Procedure: simpleproc
sql_mode:
Create Procedure: CREATE PROCEDURE `simpleproc`(OUT param1 INT)
  BEGIN
  SELECT COUNT(*) INTO param1 FROM t;
  END
character_set_client: latin1
collation_connection: latin1_swedish_ci
  Database Collation: latin1_swedish_ci

mysql&gt; SHOW CREATE FUNCTION test.hello\G
*************************** 1. row ***************************
Function: hello
sql_mode:
 Create Function: CREATE FUNCTION `hello`(s CHAR(20))
  RETURNS CHAR(50)
  RETURN CONCAT('Hello, ',s,'!')
character_set_client: latin1
collation_connection: latin1_swedish_ci
  Database Collation: latin1_swedish_ci
</pre>

<code>character_set_client</code> значение сеанса
the <a href="server.htm#sysvar_character_set_client"><code>
character_set_client</code></a>, когда подпрограмма создавалась.
<code>collation_connection</code> значение сеанса
<a href="server.htm#sysvar_collation_connection"><code>
collation_connection</code></a>, когда подпрограмма создавалась.
<code>Database Collation</code> сопоставление базы данных, с
которой связана подпрограмма.</p>

<h4><a name="show-create-table"></a>14.7.5.10. SHOW CREATE TABLE</h4>
<pre>
SHOW CREATE TABLE <em><code>tbl_name</code></em>
</pre>

Показывает <a href="#create-table"><code>CREATE TABLE</code></a>,
который составляет названную таблицу. Чтобы использовать этот запрос, у Вас
должна быть некоторая привилегия для таблицы.
Этот запрос также работает с представлениями.
<pre>
mysql&gt; SHOW CREATE TABLE t\G
*************************** 1. row ***************************
   Table: t
Create Table: CREATE TABLE `t` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `s` char(60) DEFAULT NULL,
  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1
</pre>

<a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>
цитирует имена таблиц и столбцов согласно значению опции
<a href="server.htm#sysvar_sql_quote_show_create"><code>sql_quote_show_create
</code></a>. См. <a href="server.htm#server-system-variables">раздел 6.1.5
</a>.</p>

<h4><a name="show-create-trigger"></a>14.7.5.11. SHOW CREATE TRIGGER</h4>
<pre>
SHOW CREATE TRIGGER <em><code>trigger_name</code></em>
</pre>

Это запрос показывает запрос <a href="#create-trigger"><code>CREATE
TRIGGER</code></a>, который создает названный триггер. Это запрос требует
привилегию <a href="security.html#priv_trigger"><code>TRIGGER</code></a>
для таблицы, связанной с триггером.
<pre>
mysql&gt; SHOW CREATE TRIGGER ins_sum\G
*************************** 1. row ***************************
   Trigger: ins_sum
  sql_mode: STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION
SQL Original Statement: CREATE DEFINER=`me`@`localhost` TRIGGER ins_sum
BEFORE INSERT ON account
FOR EACH ROW SET @sum = @sum + NEW.amount
  character_set_client: utf8
  collation_connection: utf8_general_ci
Database Collation: latin1_swedish_ci
   Created: 2013-07-09 10:39:34.96
</pre>
Вывод <a href="#show-create-trigger"><code>SHOW CREATE TRIGGER</code>
</a> имеет следующие столбцы:</p>

<ul><li><p><code>Trigger</code>: Имя триггера.</li>
<li><code>sql_mode</code>: Режим SQL, когда триггер выполняется.</li>
<li><code>SQL Original Statement</code>: <a href="#create-trigger">
<code>CREATE TRIGGER</code></a>, который определяет триггер.</li>

<li><code>character_set_client</code>: Сессионное значение переменной
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда триггер создавался.</li>

<li><code>collation_connection</code>: Сессионное значение переменной
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, когда триггер создавался.</li>

<li><code>Database Collation</code>: Сопоставление базы данных, с
которой связан триггер.</li>
<li><code>Created</code>: Дата и время, когда триггер создавался. Это
<code>TIMESTAMP(2)</code> (с дробной частью в сотые части
секунд) для триггеров.</p></li></ul>

<p>Вы можете также получить информацию из
<code>INFORMATION_SCHEMA</code>, которая имеет таблицу
<a href="inform.htm#triggers-table"><code>TRIGGERS</code></a>, см.
<a href="inform.htm#triggers-table">раздел 22.27</a>.</p>

<h4><a name="show-create-user"></a>14.7.5.12. SHOW CREATE USER</h4>
<pre>
SHOW CREATE USER <em><code>user</code></em>
</pre>

Этот запрос показывает <a href="#create-user"><code>CREATE
USER</code></a>, которое создает названного пользователя. Ошибка происходит,
если пользователь не существует. Запрос требует привилегию
<a href="security.html#priv_select"><code>SELECT</code></a> для базы данных
<code>mysql</code>, кроме просмотра привилегий для текущего пользователя.</p>

<p>Чтобы назвать учетную запись, используйте формат, описанный в
<a href="security.html#account-names">разделе 7.2.3</a>.
Если Вы определяете только часть имени пользователя имени учетной записи,
часть имени хоста <code>'%'</code>. Также возможно определить
<a href="funct.htm#function_current-user"><code>CURRENT_USER</code></a> или
<a href="funct.htm#function_current-user"><code>CURRENT_USER()</code></a>,
чтобы ссылаться на учетную запись, связанную с текущим сеансом.
<pre>
mysql&gt; SHOW CREATE USER 'root'@'localhost'\G
*************************** 1. row ***************************
CREATE USER for root@localhost: CREATE USER 'root'@'localhost'
       IDENTIFIED WITH 'mysql_native_password'
       AS '*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19'
       REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK
</pre>

Выходной формат затронут установкой
<a href="server.htm#sysvar_log_builtin_as_identified_by_password"><code>
log_builtin_as_identified_by_password</code></a>.</p>

<p>Чтобы вывести на экран привилегии, предоставленные учетной записи,
используйте <a href="#show-grants"><code>SHOW GRANTS</code></a>, см.
<a href="#show-grants">раздел 14.7.5.21</a>.</p>

<h4><a name="show-create-view"></a>14.7.5.13. SHOW CREATE VIEW</h4>
<pre>
SHOW CREATE VIEW <em><code>view_name</code></em>
</pre>

Этот запрос показывает <a href="#create-view"><code>CREATE VIEW</code>
</a>, который создает названное представление.
<pre>
mysql&gt; SHOW CREATE VIEW v\G
*************************** 1. row ***************************
View: v
 Create View: CREATE ALGORITHM=UNDEFINED
  DEFINER=`bob`@`localhost`
  SQL SECURITY DEFINER VIEW `v` AS select 1 AS `a`,2 AS `b`
character_set_client: latin1
collation_connection: latin1_swedish_ci
</pre>

<code>character_set_client</code> значение сеанса
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда представление создавалось.
<code>collation_connection</code> значение сеанса
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, когда представление создавалось.</p>

<p>Использование <a href="#show-create-view"><code>SHOW CREATE VIEW
</code></a> требует привилегии <a href="security.html#priv_show-view"><code>
SHOW VIEW</code></a> и <a href="security.html#priv_select"><code>SELECT
</code></a> для рассматриваемого представления.</p>

<p>Вы можете также получить информацию об объектах представления из базы
данных <code>INFORMATION_SCHEMA</code>, таблица
<a href="inform.htm#views-table"><code>VIEWS</code></a>, см.
<a href="inform.htm#views-table">раздел 22.29</a>.</p>

<p>MySQL позволяет Вам использовать отличающийся
<a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>, чтобы
сказать серверу тип синтаксиса SQL. Например, Вы могли бы использовать режим
SQL <a href="server.htm#sqlmode_ansi"><code>ANSI</code></a>, чтобы
гарантировать, что MySQL правильно интерпретирует стандартный оператор связи
SQL, двойную черту (<code>||</code>), в Ваших запросах. Если Вы тогда
создаете представление, которое связывает элементы, Вы могли бы поменять
<a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a> на
значение, отличающееся от <a href="server.htm#sqlmode_ansi"><code>ANSI</code>
</a>, а это может заставить представление становиться недопустимым. Но дело
обстоит не так. Независимо от того, как Вы описываете определение
представления, MySQL всегда хранит это одинаково, в канонической форме.
Вот пример, который показывает, как сервер изменяет оператор связи на
функцию <a href="funct.htm#function_concat"><code>CONCAT()</code></a>:
<pre>
mysql&gt; SET sql_mode = 'ANSI';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; CREATE VIEW test.v AS SELECT 'a' || 'b' as col1;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SHOW CREATE VIEW test.v\G
*************************** 1. row ***************************
View: v
 Create View: CREATE VIEW "v" AS select concat('a','b') AS "col1"
...
1 row in set (0.00 sec)
</pre>

Преимущество хранения определения представления в канонической
форме состоит в том что изменения, произведенные позже в значении
<a href="server.htm#sysvar_sql_mode"><code>sql_mode</code></a>
не будут затрагивать работу представления. Однако дополнительное последствие
то, что комментарии до <a href="#select"><code>SELECT</code></a>
исключены из определения сервером.</p>

<h4><a name="show-databases"></a>14.7.5.14. SHOW DATABASES</h4>
<pre>
SHOW {DATABASES | SCHEMAS}
[LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-databases"><code>SHOW DATABASES</code></a>
перечисляет базы данных по узлу сервера MySQL.
<a href="#show-databases"><code>SHOW SCHEMAS</code></a> синоним для
<a href="#show-databases"><code>SHOW DATABASES</code></a>.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена базы данных должны соответствовать.
<code>WHERE</code> может быть дан, чтобы выбрать строки, используя более
общие условия, как обсуждено в <a href="inform.htm#extended-show">разделе
22.31</a>.</p>

<p>Вы видите только те базы данных, для которых у Вас есть некоторая
привилегия, если у Вас нет глобальной привилегии
<a href="#show-databases"><code>SHOW DATABASES</code></a>.
Вы можете также получить этот список, используя
<a href="programs.htm#mysqlshow"><span><strong>mysqlshow</strong></span></a>.
</p>

<p>Если сервер был запущен с опцией
<a href="server.htm#option_mysqld_skip-show-database"><code>
--skip-show-database</code></a>,
Вы не можете использовать это запрос вообще, если Вы не имеете привилегии
<a href="security.html#priv_show-databases"><code>SHOW DATABASES</code></a>.
</p>

<p>MySQL осуществляет базы данных как подкаталоги в каталоге данных, таким
образом, этот запрос просто перечисляет каталоги. Однако, вывод может
включать названия каталогов, которые не соответствуют
фактическим базам данных.</p>

<h4><a name="show-engine"></a>14.7.5.15. SHOW ENGINE</h4>
<pre>
SHOW ENGINE <em><code>engine_name</code></em> {STATUS | MUTEX}
</pre>

<a href="#show-engine"><code>SHOW ENGINE</code></a>
выводит на экран операционную информацию о механизме хранения. Это требует
привилегии <a href="security.html#priv_process"><code>PROCESS</code></a>.
У запроса есть эти разновидности:
<pre>
SHOW ENGINE INNODB STATUS
SHOW ENGINE INNODB MUTEX
SHOW ENGINE PERFORMANCE_SCHEMA STATUS
</pre>

<a href="#show-engine"><code>SHOW ENGINE INNODB STATUS</code></a>
выводит на экран обширную информацию от стандартного <code>InnoDB</code>
Monitor о статусе механизма хранения <code>InnoDB</code>. См.
<a href="innodb.htm#innodb-monitors">раздел 16.16</a>.</p>

<p><a href="#show-engine"><code>SHOW ENGINE INNODB MUTEX</code></a>
отображает статистику <code>InnoDB</code>
<a href="glossary.htm#glos_mutex">mutex</a> и
<a href="glossary.htm#glos_rw_lock">rw-lock</a>.</p>

<p><code>InnoDB</code> mutexes и rwlocks можно также отследить по таблицам в
<a href="perfor.htm">Performance Schema</a>, см.
<a href="innodb.htm#monitor-innodb-mutex-waits-performance-schema">
раздел 16.15.2</a>.</p>

<p>Набор статистики Mutex сконфигурирован динамически,
используя следующие опции:</p>
<ul><li><p>Чтобы включить сбор mutex статистики:
<pre>
SET GLOBAL innodb_monitor_enable='latch';
</pre></li>

<li>Чтобы сбросить mutex статистику:
<pre>
SET GLOBAL innodb_monitor_reset='latch';
</pre></li>

<li>Чтобы отключить сбор mutex статистики:
<pre>
SET GLOBAL innodb_monitor_disable='latch';
</pre></li></ul>

<p>Сбор mutex статистики для
<a href="#show-engine"><code>SHOW ENGINE INNODB MUTEX</code></a>
может также быть включен, устанавливая
<a href="innodb.htm#sysvar_innodb_monitor_enable"><code>
innodb_monitor_enable='all'</code></a> или выключен, устанавливая
<a href="innodb.htm#sysvar_innodb_monitor_disable"><code>
innodb_monitor_disable='all'</code></a>.</p>

<p>Вывод <a href="#show-engine"><code>SHOW ENGINE INNODB MUTEX</code>
</a> включает следующие столбцы:</p>
<ul><li><p><code>Type</code></p>
<p>Всегда <code>InnoDB</code>.</li>

<li><code>Name</code></p>
<p>Для mutexes поле <code>Name</code> сообщает только об имени mutex.
Для rwlocks <code>Name</code> сообщает об исходном файле, где rwlock
осуществлен, и номер строки в файле, где rwlock создается. Номер строки
является определенным для Вашей версии MySQL.</li>

<li><code>Status</code></p>
<p>Статус mutex. Поле сообщает о числе spin, ожиданий и вызовов.
Статистика для низкоуровневых mutex операционной системы, которые
осуществлены за пределами <code>InnoDB</code>, отсутствует.</p>

<ul><li><p><code>spins</code> число spin.</li>
<li><code>waits</code> число ожиданий.</li>
<li><code>calls</code> сколько раз mutex был запрошен.</p></li></ul></li></ul>

<p><code>SHOW ENGINE INNODB MUTEX</code> пропускает
<a href="glossary.htm#glos_mutex">mutexes</a> и
<a href="glossary.htm#glos_rw_lock">rw-locks</a> блоков
<a href="glossary.htm#glos_buffer_pool">буферного пула</a>, поскольку
количество вывода может быть подавляющим на системах с большим буферным
пулом. Есть один mutex и одна rw-блокировка в каждом 16K буферном блоке
пула и 65536 блоков на каждый гигабайт. <code>SHOW ENGINE INNODB MUTEX</code>
также не перечисляет mutex или rw-блокировки, которые никогда не ждали
(<code>os_waits=0</code>). Таким образом, <code>SHOW ENGINE INNODB MUTEX
</code> покажет только информацию о mutex и rw-locks
за пределами буферного пула, которые вызвали по крайней мере
одно <a href="glossary.htm#glos_wait">ожидание</a> на уровне OS.</p>

<p>Использовать <a href="#show-engine"><code>SHOW ENGINE
PERFORMANCE_SCHEMA STATUS</code></a>, чтобы смотреть внутренние операции
кода Performance Schema:
<pre>
mysql&gt; SHOW ENGINE PERFORMANCE_SCHEMA STATUS\G
...
*************************** 3. row ***************************
  Type: performance_schema
  Name: events_waits_history.size
Status: 76
*************************** 4. row ***************************
  Type: performance_schema
  Name: events_waits_history.count
Status: 10000
*************************** 5. row ***************************
  Type: performance_schema
  Name: events_waits_history.memory
Status: 760000
...
*************************** 57. row ***************************
  Type: performance_schema
  Name: performance_schema.memory
Status: 26459600
...
</pre>
Этот запрос предназначен, чтобы помочь DBA понять эффекты, которые различные
опции Performance Schema имеют на требования к памяти.</p>

<p><code>Name</code> состоят из двух частей, которые называют внутренний
буфер и буферный признак, соответственно. Интерпретируйте буферные
имена следующим образом:</p>

<ul><li><p>Внутренний буфер, который не выставлен как таблица, называют в
пределах круглых скобок. Примеры: <code>(pfs_cond_class).size</code>,
<code>(pfs_mutex_class).memory</code>.</li>

<li>Внутренний буфер, который выставлен как таблица в базе данных
<code>performance_schema</code>, называют после таблицы без
круглых скобок. Примеры: <code>events_waits_history.size</code>,
<code>mutex_instances.count</code>.</li>

<li>Значение, которое относится к Performance Schema в целом, начинается
с <code>performance_schema</code>:
<code>performance_schema.memory</code>.</p></li></ul>

<p>У буферных признаков есть эти значения:</p>
<ul><li><p><code>size</code> размер внутренней записи, используемой
выполнением, таким как размер строки в таблице. <code>size</code>
не могут быть изменены.</li>

<li><code>count</code> число внутренних записей, например,
число строк в таблице. <code>count</code> могут быть изменены, используя
параметры конфигурации Performance Schema.</li>

<li>Для таблицы <code><em><code>tbl_name</code></em>.memory</code>
произведение <code>size</code> и <code>count</code>. Для Performance Schema
в целом <code>performance_schema.memory</code> сумма всей используемой памяти
(сумма всех значений <code>memory</code>).</p></li></ul>

<p>В некоторых случаях есть непосредственная связь между
параметром конфигурации Performance Schema и <code>SHOW ENGINE</code>.
Например, <code>events_waits_history_long.count</code> соответствует
<a href="perfor.htm#sysvar_performance_schema_events_waits_history_long_size">
<code>performance_schema_events_waits_history_long_size</code></a>.
В других случаях отношения более сложны. Например,
<code>events_waits_history.count</code> соответствует
<a href="perfor.htm#sysvar_performance_schema_events_waits_history_size">
<code>performance_schema_events_waits_history_size</code></a>
(число строк на поток) умноженный на
<a href="perfor.htm#sysvar_performance_schema_max_thread_instances"><code>
performance_schema_max_thread_instances</code></a> (число потоков).</p>

<h4><a name="show-engines"></a>14.7.5.16. SHOW ENGINES</h4>
<pre>
SHOW [STORAGE] ENGINES
</pre>

<a href="#show-engines"><code>SHOW ENGINES</code></a>
показывает информацию о статусе механизмов хранения сервера. Это особенно
полезно для проверки, поддержан ли механизм хранения, или чтобы увидеть,
каков механизм по умолчанию. Эта информация может также быть получена из
<code>INFORMATION_SCHEMA</code> (таблица
<a href="inform.htm#engines-table"><code>ENGINES</code></a>), см.
<a href="inform.htm#engines-table">раздел 22.6</a>.
<pre>
mysql&gt; SHOW ENGINES\G
*************************** 1. row ***************************
  Engine: InnoDB
 Support: DEFAULT
 Comment: Supports transactions, row-level locking и foreign keys
Transactions: YES
  XA: YES
  Savepoints: YES
*************************** 2. row ***************************
  Engine: MRG_MYISAM
 Support: YES
 Comment: Collection of identical MyISAM tables
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 3. row ***************************
  Engine: MEMORY
 Support: YES
 Comment: Hash based, stored in memory, useful for temporary tables
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 4. row ***************************
  Engine: BLACKHOLE
 Support: YES
 Comment: /dev/null storage engine (anything you write to it disappears)
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 5. row ***************************
  Engine: MyISAM
 Support: YES
 Comment: MyISAM storage engine
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 6. row ***************************
  Engine: CSV
 Support: YES
 Comment: CSV storage engine
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 7. row ***************************
  Engine: ARCHIVE
 Support: YES
 Comment: Archive storage engine
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 8. row ***************************
  Engine: PERFORMANCE_SCHEMA
 Support: YES
 Comment: Performance Schema
Transactions: NO
  XA: NO
  Savepoints: NO
*************************** 9. row ***************************
  Engine: FEDERATED
 Support: YES
 Comment: Federated MySQL storage engine
Transactions: NO
  XA: NO
  Savepoints: NO
</pre>

Вывод <a href="#show-engines"><code>SHOW ENGINES</code></a>
может измениться, согласно версии MySQL и другим факторам. Значения,
показанные в столбце <code>Support</code>, указывают на уровень поддержки
сервером механизма хранения, как показано в следующей таблице.</p>

<table border="1">
<thead><tr><th scope="col">Значение</th><th scope="col">Смысл</th></tr>
</thead>
<tbody><tr><td scope="row"><code>YES</code></td>
<td>Механизм поддержан и активный.</td></tr>
<tr><td scope="row"><code>DEFAULT</code></td>
<td>Like <code>YES</code>, но это механизм по умолчанию.</td></tr>
<tr><td scope="row"><code>NO</code></td><td>Механизм не поддержан.</td></tr>
<tr><td scope="row"><code>DISABLED</code></td>
<td>Механизм поддержан, но был отключен.</td></tr></tbody></table>

<p><code>NO</code> значит, что сервер был собран без поддержки механизма,
таким образом, это не может быть включено во время выполнения.</p>
<p><code>DISABLED</code> происходит потому, что сервер был запущен с опциями,
которые отключает механизм, или потому что не все опции, необходимые, чтобы
включить это, были даны. В последнем случае файл журнала ошибок должен
содержать причину, указывающую, почему опция отключена. См.
<a href="server.htm#error-log">раздел 6.4.2</a>.</p>

<p>Вы могли бы также видеть <code>DISABLED</code> для механизма хранения,
если сервер был собран, чтобы поддержать это, но был запущен с
опцией <code>--skip-<em><code>engine_name</code></em></code>.</p>

<p>Все MySQL поддерживают <code>MyISAM</code>.
Невозможно отключить <code>MyISAM</code>.</p>
<p>Столбцы <code>Transactions</code>, <code>XA</code> и
<code>Savepoints</code> указывают, поддерживает ли механизм хранения
транзакции, транзакции XA и точки сохранения, соответственно.</p>

<h4><a name="show-errors"></a>14.7.5.17. SHOW ERRORS</h4>
<pre>
SHOW ERRORS [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
SHOW COUNT(*) ERRORS
</pre>

<a href="#show-errors"><code>SHOW ERRORS</code></a>
это диагностический запрос, который подобен
<a href="#show-warnings"><code>SHOW WARNINGS</code></a>,
за исключением того, что это выводит на экран информацию только для ошибок,
а не для ошибок, предупреждений и примечаний.</p>

<p><code>LIMIT</code> аналогичен соответствующему параметру в
<a href="#select"><code>SELECT</code></a>. См.
<a href="#select">раздел 14.2.9</a>.</p>

<p><a href="#show-errors"><code>SHOW COUNT(*) ERRORS</code></a>
выводит на экран число ошибок. Вы можете также получить это число из
переменной <a href="server.htm#sysvar_error_count"><code>error_count</code>
</a>:
<pre>
SHOW COUNT(*) ERRORS;
SELECT @@error_count;
</pre>

<a href="#show-errors"><code>SHOW ERRORS</code></a> и
<a href="server.htm#sysvar_error_count"><code>error_count</code></a>
относятся только к ошибкам, не предупреждениям или примечаниям. В других
отношениях они подобны <a href="#show-warnings"><code>SHOW WARNINGS
</code></a> и <a href="server.htm#sysvar_warning_count"><code>warning_count
</code></a>. В частности, <a href="#show-errors"><code>SHOW ERRORS
</code></a> не может вывести на экран информацию больше, чем
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>
сообщений, и <a href="server.htm#sysvar_error_count"><code>error_count</code>
</a> может превысить значение <a href="server.htm#sysvar_max_error_count">
<code>max_error_count</code></a>, если число ошибок превышает
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>.
</p>
<p>См. <a href="#show-warnings">раздел 14.7.5.40</a>.</p>

<h4><a name="show-events"></a>14.7.5.18. SHOW EVENTS</h4>
<pre>
SHOW EVENTS [{FROM | IN} <em><code>schema_name</code></em>]
[LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

Этот запрос выводит на экран информацию о событиях Event Manager. Нужна
привилегия <a href="security.html#priv_event"><code>EVENT</code></a>
для базы данных, из которой нужно показать события.</p>

<p>В его самой простой форме <a href="#show-events"><code>SHOW EVENTS
</code></a> перечисляет все события в текущей схеме:
<pre>
mysql&gt; SELECT CURRENT_USER(), SCHEMA();
+----------------+----------+
| CURRENT_USER() | SCHEMA() |
+----------------+----------+
| jon@ghidora    | myschema |
+----------------+----------+
1 row in set (0.00 sec)

mysql&gt; SHOW EVENTS\G
*************************** 1. row ***************************
  Db: myschema
Name: e_daily
 Definer: jon@ghidora
   Time zone: SYSTEM
Type: RECURRING
  Execute at: NULL
  Interval value: 10
  Interval field: SECOND
  Starts: 2006-02-09 10:41:23
Ends: NULL
  Status: ENABLED
  Originator: 0
character_set_client: latin1
collation_connection: latin1_swedish_ci
  Database Collation: latin1_swedish_ci
</pre>

Чтобы видеть события для определенной схемы, используйте
<code>FROM</code>. Например, чтобы видеть события для схемы
<code>test</code>, используйте следующий запрос:
<pre>
SHOW EVENTS FROM test;
</pre>

<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые события соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия,
как обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>.</p>

<p>Вывод <a href="#show-events"><code>SHOW EVENTS</code></a>
имеет следующие столбцы:</p>
<ul><li><p><code>Db</code>: Схема (база данных), на
которой определено событие.</li>

<li><code>Name</code>: Название события.</li>
<li><code>Time zone</code>: Часовой пояс событий, который является часовым
поясом, используемым для того, чтобы наметить событие и используется в
пределах события, когда это выполняется.
Значение по умолчанию <code>SYSTEM</code>.</li>

<li><code>Definer</code>: Учетная запись пользователя, который создал
событие, в виде <code>'<em><code>user_name</code></em>'@'<em><code>host_name
</code></em>'</code>.</li>

<li><code>Type</code>: Тип повторения событий:
<code>ONE TIME</code> (разово) или <code>RECURRING</code> (повторение).</li>
<li><code>Execute At</code>: Дата и время, когда событие надо выполнить.
Показано как значение <a href="types.htm#datetime"><code>DATETIME</code></a>.
</p>

<p>Для повторяемого события это всегда <code>NULL</code>.</li>
<li><code>Interval Value</code>: Для повторяемого события
число интервалов, чтобы ждать между выполнением событий.</p>
<p>Для одноразового события значение этого столбца всегда <code>NULL</code>.
</li>

<li><code>Interval Field</code>: Единицы измерения времени
для интервала, который событие ждет перед повторением.</p>
<p>Для одноразового события значение этого столбца всегда <code>NULL</code>.
</li>

<li><code>Starts</code>: Дата и время начала для повторяемого события.
Это выведено на экран как значение
<a href="types.htm#datetime"><code>DATETIME</code></a> и <code>NULL</code>,
если никакая дата и время начала не определены для случая.</p>
<p>Для одноразового события значение этого столбца всегда <code>NULL</code>.
</li>

<li><code>Ends</code>: Дата и время окончания для повторяемого события.
Это выведено на экран как значение
<a href="types.htm#datetime"><code>DATETIME</code></a> и <code>NULL</code>,
если никакая дата и время окончания не определены для случая.</p>
<p>Для одноразового события значение этого столбца всегда <code>NULL</code>.
</li>

<li><code>Status</code>: Одно из <code>ENABLED</code>, <code>DISABLED</code>
или <code>SLAVESIDE_DISABLED</code>.</p>
<p><code>SLAVESIDE_DISABLED</code> указывает, что создание
произошло на другом сервере MySQL, действующем как ведущее устройство, и
событие копировалось к текущему серверу MySQL, который действует как ведомое
устройство, но событие теперь не запускается на ведомом устройстве.</li>

<li><code>Originator</code>: ID сервера MySQL, на котором создавалось
событие. Значение по умолчанию 0.</li>
<li><code>character_set_client</code> сессионное значение
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда подпрограмма создавалась.
<code>collation_connection</code> сессионное значение
of the <a href="server.htm#sysvar_collation_connection"><code>
collation_connection</code></a>, когда подпрограмма создавалась.
<code>Database Collation</code> сопоставление базы данных,
с которой связана подпрограмма.</p></li></ul>
<p>См. <a href="replica.htm#replication-features-invoked">раздел 19.4.1.12
</a>.</p>

<p>Запрос действия событий не показывают в выводе
<a href="#show-events"><code>SHOW EVENTS</code></a>. Используйте
<a href="#show-create-event"><code>SHOW CREATE EVENT</code></a> или
таблицу <a href="inform.htm#events-table"><code>INFORMATION_SCHEMA.EVENTS
</code></a>.</p>

<p>Времена, выведенные на экран <a href="#show-events"><code>SHOW
EVENTS</code></a>, даны в часовом поясе, как обсуждено в
<a href="stored.htm#events-metadata">разделе 21.4.4</a>.</p>

<p>Столбцы в выводе <a href="#show-events"><code>SHOW EVENTS</code>
</a> подобны, но не идентичны столбцам в таблице
<a href="inform.htm#events-table"><code>INFORMATION_SCHEMA.EVENTS</code></a>.
См. <a href="inform.htm#events-table">раздел 22.7</a>.</p>

<h4><a name="show-function-code"></a>14.7.5.19. SHOW FUNCTION CODE</h4>
<pre>
SHOW FUNCTION CODE <em><code>func_name</code></em>
</pre>

Этот запрос подобен <a href="#show-procedure-code">
<code>SHOW PROCEDURE CODE</code></a>, но для сохраненных функций. См.
<a href="#show-procedure-code">раздел 14.7.5.27</a>.</p>

<h4><a name="show-function-status"></a>14.7.5.20. SHOW FUNCTION STATUS</h4>
<pre>
SHOW FUNCTION STATUS
     [LIKE '<em><code>pattern</code></em>'
     | WHERE <em><code>expr</code></em>]
</pre>

Этот запрос подобен <a href="#show-procedure-status"><code>SHOW
PROCEDURE STATUS</code></a>, но для сохраненных функций. См.
<a href="#show-procedure-status">раздел 14.7.5.28</a>.</p>

<h4><a name="show-grants"></a>14.7.5.21. SHOW GRANTS</h4>
<pre>
SHOW GRANTS [FOR <em><code>user</code></em>
     [USING <em><code>user</code></em>
     [, <em><code>user</code></em>] ...]]
</pre>

Этот запрос выводит на экран запрос или запросы <a href="#grant">
<code>GRANT</code></a>, которые должны быть сделаны, чтобы дублировать
привилегии, которые предоставляют учетной записи пользователя MySQL.
<a href="#show-grants"><code>SHOW GRANTS</code></a> требует привилегии
<a href="security.html#priv_select"><code>SELECT</code></a> для базы данных
<code>mysql</code>, кроме просмотра привилегии для текущего пользователя.</p>

<p>Чтобы назвать учетную запись, используйте тот же самый формат, что в
<a href="#grant"><code>GRANT</code></a>, например,
<code>'jeffrey'@'localhost'</code>. Если Вы определяете только часть имени
пользователя имени учетной записи, часть имени хоста
<code>'%'</code>. См. <a href="#grant">раздел 14.7.1.6</a>.
<pre>
mysql&gt; SHOW GRANTS FOR 'root'@'localhost';
+---------------------------------------------------------------------+
| Grants for root@localhost                                           |
+---------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |
+---------------------------------------------------------------------+
</pre>

Чтобы вывести на экран привилегии, предоставленные учетной записи, которую Вы
используете, чтобы соединиться с сервером, Вы можете использовать любой
из следующих запросов:
<pre>
SHOW GRANTS;
SHOW GRANTS FOR CURRENT_USER;
SHOW GRANTS FOR CURRENT_USER();
</pre>

Если <code>SHOW GRANTS FOR CURRENT_USER</code> (или любой из эквивалентных
синтаксисов), используется в <code>DEFINER</code>, например,
в пределах хранимой процедуры, которая определена с
<code>SQL SECURITY DEFINER</code>), выведенные на экран привилегии
являются таковыми из definer, а не invoker.</p>

<p>С <code>USING</code> <a href="#show-grants"><code>SHOW GRANTS
</code></a> позволяет Вам исследовать привилегии, связанные с ролями для
пользователя. Каждую роль, названную в пункте,
нужно предоставить пользователю.</p>

<p>Если Вы не выводите на экран информацию для своей собственной учетной
записи, <code>USING</code> требует привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>.</p>

<p>Предположите, что пользователю <code>u1</code> назначены роли
<code>r1</code> и <code>r2</code>:
<pre>
CREATE ROLE 'r1', 'r2';
GRANT SELECT ON db1.* TO 'r1';
GRANT INSERT, UPDATE, DELETE ON db1.* TO 'r2';
CREATE USER 'u1'@'localhost' IDENTIFIED BY 'u1pass';
GRANT 'r1', 'r2' TO 'u1'@'localhost';
</pre>

<a href="#show-grants"><code>SHOW GRANTS</code></a> без
<code>USING</code> показывает предоставленные роли:
<pre>
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost';
+---------------------------------------------+
| Grants for u1@localhost                     |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`      |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |
+---------------------------------------------+
</pre>

Добавление <code>USING</code> заставляет запрос также выводить на экран
привилегии, связанные с каждой названной ролью:
<pre>
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r1';
+---------------------------------------------+
| Grants for u1@localhost                     |
+---------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`      |
| GRANT SELECT ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost` |
+---------------------------------------------+
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r2';
+-------------------------------------------------------------+
| Grants for u1@localhost                                     |
+-------------------------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`                      |
| GRANT INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                 |
+-------------------------------------------------------------+
mysql&gt; SHOW GRANTS FOR 'u1'@'localhost' USING 'r1', 'r2';
+---------------------------------------------------------------------+
| Grants for u1@localhost                                             |
+---------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `u1`@`localhost`                              |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `db1`.* TO `u1`@`localhost` |
| GRANT `r1`@`%`,`r2`@`%` TO `u1`@`localhost`                         |
+---------------------------------------------------------------------+
</pre>

<a href="#show-grants"><code>SHOW GRANTS</code></a> покажет
только привилегии, предоставленные явно названной учетной записи. Другие
привилегии, которые могли бы быть доступными учетной записи, не выведены на
экран. Например, если анонимная учетная запись существует, названная учетная
запись могла бы быть в состоянии использовать свои привилегии, но
<a href="#show-grants"><code>SHOW GRANTS</code></a> не
будет их показывать.</p>

<p>Чтобы вывести на экран информацию не о привилегиях для учетных записей
MySQL, используйте <a href="#show-create-user"><code>SHOW CREATE USER
</code></a>, см. <a href="#show-create-user">раздел 14.7.5.12</a>.</p>

<h4><a name="show-index"></a>14.7.5.22. SHOW INDEX</h4>
<pre>
SHOW {INDEX | INDEXES | KEYS}
{FROM | IN} <em><code>tbl_name</code></em>
[{FROM | IN} <em><code>db_name</code></em>]
[WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-index"><code>SHOW INDEX</code></a> возвращает индексную
информацию. Формат напоминает формат <code>SQLStatistics</code> в ODBC.
Это запрос требует некоторой привилегии для любого столбца в таблице.</p>

<p><a href="#show-index"><code>SHOW INDEX</code></a>
возвращает следующие поля:</p>
<ul><li><p><code>Table</code></p>
<p>Имя таблицы.</li>

<li><code>Non_unique</code></p>
<p>0, если индексирование не может содержать дубликаты, 1, если может.</li>
<li><code>Key_name</code></p>
<p>Название индекса. Если индексирование является первичным ключом,
имя всегда <code>PRIMARY</code>.</li>

<li><code>Seq_in_index</code></p>
<p>Порядковый номер столбца в индексировании, начиная с 1.</li>
<li><code>Column_name</code></p>
<p>Имя столбца.</li>

<li><code>Collation</code></p>
<p>Как столбец сортирован в индексировании. В MySQL у этого могут быть
значения <code>A</code> (Ascending) или <code>NULL</code> (не сортирован).
</li>

<li><code>Cardinality</code></p>
<p>Оценка числа уникальных значений в индексировании. Это обновлено
<a href="#analyze-table"><code>ANALYZE TABLE</code></a> или
<a href="programs.htm#myisamchk"><span><strong>myisamchk -a</strong></span>
</a>. <code>Cardinality</code> посчитан, основываясь на статистике,
сохраненной как целые числа, таким образом, значение не обязательно точно
даже для маленьких таблиц. Чем выше количество элементов, тем больше шанс,
что MySQL использует индексирование, делая соединения.</li>

<li><code>Sub_part</code></p>
<p>Префикс индекса. Число индексированных символов, если
столбец только частично индексирован, <code>NULL</code>,
если весь столбец индексирован.</p>

<p>Пределы префикса измерены в байтах, тогда как длина префикса в
<a href="#create-table"><code>CREATE TABLE</code></a>,
<a href="#alter-table"><code>ALTER TABLE</code></a> и
<a href="#create-index"><code>CREATE INDEX</code></a>
интерпретируется как число символов для недвоичных строковых типов
(<a href="types.htm#char"><code>CHAR</code></a>,
<a href="types.htm#char"><code>VARCHAR</code></a>,
<a href="types.htm#blob"><code>TEXT</code></a>)
и число байт для двоичных строковых типов
(<a href="types.htm#binary-varbinary"><code>BINARY</code></a>,
<a href="types.htm#binary-varbinary"><code>VARBINARY</code></a>,
<a href="types.htm#blob"><code>BLOB</code></a>).
Примите это во внимание, определяя длину префикса для недвоичного строкового
столбца, который использует многобайтовый набор символов.</p>
<p>См. <a href="#create-index">раздел 14.1.12</a>.</li>

<li><code>Packed</code></p>
<p>Указывает, как ключ упакован. <code>NULL</code>, если никак.</li>
<li><code>Null</code></p>
<p><code>YES</code>, если столбец может содержать значения
<code>NULL</code>, <code>''</code>, если нет.</li>

<li><code>Index_type</code></p>
<p>Используемый метод индекса (<code>BTREE</code>,
<code>FULLTEXT</code>, <code>HASH</code>, <code>RTREE</code>).</li>

<li><code>Comment</code></p>
<p>Информация об индексировании, не описанная в его собственном столбце,
такая как <code>disabled</code>, если индекс выключен.</li>

<li><code>Index_comment</code></p>
<p>Любой комментарий с атрибутом <code>COMMENT</code>,
когда индексирование создавалось.</li>

<li><code>Visible</code></p>
<p>Видимо ли индексирование оптимизатору. См.
<a href="optimiz.htm#invisible-indexes">раздел 9.3.10</a>.</p></li></ul>

<p>Вы можете использовать
<em><code>db_name</code></em>.<em><code>tbl_name</code></em>
как альтернативу <code><em><code>tbl_name</code></em> FROM
<em><code>db_name</code></em></code>. Эти два запросы эквивалентны:
<pre>
SHOW INDEX FROM mytable FROM mydb;
SHOW INDEX FROM mydb.mytable;
</pre>

<code>WHERE</code> может быть дан, чтобы выбрать строки, используя более
общие условия, как обсуждено в
<a href="inform.htm#extended-show">раздел 22.31</a>.</p>

<p>Вы можете также перечислить индексы таблицы с
<a href="programs.htm#mysqlshow"><span><strong>mysqlshow -k <em><code>
db_name</code></em> <em><code>tbl_name</code></em></strong></span></a>.</p>

<h4><a name="show-master-status"></a>14.7.5.23. SHOW MASTER STATUS</h4>
<pre>
SHOW MASTER STATUS
</pre>

Этот запрос обеспечивает информацию о статусе двоичных файлов системного
журнала ведущего устройства. Это требует любой привилегии
<a href="security.html#priv_super"><code>SUPER</code></a> или
<a href="security.html#priv_replication-client"><code>REPLICATION CLIENT
</code></a>.</p>

<p>Пример:
<pre>
mysql&gt; SHOW MASTER STATUS\G
*************************** 1. row ***************************
 File: master-bin.000002
 Position: 1307
 Binlog_Do_DB: test
 Binlog_Ignore_DB: manual, mysql
Executed_Gtid_Set: 3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5
1 row in set (0.00 sec)
</pre>

Когда глобальные операционные ID используются,
<code>Executed_Gtid_Set</code> показывает набор GTID
для транзакций, которые были выполнены на ведущем устройстве. Это то же
самое, как значение <a href="replica.htm#sysvar_gtid_executed"><code>
gtid_executed</code></a> на этом сервере, так же как значение
<code>Executed_Gtid_Set</code> в выводе
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>
на этом сервере.</p>

<h4><a name="show-open-tables"></a>14.7.5.24. SHOW OPEN TABLES</h4>
<pre>
SHOW OPEN TABLES [{FROM | IN} <em><code>db_name</code></em>]
[LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-open-tables"><code>SHOW OPEN TABLES</code></a>
перечисляет не-<code>TEMPORARY</code> таблицы, которые в настоящее время
открыты в табличном кэше. См. <a href="optimiz.htm#table-cache">раздел
9.4.3.1</a>. <code>FROM</code>, если есть, ограничивает таблицы
существующими в <em><code>db_name</code></em>.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена таблиц соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>.</p>

<p><a href="#show-open-tables"><code>SHOW OPEN TABLES</code></a>
имеет следующие столбцы:</p>
<ul><li><p><code>Database</code></p>
<p>База данных, содержащая таблицу.</li>

<li><code>Table</code></p>
<p>Имя таблицы.</li>

<li><code>In_use</code></p>
<p>Число табличных блокировок или запросов блокировки для таблицы. Например,
если один клиент приобретает блокировку таблицы через
<code>LOCK TABLE t1 WRITE</code>, <code>In_use</code> 1.
Если другой клиент командует <code>LOCK TABLE t1 WRITE</code>
в то время как таблица остается заблокированной, клиент заблокирует ожидание
блокировки, но запрос блокировки посчитан, и <code>In_use</code> 2.
Если количество ноль, таблица открыта, но в настоящее время не используется.
<code>In_use</code> также увеличен
<a href="#handler"><code>HANDLER ... OPEN</code></a> и уменьшен
<a href="#handler"><code>HANDLER ... CLOSE</code></a>.</li>

<li><code>Name_locked</code></p>
<p>Заблокировано ли имя таблицы. Блокировка имени используется для таких
операций, как удаление или переименование таблиц.</p></li></ul>
<p>Если у Вас нет никаких привилегий для таблицы, она не показана в выводе
<a href="#show-open-tables"><code>SHOW OPEN TABLES</code></a>.</p>

<h4><a name="show-plugins"></a>14.7.5.25. SHOW PLUGINS</h4>
<pre>
SHOW PLUGINS
</pre>

<a href="#show-plugins"><code>SHOW PLUGINS</code></a> показывает
информацию о плагинах сервера. Эта информация также доступна в таблице
<code>INFORMATION_SCHEMA.PLUGINS</code>, см.
<a href="inform.htm#plugins-table">раздел 22.15</a>.</p>

<p>Пример вывода <a href="#show-plugins"><code>SHOW PLUGINS</code>
</a>:
<pre>
mysql&gt; SHOW PLUGINS\G
*************************** 1. row ***************************
   Name: binlog
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 2. row ***************************
   Name: CSV
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 3. row ***************************
   Name: MEMORY
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
*************************** 4. row ***************************
   Name: MyISAM
 Status: ACTIVE
   Type: STORAGE ENGINE
Library: NULL
License: GPL
...
</pre>
Столбцы вывода <a href="#show-plugins"><code>SHOW PLUGINS</code></a>:
</p>

<ul><li><p><code>Name</code>: Имя плагина.</li>
<li><code>Status</code>: Статус плагина, одно из
<code>ACTIVE</code>, <code>INACTIVE</code>,
<code>DISABLED</code> или <code>DELETED</code>.</li>

<li><code>Type</code>: Тип плагина, одно из <code>STORAGE ENGINE</code>,
<code>INFORMATION_SCHEMA</code> или <code>AUTHENTICATION</code>.</li>
<li><code>Library</code>: Название совместно используемого файла библиотеки
плагина. Это имя, используемое, чтобы обратиться к файлу в запросах вроде
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a> и
<a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
Этот файл расположен в каталоге, названном переменной
<a href="server.htm#sysvar_plugin_dir"><code>plugin_dir</code></a>.
Если имя библиотеки <code>NULL</code>, плагин собран в сервер и не может быть
удален <a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>.
</li>

<li><code>License</code>: Как плагин лицензируется, например,
<code>GPL</code>.</p></li></ul>
<p>Для плагинов, установленных с <a href="#install-plugin"><code>
INSTALL PLUGIN</code></a>, <code>Name</code> и <code>Library</code>
также зарегистрированы в таблице <code>mysql.plugin</code>.</p>

<p>Для информации о структурах данных, которые формируют информацию,
выведенную на экран <a href="#show-plugins"><code>SHOW PLUGINS</code>
</a>, см. <a href="extend.htm#plugin-api">раздел 26.2</a>.</p>

<h4><a name="show-privileges"></a>14.7.5.26. SHOW PRIVILEGES</h4>
<pre>
SHOW PRIVILEGES
</pre>

<a href="#show-privileges"><code>SHOW PRIVILEGES</code></a> показывает
список системных привилегий, которые сервер MySQL поддерживает. Точный список
привилегий зависит от версии Вашего сервера.
<pre>
mysql&gt; SHOW PRIVILEGES\G
*************************** 1. row ***************************
Privilege: Alter
  Context: Tables
  Comment: To alter the table
*************************** 2. row ***************************
Privilege: Alter routine
  Context: Functions,Procedures
  Comment: To alter or drop stored functions/procedures
*************************** 3. row ***************************
Privilege: Create
  Context: Databases,Tables,Indexes
  Comment: To create new databases and tables
*************************** 4. row ***************************
Privilege: Create routine
  Context: Databases
  Comment: To use CREATE FUNCTION/PROCEDURE
*************************** 5. row ***************************
Privilege: Create temporary tables
  Context: Databases
  Comment: To use CREATE TEMPORARY TABLE
...
</pre>

Привилегии, принадлежащие определенному пользователю, выведены на экран
<a href="#show-grants"><code>SHOW GRANTS</code></a>, см.
<a href="#show-grants">раздел 14.7.5.21</a>.</p>

<h4><a name="show-procedure-code"></a>14.7.5.27. SHOW PROCEDURE CODE</h4>
<pre>
SHOW PROCEDURE CODE <em><code>proc_name</code></em>
</pre>

Этот запрос расширение MySQL, которое доступно только для серверов, которые
были созданы с поддержкой отладки. Это выводит на экран представление
внутреннего выполнения названной хранимой процедуры. Подобный запрос
<a href="#show-function-code"><code>SHOW FUNCTION CODE</code></a>,
показывает информацию о сохраненных функциях (см.
<a href="#show-function-code">раздел 14.7.5.19</a>).</p>

<p>Чтобы использовать запрос, Вы должны быть владельцем подпрограммы или
иметь привилегию <a href="#select"><code>SELECT</code></a>
на таблице <code>mysql.proc</code>.</p>

<p>Если названная подпрограмма доступна, запрос производит набор результатов.
Каждая строка в наборе результатов соответствует одной
<span><span>инструкции</span></span> в подпрограмме. Первый столбец
<code>Pos</code>, который является порядковым числом, начинающимся с 0.
Второй столбец <code>Instruction</code> содержит запрос SQL (обычно
измененный от первоисточника) или директиву, у которой есть значение только
в обработчике сохраненной подпрограммы.
<pre>
mysql&gt; DELIMITER //
mysql&gt; CREATE PROCEDURE p1 ()
    -&gt; BEGIN
    -&gt;   DECLARE fanta INT DEFAULT 55;
    -&gt;   DROP TABLE t2;
    -&gt;   LOOP
    -&gt;     INSERT INTO t3 VALUES (fanta);
    -&gt;   END LOOP;
    -&gt; END//
Query OK, 0 rows affected (0.00 sec)

mysql&gt; SHOW PROCEDURE CODE p1//
+-----+----------------------------------------+
| Pos | Instruction                            |
+-----+----------------------------------------+
|   0 | set fanta@0 55                         |
|   1 | stmt 9 "DROP TABLE t2"                 |
|   2 | stmt 5 "INSERT INTO t3 VALUES (fanta)" |
|   3 | jump 2                                 |
+-----+----------------------------------------+
4 rows in set (0.00 sec)
</pre>

В этом примере невыполняемые запросы <code>BEGIN</code> и <code>END</code>
исчезли, и для <code>DECLARE <em><code>variable_name</code></em></code>
появляется только выполнимая часть (часть, где значение по умолчанию
назначено). Для каждого запроса, который взят из источника, есть кодовое
слово <code>stmt</code> сопровождаемое типом (9 <code>DROP</code>, 5
<a href="#insert"><code>INSERT</code></a>). Заключительная строка
содержит инструкцию <code>jump 2</code> со
значением <code>GOTO instruction #2</code>.</p>

<h4><a name="show-procedure-status"></a>14.7.5.28. SHOW PROCEDURE STATUS</h4>
<pre>
SHOW PROCEDURE STATUS
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

Этот запрос расширение MySQL. Это возвращает характеристики хранимой
процедуры, такие как база данных, имя, тип, создатель, даты создания и
модификации и информация о наборе символов. Подобный запрос,
<a href="#show-function-status"><code>SHOW FUNCTION STATUS</code></a>,
покажет информацию о сохраненных функциях (см.
<a href="#show-function-status">раздел 14.7.5.20</a>).</p>

<p><a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена процедур или функций соответствуют.
<code>WHERE</code> может быть дан, чтобы выбрать строки, используя более
общие условия, как обсуждено в
<a href="inform.htm#extended-show">разделе 22.31</a>.
<pre>
mysql&gt; SHOW PROCEDURE STATUS LIKE 'sp1'\G
*************************** 1. row ***************************
  Db: test
Name: sp1
Type: PROCEDURE
 Definer: testuser@localhost
Modified: 2004-08-03 15:29:37
 Created: 2004-08-03 15:29:37
   Security_type: DEFINER
 Comment:
character_set_client: latin1
collation_connection: latin1_swedish_ci
  Database Collation: latin1_swedish_ci
</pre>

<code>character_set_client</code> сессионное значение переменной
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда подпрограмма создавалась.
<code>collation_connection</code> сессионное значение переменной
<a href="server.htm#sysvar_collation_connection"><code>
collation_connection</code></a>, когда подпрограмма создавалась.
<code>Database Collation</code> сопоставление базы данных, с
которой связана подпрограмма.</p>

<p>Вы можете также получить информацию о сохраненных подпрограммах из
таблицы <a href="inform.htm#routines-table"><code>ROUTINES</code></a> в
<code>INFORMATION_SCHEMA</code>. См.
<a href="inform.htm#routines-table">раздел 22.19</a>.</p>

<h4><a name="show-processlist"></a>14.7.5.29. SHOW PROCESSLIST</h4>
<pre>
SHOW [FULL] PROCESSLIST
</pre>

<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>
показывает, которые потоки выполняются. Вы можете также получить эту
информацию из таблицы <a href="inform.htm#processlist-table"><code>
PROCESSLIST</code></a> базы данных <code>INFORMATION_SCHEMA</code> или
из команды <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
processlist</strong></span></a>. Если Вы имеете привилегию
<a href="security.html#priv_process"><code>PROCESS</code></a>,
Вы можете видеть все потоки. Иначе Вы можете видеть только свои собственные
потоки (то есть, потоки, связанные с учетной записью MySQL, которую Вы
используете). Если Вы не используете <code>FULL</code>, только первые 100
символов каждого запроса показываются в поле <code>Info</code>.</p>

<p>Информация о процессе также доступна из таблицы
<a href="perfor.htm#threads-table"><code>performance_schema.threads</code>
</a>. Однако, доступ к <a href="perfor.htm#threads-table"><code>threads
</code></a> не требует mutex и оказывает минимальное влияние на работу
сервера. <a href="inform.htm#processlist-table"><code>
INFORMATION_SCHEMA.PROCESSLIST</code></a> и
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>
имеют отрицательные исполнительные последствия, потому что они требуют mutex.
<a href="perfor.htm#threads-table"><code>threads</code></a>
также показывает информацию о фоновых потоках, которую
<a href="inform.htm#processlist-table"><code>INFORMATION_SCHEMA.PROCESSLIST
</code></a> и <a href="#show-processlist"><code>SHOW PROCESSLIST
</code></a> не выводят. Это означает, что <a href="perfor.htm#threads-table">
<code>threads</code></a> может использоваться, чтобы контролировать
деятельность, которую другие источники информации потока не могут.</p>

<p><a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>
очень полезен, если Вы получаете сообщение
<span><span>too many connections</span></span>
и хотите узнать, что происходит. MySQL резервирует одно дополнительное
соединение, которое будет использоваться учетными записями, которые имеют
привилегию <a href="security.html#priv_super"><code>SUPER</code></a>,
чтобы гарантировать, что администраторы должны всегда быть в состоянии
соединиться и проверить систему (предполагая, что Вы не даете эту привилегию
всем своим пользователям).</p>

<p>Потоки могут быть уничтожены с помощью
<a href="#kill"><code>KILL</code></a>, см.
<a href="#kill">раздел 14.7.6.4</a>.</p>

<p>Пример вывода <a href="#show-processlist"><code>SHOW PROCESSLIST
</code></a>:
<pre>
mysql&gt; SHOW FULL PROCESSLIST\G
*************************** 1. row ***************************
Id: 1
User: system user
Host:
db: NULL
Command: Connect
Time: 1030455
State: Waiting for master to send event
Info: NULL
*************************** 2. row ***************************
Id: 2
User: system user
Host:
db: NULL
Command: Connect
Time: 1004
State: Has read all relay log; waiting for the slave
   I/O thread to update it
Info: NULL
*************************** 3. row ***************************
Id: 3112
User: replikator
Host: artemis:2204
db: NULL
Command: Binlog Dump
Time: 2144
State: Has sent all binlog to slave; waiting for binlog to be updated
Info: NULL
*************************** 4. row ***************************
Id: 3113
User: replikator
Host: iconnect2:45781
db: NULL
Command: Binlog Dump
Time: 2086
State: Has sent all binlog to slave; waiting for binlog to be updated
Info: NULL
*************************** 5. row ***************************
Id: 3123
User: stefan
Host: localhost
db: apollon
Command: Query
Time: 0
State: NULL
Info: SHOW FULL PROCESSLIST
5 rows in set (0.00 sec)
</pre>
Столбцы, произведенные <a href="#show-processlist"><code>SHOW
PROCESSLIST</code></a> имеют следующие значения:</p>

<ul><li><p><a name="processlist_id"></a><code>Id</code></p>
<p>Идентификатор соединения. Это <code>ID</code> столбца из таблицы
<a href="inform.htm#processlist-table"><code>INFORMATION_SCHEMA.PROCESSLIST
</code></a>, столбец <code>PROCESSLIST_ID</code> из таблицы
<a href="perfor.htm#threads-table"><code>threads</code></a> в Performance
Schema, он же возвращается функцией
<a href="funct.htm#function_connection-id"><code>CONNECTION_ID()</code></a>.
</li>

<li><a name="processlist_user"></a><code>User</code></p>
<p>Пользователь MySQL, который сделал запрос. Если это <code>system
user</code>, он обращается к потоку, порожденному сервером, чтобы обработать
задачи внутренне. Это могло быть вводом/выводом или потоком SQL, используемым
на ведомых устройствах или обработчике отсроченной строки.
<code>unauthenticated user</code> обращается к потоку, который стал связанным
с соединением клиента, но для которого еще не была сделана аутентификация
пользователя клиента. <code>event_scheduler</code> обращается к потоку,
который следит за развитием запланированных событий. Для <code>system
user</code> нет никакого узла, определенного в столбце <code>Host</code>.
</li>

<li><a name="processlist_host"></a><code>Host</code></p>
<p>Имя хоста клиента, делающего запрос (за исключением
<code>system user</code>, где хоста нет).
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>
сообщает имя хоста для соединений TCP/IP в формате
<code><em><code>host_name</code></em>:<em><code>client_port</code></em>
</code>, чтобы облегчить определять, какой клиент что делает.</li>

<li><a name="processlist_db"></a><code>db</code></p>
<p>База данных значения по умолчанию, если выбрана, иначе <code>NULL</code>.
</li>

<li><a name="processlist_command"></a><code>Command</code></p>
<p>Тип команды, которую поток выполняет. Для описаний команд потока см.
<a href="optimiz.htm#thread-information">раздел 9.14</a>.
Значение этого столбца соответствует командам
<code>COM_<em><code>xxx</code></em></code> протокола клиент-сервер и
переменным состояния <code>Com_<em><code>xxx</code></em></code>. См.
<a href="server.htm#server-status-variables">раздел 6.1.7</a>.</li>

<li><a name="processlist_time"></a><code>Time</code></p>
<p>Время в секундах, которое поток был в его текущем состоянии. Для ведомого
потока SQL значение указывает число секунд между timestamp последнего
копируемого события и реальным временем ведомой машины. См.
<a href="replica.htm#replication-implementation-details">раздел 19.2.2</a>.
</li>

<li><a name="processlist_state"></a><code>State</code></p>
<p>Действие или статус, которое указывает на то, что делает поток. См
<a href="optimiz.htm#thread-information">раздел 9.14</a>.</p>

<p>Большинство статусов соответствует очень быстрым операциям. Если поток
остается в данном статусе в течение многих секунд, может быть проблема,
которая должна быть исследована.</p>
<p>Для <a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>
значение <code>State</code> <code>NULL</code>.</li>

<li><a name="processlist_info"></a><code>Info</code></p>
<p>Запрос, который поток выполняет, или <code>NULL</code>, если это не
выполняет запрос. Запрос может быть посланным в сервер или внутренним
запросом, если запрос выполняет другие запросы. Например, если
<code>CALL</code> выполняет хранимую процедуру, которая выполняет
<a href="#select"><code>SELECT</code></a>, <code>Info</code>
покажет именно <a href="#select"><code>SELECT</code></a>.
</p></li></ul>

<h4><a name="show-profile"></a>14.7.5.30. SHOW PROFILE</h4>
<pre>
SHOW PROFILE [<em><code>type</code></em> [, <em><code>type</code></em>] ... ]
     [FOR QUERY <em><code>n</code></em>]
     [LIMIT <em><code>row_count</code></em> [OFFSET <em><code>offset</code></em>]]

<em><code>type</code></em>:
ALL
  | BLOCK IO
  | CONTEXT SWITCHES
  | CPU
  | IPC
  | MEMORY
  | PAGE FAULTS
  | SOURCE
  | SWAPS
</pre>

<a href="#show-profile"><code>SHOW PROFILE</code></a> и
<a href="#show-profiles"><code>SHOW PROFILES</code></a>
выводят на экран информацию о профилировании, которая указывает на
использование ресурсов для запросов, выполненных в течение текущего сеанса.
</p>

<p>Эти запросы устарели и будут удалены в будущем выпуске MySQL. Используйте
<a href="perfor.htm">Performance Schema</a>, см.
<a href="perfor.htm#performance-schema-query-profiling">раздел 23.16.1</a>.
</p>

<p>Профилированием управляет сессионная переменная
<a href="server.htm#sysvar_profiling"><code>profiling</code></a>,
у которой есть значение по умолчанию 0 (<code>OFF</code>).
Профилирование включено, устанавливая
<a href="server.htm#sysvar_profiling"><code>profiling</code></a>
в 1 или <code>ON</code>:
<pre>
mysql&gt; SET profiling = 1;
</pre>

<a href="#show-profiles"><code>SHOW PROFILES</code></a>
выводит на экран список новых запросов, посланных в сервер. Размером списка
управляет <a href="server.htm#sysvar_profiling_history_size"><code>
profiling_history_size</code></a>, у которой есть значение по умолчанию 15.
Максимальное значение 100. Установка значения к 0 имеет
эффект отключения профилирования.</p>

<p>Все запросы профилируются, кроме
<a href="#show-profile"><code>SHOW PROFILE</code></a> и
<a href="#show-profiles"><code>SHOW PROFILES</code></a>,
таким образом, Вы не найдете ни один из этих запросов в списке профиля.
Например, <code>SHOW PROFILING</code> незаконный запрос, и синтаксическая
ошибка происходит, если Вы пытаетесь выполнить ее, но она
обнаружится в списке профилирования.</p>

<p><a href="#show-profile"><code>SHOW PROFILE</code></a>
покажет подробную информацию о единственном запросе. Без
<code>FOR QUERY <em><code>n</code></em></code>
вывод принадлежит последний раз выполненному запросу. Если
<code>FOR QUERY <em><code>n</code></em></code> включен,
<a href="#show-profile"><code>SHOW PROFILE</code></a> покажет
информацию для запроса <em><code>n</code></em>. Значение
<em><code>n</code></em> соответствует значению <code>Query_ID</code>,
выведенному <a href="#show-profiles"><code>SHOW PROFILES</code></a>.
</p>

<p><code>LIMIT <em><code>row_count</code></em></code>
может быть дан, чтобы ограничить вывод
<em><code>row_count</code></em> строками. Если
<code>LIMIT</code> задан, <code>OFFSET <em><code>offset</code></em></code>
может быть добавлен, чтобы начать вывод со строки
<em><code>offset</code></em> в полном наборе строк.</p>

<p>По умолчанию <a href="#show-profile"><code>SHOW PROFILE</code></a>
отобразит столбцы <code>Status</code> и <code>Duration</code>
Значения <code>Status</code> походят на значения <code>State</code> из
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a>,
хотя могли бы быть некоторые незначительные различия в интерпретации
этих двух запросов для некоторых значений состояния (см.
<a href="optimiz.htm#thread-information">раздел 9.14</a>).</p>

<p><em><code>type</code></em> могут быть определены, чтобы вывести на экран
определенные дополнительные типы информации:</p>
<ul><li><p><code>ALL</code> покажет всю информацию.</li>

<li><code>BLOCK IO</code> покажет операции ввода и вывода блока.</li>
<li><code>CONTEXT SWITCHES</code> покажет добровольные и
ненамеренные переключения контекста.</li>

<li><code>CPU</code> покажет пользовательские и системные времена
использования центрального процессора.</li>
<li><code>IPC</code> покажет число сообщений, посланных и полученных.</li>

<li><code>MEMORY</code> в настоящее время не осуществляется.</li>
<li><code>PAGE FAULTS</code> покажет главные и
незначительные ошибки страницы.</li>

<li><code>SOURCE</code> покажет названия функций от исходного кода, вместе с
именем и номером строки файла, в котором происходит функция.</li>
<li><code>SWAPS</code> покажет число свопов.</p></li></ul>

<p>Профилирование включено для сеанса. Когда сеанс заканчивается, его
информация о профилировании потеряна.
<pre>
mysql&gt; SELECT @@profiling;
+-------------+
| @@profiling |
+-------------+
|   0         |
+-------------+
1 row in set (0.00 sec)

mysql&gt; SET profiling = 1;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; DROP TABLE IF EXISTS t1;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; CREATE TABLE T1 (id INT);
Query OK, 0 rows affected (0.01 sec)

mysql&gt; SHOW PROFILES;
+----------+----------+--------------------------+
| Query_ID | Duration | Query                    |
+----------+----------+--------------------------+
| 0        | 0.000088 | SET PROFILING = 1        |
| 1        | 0.000136 | DROP TABLE IF EXISTS t1  |
| 2        | 0.011947 | CREATE TABLE t1 (id INT) |
+----------+----------+--------------------------+
3 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE;
+----------------------+----------+
| Status               | Duration |
+----------------------+----------+
| checking permissions | 0.000040 |
| creating table       | 0.000056 |
| After create         | 0.011363 |
| query end            | 0.000375 |
| freeing items        | 0.000089 |
| logging slow query   | 0.000019 |
| cleaning up          | 0.000005 |
+----------------------+----------+
7 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE FOR QUERY 1;
+--------------------+----------+
| Status             | Duration |
+--------------------+----------+
| query end          | 0.000107 |
| freeing items      | 0.000008 |
| logging slow query | 0.000015 |
| cleaning up        | 0.000006 |
+--------------------+----------+
4 rows in set (0.00 sec)

mysql&gt; SHOW PROFILE CPU FOR QUERY 2;
+----------------------+----------+----------+------------+
| Status               | Duration | CPU_user | CPU_system |
+----------------------+----------+----------+------------+
| checking permissions | 0.000040 | 0.000038 |   0.000002 |
| creating table       | 0.000056 | 0.000028 |   0.000028 |
| After create         | 0.011363 | 0.000217 |   0.001571 |
| query end            | 0.000375 | 0.000013 |   0.000028 |
| freeing items        | 0.000089 | 0.000010 |   0.000014 |
| logging slow query   | 0.000019 | 0.000009 |   0.000010 |
| cleaning up          | 0.000005 | 0.000003 |   0.000002 |
+----------------------+----------+----------+------------+
7 rows in set (0.00 sec)
</pre>

<p>Профилирование только частично функционально на небольшом количестве
архитектуры. Для значений, которые зависят от системного вызова
<code>getrusage()</code>, <code>NULL</code> возвращен на таких системах, как
Windows, которые не поддерживают требование. Кроме того, профилирование для
процесса, а не потока. Это означает, что деятельность по потокам в пределах
сервера, кроме Вашего собственного, может затронуть информацию о
синхронизации, которую Вы видите.</p>

<p>Вы можете также получить информацию профилирования из таблицы
<a href="inform.htm#profiling-table"><code>PROFILING</code></a> базы данных
<code>INFORMATION_SCHEMA</code>. См.
<a href="inform.htm#profiling-table">раздел 22.17</a>.
Например, следующие запросы приводят к тому же самому результату:
<pre>
SHOW PROFILE FOR QUERY 2;
SELECT STATE, FORMAT(DURATION, 6) AS DURATION
       FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID = 2 ORDER BY SEQ;
</pre>

<h4><a name="show-profiles"></a>14.7.5.31. SHOW PROFILES</h4>
<pre>
SHOW PROFILES
</pre>

<a href="#show-profiles"><code>SHOW PROFILES</code></a> вместе с
<a href="#show-profile"><code>SHOW PROFILE</code></a> показывают
профилирующие информацию, которая указывает на использование ресурсов для
запросов, выполненных в течение текущего сеанса. См.
<a href="#show-profile">раздел 14.7.5.30</a>.</p>

<h4><a name="show-relaylog-events"></a>14.7.5.32. SHOW RELAYLOG EVENTS</h4>
<pre>
SHOW RELAYLOG EVENTS
     [IN '<em><code>log_name</code></em>'] [FROM <em><code>pos</code></em>]
     [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
</pre>

Показывает события в журнале реле ведомого устройства.
Если Вы не определяете
<code>'<em><code>log_name</code></em>'</code>, первый журнал реле выведен
на экран. Этот запрос не имеет никакого эффекта на ведущее устройство.</p>

<p><code>LIMIT</code> имеет тот же самый синтаксис, что касается
<a href="#select"><code>SELECT</code></a>, см.
<a href="#select">раздел 14.2.9</a>.</p>

<p><a href="#show-relaylog-events"><code>SHOW RELAYLOG EVENTS</code>
</a> без <code>LIMIT</code> может занять много времени и ресурсов, потому что
сервер возвращает клиенту полное содержание журнала реле (включая все
запросы, изменяющие данные, которые были получены ведомым устройством).</p>

<p>Некоторые события, касающиеся установки пользовательских и системных
переменных, не включены в вывод <a href="#show-relaylog-events"><code>
SHOW RELAYLOG EVENTS</code></a>. Чтобы получить полный обзор событий в
пределах журнала реле, используйте <a href="programs.htm#mysqlbinlog"><span>
<strong>mysqlbinlog</strong></span></a>.</p>

<h4><a name="show-slave-hosts"></a>14.7.5.33. SHOW SLAVE HOSTS</h4>
<pre>
SHOW SLAVE HOSTS
</pre>
Выводит на экран список ведомых устройств, в настоящее время
зарегистрированных в ведущем устройстве.</p>

<p><code>SHOW SLAVE HOSTS</code> должен быть выполнен на сервере, который
действует как ведущее устройство. Запрос выводит на экран информацию о
серверах, которые являются или были соединены как ведомые устройства, с
каждой строкой результата, соответствующей одному ведомому серверу,
как показано здесь:
<pre>
mysql&gt; SHOW SLAVE HOSTS;
+------------+-----------+------+-----------+--------------------------------------+
| Server_id  | Host      | Port | Master_id | Slave_UUID                           |
+------------+-----------+------+-----------+--------------------------------------+
|  192168010 | iconnect2 | 3306 | 192168011 | 14cb6624-7f93-11e0-b2c0-c80aa9429562 |
| 1921680101 | athena    | 3306 | 192168011 | 07af4990-f41f-11df-a566-7ac56fdaf645 |
+------------+-----------+------+-----------+--------------------------------------+
</pre>

<ul><li><p><code>Server_id</code>: ID ведомого сервера, как указано в файле
опций ведомого сервера или в командной строке с
<a href="replica.htm#option_mysqld_server-id"><code>
--server-id=<em><code>value</code></em></code></a>.</li>

<li><code>Host</code>: Имя хоста ведомого сервера как определено на ведомом
устройстве с помощью <a href="replica.htm#option_mysqld_report-host"><code>
--report-host</code></a>. Это может отличаться от машинного
имени в операционной системе.</li>

<li><code>User</code>: Ведомое имя пользователя сервера как определено на
ведомом устройстве с помощью
<a href="replica.htm#option_mysqld_report-user"><code>--report-user</code>
</a>. Вывод запросов включает этот столбец, только если главный сервер
запущен с опцией <a href="replica.htm#option_mysqld_show-slave-auth-info">
<code>--show-slave-auth-info</code></a>.</li>

<li><code>Password</code>: Ведомый пароль сервера как определен на ведомом
устройстве с помощью <a href="replica.htm#option_mysqld_report-password">
<code>--report-password</code></a>. Вывод включает этот столбец, только если
главный сервер запущен с опцией
<a href="replica.htm#option_mysqld_show-slave-auth-info"><code>
--show-slave-auth-info</code></a>.</li>

<li><code>Port</code>: Порт на ведущем устройстве, который ведомый сервер
слушает, как определено на ведомом устройстве с опцией
<a href="replica.htm#option_mysqld_report-port"><code>--report-port</code>
</a>.</p>

<p>Ноль в этом столбце означает, что ведомый порт
(<a href="replica.htm#option_mysqld_report-port"><code>--report-port</code>
</a>) не определен вообще.</li>

<li><code>Master_id</code>: ID главного сервера, с которого копирует ведомый
сервер. Это ID сервера, на котором выполнен <code>SHOW SLAVE HOSTS</code>,
таким образом, это же значение перечислено для каждой строки в результате.
</li>
<li><code>Slave_UUID</code>: ID этого ведомого устройства, как произведено
на ведомом устройстве и записано в файл <code>auto.cnf</code>.</p></li></ul>

<h4><a name="show-slave-status"></a>14.7.5.34. SHOW SLAVE STATUS</h4>
<pre>
SHOW SLAVE STATUS [FOR CHANNEL <em><code>channel</code></em>]
</pre>

Этот запрос обеспечивает информацию о статусе и существенных параметрах
ведомых потоков. Это требует любой привилегии
<a href="security.html#priv_super"><code>SUPER</code></a> или
<a href="security.html#priv_replication-client"><code>REPLICATION CLIENT
</code></a>.</p>

<p><code>SHOW SLAVE STATUS</code> не блокирует. Когда выполнен одновременно с
<a href="#stop-slave"><code>STOP SLAVE</code></a>,
<code>SHOW SLAVE STATUS</code> возвращается, не ожидая, пока
<code>STOP SLAVE</code> закончить закрывать ведомый поток SQL или ведомый
поток ввода/вывода (или обоих). Это разрешает использование в контроле и
других приложениях где, получение непосредственного ответа от
<code>SHOW SLAVE STATUS</code> более важно, чем обеспечение, чтобы это
возвратило последние данные.</p>

<p>Если Вы делаете этот запрос, используя <a href="programs.htm#mysql"><span>
<strong>mysql</strong></span></a>, Вы можете использовать
<code>\G</code>, а не точку с запятой, чтобы получить более
читаемое вертикальное расположение:
<pre>
mysql&gt; SHOW SLAVE STATUS\G
*************************** 1. row ***************************
   Slave_IO_State: Waiting for master to send event
  Master_Host: localhost
  Master_User: root
  Master_Port: 13000
Connect_Retry: 60
  Master_Log_File: master-bin.000002
  Read_Master_Log_Pos: 1307
   Relay_Log_File: slave-relay-bin.000003
Relay_Log_Pos: 1508
Relay_Master_Log_File: master-bin.000002
 Slave_IO_Running: Yes
Slave_SQL_Running: Yes
  Replicate_Do_DB:
  Replicate_Ignore_DB:
   Replicate_Do_Table:
   Replicate_Ignore_Table:
  Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
   Last_Errno: 0
   Last_Error:
 Skip_Counter: 0
  Exec_Master_Log_Pos: 1307
  Relay_Log_Space: 1858
  Until_Condition: None
   Until_Log_File:
Until_Log_Pos: 0
   Master_SSL_Allowed: No
   Master_SSL_CA_File:
   Master_SSL_CA_Path:
  Master_SSL_Cert:
Master_SSL_Cipher:
   Master_SSL_Key:
Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
Last_IO_Errno: 0
Last_IO_Error:
   Last_SQL_Errno: 0
   Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
 Master_Server_Id: 1
  Master_UUID: 3e11fa47-71ca-11e1-9e33-c80aa9429562
 Master_Info_File: /var/mysqld.2/data/master.info
SQL_Delay: 0
  SQL_Remaining_Delay: NULL
  Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it
   Master_Retry_Count: 10
  Master_Bind:
  Last_IO_Error_Timestamp:
 Last_SQL_Error_Timestamp:
   Master_SSL_Crl:
   Master_SSL_Crlpath:
   Retrieved_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5
Executed_Gtid_Set: 3e11fa47-71ca-11e1-9e33-c80aa9429562:1-5
Auto_Position: 1
 Replicate_Rewrite_DB:
 Channel_name:
1 row in set (0.00 sec)
</pre>

Performance Schema обеспечивает таблицы, которые выставляют информацию о
репликации. Это подобно информации, доступной из
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>,
но представленной в табличной форме. Для деталей см.
<a href="perfor.htm#performance-schema-replication-tables">раздел 23.9.11
</a>.</p>

<p>Следующий список описывает области, возвращенные
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>.
См. <a href="replica.htm#replication-administration-status">раздел 19.1.7.1
</a>.</p>

<ul><li><p><code>Slave_IO_State</code></p>
<p>Копия <code>State</code> из <a href="#show-processlist"><code>SHOW
PROCESSLIST</code></a> для ведомого потока ввода/вывода. Это говорит Вам, что
делает поток: попытку соединиться с ведущим устройством, ожидание событий от
ведущего устройства, пересоединение с ведущим устройством и так далее. Для
перечисления возможных статусов см.
<a href="optimiz.htm#slave-io-thread-states">раздел 9.14.5</a>.</li>

<li><code>Master_Host</code></p>
<p>Основной узел, с которым соединено ведомое устройство.</li>
<li><code>Master_User</code></p>
<p>Имя пользователя учетной записи для соединения с ведущим устройством.</li>

<li><code>Master_Port</code></p>
<p>Порт для соединения с ведущим устройством.</li>
<li><code>Connect_Retry</code></p>
<p>Число секунд между повторами соединенияя (значение по умолчанию 60).
Это может быть установлено с помощью <a href="#change-master-to">
<code>CHANGE MASTER TO</code></a>.</li>

<li><code>Master_Log_File</code></p>
<p>Название основного двоичного файла системного журнала, из которого в
настоящее время читает поток ввода/вывода.</li>

<li><code>Read_Master_Log_Pos</code></p>
<p>Позиция в текущем основном двоичном файле системного журнала, до которого
читал поток ввода/вывода.</li>

<li><code>Relay_Log_File</code></p>
<p>Название файла системного журнала реле, из которого поток SQL в настоящее
время читает и выполняет.</li>

<li><code>Relay_Log_Pos</code></p>
<p>Позиция в текущем файле системного журнала реле, до которой поток
SQL считал и выполнил.</li>

<li><code>Relay_Master_Log_File</code></p>
<p>Название основного двоичного файла системного журнала, содержащего новое
событие, выполненное потоком SQL.</li>

<li><code>Slave_IO_Running</code></p>
<p>Начат ли поток ввода/вывода и соединился ли успешно с ведущим устройством.
Внутренне статус этого потока представлен одним из следующих трех значений:
</p>

<ul><li><p><b>MYSQL_SLAVE_NOT_RUN. </b>
Ведомый поток ввода/вывода не работает. Для этого статуса
<code>Slave_IO_Running</code> <code>No</code>.</li>

<li><b>MYSQL_SLAVE_RUN_NOT_CONNECT. </b>
Ведомый поток ввода/вывода работает, но не соединен с ведущим устройством.
Для этого состояния <code>Slave_IO_Running</code>
зависит от версии сервера как показано в следующей таблице.</p>

<table border="1">
<thead><tr><th scope="col">Версия MySQL</th>
<th scope="col"><code>Slave_IO_Running</code></th></tr></thead>
<tbody><tr><td scope="row">4.1 (4.1.13 и ранее), 5.0 (5.0.11 и ранее)</td>
<td><code>Yes</code></td></tr>
<tr><td scope="row">4.1 (4.1.14 и позже), 5.0 (5.0.12 и позже)</td>
<td><code>No</code></td></tr>
<tr><td scope="row">5.1 (5.1.45 и ранее)</td><td><code>No</code></td></tr>
<tr><td scope="row">5.1 (5.1.46 и позже), 5.5, 5.6</td>
<td><code>Connecting</code></td></tr></tbody></table></li>

<li><b>MYSQL_SLAVE_RUN_CONNECT. </b>
Ведомый поток ввода/вывода работает, и соединен с ведущим устройством. Для
этого состояния <code>Slave_IO_Running</code> <code>Yes</code>.</p></li></ul>
<p>Значение <a href="server.htm#statvar_Slave_running"><code>Slave_running
</code></a> соответствует этому значению.</li>

<li><code>Slave_SQL_Running</code></p>
<p>Начат ли поток SQL.</li>
<li><code>Replicate_Do_DB</code>, <code>Replicate_Ignore_DB</code></p>
<p>Списки баз данных, которые были определены с опциями
<a href="replica.htm#option_mysqld_replicate-do-db"><code>--replicate-do-db
</code></a> и <a href="replica.htm#option_mysqld_replicate-ignore-db"><code>
--replicate-ignore-db</code></a>, если есть.</li>

<li><code>Replicate_Do_Table</code>, <code>Replicate_Ignore_Table</code>,
<code>Replicate_Wild_Do_Table</code>, <code>Replicate_Wild_Ignore_Table
</code></p>
<p>Списки таблиц, которые были определены с опциями
<a href="replica.htm#option_mysqld_replicate-do-table"><code>
--replicate-do-table</code></a>,
<a href="replica.htm#option_mysqld_replicate-ignore-table"><code>
--replicate-ignore-table</code></a>,
<a href="replica.htm#option_mysqld_replicate-wild-do-table"><code>
--replicate-wild-do-table</code></a> и
<a href="replica.htm#option_mysqld_replicate-wild-ignore-table"><code>
--replicate-wild-ignore-table</code></a>, если есть.</li>

<li><code>Last_Errno</code>, <code>Last_Error</code></p>
<p>Эти столбцы псевдонимы для <code>Last_SQL_Errno</code> и
<code>Last_SQL_Error</code>.</p>

<p><a href="#reset-master"><code>RESET MASTER</code></a> или
<a href="#reset-slave"><code>RESET SLAVE</code></a>
сбрасывают значения, показанные в этих столбцах.</p>

<p>Когда ведомый поток SQL получает ошибку, он сообщает об ошибке сначала,
затем останавливает поток SQL. Это означает, что есть маленькое окно времени,
во время которого <a href="#show-slave-status"><code>SHOW SLAVE STATUS
</code></a> показывает ненулевое значение для <code>Last_SQL_Errno</code>
даже при том, что <code>Slave_SQL_Running</code> все еще <code>Yes</code>.
</p></li>

<li><code>Skip_Counter</code></p>
<p>Текущее значение <a href="replica.htm#sysvar_sql_slave_skip_counter">
<code>sql_slave_skip_counter</code></a>, см.
<a href="#set-global-sql-slave-skip-counter">раздел 14.4.2.5</a>.</li>

<li><code>Exec_Master_Log_Pos</code></p>
<p>Позиция в текущем основном двоичном файле системного журнала, которую
поток SQL считал и выполнил, отмечая запуск следующей транзакции или события,
которое будет обработано. Вы можете использовать это значение с
опцией <code>MASTER_LOG_POS</code> в <a href="#change-master-to">
<code>CHANGE MASTER TO</code></a>, запуская новое ведомое устройство с
существующего ведомого устройства, чтобы новое ведомое устройство читало с
этого пункта. Координаты, данные (<code>Relay_Master_Log_File</code>,
<code>Exec_Master_Log_Pos</code>) в двоичном журнале ведущего устройства
соответствуют координатам, данным (<code>Relay_Log_File</code>,
<code>Relay_Log_Pos</code>) в журнале реле.</p>

<p>Несогласованности в последовательности транзакций от журнала реле, которые
были выполнены, могут заставить это значение быть
<span><span>нижней меткой</span></span>. Другими словами, транзакции,
появляющиеся перед позицией, как гарантируют, переданы, но транзакции после
позиции, возможно, переданы или нет. Если эти промежутки должны быть
исправлены, надо использовать <a href="#start-slave"><code>
START SLAVE UNTIL SQL_AFTER_MTS_GAPS</code></a>. См.
<a href="replica.htm#replication-features-transaction-inconsistencies">
раздел 19.4.1.34</a>.</li>

<li><code>Relay_Log_Space</code></p>
<p>Полный объединенный размер всех существующих файлов
системного журнала реле.</li>

<li><code>Until_Condition</code>, <code>Until_Log_File</code>,
<code>Until_Log_Pos</code></p>
<p>Значения, определенные в <code>UNTIL</code> в
<a href="#start-slave"><code>START SLAVE</code></a>.</p>

<p><code>Until_Condition</code> имеет эти значения:</p>
<ul><li><p><code>None</code>, если нет <code>UNTIL</code>.</li>
<li><code>Master</code>, если ведомое устройство читает до данной позиции в
двоичном журнале ведущего устройства.</li>

<li><code>Relay</code>, если ведомое устройство читает до данной
позиции в журнале реле.</li>
<li><code>SQL_BEFORE_GTIDS</code>, если ведомый поток SQL обрабатывает
транзакции, пока он не достиг первой транзакции, GTID которой
перечислен в <code>gtid_set</code>.</li>

<li><code>SQL_AFTER_GTIDS</code>, если ведомые потоки обрабатывают все
транзакции до последней транзакции в <code>gtid_set</code>, которая
была обработана обоими потоками.</li>

<li><a href="#start-slave"><code>SQL_AFTER_MTS_GAPS</code></a>,
если потоки SQL мультипоточного ведомого устройства работают, пока больше
промежутков не найдено в журнале реле.</p></li></ul>

<p><code>Until_Log_File</code> и <code>Until_Log_Pos</code>
указывают на имя файла системного журнала и позицию, которые определяют
координаты, в которых поток SQL прекращает выполнять.</p>
<p>См. <a href="#start-slave">раздел 14.4.2.6</a>.</li>

<li><code>Master_SSL_Allowed</code>, <code>Master_SSL_CA_File</code>,
<code>Master_SSL_CA_Path</code>, <code>Master_SSL_Cert</code>,
<code>Master_SSL_Cipher</code>, <code>Master_SSL_CRL_File</code>,
<code>Master_SSL_CRL_Path</code>, <code>Master_SSL_Key</code>,
<code>Master_SSL_Verify_Server_Cert</code></p>
<p>Эти области показывают параметры SSL, используемые ведомым устройством,
чтобы соединиться с ведущим устройством, если есть.</p>
<p><code>Master_SSL_Allowed</code> имеет эти значения:</p>

<ul><li><p><code>Yes</code>, если соединение SSL с
ведущим устройством разрешено.</li>
<li><code>No</code>, если соединение SSL с ведущим устройством не разрешено.
</li>
<li><code>Ignored</code>, если соединение SSL разрешено, но у ведомого
сервера нет включенной поддержки SSL.</p></li></ul>

<p>Значения других SSL-областей соответствуют значениям
<code>MASTER_SSL_CA</code>, <code>MASTER_SSL_CAPATH</code>,
<code>MASTER_SSL_CERT</code>, <code>MASTER_SSL_CIPHER</code>,
<code>MASTER_SSL_CRL</code>, <code>MASTER_SSL_CRLPATH</code>,
<code>MASTER_SSL_KEY</code> и <code>MASTER_SSL_VERIFY_SERVER_CERT</code> в
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>, см.
<a href="#change-master-to">раздел 14.4.2.1</a>.</li>

<li><code>Seconds_Behind_Master</code></p>
<p>Эта область признак того, как работает ведомое устройство:</p>
<ul><li><p>Когда ведомое устройство активно обрабатывает обновления, эта
область показывает различие между потоком timestamp на ведомом устройстве и
оригинальным timestamp в системе ведущего устройства для события, в настоящее
время обрабатываемого на ведомом устройстве.</li>
<li>Когда никакое событие в настоящее время не обрабатывается на ведомом
устройстве, это значение 0.</p></li></ul>

<p>В основном, эта область измеряет разницу во времени в секундах между
ведомым потоком SQL и ведомым потоком ввода/вывода. Если сетевое соединение
между ведущим устройством и ведомым устройством быстрое, ведомый поток
ввода/вывода очень близко к ведущему устройству, таким образом, эта область
хорошее приближение того, как отстает ведомый поток SQL по сравнению с
ведущим устройством. Если сеть является медленной, это не
<span><em>не</em></span> хорошее приближение, ведомый поток SQL может
довольно часто столкнуться с медленным чтением ведомого потока ввода/вывода,
таким образом, <code>Seconds_Behind_Master</code> часто показывает значение
0, даже если поток ввода/вывода отстает по сравнению с ведущим устройством.
Другими словами, <span><em>этот столбец полезен только для быстрых сетей</em>
</span>.</p>

<p>Это вычисление разницы во времени работает, даже если у ведущего
устройства и ведомого устройства нет идентичных часов, при условии, что
различие, вычисленное, когда ведомый поток ввода/вывода запускается, остается
постоянным с тех пор.</p>

<p>В MySQL 8.0 эта область <code>NULL</code> (не определена или неизвестна),
если ведомый поток SQL не работает, или если поток SQL потребил весь журнал
реле, и ведомый поток ввода/вывода не работает. В более старых версиях MySQL
эта область была <code>NULL</code>, если ведомый поток SQL или ведомый поток
ввода/вывода не работали или не были соединены с ведущим устройством. Если
поток ввода/вывода работает, но журнал реле исчерпан,
<code>Seconds_Behind_Master</code> установлен в 0.</p>

<p><code>Seconds_Behind_Master</code> основано на timestamp, сохраненном в
событиях, которые сохранены через репликацию.
Это означает, что, если ведущее устройство
M1 самостоятельно ведомое устройство M0, у любого события из двоичного
журнала M0, которое происходит из двоичного журнала M0, есть timestamp M0 для
того события. Это позволяет MySQL копировать
<a href="types.htm#datetime"><code>TIMESTAMP</code></a> нормально.
Однако, проблема для <code>Seconds_Behind_Master</code>, если M1 также
получает прямые обновления от клиентов,
<code>Seconds_Behind_Master</code> беспорядочно колеблется, потому что иногда
последнее событие в M1 происходит из M0, а иногда является результатом
прямого обновления на M1.</p>

<p>Используя мультипоточное ведомое устройство, Вы должны иметь в виду, что
это значение основано на <code>Exec_Master_Log_Pos</code> и, возможно, не
отражает позицию последней переданной транзакции.</li>

<li><code>Last_IO_Errno</code>, <code>Last_IO_Error</code></p>
<p>Код ошибки и сообщение об ошибке, которая заставила поток ввода/вывода
останавливаться. Код ошибки 0 и сообщение пустой строки не означают
<span><span>нет ошибки</span></span>. Если <code>Last_IO_Error</code>
не пусто, ошибочные значения также появляются в журнале
ошибок ведомого устройства.</p>

<p>Информация об ошибке ввода/вывода включает timestamp, показывающий,
когда ошибка потока ввода/вывода произошла. Этот timestamp использует формат
<code>YYMMDD HH:MM:SS</code> и появляется в <code>Last_SQL_Error_Timestamp
</code>.</p>

<p><a href="#reset-master"><code>RESET MASTER</code></a> или
<a href="#reset-slave"><code>RESET SLAVE</code></a>
сбрасывают значения, показанные в этих столбцах.</li>

<li><code>Last_SQL_Errno</code>, <code>Last_SQL_Error</code></p>
<p>Код ошибки и сообщение об ошибке, которая заставила поток SQL
останавливаться. Код ошибки 0 и сообщение пустой строки не означают
<span><span>нет ошибки</span></span>. Если <code>Last_SQL_Error</code>
не пусто, ошибочные значения также появляются в журнале
ошибок ведомого устройства.</p>

<p>Если ведомое устройство является мультипоточным, поток SQL это
координатор для рабочих потоков. В этом случае
<code>Last_SQL_Error</code> показывает точное значение столбца
<code>Last_Error_Message</code> в таблице Performance Schema
<a href="perfor.htm#replication-applier-status-by-coordinator-table">
<code>replication_applier_status_by_coordinator</code></a>.
Значение поля изменено, чтобы предположить, что может быть больше
отказов в других рабочих потоках, которые могут быть замечены в таблице
<a href="perfor.htm#replication-applier-status-by-worker-table"><code>
replication_applier_status_by_worker</code></a>,
которая показывает каждое состояние потока. Если та таблица недоступна,
ведомый журнал ошибок может использоваться. Журнал или таблица
<a href="perfor.htm#replication-applier-status-by-worker-table">
<code>replication_applier_status_by_worker</code></a>
должны также использоваться, чтобы узнать больше об отказе, показанном
<a href="#show-slave-status"><code>SHOW SLAVE STATUS</code></a>
или таблицей координатора.</p>

<p>Информация об ошибке SQL включает timestamp, показывающий, когда новая
ошибка потока SQL произошла. Этот timestamp использует формат
<code>YYMMDD HH:MM:SS</code> и появляется в столбце
<code>Last_SQL_Error_Timestamp</code>.</p>

<p><a href="#reset-master"><code>RESET MASTER</code></a> или
<a href="#reset-slave"><code>RESET SLAVE</code></a>
сбрасывают значения, показанные в этих столбцах.</p>

<p>В MySQL 8.0 все коды ошибки и сообщения, выведенные на экран в
<code>Last_SQL_Errno</code> и <code>Last_SQL_Error</code>
соответствуют ошибочным значениям, перечисленным в
<a href="error.htm#error-messages-server">разделе B.3</a>. Это было не всегда
истиной в предыдущих версиях (Bug #11760365, Bug #52768).</li>

<li><code>Replicate_Ignore_Server_Ids</code></p>
<p>В MySQL 8.0 Вы устанавливаете ведомое устройство, чтобы проигнорировать
события от 0 или больше ведущих устройств, использующих опцию
<code>IGNORE_SERVER_IDS</code> в
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>.
По умолчанию это пусто и обычно изменяется только, используя круговую или
другую мультиосновную установку репликации. Сообщение, показанное для
<code>Replicate_Ignore_Server_Ids</code>, если не пустое,
состоит из разграниченного запятыми списка из одного или более чисел,
указывающих на ID серверов, которые будут проигнорированы. Например:
<pre>
Replicate_Ignore_Server_Ids: 2, 6, 9
</pre>

<p><code>Ignored_server_ids</code> также показывает ID
сервера, которые будут проигнорированы, но разделенный пробелами список,
которому предшествует общее количество ID
серверов, которые будут проигнорированы. Например, если
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
содержит опцию <code>IGNORE_SERVER_IDS = (2,6,9)</code>,
это означает игнорировать ведущие устройства, имеющие ID 2, 6 или 9,
как показано здесь:
<pre>
Ignored_server_ids: 3, 2, 6, 9
</pre>
Первое число (в этом случае <code>3</code>) показывает
число проигнорированных ID.</p>

<p><code>Replicate_Ignore_Server_Ids</code>
фильтрация выполнена потоком ввода/вывода, а не потоком SQL, что означает,
что события, которые отфильтрованы, не записаны в журнал реле. Это отличается
от мер фильтрации, предпринятых параметрами сервера вроде
<a href="replica.htm#option_mysqld_replicate-do-table"><code>
--replicate-do-table</code></a>, которые относятся к потоку SQL.</li>

<li><code>Master_Server_Id</code></p>
<p><a href="server.htm#sysvar_server_id"><code>server_id</code></a>
от ведущего устройства.</li>

<li><code>Master_UUID</code></p>
<p><a href="replica.htm#sysvar_server_uuid"><code>server_uuid</code></a>
от ведущего устройства.</li>

<li><code>Master_Info_File</code></p>
<p>Местоположение файла <code>master.info</code>.</li>
<li><code>SQL_Delay</code></p>
<p>Число секунд, которые ведомое устройство должно
изолировать ведущее устройство.</li>

<li><code>SQL_Remaining_Delay</code></p>
<p>Когда <code>Slave_SQL_Running_State</code> =
<code>Waiting until MASTER_DELAY seconds after master executed event</code>,
эта область содержит число оставшихся секунд задержки.
В других случаях эта область <code>NULL</code>.</li>

<li><code>Slave_SQL_Running_State</code></p>
<p>Статус потока SQL (аналогичн <code>Slave_IO_State</code>). Идентично
<code>State</code> потока SQL в <a href="#show-processlist"><code>SHOW
PROCESSLIST</code></a>. <a href="optimiz.htm#slave-sql-thread-states">раздел
9.14.6</a> перечисляет возможные статусы.</li>

<li><code>Master_Retry_Count</code></p>
<p>Сколько раз ведомое устройство может попытаться повторно соединиться с
ведущим устройством в случае потерянного соединения. Это значение может быть
установлено, используя опцию <code>MASTER_RETRY_COUNT</code> в
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
(предпочтительно) или более старую опцию
<a href="replica.htm#option_mysqld_master-retry-count"><code>
--master-retry-count</code></a> (все еще поддержана
для обратной совместимости).</li>

<li><code>Master_Bind</code></p>
<p>Сетевой интерфейс, с которым связано ведомое устройство связано, если
есть. Это установлено, используя опцию <code>MASTER_BIND</code> в
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>.</li>

<li><code>Last_IO_Error_Timestamp</code></p>
<p>Метка времени в формате <code>YYMMDD HH:MM:SS</code>, которая показывает,
когда новая ошибка ввода/вывода имела место.</li>

<li><code>Last_SQL_Error_Timestamp</code></p>
<p>Метка времени в формате <code>YYMMDD HH:MM:SS</code>, которая показывает,
когда последняя ошибка SQL произошла.</li>

<li><code>Retrieved_Gtid_Set</code></p>
<p>Набор глобальных операционных ID, соответствующих всем транзакциям,
полученных этим ведомым устройством. Пусто, если GTID не используются.</p>

<p>Это набор всех GTID, которые существуют или существовали в журналах реле.
Каждый GTID добавлен как только получен <code>Gtid_log_event</code>.
Это может заставить частично переданные транзакции включать
свой GTID в набор.</p>

<p>Когда все журналы реле потеряны из-за выполнения
<a href="#reset-slave"><code>RESET SLAVE</code></a>,
<a href="#change-master-to"><code>CHANGE MASTER TO</code></a>
или из-за эффектов опции
<a href="replica.htm#option_mysqld_relay-log-recovery"><code>
--relay-log-recovery</code></a>, набор очищен. Когда
<a href="server.htm#sysvar_relay_log_purge"><code>relay_log_purge = 1</code>
</a>, новейший журнал реле всегда сохраняется, и набор не очищен.</li>

<li><code>Executed_Gtid_Set</code></p>
<p>Набор глобальных операционных ID, записанных в двоичном журнале. Это то же
самое, как значение для глобальной системной переменной
<a href="replica.htm#sysvar_gtid_executed"><code>gtid_executed</code></a>
на этом сервере, так же как значение
<code>Executed_Gtid_Set</code> в выводе
<a href="#show-master-status"><code>SHOW MASTER STATUS</code></a>
на этом сервере. Пусто, если GTID если GTIDs не используются.</li>

<li><code>Auto_Position</code></p>
<p>1, если автопорзиционирование используется, иначе 0.</li>
<li><code>Replicate_Rewrite_DB</code></p>
<p><code>Replicate_Rewrite_DB</code> выводит любые правила фильтрации
репликации, которые были определены. Например, если следующее правило
фильтра было установлено:
<pre>
CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=((db1,db2), (db3,db4));
</pre>

<code>Replicate_Rewrite_DB</code> покажет:
<pre>
Replicate_Rewrite_DB: (db1,db2),(db3,db4)
</pre>
См. <a href="#change-replication-filter">раздел 14.4.2.2</a>.</li>

<li><code>Channel_name</code></p>
<p>Канал, который выводится на экран, всегда канал по умолчанию, и больше
каналов может быть добавлено. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p></li></ul>

<h4><a name="show-status"></a>14.7.5.35. SHOW STATUS</h4>
<pre>
SHOW [GLOBAL | SESSION] STATUS
[LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<p>Значение <a href="server.htm#sysvar_show_compatibility_56"><code>
show_compatibility_56</code></a> затрагивает информацию и привилегии,
требуемые для запроса, описанного здесь. Для деталей см.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>.</p>

<p><a href="#show-status"><code>SHOW STATUS</code></a>
обеспечивает информацию о статусе сервера (см.
<a href="server.htm#server-status-variables">раздел 6.1.7</a>).
Этот запрос не требует никакой привилегии. Это требует только
способности соединиться с сервером.</p>

<p>Информация о переменной состояния также доступна из этих источников:</p>
<ul><li><p>Таблицы Performance Schema. См.
<a href="perfor.htm#performance-schema-status-variable-tables">раздел 23.9.14
</a>.</li>

<li>Таблицы <a href="inform.htm#variables-table"><code>GLOBAL_STATUS</code>
</a> и <a href="inform.htm#variables-table"><code>SESSION_STATUS</code></a>,
см. <a href="inform.htm#status-table">раздел 22.9</a>.</li>

<li>Команда <a href="programs.htm#mysqladmin"><span><strong>mysqladmin
extended-status</strong></span></a>. См.
<a href="programs.htm#mysqladmin">раздел 5.5.2</a>.</p></li></ul>

<p>Для <a href="#show-status"><code>SHOW STATUS</code></a>
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена переменных соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>.</p>

<p><a href="#show-status"><code>SHOW STATUS</code></a> принимает
дополнительный параметр <code>GLOBAL</code> или <code>SESSION</code>:</p>
<ul><li><p>С <code>GLOBAL</code> запрос выводит на экран глобальные значения
состояния. Глобальная переменная состояния может представить состояние для
некоторого аспекта сервера непосредственно (например,
<code>Aborted_connects</code>) или соединенное состояние по всем соединениям
с MySQL (например, <code>Bytes_received</code> и <code>Bytes_sent</code>).
Если у переменной нет никакого глобального значения, значение сеанса
выведено на экран.</li>

<li>С <code>SESSION</code> запрос выводит на экран значения переменной
состояния для текущего соединения. Если у переменной нет никакого значения
сеанса, глобальное значение выведено на экран.
<code>LOCAL</code> синоним для <code>SESSION</code>.</li>

<li>Если никакой модификатор не присутствует, значение по умолчанию
<code>SESSION</code>.</p></li></ul>
<p>Контекст для каждой переменной состояния перечислен в
<a href="server.htm#server-status-variables">разделе 6.1.7</a>.</p>

<p>Каждый вызов <a href="#show-status"><code>SHOW STATUS</code></a>
использует внутреннюю временную таблицу и постепенно увеличивает глобальное
значение <a href="server.htm#statvar_Created_tmp_tables"><code>
Created_tmp_tables</code></a>.</p>

<p>Частичный вывод показан здесь. Список имен и значений может отличаться
для Вашего сервера. Значение каждой переменной дано в
<a href="server.htm#server-status-variables">разделе 6.1.7</a>.
<pre>
mysql&gt; SHOW STATUS;
+-------------------------+------------+
| Variable_name           | Value      |
+-------------------------+------------+
| Aborted_clients         | 0          |
| Aborted_connects        | 0          |
| Bytes_received          | 155372598  |
| Bytes_sent              | 1176560426 |
| Connections             | 30023      |
| Created_tmp_disk_tables | 0          |
| Created_tmp_tables      | 8340       |
| Created_tmp_files       | 60         |
...
| Open_tables             | 1          |
| Open_files              | 2          |
| Open_streams            | 0          |
| Opened_tables           | 44600      |
| Questions               | 2026873    |
...
| Table_locks_immediate   | 1920382    |
| Table_locks_waited      | 0          |
| Threads_cached          | 0          |
| Threads_created         | 30022      |
| Threads_connected       | 1          |
| Threads_running         | 1          |
| Uptime                  | 80380      |
+-------------------------+------------+
</pre>

С <a href="funct.htm#operator_like"><code>LIKE</code></a> запрос выводит на
экран только строки для переменных с именами, которые соответствуют образцу:
<pre>
mysql&gt; SHOW STATUS LIKE 'Key%';
+--------------------+----------+
| Variable_name      | Value    |
+--------------------+----------+
| Key_blocks_used    | 14955    |
| Key_read_requests  | 96854827 |
| Key_reads          | 162040   |
| Key_write_requests | 7589728  |
| Key_writes         | 3813196  |
+--------------------+----------+
</pre>

<h4><a name="show-table-status"></a>14.7.5.36. SHOW TABLE STATUS</h4>
<pre>
SHOW TABLE STATUS [{FROM | IN} <em><code>db_name</code></em>]
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a>
работает аналогично <a href="#show-tables"><code>SHOW TABLES</code>
</a>, но предоставляет большую информацию о каждой не-<code>TEMPORARY</code>
таблице. Вы можете также получить этот список, используя команду
<a href="programs.htm#mysqlshow"><span><strong>mysqlshow --status
<em><code>db_name</code></em></strong></span></a>.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена таблиц соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">раздел 22.31</a>.</p>

<p>Этот запрос также выводит на экран информацию о представлениях.</p>
<p>Вывод <a href="#show-table-status"><code>SHOW TABLE STATUS</code>
</a> имеет такие столбцы:</p>

<ul><li><p><code>Name</code></p>
<p>Название таблицы.</li>
<li><code>Engine</code></p>
<p>Механизм хранения для таблицы. См. <a href="storage.htm">главу 17</a>.
</li>

<li><code>Version</code></p>
<p>Эта область не использована.</li>
<li><code>Row_format</code></p>
<p>Формат хранения строки (<code>Fixed</code>,
<code>Dynamic</code>, <code>Compressed</code>,
<code>Redundant</code>, <code>Compact</code>). Для таблиц <code>MyISAM</code>
<code>Dynamic</code> соответствует тому, о чем
<a href="programs.htm#myisamchk"><span><strong>myisamchk -dvv</strong></span>
</a> сообщает о как <code>Packed</code>.</li>

<li><code>Rows</code></p>
<p>Число строк. Некоторые механизмы хранения, такие как
<code>MyISAM</code>, сохраните точное количество. Для других механизмов
хранения, таких как <code>InnoDB</code>, это значение приближенное и может
отличаться от фактического значения на целых 40-50%.
В таких случаях надо использовать <code>SELECT COUNT(*)</code>, чтобы
получить точное количество.</p>
<p>Значение <code>Rows</code> <code>NULL</code> для таблиц в
базе данных <code>INFORMATION_SCHEMA</code>.</li>

<li><code>Avg_row_length</code></p>
<p>Средняя длина строки.</li>
<li><code>Data_length</code></p>
<p>Для <code>MyISAM</code> <code>Data_length</code>
длина файла с данными в байтах.</p>

<p>Для <code>InnoDB</code> <code>Data_length</code>
приблизительный объем памяти, выделенный для кластеризируемого индекса
в байтах. Определенно, это размер кластеризируемого индекса в страницах,
умноженный на размер страницы <code>InnoDB</code>.</p>
<p>Обратитесь к примечаниям в конце этого раздела для информации
относительно других механизмов хранения.</li>

<li><code>Max_data_length</code></p>
<p>Для <code>MyISAM</code> <code>Max_data_length</code>
максимальная длина файла с данными. Это общее количество байтов данных,
которые могут храниться в таблице, учитывая используемый
размер указателя данных. Не использовано для <code>InnoDB</code>.</p></li>

<li><code>Index_length</code></p>
<p>Для <code>MyISAM</code> <code>Index_length</code> длина
индексного файла в байтах.</p>

<p>Для <code>InnoDB</code> <code>Index_length</code>
приблизительный объем памяти, выделенный для некластеризируемого индекса в
байтах. Определенно, это сумма страниц некластеризируемого индекса,
умноженная на размер страницы <code>InnoDB</code>.</p></li>

<li><code>Data_free</code></p>
<p>Число выделенных но не использованных байтов.</p>
<p>Эту информацию также показывают таблицы для <code>InnoDB</code>
(ранее в значении <code>Comment</code>). Таблицы <code>InnoDB</code>
сообщают о свободном пространстве в табличном пространстве, к которому
принадлежит таблица. Для таблицы, расположенной в совместно используемом
табличном пространстве, это свободное пространство совместно используемого
табличного пространства. Если Вы используете многократные табличные
пространства, и у таблицы есть свое собственное табличное пространство, то
это свободное пространство только для этой таблицы. Свободное пространство
означает число байтов в абсолютно свободных экстентах минус запас прочности.
Даже если свободное пространство выводится на экран как 0, может быть
возможно вставить строки, пока новые экстенты не должны быть выделены.</p>

<p>Для разделенных таблиц это значение только оценка и, возможно, не
абсолютно правильно. Более точный метод получения этой информации в таких
случаях должен запросить таблицу <code>INFORMATION_SCHEMA.PARTITIONS</code>:
<pre>
SELECT SUM(DATA_FREE) FROM INFORMATION_SCHEMA.PARTITIONS WHERE
       TABLE_SCHEMA = 'mydb' AND TABLE_NAME = 'mytable';
</pre>
См. <a href="inform.htm#partitions-table">раздел 22.14</a>.</li>

<li><code>Auto_increment</code></p>
<p>Следующее значение <code>AUTO_INCREMENT</code>.</li>
<li><code>Create_time</code></p>
<p>Когда таблица была составлена.</li>

<li><code>Update_time</code></p>
<p>Когда файл с данными обновлялся. Для некоторых механизмов хранения это
значение <code>NULL</code>. Например, <code>InnoDB</code> хранит много
таблиц в его <a href="glossary.htm#glos_system_tablespace">системном
табличном пространстве</a> и метка времени файла с данными
не применяются. Даже с режимом
<a href="glossary.htm#glos_file_per_table">file-per-table</a> с каждой
таблицей <code>InnoDB</code> в отдельном файле <code>.ibd</code>,
<a href="glossary.htm#glos_change_buffering">буфер изменений</a>
может задержать запись файла данных, таким образом, время изменения файла
отличается от времени последней вставки, обновления или удаления. Для
<code>MyISAM</code> метка времени файла с данными используется, однако, в
Windows timestamp не изменен операциями обновления, таким
образом, значение неточно.</li>

<li><code>Check_time</code></p>
<p>Когда таблица была последний раз проверена. Не все механизмы хранения
обновляют значение, в этом случе оно всегда <code>NULL</code>.</li>

<li><code>Collation</code></p>
<p>Набор символов таблицы и сопоставление.</li>
<li><code>Checksum</code></p>
<p>Живое значение контрольной суммы (если есть).</li>

<li><code>Create_options</code></p>
<p>Дополнительные опции, используемые с <a href="#create-table"><code>
CREATE TABLE</code></a>. Оригинальные опции, поставляемые, когда вызван
<a href="#create-table"><code>CREATE TABLE</code></a>, сохранены, и
опции здесь могут отличаться от активных табличных настроек и опций.</li>

<li><code>Comment</code></p>
<p>Комментарий, используемый, составляя таблицу (или информация относительно
того, почему MySQL не смог получить доступ к информации о таблице).
</p></li></ul>

<p><span><strong>Примечания</strong></span>:</p>
<ul><li><p>Для таблиц <code>MEMORY</code> <code>Data_length</code>,
<code>Max_data_length</code> и <code>Index_length</code>
это приближенное к фактическому количество выделенной памяти. Алгоритм
распределения резервирует память в большом количестве, чтобы сократить
количество операций распределения.</li>

<li>Для представлений все области, выведенные на экран
<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a>
<code>NULL</code>, кроме <code>Name</code>, которая указывает имя
представления, и <code>Comment</code>, в которой написано <code>view</code>.
</p></li></ul>

<h4><a name="show-tables"></a>14.7.5.37. SHOW TABLES</h4>
<pre>
SHOW [FULL] TABLES [{FROM | IN} <em><code>db_name</code></em>]
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-tables"><code>SHOW TABLES</code></a> перечисляет
не-<code>TEMPORARY</code> таблицы в данной базе данных. Вы можете также
получить этот список, используя <a href="programs.htm#mysqlshow"><span>
<strong>mysqlshow <em><code>db_name</code></em></strong></span></a>.
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена таблиц соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">раздел 22.31</a>.</p>

<p>Соответствие <code>LIKE</code> зависит от установки переменной
<a href="server.htm#sysvar_lower_case_table_names"><code>
lower_case_table_names</code></a>.</p>

<p>Этот запрос также перечисляет любые представления в базе данных.
<code>FULL</code> поддержан таким образом, что
<a href="#show-tables"><code>SHOW FULL TABLES</code></a>
выводит на экран второй столбец. Значения для второго столбца <code>BASE
TABLE</code> для таблицы и <code>VIEW</code> для представления.</p>

<p>Если у Вас нет никаких привилегий для базовой таблицы или
представления, объект не показан в выводе <a href="#show-tables">
<code>SHOW TABLES</code></a> или <a href="programs.htm#mysqlshow"><span>
<strong>mysqlshow db_name</strong></span></a>.</p>

<h4><a name="show-triggers"></a>14.7.5.38. SHOW TRIGGERS</h4>
<pre>
SHOW TRIGGERS [{FROM | IN} <em><code>db_name</code></em>]
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<a href="#show-triggers"><code>SHOW TRIGGERS</code></a>
перечисляет триггеры, в настоящее время определенные для таблиц в базе данных
(базе данных по умолчанию, если нет <code>FROM</code>).
Этот запрос возвращает результаты только для баз данных и таблиц, для которых
Вы имеете привилегию <a href="security.html#priv_trigger"><code>TRIGGER
</code></a>. <a href="funct.htm#operator_like"><code>LIKE</code></a>, если
есть, указывает, какие имена таблиц (не триггеров!) соответствуют,
и заставляет запрос выводить на экран триггеры для тех таблиц.
<code>WHERE</code> может быть дан, чтобы выбрать строки, используя более
общие условия, как обсуждено в
<a href="inform.htm#extended-show">разделе 22.31</a>.</p>

<p>Для триггера <code>ins_sum</code>, определенного в
<a href="stored.htm#triggers">разделе 21.3</a>,
вывод этого запроса показан здесь:
<pre>
mysql&gt; SHOW TRIGGERS LIKE 'acc%'\G
*************************** 1. row ***************************
 Trigger: ins_sum
   Event: INSERT
   Table: account
   Statement: SET @sum = @sum + NEW.amount
  Timing: BEFORE
 Created: 2013-07-09 10:39:34.96
sql_mode: NO_ENGINE_SUBSTITUTION
 Definer: me@localhost
character_set_client: utf8
collation_connection: utf8_general_ci
  Database Collation: latin1_swedish_ci
</pre>

Столбцы вывода <a href="#show-triggers"><code>SHOW TRIGGERS</code>
</a>:</p>
<ul><li><p><code>Trigger</code>: Имя триггера.</li>
<li><code>Event</code>: Тип работы, которая вызывает активацию триггера.
Значения <code>'INSERT'</code>, <code>'UPDATE'</code> или
<code>'DELETE'</code>.</li>

<li><code>Table</code>: Таблица, для которой определен триггер.</li>
<li><code>Statement</code>: Запрос, выполненный, когда триггер активируется.
</li>
<li><code>Timing</code>: Активируется ли триггер прежде или после
инициирующего события. Значения <code>'BEFORE'</code> или <code>'AFTER'
</code>.</li>

<li><code>Created</code>: Дата и время, когда триггер создавался. Это
<code>TIMESTAMP(2)</code> (точность до сотых долей секунды).</li>
<li><code>sql_mode</code>: Режим SQL, когда триггер выполняется.</li>

<li><code>Definer</code>: Учетная запись пользователя, который создал
триггер, в формате <code>'<em><code>user_name</code></em>'@'<em><code>
host_name</code></em>'</code>.</li>

<li><code>character_set_client</code>: Сессионное значение
<a href="server.htm#sysvar_character_set_client"><code>character_set_client
</code></a>, когда триггер создавался.</li>

<li><code>collation_connection</code>: Сессионное значение
<a href="server.htm#sysvar_collation_connection"><code>collation_connection
</code></a>, когда триггер создавался.</li>
<li><code>Database Collation</code>: Сопоставление базы данных,
с которой связан триггер.</p></li></ul>

<p>Вы можете также получить информацию о триггерах из таблицы
<a href="inform.htm#triggers-table"><code>TRIGGERS</code></a> в базе данных
<code>INFORMATION_SCHEMA</code>. См.
<a href="inform.htm#triggers-table">раздел 22.27</a>.</p>

<h4><a name="show-variables"></a>14.7.5.39. SHOW VARIABLES</h4>
<pre>
SHOW [GLOBAL | SESSION] VARIABLES
     [LIKE '<em><code>pattern</code></em>' | WHERE <em><code>expr</code></em>]
</pre>

<p>Значение <a href="server.htm#sysvar_show_compatibility_56"><code>
show_compatibility_56</code></a> затрагивает доступную информацию и
привилегии, требуемые для запроса, описанного здесь. Для деталей см. описание
этой переменной в <a href="server.htm#server-system-variables">разделе 6.1.5
</a>.</p>

<p><a href="#show-variables"><code>SHOW VARIABLES</code></a>
показывает значения системных переменных MySQL (см.
<a href="server.htm#server-system-variables">раздел 6.1.5</a>).
Этот запрос не требует никакой привилегии. Это требует только
способности соединиться с сервером.</p>

<p>Системная информация о переменной также доступна из этих источников:</p>
<ul><li><p>Таблицы Performance Schema. См.
<a href="perfor.htm#performance-schema-system-variable-tables">
раздел 23.9.13</a>.</li>

<li>Таблицы <a href="inform.htm#variables-table"><code>GLOBAL_VARIABLES
</code></a> и <a href="inform.htm#variables-table"><code>SESSION_VARIABLES
</code></a>, см. <a href="inform.htm#variables-table">раздел 22.10</a>.</li>

<li><a href="programs.htm#mysqladmin"><span><strong>mysqladmin variables
</strong></span></a>, см. <a href="programs.htm#mysqladmin">раздел 5.5.2</a>.
</p></li></ul>

<p>Для <a href="#show-variables"><code>SHOW VARIABLES</code></a>
<a href="funct.htm#operator_like"><code>LIKE</code></a>, если есть,
указывает, которые имена переменной соответствуют. <code>WHERE</code>
может быть дан, чтобы выбрать строки, используя более общие условия, как
обсуждено в <a href="inform.htm#extended-show">разделе 22.31</a>.</p>

<p><a href="#show-variables"><code>SHOW VARIABLES</code></a>
принимает дополнительный модификатор контекста
<code>GLOBAL</code> или <code>SESSION</code>:</p>

<ul><li><p>С <code>GLOBAL</code> запрос выводит на экран глобальные системные
значения переменной. Это значения, используемые, чтобы инициализировать
соответствующие переменные сеанса для новых соединений с MySQL. Если у
переменной нет никакого глобального значения, никакое значение
не выведено на экран.</li>

<li>С <code>SESSION</code> запрос выводит на экран значения переменных,
которые в действительности используются для текущего соединения. Если у
переменной нет никакого значения сеанса, глобальное значение выведено на
экран. <code>LOCAL</code> синоним для <code>SESSION</code>.</li>

<li>Если никакой модификатор не присутствует, значение
по умолчанию <code>SESSION</code>.</p></li></ul>
<p>Контекст для каждой системной переменной перечислен в
<a href="server.htm#server-system-variables">разделе 6.1.5</a>.</p>

<p><a href="#show-variables"><code>SHOW VARIABLES</code></a>
подвергается зависимому от версии пределу ширины отображения.
Для переменных с очень длинными значениями, которые не полностью выведены
на экран, надо использовать <a href="#select"><code>SELECT</code></a>
как обходное решение. Например:
<pre>
SELECT @@GLOBAL.innodb_data_file_path;
</pre>

Большинство системных переменных может быть установлено при запуске сервера
(переменные только для чтения, например,
<a href="server.htm#sysvar_version_comment"><code>version_comment</code></a>
это исключения). Многие могут быть изменены во время выполнения с помощью
<a href="#set-variable"><code>SET</code></a>. См. разделы
<a href="server.htm#using-system-variables">6.1.6</a> и
<a href="#set-variable">14.7.4.1</a>.</p>

<p>Частичный вывод показывают здесь. Список имен и значений может отличаться
для Вашего сервера. <a href="server.htm#server-system-variables">Раздел 6.1.5
</a> описывает значение каждой переменной, а
<a href="server.htm#server-configuration">раздел 6.1.1</a>
предоставляет информацию об их настройке.
<pre>
mysql&gt; SHOW VARIABLES;
+-----------------------------------------+---------------------------+
| Variable_name                           | Value                     |
+-----------------------------------------+---------------------------+
| auto_increment_increment                | 1                         |
| auto_increment_offset                   | 1                         |
| autocommit                              | ON                        |
| automatic_sp_privileges                 | ON                        |
| back_log                                | 50                        |
| basedir                                 | /home/jon/bin/mysql-5.5   |
| big_tables                              | OFF                       |
| binlog_cache_size                       | 32768                     |
| binlog_direct_non_transactional_updates | OFF                       |
| binlog_format                           | STATEMENT                 |
| binlog_stmt_cache_size                  | 32768                     |
| bulk_insert_buffer_size                 | 8388608                   |
...
| max_allowed_packet                      | 4194304                   |
| max_binlog_cache_size                   | 18446744073709547520      |
| max_binlog_size                         | 1073741824                |
| max_binlog_stmt_cache_size              | 18446744073709547520      |
| max_connect_errors                      | 100                       |
| max_connections                         | 151                       |
| max_delayed_threads                     | 20                        |
| max_error_count                         | 64                        |
| max_heap_table_size                     | 16777216                  |
| max_insert_delayed_threads              | 20                        |
| max_join_size                           | 18446744073709551615      |
...
| thread_handling                         | one-thread-per-connection |
| thread_stack                            | 262144                    |
| time_format                             | %H:%i:%s                  |
| time_zone                               | SYSTEM                    |
| timestamp                               | 1316689732                |
| tmp_table_size                          | 16777216                  |
| tmpdir                                  | /tmp                      |
| transaction_alloc_block_size            | 8192                      |
| transaction_prealloc_size               | 4096                      |
| tx_isolation                            | REPEATABLE-READ           |
| unique_checks                           | ON                        |
| updatable_views_with_limit              | YES                       |
| version                                 | 5.5.17-log                |
| version_comment                         | Source distribution       |
| version_compile_machine                 | x86_64                    |
| version_compile_os                      | Linux                     |
| wait_timeout                            | 28800                     |
| warning_count                           | 0                         |
+-----------------------------------------+---------------------------+
</pre>

С <a href="funct.htm#operator_like"><code>LIKE</code></a>
запрос выводит на экран строки только для тех переменных, имена которых
соответствуют образцу. Чтобы получить строку для определенной переменной,
используйте <a href="funct.htm#operator_like"><code>LIKE</code></a>:
<pre>
SHOW VARIABLES LIKE 'max_join_size';
SHOW SESSION VARIABLES LIKE 'max_join_size';
</pre>

Чтобы получить список переменных чьи имена соответствуют образцу, используйте
подстановочный символ <code>%</code> в
<a href="funct.htm#operator_like"><code>LIKE</code></a>:
<pre>
SHOW VARIABLES LIKE '%size%';
SHOW GLOBAL VARIABLES LIKE '%size%';
</pre>

Подстановочные символы могут использоваться в любой позиции в пределах
образца, который будет соответствующим. Строго говоря, потому что
<code>_</code> это подстановочный знак, который соответствует любому
единственному символу, Вы должны экранировать его как <code>\_</code>,
чтобы соответствовать этому буквально. Практически это редко необходимо.</p>

<h4><a name="show-warnings"></a>14.7.5.40. SHOW WARNINGS</h4>
<pre>
SHOW WARNINGS [LIMIT [<em><code>offset</code></em>,] <em><code>row_count</code></em>]
SHOW COUNT(*) WARNINGS
</pre>

<a href="#show-warnings"><code>SHOW WARNINGS</code></a> это
диагностический запрос, отображающий информацию об условиях (ошибки,
предупреждения и примечания), следующих из выполнения запросов в текущем
сеансе. Предупреждения произведены для таких запросов DML, как
<a href="#insert"><code>INSERT</code></a>,
<a href="#update"><code>UPDATE</code></a> и
<a href="#load-data"><code>LOAD DATA INFILE</code></a>, а также для
запросов DDL <a href="#create-table"><code>CREATE TABLE</code></a> и
<a href="#alter-table"><code>ALTER TABLE</code></a>.</p>

<p><code>LIMIT</code> имеет тот же самый синтаксис, что касается
<a href="#select"><code>SELECT</code></a>, см.
<a href="#select">раздел 14.2.9</a>.</p>

<p><a href="#show-warnings"><code>SHOW WARNINGS</code></a>
также используется после <a href="optimiz.htm#explain-extended"><code>EXPLAIN
EXTENDED</code></a>, чтобы вывести на экран дополнительную информацию,
произведенную <a href="#explain"><code>EXPLAIN</code></a>,
когда используется <code>EXTENDED</code>, см.
<a href="optimiz.htm#explain-extended">раздел 9.8.3</a>.</p>

<p><a href="#show-warnings"><code>SHOW WARNINGS</code></a>
показывает информацию об условиях, следующих из выполнения нового
недиагностического запроса в текущем сеансе. Если новый запрос привел к
ошибке во время парсинга,
<a href="#show-warnings"><code>SHOW WARNINGS</code></a>
показывает получающиеся условия, независимо от типа запроса
(диагностический или недиагностический).</p>

<p><a href="#show-warnings"><code>SHOW COUNT(*) WARNINGS</code></a>
выводит на экран общее количество ошибок, предупреждений и примечаний. Вы
можете также получить это число из переменной
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>:
<pre>
SHOW COUNT(*) WARNINGS;
SELECT @@warning_count;
</pre>

Различие в этих запросах: первый является диагностическим запросом, который
не очищает список сообщений. Второй считают недиагностическим и
очищает список сообщений, потому что это использует <a href="#select">
<code>SELECT</code></a>.</p>

<p>Связанный диагностический запрос <a href="#show-errors"><code>SHOW
ERRORS</code></a> показывает только состояния ошибки (это исключает
предупреждения и примечания), а <a href="#show-warnings"><code>SHOW
COUNT(*) ERRORS</code></a> показывает общее количество ошибок. См.
<a href="#show-errors">раздел 14.7.5.17</a>.
<a href="#get-diagnostics"><code>GET DIAGNOSTICS</code></a>
может использоваться, чтобы исследовать информацию на отдельные условия. См.
<a href="#get-diagnostics">раздел 14.6.7.3</a>.</p>

<p>Вот простой пример, который показывает предупреждения преобразования
данных для <a href="#insert"><code>INSERT</code></a>:
<pre>
mysql&gt; CREATE TABLE t1 (a TINYINT NOT NULL, b CHAR(4));
Query OK, 0 rows affected (0.05 sec)

mysql&gt; INSERT INTO t1 VALUES(10,'mysql'), (NULL,'test'), (300,'xyz');
Query OK, 3 rows affected, 3 warnings (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 3

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Warning
   Code: 1265
Message: Data truncated for column 'b' at row 1
*************************** 2. row ***************************
  Level: Warning
   Code: 1048
Message: Column 'a' cannot be null
*************************** 3. row ***************************
  Level: Warning
   Code: 1264
Message: Out of range value for column 'a' at row 3
3 rows in set (0.00 sec)
</pre>

<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>
управляет максимальным количеством ошибок, предупреждений и сообщений
примечания, для которых сервер хранит информацию, и таким образом число
сообщений, которые покажет <a href="#show-warnings"><code>SHOW
WARNINGS</code></a>. Чтобы изменить число сообщений, которое сервер может
сохранить, измените значение <a href="server.htm#sysvar_max_error_count">
<code>max_error_count</code></a>. По умолчанию 64.</p>

<p><a href="server.htm#sysvar_max_error_count"><code>max_error_count</code>
</a> контролирует сколько сообщений хранится, а не сколько посчитано.
Значение <a href="server.htm#sysvar_warning_count"><code>warning_count</code>
</a> не ограничено <a href="server.htm#sysvar_max_error_count"><code>
max_error_count</code></a>, даже если число произведенных сообщений превышает
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>.
Следующий пример демонстрирует это. <a href="#alter-table"><code>ALTER
TABLE</code></a> производит три предупреждающих сообщения (строгий режим SQL
отключен для примера, чтобы препятствовать ошибке после проблемы однократного
преобразования). Только одно сообщение хранится и выведено на экран потому,
что <a href="server.htm#sysvar_max_error_count"><code>max_error_count</code>
</a> была установлена в 1, но все три посчитаны (как показано значением
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>):
<pre>
mysql&gt; SHOW VARIABLES LIKE 'max_error_count';
+-----------------+-------+
| Variable_name   | Value |
+-----------------+-------+
| max_error_count | 64    |
+-----------------+-------+
1 row in set (0.00 sec)

mysql&gt; SET max_error_count=1, sql_mode = '';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; ALTER TABLE t1 MODIFY b CHAR;
Query OK, 3 rows affected, 3 warnings (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 3

mysql&gt; SHOW WARNINGS;
+---------+------+----------------------------------------+
| Level   | Code | Message                                |
+---------+------+----------------------------------------+
| Warning | 1263 | Data truncated for column 'b' at row 1 |
+---------+------+----------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT @@warning_count;
+-----------------+
| @@warning_count |
+-----------------+
|   3             |
+-----------------+
1 row in set (0.01 sec)
</pre>

Чтобы отключить хранение сообщений, установите
<a href="server.htm#sysvar_max_error_count"><code>max_error_count</code></a>
в 0. В этом случае <a href="server.htm#sysvar_warning_count"><code>
warning_count</code></a> все еще указывает, сколько предупреждений произошло,
но сообщения не хранятся и не могут быть выведены на экран.</p>

<p><a href="server.htm#sysvar_sql_notes"><code>sql_notes</code></a>
управляет, увеличивается ли счетчик сообщений
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a> и
хранит ли их сервер. По умолчанию
<a href="server.htm#sysvar_sql_notes"><code>sql_notes</code></a> = 1,
но если установлено в 0, примечания не увеличивают
<a href="server.htm#sysvar_warning_count"><code>warning_count</code></a>
и сервер не хранит их:
<pre>
mysql&gt; SET sql_notes = 1;
mysql&gt; DROP TABLE IF EXISTS test.no_such_table;
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS;
+-------+------+------------------------------------+
| Level | Code | Message                            |
+-------+------+------------------------------------+
| Note  | 1051 | Unknown table 'test.no_such_table' |
+-------+------+------------------------------------+
1 row in set (0.00 sec)

mysql&gt; SET sql_notes = 0;
mysql&gt; DROP TABLE IF EXISTS test.no_such_table;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; SHOW WARNINGS;
Empty set (0.00 sec)
</pre>

Сервер MySQL посылает каждому клиенту количество, указывающее на общее
количество ошибок, предупреждений и примечаний, следующих из нового запроса,
выполненного клиентом. Из C API это значение может быть получено вызовом
<a href="connect.htm#mysql-warning-count"><code>mysql_warning_count()</code>
</a>. См. <a href="connect.htm#mysql-warning-count">раздел 25.8.7.77</a>.</p>

<p>В <a href="programs.htm#mysql"><span><strong>mysql</strong></span></a>
Вы можете включить и отключить автоматическое отображение
предупреждений, используя соответственно команды
<code>warnings</code> и <code>nowarning</code> или их сокращения
<code>\W</code> и <code>\w</code> (см.
<a href="programs.htm#mysql-commands">раздел 5.5.1.2</a>):
<pre>
mysql&gt; \W
Show warnings enabled.
mysql&gt; SELECT 1/0;
+------+
| 1/0  |
+------+
| NULL |
+------+
1 row in set, 1 warning (0.03 sec)

Warning (Code 1365): Division by 0
mysql&gt; \w
Show warnings disabled.
</pre>

<h3><a name="other-administrative-sql"></a>14.7.6.
Другие административные запросы</h3>
<h4><a name="binlog"></a>14.7.6.1. BINLOG</h4>
<pre>
BINLOG '<em><code>str</code></em>'
</pre>

<a href="#binlog"><code>BINLOG</code></a>
запрос внутреннего пользования. Это произведено
<a href="programs.htm#mysqlbinlog"><span><strong>mysqlbinlog</strong></span>
</a> как пригодное для печатания представление определенных событий в
двоичных файлах системного журнала. См. <a href="programs.htm#mysqlbinlog">
раздел 5.6.8</a>. Значение <code>'<em><code>str</code></em>'</code>
это строка в base64, которую сервер расшифровывает, чтобы определить
изменение данных, обозначенное соответствующим событием. Этот запрос требует
привилегию <a href="security.html#priv_super"><code>SUPER</code></a>.</p>
<p>Это запрос может выполнить только события описания
формата и события строки.</p>

<h4><a name="cache-index"></a>14.7.6.2. CACHE INDEX</h4>
<pre>
CACHE INDEX <em><code>tbl_index_list</code></em> [,
      <em><code>tbl_index_list</code></em>] ...
      [PARTITION (<em><code>partition_list</code></em> | ALL)]
      IN <em><code>key_cache_name</code></em>

<em><code>tbl_index_list</code></em>:
  <em><code>tbl_name</code></em> [[INDEX|KEY] (<em><code>index_name</code></em>[,
  <em><code>index_name</code></em>] ...)]

<em><code>partition_list</code></em>:
  <em><code>partition_name</code></em>[, <em><code>partition_name</code></em>][, ...]
</pre>

<a href="#cache-index"><code>CACHE INDEX</code></a>
назначает табличные индексы к определенному ключевому кэшу. Это используется
только для <code>MyISAM</code>. После назначения индексов, они могут быть
предварительно загружены в кэш при желании с
<a href="#load-index"><code>LOAD INDEX INTO CACHE</code></a>.</p>

<p>Следующий запрос назначает индекс таблиц
<code>t1</code>, <code>t2</code> и <code>t3</code>
к ключевому кэшу <code>hot_cache</code>:
<pre>
mysql&gt; CACHE INDEX t1, t2, t3 IN hot_cache;
+---------+--------------------+----------+----------+
| Table   | Op                 | Msg_type | Msg_text |
+---------+--------------------+----------+----------+
| test.t1 | assign_to_keycache | status   | OK       |
| test.t2 | assign_to_keycache | status   | OK       |
| test.t3 | assign_to_keycache | status   | OK       |
+---------+--------------------+----------+----------+
</pre>

<a href="#cache-index"><code>CACHE INDEX</code></a> позволяет Вам
определить, что только особый индекс таблицы должен быть назначен на кэш.
Текущее выполнение назначает все индексы таблицы к кэшу, таким образом нет
никакой причины определить что-либо, кроме имени таблицы.</p>

<p>Ключевой кэш, упомянутый в <a href="#cache-index"><code>CACHE
INDEX</code></a>, может быть создан, устанавливая его размер с запросом
установки параметра или в установках параметров сервера. Например:
<pre>
mysql&gt; SET GLOBAL keycache1.key_buffer_size=128*1024;
</pre>

К ключевым параметрам кэша можно получить доступ как к
членам структурированной системной переменной. См.
<a href="server.htm#structured-system-variables">раздел 6.1.6.1</a>.</p>

<p>Ключевой кэш должен существовать прежде, чем Вы сможете
назначить индекс к нему:
<pre>
mysql&gt; CACHE INDEX t1 IN non_existent_cache;
ERROR 1284 (HY000): Unknown key cache 'non_existent_cache'
</pre>

По умолчанию индексы таблицы назначены на основной (значение по умолчанию)
ключевой кэш, создаваемый при запуске сервера. Когда ключевой кэш разрушен,
все индексы, назначенные на него, становятся назначенными на ключевой кэш
значения по умолчанию снова.</p>

<p>Назначения действуют на сервер глобально: если один клиент назначает
индексирование на данный кэш, этот кэш используется для всех запросов,
вовлекающих индексирование, независимо от того, какой клиент их запускает.
</p>

<p>В MySQL 8.0 этот запрос также поддержан для разделенных таблиц
<code>MyISAM</code>. Вы можете назначить один или больше индексов для одного,
нескольких или всех разделов к данному ключевому кэшу.
Например, Вы можете сделать следующее:
<pre>
CREATE TABLE pt (c1 INT, c2 VARCHAR(50), INDEX i(c1)) ENGINE=MyISAM
       PARTITION BY HASH(c1) PARTITIONS 4;
SET GLOBAL kc_fast.key_buffer_size = 128 * 1024;
SET GLOBAL kc_slow.key_buffer_size = 128 * 1024;
CACHE INDEX pt PARTITION (p0) IN kc_fast;
CACHE INDEX pt PARTITION (p1, p3) IN kc_slow;
</pre>
Предыдущий набор запросов выполняет следующие действия:</p>

<ul><li><p>Составляет разделенную таблицу с 4 разделами, они
автоматически названы <code>p0</code>, ..., <code>p3</code>, в этой таблице
есть индекс <code>i</code> на столбце <code>c1</code>.</li>

<li>Создает 2 ключевых кэша <code>kc_fast</code> и <code>kc_slow</code>.</li>
<li>Назначает индекс для раздела <code>p0</code> на ключевой кэш
<code>kc_fast</code> и индекс для разделов <code>p1</code> и <code>p3</code>
на ключевой кэш <code>kc_slow</code>, индекс для остающегося раздела
(<code>p2</code>) использует ключевой кэш сервера по умолчанию.</p></li></ul>

<p>Если Вы хотите вместо этого назначить индекс для всех разделов
в таблице <code>pt</code> к единственному ключевому кэшу
<code>kc_all</code>, Вы можете использовать любой из следующих 2 запросов:
<pre>
CACHE INDEX pt PARTITION (ALL) IN kc_all;
CACHE INDEX pt IN kc_all;
</pre>

Эти два запроса эквивалентны. Другими словами, если Вы хотите назначить
индекс для всех разделов таблицы к тому же самому ключевому кэшу, тогда
<code>PARTITION (ALL)</code> опционально.</p>

<p>Когда назначен индекс для многих разделов к ключевому кэшу,
разделение не должно быть непрерывным, и Вы не обязаны перечислять имена
разделов в любом особом порядке. Индекс для любого раздела, который явно не
назначен на ключевой кэш, автоматически используют ключевой кэш
по умолчанию сервера.</p>

<p>В MySQL 8.0 индекс предварительно загружен для разделенных таблиц
<code>MyISAM</code>. См. <a href="#load-index">раздел 14.7.6.5</a>.
</p>

<h4><a name="flush"></a>14.7.6.3. FLUSH</h4>
<pre>
FLUSH [NO_WRITE_TO_BINLOG | LOCAL]
      <em><code>flush_option</code></em> [, <em><code>flush_option</code></em>] ...
</pre>

<a href="#flush"><code>FLUSH</code></a> имеет несколько различных
форм, которые перезагружают различные внутренние кэши, таблицы потока или
блокировки. Чтобы выполнить <a href="#flush"><code>FLUSH</code></a>,
Вы должны иметь привилегию <a href="security.html#priv_reload"><code>RELOAD
</code></a>. Определенные опции потока могли бы потребовать дополнительных
привилегий, как описано позже.</p>

<p>По умолчанию сервер пишет запросы
<a href="#flush"><code>FLUSH</code></a> в двоичный журнал, чтобы они
копировались к ведомым устройствам. Чтобы подавить журналирование, определите
дополнительный параметр <code>NO_WRITE_TO_BINLOG</code> или
его псевдоним <code>LOCAL</code>.</p>

<p><a href="#flush"><code>FLUSH LOGS</code></a>,
<a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a> и
<a href="#flush"><code>FLUSH TABLES <em><code>tbl_name</code></em>
... FOR EXPORT</code></a> не записаны в двоичный журнал в любом случае,
потому что они вызвали бы проблемы, если копируются к ведомому устройству.
</p>

<p>Сигнал <code>SIGHUP</code> серверу вызывает
несколько операций, которые подобны различным формам
<a href="#flush"><code>FLUSH</code></a>, см.
<a href="server.htm#server-signal-response">раздел 6.1.11</a>.</p>

<p><a href="#flush"><code>FLUSH</code></a> неявно закрывает
транзакции. См. <a href="#implicit-commit">раздел 14.3.3</a>.</p>
<p><a href="#reset"><code>RESET</code></a> аналогичен
<a href="#flush"><code>FLUSH</code></a>, см.
<a href="#reset">раздел 14.7.6.6</a>.</p>

<p><em><code>flush_option</code></em> может быть любым
из следующих элементов.</p>
<ul><li><p><code>DES_KEY_FILE</code></p>
<p>Перезагружает ключи DES из файла, который был определен с
<a href="server.htm#option_mysqld_des-key-file"><code>
--des-key-file</code></a> при запуске сервера.</li>

<li><code>HOSTS</code></p>
<p>Освобождает кэш узла. Вы должны сбросить
кэш узла, если некоторые из Ваших узлов изменяют IP-адрес или если
полуаете сообщение об ошибке
<code>Host '<em><code>host_name</code></em>' is blocked</code> (см.
<a href="error.htm#blocked-host">раздел B.5.2.5</a>). Когда больше, чем
<a href="server.htm#sysvar_max_connect_errors"><code>max_connect_errors
</code></a> ошибок происходят последовательно для данного узла, соединяясь с
сервером MySQL, он предполагает, что что-то неправильно и блокирует узел от
дальнейших запросов соединения. Сброс кэша узла включает дальнейшие попытки
соединения с узлом. Значение по умолчанию
<a href="server.htm#sysvar_max_connect_errors"><code>max_connect_errors
</code></a> 100. Чтобы избежать этого сообщения об ошибке, запустите сервер с
<a href="server.htm#sysvar_max_connect_errors"><code>
max_connect_errors</code></a>, установленной к большому значению.</li>

<li><code>[<em><code>log_type</code></em>] LOGS | RELAY
LOGS [ <em><code>channel_option</code></em>]</code></p>
<p>Без опции <em><code>log_type</code></em>
<a href="#flush"><code>FLUSH LOGS</code></a> закрывает
и вновь открывает все файлы системного журнала. Если двоичное журналирование
включено, порядковый номер двоичного файла системного журнала увеличен на 1
относительно предыдущего файла.</p>

<p><code>FLUSH LOGS</code> не имеет никакого эффекта на таблицы, используемые
для общего журнала запроса или для медленного журнала запроса (см.
<a href="server.htm#log-destinations">раздел 6.4.1</a>).</p>

<p>С опцией <em><code>log_type</code></em> только указанный тип журнала
сброшен. Опция <em><code>log_type</code></em>:</p>
<ul><li><p><code>BINARY</code> закрывает и вновь открывает двоичные файлы
системного журнала. Если двоичное журналирование включено, порядковый номер
двоичного файла системного журнала увеличен на 1
относительно предыдущего файла.</li>

<li><code>ENGINE</code> закрывает и вновь открывает любые журналы
для установленных механизмов хранения. Это вызывает сброс журналов
<a href="innodb.htm"><code>InnoDB</code></a> на диск.</li>

<li><code>ERROR</code> закрывает и вновь открывает
файл журнала ошибок.</li>
<li><code>GENERAL</code> закрывает и вновь открывает
общий файл системного журнала запроса.</li>

<li><code>RELAY</code> закрывает и вновь открывает
системного журнала реле. Если двоичное журналирование включено, порядковый
номер двоичного файла системного журнала
увеличен на 1 относительно предыдущего файла.</p>

<p><code>FOR CHANNEL <em><code>channel</code></em></code>
позволяет Вам выбрать, который канал репликации применить к
<code>FLUSH RELAY LOGS</code>. Если никакой пункт не установлен, и никакие
дополнительные каналы не существуют, запрос относится к каналу по умолчанию и
ведет себя как версии MySQL до 5.7.6. Если много каналов существует, и
никакой пункт не установлен, <span><em>все</em></span> каналы сбрасываются.
Выполните <code>FLUSH RELAY LOGS FOR CHANNEL <em><code>channel</code></em>
</code>, чтобы сбросить определенный журнал реле канала ответа. См.
<a href="replica.htm#replication-channels">раздел 19.2.3</a>.</p>

<p><code>FOR CHANNEL <em><code>channel</code></em></code>
может использоваться только с
<code>RELAY LOGS</code> <em><code>log_type</code></em>.</p></li>
<li><code>SLOW</code> закрывает и вновь открывают медленный файл
системного журнала запроса.</p></li></ul></li>

<li><code>OPTIMIZER_COSTS</code></p>
<p>Перечитывает таблицы модели стоимости так, чтобы оптимизатор
начал использовать текущие значения, сохраненные в них. Сервер пишет
предупреждение в журнал ошибок для любых непризнанных записей. Для информации
об этих таблицах см. <a href="optimiz.htm#cost-model">раздел 9.9.5</a>.
Эта работа затрагивает только сеансы, которые начинаются после сброса.
Существующие сеансы продолжают использовать значения, которые были актуальны,
когда они начались.</li>

<li><code>PRIVILEGES</code></p>
<p>Перезагружает привилегии из таблиц доступа в
базе данных <code>mysql</code>.</p>

<p>Сервер кэширует в памяти результаты
<a href="#grant"><code>GRANT</code></a>,
<a href="#create-user"><code>CREATE USER</code></a>,
<a href="#create-server"><code>CREATE SERVER</code></a> и
<a href="#install-plugin"><code>INSTALL PLUGIN</code></a>.
Эта память не освобождена передачей
<a href="#revoke"><code>REVOKE</code></a>,
<a href="#drop-user"><code>DROP USER</code></a>,
<a href="#drop-server"><code>DROP SERVER</code></a> и
<a href="#uninstall-plugin"><code>UNINSTALL PLUGIN</code></a>,
таким образом, для сервера, который выполняет много запросов, которые
кэшируются, будет увеличение использования памяти.
Эта кэшируемая память может быть освобождена с помощью
<a href="#flush"><code>FLUSH PRIVILEGES</code></a>.</li>

<li><code>QUERY CACHE</code></p>
<p>Дефрагментирует кэш запроса, чтобы лучше использовать его память.
<a href="#flush"><code>FLUSH QUERY CACHE</code></a>
не удаляет запросов из кэша, в отличие от
<a href="#flush"><code>FLUSH TABLES</code></a> или
<code>RESET QUERY CACHE</code>.</li>

<li><code>STATUS</code></p>
<p>Значение <a href="server.htm#sysvar_show_compatibility_56"><code>
show_compatibility_56</code></a> затрагивает работу этой опции. Для деталей
см. описание этой переменной в
<a href="server.htm#server-system-variables">разделе 6.1.5</a>.</p>

<p>Эта опция добавляет, что переменная состояния сеанса текущего потока
оценивает глобальным значением и сбрасывает значения сеансовых переменных к
нолю. Некоторые глобальные переменные могут быть сброшены к нолю также. Это
также сбрасывает счетчики для ключевых кэшей к нолю и устанавливает
<a href="server.htm#statvar_Max_used_connections"><code>Max_used_connections
</code></a> к текущему числу открытых соединений. Вы должны использовать это
только отлаживая запрос. См. <a href="intro.htm#bug-reports">раздел 1.7</a>.
</li>

<li><code>TABLES</code></p>
<p><a href="#flush"><code>FLUSH TABLES</code></a>
сбрасывает таблицы и, в зависимости от используемой разновидности,
блокировки. Разрешенный синтаксис обсужден позже в этом разделе.</li>

<li><code>USER_RESOURCES</code></p>
<p>Сбрасывает все часовые пользовательские ресурсы к нолю. Это включает
клиентов, которые достигли их почасового предела соединения, запроса или
обновляения, чтобы немедленно возобновить деятельность.
<a href="#flush"><code>FLUSH USER_RESOURCES</code></a>
не относится к пределу на максимум одновременных соединений.
См. <a href="security.html#user-resources">раздел 7.3.5</a>.</p></li></ul>

<p><a href="programs.htm#mysqladmin"><span><strong>mysqladmin</strong></span>
</a> обеспечивает интерфейс командной строки к некоторым операциям потока,
используя такие команды, как <code>flush-hosts</code>, <code>flush-logs
</code>, <code>flush-privileges</code>, <code>flush-status</code> и
<code>flush-tables</code>. См.
<a href="programs.htm#mysqladmin">раздел 5.5.2</a>.</p>

<p>Невозможно запустить <a href="#flush"><code>FLUSH</code></a>
в пределах сохраненных функций или триггеров. Однако, Вы можете использовать
statements within stored <a href="#flush"><code>FLUSH</code></a>
в хранимых процедурах, пока их не вызывают из сохраненных функций или
триггеров. См. <a href="restr.htm#stored-program-restrictions">раздел C.1
</a>.</p>

<h5><a name="idm139965331719984"></a>FLUSH TABLES</h5>
<p><a href="#flush"><code>FLUSH TABLES</code></a>
имеет несколько форм, описанных после. Если любая разновидность опции
<code>TABLES</code> используется в <a href="#flush"><code>FLUSH</code>
</a>, это должна быть единственная используемая опция.
<a href="#flush"><code>FLUSH TABLE</code></a> синоним для
<a href="#flush"><code>FLUSH TABLES</code></a>.</p>

<ul><li><p><code>FLUSH TABLES</code></p>
<p>Закрывает все открытые таблицы и сбрасывает кэш запроса.
<a href="#flush"><code>FLUSH TABLES</code></a>
также удаляет все запросы из кэша запроса, подобно
<code>RESET QUERY CACHE</code>.</p>

<p>В MySQL 8.0 <a href="#flush"><code>FLUSH TABLES</code></a>
не разрешен, когда есть активный запрос
<a href="#lock-tables"><code>LOCK TABLES ... READ</code></a>.
Чтобы сбросить и заблокировать таблицы, надо использовать
<a href="#flush"><code>FLUSH TABLES
<em><code>tbl_name</code></em> ... WITH READ LOCK</code></a>.</li>

<li><code>FLUSH TABLES <em><code>tbl_name</code></em> [,
<em><code>tbl_name</code></em>] ...</code></p>
<p>Со списком из одного или более отделенных запятыми имен таблиц этот запрос
похож на <a href="#flush"><code>FLUSH TABLES</code></a>
без имен за исключением того, что сервер сбрасывает
только названные таблицы. Никакая ошибка не происходит, если названная
таблица не существует.</li>

<li><code>FLUSH TABLES WITH READ LOCK</code></p>
<p>Закрывает все открытые таблицы и блокирует все таблицы для всех баз данных
с глобальной блокировкой чтения. Это очень удобный способ получить резервные
копии, если у Вас есть файловая система, такая как Veritas или ZFS, которая
может взять снимки в момент времени.
Используйте <a href="#lock-tables"><code>UNLOCK TABLES</code></a>,
чтобы снять блокировку.</p>

<p><a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>
приобретает глобальную блокировку чтения, а не табличные блокировки, таким
образом, это не подвергается тому же самому поведению, как
<a href="#lock-tables"><code>LOCK TABLES</code></a> и
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>
относительно табличной блокировки и неявной передачи</p>

<ul><li><p><a href="#lock-tables"><code>UNLOCK TABLES</code></a>
неявно передает любую активную транзакцию, только если любые таблицы в
настоящее время блокировались с <a href="#lock-tables"><code>LOCK
TABLES</code></a>. Этого не происходит для
<a href="#lock-tables"><code>UNLOCK TABLES</code></a> с
<a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>,
потому что последний запрос не приобретает табличные блокировки.</li>

<li>Начало транзакции вызывает снятие табличных блокировок, приобретенных с
<a href="#lock-tables"><code>LOCK TABLES</code></a>, как если бы Вы
выполнили <a href="#lock-tables"><code>UNLOCK TABLES</code></a>.
Начало транзакции не выпускает глобальную блокировку чтения, приобретенную с
<a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>.
</p></li></ul>

<p><a href="#flush"><code>FLUSH TABLES WITH READ LOCK</code></a>
не препятствует тому, чтобы сервер вставил строки в таблицы журнала (см.
<a href="server.htm#log-destinations">раздел 6.4.1</a>).</li>

<li><code>FLUSH TABLES <em><code>tbl_name</code></em> [,
<em><code>tbl_name</code></em>] ... WITH READ LOCK</code></p>
<p>Это запрос сбрасывает и приобретает блокировки чтения на названных
таблицах. Запрос сначала приобретает исключительные блокировки метаданных
для таблиц, таким образом, он ждет завершения транзакций, у которых эти
таблицы открыты. Тогда запрос сбрасывает таблицы из табличного кэша, вновь
открывает таблицы, приобретает табличные блокировки (как
<a href="#lock-tables"><code>LOCK TABLES ... READ</code></a>)
и понижает блокировки метаданных с исключительных до совместно используемых.
После того, как запрос приобретает блокировки и удаляет блокировки
метаданных, другие сеансы могут читать, но не изменять таблицы.</p>

<p>Поскольку этот запрос приобретает табличные блокировки, Вы должны иметь
привилегию <a href="security.html#priv_lock-tables"><code>LOCK TABLES</code>
</a> для каждой таблицы, в дополнение к привилегии
<a href="security.html#priv_reload"><code>RELOAD</code></a>, которая нужна,
чтобы использовать любой <a href="#flush"><code>FLUSH</code></a>.</p>

<p>Этот запрос применяется только к существующим базовым таблицам. Если имя
ссылается на базовую таблицу, та таблица используется. Если это обращается к
таблице <code>TEMPORARY</code>, это проигнорировано. Если имя относится к
представлению, будет ошибка <a href="error.htm#error_er_wrong_object"><code>
ER_WRONG_OBJECT</code></a>. Иначе происходит ошибка
<a href="error.htm#error_er_no_such_table"><code>ER_NO_SUCH_TABLE</code></a>.
</p>

<p>Используйте <a href="#lock-tables"><code>UNLOCK TABLES</code></a>,
чтобы выпустить блокировки, <a href="#lock-tables"><code>LOCK TABLES
</code></a>, чтобы выпустить блокировки и приобрести другие блокировки или
<a href="#commit"><code>START TRANSACTION</code></a>, чтобы
выпустить блокировки и начать новую транзакцию.</p>

<p>Эта разновидность <code>FLUSH</code> позволяет сбросить и заблокировать
таблицы в единственном запросе. Это обеспечивает обходное решение для
ограничения в MySQL 8.0, что <a href="#flush"><code>FLUSH TABLES
</code></a> не разрешен, когда есть активный запрос
<a href="#lock-tables"><code>LOCK TABLES ... READ</code></a>.</p>

<p>Этот запрос не выполняет неявный
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>,
таким образом, будет ошибка, если Вы используете запрос в то время, как есть
любой активный запрос <a href="#lock-tables"><code>LOCK TABLES</code>
</a> или используйте это во второй раз без снятия приобретенных блокировок.
</p>

<p>Если сбрасываемая таблица была открыта с
<a href="#handler"><code>HANDLER</code></a>,
обработчик неявно сбрасывается и теряет свою позицию.</li>

<li><code>FLUSH TABLES <em><code>tbl_name</code></em> [,
<em><code>tbl_name</code></em>] ... FOR EXPORT</code></p>
<p>Этот вариант <code>FLUSH TABLES</code> применим к <code>InnoDB</code>.
Это гарантирует, что изменения названных таблиц сброшены на диск, чтобы
двоичные табличные копии могли быть сделаны в то время, как сервер работает.
</p>

<p>Запрос работает так:</p>
<ol type="1"><li><p>Это приобретает совместно использованные блокировки
метаданных для названных таблиц. Запрос блокирован, пока другие сеансы имеют
активные транзакции, которые изменили те таблицы или держат табличные
блокировки для них. Когда блокировки были приобретены, запрос блокирует
транзакции, которые пытаются обновить таблицы, разрешая операции
только для чтения.</li>

<li>Это проверяет, поддерживают ли все механизмы хранения для таблиц
<code>FOR EXPORT</code>. Если кто-либо этого не делает, будет ошибка
<a href="error.htm#error_er_illegal_ha"><code>ER_ILLEGAL_HA</code></a>.</li>

<li>Запрос регистрирует механизм хранения для каждой таблицы, чтобы сделать
таблицу готовой к экспорту. Механизм хранения должен гарантировать, что любые
изменения сохранены на диск.</li>

<li>Запрос помещает сеанс в режим блокировки таблиц, чтобы блокировки
метаданных, приобретенные ранее, не были выпущены, когда
завершается <code>FOR EXPORT</code>.</p></li></ol>

<p><code>FLUSH TABLES ... FOR EXPORT</code> требует, чтобы Вы имели
привилегию <a href="#select"><code>SELECT</code></a>
для каждой таблицы. Поскольку этот запрос приобретает табличные блокировки,
Вы должны также иметь привилегию
<a href="security.html#priv_lock-tables"><code>LOCK TABLES</code></a> в
дополнение к <a href="security.html#priv_reload"><code>RELOAD</code></a>,
которая нужна для выполнения <a href="#flush"><code>FLUSH</code></a>.
</p>

<p>Этот запрос применяется только к существующим базовым таблицам. Если имя
ссылается на базовую таблицу, та таблица используется.
Если это обращается к таблице <code>TEMPORARY</code>,
это проигнорировано. Если имя относится к представлению, будет ошибка
<a href="error.htm#error_er_wrong_object"><code>ER_WRONG_OBJECT</code></a>,
иначе будет ошибка <a href="error.htm#error_er_no_such_table"><code>
ER_NO_SUCH_TABLE</code></a>.</p>

<p><code>InnoDB</code> поддерживает <code>FOR EXPORT</code>
для таблиц, у которых есть их собственный файл
<a href="glossary.htm#glos_ibd_file">.ibd</a>
(то есть, таблицы, которые были составлены с включенной опцией
<a href="innodb.htm#sysvar_innodb_file_per_table"><code>
innodb_file_per_table</code></a>). <code>InnoDB</code>
гарантирует, когда регистрирует <code>FOR EXPORT</code>, что
любые изменения сброшены на диск. Это разрешает сделать
двоичную копию таблицы в то время, как работает <code>FOR EXPORT</code>,
потому что файл <code>.ibd</code> транзакционно последователен и может быть
скопирован в то время, как сервер работает. <code>FOR EXPORT</code>
не относится к системным файлам табличного пространства или к таблицам
<code>InnoDB</code>, у которых есть любые индексы <code>FULLTEXT</code>.</p>

<p><code>FLUSH TABLES ...FOR EXPORT</code> поддержан для
разделенных таблиц <code>InnoDB</code>.</p>
<p>Когда регистрируется <code>FOR EXPORT</code>, <code>InnoDB</code>
пишет на диск определенным видам данных, которые обычно хранятся в памяти или
в отдельных дисковых буферах вне файлов табличного пространства. Для каждой
таблицы <code>InnoDB</code> также производит файл
<code><em><code>table_name</code></em>.cfg</code>
в том же самом каталоге базы данных, где таблица. Файл <code>.cfg</code>
содержит метаданные, чтобы можно было повторно импортировать файлы табличного
пространства позже в тот же самый или другой сервер.</p>

<p>Когда <code>FOR EXPORT</code> завершается, <code>InnoDB</code> сбросит
все <a href="glossary.htm#glos_dirty_page">грязные страницы</a> в
табличные файлы с данными. Любые
<a href="glossary.htm#glos_change_buffer">буферы изменений</a> слиты до
сброса.В этом пункте таблицы заблокированы и неподвижны: таблицы находятся в
транзакционно последовательном статусе на диске, и Вы можете скопировать
файлы табличного пространства <code>.ibd</code> вместе с файлами
соответствующими файлами <code>.cfg</code>, чтобы получить последовательный
снимок тех таблиц.</p>

<p>Для процедуры повторного импорта скопированных табличных данных в MySQL
см. <a href="innodb.htm#tablespace-copying">раздел 16.7.6</a>.</p>
<p>После того, как Вы закончили с таблицами, надо использовать
<a href="#lock-tables"><code>UNLOCK TABLES</code></a>, чтобы
снять блокировки, <a href="#lock-tables"><code>LOCK TABLES</code></a>,
чтобы снять блокировки и приобрести другие блокировки или
<a href="#commit"><code>START TRANSACTION</code></a>, чтобы
снять блокировки и начать новую транзакцию.</p>

<p>В то время как любой из этих запросов работает в пределах сеанса, попытки
использовать <a href="#flush"><code>FLUSH TABLES ... FOR
EXPORT</code></a> приведут к ошибке:
<pre>
FLUSH TABLES ... WITH READ LOCK
FLUSH TABLES ... FOR EXPORT
FLUSH TABLES ... WITH READ LOCK
FLUSH TABLES ... FOR EXPORT
LOCK TABLES ... READ
LOCK TABLES ... WRITE
</pre></li></ul>

<h4><a name="kill"></a>14.7.6.4. KILL</h4>
<pre>
KILL [CONNECTION | QUERY] <em><code>processlist_id</code></em>
</pre>

Каждое соединение с <a href="programs.htm#mysqld"><span><strong>mysqld
</strong></span></a> работает в отдельном потоке. Вы можете уничтожить поток
с помощью <code>KILL <em><code>processlist_id</code></em></code>.</p>

<p>Идентификаторы потока могут быть определены из столбца <code>ID</code>
таблицы <a href="inform.htm#processlist-table"><code>
INFORMATION_SCHEMA.PROCESSLIST</code></a>, столбца <code>Id</code> вывода
<a href="#show-processlist"><code>SHOW PROCESSLIST</code></a> и
столбца <code>PROCESSLIST_ID</code> таблицы Performance Schema
<a href="perfor.htm#threads-table"><code>threads</code></a>. Значение для
текущего потока возвращено функцией
<a href="funct.htm#function_connection-id"><code>CONNECTION_ID()</code></a>.
</p>

<p><a href="#kill"><code>KILL</code></a> разрешает дополнительный
модификатор <code>CONNECTION</code> или <code>QUERY</code>:</p>
<ul><li><p><a href="#kill"><code>KILL CONNECTION</code></a>
то же самое, как <a href="#kill"><code>KILL</code></a> без
модификаторов: это заканчивает соединение, связанное с данным
<em><code>processlist_id</code></em>, после завершения любого
выполняемого соединением запроса.</li>

<li><a href="#kill"><code>KILL QUERY</code></a>
заканчивает запрос, который соединение в настоящее время выполняет, но
оставляет непосредственно соединение неповрежденным.</p></li></ul>

<p>Если Вы имеете привилегию <a href="security.html#priv_process"><code>
PROCESS</code></a>, Вы можете видеть все потоки. Если Вы имеете привилегию
<a href="security.html#priv_super"><code>SUPER</code></a>,
Вы можете уничтожить все потоки и запросы. Иначе Вы можете видеть и
уничтожить только свои собственные потоки и запросы.</p>

<p>Вы можете также использовать команды
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin processlist
</strong></span></a> и <a href="programs.htm#mysqladmin">
<span><strong>mysqladmin kill</strong></span></a>, чтобы
исследовать и уничтожить потоки.</p>

<p>Вы не можете использовать <a href="#kill"><code>KILL</code></a> с
библиотекой Embedded MySQL Server потому, что встроенный сервер просто
работает в потоках приложения. Это не создает собственных потоков соединения.
</p>

<p>Когда Вы используете <a href="#kill"><code>KILL</code></a>,
определенный для потока флаг уничтожения установлен. В большинстве случаев
это может занять время для потока, потому что флаг уничтожения проверен
только в определенных интервалах:</p>

<ul><li><p>Во время <a href="#select"><code>SELECT</code></a> для
<code>ORDER BY</code> и <code>GROUP BY</code>
флаг проверен после чтения блока строк.
Если флаг уничтожения установлен, запрос прерван.</li>

<li><a href="#alter-table"><code>ALTER TABLE</code></a>, которые
осуществляют табличную копию, проверяют флаг уничтожения периодически
по мере копирования строк, считанных из оригинальной таблицы. Если флаг
уничтожения был установлен, запрос прерван и временная таблица удалена.</p>

<p><a href="#kill"><code>KILL</code></a> не ожидает подтверждения, но
проверки флага уничтожения прерывают работу в пределах разумно небольшого
количества времени. Прерывание работы, чтобы выполнить любую необходимую
уборку, также занимает время.</li>

<li>Во время <a href="#update"><code>UPDATE</code></a> или
<a href="#delete"><code>DELETE</code></a>
флаг уничтожения проверен после того, как каждый блок считан и после каждой
обновленной или удаленной строки. Если флаг уничтожения установлен, запрос
прерван. Если Вы не используете транзакции, изменения не откатываются.</li>

<li><a href="funct.htm#function_get-lock"><code>GET_LOCK()</code></a>
прекращает работу и возвращает <code>NULL</code>.</li>
<li>Если поток находится в табличном обработчике блокировки (статус:
<code>Locked</code>), табличная блокировка быстро прервана.</li>
<li>Если поток ждет свободного дискового пространства, запись прерван с
сообщением об ошибке <span><span>disk full</span></span>.</p></li></ul>

<p>Уничтожение <a href="#repair-table"><code>REPAIR TABLE</code></a>
или <a href="#optimize-table"><code>OPTIMIZE TABLE</code></a>
на <code>MyISAM</code> приводит к таблице, которая повреждена и непригодна.
Любые чтения или записи такой таблицы терпят неудачу, пока Вы не
оптимизируете или не восстанавливаете ее снова (без прерывания).</p>

<h4><a name="load-index"></a>14.7.6.5. LOAD INDEX INTO CACHE</h4>
<pre>
LOAD INDEX INTO CACHE
  <em><code>tbl_index_list</code></em> [, <em><code>tbl_index_list</code></em>] ...
<em><code>tbl_index_list</code></em>:
  <em><code>tbl_name</code></em>
  [PARTITION (<em><code>partition_list</code></em> | ALL)]
  [[INDEX|KEY] (<em><code>index_name</code></em>[, <em><code>index_name</code></em>] ...)]
  [IGNORE LEAVES]
<em><code>partition_list</code></em>:
<em><code>partition_name</code></em>[, <em><code>partition_name</code></em>][, ...]
</pre>

<a href="#load-index"><code>LOAD INDEX INTO CACHE</code></a>
предварительные загружает табличный индекс в ключевой кэш, на который она
была назначена явным
<a href="#cache-index"><code>CACHE INDEX</code></a>
или в ключевой кэш по умолчанию иначе.</p>

<p><a href="#load-index"><code>LOAD INDEX INTO CACHE</code></a>
используется только для <code>MyISAM</code>. В MySQL 8.0 это также поддержано
для разделенных таблиц <code>MyISAM</code>, кроме того, индекс на разделенных
таблицах, может быть предварительно загружен для одного, нескольких
или всех разделов.</p>

<p><code>IGNORE LEAVES</code> заставляет только блоки для узлов нелиста
индекса быть предварительно загруженными.</p>
<p><code>IGNORE LEAVES</code> также поддержан для
разделенных таблиц <code>MyISAM</code>.</p>

<p>Следующий запрос предварительно загружает узлы (индексные блоки) индекса
для таблиц <code>t1</code> и <code>t2</code>:
<pre>
mysql&gt; LOAD INDEX INTO CACHE t1, t2 IGNORE LEAVES;
+---------+--------------+----------+----------+
| Table   | Op           | Msg_type | Msg_text |
+---------+--------------+----------+----------+
| test.t1 | preload_keys | status   | OK       |
| test.t2 | preload_keys | status   | OK       |
+---------+--------------+----------+----------+
</pre>
Этот запрос предварительно загружает все индексные блоки из <code>t1</code>.
Это предварительно загружает только блоки для узлов нелиста <code>t2</code>.
</p>

<p><a href="#load-index"><code>LOAD INDEX INTO CACHE</code></a>
позволяет Вам определить, что только особый индекс таблицы должен быть
предварительно загружен. Текущие выполнение грузит все индексы таблицы в кэш,
таким образом, нет никакой причины определить что-либо, кроме имени таблицы.
</p>

<p>Возможно предварительно загрузить индекс на определенном разделе
таблицы <code>MyISAM</code>. Например, следующие 2 запроса предварительно
загружают индекс: первый запрос для раздела <code>p0</code> таблицы
<code>pt</code>, второй запрос для разделов <code>p1</code> и
<code>p3</code>:
<pre>
LOAD INDEX INTO CACHE pt PARTITION (p0);
LOAD INDEX INTO CACHE pt PARTITION (p1, p3);
</pre>

Предварительно загрузить индексирование для всего разделения в таблице
<code>pt</code> можно любым из следующих 2 запросов:
<pre>
LOAD INDEX INTO CACHE pt PARTITION (ALL);
LOAD INDEX INTO CACHE pt;
</pre>

Эти два запроса эквивалентны. Другими словами, если Вы хотите предварительно
загрузить индексы для всего разделения разделенной таблицы, то
<code>PARTITION (ALL)</code> опционально.</p>

<p>Когда предварительно загружены индексы для многих разделов, разделение не
должно быть непрерывным, и Вы не обязаны перечислять имена разделов в
любом особом порядке.</p>

<p><a href="#load-index"><code>LOAD INDEX INTO CACHE ... IGNORE LEAVES
</code></a> терпит неудачу, если не все индексы в таблице имеют тот же самый
размер блока. Вы можете определить размеры блока для таблицы при
использовании <a href="programs.htm#myisamchk"><span><strong>myisamchk -dv
</strong></span></a> и проверке столбца <code>Blocksize</code>.</p>

<h4><a name="reset"></a>14.7.6.6. RESET</h4>
<pre>
RESET <em><code>reset_option</code></em> [, <em><code>reset_option</code></em>] ...
</pre>

<a href="#reset"><code>RESET</code></a>
используется, чтобы очистить состояние различных операций сервера.
Вы должны иметь привилегию <a href="security.html#priv_reload"><code>RELOAD
</code></a>.</p>

<p><a href="#reset"><code>RESET</code></a> действует как более сильная
версия <a href="#flush"><code>FLUSH</code></a>, см.
<a href="#flush">раздел 14.7.6.3</a>.</p>

<p><a href="#reset"><code>RESET</code></a> неявно закрывает
транзакции. См. <a href="#implicit-commit">раздел 14.3.3</a>.</p>
<p><em><code>reset_option</code></em> может быть таким:</p>

<ul><li><p><code>MASTER</code></p>
<p>Удаляет все двоичные журналы, перечисленные в индексном файле, сбрасывает
двоичной индексный файл журнала к пустому
и создает новый двоичной файл системного журнала.</li>

<li><code>QUERY CACHE</code></p>
<p>Удаляет все результаты запросов из кэша запроса.</li>
<li><code>SLAVE</code></p>
<p>Заставляет ведомое устройство забыть свою позицию
в основных двоичных журналах. Также сбрасывает журнал реле, удаляя любые
существующие файлы системного журнала реле и начиная новый.</p></li></ul>

<h4><a name="shutdown"></a>14.7.6.7. SHUTDOWN</h4>
<pre>
SHUTDOWN
</pre>
Этот запрос останавливает сервер MySQL. Это требует привилегии
<a href="security.html#priv_shutdown"><code>SHUTDOWN</code></a>.</p>

<p><a href="#shutdown"><code>SHUTDOWN</code></a> обеспечивает
SQL-интерфейс с той же самой функциональностью, как использование команды
<a href="programs.htm#mysqladmin"><span><strong>mysqladmin shutdown</strong>
</span></a>.</p>

<h2><a name="sql-syntax-utility"></a>14.8. Служебные запросы</h2>
<h3><a name="describe"></a>14.8.1. DESCRIBE</h3>
<p><a href="#describe"><code>DESCRIBE</code></a> и
<a href="#explain"><code>EXPLAIN</code></a> синонимы,
используемые чтобы получить информацию о структуре таблицы или планах
выполнения запроса. Для получения дополнительной информации см. разделы
<a href="#show-columns">14.7.5.5</a> и <a href="#explain">
14.8.2</a>.</p>

<h3><a name="explain"></a>14.8.2. EXPLAIN</h3>
<pre>
{EXPLAIN | DESCRIBE | DESC}
<em><code>tbl_name</code></em> [<em><code>col_name</code></em> |
<em><code>wild</code></em>]

{EXPLAIN | DESCRIBE | DESC}
[<em><code>explain_type</code></em>]
{<em><code>explainable_stmt</code></em> | FOR CONNECTION
     <em><code>connection_id</code></em>}
<em><code>explain_type</code></em>: {EXTENDED | PARTITIONS
  | FORMAT = <em><code>format_name</code></em>}
<em><code>format_name</code></em>: {TRADITIONAL | JSON}
<em><code>explainable_stmt</code></em>: {
SELECT statement
  | DELETE statement
  | INSERT statement
  | REPLACE statement
  | UPDATE statement}
</pre>

Практически <a href="#describe"><code>DESCRIBE</code></a>
чаще используется, чтобы получить информацию о структуре таблицы, тогда как
<a href="#explain"><code>EXPLAIN</code></a>
используется, чтобы получить план выполнения запроса (то есть, объяснение
того, как MySQL выполнил бы запрос). Следующее обсуждение использует
<a href="#describe"><code>DESCRIBE</code></a> и
<a href="#explain"><code>EXPLAIN</code></a>
в соответствии с этим использованием, но анализатор MySQL обрабатывает их
как абсолютные синонимы.</p>

<h4><a name="idm139965331434352"></a>Получение информации о структуре таблицы
</h4>
<p><a href="#describe"><code>DESCRIBE</code></a>
предоставляет информацию о столбцах в таблице:
<pre>
mysql&gt; DESCRIBE City;
+------------+----------+------+-----+---------+----------------+
| Field      | Type     | Null | Key | Default | Extra          |
+------------+----------+------+-----+---------+----------------+
| Id         | int(11)  | NO   | PRI | NULL    | auto_increment |
| Name       | char(35) | NO   |     |         |                |
| Country    | char(3)  | NO   | UNI |         |                |
| District   | char(20) | YES  | MUL |         |                |
| Population | int(11)  | NO   |     | 0       |                |
+------------+----------+------+-----+---------+----------------+
</pre>

<a href="#describe"><code>DESCRIBE</code></a> сокразение для
<a href="#show-columns"><code>SHOW COLUMNS</code></a>.
Эти запросытакже выводят на экран информацию для представлений. Описание для
<a href="#show-columns"><code>SHOW COLUMNS</code></a>
предоставляет больше информации о столбцах вывода. См.
<a href="#show-columns">раздел 14.7.5.5</a>.</p>

<p>По умолчанию <a href="#describe"><code>DESCRIBE</code></a>
отображает информацию обо всех столбцах в таблице.
<em><code>col_name</code></em>, если есть, задает название столбца в таблице.
В этом случае запрос выводит на экран информацию только для названного
столбца. <em><code>wild</code></em>, если задана, строка образца. Это может
содержать подстановочные символы SQL <code>%</code> и <code>_</code>.
В этом случае запрос выводит на экран вывод только для столбцов с именами,
соответствующими строке. Нет никакой потребности помещать строку в пределах
кавычек, если она не содержит пробелы или другие специальные символы.

<p><a href="#describe"><code>DESCRIBE</code></a> обеспечен для
совместимости с СУБД Oracle.</p>

<p><a href="#show-create-table"><code>SHOW CREATE TABLE</code></a>,
<a href="#show-table-status"><code>SHOW TABLE STATUS</code></a> и
<a href="#show-index"><code>SHOW INDEX</code></a> также предоставляют
информацию о таблицах. См. <a href="#show">раздел 14.7.5</a>.</p>

<h4><a name="idm139965331411616"></a>Получение информации о плане выполнения
</h4>
<p><a href="#explain"><code>EXPLAIN</code></a> предоставляет
информацию о том, как MySQL выполняет запросы:</p>

<ul><li><p>В MySQL 8.0 разрешены объяснимые запросы для
<a href="#explain"><code>EXPLAIN</code></a>
<a href="#select"><code>SELECT</code></a>,
<a href="#delete"><code>DELETE</code></a>,
<a href="#insert"><code>INSERT</code></a>,
<a href="#replace"><code>REPLACE</code></a> и
<a href="#update"><code>UPDATE</code></a>.</li>

<li>Когда <a href="#explain"><code>EXPLAIN</code></a>
используется с объяснимым запросом, MySQL выводит на экран информацию от
оптимизатора о плане выполнения запросы. Таким образом, MySQL объясняет, как
он обработал бы запрос, включая информацию о том, как к таблицам
присоединяются и в котором порядке. Для информации об использовании
<a href="#explain"><code>EXPLAIN</code></a>, чтобы получить информацию
о плане выполнения см. <a href="optimiz.htm#explain-output">раздел 9.8.2</a>.
</li>

<li>Когда <a href="#explain"><code>EXPLAIN</code></a> используется с
<code>FOR CONNECTION <em><code>connection_id</code></em></code>
вместо объяснимого запроса, это выводит на экран план выполнения относительно
выполнения запросов на названном соединении. См.
<a href="optimiz.htm#explain-for-connection">раздел 9.8.4</a>.</li>

<li><a href="optimiz.htm#explain-extended"><code>EXPLAIN EXTENDED</code></a>
может использоваться, чтобы получить дополнительную информацию о плане
выполнения. См. <a href="optimiz.htm#explain-extended">раздел 9.8.3</a>.</p>

<p>Эффект ключевого слова <code>EXTENDED</code> всегда включает
<a href="#explain"><code>EXPLAIN</code></a>.
<code>EXTENDED</code> признано для обратной совместимости, но лишнее и
устарело, его использование приводит к предупреждению. Это будет удалено из
<a href="#explain"><code>EXPLAIN</code></a> в будущем выпуске MySQL.
</li>

<li><a href="#explain"><code>EXPLAIN PARTITIONS</code></a>
полезно для исследования запросов, вовлекающих разделенные таблицы. См.
<a href="partit.htm#partitioning-info">раздел 20.3.5</a>.</p>

<p>Эффект ключевого слова <code>PARTITIONS</code> всегда включает
<a href="#explain"><code>EXPLAIN</code></a>. <code>PARTITIONS</code>
признано для обратной совместимости, но лишнее и устарело, его использование
приводит к предупреждению. Это будет удалено из <a href="#explain">
<code>EXPLAIN</code></a> в будущем выпуске MySQL.</li>

<li>Опция <code>FORMAT</code> может использоваться, чтобы выбрать выходной
формат. <code>TRADITIONAL</code> представляет вывод в табличном формате. Это
значение по умолчанию, если нет опции <code>FORMAT</code>. Формат
<code>JSON</code> выводит на экран информацию в формате JSON. С
<code>FORMAT = JSON</code> вывод включает расширенную
информация и сведения о разделении.</p></li></ul>

<p>С помощью <a href="#explain"><code>EXPLAIN</code></a>
Вы можете видеть, где Вы должны добавить индекс к таблицам, чтобы запрос
выполнился быстрее при использовании индекса, чтобы найти строки. Вы можете
также использовать <a href="#explain"><code>EXPLAIN</code></a>, чтобы
проверять, присоединяется ли оптимизатор к таблицам в оптимальном порядке.
Чтобы дать подсказку оптимизатору, чтобы использовал порядок соединения,
соответствующий порядку, в котором таблицы называют в
<a href="#select"><code>SELECT</code></a>, начните запрос с
<code>SELECT STRAIGHT_JOIN</code> вместо обычного
<a href="#select"><code>SELECT</code></a>. См.
<a href="#select">раздел 14.2.9</a>.</p>

<p>Оптимизатор может иногда предоставлять информацию, дополнительную к
<a href="#explain"><code>EXPLAIN</code></a>.
Однако, формат следа оптимизатора и контент подвержены изменениям между
версиями. Для деталей см.
<a href="../../../dev.mysql.com/doc/internals/en/optimizer-tracing.html"
target="_top">MySQL Internals: Tracing the Optimizer</a>.</p>

<p>Если у Вас есть проблема с тем, что индекс не используется, когда Вы
полагаете, что он должен быть задействован, выполните
<a href="#analyze-table"><code>ANALYZE TABLE</code></a>, чтобы
обновить табличную статистику, такую как количество элементов ключей, которые
могут затронуть выбор, который делает оптимизатор. См.
<a href="#analyze-table">раздел 14.7.2.1</a>.</p>

<h3><a name="help"></a>14.8.3. HELP</h3>
<pre>
HELP '<em><code>search_string</code></em>'
</pre>

<a href="#help"><code>HELP</code></a> возвращает информацию из
MySQL Reference manual. Его правильное функционирование требует что таблицы
справки в базе данных <code>mysql</code> были инициализированы с информацией
о теме справки (см. <a href="server.htm#server-side-help-support">раздел
6.1.10</a>).</p>

<p><a href="#help"><code>HELP</code></a> ищет в таблице справки данную
строку поиска и выводит на экран результат поиска.
Строка поиска не является чувствительной к регистру.</p>

<p>Строка поиска может содержать подстановочные символы
<code>%</code> и <code>_</code>. У них есть то же самое значение, что
касается соответствующих операций, выполненных с оператором
<a href="funct.htm#operator_like"><code>LIKE</code></a>. Например,
<code>HELP 'rep%'</code> возвращает список тем,
которые начинаются с <code>rep</code>.</p>

<p>Запрос <a href="#help"><code>HELP</code></a> понимает несколько
типов строк поиска:</p>
<ul><li><p>На наиболее общем уровне можно использовать <code>contents</code>,
чтобы получить список категорий верхнего уровня:
<pre>
HELP 'contents'
</pre></li>

<li>Для списка тем в данной категории справки, например,
<code>Data Types</code>, используйте название категории:
<pre>
HELP 'data types'
</pre></li>

<li>Для справки по определенной теме, такой как функция
<a href="funct.htm#function_ascii"><code>ASCII()</code></a> или запрос
<a href="#create-table"><code>CREATE TABLE</code></a>,
используйте связанное ключевое слово или слова:
<pre>
HELP 'ascii'
HELP 'create table'
</pre></li></ul>

<p>Другими словами, строка поиска соответствует категории, темам или
единственной теме. Вы не можете обязательно сказать заранее, возвратит ли
данная строка поиска список элементов или справочную информацию для
единственной темы справки. Однако, Вы можете сказать, какой ответ
<a href="#help"><code>HELP</code></a> возвращен, исследуя число строк
и столбцов в наборе результатов.</p>

<p>Следующие описания указывают на формы, которые может принять набор
результатов. Вывод для запросов в качестве примера показывают, используя
знакомый <span><span>вертикальный</span></span> формат, который Вы видите,
используя <a href="programs.htm#mysql"><span><strong>mysql</strong></span>
</a>, но отметьте, что <a href="programs.htm#mysql"><span><strong>mysql
</strong></span></a> сам переформатирует наборы результатов
<a href="#help"><code>HELP</code></a> по-другому.</p>

<ul><li><p>Пустой набор результатов.</p>
<p>Никакое соответствие не могло быть найдено для строки поиска.</li>
<li>Набор результатов, содержащий единственную строку с тремя столбцами.</p>
<p>Это означает, что строка поиска привела к ответу
для темы справки. У результата есть три столбца:</p>

<ul><li><p><code>name</code>: Название темы.</li>
<li><code>description</code>: Описательный текст справки для темы.</li>
<li><code>example</code>: Пример использования или примеры.
Этот столбец может быть пустым.</p></li></ul>

<p>Пример: <code>HELP 'replace'</code>.</p>
<p>Вернет:
<pre>
name: REPLACE
description: Syntax:
REPLACE(str,from_str,to_str)

Returns the string str with all occurrences of the string from_str
replaced by the string to_str. REPLACE() performs a case-sensitive
match when searching for from_str.
example: mysql&gt; SELECT REPLACE('www.mysql.com', 'w', 'Ww');
             -&gt; 'WwWwWw.mysql.com'
</pre></li>

<li>Набор результатов, содержащий много строк с двумя столбцами.</p>
<p>Это означает, что строка поиска соответствовала нескольким
темам справки. Набор результатов указывает на названия темы справки:</p>

<ul><li><p><code>name</code>: Название темы справки.</li>
<li><code>is_it_category</code>: <code>Y</code>, если имя представляет
категорию справки, <code>N</code>, если нет. Если нет, <code>name</code>
когда определено как параметр <a href="#help"><code>HELP</code></a>
должно привести к набору результатов из единственной строки, содержащему
описание для названного элемента.</p></li></ul>

<p>Пример: <code>HELP 'status'</code>.</p>
<p>Выведет:
<pre>
+-----------------------+----------------+
| name                  | is_it_category |
+-----------------------+----------------+
| SHOW                  | N              |
| SHOW ENGINE           | N              |
| SHOW MASTER STATUS    | N              |
| SHOW PROCEDURE STATUS | N              |
| SHOW SLAVE STATUS     | N              |
| SHOW STATUS           | N              |
| SHOW TABLE STATUS     | N              |
+-----------------------+----------------+
</pre></li>

<li>Набор результатов, содержащий много строк с тремя столбцами.</p>
<p>Это означает, что строка поиска соответствует категории.
Набор результатов содержит записи категории:</p>

<ul><li><p><code>source_category_name</code>:
Название категории справки.</li>
<li><code>name</code>: Название категории или название темы.</li>

<li><code>is_it_category</code>: <code>Y</code>, если имя представляет
категорию справки, <code>N</code>, если это не так, в этом случае
<code>name</code> когда определено как параметр
<a href="#help"><code>HELP</code></a> должно привести к набору
результатов из единственной строки, содержащему описание
для названного элемента.</p></li></ul>

<p>Пример: <code>HELP 'functions'</code>.</p>
<p>Выведет:
<pre>
+----------------------+-------------------------+----------------+
| source_category_name | name                    | is_it_category |
+----------------------+-------------------------+----------------+
| Functions            | CREATE FUNCTION         | N              |
| Functions            | DROP FUNCTION           | N              |
| Functions            | Bit Functions           | Y              |
| Functions            | Comparison operators    | Y              |
| Functions            | Control flow functions  | Y              |
| Functions            | Date and Time Functions | Y              |
| Functions            | Encryption Functions    | Y              |
| Functions            | Information Functions   | Y              |
| Functions            | Logical operators       | Y              |
| Functions            | Miscellaneous Functions | Y              |
| Functions            | Numeric Functions       | Y              |
| Functions            | String Functions        | Y              |
+----------------------+-------------------------+----------------+
</pre></li></ul>

<h3><a name="use"></a>14.8.4. USE</h3>
<pre>
USE <em><code>db_name</code></em>
</pre>

<code>USE <em><code>db_name</code></em></code> запрос говорит MySQL
использовать базу данных <em><code>db_name</code></em> как значение по
умолчанию (текущую) базу данных для последующих запросов. База данных
остается значением по умолчанию до конца сеанса или другого
вызова оператора <a href="#use"><code>USE</code></a>:
<pre>
USE db1;
SELECT COUNT(*) FROM mytable;   # selects from db1.mytable
USE db2;
SELECT COUNT(*) FROM mytable;   # selects from db2.mytable
</pre>

Создание особой базы данных по умолчанию посредством
<a href="#use"><code>USE</code></a>
не устраняет Вас от доступа к таблицам в других базах данных. Следующий
пример получает доступ к таблице <code>author</code> базы данных
<code>db1</code> и таблице <code>editor</code> базы данных <code>db2</code>:
<pre>
USE db1;
SELECT author_name,editor_name FROM author,db2.editor
       WHERE author.editor_id = db2.editor.editor_id;
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
