<HTML>
<HEAD>
  <TITLE>Основная информация про MySQL</TITLE>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <META NAME="GENERATOR" CONTENT="Dos Navigator 1.51.04/DOS.">
</HEAD>

<BODY>

<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<H1><A NAME="Introduction">1 Основная информация про MySQL</A></H1>
<P>MySQL очень быстрый, многопоточный, многопользовательский и поддерживающий
SQL (Structured Query Language) сервер баз данных.</P>

<P>MySQL является free software. Он лицензируется по <STRONG>GNU GENERAL
PUBLIC LICENSE</STRONG> <a HREF="../../../www.gnu.org/default.htm">http://www.gnu.org</a>.
</P>

<P><a HREF="../../../www.mysql.com/default.htm">Сайт MySQL</a> предоставляет последнюю
информацию касательно MySQL.</P>

<P>Следующий перечень описывает наиболее интересные места руководства:</P>
<UL><LI>Все о разработчиках MySQL можно узнать в разделе
"<A HREF="#What_is_MySQL_AB">1.1.2 Что такое MySQL AB</A>".

<LI>Обсуждение основных возможностей MySQL приведено в разделе
"<A HREF="#Features">1.1.4 Основные возможности MySQL</A>".

<LI>Для новичков предусмотрен раздел
"<A HREF="glava02.htm#Tutorial">2 Введение в MySQL</A>".

<LI>Примеры на SQL и информация по тестированию производительности есть в
каталоге <TT>sql-bench</TT> дистрибутива.

<LI>Перечень известных на сегодняшний день проблем и дефектов приведен в
разделе "<A HREF="#Bugs">1.2.7 Известные ошибки в MySQL</A>".</UL>

<P><STRONG>ВАЖНО:</STRONG></P>
<P>Сообщения об ошибках также как вопросы и комментарии, должны быть посланы
списку рассылки <a HREF="mailto:mysql@lists.mysql.com">
mysql@lists.mysql.com</a>. Подробности в разделе
"<A HREF="appl3.htm#Bug_reports">Как сообщать о проблемах и сбоях</A>".
Скрипт <CODE>mysqlbug</CODE> должен использоваться, чтобы генерировать отчеты
об ошибках. Для дистрибутивов исходных текстов скрипт <CODE>mysqlbug</CODE>
может быть найден в каталоге <TT>scripts</TT>. Для двоичных дистрибутивов
<CODE>mysqlbug</CODE> находится в каталоге <TT>bin</TT>. Если Вы нашли ошибку
защиты в MySQL, Вы должны послать e-mail на
<a HREF="mailto:security@mysql.com">security@mysql.com</a>.</P>

<P><A NAME="IDX5"></A><A NAME="IDX6"></A><A NAME="IDX7"></A>
<A NAME="IDX8"></A></P>
<P>Если Вы имеете любые предложения относительно добавлений или исправлений
этого руководства, пожалуйста, пошлите их на <a HREF="mailto:docs@mysql.com">
docs@mysql.com</a>.</P>

<H2><A NAME="MySQL_and_MySQL_AB">1.1 MySQL, MySQL AB и Open Source</A></H2>

<H3><A NAME="What-is">1.1.1 Что такое MySQL</A></H3>
<P>MySQL представляет собой очень популярную систему управления базами данных
с открытыми исходными текстами, разрабатываемую MySQL AB. MySQL AB является
коммерческой компанией, строящей свой бизнес на сервисах, сосредоточенных на
базе данных MySQL. Подробности в разделе
"<A HREF="#What_is_MySQL_AB">1.1.2 Что такое MySQL AB</A>".</P>

<DL COMPACT>
<DT>MySQL представляет собой систему управления базами данных.
<DD>Базой данных называют структурированный набор данных. Это может быть чем
угодно: от простого перечня покупок до галереи изображений. Чтобы добавлять,
обращаться и обрабатывать данные, сохраненные в компьютерной базе данных, Вы
нуждаетесь в системе управления базы данных, типа MySQL. Так как компьютеры
очень хороши при обработке больших количеств данных, базы данных играют
центральную роль в вычислениях, как автономные утилиты, или как части других
пакетов прикладных программ.

<A NAME="IDX11"></A><DT>MySQL является реляционной СУБД.
<DD>Реляционная база данных сохраняет данные в отдельных таблицах. Это
добавляет быстродействие и гибкость. Таблицы связаны определенными
отношениями, делающими возможным объединить данные из нескольких таблиц в
одном запросе. SQL-часть MySQL ориентирована на Structured Query Language,
наиболее общий стандартизированный язык, используемый, чтобы обратиться к
компьютерным базам данных.

<A NAME="IDX12"></A><A NAME="IDX13"></A>
<DT>MySQL является Open Source Software.
<DD>Open Source означает, что тексты открыты для чтения и правки всем
желающим. Любой может скачать MySQL из Internet и использовать его совершенно
бесплатно. Любой желающий может изучать исходный текст и изменять его по
своему усмотрению. MySQL использует лицензию GPL (GNU General Public License)
<a HREF="../../../www.gnu.org/default.htm">http://www.gnu.org</a>, чтобы определить то, что
Вы можете делать с программным обеспечением в различных ситуациях. Если Вы
считаете GPL неудобной или должны внедрить MySQL в коммерческую прикладную
программу, Вы можете купить коммерчески запатентованную версию у авторов.

<DT>Почему используют MySQL?
<DD>MySQL очень быстр, надежен и легок в использовании. Если это то, что Вы
ищете, Вы должны попробовать его. MySQL также имеет очень практичный набор
свойств, разработанных в очень близком сотрудничестве с пользователями. Вы
можете найти сравнение эффективности MySQL с некоторыми другими
администраторами баз данных на странице эталонных тестов. Подробности в
разделе "<A HREF="glava14.htm#MySQL_Benchmarks">14.1.4 Пакет тестов MySQL
Benchmark Suite</A>". MySQL был первоначально разработан, чтобы обработать
очень большие базы данных намного быстрее, чем существующие решения, и
успешно использовался в высокотребовательных промышленных средах в течение
нескольких лет. При постоянной разработке MySQL сегодня предлагает богатый и
очень полезный набор функций. Связность, быстродействие и защита делают MySQL
очень подходящим для обращения к базам данных из Internet.

<DT>Технические возможности MySQL.
<DD>За подробностями отсылаю Вас к разделу "<A HREF="glava09.htm#Reference">9
Обзор языка MySQL</A>". MySQL является системой "клиент-сервер", состоящей из
многопоточного SQL-сервера, который поддерживает различные функции,
нескольких различных клиентских программ и библиотек, административных
инструментальных средств и нескольких интерфейсов программирования.

<DT>MySQL имеет много дополнительных программ.
<DD>Вероятно, Вы обнаружите, что Ваша любимая прикладная программа или язык
программирования уже поддерживает MySQL.</DL>

<P><A NAME="IDX16"></A><A NAME="IDX17"></A><A NAME="IDX18"></A>Официально
MySQL произносится как "Май-Эс-Ку-Эль", а не как MY-SEQUEL.</P>

<H3><A NAME="What_is_MySQL_AB">1.1.2 Что такое MySQL AB?</A></H3>
<P>MySQL AB является шведской компанией, которая владеет правами на исходные
тексты сервера и марку MySQL. Она занимается разработкой, распространением и
поддержкой пакета MySQL.</P>

<P>Авторы ищут партнеров, которые хотели бы поддерживать разработку MySQL
так, чтобы они могли бы ускорить темп разработки. Если Вы заинтересованы в
этом, напишите на e-mail <a HREF="mailto:partner@mysql.com">
partner@mysql.com</a>!</P>

<P>MySQL AB имеет в настоящее время свыше 20 разработчиков
(<a HREF="../../../www.mysql.com/development/team.html">
http://www.mysql.com/development/team.html</a>) в платежной ведомости, и это
число возрастает быстро.</P>

<P>Основные источники дохода:</P>
<UL><LI>Коммерческая поддержка высокого качества для MySQL, обеспеченная
разработчиками MySQL непосредственно. Если Вы заинтересованы в закупке
контракта поддержки, пожалуйста, посетите <a HREF="../../../https@order.mysql.com/default.htm">
https://order.mysql.com</a>, чтобы рассмотреть параметры поддержки или
собственно заказать поддержку.

<LI>Консультантские услуги. Фирма MySQL AB имеет разработчиков и
консультантов в 12 странах и партнеров во многих других странах, которые
могут помочь Вам почти с любой проблемой с MySQL. Если Вы нуждаетесь в
консультантских услугах, пожалуйста, напишите по e-mail хорошее описание
Ваших потребностей на <a HREF="mailto:info@mysql.com">info@mysql.com</a>!
Если авторы не смогут обработать это непосредственно, то они обычно могут
найти партнера или разработчика, который может помочь Вам с Вашими проблемами.

<LI>Авторы продают лицензии на использование MySQL как встроенной базы данных.
Если Вы имеете коммерческую программу, для которой Вам требуется база данных
высоких качеств, но Вы не можете позволить себе открыть ее исходники, Вы
можете купить право использовать сервер MySQL под нормальным коммерческим
авторским правом. Если Вы заинтересованы этим, Вы можете купить лицензию
прямо на сайте <a HREF="../../../https@order.mysql.com/default.htm">https://order.mysql.com</a>
или написать на <a HREF="mailto:licensing@mysql.com">licensing@mysql.com</a>.

<LI>Реклама. Сайт <a HREF="../../../www.mysql.com/default.htm">http://www.mysql.com</a>
представаляет собой очень популярное место более, чем с 10000000 показами
страницы в месяц (на январь 2001). Сами понимаете, что баннер на таком сайте
гарантирует известность в среде Open source, Linux и баз данных. Если это Вам
интересно и нужно, напишите на <a HREF="mailto:advertising@mysql.com">
advertising@mysql.com</a>.

<LI>Авторы пакета формируют программу партнеров, чтобы иметь возможность
обеспечивать услуги MySQL в каждой стране. Если Вы заинтересованы в том,
чтобы стать таким партнером, пишите на <a HREF="mailto:partner@mysql.com">
partner@mysql.com</a> или посетите сайт программы партнерства
<a HREF="../../../www.mysql.com/information/partners.html">
http://www.mysql.com/information/partners.html</a>.

<LI>Разработчики обеспечивают обучение MySQL через свои программы партнеров.
Для получения большего количества информации, пожалуйста, пишите на
<a HREF="mailto:info@mysql.com">info@mysql.com</a>.

<LI>Если Вы заинтересованы использованием марки изготовителя MySQL в Вашем
маркетинге, Вы можете написать об этом на e-mail
<a HREF="mailto:info@mysql.com">info@mysql.com</a>.</UL>

<P>Авторы пакета хотят, чтобы MySQL всегда был:</P>
<UL><LI>Самой лучшей и наиболее используемой базой данных в мире.
<LI>Доступным для всех.
<LI>Легким в использовании, насколько это возможно для такого пакета.
<LI>Непрерывно улучшаемым при дальнейшем пребывании быстрым и безопасным.
<LI>Свободным от ошибок.</UL>

<P>MySQL AB и команда MySQL AB:</P>
<UL><LI>Продвигает в массы философию Open Source (открытых исходных текстов)
и поддерживает все сообщество разработчиков Open Source Community.
<LI>Предпочитает партнеров, которые совместно используют знания.
<LI>Отвечают на почту и оказывает поддержку.
<LI>Является виртуальной компанией, работающей в основном по сети.
<LI>Выступает против программных патентов.</UL>

<H3><A NAME="History">1.1.3 История MySQL</A></H3>
<P>Началось все с попыток добавить к <CODE>mSQL</CODE> драйвер низкого уровня
для связи с только что разработанным форматом таблиц (ISAM). Однако, после
вдумчивого тестирования, было установлено, что <CODE>mSQL</CODE> недостаточно
быстр и гибок для этого дела. Это закончилось созданием нового интерфейса SQL
к нашей базе данных, но почти с тем же самым интерфейсом API, что и у
<CODE>mSQL</CODE>. Этот API был выбран, чтобы облегчить перенос кодов для
других разработчиков программ.</P>

<P>Название возникло из сокращения (а вернее, слияния) слов My SQL, что на
английском языке значит "мой SQL". Названию около десяти лет, оно прижилось
еще в те времена, когда пакет не был коммерческой разработкой.</P>

<H3><A NAME="Features">1.1.4 Основные возможности MySQL</A></H3>
<P>Следующий перечень описывает наиболее важные возможности MySQL:</P>

<UL><LI>Полностью многопоточное использование ядерных нитей. Это означает,
что пакет может легко использовать много CPUs, если они есть.

<LI>Интерфейсы для языков C, C++, Eiffel, Java, Perl, PHP, Python и Tcl.
<LI>Работает на многих различных платформах.
<LI>Много типов столбцов: целые со знаком или без него длиной 1, 2, 3, 4 и 8
байт, <CODE>FLOAT</CODE>, <CODE>DOUBLE</CODE>, <CODE>CHAR</CODE>,
<CODE>VARCHAR</CODE>, <CODE>TEXT</CODE>, <CODE>BLOB</CODE>,
<CODE>DATE</CODE>, <CODE>TIME</CODE>, <CODE>DATETIME</CODE>,
<CODE>TIMESTAMP</CODE>, <CODE>YEAR</CODE>, <CODE>SET</CODE> и
<CODE>ENUM</CODE>. Подробности приведены в разделе
"<A HREF="glava05.htm#Column_types">5 Типы столбцов</A>". Там все рассказано.

<LI>Очень быстрые объединения, использующие оптимизированное однопроходное
объединение многих таблиц.

<LI>Полная поддержка операторов и функций в частях запроса
<CODE>SELECT</CODE> и <CODE>WHERE</CODE>. Например:
<PRE>
mysql&#62; SELECT CONCAT(first_name, " ", last_name) FROM tbl_name
                  WHERE income/dependents &#62; 10000 AND age &#62; 30;
</PRE>

<LI>SQL-функции выполнены через хорошо оптимизированную библиотеку классов и
должны выполняться с такой скоростью, с какой только возможно! Обычно не
имеется никакого распределения памяти вообще после инициализации запроса.

<LI>Полная поддержка предложений SQL <CODE>GROUP BY</CODE> и <CODE>ORDER
BY</CODE>. Поддержка групповых функций (<CODE>COUNT()</CODE>,
<CODE>COUNT(DISTINCT ...)</CODE>, <CODE>AVG()</CODE>, <CODE>STD()</CODE>,
<CODE>SUM()</CODE>, <CODE>MAX()</CODE> и <CODE>MIN()</CODE>).

<LI>Поддержка <CODE>LEFT OUTER JOIN</CODE> и <CODE>RIGHT OUTER JOIN</CODE> с
синтаксисами ANSI SQL и ODBC.

<LI>Вы можете смешивать таблицы из разных баз данных в одном запросе.
<LI>Привилегии и система паролей, которая является очень гибкой и безопасной,
и позволяет проверку, основанную на имени хоста. Пароли безопасны потому, что
вся передача пароля шифрована, когда Вы соединяетесь с сервером.

<LI>ODBC (Open-DataBase-Connectivity) поддерживается для Win32 (с
исходниками). Все функции ODBC 2.5 и многие другие реализованы. Например, Вы
можете использовать MS Access для связи с сервером MySQL. Подробности в
разделе "<A HREF="glava13.htm#ODBC">13 Поддержка MySQL ODBC</A>".

<LI>Очень быстрые дисковые таблицы B-tree с индексным сжатием.
<LI>Можно иметь до 32 индексов на таблицу. Каждый индекс может состоять от 1
до 16 столбцов или частей столбцов. Максимальная индексная длина 500 байт
(это может быть изменено при компиляции MySQL). Индекс может использовать
префикс поля <CODE>CHAR</CODE> или <CODE>VARCHAR</CODE>.

<LI>Записи фиксированной и переменной длины.
<LI>Таблицы в памяти, которые используются как временные таблицы.
<LI>Поддержка поистине огромных объемов данных. Известен случай использования
MySQL на 60000 таблиц, хранящих около 5000000000 строк.

<LI>Все столбцы имеют значения по умолчанию. Вы можете использовать вызов
<CODE>INSERT</CODE>, чтобы вставить подмножество столбцов таблицы. Те
столбцы, которым явно не заданы значения, будут автоматически установлены к
их значениям по умолчанию.
<LI>Для переносимости использованы GNU Automake, Autoconf и Libtool.
<LI>Пакет написан на C и C++. Оттестирован на всех распространенных
компиляторах этих языков.
<LI>Очень быстрая поточно-безопасная система управления памятью.
<LI>Никаких утечек памяти. MySQL тестировался с помощью Purify, коммерческого
детектора утечек памяти.
<LI>Есть <CODE>myisamchk</CODE>, очень быстрая утилита для проверки таблицы,
оптимизации и ремонта. Все функциональные возможности <CODE>myisamchk</CODE>
также доступны через интерфейс SQL.
<LI>Полная поддержка для нескольких различных наборов символов, включая
ISO-8859-1 (Latin1), german, big5, ujis и много других. Например,
скандинавские символы `@ringaccent{a}', `@"a' и `@"o' позволяются в
именах столбцов и таблиц.
<LI>Все данные сохранены в выбранном наборе символов. Все сравнения для
нормальных столбцов нечувствительны к регистру.
<LI>Сортировка выполнена согласно выбранному набору символов (шведский по
умолчанию). Возможно изменить это, когда сервер MySQL работает. Чтобы увидеть
пример очень продвинутой сортировки, рассмотрите сортировочный код для Czech.
MySQL поддерживает много различных наборов символов, которые могут быть
определены при компиляции или во время выполнения.
<LI>Псевдонимы на таблицах и именах столбцов доступны как в стандарте SQL92.
<LI><CODE>DELETE</CODE>, <CODE>INSERT</CODE>, <CODE>REPLACE</CODE> и
<CODE>UPDATE</CODE> возвращают число строк, которые были изменены
(обработаны). Можно взамен вернуть число согласованных строк, устанавливая
флажок при соединении с сервером.
<LI>Имена функции не сталкиваются с именами столбцов или таблиц. Например,
<CODE>ABS</CODE> представляет собой имеющее силу имя столбца. Единственное
ограничение: для обращения к функции никакие пробелы не позволяются между
именем функции и символом скобки (<SAMP>`('</SAMP>), который следует за ним.
<LI>Все программы пакета MySQL понимают параметры командной строки
<CODE>--help</CODE> или <CODE>-?</CODE> для выдачи справки о параметрах
запуска конкретной программы.
<LI>Сервер умеет выдавать сообщения об ошибках и диагностику на разных языках.
<LI>Клиенты могут соединяться с сервером MySQL, используя все мыслимые
способы, допустимые в сегодняшних сетях: сокеты TCP/IP, сокеты Unix (под
Unix) или даже именованные каналы (под NT).
<LI>MySQL-специфичная команда <CODE>SHOW</CODE> может использоваться, чтобы
получить информацию относительно баз данных, таблиц и индексов. Команда
<CODE>EXPLAIN</CODE> может использоваться, чтобы определить, как именно
оптимизатор решает запрос.</UL>

<H3><A NAME="Stability">1.1.5 Насколько стабилен MySQL?</A></H3>
<P>Этот раздел сводится к вопросам о том, насколько можно доверять пакету, и
сколько шансов, что он разнесет на кусочки важный проект, зависящий от него.
Строго говоря, MySQL очень надежен.</P>

<P>Попробую разъяснить некоторые проблемы и ответить на некоторые из наиболее
важных вопросов, которые, кажется, касаются многих. Этот раздел был собран из
информации, собранной из списка рассылки (который является очень активным по
части сообщений об ошибках и сбоях).</P>

<P>В TcX MySQL работал без любых проблем в проектах, начиная с середины 1996.
Когда MySQL был выпущен на публику, авторы отметили, что имелись некоторые
части непроверенного кода, которые были быстро найдены новыми пользователями,
делавшими запросы иными способами, чем авторы. Каждый новый выпуск имел
меньшее количество проблем мобильности, чем предыдущий (даже при том, что
каждый имел много новых свойств).</P>

<P>Каждый выпуск MySQL был пригоден для использования, и имелись проблемы
только, когда пользователи начинали использовать код из серых зон.
Естественно, пользователи снаружи не видят то, чем являются серые зоны, этот
раздел пытается указать, которые зоны в настоящее время известны. Описания
имеют дело с MySQL Version 3.23. Все известные и сообщенные ошибки
выправлены в последней версии, за исключением ошибок, перечисленных в
отдельном разделе, которые являются проблемами, связанными с проектом.
Подробности в разделе "<A HREF="#Bugs">1.2.7
Известные ошибки и проблемы</A>".</P>

<P>MySQL написан на нескольких уровнях и различных независимых модулях. Эти
модули перечислены ниже с индикацией относительно того, как хорошо проверен
каждый из них (сравните с MS SQL Server!):</P>

<P><A NAME="IDX34"></A></P>
<DL COMPACT>
<DT><STRONG>Драйвер ISAM-таблиц: стабилен.</STRONG>
<DD>Это управляет хранением и поиском всех данных в MySQL Version 3.22 и
ранее. Во всех выпусках MySQL не имелось сообщений об ошибках в этом коде.
Единственный известный способ получить разрушенную таблицу состоит в том,
чтобы уничтожить сервер в середине модификации. Даже это вряд ли уничтожит
любые данные потому, что все данные сбрасываются на диск между запросами. Не
было отчетов об ошибках относительно потерянных данных из-за ошибок в MySQL.

<A NAME="IDX35"></A><A NAME="IDX36"></A><A NAME="IDX37"></A>
<A NAME="IDX38"></A>
<DT><STRONG>Драйвер MyISAM-таблиц: стабилен.</STRONG>
<DD>Это ноовведение MySQL Version 3.23. Это в значительной степени основано
на коде ISAM-таблиц, но имеет много новых и очень полезных свойств.

<DT><STRONG>Лексический анализатор и обработчик команд: стабильны.</STRONG>
<DD>Не было сообщений об ошибках в этой системе в течение длительного времени.

<DT><STRONG>Клиентский код на C: стабилен.</STRONG>
<DD>Никаких известных проблем. До Version 3.20 имелись некоторые ограничения
в размере буферов передачи/приема. Начиная с Version 3.21, буферный размер
теперь динамически меняется до значения по умолчанию в 16M.

<DT><STRONG>Стандартные клиентские программы: стабильны.</STRONG>
<DD>Это касается утилит <CODE>mysql</CODE>, <CODE>mysqladmin</CODE>,
<CODE>mysqlshow</CODE>, <CODE>mysqldump</CODE> и <CODE>mysqlimport</CODE>.

<DT><STRONG>Поддержка SQL: стабильна.</STRONG>
<DD>Базисная система функций SQL, классы строк и динамическая обработка
памяти. Ни одной сообщенной ошибки в этой системе.

<DT><STRONG>Оптимизатор запросов: стабилен.</STRONG>
<DD>
<DT><STRONG>Оптимизатор диапазонов: стабилен.</STRONG>
<DD>
<DT><STRONG>Оптимизатор объединений: стабилен.</STRONG>
<DD>
<DT><STRONG>Блокировки: пока Gamma.</STRONG>
<DD>Это очень зависит от системы. На некоторых системах имеются большие
проблемы при использовании стандарта блокировки OS (<CODE>fcntl()</CODE>). В
этих случаях Вы должны выполнить MySQL с опцией <CODE>--skip-locking</CODE>.
Проблемы, как известно, происходят на некоторых Linux-системах и на SunOS при
использовании файловых систем по NFS.

<DT><STRONG>Linux threads: стабильно.</STRONG>
<DD> Главная найденная проблема была с обращением <CODE>fcntl()</CODE>,
которое исправлено, используя опцию <CODE>--skip-locking</CODE> для
<CODE>mysqld</CODE>. Некоторые пользователи сообщали о проблемах тупика в
Version 0.5. LinuxThreads должен быть перетранслирован, если Вы планируете
использовать свыше 1000 параллельных подключений. Хотя можно выполнить много
подключений с LinuxThreads по умолчанию (однако, Вы никогда не будете иметь
более, чем 1021 подключение), заданный по умолчанию лимит стека в 2 МБ делает
прикладную программу ненадежной, и она способна свалиться в дамп ядра после
создания 1021 неактивных подключений.

<DT><STRONG>Solaris 2.5+ pthreads: стабильно.</STRONG>
<DD>Мы используем это для всей нашей промышленной работы.

<DT><STRONG>MIT-pthreads (прочие системы): стабильно.</STRONG>
<DD>Не имелось никаких сообщенных ошибок, начиная с Version 3.20.15, и
никаких известных авторам (почувствуйте разницу!) ошибок, начиная с Version
3.20.16. На некоторых системах имеется сильное замедление операций (до 1/20
секунды бездействия между каждыми двумя запросами). Конечно, MIT-pthreads
может все немного замедлять, но индексные инструкции <CODE>SELECT</CODE>
обычно выполняются в одном пакете.

<DT><STRONG>Другие реализации потоков: Beta-Gamma.</STRONG>
<DD>Версии для других систем все еще очень новые и могут иметь ошибки,
возможно, в MySQL, но наиболее часто непосредственно в реализации потоков.

<DT><STRONG><CODE>LOAD DATA...</CODE>, <CODE>INSERT...SELECT</CODE>:
стабильно.</STRONG>
<DD>Некоторые люди думали, что они нашли ошибки здесь, но они обычно просто
не поняли ситуацию. Пожалуйста, внимательно проверьте руководство перед тем,
как сообщать о возникших проблемах!

<DT><STRONG><CODE>ALTER TABLE</CODE>: стабильно.</STRONG>
<DD>Маленькие изменения в Version 3.22.12.

<DT><STRONG>DBD: стабильно.</STRONG>
<DD>Сейчас поддерживает Jochen Wiedmann
(<a HREF="mailto:wiedmann@neckar-alb.de">wiedmann@neckar-alb.de</a>). Спасибо!

<DT><STRONG><CODE>mysqlaccess</CODE>: стабильно.</STRONG>
<DD>Написан и поддерживается Yves Carlier
(<a HREF="mailto:Yves.Carlier@rug.ac.be">Yves.Carlier@rug.ac.be</a>). Спасибо!

<DT><STRONG><CODE>GRANT</CODE>: стабильно.</STRONG>
<DD>Большие изменения внесены в MySQL Version 3.22.12.

<DT><STRONG><STRONG>MyODBC</STRONG> (используется ODBC SDK 2.5): Gamma.
</STRONG>
<DD>Это, кажется, уже работает хорошо с некоторыми программами.

<DT><STRONG>Репликация: Beta/Gamma.</STRONG>
<DD>Авторы все еще работают над репликацией, так что не ожидайте, что это
будет твердой скалой. С другой стороны, некоторые пользователи MySQL уже
вовсю применяют это свойство с очень хорошими результатами.

<DT><STRONG>Таблицы BDB: Beta.</STRONG>
<DD>Код Berkeley DB сам по себе очень устойчив, но разработчики пакета все
еще улучшают интерфейс между MySQL и таблицами BDB, так что будет требоваться
некоторое время прежде, чем все будет надежно.

<DT><STRONG>Таблицы InnoDB: Beta.</STRONG>
<DD>Это недавнее добавление к <CODE>MySQL</CODE>. Они работают хорошо и
могут использоваться после начального тестирования.

<DT><STRONG>Автоматический ремонт таблиц MyISAM: Beta.</STRONG>
<DD>Это воздействует только на новый код, который проверяет, была ли таблица
закрыта правильно, и выполняет автоматическую проверку/ремонт таблицы, если
это не так.

<DT><STRONG>Таблицы MERGE: Beta/Gamma.</STRONG>
<DD>Использование ключей на таблицах <CODE>MERGE</CODE> все еще не
оттестировано как следует. Другая часть кода <CODE>MERGE</CODE> проверена.

<DT><STRONG>FULLTEXT: Beta.</STRONG>
<DD>Текстовый поиск работает, но все еще не используется широко.</DL>

<P>MySQL AB обеспечивает поддержку по электронной почте для покупателей
соответствующей услуги, но список рассылки MySQL обычно обеспечивает ответы
на общие вопросы. Ошибки обычно исправляются сразу же с помощью патча, для
серьезных ошибок почти всегда имеется новый выпуск.</P>

<H3><A NAME="Table_size">1.1.6 Насколько большими могут быть таблицы MySQL?
</A></H3>
<P>MySQL Version 3.22 имеет лимит в 4G на размер таблицы. С новым кодом
<CODE>MyISAM</CODE> в MySQL Version 3.23 максимальный размер таблицы увеличен
до 8 миллионов терабайт (2^63 байт).</P>

<P>Обратите внимание, однако, что операционные системы имеют их собственные
ограничения размера файла. Имеются некоторые примеры:</P>

<TABLE BORDER WIDTH="100%">
<TR><TD><STRONG>Операционная система</STRONG></TD><TD><STRONG>Ограничение
размера файла</STRONG></TD></TR>
<TR><TD>Linux-Intel 32 bit</TD><TD>2G, 4G или больше, зависит от версии Linux
</TD></TR>
<TR><TD>Linux-Alpha</TD><TD>8T (?)</TD></TR>
<TR><TD>Solaris 2.5.1</TD><TD>2G (возможно, до 4G с патчем)</TD></TR>
<TR><TD>Solaris 2.6</TD><TD>4G</TD></TR>
<TR><TD>Solaris 2.7 Intel</TD><TD>4G</TD></TR>
<TR><TD>Solaris 2.7 ULTRA-SPARC</TD><TD>8T (?)</TD></TR></TABLE>

<P>В Linux 2.2 Вы можете получать таблицы больше, чем 2G, используя заплату
LFS для файловой системы ext2. В Linux 2.4 существует также заплата для
ReiserFS, чтобы получить поддержку для больших файлов.</P>

<P>Это означает, что размер таблицы для MySQL обычно ограничивается
операционной системой, а не самим пакетом.</P>

<P>По умолчанию таблицы MySQL имеют максимальный размер около 4G. Вы можете
проверять максимальный размер таблицы для каждой конкретной таблицы с помощью
команды <CODE>SHOW TABLE STATUS</CODE> или утилитой <CODE>myisamchk -dv
table_name</CODE>. Подробности приведены в разделе
"<A HREF="glava04.htm#SHOW">4.10 Синтаксис вызова <CODE>SHOW</CODE></A>".</P>

<P>Если Вы нуждаетесь в таблицах, больших, чем 4G (и Ваша операционная
система поддерживает это), Вы должны установить параметры
<CODE>AVG_ROW_LENGTH</CODE> и <CODE>MAX_ROWS</CODE>, когда Вы создаете Вашу
таблицу. Подробности в разделе "<A HREF="glava07.htm#CREATE_TABLE">7.3
Синтаксис <CODE>CREATE TABLE</CODE></A>". Вы можете установить их и позже с
помощью <CODE>ALTER TABLE</CODE>. Подробности в разделе
"<A HREF="glava07.htm#ALTER_TABLE">7.4 Синтаксис <CODE>ALTER TABLE</CODE>
</A>".</P>

<P>Если Ваша большая таблица нужна только для чтения, Вы могли бы
использовать <CODE>myisampack</CODE>, чтобы объединить и сжать много таблиц в
одну. Утилита <CODE>myisampack</CODE> обычно сжимает таблицу по крайней мере
на 50%, так что Вы можете иметь намного большие таблицы.</P>

<P>Вы можете обойти ограничения размера файла операционной системы для
файлов данных <CODE>MyISAM</CODE>, используя опцию <CODE>RAID</CODE>.
Подробности в разделе "<A HREF="glava07.htm#CREATE_TABLE">7.3 Синтаксис
<CODE>CREATE TABLE</CODE></A>".</P>

<P>Другое решение может быть реализовано с помощью библиотеки MERGE, которая
позволяет Вам обрабатывать совокупность идентичных
таблиц как одну.

<H3><A NAME="Year_2000_compliance">1.1.7 Совместимость с проблемой 2000</A>
</H3>
<P>MySQL непосредственно не имеет никаких трудностей с проблемой 2000 (Y2K):
</P>

<UL><LI>MySQL использует Unix-функции времени и не имеет никаких проблем с
датами до <CODE>2069</CODE>. Все годы с 2 цифрами расценены в интервале от
<CODE>1970</CODE> до <CODE>2069</CODE>, это означает, что, если Вы сохраняете
<CODE>01</CODE> в столбце типа <CODE>year</CODE>, MySQL обрабатывает это как
<CODE>2001</CODE>.
<LI>Все функции даты в MySQL сохранены в одном файле <TT>sql/time.cc</TT> и
кодированы очень тщательно, чтобы быть абсолютно 2000-безопасными.
<LI>В MySQL Version 3.22 и позже новый тип столбца <CODE>YEAR</CODE> может
сохранять годы <CODE>0</CODE> и в интервале от <CODE>1901</CODE> до
<CODE>2155</CODE> в 1 байте, а также отображать их, используя 2 или 4 цифры.
</UL>

<P>Вы можете сталкиваться с проблемами в прикладных программах, которые
используют MySQL, но сами несовместимы с проблемой Y2K. Например, много
старых прикладных программ сохраняют или управляют значениями лет,
используя числа с 2 цифрами (которые являются неоднозначными). Эта проблема
также может быть составлена прикладными программами, которые используют
<CODE>00</CODE> или <CODE>99</CODE> как значения для индикатора "пропустить".
В свое время пришлось столкнуться с программой, которая помечала удаленные
записи, выставляя им год <CODE>00</CODE>...</P>

<P>К сожалению, эти проблемы могут быть трудными в исправлении потому, что
различные прикладные программы могут быть написаны различными программистами,
каждый из которых может использовать различный набор соглашений и
обрабатывающих даты функций.</P>

<P>Имеется простой пример, иллюстрирующий, что MySQL не имеет любых проблем с
датами до года 2030:</P>
<PRE>
mysql&#62; DROP TABLE IF EXISTS y2k;
Query OK, 0 rows affected (0.01 sec)

mysql&#62; CREATE TABLE y2k (date date, date_time datetime,
                             time_stamp timestamp);
Query OK, 0 rows affected (0.00 sec)

mysql&#62; INSERT INTO y2k VALUES
    -&#62; ("1998-12-31","1998-12-31 23:59:59",19981231235959),
    -&#62; ("1999-01-01","1999-01-01 00:00:00",19990101000000),
    -&#62; ("1999-09-09","1999-09-09 23:59:59",19990909235959),
    -&#62; ("2000-01-01","2000-01-01 00:00:00",20000101000000),
    -&#62; ("2000-02-28","2000-02-28 00:00:00",20000228000000),
    -&#62; ("2000-02-29","2000-02-29 00:00:00",20000229000000),
    -&#62; ("2000-03-01","2000-03-01 00:00:00",20000301000000),
    -&#62; ("2000-12-31","2000-12-31 23:59:59",20001231235959),
    -&#62; ("2001-01-01","2001-01-01 00:00:00",20010101000000),
    -&#62; ("2004-12-31","2004-12-31 23:59:59",20041231235959),
    -&#62; ("2005-01-01","2005-01-01 00:00:00",20050101000000),
    -&#62; ("2030-01-01","2030-01-01 00:00:00",20300101000000),
    -&#62; ("2050-01-01","2050-01-01 00:00:00",20500101000000);
Query OK, 13 rows affected (0.01 sec)
Records: 13  Duplicates: 0  Warnings: 0

mysql&#62; SELECT * FROM y2k;
+------------+---------------------+----------------+
| date       | date_time           | time_stamp     |
+------------+---------------------+----------------+
| 1998-12-31 | 1998-12-31 23:59:59 | 19981231235959 |
| 1999-01-01 | 1999-01-01 00:00:00 | 19990101000000 |
| 1999-09-09 | 1999-09-09 23:59:59 | 19990909235959 |
| 2000-01-01 | 2000-01-01 00:00:00 | 20000101000000 |
| 2000-02-28 | 2000-02-28 00:00:00 | 20000228000000 |
| 2000-02-29 | 2000-02-29 00:00:00 | 20000229000000 |
| 2000-03-01 | 2000-03-01 00:00:00 | 20000301000000 |
| 2000-12-31 | 2000-12-31 23:59:59 | 20001231235959 |
| 2001-01-01 | 2001-01-01 00:00:00 | 20010101000000 |
| 2004-12-31 | 2004-12-31 23:59:59 | 20041231235959 |
| 2005-01-01 | 2005-01-01 00:00:00 | 20050101000000 |
| 2030-01-01 | 2030-01-01 00:00:00 | 20300101000000 |
| 2050-01-01 | 2050-01-01 00:00:00 | 00000000000000 |
+------------+---------------------+----------------+
13 rows in set (0.00 sec)
</PRE>

<P>Это показывает, что типы <CODE>DATE</CODE> и <CODE>DATETIME</CODE> не
будут давать никаких проблем с будущими датами (они легко обрабатывают даты
вообще до 9999 года).</P>

<P>Тип <CODE>TIMESTAMP</CODE>, который используется, чтобы сохранить текущее
(актуальное) время, имеет диапазон только до <CODE>2030-01-01</CODE>.
<CODE>TIMESTAMP</CODE> имеет диапазон от <CODE>1970</CODE> до
<CODE>2030</CODE> на 32-разрядных машинах (значение со знаком). На
64-разрядных машинах это обрабатывает времена до <CODE>2106</CODE> года
(значение без знака).</P>

<P>Даже при том, что MySQL Y2K-совместим, Вы отвечаете за то, чтобы
обеспечить однозначный ввод. Подробности в разделе
"<A HREF="glava05.htm#Y2K_issues">5.2.1 Проблема Y2K и типы Date</A>", там
описаны правила MySQL для ввода дат с неоднозначными данными (данные,
содержащие значения года с 2 цифрами).</P>

<H2><A NAME="Compatibility">1.2 MySQL и стандарты</A></H2>
<P>Этот раздел описывает, как MySQL соответствует стандартам ANSI SQL. MySQL
имеет много расширений для них, здесь Вы выясните, что они из себя
представляют, и как использовать их. Вы также найдете информацию относительно
функциональных возможностей, отсутствующих в MySQL, и как обойти проблемы.
</P>

<H3><A NAME="Extensions_to_ANSI">1.2.1 MySQL-расширения для
стандарта ANSI SQL92</A></H3>
<P>MySQL включает некоторые расширения, которые Вы, вероятно, не будете
находить в других базах данных SQL. Предупреждаю, что, если Вы используете
их, Ваш код не будет переносимым на другие SQL-серверы. В некоторых случаях
Вы можете писать код, который включает MySQL-расширения, но все же является
переносимым за счет комментариев формы <CODE>/*! ... */</CODE>. В этом случае
MySQL анализирует и выполнит код внутри комментария, но другие SQL-серверы
игнорируют расширения. Например:</P>
<PRE>
SELECT /*! STRAIGHT_JOIN */ col_name FROM table1,table2 WHERE ...
</PRE>

<P>Если Вы добавляете номер версии после <CODE>'!'</CODE>, синтаксис будет
выполнен только, если версия MySQL равна или больше, чем этот номер версии:
</P>
<PRE>
CREATE /*!32302 TEMPORARY */ TABLE (a int);
</PRE>

<P>Это означает, что, если Вы имеете Version 3.23.02 или более новую, MySQL
использует ключевое слово <CODE>TEMPORARY</CODE>.</P>

<P>MySQL-расширения перечислены ниже:</P>
<UL><LI>Поля типов <CODE>MEDIUMINT</CODE>, <CODE>SET</CODE>,
<CODE>ENUM</CODE> и разные типы <CODE>BLOB</CODE> и <CODE>TEXT</CODE>.

<LI>Атрибуты полей <CODE>AUTO_INCREMENT</CODE>, <CODE>BINARY</CODE>,
<CODE>NULL</CODE>, <CODE>UNSIGNED</CODE> и <CODE>ZEROFILL</CODE>.

<LI>Все сравнения строк нечувствительны к регистру по умолчанию, сортировка
зависит от текущего набора символов (по умолчанию ISO-8859-1 Latin1). Если Вы
не находите это удобным, Вы должны объявить Ваши столбцы с атрибутом
<CODE>BINARY</CODE> или использовать ключевое слово <CODE>BINARY</CODE>,
которое заставляет сравнения быть выполненными согласно порядку ASCII,
используемому на сервере MySQL.

<LI>MySQL отображает каждую базу данных к каталогу под каталогом данных
MySQL, а таблицы внутри базы данных к именам файлов в каталоге баз данных.
Это имеет несколько значений:

<A NAME="IDX129"></A><A NAME="IDX130"></A><A NAME="IDX131"></A>
<A NAME="IDX132"></A><UL><LI>Имена баз данных и таблиц в MySQL чувствительны
к регистру на операционных системах, которые имеют чувствительные к регистру
имена файлов (подобно большинству Unix-систем).

<LI>Имена баз данных, таблиц, индексов, столбцов или псевдонимы могут
начинаться с цифр (но не могут состоять исключительно из цифр).

<LI>Вы можете использовать стандартные команды системы, чтобы резервировать,
переименовывать, перемещать, удалять или копировать таблицы. Например, чтобы
переименовать таблицу, переименуйте файлы <TT>.MYD</TT>, <TT>.MYI</TT> и
<TT>.frm</TT>, которым таблица соответствует.</UL>

<LI>В инструкциях SQL Вы можете обращаться к таблицам из различных баз
данных с помощью синтаксиса <CODE>db_name.tbl_name</CODE>. Некоторые
SQL-серверы обеспечивают те же самые функциональные возможности, но называют
это <CODE>User space</CODE>. MySQL не поддерживает пространство таблиц как
in: <CODE>create table ralph.my_table...IN my_tablespace</CODE>.
<LI><CODE>LIKE</CODE> позволяется на числовых столбцах.
<LI>Использование <CODE>INTO OUTFILE</CODE> и <CODE>STRAIGHT_JOIN</CODE>
допустимо в инструкции <CODE>SELECT</CODE>.
<LI>Опция <CODE>SQL_SMALL_RESULT</CODE> в инструкции <CODE>SELECT</CODE>.
<LI>Есть инструкция <CODE>EXPLAIN SELECT</CODE>, чтобы получить описание
того, как таблицы соединены.
<LI>Использование индексных имен на префиксе поля и параметров
<CODE>INDEX</CODE> или <CODE>KEY</CODE> в инструкции
<CODE>CREATE TABLE</CODE>.
<LI>Применение <CODE>TEMPORARY</CODE> или <CODE>IF NOT EXISTS</CODE> с
<CODE>CREATE TABLE</CODE>.
<LI>Применение <CODE>COUNT(DISTINCT list)</CODE>, где 'list' включает больше,
чем один элемент.
<LI>Применение <CODE>CHANGE col_name</CODE>, <CODE>DROP col_name</CODE> или
<CODE>DROP INDEX</CODE>, <CODE>IGNORE</CODE> или <CODE>RENAME</CODE> в вызове
команды <CODE>ALTER TABLE</CODE>.
<LI>Применение <CODE>RENAME TABLE</CODE>.
<LI>Использование нескольких инструкций <CODE>ADD</CODE>, <CODE>ALTER</CODE>,
<CODE>DROP</CODE> или <CODE>CHANGE</CODE> в одном
вызове <CODE>ALTER TABLE</CODE>.
<LI>Использование <CODE>DROP TABLE</CODE> с ключевым словом <CODE>IF EXISTS
</CODE>.
<LI>Вы можете удалять много таблиц одиночной инструкцией <CODE>DROP
TABLE</CODE>.
<LI>Предложение <CODE>LIMIT</CODE> в инструкции <CODE>DELETE</CODE>.
<LI>Предложение <CODE>DELAYED</CODE> в инструкциях <CODE>INSERT</CODE> и
<CODE>REPLACE</CODE>.
<LI>Предложение <CODE>LOW_PRIORITY</CODE> в инструкциях <CODE>INSERT</CODE>,
<CODE>REPLACE</CODE>, <CODE>DELETE</CODE> и <CODE>UPDATE</CODE>.
<A NAME="IDX133"></A><A NAME="IDX134"></A><LI>Использование <CODE>LOAD DATA
INFILE</CODE>. Во многих случаях этот синтаксис совместим с Oracle
<CODE>LOAD DATA INFILE</CODE>.
<LI>Инструкции <CODE>ANALYZE TABLE</CODE>, <CODE>CHECK TABLE</CODE>,
<CODE>OPTIMIZE TABLE</CODE> и <CODE>REPAIR TABLE</CODE>.
<LI>Инструкция <CODE>SHOW</CODE>.
<LI>Строки могут быть обозначены с помощью <SAMP>`"'</SAMP> или
<SAMP>`''</SAMP>, а не только <SAMP>`''</SAMP>.
<LI>Использование Escape-символа <SAMP>`\'</SAMP>.
<LI>Инструкция <CODE>SET OPTION</CODE>.
<LI>Вы не должны назвать все выбранные столбцы в <CODE>GROUP BY</CODE>.
Это дает лучшую эффективность для некоторых очень специфических, но
совершенно нормальных запросов.
<LI>Можно определять параметры <CODE>ASC</CODE> и <CODE>DESC</CODE> с вызовом
<CODE>GROUP BY</CODE>. Очень полезно.
<LI>Чтобы сделать проще для пользователей миграцию из других SQL-сред, MySQL
поддерживает псевдонимы для многих функций. Например, все функции строк
поддерживают синтаксисы ANSI SQL и ODBC.
<LI>MySQL понимает операторы <CODE>||</CODE> и <CODE>&#38;&</CODE> в качестве
OR и AND, как в языке программирования C. В MySQL <CODE>||</CODE> и
<CODE>OR</CODE> синонимы, так же как <CODE>&#38;&</CODE> и <CODE>AND</CODE>.
Из-за этого хорошего синтаксиса MySQL не поддерживает оператор ANSI SQL
<CODE>||</CODE> для конкатенации строк, используйте вместо него
<CODE>CONCAT()</CODE>. Поскольку <CODE>CONCAT()</CODE> берет любое число
параметров, просто преобразовать использование <CODE>||</CODE> в MySQL.
<LI><CODE>CREATE DATABASE</CODE> или <CODE>DROP DATABASE</CODE>.
<A NAME="IDX135"></A><A NAME="IDX136"></A><LI>Оператор <CODE>%</CODE>
является синонимом для <CODE>MOD()</CODE>. То есть <CODE>N%M</CODE>
равносильно <CODE>MOD(N,M)</CODE>. <CODE>%</CODE> поддержан для
C-программистов и для совместимости с PostgreSQL.
<LI>Операторы <CODE>=</CODE>, <CODE>&#60;&#62;</CODE>, <CODE>&#60;=</CODE>,
<CODE>&#60;</CODE>, <CODE>&#62;=</CODE>,<CODE>&#62;</CODE>,
<CODE>&#60;&#60;</CODE>, <CODE>&#62;&#62;</CODE>, <CODE>&#60;=&#62;</CODE>,
<CODE>AND</CODE>, <CODE>OR</CODE> или <CODE>LIKE</CODE> могут использоваться
в сравнениях столбца слева от <CODE>FROM</CODE> в инструкции
<CODE>SELECT</CODE>. Например, так:
<PRE>
mysql&#62; SELECT col1=1 AND col2=2 FROM tbl_name;
</PRE>

<LI>Функция <CODE>LAST_INSERT_ID()</CODE>.
<LI>Регулярные выражения с расширениями <CODE>REGEXP</CODE> и
<CODE>NOT REGEXP</CODE> в операторах.
<LI>Вызов функций <CODE>CONCAT()</CODE> или <CODE>CHAR()</CODE> с одним
параметром или больше, чем с двумя параметрами. В MySQL эти функции могут
брать любое число параметров.
<LI>Функции <CODE>BIT_COUNT()</CODE>, <CODE>CASE</CODE>, <CODE>ELT()</CODE>,
<CODE>FROM_DAYS()</CODE>, <CODE>FORMAT()</CODE>, <CODE>IF()</CODE>,
<CODE>PASSWORD()</CODE>, <CODE>ENCRYPT()</CODE>, <CODE>md5()</CODE>,
<CODE>ENCODE()</CODE>, <CODE>DECODE()</CODE>, <CODE>PERIOD_ADD()</CODE>,
<CODE>PERIOD_DIFF()</CODE>, <CODE>TO_DAYS()</CODE> и <CODE>WEEKDAY()</CODE>.
<LI>Использование <CODE>TRIM()</CODE> для подрезания подстрок. ANSI SQL
поддерживает удаление только одиночных символов.
<LI>В <CODE>GROUP BY</CODE> можно использовать <CODE>STD()</CODE>,
<CODE>BIT_OR()</CODE> и <CODE>BIT_AND()</CODE>.
<LI>Применение <CODE>REPLACE</CODE> вместо связки
<CODE>DELETE</CODE>+<CODE>INSERT</CODE>.
<LI>Инструкция <CODE>FLUSH flush_option</CODE>.
<LI>Возможность устанавливать переменные в инструкции через <CODE>:=</CODE>:
<PRE>
SELECT @a:=SUM(total),@b=COUNT(*),@a/@b AS avg FROM test_table;
SELECT @t1:=(@t2:=1)+@t3:=4,@t1,@t2,@t3;
</PRE></UL>

<H3><A NAME="Differences_from_ANSI">1.2.2 Отличия MySQL от ANSI SQL92</A>
</H3>
<P>Авторы пробуют заставить MySQL следовать стандартам ANSI SQL и ODBC SQL,
но в некоторых случаях MySQL обрабатывает некоторые дела по-другому:</P>

<UL><LI><CODE>--</CODE> является комментарием, только если сопровождается
незаполненным пространством. Подробности чуть ниже.

<LI>Для столбцов <CODE>VARCHAR</CODE> конечные пробелы будут удалены, когда
значение сохранено. Подробности в разделе "<A HREF="#Bugs">1.2.7
Известные ошибки и проблемы</A>".

<LI>В ряде случаев столбцы типа <CODE>CHAR</CODE> тихо меняются на столбцы
типа <CODE>VARCHAR</CODE>.

<LI>Привилегии для таблицы автоматически не отменяются, когда Вы удаляете
таблицу. Вы должны явно выдать <CODE>REVOKE</CODE>, чтобы отменить все
привилегии для таблицы.

<LI><CODE>NULL AND FALSE</CODE> вернет <CODE>NULL</CODE> вместо
<CODE>FALSE</CODE>, чтобы не возиться долго с оценкой выражений.</UL>

<H3><A NAME="ANSI_mode">1.2.3 Запуск MySQL в режиме ANSI</A></H3>
<P>Если Вы запустили <CODE>mysqld</CODE> с опцией <CODE>--ansi</CODE>,
поведение MySQL изменится следующим образом:</P>

<UL><LI><CODE>||</CODE> является конкатенацией строк, а не <CODE>OR</CODE>.
<LI>Вы можете иметь любое число пробелов между именем функции и
<SAMP>`('</SAMP>. Это вынуждает все имена функций обрабатываться
как зарезервированные слова.
<LI><SAMP>`"'</SAMP> будет цитировать идентификаторы (аналогично MySQL
<SAMP>``'</SAMP>), но не строки.
<LI><CODE>REAL</CODE> превратится в синоним для <CODE>FLOAT</CODE> вместо
синонима для <CODE>DOUBLE</CODE>.
<LI>Заданный по умолчанию уровень изоляции транзакции:
<CODE>SERIALIZABLE</CODE>. Подробности в разделе
"<A HREF="glava09.htm#SET_TRANSACTION">9.2.3 Синтаксис
<CODE>SET TRANSACTION</CODE></A>".</UL>

<P>Этого также можно достичь опцией <CODE>--sql-mode=REAL_AS_FLOAT,
PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,SERIALIZE,ONLY_FULL_GROUP_BY</CODE>.
</P>

<H3><A NAME="Missing_functions">1.2.4
Функциональные возможности, отсутствующие в MySQL</A></H3>
<P>Следующие функциональные возможности отсутствуют в текущей версии MySQL.
Есть список, указывающий, когда новые расширения могут быть добавлены к
MySQL (с их приоритетами), его можно посмотреть в Интернете по адресу
<a HREF="../../../www.mysql.com/documentation/manual.php@section=TODO">
http://www.mysql.com/documentation/manual.php?section=TODO</a>.</P>

<H4><A NAME="Missing_Sub-selects">1.2.4.1
Вложенные операторы select (sub-selects)</A></H4>
<P>MySQL в настоящее время поддерживает sub-selects только в виде
<CODE>INSERT ... SELECT ...</CODE> и <CODE>REPLACE ... SELECT ...</CODE>.
Вы можете, однако, использовать функцию <CODE>IN()</CODE> в других контекстах.
</P>

<P>Во многих случаях Вы можете переписать запрос без sub-select:</P>
<PRE>
SELECT * FROM table1 WHERE id IN (SELECT id FROM table2);
</PRE>

<P>Это может быть переделано так:</P>
<PRE>
SELECT table1.* FROM table1,table2 WHERE table1.id=table2.id;
</PRE>

<P>Запросы:
<PRE>
SELECT * FROM table1 WHERE id NOT IN (SELECT id FROM table2);
SELECT * FROM table1 WHERE NOT EXISTS (SELECT id FROM table2
                     where table1.id=table2.id);
</PRE>

<P>Могут быть переделаны так:</P>
<PRE>
SELECT table1.* FROM table1 LEFT JOIN table2 ON table1.id=table2.id
                where table2.id IS NULL
</PRE>

<P>Для более сложных подзапросов Вы можете часто создавать временные таблицы,
чтобы сохранить подзапрос. В некоторых случаях эта опция не будет работать.
Наиболее часто это происходит с инструкциями <CODE>DELETE</CODE>, для которых
стандарт SQL не поддерживает объединения (за исключением sub-selects). Для
этой ситуации имеются два решения, доступные пока подзапросы не поддержаны.
</P>

<P>Первое должно использовать процедурный язык программирования (типа Perl
или PHP) чтобы представить на рассмотрение такой запрос <CODE>SELECT</CODE>,
чтобы получить первичные ключи для записей, которые будут удалены, и затем
использовать эти значения, чтобы создать инструкцию <CODE>DELETE</CODE>
(<CODE>DELETE FROM ... WHERE ... IN (key1, key2, ...)</CODE>).</P>

<P>Второе решение должно использовать интерактивный SQL для автопостроения
набора инструкций <CODE>DELETE</CODE> при использовании MySQL-расширения
<CODE>CONCAT()</CODE> (вместо стандартного оператора <CODE>||</CODE>):</P>
<PRE>
SELECT CONCAT('DELETE FROM tab1 WHERE pkid = ', tab1.pkid, ';')
       FROM tab1, tab2
       WHERE tab1.col1 = tab2.col2;
</PRE>

<P>Вы можете помещать этот запрос в файл скрипта и переназначать ввод на
интерпретатор командных строк <CODE>mysql</CODE>, отправив вывод на его
вторую копию клиента:</P>
<PRE>
prompt&#62; mysql --skip-column-names mydb &#60; myscript.sql|mysql mydb
</PRE>

<P>MySQL 4.0 поддерживает многотабличное удаление, которое может
использоваться, чтобы эффективно удалить строки, основанные на информации из
одной таблицы (или даже из многих таблиц) в то же самое время.</P>

<H4><A NAME="Missing_SELECT_INTO_TABLE">1.2.4.2
<CODE>SELECT INTO TABLE</CODE></A></H4>
<P>MySQL не поддерживает Oracle SQL-расширение <CODE>SELECT ... INTO
TABLE ...</CODE>. MySQL вместо него поддерживает синтаксис ANSI SQL
<CODE>INSERT INTO ... SELECT ...</CODE>, который является в основном той же
самой функциональностью. Подробности в разделе
"<A HREF="glava08.htm#INSERT_SELECT">8.3.1 Синтаксис <CODE>INSERT ... SELECT
</CODE></A>".</P>
<PRE>
INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID
       FROM tblTemp1
       WHERE tblTemp1.fldOrder_ID &#62; 100;
</PRE>

<P>Альтернативно, Вы можете использовать <CODE>SELECT INTO OUTFILE...</CODE>
или <CODE>CREATE TABLE ... SELECT</CODE>, чтобы решить Вашу проблему.</P>

<H4><A NAME="Missing_Transactions">1.2.4.3 Транзации</A></H4>
<P>Поскольку MySQL в настоящее время поддерживает транзакции, следующее
обсуждение имеет силу, только если Вы используете не транзакционно-безопасные
типы таблицы. Подробности в разделе "<A HREF="glava09.htm#COMMIT">9.2.1
Синтаксис <CODE>BEGIN/COMMIT/ROLLBACK</CODE></A>".</P>

<P>Часто спрашивают, почему MySQL не транзационная база данных?</P>

<P>MySQL сделал сознательное решение поддерживать другую парадигму для
целостности данных: атомные операции. Дело в том, что атомные операции
предлагают равную или даже лучшую целостность с намного лучшей
эффективностью. Однако, авторы пакета тем не менее оценивают и понимают
транзакционную парадигму базы данных и планируют в следующих версиях
представить транзакционно-безопасные таблицы. Пользователям будет
предоставлена возможность решить, нуждаются ли они в быстродействии атомных
операций, или они должны использовать свойства транзакций в своих программах.
</P>

<P>Давайте разберемся в том, как MySQL поддержает строгую целостность, и
сравним эти свойства с транзакциями.</P>

<P>Перво-наперво в транзакционной системе, если Ваши программы в критических
ситуациях вызывают rollback вместо commit, транзакционная схема удобней.
Кроме того, транзакции гарантируют, что незаконченные модификации или
разрушительные действия не будут применены к базе данных немедленно, сервер
дает возможность сделать автоматическую обратную перемотку, и Ваша база
данных будет сохранена.</P>

<P>MySQL почти во всех случаях позволяет Вам обойти проблемы включением
простых проверок перед модификациями и запуском простых скриптов, которые
проверяют целостность базы данных, а также автоматически проводят ремонт.
Обратите внимание, что только используя файл регистрации MySQL или даже
добавляя один дополнительный файл регистрации, обычно можно востанавливать
таблицы без потери целостности данных.</P>

<P>Кроме того, фатальные модификации в транзакционной схеме могут быть
переделаны так, чтобы стать атомными. Фактически все проблемы целостности,
которые решают транзакции, могут быть выполнены с помощью <CODE>LOCK
TABLES</CODE> или атомными модификациями, гарантируя, что Вы никогда не
получите автоматическое аварийное прекращение работы базы данных, что
является общей проблемой для транзакционных баз данных.</P>

<P>Далеко не все транзакции могут предотвращать потерю данных, если сервер
рушится. В таких случаях даже транзакционная система может терять данные.
Никакая система не 100%-но безопасна, речь идет лишь о минимизации потерь.
Даже Oracle, как сообщают, иногда теряет данные в таких ситуациях, хоть и
считается самой безопасной из транзакционных баз данных.</P>

<P>Чтобы обеспечить безопасность в MySQL, Вы должны только иметь копии и
регистрацию модификаций. С этим Вы можете восстановить фактически любое
повреждение базы данных.</P>

<P>Транзакционная парадигма имеет выгоды и недостатки. Много пользователей и
разработчиков прикладных программ зависят от легкости, с которой они могут
обойти проблемы, где аварийное прекращение работы появляется или необходимо,
и им, вероятно, придется делать немного больше работы с MySQL, чтобы думать
по-другому или писать больше. Если Вы плохо знакомы с атомной парадигмой
операций или более знакомы с транзакциями, не считайте, что MySQL не знаком с
этими проблемами. Надежность и целостность у авторов этого пакета стоят на
первом месте! Недавние оценки указывают, что имеется больше, чем 1000000
серверов <CODE>mysqld</CODE>, многие из которых находятся в промышленных
средах. Очень редко можно услышать от пользователей, что они потеряли данные,
и почти во всех случаях виноваты были сами пользователи. Это самое лучшее
доказательство стабильности и надежности MySQL.</P>

<P>Наконец, в ситуациях, где целостность имеет самую высокую важность,
текущие свойства MySQL учитывают уровень транзакции или лучшую надежность и
целостность. Если Вы блокируете таблицы с помощью <CODE>LOCK TABLES</CODE>,
все модификации остановятся, пока любые проверки целостности не будут
сделаны. Если Вы только получаете блокировку чтения (в противоположность
блокировке записи), то чтение и вставки продолжают работать. Новые
вставленные записи не будут замечены клиентами, имеющими блокировку
<CODE>READ</CODE>, пока они не освободят их блокировки чтения. С помощью
<CODE>INSERT DELAYED</CODE> Вы можете поместить вставки в локальную очередь,
где они останутся до тех пор, пока блокировки не будут освобождены. Таким
образом, сервер не будет иметь пользователя, который ждет завершения вставки.
Подробности в разделе "<A HREF="glava08.htm#INSERT_DELAYED">8.4 Синтаксис
<CODE>INSERT DELAYED</CODE></A>".</P>

<P>"Атомная" означает, что Вы можете убедиться в том, что в то время как
каждая специфическая модификация выполняется, никакой другой пользователь не
может сталкиваться с ней, и никакой автоматической обратной перемотки не
будет никогда (хотя это может случаться на транзакционных системах, если Вы
не очень осторожны). MySQL также гарантирует, что не будет иметься лишних
чтений. Вы можете найти пример того, как писать атомные модификации в разделе
"<A HREF="#Commit-rollback">1.2.6 Как справиться без
<CODE>COMMIT</CODE>/<CODE>ROLLBACK</CODE></A>".</P>

<P>Использование атомной парадигмы позволяет применять много оптимизаций
быстродействия, которые иначе не будут возможны. К тому же, при грамотном
подходе такая схема ускорит работу в 3-5 раз по сравнению с лучшими
транзакционными базами данных при той же надежности.</P>

<P>Для тех случаев, где безопасность более важна, чем быстродействие, я
советую применять транзакционные таблицы типов <CODE>BDB</CODE> или
<CODE>InnoDB</CODE> для всех критических данных.

<P>Одно заключительное примечание: в настоящее время авторы пакета работают
над безопасной схемой репликации, которая должна быть лучше, чем любая
известная на сегодняшний день поддержка репликации. Эта система будет
работать наиболее надежно при атомных операциях, а не транзакциях.</P>

<H4><A NAME="Missing_Triggers">1.2.4.4 Хранимые процедуры и триггеры</A></H4>
<P>Хранимая процедура представляет собой набор команд SQL, который может
компилироваться и храниться на сервере. Как только это было выполнено, клиент
не должен хранить весь запрос, а может обратиться к сохраненной процедуре.
Это обеспечивает лучшую эффективность потому, что запрос должен
анализироваться только однажды, и меньшее количество информации должно быть
послано между клиентом и сервером. Вы можете также поднимать концептуальный
уровень при наличии библиотек функций.</P>

<P>Триггер представляет собой сохраненную процедуру, которая вызывается,
когда специфическое событие происходит. Например, Вы можете устанавливать
сохраненную процедуру, которая будет вызвана каждый раз, когда запись удалена
из таблицы transaction. Эта процедура автоматически удаляет соответствующего
заказчика из таблицы customer, когда все его транзакции удалены.</P>

<P>Запланированный язык модификаций будет способен обработать сохраненные
процедуры, но без триггеров. Триггеры обычно замедляют все, даже запросы, к
которым не имеют отношения.</P>

<H4><A NAME="Missing_Foreign_Keys">1.2.4.5 Внешние ключи</A></H4>
<P>Обратите внимание, что внешние ключи в SQL не используются, чтобы
соединить таблицы, но используются обычно для проверки справочной
целостности. Если Вы хотите получить результат из нескольких таблиц командой
<CODE>SELECT</CODE>, Вы делаете это, соединяя таблицы так:</P>
<PRE>
SELECT * from table1,table2 where table1.id = table2.id;
</PRE>

<P>Подробности есть в разделах
"<A HREF="glava08.htm#JOIN">8.1.1 Синтаксис <CODE>JOIN</CODE></A>" и
"<A HREF="glava02.htm#example-Foreign_keys">2.5.6
Использование внешних ключей</A>".</P>

<P>Синтаксис <CODE>FOREIGN KEY</CODE> в MySQL существует только для
совместимости с другими версиями SQL-команды <CODE>CREATE TABLE</CODE>, это
не делает ничего. Синтаксис <CODE>FOREIGN KEY</CODE> без <CODE>ON DELETE ...
</CODE> обычно используется для документационных целей. Некоторые прикладные
программы стандарта ODBC могут использовать это, чтобы произвести
автоматические предложения <CODE>WHERE</CODE>, но это обычно просто, чтобы
перекрыть. <CODE>FOREIGN KEY</CODE> иногда используется как проверка
ограничения, но эта проверка практически не нужна, если строки вставлены в
таблицы в правильном порядке. MySQL поддерживает эти предложения только
потому, что некоторые прикладные программы требуют, чтобы они существовали
(независимо от того, работают они или нет).</P>

<P>В MySQL Вы можете обойти проблему неработающей конструкции
<CODE>ON DELETE ...</CODE> добавляя соответствующую инструкцию
<CODE>DELETE</CODE> к прикладной программе, когда Вы удаляете записи из
таблицы, которая имеет внешний ключ. Практически это иногда быстрее и намного
более переносимо, чем использование внешних ключей в таблице.</P>

<P>В ближайшем будущем мы расширим реализацию <CODE>FOREIGN KEY</CODE> так,
чтобы по крайней мере информация была сохранена в файле спецификации таблицы
и могла быть получена <CODE>mysqldump</CODE> и ODBC. На более поздней стадии
мы выполним ограничения внешних ключей для прикладной программы, которая не
может легко быть перекодирована, чтобы избежать их.</P>

<H4><A NAME="Broken_Foreign_KEY">1.2.4.6 Почему не реализована
поддержка для Foreign Keys</A></H4>
<P>Много ученых по теории базы данных и программистов чувствуют, что
справочная целостность должна быть предписана внутри сервера базы данных.
Действительно, во многих случаях этот подход очень полезен. Однако, в
разговоре со многими пользователями баз данных авторы наблюдали, что внешние
ключи часто неправильно используются, что может вызывать серьезные проблемы.
Даже когда все используется правильно, это не волшебное решение для проблемы
справочной целостности, хотя это делает все проще в некоторых случаях.</P>

<P>Из-за вышеупомянутых наблюдений авторы не назначали реализации внешних
ключей высокий приоритет. Однако, в последние годы ядро пользователей
расширилось, и теперь авторы пакета имеют много пользователей, кто хотел бы
иметь предписанную поддержку справочной целостности внутри MySQL. Так что в
ближайшем будущем внешние ключи все-таки будут реализованы.</P>

<P>Некоторые преимущества применения внешних ключей:</P>
<UL><LI>При принятии соответствующего проекта отношений, ограничения внешних
ключей сделают более трудным для программиста и пользователя создание
несогласованности в базе данных.
<LI>Использование каскадируемых модификаций и удалений может упростить код
программ пользовательского уровня.
<LI>Правильно разработанный внешний ключ управляет помощью в документации
отношений между таблицами.</UL>

<P>Противопоказания:</P>
<UL><LI>MySQL еще не поддерживает предписанную справочную целостность, так
что если Ваша прикладная программа зависит от этого, Вы не сможете применить
MySQL до реализации этого свойства.
<LI>Ошибки, которые являются простыми в проектировании отношений ключей,
могут вызывать серьезные проблемы, например, круговые правила или
неправильная комбинация каскадирования удалений.
<LI>Правильно написанная прикладная программа сама удостоверится, что не
нарушает ограничения целостности прежде, чем начнет обработку запроса. Таким
образом, добавочные проверки на уровне базы данных только замедлят
эффективность для такой прикладной программы.</UL>

<H4><A NAME="Missing_Views">1.2.4.7 Views</A></H4>
<P>MySQL не поддерживает views, но это планируется исправить примерно к 4.1.
</P>

<P>Views обычно полезны для разрешения пользователям обращаться к набору
отношений как к одной таблице (в режиме только для чтения). Многие базы
данных SQL не позволяют модифицировать любые строки в таком представлении:
Вы должны делать все модификации в отдельных таблицах.</P>

<P>MySQL обычно используется в прикладных программах и на web-системах, где
автор прикладной программы имеет полное управление над применением базы
данных. По этой причине views не сочтены очень важными.</P>

<P>Чтобы ограничить доступ к столбцам в MySQL views тоже не требуются: MySQL
имеет очень сложную систему предоставления привилегий. Подробности в разделе
"<A HREF="glava10.htm#Privilege_system">10 Общие проблемы защиты и система
привилегий доступа MySQL</A>".</P>

<H4><A NAME="Missing_comments">1.2.4.8 <SAMP>`--'</SAMP>
как начало комментария</A></H4>
<P>Некоторые базы данных SQL применяют <SAMP>--</SAMP> как начало
комментария. MySQL имеет <SAMP>#</SAMP> как символ начала комментария, даже
если инструмент командной строки <CODE>mysql</CODE> удаляет все строки,
начинающиеся с <SAMP>--</SAMP>. Вы можете также использовать стиль
комментариев языка C (<CODE>/* это комментарий */</CODE>) в MySQL.</P>

<P>MySQL Version 3.23.3 и выше поддерживает стиль комментариев
<SAMP>--</SAMP>, только если комментарий сопровождается пробелом. Это потому,
что стиль комментария вызвал много проблем с автоматически сгенерированными
запросами SQL, которые использовали нечто вроде следующего кода, где мы
автоматически вставляем значение payment вместо <CODE>!payment!</CODE>:</P>
<PRE>
UPDATE tbl_name SET credit=credit-!payment!
</PRE>

<P>Как Вы думаете, что случится, когда значение <CODE>payment</CODE>
отрицательное? А вот что. Поскольку <CODE>1--1</CODE> допустимо в SQL, пакет
думает, что начался комментарий типа <SAMP>--</SAMP>. Вряд ли это
входит в Ваши планы...</P>

<P>В MySQL Version 3.23 Вы можете использовать:
<CODE>1-- Это был комментарий</CODE></P>

<P>Следующее обсуждение касается Вас, только если Вы управляете MySQL
Version 3.23 или ранее:</P>

<P>Если Вы имеете программу SQL в текстовом файле, который содержит
комментарии <SAMP>--</SAMP>, Вы должны использовать:</P>
<PRE>
shell&#62; replace " --" " #" &#60; text-file-with-funny-comments.sql \
                   | mysql database
</PRE>

<P>Вместо обычного решения:</P>
<PRE>
shell&#62; mysql database &#60; text-file-with-funny-comments.sql
</PRE>

<P>Вы можете также редактировать командный файл, чтобы сменить комментарии
<SAMP>--</SAMP> на <SAMP>#</SAMP>:</P>
<PRE>
shell&#62; replace " --" " #" -- text-file-with-funny-comments.sql
</PRE>

<P>Замените их обратно этой командой:</P>
<PRE>
shell&#62; replace " #" " --" -- text-file-with-funny-comments.sql
</PRE>

<H3><A NAME="Standards">1.2.5 Каким стандартам соответствует MySQL?</A></H3>
<P>Entry level SQL92. ODBC levels 0-2.</P>

<H3><A NAME="Commit-rollback">1.2.6
Как обойтись без <CODE>COMMIT</CODE>/<CODE>ROLLBACK</CODE></A></H3>
<P>Следующее обычно применяется только для таблиц <CODE>ISAM</CODE>,
<CODE>MyISAM</CODE> и <CODE>HEAP</CODE>. Если Вы используете только
транзакционно-безопасные таблицы (<CODE>BDB</CODE> или <CODE>InnoDB</CODE>) в
модификации, Вы можете также делать <CODE>COMMIT</CODE> и
<CODE>ROLLBACK</CODE> в MySQL. Подробности в разделе
"<A HREF="glava09.htm#COMMIT">9.2.1 Синтаксис
<CODE>BEGIN/COMMIT/ROLLBACK</CODE></A>".</P>

<P>Проблема с эффективной обработкой
<CODE>COMMIT</CODE>-<CODE>ROLLBACK</CODE> с вышеупомянутыми типами таблиц
требует полностью иного размещения таблицы, чем используемое MySQL сегодня.
Тип таблицы также нуждался бы в дополнительных потоках, которые вели бы
автоматические очистки на таблицах, да и использование дисков было бы намного
выше. Это сделало бы эти типы таблицы приблизительно в 2-4 медленнее, чем
они есть сейчас.</P>

<P>Текущей проблемой является <CODE>ROLLBACK</CODE>. Без
<CODE>ROLLBACK</CODE> Вы можете делать любой вид <CODE>COMMIT</CODE> с
помощью <CODE>LOCK TABLES</CODE>. Для поддержки <CODE>ROLLBACK</CODE> с
вышеупомянутыми типами таблицы MySQL должен быть изменен так, чтобы сохранять
все старые записи, которые модифицировались, и иметь возможность быстро
вернуться к отправной точке, если была выдана команда <CODE>ROLLBACK</CODE>.
Для простых случаев это довольно просто (можно приспособить сюда
<CODE>isamlog</CODE>), но будет намного трудней выполнить
<CODE>ROLLBACK</CODE> для <CODE>ALTER/DROP/CREATE TABLE</CODE>.</P>

<P>Чтобы избежать использования <CODE>ROLLBACK</CODE>, Вы можете использовать
следующую стратегию действий:</P>
<OL><LI>Примените <CODE>LOCK TABLES ...</CODE>, чтобы блокировать все
таблицы, к которым Вы хотите обращаться.
<LI>Проверьте все условия.
<LI>Модифицируйте, если все в порядке.
<LI>Вызовите команду <CODE>UNLOCK TABLES</CODE>, чтобы снять блокировки.</OL>

<P>Это обычно намного более быстрый метод, чем использование транзакций с
возможностью <CODE>ROLLBACK</CODE>, хотя и не всегда. Единственная ситуация,
которую это решение не обрабатывает, состоит в том, что кто-то уничтожает
поток в середине модификации. В этом случае все блокировки будут сняты, но
некоторые из модификаций, возможно, не будут выполнены.</P>

<P>Вы можете также использовать функции, чтобы модифицировать записи в
одиночной операции. Вы можете получать очень эффективную прикладную
программу, применяя следующие методы:</P>
<UL><LI>Измените поля относительно их текущего значения.
<LI>Модифицируйте только те поля, которые фактически изменились.</UL>

<P>Например, когда мы делаем модификации некоторой информации заказчика, мы
модифицируем только данные заказчика, которые изменились, и проверяем, что ни
один из измененных данных или других данных, которые зависят от измененных
данных, не изменился по сравнению с первоначальной строкой. Тест для
измененных данных выполнен с предложением <CODE>WHERE</CODE> в инструкции
<CODE>UPDATE</CODE>. Если запись не модифицировалась, мы даем пользователю
сообщение о том, что некоторые из данных, которые Вы изменили, были изменены
другим пользователем. Затем мы показываем старую строку против новой строки в
окне, так что пользователь может решать, которую версию записи заказчика он
должен будет использовать.</P>

<P>Это дает нам нечто, что является подобным блокировке столбца, но
фактически это даже лучше потому, что мы модифицируем только некоторые из
столбцов, используя значения, которые вычислены относительно их текущих
значений. Это означает, что типичные инструкции <CODE>UPDATE</CODE> выглядят
примерно таким образом:</P>
<PRE>
UPDATE tablename SET pay_back=pay_back+'relative change';
UPDATE customer SET customer_date='current_date',
                    address='new address', phone='new phone',
                    money_he_owes_us=money_he_owes_us+'new_money'
       WHERE customer_id=id AND address='old address' AND phone='old phone';
</PRE>

<P>Как Вы можете видеть, это очень эффективно и работает, даже если другой
пользователь изменил значения столбцов <CODE>pay_back</CODE> или
<CODE>money_he_owes_us</CODE>.</P>

<P><A NAME="IDX160"></A><A NAME="IDX161"></A>Во многих случаях пользователи
хотели использовать <CODE>ROLLBACK</CODE> и/или <CODE>LOCK TABLES</CODE> с
целью управления уникальными идентификаторами для некоторых таблиц. Это может
быть обработано намного более эффективно, используя столбец
<CODE>AUTO_INCREMENT</CODE> и функцию SQL <CODE>LAST_INSERT_ID()</CODE> или
функцию C API <CODE>mysql_insert_id()</CODE>.</P>

<P><A NAME="IDX162"></A>В MySQL AB авторы пакета никогда не имели никакой
потребности в блокировке уровня строки потому, что всегда могли ее обойти.
Некоторые случаи и в самом деле нуждаются в блокировке строки, но они очень
немногочисленны. Если Вы хотите иметь блокировку уровня строки, Вы можете
использовать столбец флажка в таблице и делать нечто вроде:</P>
<PRE>
UPDATE tbl_name SET row_flag=1 WHERE id=ID;
</PRE>

<P>MySQL вернет для числа обработанных строк, если строка была найдена, и
<CODE>row_flag</CODE> не был 1 в первоначальной строке.</P>

<H3><A NAME="Bugs">1.2.7 Известные ошибки и проблемы</A></H3>
<P>Перечисленные ниже проблемы известны авторам пакета, и их устранение имеет
очень высокий приоритет.</P>

<UL><LI><CODE>ANALYZE TABLE</CODE> на таблицах BDB может в некоторых случаях
делать таблицу непригодной, пока Вы не перезапустите <CODE>mysqld</CODE>.
Когда это выполнено, Вы будете видеть ошибки подобные следующим в файле
регистрации ошибок MySQL:
<PRE>
001207 22:07:56 bdb: log_flush: LSN past current end-of-log
</PRE>

<LI>Не выполняйте <CODE>ALTER TABLE</CODE> на таблице <CODE>BDB</CODE>, на
которой Вы управляете незавершенными многооператорными транзакциями.
Транзакция будет, вероятно, игнорироваться.
<LI><CODE>ANALYZE TABLE</CODE>, <CODE>OPTIMIZE TABLE</CODE> и <CODE>REPAIR
TABLE</CODE> могут вызывать проблемы на таблицах, для которых Вы используете
вызов <CODE>INSERT DELAYED</CODE>.
<LI>Выполнение <CODE>LOCK TABLE ...</CODE> и <CODE>FLUSH TABLES ...</CODE>
еще не гарантирует, что не имеется наполовину выполненной транзакции.
<LI>Таблицы BDB не спешат открываться. Если Вы имеете много BDB-таблиц в
базе данных, потребуется длительное время, чтобы использовать клиент
<CODE>mysql</CODE> на этой базе данных, если Вы не используете опцию
<CODE>-A</CODE> или применяете <CODE>rehash</CODE>. Это особенно важно, когда
Вы имеете большой кэш таблицы.
<LI>Текущий протокол репликации не может иметь дело с <CODE>LOAD DATA
INFILE</CODE> и выравнивать символы признака конца строки, которые сами
занимают больше, чем 1 символ.</UL>

<P>Следующие проблемы известны и будут устранены в назначенное время:</P>
<UL><LI><CODE>MATCH</CODE> работает только с инструкциями
<CODE>SELECT</CODE>.
<LI>При использовании <CODE>SET CHARACTER SET</CODE> не могут быть применены
транслируемые символы в базе данных, таблице и столбцах.
<LI><CODE>DELETE FROM merge_table</CODE>, используемый без
<CODE>WHERE</CODE>, только очистит отображение для таблицы, не удаляя ничего
в самих отображенных таблицах.
<LI>Вы не можете формировать пакет в другом каталоге при использовании
MIT-pthreads, поскольку это требует правки кода MIT-pthreads, мы вряд ли это
свойство будем исправлять.
<LI>Значения <CODE>BLOB</CODE> не могут надежно использоваться в <CODE>GROUP
BY</CODE>, <CODE>ORDER BY</CODE> или <CODE>DISTINCT</CODE>. Только первые
<CODE>max_sort_length</CODE> байт (по умолчанию 1024) используются при
сравнении <CODE>BLOB</CODE> в этих случаях. Это может быть изменено с помощью
опции <CODE>-O max_sort_length</CODE> при запуске <CODE>mysqld</CODE>. Обход
для большинства случаев должен использовать подстроку: <CODE>SELECT DISTINCT
LEFT(blob,2048) FROM tbl_name</CODE>.
<LI>Вычисление выполнено с <CODE>BIGINT</CODE> или <CODE>DOUBLE</CODE>
(оба обычно длиной в 64 бита). Это зависит от функции, которую обрабатывает
пакет. Общее правило: битовые функции выполнены с точностью
<CODE>BIGINT</CODE>, <CODE>IF</CODE> и <CODE>ELT()</CODE> с
<CODE>BIGINT</CODE> или <CODE>DOUBLE</CODE>, а все прочие с
<CODE>DOUBLE</CODE>. Нужно пробовать избегать использовать большие длинные
значения без знака (9223372036854775807)!
<LI>Все строковые столбцы, кроме <CODE>BLOB</CODE> и <CODE>TEXT</CODE>,
автоматически удаляют все конечные пробелы, когда сохраняются. Для типа
<CODE>CHAR</CODE> это разрешено и может быть расценено как свойство согласно
ANSI SQL92. Ошибка в том, что в MySQL столбцы <CODE>VARCHAR</CODE>
обрабатываются тем же самым путем.
<LI>Вы можете иметь только до 255 столбцов типа <CODE>ENUM</CODE> и
<CODE>SET</CODE> для каждой таблицы.
<LI><CODE>safe_mysqld</CODE> переназначает все сообщения <CODE>mysqld</CODE>
в файл регистрации <CODE>mysqld</CODE>. Одна проблема с этим состоит в том,
что, если Вы выполняете <CODE>mysqladmin refresh</CODE>, чтобы закрыть и
вновь открыть файл регистрации, <CODE>stdout</CODE> и <CODE>stderr</CODE>
все еще переназначаются к старому файлу регистрации. Если Вы используете
опцию <CODE>--log</CODE>, Вы должны редактировать <CODE>safe_mysqld</CODE>,
чтобы регистрировать данные в файле <TT>'hostname'.err</TT> вместо
<TT>'hostname'.log</TT>, чтобы у Вас не было крупных проблем с запуском и
работой с <CODE>mysqladmin refresh</CODE>.
<LI>В инструкции <CODE>UPDATE</CODE> столбцы модифицируются слева направо.
Если Вы обращаетесь к модифицируемому столбцу, Вы получите модифицируемое
значение вместо первоначального значения. Например:
<PRE>
mysql&#62; UPDATE tbl_name SET KEY=KEY+1,KEY=KEY+1;
</PRE>
Это модифицирует <CODE>KEY</CODE> с <CODE>2</CODE> вместо <CODE>1</CODE>.

<LI>Вы не можете использовать временные таблицы больше, чем однажды в том же
самом запросе. Например, следующее не будет работать:
<PRE>
select * from temporary_table, temporary_table as t2;
</PRE>

<LI><CODE>RENAME</CODE> не работает с таблицами <CODE>TEMPORARY</CODE>.
<LI>Оптимизатор может обрабатывать <CODE>DISTINCT</CODE> по-разному, если Вы
используете скрытые столбцы в объединении или нет. В объединении скрытые
столбцы рассчитаны как часть результата (даже если они не показаны) в то
время, как в нормальном запросе они не участвуют в сравнении
<CODE>DISTINCT</CODE>. Мы, вероятно, изменим это в будущем, чтобы никогда не
сравнить скрытые столбцы при выполнении <CODE>DISTINCT</CODE>. Например:
<PRE>
SELECT DISTINCT mp3id FROM band_downloads WHERE userid=9 ORDER BY id DESC;
</PRE>
и
<PRE>
SELECT DISTINCT band_downloads.mp3id, FROM band_downloads,band_mp3
       WHERE band_downloads.userid=9 AND band_mp3.id=band_downloads.mp3id
       ORDER BY band_downloads.id DESC;
</PRE>

Во втором случае Вы можете в MySQL 3.23.x получить две идентичных строки в
наборе результатов (потому, что скрытый столбец 'id' может
отличаться). Обратите внимание, что это случается только для запросов, где Вы
не имеете ORDER BY в результате, что вообще-то неправильно с точки зрения
стандарта ANSI SQL.

<LI>Поскольку MySQL позволяет Вам работать с типами таблиц, которые не
поддерживают транзакции (и таким образом не могут выполнить
<CODE>rollback</CODE>), некоторые вещи ведут себя немного иначе, чем в других
серверах SQL. Это только должно гарантировать, что MySQL никогда не должен
делать обратную перемотку для команд SQL. Это может быть иногда немного
неуклюже, поскольку значения столбца должны проверяться прикладной
программой, но это фактически даст Вам хорошее увеличение быстродействия,
поскольку это позволяет MySQL делать некоторые оптимизации, которые иначе
были бы невозможны или очень трудны. Если Вы устанавливаете столбец к
неправильному значению, MySQL будет, вместо того, чтобы делать обратную
перемотку, сохранять <CODE>самое лучшее возможное</CODE> значение в столбце.

<UL><LI>Если Вы пробуете сохранять значение вне диапазона в числовом столбце,
MySQL взамен сохранит самое маленькое или самое большое возможное значение.
<LI>Если Вы пробуете сохранять строку, которая не начинается с числа, в
числовой столбец, MySQL сохранит 0 в нем.
<LI>Если Вы пробуете сохранять <CODE>NULL</CODE>, который не берет
значения <CODE>NULL</CODE>, MySQL сохранит 0 или <CODE>''</CODE> (пустую
строку). Это поведение может, однако, быть изменено с опцией компиляции
-DDONT_USE_DEFAULT_FIELDS.
<LI>MySQL позволяет Вам сохранять некоторые неправильные значения даты в
столбцы <CODE>DATE</CODE> и <CODE>DATETIME</CODE>. Например, 2000-02-31 или
2000-02-00. Если дата полностью неправильна, MySQL сохранит в столбце
специальное значение даты 0000-00-00.
<LI>Если Вы устанавливаете <CODE>enum</CODE> к неподдерживаемому значению,
это будет установлено к значению ошибки 'empty string' с числовым значением 0.
</UL>

<LI>Если Вы выполняете <CODE>PROCEDURE</CODE> на запросе, который возвращает
пустой набор, в некоторых случаях <CODE>PROCEDURE</CODE> не будет
трансформировать столбцы.
<LI>Создание таблицы типа <CODE>MERGE</CODE> не проверяет, имеют ли основные
таблицы совместимые типы.
<LI>MySQL не может все же обрабатывать значения <CODE>NaN</CODE>,
<CODE>-Inf</CODE> и <CODE>Inf</CODE> в double. Использование их вызовет
проблемы при попытке экспортировать и импортировать данные. Вы должны как
промежуточное решение изменить <CODE>NaN</CODE> на <CODE>NULL</CODE> (если
возможно), а <CODE>-Inf</CODE> и <CODE>Inf</CODE> соответственно к
минимальному и максимальному возможным значениям <CODE>double</CODE>.
<LI><CODE>LIMIT</CODE> на отрицательных числах превращается в очень большие
положительные числа, что ошибочно.
<LI>Если Вы используете <CODE>ALTER TABLE</CODE>, чтобы сначала добавить
индекс <CODE>UNIQUE</CODE> к таблице, используемой в таблице типа
<CODE>MERGE</CODE>, и затем использовать <CODE>ALTER TABLE</CODE>, чтобы
добавить нормальный индекс уже на таблице <CODE>MERGE</CODE>, порядок ключей
будет иным для таблиц, если имелся старый не уникальный ключ в таблице. Это
потому, что <CODE>ALTER TABLE</CODE> помещает ключи <CODE>UNIQUE</CODE> перед
нормальными ключами, чтобы обнаружить двойные ключи как можно раньше.</UL>

<P>Следующее представляет известные ошибки в более ранних версиях MySQL:</P>
<UL><LI>Вы можете получать зависающий поток, если Вы делаете <CODE>DROP
TABLE</CODE> на таблице, которая является одной среди многих таблиц, которые
блокированы с помощью <CODE>LOCK TABLES</CODE>.
<LI>В следующих случаях Вы можете получать дамп ядра:
<UL><LI>Отсроченный драйвер вставки имеет ждущие обработки вставки к таблице.
<LI><CODE>LOCK table</CODE> с <CODE>WRITE</CODE>
<LI><CODE>FLUSH TABLES</CODE></UL>
<LI>До MySQL Version 3.23.2 <CODE>UPDATE</CODE>, который модифицировал ключ
с помощью <CODE>WHERE</CODE> на том же самом ключе, возможно, потерпел
неудачу потому, что та же самая строка использовалась для поиска:
<PRE>
UPDATE tbl_name SET KEY=KEY+1 WHERE KEY &#62; 100;
</PRE>

Обойти это можно так:
<PRE>
mysql&#62; UPDATE tbl_name SET KEY=KEY+1 WHERE KEY+0 &#62; 100;
</PRE>

Это будет работать потому, что MySQL не будет использовать индекс на
выражениях в предложении <CODE>WHERE</CODE>.
<LI>До MySQL Version 3.23 все числовые типы обрабатываются как поля с
фиксированной точкой. Это означает, что Вы должны были определить, сколько
десятичных чисел должно быть после запятой. Все результаты были возвращены с
правильным количеством десятичных чисел.</UL>

<P>Для изучения ошибок, специфических для конкретной платформы, изучите
разделы по компиляции и портированию.</P>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value);
return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br/>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>

<tr><td><input type="submit" value="Найти" style="font-size: 9pt"></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>


</BODY>
</HTML>
