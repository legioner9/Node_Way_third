<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<!-- SEE http://ht2html.sf.net -->
<head>
  <title>Python Database API v2.0</title>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <META NAME="GENERATOR" CONTENT="Dos Navigator 1.51.04/DOS.">
</head>

<body>

<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<H3>5.7 Спецификация Python Database API 2.0</H3>
<P>Этот API был определен, чтобы привести к одному знаменателю модули Python,
которые используются, чтобы обратиться к базам данных. Этот документ
описывает Python Database API 2.0. Спецификация интерфейса состоит
из нескольких разделов:
<UL><LI><A HREF="#module">Интерфейс модулей</A>
<LI><A HREF="#connection">Объекты подключения</A>
<LI><A HREF="#cursor">Объекты курсоров</A>
<LI><A HREF="#types">Типы конструкторов и объектов</A>
<LI><A HREF="#hints">Хитрости в реализации</A>
<LI><A HREF="#changes">Изменения при переходе с версии 1.0 на 2.0</A></UL>

<P>Комментарии и вопросы относительно этой спецификации могут быть направлены
на <A HREF="mailto:db-sig@python.org">db-sig@python.org</A>.

<P>Для получения большего количества информации относительно связи с помощью
интерфейса базы данных с Python и о доступных пакетах изучите руководство на
<A HREF="../../../www.python.org/topics/database">
http://www.python.org/topics/database</A>.

<A NAME="module"><H3>5.7.1 Интерфейс модулей</H3></A>
<P>Доступ к базе данных сделан доступным через объекты подключения. Модуль
должен обеспечивать конструктор для них:
<DL><DT><B>connect</B>(parameters...)
<DD>Конструктор для создания подключения с базой данных. Возвращает
<A HREF="#connection"><I>объект подключения</I></A>. Требуется ряд
параметров, которые являются зависимыми от базы данных.</DL>

<P>Эти глобальные переменные модуля должны быть определены:
<DL><DT><B>apilevel</B>
<DD>Строковая константа, устанавливающая поддержанный уровень DB API. В
настоящее время допустимы только строки <CODE>'1.0'</CODE> и
<CODE>'2.0'</CODE>. Если не задана, предполагается уровень
интерфейса Database API 1.0.

<DT><B>threadsafety</B>
<DD>Целочисленная константа, устанавливающая уровень безопасности потоков,
который интерфейс поддерживает. Возможные значения:
<TABLE><TR><TD><CODE>0</CODE></TD>
<TD>Потоки не могут совместно использовать модуль.</TD>
<TR><TD><CODE>1</CODE></TD>
<TD>Потоки могут совместно использовать модуль, но не подключения.</TD>
<TR><TD><CODE>2</CODE></TD>
<TD>Потоки могут совместно использовать модуль и подключения.</TD>
<TR><TD><CODE>3</CODE></TD>
<TD>Потоки могут совместно использовать модуль, курсоры и подключения.</TD>
</TABLE>

<P>Совместное использование в вышеупомянутом контексте означает, что два
потока могут использовать ресурс без того, чтобы применять mutex-семафор,
чтобы выполнить блокировку ресурса. Обратите внимание, что Вы не можете
всегда делать внешние ресурсы поточно-безопасными управляя доступом,
использующим mutex: ресурс может полагаться на глобальные переменные или
другие внешние источники данных, которые находятся вне Вашего управления!

<DT><B>paramstyle</B>
<DD>Строковая константа. Устанавливает тип маркера параметра, форматирующего
ожидаемый интерфейсом. Возможные значения:
<TABLE><TR><TD><CODE>'qmark'</CODE></TD>
<TD>Стиль метки запроса, например, '...WHERE name=?'</TD>
<TR><TD><CODE>'numeric'</CODE></TD>
<TD>Числовой, позиционный стиль, например, '...WHERE name=:1'</TD>
<TR><TD><CODE>'named'</CODE></TD>
<TD>Именованный стиль, например, '...WHERE name=:name'</TD>
<TR><TD><CODE>'format'</CODE></TD>
<TD>Формат кодов ANSI C printf, например, '...WHERE name=%s'</TD>
<TR><TD><CODE>'pyformat'</CODE></TD>
<TD>Расширенные форматные коды языка Python, например, '...WHERE
name=%(name)s'</TD></TABLE></DL>

<P>Модуль должен делать всю информацию об ошибках доступной через эти
исключительные ситуации или через подклассы от них:
<DL><DT><B>Warning</B>
<DD>Исключительная ситуация для важных предупреждений подобно усечениям
данных при вставке и т. д. Это должно быть подклассом от
Python StandardError.

<DT><B>Error</B>
<DD>Исключительная ситуация, которая является основным классом для всех
других исключительных ситуаций ошибки. Вы можете использовать это, чтобы
захватить все ошибки с одиночной частью 'except'. Предупреждения не считаются
ошибками и таким образом не должны использовать этот класс как ядро. Это
обязательно должно быть подклассом Python StandardError.

<DT><B>InterfaceError</B>
<DD>Исключительная ситуация для ошибок, которые связаны с интерфейсом базы
данных, а не с самой базой данных. Это должно быть подклассом Error.

<DT><B>DatabaseError</B>
<DD>Исключительная ситуация для ошибок, которые связаны с самой базой данных.
Это должно быть подклассом Error.

<DT><B>DataError</B>
<DD>Исключительная ситуация для ошибок, которые появляются из-за проблем с
обработанными данными, подобно делению на ноль, числовое значение вне
диапазона и т.д. Это должно быть подклассом DatabaseError.

<DT><B>OperationalError</B>
<DD>Исключительная ситуация для ошибок, которые связаны с работой с базой
данных и не обязательно подконтрольны программисту, например, непредвиденное
разъединение, имя источника данных не найдено, транзакция не могла быть
обработана, ошибка распределения памяти произошла в течение обработки и т.д.
Это должно быть подклассом от DatabaseError.

<DT><B>IntegrityError</B>
<DD>Исключительная ситуация вызывается, когда воздействуют на реляционную
целостность базы данных, например, произошла ошибка проверки внешних ключей.
Это должно быть подклассом от DatabaseError.

<DT><B>InternalError</B>
<DD>Исключительная ситуация для случаев, когда база данных сталкивается с
внутренней ошибкой, например, курсор больше не имеет силу, транзакция вышла
из синхронизации, либо случилось что-то в этом роде. Это должно быть
подклассом от DatabaseError.

<DT><B>ProgrammingError</B>
<DD>Исключительная ситуация для ошибок программирования, например, таблица не
найдена или уже существует, ошибка синтаксиса в инструкции SQL, неправильное
число определенных параметров и т.д. Это должно быть подклассом DatabaseError.

<DT><B>NotSupportedError</B>
<DD>Исключительная ситуация для ситуации, когда использовался метод или API
базы данных, который не поддержан базой данных, например, запрашивается
rollback() на подключении, которое не поддерживает транзакции или имеет
выключенные транзакции. Это должно быть подклассом DatabaseError.</DL>

<P>Если база данных не поддерживает функциональные возможности, требуемые
методом, интерфейс должен породить исключительную ситуацию в случае,
если метод используется.

<P>Можно также не реализовывать метод вообще, тогда Python сам сгенерирует
исключительную ситуацию <CODE>AttributeError</CODE> в случае, если метод
запрошен. Это позволяет программисту проверять возможности базы данных,
используя функцию <CODE>hasattr()</CODE>.

<P>Это размещение наследования исключительной ситуации:
<PRE>
StandardError
|__Warning
|__Error
   |__InterfaceError
   |__DatabaseError
      |__DataError
      |__OperationalError
      |__IntegrityError
      |__InternalError
      |__ProgrammingError
      |__NotSupportedError
</PRE>

<P><I>Обратите внимание: значения этих исключительных ситуаций не определены.
Они должны дать пользователю информацию о том, что пошло не так.</I></UL>

<A NAME="connection"><H3>5.7.2 Объекты подключения</H3></A>
<P>Объекты подключения должны отвечать на следующие методы:
<DL><DT><B>close</B>()
<DD>Закрыть подключение немедленно. Подключение будет непригодным, начиная с
этого момента. Если с ним попытаться что-то сделать, будет вызвана
исключительная ситуация <CODE>Error</CODE> (или подкласс от нее). То же самое
применяется ко всем объектам курсора, пробующим использовать подключение.

<DT><B>commit</B>()
<DD>Передать любую ждущую обработки транзакцию на базу данных. Обратите
внимание, что если база данных поддерживает auto-commit, это свойство надо
заранее выключить. Метод интерфейса можно обеспечивать, чтобы иметь
возможность отмены изменений.

<P>Модули баз данных, которые не поддерживают транзакции, должны выполнить
этот метод с не имеющими силу функциональными возможностями.

<DT><B>rollback</B>()
<DD><I>Этот метод факультативный, поскольку не все базы данных обеспечивают
поддержку транзакции</I>. В случае если база данных обеспечивает транзакции,
этот метод заставляет базу данных откатиться обратно к началу любой ждущей
обработки транзакции. Закрытие подключения без того, чтобы завершить
транзакцию, сначала заставит выполниться неявную обратную перемотку.

<DT><B>cursor</B>()
<DD>Возвращает новый <A HREF="#cursor"><I>объект курсора</I></A>,
использующий подключения. Если база данных не обеспечивает прямое понятие
(концепцию) курсора, модуль должен будет подражать курсорам, используя другие
средства для соответствия спецификации.</DL></UL>

<P>Параметры конструктора подключения должны быть выполнены как параметры
ключевого слова для более интуитивного использования и следовать
этому порядку параметров:

<TABLE><TR><TD><CODE>dsn</CODE></TD>
<TD>Источник данных как строка</TD>
<TD>обязательно</TD></TR>

<TR><TD><CODE>user</CODE></TD>
<TD>Имя пользователя как строка</TD>
<TD>опционально</TD></TR>

<TR><TD><CODE>password</CODE></TD>
<TD>Пароль пользователя как строка</TD>
<TD>опционально</TD></TR>

<TR><TD><CODE>host</CODE></TD>
<TD>Имя хоста</TD>
<TD>опционально</TD></TR>

<TR><TD><CODE>database</CODE></TD>
<TD>Имя базы данных</TD>
<TD>опционально</TD></TR></TABLE>

<P>Например, конструктор подключения мог бы выглядеть следующим образом:
<CODE>connect(dsn='myhost:MYDB',user='guido',password='234+$')</CODE>.

<A NAME="cursor"><H3>5.7.3 Объекты курсоров</H3></A>
<P>Эти объекты представляют курсор базы данных, который используется, чтобы
управлять контекстом операции выборки.

<P>Объекты курсоров должны отвечать на следующие методы и атрибуты:
<DL><DT><B>description</B>
<DD>Этот атрибут только для чтения: последовательность последовательностей с
7 элементами. Каждая из этих последовательностей содержит информацию,
описывающую один столбец результата: <CODE>(name, type_code, display_size,
internal_size, precision, scale, null_ok)</CODE>. Этот атрибут будет
<CODE>None</CODE> для операций, которые не возвращают строки, или если курсор
не имел операции, вызываемой через метод <CODE>executeXXX()</CODE>.

<P>Код <CODE>type_code</CODE> может интерпретироваться, сравнивая его с
<A HREF="#types">Type Objects</A>, определенными в разделе ниже.

<DT><B>rowcount</B>
<DD>Этот атрибут только для чтения определяет число строк, обработанных
последним вызовом <CODE>executeXXX()</CODE> (для SQL-инструкций, вроде
<TT>select</TT>) или затронутых запросом (для SQL-инструкций, подобных
<TT>update</TT> или <TT>insert</TT>). Атрибут равен -1 в случае, если никакой
<CODE>executeXXX()</CODE> не выполнился на курсоре.

<DT><B>callproc</B>(procname[,parameters])
<DD><I>Этот метод факультативный: все базы данных обеспечивают хранимые
процедуры</I>. Вызывает хранимую процедуру базы данных с данным именем.
Последовательность параметров должна содержать одну запись для каждого
параметра, который процедура ожидает. Результат обращения будет возвращен как
изменяемая копия входной последовательности. Входные параметры оставлены
нетронутыми, выводимые и вводимо-выводимые параметры будут заменены на
возможно новые значения. Процедура может также обеспечивать набор результатов
как вывод. Это затем должно быть сделано доступным через
стандартные методы <CODE>fetchXXX()</CODE>.

<DT><B>close</B>()
<DD>Закрывает курсор немедленно и делает его непригодным, начиная с текущего
момента. При попытке что-либо с ним сделать еще, будет вызвана исключительная
ситуация <CODE>Error</CODE> (или ее подкласс).

<DT><B>execute</B>(operation[,parameters])
<DD>Препарирует и выполняет операцию базы данных (запрос или команду).
Параметры можно обеспечивать как последовательность или отображение.
Переменные определены в специфической для базы данных записи. Значения
возврата не определены.

<P>Ссылка на операцию будет сохраняться курсором. Если тот же самый объект
операции передан снова, то курсор может оптимизировать поведение. Это
наиболее эффективно для алгоритмов, где много раз используется та же самая
операция, но с разными параметрами. Для достижения максимальной эффективности
при многократном использовании операции, самое лучшее использовать метод
setinputsizes(), чтобы определить типы параметра и размеры. Для параметра
допустимо не соответствовать предопределенной информации: реализация должна
это скомпенсировать, возможно, с потерей эффективности.

<P>Параметры могут быть также определены как список, чтобы, например,
вставить много строк в одной операции, но этот вид использования не
рекомендуется: лучше пользуйтесь <CODE>executemany()</CODE>.

<DT><B>executemany</B>(operation,seq_of_parameters)
<DD>Готовит операцию базы данных (запрос или команду), а затем выполняет это
для всех последовательностей параметров или отображений, найденных в
последовательности <CODE>seq_of_parameters</CODE>.

<P>Модули могут выполнить этот метод, используя многократные обращения к
методу <CODE>execute()</CODE> или используя операции массива, чтобы база
данных обработала всю последовательность в целом в одном обращении.

<P>Те же самые комментарии, что касаются <CODE>execute()</CODE>, также
применяются к этому методу. Значения возврата не определены.

<DT><B>fetchone</B>()
<DD>Выбирает следующую строку набора результатов запросов, возвращая
одиночную последовательность или <CODE>None</CODE>, когда больше
нет доступных данных. Исключительная ситуация <CODE>Error</CODE> (или ее
подкласс) произойдет, если предыдущее обращение к <CODE>executeXXX()</CODE>
не производило никакого набора результатов.

<DT><B>fetchmany</B>([size=cursor.arraysize])
<DD>Выбирает следующую строку набора результатов запросов, возвращая
последовательность последовательностей (например, список tuples). Пустая
последовательность будет возвращена, когда больше нет доступных строк. Число
строк, которое надо выбрать за обращение, определено параметром. Если это не
задано, <CODE>arraysize</CODE> курсора определяет число строк, которые будут
выбраны. Метод должен пробовать выбирать так много строк, как уаазано
параметром. Если это невозможно из-за определенного числа строк, меньшее
количество строк может быть возвращено.

<P>Исключительная ситуация <CODE>Error</CODE> (или ее подкласс) произойдет,
если предыдущее обращение к <CODE>executeXXX()</CODE> не производило
никакого набора результатов.

<P>Обратите внимание, что имеются сложности с эффективностью, включаемые с
параметром размера. Для достижения оптимальной эффективности, обычно самое
лучшее использовать arraysize.

<DT><B>fetchall</B>()
<DD>Выбирает все оставшиеся строки результата запроса, возвращая их как
последовательность последовательностей (например, список tuples). Обратите
внимание, что атрибут arraysize курсора может воздействовать на эффективность
этой операции. Исключительная ситуация <CODE>Error</CODE> (или ее подкласс)
произойдет, если предыдущее обращение к <CODE>executeXXX()</CODE> не
производило никакого набора результатов.

<DT><B>nextset</B>()
<DD><I>Этот метод факультативный, поскольку не все базы данных поддерживают
многократные наборы результатов.</I>

<P>Этот метод будет переводить курсор к следующему доступному набору,
отбрасывая любые остающиеся строки из текущего (актуального) набора.

<P>Если не имеется больше никаких наборов, метод возвращает
<CODE>None</CODE>. Иначе он возвращает значение true, и последующие обращения
к методам выборки возвратят строки из следующего набора результатов.

<P>Исключительная ситуация <CODE>Error</CODE> (или ее подкласс) произойдет,
если предыдущее обращение к <CODE>executeXXX()</CODE> не производило
никакого набора результатов.

<P>Обратите внимание, что интерфейс может выполнять выборку строки, используя
массивы и другие оптимизацию. Не гарантируется, что обращение к этому методу
<B>только</B> переместит связанный курсор вперед.

<DT><B>arraysize</B>
<DD>Этот атрибут для чтения-записи определяет число строк, которое надо
выбрать с помощью <CODE>fetchmany()</CODE> за раз. Значение по умолчанию 1
(выбрать одиночную строку результатов)

<P>Реализации должны отслеживать это значение применительно к методу
<CODE>fetchmany()</CODE>, но никто не запрещает реально работать с базой
данных каким-либо иным способом. Это может также использоваться в
реализации метода <CODE>executemany()</CODE>.

<DT><B>setinputsizes</B>(sizes)
<DD>Это может использоваться перед обращением для <CODE>executeXXX()</CODE> к
предопределенным областям памяти для параметров операции. <CODE>sizes</CODE>
определен как последовательность: один элемент для каждого входного
параметра. Элемент должен быть Type Object, который соответствует вводу,
который будет использоваться, или это должно быть целым числом, определяющим
максимальную длину параметра строки. Если элемент равен <CODE>None</CODE>, то
никакая предопределенная область памяти не будет зарезервирована для этого
столбца (это полезно, чтобы избегать предопределенных областей для больших
вводов). Метод не является обязательным для использования и реализации.

<DT><B>setoutputsize</B>(size[,column])
<DD>Устанавливает размер буфера столбца для выборок больших столбцов
(например, LONG, BLOB и им подобных). Столбец определен как индекс в
последовательности результатов. Отсутствие определения column установит
заданный по умолчанию размер для всех больших столбцов в курсоре. Метод не
является обязательным для использования и реализации.</DL>

<A NAME="types"><H3>5.7.4 Типы конструкторов и объектов</H3></A>
<P>Многие базы данных должны иметь ввод в специфическом формате для
связывания с входными параметрами операции. Например, если ввод предназначен
для столбца DATE, то это будет связано с базой данных в специфическом формате
строки. Подобные проблемы существуют для столбцов "Row ID" или больших
двоичных элементов (например, столбцов blob или RAW). Это представляет
проблемы для Python, начиная с параметров для метода без контроля типов
<CODE>executeXXX()</CODE>. Когда модуль базы данных видит строковый объект,
он не знает сходу, как с ним быть.

<P>Чтобы преодолеть эту проблему, модуль должен обеспечить конструкторы,
определенные ниже, чтобы создать объекты, которые могут хранить специальные
значения. При передаче к методам курсора, модуль может затем обнаружить
соответствующий тип входного параметра и обработать его соответственно.

<P>Атрибут <CODE>description</CODE> объекта курсора возвращает информацию
относительно каждого из столбцов результата запроса. Здесь
<CODE>type_code</CODE> должен быть <I>равен</I> одному из Type Objects,
определенных ниже. Эти самые Type Objects могут быть равны больше, чем одному
коду типа (например, DATETIME может быть равен кодам типа для столбцов даты,
времени и метки времени).

<P>Модуль экспортирует следующие конструкторы:
<DL><DT><B>Date</B>(year,month,day)
<DD>Эта функция создает объект, хранящий значение даты.
<DT><B>Time</B>(hour,minute,second)
<DD>Эта функция создает объект, хранящий значение времени.
<DT><B>Timestamp</B>(year,month,day,hour,minute,second)
<DD>Эта функция создает объект, хранящий значение метки времени.
<DT><B>DateFromTicks</B>(ticks)

<DD>Эта функция создает объект, хранящий значение даты с данного значения
импульсов сигнала времени (число секунд, начиная с epoch, согласно
стандартному модулю Python <TT>time</TT>).

<DT><B>TimeFromTicks</B>(ticks)
<DD>Эта функция создает объект, хранящий значение времени с данного значения
импульсов сигнала времени (число секунд, начиная с epoch, согласно
стандартному модулю Python <TT>time</TT>).

<DT><B>TimestampFromTicks</B>(ticks)
<DD>Эта функция создает объект, хранящий значение метки времени с данного
значения импульсов сигнала времени (число секунд, начиная с epoch, согласно
стандартному модулю Python <TT>time</TT>).

<DT><B>Binary</B>(string)
<DD>Эта функция создает объект, способный хранить строковое двоичное
значение типа long.

<DT><B>STRING</B>
<DD>Этот объект используется, чтобы описать столбцы в базе данных, которые
являются основанными на строках (например, типа CHAR).

<DT><B>BINARY</B>
<DD>Этот объект используется, чтобы описать двоичные (long) столбцы в базе
данных (например, LONG, RAW, BLOB).

<DT><B>NUMBER</B>
<DD>Этот объект используется, чтобы описать числовые столбцы в базе данных.

<DT><B>DATETIME</B>
<DD>Этот объект используется, чтобы описать столбцы
даты/времени в базе данных.

<DT><B>ROWID</B>
<DD>Этот объект используется, чтобы описать "Row ID" столбец в базе данных.
</DL>

<P>SQL-значение NULL представляется на вводе и выводе
как Python <CODE>None</CODE>.

<P>Обратите внимание: использование Unix-импульсов сигнала времени для связи
с помощью интерфейса базы данных может вызвать проблемы из-за ограниченного
диапазона даты, который они покрывают.

<A NAME="hints"><H3>5.7.5 Хитрости в реализации</H3></A>
<UL><LI>Привилегированные объектные типы для объектов даты/времени определены
в пакете mxDateTime
(<A HREF="../../../starship.python.net/~lemburg/mxDateTime.html">
http://starship.python.net/~lemburg/mxDateTime.html</A>). Это обеспечивает
все необходимые конструкторы и методы на уровнях Python и C.

<LI>Привилегированный объектный тип для объектов Binary является буферным
типом, доступный в стандартном Python, начиная с версии 1.5.2. Подробности
ищите в документации на Python и в дистрибутиве его исходников (файлы
<TT>Include/bufferobject.h</TT> и <TT>Objects/bufferobject.c</TT>).

<LI>Имеется типовая реализация конструкторов для даты/времени, делегирующая
работу универсальным конструкторам на основе Unix-импульсов сигнала времени:
<PRE>
import time

def DateFromTicks(ticks):
  return apply(Date,time.localtime(ticks)[:3])

def TimeFromTicks(ticks):
  return apply(Time,time.localtime(ticks)[3:6])

def TimestampFromTicks(ticks):
  return apply(Timestamp,time.localtime(ticks)[:6])
</PRE>

<LI>Этот класс Python позволяет выполнять вышеупомянутые объекты типа даже
при том, что поле кода типа описания выдает много значений для type object:
<PRE>
class DBAPITypeObject:
  def __init__(self,*values):
    self.values = values
  def __cmp__(self,other):
    if other in self.values:
       return 0
    if other < self.values:
       return 1
    else:
      return -1
</PRE>

Возникающий в результате объект сравнивается со всеми
значениями, переданными конструктору.

<LI>Имеется отрывок кода на Python, который реализует иерархию исключительных
ситуаций, определенную выше:
<PRE>
import exceptions

class Error(exceptions.StandardError):
    pass

class Warning(exceptions.StandardError):
    pass

class InterfaceError(Error):
    pass

class DatabaseError(Error):
    pass

class InternalError(DatabaseError):
    pass

class OperationalError(DatabaseError):
    pass

class ProgrammingError(DatabaseError):
    pass

class IntegrityError(DatabaseError):
    pass

class DataError(DatabaseError):
    pass

class NotSupportedError(DatabaseError):
    pass
</PRE>

На C Вы можете использовать API
<CODE>PyErr_NewException(fullname,base,NULL)</CODE>, чтобы создать
объекты исключительной ситуации.</UL>

<A NAME="changes"><H3>5.7.6 Изменения при переходе с версии 1.0 на 2.0</H3>
</A>
<P>Python Database API 2.0 представляет несколько важных нововведений по
сравнению с версией 1.0. Некоторые из этих изменений делают невозможным
применять старые скрипты с новой версией DB API.

<UL><LI>Потребность в отдельном dbi модуле была ликвидирована, и
функциональные возможности, объединены непосредственно в интерфейс модуля.

<LI>Новые конструкторы и Type Objects были добавлены для значений
даты/времени, RAW Type Object переименован в BINARY. Возникающий в результате
набор должен покрыть все базисные типы данных, обычно присутствующие в
современных базах данных на SQL.

<LI>Были добавлены новые константы (apilevel, threadlevel, paramstyle) и
методы (executemany, nextset), чтобы обеспечить лучшее взаимодействие с
разными базами данных.

<LI>Семантика метода callproc(), нужная чтобы вызывать хранимые процедуры,
теперь ясно определена.

<LI>Определение значения возврата execute() изменилось. Раньше значение
возврата было основано на типе инструкции SQL (что было не так-то просто
реализовать), теперь же оно неопределенно, используйте более гибкий атрибут
rowcount вместо этого. Модули могут использовать старый стиль значений
возврата, но они больше не переданы под мандат спецификацией и
должны рассматриваться как зависимый интерфейс базы данных.

<LI>Классы основных исключительных ситуаций были включены в спецификацию.
Можно расширить иерархию исключительных ситуаций, определенную в этой
спецификации, подклассифицируя определенные классы исключительных ситуаций.
</UL>

<H3>Известные проблемы</H3>
<P>Хотя спецификация версии 2.0 разъясняет много вопросов, которые были
оставлены открытыми в версии 1.0, некоторые все еще остаются проблемами:

<UL><LI>Определение полезного значения возврата для nextset() для случая,
когда новый набор результат доступен.

<LI>Создание числового типа с фиксированной точкой для использования в
качестве типа для пересчета чисел с минимальными потерями.</UL>

<H3>Замечания</H3>
<P>Интерфейс базы данных может поддерживать именованные курсоры, позволяя
задавать методу параметр-строку. Это свойство пока не является частью
спецификации, так как оно сильно усложняет
семантику методов <CODE>fetchXXX()</CODE>.

<P>Модуль использует метод <CODE>__getitem__</CODE> объекта параметров, чтобы
отобразить позиции (целые числа) или имена (строки) к значениям параметра.
Это учитывает последовательности и отображения, которые нужно
использовать как ввод.

<P>Значение передается базе данных напрямую. В практических условиях это
означает, что входное значение непосредственно используется как значение в
операции. Пользователь не должен требоваться, чтобы экранировать значение
так, чтобы оно могло использоваться: значение должно быть равно фактическому
параметру для базы данных.

<P>Атрибут <CODE>rowcount</CODE> может быть реализован так, что модифицирует
значение динамически. Это может быть полезно для баз данных, которые
возвращают используемые значения <CODE>rowcount</CODE> только после первого
обращения к методу <CODE>fetchXXX()</CODE>.

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value);
return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br/>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>

<tr><td><input type="submit" value="Найти" style="font-size: 9pt"></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>


</BODY>
</html>
