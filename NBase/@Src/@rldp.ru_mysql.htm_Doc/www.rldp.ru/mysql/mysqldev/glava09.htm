<HTML>
<HEAD>
  <TITLE>Расширение MySQL</TITLE>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <META NAME="GENERATOR" CONTENT="Dos Navigator 1.51.04/DOS.">
</HEAD>

<BODY>

<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<H1><A NAME="Extending_MySQL">9 Расширение MySQL</A></H1>
<H2><A NAME="Adding_functions">9.1 Добавление новых функций в MySQL</A></H2>
<P>Есть два способа добавить новую функцию в MySQL:</P>

<UL><LI>Вы можете добавить функцию через механизм определяемых пользователем
функций (user-definable function, UDF). Они добавляются динамически,
используя команды <CODE>CREATE FUNCTION</CODE> и <CODE>DROP FUNCTION</CODE>.
Подробности в разделе "<A HREF="manual.htm#CREATE_FUNCTION">9.1.1 Синтаксис
<CODE>CREATE FUNCTION/DROP FUNCTION</CODE></A>".

<LI>Вы можете добавить функцию как внутреннюю в MySQL. Такие функции
компилируются прямо внутрь сервера <CODE>mysqld</CODE> и становятся
доступными на постоянной основе.</UL>

<P>Каждый метод имеет свои проблемы:</P>
<UL><LI>Если Вы пишете определяемую пользователем функцию, Вы должны
установить объектный файл в дополнение к серверу. Если Вы компилируете Вашу
функцию прямо в сервер, Вы не должны делать этого.

<LI>Вы можете добавлять UDF к двоичному дистрибутиву MySQL. Встроенные
функции требуют, чтобы Вы изменили исходники.

<LI>Если Вы обновляете MySQL, Вы можете продолжать использовать Ваш
предварительно установленный UDF. Для встроенных функций Вы должны повторить
модификации каждый раз, когда Вы делаете апгрейд.</UL>

<P>Независимо от метода, который Вы используете, чтобы добавить новые
функции, они могут использоваться точно так же как местные функции типа
<CODE>ABS()</CODE> или <CODE>SOUNDEX()</CODE>.</P>

<H3><A NAME="CREATE_FUNCTION">9.1.1
Синтаксис <CODE>CREATE FUNCTION/DROP FUNCTION</CODE></A></H3>
<PRE>
CREATE [AGGREGATE] FUNCTION function_name RETURNS {STRING|REAL|INTEGER}
       SONAME shared_library_name
DROP FUNCTION function_name
</PRE>

<P>Определяемые пользователем функции (user-definable function, UDF)
представляют собой способ расширить MySQL новой функцией, которая работает
подобно местным (встроенным) функциям MySQL типа <CODE>ABS()</CODE> или
<CODE>CONCAT()</CODE>.</P>

<P><CODE>AGGREGATE</CODE> новая опция для MySQL Version 3.23. Функция с
<CODE>AGGREGATE</CODE> работает точно так же, как и встроенная функция
<CODE>GROUP</CODE>, подобно <CODE>SUM</CODE> или <CODE>COUNT()</CODE>.</P>

<P><CODE>CREATE FUNCTION</CODE> сохраняет имя функции, тип и общедоступное
библиотечное имя в таблице <CODE>mysql.func</CODE> системы. Вы должны иметь
привилегии <STRONG>insert</STRONG> и <STRONG>delete</STRONG> для базы данных
<CODE>mysql</CODE>, чтобы создавать и удалять функции.</P>

<P>Все активные функции перезагружаются при каждом запуске сервера, если Вы
не запускаете <CODE>mysqld</CODE> с опцией <CODE>--skip-grant-tables</CODE>.
В этом случае инициализация пропущена, и UDF станут недоступны. Активная
функция представляет собой такую функцию, которая была загружена с помощью
<CODE>CREATE FUNCTION</CODE>, но не была удалена через
вызов <CODE>DROP FUNCTION</CODE>.</P>

<P>По поводу правил написания определяемых пользователем функций отсылаю Вас
к разделу "<A HREF="manual.htm#Adding_functions">9.1 Добавление новой
функции, определяемой пользователем в MySQL</A>". Для работы механизма UDF
функции должны быть написаны на C или C++, Ваша операционная система должна
поддерживать динамическую загрузку, и <CODE>mysqld</CODE> должен быть
откомпилирован динамически (не статически).</P>

<H3><A NAME="Adding_UDF">9.1.2
Добавление новой функции, определяемой пользователем</A></H3>
<P>Для работы механизма UDF функции должны быть написаны на C или C++, а Ваша
операционная система должна поддерживать динамическую загрузку. Дистрибутив
исходников MySQL включает файл <TT>sql/udf_example.cc</TT>, который
определяет 5 новых функций. Консультируйтесь с этим файлом, чтобы видеть, как
работают соглашения о вызовах UDF.</P>

<P>Чтобы <CODE>mysqld</CODE> мог использовать UDF, Вы должны конфигурировать
MySQL с опцией <CODE>--with-mysqld-ldflags=-rdynamic</CODE>. Причина этого
в том, что на многих платформах (включая Linux) Вы можете загружать
динамическую библиотеку (вызовом <CODE>dlopen()</CODE>) из статически
скомпонованной программы, которая собрана с опцией
<CODE>--with-mysqld-ldflags=-all-static</CODE>, но если Вы хотите
использовать UDF, который должен обратиться к символам из
<CODE>mysqld</CODE> (подобно примеру <CODE>methaphone</CODE> в
<TT>sql/udf_example.cc</TT>, который использует
<CODE>default_charset_info</CODE>), Вы должны компоновать программу с
<CODE>-rdynamic</CODE>. Подробности на <CODE>man dlopen</CODE>.</P>

<P>Для каждой функции, которую Вы хотите использовать в инструкциях SQL, Вы
должны определить соответствующую функцию на C или на C++. В обсуждении ниже
имя ``xxx'' используется для имени функции примера. Здесь <CODE>XXX()</CODE>
(верхний регистр) указывает SQL-обращение к функции, и <CODE>xxx()</CODE>
(нижний регистр) указывает C/C++-обращение к функции.</P>

<P>Функции, которые Вы пишете на C/C++ для реализации интерфейса с
<CODE>XXX()</CODE>:</P>

<DL COMPACT>
<DT><CODE>xxx()</CODE> (обязательна)
<DD>Основная функция. Это то место, где функциональный результат вычислен.
Соответствие между типом SQL и типом возврата Вашей функции на C/C++
показывается ниже:

<TABLE BORDER WIDTH="100%">
<TR><TD><STRONG>SQL-тип</STRONG></TD><TD><STRONG>C/C++-тип</STRONG></TD></TR>
<TR><TD><CODE>STRING</CODE></TD><TD><CODE>char *</CODE></TD></TR>
<TR><TD><CODE>INTEGER</CODE></TD><TD><CODE>long long</CODE></TD></TR>
<TR><TD><CODE>REAL</CODE></TD><TD><CODE>double</CODE></TD></TR></TABLE>

<DT><CODE>xxx_init()</CODE> (опциональна)
<DD>Функция инициализации для <CODE>xxx()</CODE>. Это может использоваться
для:

<UL><LI>Проверки числа параметров <CODE>XXX()</CODE>.
<LI>Проверки, что параметры имеют требуемый тип или выдачи предписания, чтобы
MySQL принудительно привел параметры к типам, которые Вы хотите иметь, когда
основная функция вызвана.
<LI>Распределения любой память, требуемой для основной функции.
<LI>Определения максимальной длины результата.
<LI>Указания (для функций типа <CODE>REAL</CODE>) максимального количества
десятичных чисел.
<LI>Указания того, может или нет результат быть <CODE>NULL</CODE>.</UL>

<DT><CODE>xxx_deinit()</CODE> (опционально)
<DD>Функция деинициализации для <CODE>xxx()</CODE>. Это должно освободить
любую память, распределенную функцией инициализации.</DL>

<P>Когда инструкция SQL вызывает <CODE>XXX()</CODE>, MySQL вызывает функцию
инициализации <CODE>xxx_init()</CODE>, чтобы позволить ей выполнить любую
требуемую настройку, типа проверки параметра или распределения памяти. Если
<CODE>xxx_init()</CODE> возвращает ошибку, инструкция SQL будет прервана с
сообщением об ошибке, причем главная и деинициализационная функции не будут
вызваны, что стоит иметь в виду при распределении памяти. Иначе основная
функция <CODE>xxx()</CODE> будет вызвана один раз для каждой строки. После
того, как все строки были обработаны, вызывается функция
<CODE>xxx_deinit()</CODE>, так что она может выполнить требуемую очистку.</P>

<P>Все функции должны быть безопасны для потоков (не только основная функция,
но и остальные: инициализация и деинициализация идут в поточном режиме!). Это
означает, что Вам не позволят распределить любые глобальные или менять
статические переменные! Если Вы нуждаетесь в памяти, Вы должны распределить
ее в <CODE>xxx_init()</CODE> и непременно освободить в
<CODE>xxx_deinit()</CODE>.</P>

<H4><A NAME="UDF_calling_sequences">9.1.2.1 Соглашения по вызову UDF</A></H4>
<P>Основная функция должна быть объявлена как показано ниже. Обратите
внимание, что тип возврата и параметры отличаются в зависимости от того,
объявите ли Вы тип возврата функции SQL <CODE>XXX()</CODE> как
<CODE>STRING</CODE>, <CODE>INTEGER</CODE> или <CODE>REAL</CODE> в
вызове <CODE>CREATE FUNCTION</CODE>:</P>

<P>Для функций типа <CODE>STRING</CODE>:</P>
<PRE>
char *xxx(UDF_INIT *initid, UDF_ARGS *args, char *result,
          unsigned long *length, char *is_null, char *error);
</PRE>

<P>Для функций типа <CODE>INTEGER</CODE>:</P>
<PRE>
long long xxx(UDF_INIT *initid, UDF_ARGS *args, char *is_null, char *error);
</PRE>

<P>Для функций типа <CODE>REAL</CODE>:</P>
<PRE>
double xxx(UDF_INIT *initid, UDF_ARGS *args, char *is_null, char *error);
</PRE>

<P>Функции инициализации и деинициализации объявлены подобно этому:</P>
<PRE>
my_bool xxx_init(UDF_INIT *initid, UDF_ARGS *args, char *message);
void xxx_deinit(UDF_INIT *initid);
</PRE>

<P>Параметр <CODE>initid</CODE> передан всем трем функциям. Он указывает на
структуру <CODE>UDF_INIT</CODE>, которая используется, чтобы передать
информацию между функциями. Члены структуры <CODE>UDF_INIT</CODE> перечислены
ниже. Функция инициализации должна заполнить любые члены, которые она желает
изменить. Чтобы использовать значение по умолчанию для члена, оставьте его
неизменным. Перейдем к описанию:</P>

<DL COMPACT>
<DT><CODE>my_bool maybe_null</CODE>
<DD><CODE>xxx_init()</CODE> должна установить <CODE>maybe_null</CODE> в
<CODE>1</CODE>, если <CODE>xxx()</CODE> может возвращать <CODE>NULL</CODE>.
Значение по умолчанию <CODE>1</CODE>, если любой из параметров объявлен
как <CODE>maybe_null</CODE>.

<DT><CODE>unsigned int decimals</CODE>
<DD>Число десятичных цифр. Значение по умолчанию: максимальное количество
десятичных цифр в параметрах, переданных основной функции. Например, если
функции переданы <CODE>1.34</CODE>, <CODE>1.345</CODE> и <CODE>1.3</CODE>,
значением по умолчанию будет 3, поскольку <CODE>1.345</CODE>
имеет 3 десятичных цифры.

<DT><CODE>unsigned int max_length</CODE>
<DD>Максимальная длина результата-строки. Значение по умолчанию отличается
в зависимости от типа результата функции. Для строчных функций значение
по умолчанию равно длине самого длинного параметра. Для целочисленных
функций значение по умолчанию соответствует 21 цифре. Для реальных функций
значение по умолчанию 13+количество десятичных чисел, обозначенных как
<CODE>initid-&#62;decimals</CODE>. Для числовых функций длина включает любой
знак или десятичные символы отметки.

<DT><CODE>char *ptr</CODE>
<DD>Указатель, который функция может использовать для собственных целей.
Например, функции могут использовать <CODE>initid-&#62;ptr</CODE>, чтобы
передать распределенную память между функциями. В <CODE>xxx_init()</CODE> как
обычно распределите память и назначьте ее этому указателю:
<PRE>
initid-&#62;ptr=allocated_memory;
</PRE>

В <CODE>xxx()</CODE> и <CODE>xxx_deinit()</CODE> обратитесь к
<CODE>initid-&#62;ptr</CODE>, чтобы использовать или освободить память.</DL>

<H4><A NAME="UDF_arguments">9.1.2.2 Обработка параметров</A></H4>
<P>Параметр <CODE>args</CODE> указывает на структуру <CODE>UDF_ARGS</CODE>,
члены которой приведены ниже:</P>

<DL COMPACT>
<DT><CODE>unsigned int arg_count</CODE>
<DD>Число параметров. Проверьте это значение в функции инициализации, если Вы
хотите, чтобы Ваша функция была вызвана со специфическим числом параметров.
Например, таким кодом:
<PRE>
if (args-&#62;arg_count != 2)
{
   strcpy(message,"XXX() requires two arguments");
   return 1;
}
</PRE>

<DT><CODE>enum Item_result *arg_type</CODE>
<DD>Типы для каждого параметра. Возможные значения типов:
<CODE>STRING_RESULT</CODE>, <CODE>INT_RESULT</CODE> и
<CODE>REAL_RESULT</CODE>. Чтобы удостовериться, что параметры имеют данный
тип и возвращают ошибку, если они к нему не принадлежат, проверьте массив
<CODE>arg_type</CODE> в функции инициализации. Например:
<PRE>
if (args-&#62;arg_type[0] != STRING_RESULT ||
   args-&#62;arg_type[1] != INT_RESULT)
{
   strcpy(message,"XXX() requires a string and an integer");
   return 1;
}
</PRE>

Вы можете использовать функцию инициализации, чтобы установить элементы
<CODE>arg_type</CODE> к типам, которые Вы хотите получить. Это заставляет
MySQL привести параметры к тем типам для каждого обращения к
<CODE>xxx()</CODE>. Например, чтобы определить первые два элемента как строку
и число, сделайте следующее в <CODE>xxx_init()</CODE>:
<PRE>
args-&#62;arg_type[0] = STRING_RESULT;
args-&#62;arg_type[1] = INT_RESULT;
</PRE>

<DT><CODE>char **args</CODE>
<DD><CODE>args-&#62;args</CODE> сообщает информацию функции инициализации
относительно общего характера параметров, с которыми Ваша функция была
вызвана. Для постоянного параметра (константы) <CODE>i</CODE>
<CODE>args-&#62;args[i]</CODE> указывает на значение параметра. Для
непостоянного параметра <CODE>args-&#62;args[i]</CODE> равно <CODE>0</CODE>.
Постоянный параметр представляет собой выражение, которое использует только
константы, типа <CODE>3</CODE>, <CODE>4*7-2</CODE> или
<CODE>SIN(3.14)</CODE>. Непостоянный параметр представляет собой выражение,
которое обращается к значениям, которые могут изменяться, типа имени столбца
или функций, которые вызваны с непостоянными параметрами. Для каждого
обращения основной функции <CODE>args-&#62;args</CODE> хранит фактические
параметры, которые переданы для в настоящее время обрабатываемой строки.
Функции могут обратиться к параметру <CODE>i</CODE> следующим образом:

<UL><LI>Параметр типа <CODE>STRING_RESULT</CODE>, данный как указатель строки
плюс длина, позволяет обработку двоичных данных или данных произвольной
длины. Содержание строки доступно как <CODE>args-&#62;args[i]</CODE>, а длина
строки как <CODE>args-&#62;lengths[i]</CODE>. Вы не должны считать, что
строка завершается нулевым символом.

<LI>Для параметра типа <CODE>INT_RESULT</CODE> Вы должны привести
<CODE>args-&#62;args[i]</CODE> к типу <CODE>long long</CODE>:
<PRE>
long long int_val;
int_val = *((long long*) args-&#62;args[i]);
</PRE>

<LI>Для параметра типа <CODE>REAL_RESULT</CODE> Вы должны привести
<CODE>args-&#62;args[i]</CODE> к типу <CODE>double</CODE>:
<PRE>
double real_val;
real_val = *((double*) args-&#62;args[i]);
</PRE></UL>

<DT><CODE>unsigned long *lengths</CODE>
<DD>Для функции инициализации, массив <CODE>lengths</CODE> указывает
максимальную длину строки для каждого параметра. Для каждого обращения к
основной функции <CODE>lengths</CODE> хранит фактические длины любых
строковых параметров, которые переданы для строки, обрабатываемой в настоящее
время. Для параметров типов <CODE>INT_RESULT</CODE> или
<CODE>REAL_RESULT</CODE> <CODE>lengths</CODE> хранит максимальную длину
параметра (как для функции инициализации).</DL>

<H4><A NAME="UDF_return_values">9.1.2.3
Возвращаемые значения и обработка ошибок</A></H4>
<P>Функция инициализации возвратит <CODE>0</CODE>, если никакая ошибка не
произошла, и <CODE>1</CODE> в противном случае. Если ошибка происходит,
<CODE>xxx_init()</CODE> должна сохранить сообщение об ошибке с нулевым
символом в конце в параметре <CODE>message</CODE>. Сообщение будет возвращено
пользователю. Буфер сообщений имеет длину в <CODE>MYSQL_ERRMSG_SIZE</CODE>
символов, но Вы должны попробовать сохранить сообщение в 80 символах так,
чтобы это удовлетворило ширине стандартного экрана терминала.</P>

<P>Значение возврата основной функции <CODE>xxx()</CODE> зависит от типа. Для
функций типов <CODE>long long</CODE> и <CODE>double</CODE> оно представляет
собой собственно функциональное значение. Строковые функции должны возвратить
указатель на результат и сохранить длину строки в параметрах
<CODE>length</CODE>. Здесь <CODE>result</CODE> представляет собой буфер
длиной в 255 байт. Установите их к содержанию и длине значения. Например:</P>
<PRE>
memcpy(result, "result string", 13);
*length=13;
</PRE>

<P>Если Ваши функции строки должны возвратить строку длиннее, чем 255 байт,
распределите память для результата через <CODE>malloc()</CODE> в функции
<CODE>xxx_init()</CODE> или в <CODE>xxx()</CODE>, а затем освободите память в
<CODE>xxx_deinit()</CODE>. Вы можете сохранять распределенную память в слоте
<CODE>ptr</CODE> структуры <CODE>UDF_INIT</CODE> для повторного использования
в будущем обращении <CODE>xxx()</CODE>. Подробности в разделе
"<A HREF="manual.html#UDF_calling_sequences">9.1.2.1 Соглашения о вызове UDF
</A>".</P>

<P>Чтобы указывать значение возврата <CODE>NULL</CODE> в основной функции,
установите <CODE>is_null</CODE> в <CODE>1</CODE>:</P>
<PRE>
*is_null=1;
</PRE>

<P>Чтобы указать возврат ошибки в основной функции, установите параметр
ошибки (<CODE>error</CODE>) в значение <CODE>1</CODE>:</P>
<PRE>
*error=1;
</PRE>

<P>Если <CODE>xxx()</CODE> устанавливает <CODE>*error</CODE> в <CODE>1</CODE>
для любой строки, функциональное значение <CODE>NULL</CODE> для текущей
строки и для любых последующих строк, обработанных инструкцией, в которой
вызывалась <CODE>XXX()</CODE>. Причем, <CODE>xxx()</CODE> не будет даже
запрашиваться для последующих строк. <STRONG>ПРИМЕЧАНИЕ:</STRONG> В MySQL до
версии 3.22.10 Вы должны установить <CODE>*error</CODE> и
<CODE>*is_null</CODE>:</P>
<PRE>
*error=1;
*is_null=1;
</PRE>

<H4><A NAME="UDF_compiling">9.1.2.4
Компиляция и установка определяемых пользователем функций</A></H4>
<P>Файлы, выполняющие UDF, должны компилироваться и устанавливаться на
сервере. Этот процесс описан ниже для примерного UDF-файла
<TT>udf_example.cc</TT>, который включен в дистрибутив исходников MySQL. Этот
файл содержит следующие функции:</P>

<UL><LI><CODE>metaphon()</CODE> возвращает мета-строку для строкового
параметра. Это похоже на soundex, но больше заточено под английский.

<LI><CODE>myfunc_double()</CODE> возвращает сумму ASCII-значений символов в
параметрах, поделенную на сумму длин этих параметров.

<LI><CODE>myfunc_int()</CODE> возвращает сумму длин параметров.
<LI><CODE>sequence([const int])</CODE> возвратит последовательность,
начинающуюся с заданного числа или с 1, если никакого числа задано не было.

<LI><CODE>lookup()</CODE> возвращает IP-адрес.
<LI><CODE>reverse_lookup()</CODE> возвращает hostname для IP-адреса. Функция
может быть вызвана со строкой <CODE>"xxx.xxx.xxx.xxx"</CODE> или с 4 числами.
</UL>

<P>Динамически загружаемый файл должен компилироваться как разделяемый
объектный файл, используя команду:</P>
<PRE>
shell&#62; gcc -shared -o udf_example.so myfunc.cc
</PRE>

<P>Вы можете легко выяснять правильные параметры компилятора для Вашей
системы, запуская такую команду в каталоге <TT>sql</TT> Вашего дерева
исходных текстов MySQL:</P>
<PRE>
shell&#62; make udf_example.o
</PRE>

<P>Вы должны выполнить команду компиляции, подобную одной из тех, что
отображает <CODE>make</CODE>, за исключением того, что Вы должны удалить
опцию <CODE>-c</CODE> близко к концу строки и добавить
<CODE>-o udf_example.so</CODE> в самый конец строки. На некоторых системах
удалять <CODE>-c</CODE> не надо, пробуйте.</P>

<P>Как только Вы скомпилируете общедоступный объект, содержащий UDF, Вы
должны установить его и сообщить MySQL о расширении функциональности.
Компиляция общедоступного объекта из <TT>udf_example.cc</TT> производит файл
с именем <TT>udf_example.so</TT> (точное имя может изменяться от платформы к
платформе). Скопируйте этот файл в некоторый каталог, где ищет файлы
<CODE>ld</CODE>, например, в <TT>/usr/lib</TT>. На многих системах Вы можете
устанавливать системную переменную <CODE>LD_LIBRARY</CODE> или
<CODE>LD_LIBRARY_PATH</CODE>, чтобы указать каталог, где Вы имеете Ваши файлы
функции UDF. Руководство на <CODE>dlopen</CODE> сообщает Вам, которую
переменную Вы должны использовать на Вашей системе. Вы должны установить это
в <CODE>mysql.server</CODE> или в <CODE>safe_mysqld</CODE> и перезапустить
<CODE>mysqld</CODE>.</P>

<P>После того, как библиотека установлена, сообщите <CODE>mysqld</CODE>
относительно новых функций этими командами:</P>
<PRE>
mysql&#62; CREATE FUNCTION metaphon RETURNS STRING SONAME "udf_example.so";
mysql&#62; CREATE FUNCTION myfunc_double RETURNS REAL SONAME
                  "udf_example.so";
mysql&#62; CREATE FUNCTION myfunc_int RETURNS INTEGER SONAME
                  "udf_example.so";
mysql&#62; CREATE FUNCTION lookup RETURNS STRING SONAME "udf_example.so";
mysql&#62; CREATE FUNCTION reverse_lookup RETURNS STRING SONAME
                  "udf_example.so";
</PRE>

<P>Функции могут быть удалены, используя <CODE>DROP FUNCTION</CODE>:</P>
<PRE>
mysql&#62; DROP FUNCTION metaphon;
mysql&#62; DROP FUNCTION myfunc_double;
mysql&#62; DROP FUNCTION myfunc_int;
mysql&#62; DROP FUNCTION lookup;
mysql&#62; DROP FUNCTION reverse_lookup;
</PRE>

<P>Инструкции <CODE>CREATE FUNCTION</CODE> и <CODE>DROP FUNCTION</CODE>
модифицируют системную таблицу <CODE>func</CODE> в базе данных
<CODE>mysql</CODE>. Имя функции, тип и общедоступное библиотечное имя будут
сохранено в таблице. Вы должны иметь привилегии <STRONG>insert</STRONG> и
<STRONG>delete</STRONG> для базы данных <CODE>mysql</CODE>, чтобы создавать и
удалять свои функции.</P>

<P>Вы не должны использовать <CODE>CREATE FUNCTION</CODE>, чтобы добавить
функцию, которая уже была создана. Если Вы должны повторно установить
функцию, сначала удалите ее через вызов <CODE>DROP FUNCTION</CODE> и затем
повторно установите ее с помощью <CODE>CREATE FUNCTION</CODE>. Вы должны
сделать это, например, если Вы откомпилировали новую версию Вашей функции,
чтобы <CODE>mysqld</CODE> обновил используемую им версию. Иначе сервер
продолжит применять старую версию.</P>

<P>Активные функции будут перезагружены при каждом перезапуске сервера, если
Вы не запускаете <CODE>mysqld</CODE> с опцей <CODE>--skip-grant-tables</CODE>.
В этом случае инициализация UDF будет пропущена, а UDF-функции станут
недоступными. Активная функция представляет собой функцию, загруженную через
<CODE>CREATE FUNCTION</CODE>, но не удаленную <CODE>DROP FUNCTION</CODE>.</P>

<H3><A NAME="Adding_native_function">9.1.3
Добавление новых встроенных функций</A></H3>
<P>Процедура для добавления новой встроенной функции описана ниже. Обратите
внимание, что Вы не можете добавлять встроенные функции к двоичному
дистрибутиву потому, что процедура включает изменение исходного текста MySQL.
Вы должны скомпилировать MySQL самостоятельно из исходников. Также обратите
внимание, что, если Вы мигрируете на другую версию MySQL (например, когда
новая версия выпущена), Вы будете должны повторить процедуру с новой версией.
</P>

<P>Чтобы добавить новую встроенную функцию MySQL, нужно:</P>

<OL><LI>Добавьте одну строку в файл <TT>lex.h</TT>, которая определяет имя
функции в массиве <CODE>sql_functions[]</CODE>.

<LI>Если функциональный прототип прост (берет не более трех параметров), Вы
должны в lex.h определить SYM(FUNC_ARG#) (здесь # является числом параметров)
как второй параметр в массиве <CODE>sql_functions[]</CODE> и добавить
функцию, которая создает функциональный объект, в <TT>item_create.cc</TT>.
Смотрите <CODE>"ABS"</CODE> и <CODE>create_funcs_abs()</CODE> как пример.
Если функциональный прототип усложнен (например, берет переменное число
параметров), Вы должны добавить две строки к <TT>sql_yacc.yy</TT>. Каждая
указывает символ препроцессора, который <CODE>yacc</CODE> должен определить
(это должно быть добавлено в начале файла). Затем определите функциональные
параметры и добавьте элемент с этими параметрами для правила синтаксического
анализа <CODE>simple_expr</CODE>. Для примера, проверьте все местонахождения
<CODE>ATAN</CODE> в <TT>sql_yacc.yy</TT>, чтобы увидеть, как это выполнено.

<LI>В <TT>item_func.h</TT> объявите наследование класса из
<CODE>Item_num_func</CODE> или <CODE>Item_str_func</CODE>, в зависимости от
того, возвращает ли Ваша функция число или строку.

<LI>В <TT>item_func.cc</TT> добавьте одно из следующих объявлений в
зависимости от того, определяете ли Вы числовую или строковую функцию:
<PRE>
double Item_func_newname::val()
longlong Item_func_newname::val_int()
String *Item_func_newname::Str(String *str)
</PRE>

Если Вы наследуете Ваш объект от любого из стандартных элементов (подобно
<CODE>Item_num_func</CODE>, Вы, вероятно, должны только определить одну из
вышеупомянутых функций и позволить родительскому объекту заботиться о других
функциях. Например, класс <CODE>Item_str_func</CODE> определяет функцию
<CODE>val()</CODE>, которая выполняет <CODE>atof()</CODE> на значении,
возвращенном <CODE>::str()</CODE>.

<LI>Вы должны, вероятно, также определить следующую объектную функцию:
<PRE>
void Item_func_newname::fix_length_and_dec()
</PRE>

Эта функция должна по крайней мере вычислить <CODE>max_length</CODE>, исходя
из данных параметров. <CODE>max_length</CODE> задает максимальное число
символов, которое функция может возвращать. Эта функция должна также
установить <CODE>maybe_null=0</CODE>, если основная функция не может
возвращать значение <CODE>NULL</CODE>. Функция может проверить, способен ли
любой из параметров возвращать <CODE>NULL</CODE>, проверяя переменную
параметров <CODE>maybe_null</CODE>. Вы можете изучить
<CODE>Item_func_mod::fix_length_and_dec</CODE> в качестве типичного примера
того, как все это сделать.</OL>

<P>Все функции должны быть поточно-безопасными (другими словами, не
используйте любые глобальные или статические переменные в функциях без того,
чтобы защитить их через mutex).</P>

<P>Если Вы хотите возвращать <CODE>NULL</CODE> из <CODE>::val()</CODE>,
<CODE>::val_int()</CODE> или <CODE>::str()</CODE> Вы должны установить
<CODE>null_value</CODE> в 1 и вернуть из функции 0.</P>

<P>Для объектной функции <CODE>::str()</CODE> имеются некоторые
дополнительные хитрости, которые надо знать:</P>

<UL><LI>Параметр <CODE>String *str</CODE> обеспечивает буфер строки, который
может использоваться, чтобы хранить результат. Для получения большего
количества информации относительно типа <CODE>String</CODE> обратитесь к
файлу <TT>sql_string.h</TT>.

<LI>Функция <CODE>::str()</CODE> должна возвратить строку, которая хранит
результат, или <CODE>(char*) 0</CODE>, если результатом является
<CODE>NULL</CODE>.

<LI>Все текущие функции строки не должны распределять никакую память, если
это не абсолютно необходимо!</UL>

<H2><A NAME="Adding_procedures">9.2 Добавление новых процедур в MySQL</A>
</H2>
<P>В MySQL Вы можете определять процедуру на C++, которая может обращаться и
изменять данные в запросе прежде, чем они отправятся к пользователю.
Модификация может быть выполнена на уровне строки или <CODE>GROUP BY</CODE>.
</P>

<P>Авторы пакета создали процедуру примера в MySQL Version 3.23, чтобы
показать Вам, что там может быть выполнено.</P>

<P>Дополнительно авторы рекомендуют Вам посмотреть файл mylua, который Вы
можете найти в каталоге Contrib. Вы можете использовать язык LUA, чтобы
загрузить процедуру в <CODE>mysqld</CODE> прямо во время выполнения.</P>

<H3><A NAME="procedure_analyse">9.2.1 Анализ процедур</A></H3>
<P><CODE>analyse([max elements,[max memory]])</CODE></P>
<P>Эта процедура определена в <TT>sql/sql_analyse.cc</TT>. Она исследует
результат, полученный из Вашего запроса, и возвращает анализ результатов:</P>

<UL><LI><CODE>max elements</CODE> (по умолчанию 256) задает максимальное
число разных значений, которые <CODE>analyse</CODE> заметит в столбце. Это
используется, чтобы проверить оптимальность применения типа <CODE>ENUM</CODE>.

<LI><CODE>max memory</CODE> (по умолчанию 8192) задает максимум памяти,
которую <CODE>analyse</CODE> должен распределить на столбец при попытке найти
все отличные значения.</UL>
<PRE>
SELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max elements,[max memory]])
</PRE>

<H3><A NAME="Writing_a_procedure" HREF="manual_t.htm#Writing_a_procedure">
9.2.2 Написание процедур</A></H3>
<P>На сегодняшний день единственной документацией для этого является
исходный код пакета.</P>

<P>Вы можете найти всю информацию относительно процедур, исследуя файлы:</P>
<UL><LI><TT>sql/sql_analyse.cc</TT>
<LI><TT>sql/procedure.h</TT>
<LI><TT>sql/procedure.cc</TT>
<LI><TT>sql/sql_select.cc</TT></UL>

<H2><A NAME="MySQL_internals">9.3 Начинка MySQL</A></H2>
<P>Эта глава описывает много вещей, которые Вы должны знать при работе на
коде MySQL. Если Вы планируете способствовать MySQL разработке, иметь доступ
к коду отлаживаемых версий или хотите только следить за разработкой,
поставьте дерево исходников для разработки. Если Вы заинтересованы внутренней
организацией MySQL, Вы должны также подписаться на специальный список
рассылки <a HREF="mailto:internals@lists.mysql.com">
internals@lists.mysql.com</a>.</P>

<H3><A NAME="MySQL_threads">9.3.1 Потоки в MySQL</A></H3>
<P>Сервер MySQL создает следующие потоки:</P>

<UL><LI>Поток TCP/IP-подключений обрабатывает все подключения, запрашивает и
создает новый специализированный поток, чтобы обработать авторизацию и
запросы SQL для каждого подключения.

<LI>В Windows NT имеется драйвер именованного канала, который делает ту же
самую работу, что и поток TCP/IP, но с запросами на именованном канале.

<LI>Поток сигнала обрабатывает все сигналы. Он также обычно обрабатывает
тревоги и вызывает <CODE>process_alarm()</CODE>, чтобы завершить подключения,
которые были неактивны слишком долго.

<LI>Если <CODE>mysqld</CODE> компилируется с <CODE>-DUSE_ALARM_THREAD</CODE>,
специализированный поток, который обрабатывает тревоги, будет создан. Это
используется только на некоторых системах, где имеются проблемы с
<CODE>sigwait()</CODE>, или если есть недостатки в применении кода
<CODE>thr_alarm()</CODE> в прикладной программе без специализированного
потока обработки сигнала.

<LI>Если использована опция <CODE>--flush_time=#</CODE>, будет создан еще
один специализированный поток, который сбрасывает таблицы на диск.
<LI>Каждое соединение обрабатывается своим потоком.
<LI>Каждая таблица, на которой использована инструкция <CODE>INSERT
DELAYED</CODE>, получает собственный поток.

<LI>Если Вы используете <CODE>--master-host</CODE>, будет запущен поток
репликации, чтобы читать и применять модификации с главного сервера.</UL>

<P><CODE>mysqladmin processlist</CODE> показывает только подключения, потоки
репликации и <CODE>INSERT DELAYED</CODE>.</P>

<H3><A NAME="MySQL_test_suite">9.3.2 Набор тестов MySQL</A></H3>
<P>До недавнего времени основной набор теста был основан на составляющих
собственность данных заказчика и по этой причине не был публично доступен.
Единственный публично доступная часть процесса тестирования состояла из теста
<CODE>crash-me</CODE>, эталонного теста Perl DBI/DBD, находящегося в каталоге
<CODE>sql-bench</CODE>, и разнообразных тестов, размещенных в каталоге
<CODE>tests</CODE>. Отсутствие стандартизированного публично доступного
набора тестов сделало трудным для пользователей и разработчиков тестирование
кода MySQL. Чтобы исправить эту ситуацию, авторы пакета создали совершенно
новую систему тестов, которая теперь включена в исходные и двоичные
дистрибутивы, начиная с Version 3.23.29.</P>

<P>Текущий набор тестов не проверяет все в MySQL, но должен охватить наиболее
очевидные ошибки в обработка кода SQL, OS/library проблемы и тестирование
репликации. Конечная цель состоит в том, чтобы иметь тесты, покрывающие
100% кода. Вы можете предоставить тесты, которые исследуют функциональные
возможности, критичные для Вашей системы, поскольку это гарантирует, что все
будущие выпуски MySQL будут хорошо работать с Вашими прикладными программами.
</P>

<H4><A NAME="running_mysqltest">9.3.2.1 Запуск набора тестов MySQL</A></H4>
<P>Система теста состоит из интерпретатора языков тестов
(<CODE>mysqltest</CODE>), скрипта оболочки, чтобы выполнить все тесты
(<CODE>mysql-test-run</CODE>), фактических случаев тестов, написанных на
специальном языке тестов и их ожидаемых результатов. Чтобы выполнить набор
теста на Вашей системе после построения, введите <CODE>make test</CODE> или
<CODE>mysql-test/mysql-test-run</CODE> из корневого каталога исходных
текстов. Если Вы установили двоичный дистрибутив, перейдите в корень
установки (например, <CODE>/usr/local/mysql</CODE>) и скомандуйте
<CODE>scripts/mysql-test-run</CODE>. Все тесты должны выполниться. Если этого
не произошло, пропобуйте выяснить почему и сообщите о проблеме, если это
ошибка в пакете MySQL.</P>

<P>Если Вы имеете копию <CODE>mysqld</CODE> на машине, где Вы хотите
выполнить набор тестов, Вы не должны останавливать ее, если она не использует
порты <CODE>9306</CODE> и <CODE>9307</CODE>. Если один из этих портов
применяется, Вы должны отредактировать <CODE>mysql-test-run</CODE> и изменить
значения главного или подчиненного порта к тому, которое является доступным.
</P>

<P>Вы можете запустить индивидуально каждый тест командой
<CODE>mysql-test/mysql-test-run test_name</CODE>.</P>

<P>Если один тест свалился, проверьте работу <CODE>mysql-test-run</CODE> с
опцией <CODE>--force</CODE>, чтобы проверить, сбоят ли любые другие тесты.
</P>

<H4><A NAME="extending_mysqltest">9.3.2.2 Расширение набора тестов MySQL</A>
</H4>
<P>Вы можете использовать язык <CODE>mysqltest</CODE>, чтобы писать Ваши
собственные случаи теста. К сожалению, авторы пакета еще не написали полную
документацию для него. Вы можете, однако, рассматривать текущие случаи теста
и использовать их как пример. Следующие пункты должны помочь Вам:</P>

<UL><LI>Тесты находятся в каталоге <CODE>mysql-test/t/*.test</CODE>
<LI>Случай теста состоит из завершенной точкой с запятой (<CODE>;</CODE>)
инструкции и подобен вводу клиента командной строки <CODE>mysql</CODE>.
Инструкция по умолчанию: запрос, который будет послан серверу MySQL, если он
не распознан как внутренняя команда (например, <CODE>sleep</CODE>).

<LI>Все запросы, которые производят результаты, например,
<CODE>SELECT</CODE>, <CODE>SHOW</CODE>, <CODE>EXPLAIN</CODE> и прочие, нужно
предварить указанием <CODE>@/path/to/result/file</CODE>. Файл должен
содержать ожидаемые результаты. Простой способ генерировать файл результата
состоит в том, чтобы выполнить <CODE>mysqltest -r &#60;
t/test-case-name.test</CODE> из каталога <CODE>mysql-test</CODE>, а затем
отредактировать сгенерированные файлы результата, если необходимо
скорректировать их к ожидаемому выводу. В этом случае будьте очень осторожны
относительно добавления или удаления любых невидимых символов. Если Вы должны
вставить строку, удостоверьтесь, что поля отделяются позициями табуляции, и
имеется табуляция в конце. Вы можете использовать <CODE>od -c</CODE>, чтобы
удостовериться, что Ваш текстовый редактор не добавляет что-нибудь
неожиданное в течение процесса редактирования.

<LI>Чтобы все соответствовало установке, Вы должны поместить Ваши файлы
результата в каталог <CODE>mysql-test/r</CODE> и назвать их как
<CODE>test_name.result</CODE>. Если тест производит больше, чем один
результат, Вы должны использовать <CODE>test_name.a.result</CODE>,
<CODE>test_name.b.result</CODE> и так далее.

<LI>Если инструкция возвращает ошибку, Вы должны на строке перед ней указать
<CODE>--error error-number</CODE>. Здесь error-number может быть списком
возможных кодов ошибок, отделяемых запятыми (<CODE>,</CODE>).

<LI>Если Вы записываете случай теста репликации, Вы должны в первой строке
файла теста помещать <CODE>source include/master-slave.inc;</CODE>. Чтобы
переключаться между главной и подчиненной системами, используйте
<CODE>connection master;</CODE> и <CODE>connection slave;</CODE>. Если Вы
должны делать что-то на альтернативном подключении, Вы можете сделать
подключение <CODE>connection master1;</CODE> для главной и
<CODE>connection slave1;</CODE> для подчиненной системы.

<LI>Если Вы должны делать что-то в цикле, Вы можете использовать:
<PRE>
let $1=1000;
while ($1)
{
  # Выполняем здесь запрос.
  dec $1;
}
</PRE>

<LI>Чтобы бездействовать между запросами, используйте команду
<CODE>sleep</CODE>. Она поддерживает доли секунды, так что Вы можете указать
<CODE>sleep 1.3;</CODE>, например, чтобы бездействовать 1.3 секунды.

<LI>Чтобы выполнять подчиненного с дополнительными параметрами для Вашего
случая теста, поместите их в формате командной строки в
<CODE>mysql-test/t/test_name-slave.opt</CODE>. Для главной системы поместите
их в файл <CODE>mysql-test/t/test_name-master.opt</CODE>.

<LI>Если Вы имеете вопрос относительно набора теста или случай теста, который
может пригодиться всем, напишите об этом на
<a HREF="mailto:internals@lists.mysql.com">internals@lists.mysql.com</a>.
Поскольку список не принимает вложения, Вы должны закачать по ftp все
релевантные файлы на ftp://support.mysql.com/pub/mysql/Incoming.</UL>

<H4><A NAME="Reporting_mysqltest_bugs">9.3.2.3 Как сообщать об ошибках в
наборе тестов MySQL</A></H4>
<P>Если Ваша версия MySQL не выполняет набор тестов, Вы должны сделать так:
</P>

<UL><LI>Не торопитесь посылать отчет об ошибке! Сначала разберитесь толком,
что там у Вас происходит и почему. Если отчет все-таки придется послать,
пожалуйста, используйте для его генерации скрипт <CODE>mysqlbug</CODE>, чтобы
разработчики могли получить информацию относительно Вашей
системы и версии MySQL.

<LI>Удостоверьтесь, что включили вывод <CODE>mysql-test-run</CODE> и
содержание всех <CODE>.reject</CODE> файлов в каталоге
<CODE>mysql-test/r</CODE>.

<LI>Если тест валится в наборе, проверьте, что с ним будет происходить при
непосредственном запуске командой:
<PRE>
cd mysql-test
mysql-test-run --local test-name
</PRE>

Если это терпит неудачу, то сконфигурируйте MySQL с опцией
<CODE>--with-debug</CODE> и выполните <CODE>mysql-test-run</CODE> с опцией
<CODE>--debug</CODE>. Если это также терпит неудачу, закачайте файл
трассировки <TT>var/tmp/master.trace</TT> на
ftp://support.mysql.com/pub/mysql/secret, чтобы авторы могли исследовать это.
Пожалуйста, не забудьте также включить полное описание Вашей системы, версию
mysqld и параметры компиляции.

<LI>Попробуйте также выполнить <CODE>mysql-test-run</CODE> с опцией
<CODE>--force</CODE>, чтобы увидеть, имеется ли любой другой тест, который
тоже терпит неудачу.

<LI>Если Вы компилировали MySQL самостоятельно, изучите руководство на
предмет того, как компилировать MySQL на Вашей платформе или, что
предпочтительно, используйте один из готовых двоичных дистрибутивов, который
уже откомпилирован и может быть скачан с
<a HREF="../../../www.mysql.com/downloads">http://www.mysql.com/downloads</a>.
Все стандартные двоичные файлы должны проходить тестирование.

<LI>Если Вы получаете ошибку, подобно <CODE>Result length mismatch</CODE> или
<CODE>Result content mismatch</CODE>, это означает, что вывод теста не
соответствовал точно ожидаемому выводу. Это может быть ошибкой в MySQL, или
дело в том, что Ваша версия mysqld производит малость иные результаты при
некоторых обстоятельствах. Неудачные результаты теста будут помещены в файл с
тем же самым основным именем, что и файл результата, но с расширением
<CODE>.reject</CODE>. Если Ваш случай теста терпит неудачу, Вы должны
сравнить два файла. Если Вы не можете увидеть, чем они отличаются, исследуйте
их с помощью <CODE>od -c</CODE> и проверьте их длины.

<LI>Если тест терпит неудачу полностью, Вы должны проверить журналы в
каталоге <CODE>mysql-test/var/log</CODE> для выяснения того, что не так.

<LI>Если Вы компилировали MySQL с отладкой, можно попробовать отлаживать
тест запуском <CODE>mysql-test-run</CODE> с опциями <CODE>--gdb</CODE> и/или
<CODE>--debug</CODE>. Если Вы не компилировали MySQL для отладки, вероятно,
стоит сделать это. Только определите параметр <CODE>--with-debug</CODE>
для вызова <CODE>configure</CODE>!</UL>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value);
return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br/>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>

<tr><td><input type="submit" value="Найти" style="font-size: 9pt"></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>


</BODY>
</HTML>
