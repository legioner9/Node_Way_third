<html>
<head>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <meta http-equiv="Content-Type" content="text/html; charset=koi8-r">
  <title>Глава 3. Операции CRUD</title>
  <meta name="generator" content="DocBook XSL Stylesheets V1.79.1">
</head>

<body>
<script type="text/javascript">
nN = navigator.appName;
function fsearch(str)
{
  if (document.fform.myradio[0].checked) {
     open('../../../yandex.ru/sitesearch@text=' + str + '&site=' +
          document.location.hostname);
  } else {open('../../../yandex.ru/sitesearch@text=' + str);}
}

function MouseUpHandler(e)
{
  if (nN == 'Netscape' || nN == 'Opera') {
     if (document.getSelection()) {
        str = document.getSelection();
        newstr = str.replace(/\n+/g, ' ');
        str = newstr.replace(/\ +/g, ' ');
        if (str.length > 100) {
           var i;
           i = 0;
           str = str.slice(0, 100);
           i = str.lastIndexOf(' ');
           if (i > 0){str = str.slice(0, i);}
        }
        document.fform.strf.value = str;
     }
  } else if(nN == 'Microsoft Internet Explorer') {
    if (document.selection.createRange()) {
       var range = document.selection.createRange();
       var str = range.text;
    }
    if (str) {
       str = str.replace(/\ +/g, " ");
       document.fform.strf.value = str;
    }
  }
  return true;
}
if (window.Event) {document.captureEvents(Event.MOUSEUP);}
document.onmouseup = MouseUpHandler;
</script>

<center><table><tr><td><a href="../../default.htm">
<IMG SRC="../../img/b_book.gif" ALT="RussianLDP" HEIGHT=48 WIDTH=55
ALIGN=ABSCENTER></a></td>

<td><!--Rating@Mail.ru COUNTEr-->
<a target=_top href="../../../top.mail.ru/jump@from=1364238">
<img src="../../../d1.cd.b4.a1.top.list.ru/counter@id=1364238;t=230"
border=0 height=31 width=88 alt="Рейтинг@Mail.ru"/></a>
</td><!--/COUNTER-->

<td><!-- begin of Top100 code -->
<script id="top100Counter" type="text/javascript"
src="../../../cnt.rambler.ru/top100.jcn@1448139"></script>
<noscript><a href="../../../top100.rambler.ru/top100/default.htm">
<img src="../../../cnt.rambler.ru/top100.cnt@1448139" alt="Rambler's Top100"
width="81" height="63" border="0" /></a></noscript>
<!-- end of Top100 code --></td>

<td><!-- HotLog -->
<script type="text/javascript" language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=525943&im=127&r="+escape(document.referrer)+
"&pg="+escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
<script type="text/javascript" language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")
</script>

<script type="text/javascript" language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script>

<script type="text/javascript" language="javascript1.3">
hotlog_js="1.3"</script>
<script type="text/javascript" language="javascript">
hotlog_r+="&js="+hotlog_js;
document.write("<a href='../../../click.hotlog.ru/@525943' target='_top'>
<img "+" src='http://hit27.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog><\/a>")</script>

<noscript>
<a href="../../../click.hotlog.ru/@525943" target="_top">
<img src="../../../hit27.hotlog.ru/cgi-bin/hotlog/count@s=525943&im=127"
border="0" width="88" height="31" alt="HotLog"></a></noscript></td>
<!-- /HotLog -->

<td><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='../../../www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t52.15;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+"' alt='' title='LiveInternet: показано число просмотров и"+
" посетителей за 24 часа' "+"border=0 width=88 height=31><\/a>")//-->
</script></td></tr>
<!--/LiveInternet-->

<tr><td><FONT SIZE=-1><b>WebMoney:&nbsp;</b><br>
WMZ Z294115950220&nbsp;<br>
WMR R409981405661&nbsp;<br>
WME E134003968233&nbsp;</FONT></td>

<td><FONT SIZE=-1><b>Visa&nbsp;</b><br>
4274 3200 2453 6495&nbsp;</FONT></td>
</tr></table></center>
<P><index><table><tr><td>

<h1><a name="devapi-users-crud-operations"></a>Глава 3. Операции CRUD</h1>
<p>Этот раздел объясняет, как использовать X DevAPI для операций Create,
Read, Update и Delete (CRUD).</p>

<p>Основная область MySQL всегда работала с относительными таблицами.
X DevAPI расширяет эту область, добавляя поддержку операций CRUD, которыми
можно управлять для коллекций документов.</p>

<h2><a name="crud-operations-overview"></a>3.1. Обзор операций CRUD</h2>
<p>Операции CRUD доступны как методы, которые воздействуют на объекты схемы.
Доступные объекты схемы состоят из объектов коллекции, содержащих документы
или объекты таблицы, состоящие из строк и столбцов.</p>

<p>Следующая таблица показывает доступные операции CRUD для объектов
коллекции и для объектов таблицы.</p>

<table border="1">
<thead><tr><th scope="col"><p>Операция</p></th>
<th scope="col"><p>Документ</p></th>
<th scope="col"><p>Таблица</p></th></tr></thead>
<tbody><tr><td scope="row"><p>Create</p></td>
<td><p><a href="working.htm#collection-add">Collection.add()</a></p></td>
<td><p><a href="relat.htm#table-insert">Table.insert()</a></p></td></tr>
<tr><td scope="row"><p>Read</p></td>
<td><p><a href="working.htm#collection-find">Collection.find()</a></p></td>
<td><p><a href="relat.htm#table-select">Table.select()</a></p></td></tr>
<tr><td scope="row"><p>Update</p></td>
<td><p><a href="working.htm#collection-modify">Collection.modify()</a></td>
<td><p><a href="relat.htm#table-update">Table.update()</a></p></td></tr>
<tr><td scope="row"><p>Delete</p></td>
<td><p><a href="working.htm#collection-remove">Collection.remove()</a></td>
<td><p><a href="relat.htm#table-delete">Table.delete()</a></p></td>
</tr></tbody></table>

<h3><a name="database-object-classes"></a>Классы объекта базы данных</h3>
<p><b>Рис. 3.1. Диаграмма классов</b></p>
<img src="images/plantuml-3fb9f98a36e345d538e7df2235eac467f1246121.png"
width="688" height="392"><br class="figure-break">

<h2><a name="method-chaining"></a>3.2. Формирование цепочки метода</h2>
<p>X DevAPI поддерживает много современных методов, чтобы сделать работу с
операциями CRUD легче и соответствовать современным средам разработки.
Эта секция объясняет, как использовать формирование цепочки метода вместо
того, чтобы работать со строками SQL структур JSON.</p>

<p>Следующие примеры показывают, как формирование цепочки метода
используется вместо последовательности SQL, работая с сессиями.
Пример предполагает, что испытательная схема существует, и
список сотрудников существует.</p>

<p><span class="strong"><strong>MySQL Shell JavaScript Code</strong></span>
</p>
<pre class="programlisting">
// New method chaining used for executing an SQL SELECT statement
// Recommended way for executing queries
var employees = db.getTable('employee');

var res = employees.select(['name', 'age']).
where('name like :param').
orderBy(['name']).
bind('param', 'm%').execute();

// Traditional SQL execution by passing an SQL string
// It should only be used when absolutely necessary
var result = session.sql('SELECT name, age ' +
    'FROM employee ' +
    'WHERE name like ? ' +
    'ORDER BY name').bind('m%').execute();
</pre>

<p><span class="strong"><strong>MySQL Shell Python Code</strong></span></p>
<pre class="programlisting">
# New method chaining used for executing an SQL SELECT statement
# Recommended way for executing queries
employees = db.get_table('employee')

res = employees.select(['name', 'age']) \
  .where('name like :param') \
  .order_by(['name']) \
  .bind('param', 'm%').execute()

# Traditional SQL execution by passing an SQL string
# It should only be used when absolutely necessary
result = session.sql('SELECT name, age ' +
  'FROM employee ' +
  'WHERE name like ? ' +
  'ORDER BY name').bind('m%').execute()
</pre>

<p><span class="strong"><strong>Node.js JavaScript Code</strong></span></p>
<pre class="programlisting">
// New method chaining used for executing an SQL SELECT statement
// Recommended way for executing queries
var employees = db.getTable('employee');
var promise = employees.select('name', 'age')
  .where('name like :name')
  .orderBy('name')
  .bind('m%')
  .execute();

// Traditional SQL execution by passing an SQL string
var sqlString = 'SELECT name, age ' +
  'FROM employee ' +
  'WHERE name like ? ' +
  'ORDER BY name';
var promise = db.executeSql(sqlString, 'm%').execute();
</pre>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
// New method chaining used for executing an SQL SELECT statement
// Recommended way for executing queries
var employees = db.GetTable("employee");

var res = employees.Select("name", "age")
  .Where("name like :param")
  .OrderBy("name")
  .Bind("param", "m%").Execute();

// Traditional SQL execution by passing an SQL string
// It should only be used when absolutely necessary
var result = session.SQL("SELECT name, age " +
  "FROM employee " +
  "WHERE name like ? " +
  "ORDER BY name").Bind("m%").Execute();
</pre>

<p><span class="strong"><strong>Python Code</strong></span></p>
<pre class="programlisting">
# Connector/Python
# New method chaining used for executing an SQL SELECT statement
# Recommended way for executing queries
employees = db.get_table('employee')

res = employees.select(['name', 'age']) \
  .where('name like :param') \
  .order_by(['name']) \
  .bind('param', 'm%').execute()

# Traditional SQL execution by passing an SQL string
# It should only be used when absolutely necessary
result = session.sql('SELECT name, age ' +
  'FROM employee ' +
  'WHERE name like ? ' +
  'ORDER BY name').bind('m%').execute()
</pre>

<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
// New method chaining used for executing an SQL SELECT statement
// Recommended way for executing queries
Table employees = db.getTable("employee");

RowResult res = employees.select("name, age")
  .where("name like :param")
  .orderBy("name")
  .bind("param", "m%").execute();

// Traditional SQL execution by passing an SQL string
// It should only be used when absolutely necessary
SqlResult result = session.sql("SELECT name, age " +
  "FROM employee " +
  "WHERE name like ? " +
  "ORDER BY name").bind("m%").execute();
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
// New method chaining used for executing an SQL SELECT statement
// Recommended way for executing queries
Table employees = db.getTable("employee");

RowResult res = employees.select("name", "age")
  .where("name like :param")
  .orderBy("name")
  .bind("param", "m%").execute();

// Traditional SQL execution by passing an SQL string
// It should only be used when absolutely necessary
RowResult result = session.sql("SELECT name, age "
  "FROM employee "
  "WHERE name like ? "
  "ORDER BY name").bind("m%").execute();
</pre>

<h2><a name="synchronous-vs-asynchronous-execution"></a>
3.3. Синхронное выполнение против асинхронного</h2>
<p>Традиционно многие драйверы MySQL использовали синхронный подход, выполняя
SQL-операторы. Это означало, что операции, такие как открытие соединения
и выполнение запросов, были заблокированы до завершения, которое могло занять
много времени. Чтобы допускать параллельное выполнение, разработчик должен
был написать многопоточное приложение.</p>

<p>Любой клиент MySQL, который поддерживает X-протокол, может обеспечить
асинхронное выполнение, явно ожидая определенный результат, когда это на
самом деле необходимо.</p>
<p>MySQL Shell не поддерживает асинхронные операции.</p>

<h3><a name="asynchronous-operations"></a>Асинхронные операции</h3>
<p>Использование отзывов очень распространенный способ осуществить
асинхронные операции. Когда функция обратного вызова определяется, операция
CRUD не блокируется, что означает, что следующий запрос немедленно вызывают
даже при том, что результат из базы данных еще не был получен.
Только когда результат доступен, является обратным вызовом.</p>

<p><span class="strong"><strong>Node.js JavaScript Code</strong></span></p>
<pre class="programlisting">
var employees = db.getTable('employee');
employees.select('name', 'age')
.where('name like :name')
.orderBy('name')
.bind('name', 'm%')
.execute(function (row) {
  // do something with a row
})
.catch(err) {
  // Handle error
});
</pre>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
var employees = db.GetTable("employee");

var select = employees.Select("name", "age")
.Where("name like :name")
.OrderBy("name")
.Bind("name", "m%")
.ExecuteAsync();

select.ContinueWith(t =&gt;
{
  if (t.Exception != null)
  {
     // Handle error
  }
  // Do something with the resultset
});
</pre>

<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
Table employees = db.getTable("employee");

// execute the query asynchronously, obtain a future
CompletableFuture&lt;RowResult&gt; rowsFuture = employees.select("name","age")
.where("name like :name")
.orderBy("name")
.bind("name", "m%").executeAsync();
// dependent functions can be attached to the CompletableFuture
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
// Asynchronous execution is not yet implemented in Connector/C++
</pre>

<h3><a name="asynchronous-operations-using-awaits"></a>
Асинхронные операции с применением Awaits</h3>
<p>Такие языки, как C#, могут использовать шаблон async/await.</p>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
Task&lt;RowResult&gt; getEmployeesTask = employees.Select("name", "age")
.Where("name like :name").OrderBy("name")
.Bind("name", "m%").ExecuteAsync();

// Do something else while the getEmployeesTask is executing in the background
// at this point we are ready to get our results back. If it is not done,
// this will block until done
RowResult res = await getEmployeesTask;

foreach (var row in res.FetchAll())
{
  // use row object
}
</pre>

<p>Connector/Node.js применяет асинхронные операции через Promises
для всех сетевых действий.</p>
<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
Table employees = db.getTable("employee");

// execute the query asynchronously, obtain a future
CompletableFuture&lt;RowResult&gt; rowsFuture = employees.select("name", "age")
.where("name like :name")
.orderBy("name")
.bind("name", "m%").executeAsync();

// wait until it's ready
RowResult rows = rowsFuture.get();
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
// Asynchronous execution is not yet implemented in Connector/C++
</pre>

<h3><a name="syntax-differences"></a>Различия в синтаксисе</h3>
<p>В зависимости от языка, который вы используете, X DevAPI может осуществить
такую функцию, как <code class="literal">executeAsync()</code> в обмен на
<code class="literal">execute([mysqlx.Async])</code> или в дополнение
<code class="literal">execute([mysqlx.Async])</code>.</p>

<p>Например, в контексте Node.js все выполнение асинхронное.
Поэтому Connector/Node.js не должен различать
<code class="literal">execute()</code> и
<code class="literal">executeAsync()</code>.
Чтобы обозначить асинхронное выполнение по умолчанию, Connector/Node.js
осуществляет только <code class="literal">execute()</code>, который
возвращает объекты JavaScript Promise.</p>

<p>Языки программирования со строгим контролем типов, такие как Ява или C#,
могут использовать в своих интересах наличие двух отчетливо названных вызовов
API синхронного и асинхронного выполнения. У двух запросов могут быть
различные типы возврата. Например, Connector/J может использовать
<code class="literal">execute()</code>, чтобы вернуть
<code class="literal">RowResult</code> или
<code class="literal">DocResult</code> и
<code class="literal">executeAsync()</code>, чтобы вернуть
<code class="literal">CompletableFuture&lt;T&gt;</code>,
параметр типа один из типов результата.</p>

<h2><a name="parameter-binding"></a>3.4. Привязка параметров</h2>
<p>Вместо того, чтобы использовать значения непосредственно в
последовательности выражения, хорошая практика отделить их
от последовательности выражения. Это сделано, используя параметры в
последовательности выражения и функцию <code class="literal">bind()</code>,
чтобы связать их с параметрами.</p>

<p>Параметры могут быть определены следующими
способами: анонимный и названный.</p>
<table class="informaltable" border="1">
<thead><tr><th scope="col"><p>Тип параметра</p></th>
<th scope="col"><p>Синтаксис</p></th>
<th scope="col"><p>Пример</p></th>
<th scope="col"><p>Позволен в операциях CRUD</p></th>
<th scope="col"><p>Позволен в строках SQL</p></th></tr></thead>
<tbody><tr><td scope="row"><p>Анонимный</p></td><td><p>?</p></td>
<td><p>'age &gt; ?'</p></td><td><p>Нет</p></td><td><p>Да</p></td></tr>
<tr><td scope="row"><p>Названный</p></td><td><p>:&lt;name&gt;</p></td>
<td><p>'age &gt; :age'</p></td><td><p>Да</p></td>
<td><p>Нет</p></td></tr></tbody></table>

<p>Следующий пример показывает, как использовать функцию
<code class="literal">bind()</code> перед
<code class="literal">execute()</code>. Для каждого названного параметра
обеспечьте аргумент для <code class="literal">bind()</code>,
который содержит название параметра и его значение.
Порядок, в котором пары значения параметра переданы
<code class="literal">bind()</code> неважен. Пример предполагает, что
испытательная схема была назначена на переменную
<code class="literal">db</code>, и что коллекция
<code class="literal">my_collection</code> есть.</p>

<p><span class="strong"><strong>MySQL Shell и Node.js JavaScript
</strong></span></p>
<pre class="programlisting">
// Collection.find() function with fixed values
var myColl = db.getCollection('my_collection');
var myRes1 = myColl.find('age = 18').execute();

// Using the .bind() function to bind parameters
var myRes2 = myColl.find('name = :param1 AND
                         age = :param2').bind('param1','Rohit').
                    bind('param2', 18).execute();
// Using named parameters
myColl.modify('name = :param').set('age', 55).
bind('param', 'Nadya').execute();

// Binding works for all CRUD statements except add()
var myRes3 = myColl.find('name like :param').
bind('param', 'R%').execute();
</pre>

<p>Управляя этим с Connector/Node.js надо знать, что
<code class="literal">execute()</code> вернет Promise.
Вы могли бы хотеть проверить результаты, чтобы избежать ошибок.</p>

<p><span class="strong"><strong>MySQL Shell Python Code</strong></span></p>
<pre class="programlisting">
# Collection.find() function with hardcoded values
myColl = db.get_collection('my_collection')
myRes1 = myColl.find('age = 18').execute()

# Using the .bind() function to bind parameters
myRes2 = myColl.find('name = :param1 AND age = :param2').
                bind('param1','Rohit').bind('param2', 18).execute()
# Using named parameters
myColl.modify('name = :param').set('age', 55).bind('param', 'Nadya').execute()
# Binding works for all CRUD statements except add()
myRes3 = myColl.find('name like :param').bind('param', 'R%').execute()
</pre>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
// Collection.Find() function with fixed values
var myColl = db.GetCollection("my_collection");
var myRes1 = myColl.Find("age = 18").Execute();
// Using the .Bind() function to bind parameters
var myRes2 = myColl.Find("name = :param1 AND age = :param2").
                    Bind("param1", "Rohit").Bind("param2", 18).Execute();

// Using named parameters
myColl.Modify("name = :param").Set("age", 55).
       Bind("param", "Nadya").Execute();
// Binding works for all CRUD statements except Add()
var myRes3 = myColl.Find("name like :param").Bind("param", "R%").Execute();
</pre>

<p><span class="strong"><strong>Python Code</strong></span></p>
<pre class="programlisting">
# Collection.find() function with hardcoded values
my_coll = my_schema.get_collection('my_collection')
my_res_1 = my_coll.find('age = 18').execute()
# Using the .bind() function to bind parameters
my_res_2 = my_coll.find('name = :param1 AND age = :param2').
                   bind('param1', 'Rohit').bind('param2', 18).execute()

# Using named parameters
my_coll.modify('name = :param').set('age', 55).bind('param', 'Nadya').execute()
# Binding works for all CRUD statements except add()
my_res_3 = my_coll.find('name like :param').bind('param', 'R%').execute()
</pre>

<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
// Collection.find() function with fixed values
Collection myColl = db.getCollection("my_collection");
DocResult myRes1 = myColl.find("age = 18").execute();

// Using the .bind() function to bind parameters
DocResult myRes2 = myColl.find("name = :param1 AND age = :param2").
                          bind("param1", "Rohit").bind("param2", 18).execute();
// Using named parameters
myColl.modify("name = :param").set("age", 55).bind("param", "Nadya").execute();

// Using named parameters with a Map
Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();
params.put("name", "Nadya");
myColl.modify("name = :name").set(".age", 55).bind(params).execute();

// Binding works for all CRUD statements except add()
DocResult myRes3 = myColl.find("name like :param").
                          bind("param", "R%").execute();}
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
/// Collection.find() function with fixed values
Collection myColl = db.getCollection("my_collection");
auto myRes1 = myColl.find("age = 18").execute();

// Using the .bind() function to bind parameters
auto myRes2 = myColl.find("name = :param1 AND age = :param2").
                     bind("param1","Rohit").bind("param2", 18).execute();

// Using named parameters
myColl.modify("name = :param").set("age", 55).bind("param", "Nadya").execute();
// Binding works for all CRUD statements except add()
auto myRes3 = myColl.find("name like :param").bind("param", "R%").execute();
</pre>

<p>Анонимные заполнители не поддерживаются в X DevAPI.
Это ограничение улучшает кодовую ясность в цепях команды CRUD с
многочисленными методами, используя заполнители. Независимо от варианта
синтаксиса <code class="literal">bind()</code>, всегда является ясной
ассоциацией между параметрами и заполнителями на основе названия параметра.
</p>

<p>Все методы CRUD командуют формой цепочки в одном пространстве
имен для заполнителей. В следующем примере
<code class="literal">find()</code> и <code class="literal">fields()</code>
связаны цепочкой. Оба метода берут выражение с заполнителями.
Заполнители относятся к одному объединенному пространству имен.
Оба метода используют один названный заполнитель
<code class="literal">:param</code>. Единственный вызов
<code class="literal">bind()</code> с одним параметром, передаваемым по
значению имени для <code class="literal">:param</code>
используется, чтобы назначить значение заполнителя на оба экземпляра
<code class="literal">:param</code> в <code class="literal">find()</code> и
<code class="literal">fields().</code></p>

<p><span class="strong"><strong>MySQL Shell JavaScript Code</strong></span>
</p>
<pre class="programlisting">
// one bind() per parameter
var myColl = db.getCollection('relatives');
var juniors = myColl.find('alias = "jr"').execute().fetchAll();

for (var index in juniors) {
  myColl.modify('name = :param').
  set('parent_name',mysqlx.expr(':param')).
  bind('param', juniors[index].name).execute();
}
</pre>

<p><span class="strong"><strong>MySQL Shell Python Code</strong></span></p>
<pre class="programlisting">
# one bind() per parameter
myColl = db.get_collection('relatives')
juniors = myColl.find('alias = "jr"').execute().fetch_all()

for junior in juniors:
myColl.modify('name = :param'). \
  set('parent_name',mysqlx.expr(':param')). \
  bind('param', junior.name).execute()
</pre>

<p><span class="strong"><strong>Node.js JavaScript Code</strong></span></p>
<pre class="programlisting">
// one bind() per parameter
db
.getCollection('relatives');
.find('alias = "jr"')
.execute(function (junior) {
  return myColl
  .modify('name = :param')
  .set('parent_name', mysqlx.expr(':param'))
  .bind('param', junior.name)
  .execute();
});
</pre>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
// one bind() per parameter
myColl.Find("a = :param").Fields(":param as b")
.Bind(new { param = "c"}).Execute();
</pre>

<p><span class="strong"><strong>Python Code</strong></span></p>
<pre class="programlisting">
# one bind() per parameter
my_coll = my_schema.get_collection('relatives')
juniors = my_coll.find('alias = "jr"').execute().fetch_all()

for junior in juniors:
my_coll.modify('name = :param') \
  .set('parent_name', mysqlx.expr(':param')) \
  .bind('param', junior.name).execute()
</pre>

<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
// one bind() per parameter
myColl.find("a = :param").fields(":param as b")
.bind("param", "c").execute();
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
// one bind() per parameter
Collection myColl = db.getCollection("relatives");
DocResultjuniors = myColl.find("alias = 'jr'").execute();

DbDoc junior;
while ((junior = juniors.fetchOne()))
{
  myColl.modify("name = :param")
  .set("parent_name", expr(":param"))
  .bind("param", junior["name"]).execute();
}
</pre>

<p>Не разрешено для названного параметра использовать имя, которое
начинается с цифры. Например, запрещены <code class="literal">:1one</code> и
<code class="literal">:1</code>.</p>

<h3><a name="preparing-crud-statements"></a>Подготовка запросов CRUD</h3>
<p>Вместо непосредственной связи и выполнения операций CRUD с
<code class="literal">bind()</code> и <code class="literal">execute()</code>
или <code class="literal">execute()</code> также возможно сохранить объект
операции CRUD в переменной для более позднего выполнения.</p>

<p>Преимущество такого выполнения в том, что можно
связать несколько наборов переменных к параметрам, определенным в
последовательностях выражения и поэтому получить лучшую работу, выполняя
большое количество подобных операций. Пример предполагает, что испытательная
схема была назначена на переменную <code class="literal">db</code>
и что коллекция есть <code class="literal">my_collection</code>.</p>

<p><span class="strong"><strong>MySQL Shell JavaScript Code</strong></span>
</p>
<pre class="programlisting">
var myColl = db.getCollection('my_collection');
// Only prepare a Collection.remove() operation, but do not run it yet
var myRemove = myColl.remove('name = :param1 AND age = :param2');

// Binding parameters to the prepared function and .execute()
myRemove.bind('param1', 'Leon').bind('param2', 39).execute();
myRemove.bind('param1', 'Johannes').bind('param2', 28).execute();
// Binding works for all CRUD statements but add()
var myFind = myColl.find('name like :param1 AND age &gt; :param2');
var myDocs = myFind.bind('param1', 'L%').bind('param2', 18).execute();
var MyOtherDocs = myFind.bind('param1', 'J%').bind('param2', 25).execute();
</pre>

<p><span class="strong"><strong>MySQL Shell Python Code</strong></span></p>
<pre class="programlisting">
myColl = db.get_collection('my_collection')
# Only prepare a Collection.remove() operation, but do not run it yet
myRemove = myColl.remove('name = :param1 AND age = :param2')
# Binding parameters to the prepared function and .execute()
myRemove.bind('param1', 'Leon').bind('param2', 39).execute()
myRemove.bind('param1', 'Johannes').bind('param2', 28).execute()

# Binding works for all CRUD statements but add()
myFind = myColl.find('name like :param1 AND age &gt; :param2')
myDocs = myFind.bind('param1', 'L%').bind('param2', 18).execute()
MyOtherDocs = myFind.bind('param1', 'J%').bind('param2', 25).execute()
</pre>

<p><span class="strong"><strong>Node.js JavaScript Code</strong></span></p>
<pre class="programlisting">
var myColl = db.getCollection('my_collection');
// Only prepare a Collection.remove() operation, but do not run it yet
var myRemove = myColl.remove('name = :param1 AND age = :param2');

// Binding parameters to the prepared function and .execute()
myRemove.bind('param1', 'Leon').bind('param2', 39).execute();
myRemove.bind('param1', 'Johannes').bind('param2', 28).execute();

// Binding works for all CRUD statements but add()
var myFind = myColl.find('name like :param1 AND age &gt; :param2');
var myDocs = myFind.bind('param1', 'L%').bind('param2', 18).execute();
var MyOtherDocs = myFind.bind('param1', 'J%').bind('param2', 25).execute();
</pre>

<p><span class="strong"><strong>C# Code</strong></span></p>
<pre class="programlisting">
var myColl = db.GetCollection("my_collection");
// Only prepare a Collection.Remove() operation, but do not run it yet
var myRemove = myColl.Remove("name = :param1 AND age = :param2");

// Binding parameters to the prepared function and .Execute()
myRemove.Bind("param1", "Leon").Bind("param2", 39).Execute();
myRemove.Bind("param1", "Johannes").Bind("param2", 28).Execute();

// Binding works for all CRUD statements but Add()
var myFind = myColl.Find("name like :param1 AND age &gt; :param2");
var myDocs = myFind.Bind("param1", "L%").Bind("param2", 18).Execute();
var MyOtherDocs = myFind.Bind("param1", "J%").Bind("param2", 25).Execute();
</pre>

<p><span class="strong"><strong>Python Code</strong></span></p>
<pre class="programlisting">
my_coll = my_schema.get_collection('my_collection')
# Only prepare a Collection.remove() operation, but do not run it yet
my_remove = my_coll.remove('name = :param1 AND age = :param2')

# Binding parameters to the prepared function and .execute()
my_remove.bind('param1', 'Leon').bind('param2', 39).execute()
my_remove.bind('param1', 'Johannes').bind('param2', 28).execute()

# Binding works for all CRUD statements but add()
my_find = my_coll.find('name like :param1 AND age &gt; :param2')
my_docs = my_find.bind('param1', 'L%').bind('param2', 18).execute()
my_other_docs = my_find.bind('param1', 'J%').bind('param2', 25).execute()
</pre>

<p><span class="strong"><strong>Java Code</strong></span></p>
<pre class="programlisting">
Collection myColl = db.getCollection("my_collection");
// Create Collection.remove() operation, but do not run it yet
RemoveStatement myRemove = myColl.remove("name = :param1 AND age = :param2");

// Binding parameters to the prepared function and .execute()
myRemove.bind("param1", "Leon").bind("param2", 39).execute();
myRemove.bind("param1", "Johannes").bind("param2", 28).execute();

// Binding works for all CRUD statements but add()
FindStatement myFind = myColl.find("name LIKE :name AND age &gt; :age");
Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();
params.put("name", "L%");
params.put("age", 18);
DocResult myDocs = myFind.bind(params).execute();
params.put("name", "J%");
params.put("age", 25);
DocResult myOtherDocs = myFind.bind(params).execute();
</pre>

<p><span class="strong"><strong>C++ Code</strong></span></p>
<pre class="programlisting">
Collection myColl = db.getCollection("my_collection");
// Create Collection.remove() operation, but do not run it yet
auto myRemove = myColl.remove("name = :param1 AND age = :param2");

// Binding parameters to the prepared function and .execute()
myRemove.bind("param1", "Leon").bind("param2", 39).execute();
myRemove.bind("param1", "Johannes").bind("param2", 28).execute();

// Binding works for all CRUD statements but Add()
auto myFind = myColl.find("name like :param1 AND age &gt; :param2");
auto myDocs = myFind.bind("param1", "L%").bind("param2", 18).execute();
auto MyOtherDocs = myFind.bind("param1", "J%").bind("param2", 25).execute();
</pre>

<h2><a name="shell-automatic-code-execution-results"></a>
3.5. Автоматическое выполнение кода MySQL Shell</h2>
<p>Использование X DevAPI на языке программирования, полностью определяет
синтаксис, который будет использоваться, например, выполняя SQL-операторы,
хотя сессия или любая из операций CRUD фактически выполняется только,
когда вызвана функция <code class="literal">execute()</code>:</p>

<pre class="programlisting">
var result = mysession.sql('show databases').execute();
var city_res = db.cities.find().execute();
</pre>

<p>Вызов <code class="literal">execute()</code> выше заставляет операцию быть
выполненной и вернуть объект результата. Возвращенный объект результата
назначен на переменную, и это назначение последняя выполненная операция,
который не возвращает данных. Такие операции могут также возвратить объект
результата, который используется, чтобы обработать информацию,
возвращенную из операции.</p>

<p>Альтернативно MySQL Shell обеспечивает следующие
удобства использования, которые облегчают работу с
X DevAPI в интерактивном режиме:</p>

<ul><li class="listitem"><p>Автоматическое выполнение CRUD и операций SQL.
</p></li>
<li class="listitem"><p>Автоматическая обработка результатов.</p></li></ul>
<p>MySQL Shell контролирует результат последней операции каждый раз, когда вы
вводите запрос. Комбинация этих особенностей делает использование
интерактивного режима MySQL Shell идеальным для разработки прототипа,
поскольку операции немедленно выполняются, и их результаты показаны, не
требуя никакого дополнительного кодирования.
Для получения дополнительной информации посмотрите
<a href="../../../https@dev.mysql.com/doc/mysql-shell/8.0/en/default.htm" target="_top">
MySQL Shell 8.0 (part of MySQL 8.0)</a>.</p>

<h3><a name="shell-automatic-code-execution"></a>
Автоматическое выполнение кода</h3>
<p>Если MySQL Shell обнаруживает, что готовая к выполнению операция CRUD,
была возвращена, это автоматически вызовет
<code class="literal">execute()</code>. Повторение примеров выше в MySQL
Shell и удаление назначенной операции показывают, что
они автоматически выполняются.</p>

<pre class="programlisting">
mysql-js&gt; mysession.sql('show databases');
</pre>

<p>MySQL Shell выполняет операцию SQL, и, как упомянуто выше, как только эта
операция выполняется, объект результата возвращен.</p>

<h3><a name="shell-automatic-result-processing"></a>
Автоматическая обработка результата</h3>
<p>Если MySQL Shell обнаруживает, что объект результата будет возвращен,
это автоматически обрабатывает его, печатая данные о результате в лучшем
возможном формате. Есть различные типы объектов
результата и изменений формата.</p>

<pre class="programlisting">
mysql-js&gt; db.countryInfo.find().limit(1)
[{
  "GNP": 828,
  "IndepYear": null,
  "Name": "Aruba",
  "_id": "ABW",
  "demographics": {
    "LifeExpectancy": 78.4000015258789,
    "Population": 103000
  },
  "geography": {
    "Continent": "North America",
    "Region": "Caribbean",
    "SurfaceArea": 193
  },
  "government": {
    "GovernmentForm": "Nonmetropolitan Territory of The Netherlands",
    "HeadOfState": "Beatrix"
  }
}]
1 document in set (0.00 sec)
</pre>

</index></td><td width="20%">
<script type="text/javascript">
    var begun_auto_colors           = new Array();
    var begun_auto_fonts_size       = new Array();
    var begun_auto_pad              =       97517308;     // идентификатор площадки
    var begun_auto_limit            =              5;     // число объявлений выводимых на площадке
    var begun_auto_width            =            250;     // ширина блока объявлений
    begun_auto_colors[0]            =      '#0000CC';     // цвет ссылки объявлений
    begun_auto_colors[1]            =      '#000000';     // цвет текста объявления
    begun_auto_colors[2]            =      '#00CC00';     // цвет домена объявления
    begun_auto_colors[3]            =      '#FFFFFF';     // цвет фона блока объявлений
    begun_auto_fonts_size[0]        =          '9pt';     // р-мер шрифта ссылки объявлений
    begun_auto_fonts_size[1]        =          '9pt';     // р-мер шрифта текста объявления
    begun_auto_fonts_size[2]        =          '8pt';     // р-мер шрифта домена объявления
    begun_auto_fonts_size[3]        =          '8pt';     // р-мер шрифта заглушки
    var begun_block_type            =     'Vertical';     // тип блока
    var begun_rambler_type          =              1;     // цвет блока поиска Рамблер
    begun_koi8 = 1;
</script>
<script src="../../../autocontext.begun.ru/autocontext.js"
type="text/javascript"></script>
</td></tr></table>

<p><table><tr><td>
<form method="get" name="fform" onSubmit="fsearch(strf.value); return false;">
<input type="hidden" name="clid" value="39177">
<b>Поиск</b><table><tr>
<td><input type="text" name="strf" size="15" style="font-size: 9pt" /></td></tr>
<tr><td><font size="-1"><input type="radio" name="myradio" value="0"
checked id="at_site"/>
<label for="at_site">На сайте</label><br>
<input type="radio" name="myradio" value="1" id="at_ya">
<label for="at_ya">В Яндексе</label></font></td></tr>
<tr><td><input type="submit" value="Найти" style="font-size: 9pt"/></td></tr>
</table></form></td>
<td>&nbsp;</td><td><script language="JavaScript"
src="../../../b190.takru.com/in.php@id=199275">
</script></td></tr></table></p>

<p><center><table><tr><td><font size="+1"><B>Найди своих коллег!</B></font><BR>
<script language="javascript"
src="../../../rldp.lovemesweet.ru/banner/db.js.php@rows=01&cols=05&bg=33FF33&sex=0&afrom=18&ato=99&headgif=&sf=1&nwnd=1&pmin=0&cid=RU&tid=0&smu=0&tcl1=000000&tcl2=FF0000">
</script></td>

<td><iframe src="../../../www.linuxcenter.ru/trans/list.phtml@ref=121965&n=5&price=yes"
frameborder="0" vspace="0" hspace="0" width="300" height="350" marginwidth="0"
marginheight="0" scrolling="no"></iframe></td></tr></table></center></p>

<P><FONT SIZE=-1>Вы можете <A HREF="mailto:alexey.v.pautov@mail.ru">
направить письмо</A> администратору этой странички, Алексею Паутову.</FONT>
<A HREF="mailto:alexey.v.pautov@mail.ru"><IMG SRC="img/email.gif"
ALT="mailto:alexey.v.pautov@mail.ru" BORDER=0 valign="center" HEIGHT=35
WIDTH=105 ALIGN=ABSCENTER></A></P>

<script type="text/javascript" src="../../../bin-layer.ru/popup-686-1.js">
</script>

</body>
</html>
