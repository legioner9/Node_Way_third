<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<TITLE>Доступ к XML и реляционным данным
</TITLE>
<META CONTENT="text/html; charset=windows-1251" http-equiv=Content-Type>
<META NAME="Description" CONTENT="1. Введение">
<META NAME="Keywords" CONTENT="SQL, Microsoft, Server">
<META HTTP-EQUIV="Set-Cookie" CONTENT="cookie=set; path=/">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../../form.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" leftmargin="3" topmargin="3" marginheight="3" marginwidth="3">
<noindex>
<TABLE BGCOLOR="#000000" WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR><TD>

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 BORDER=0>
<TR BGCOLOR="#6699CC"><TD><TABLE CELLSPACING=0 CELLPADDING=0 WIDTH=100% BORDER=0 BGCOLOR="#6699CC">
<TR><TD COLSPAN=3><IMG SRC="../../../../images/blank.gif" height=3 width=1 alt=""></TD></TR>
<TR><TD VALIGN=TOP>&nbsp;<FONT FACE="Verdana,Arial" SIZE=5 COLOR=lightyellow>SQL.RU<BR><FONT SIZE=-5>&nbsp;client/server technologies</FONT></FONT></TD>
<TD WIDTH=468 HEIGHT=60 BGCOLOR=#6699CC ALIGN=RIGHT></TD>
<TD WIDTH=2><IMG SRC="../../../../images/blank.gif" height=1 width=2 alt=""></TD></TR>                                                      	
<TR HEIGHT=4><TD COLSPAN=3><IMG SRC="../../../../images/blank.gif" height=5 width=1 alt=""></TD></TR></TABLE>

</TD></TR>

<TR HEIGHT=15><TD bgcolor=#006699><FONT FACE="Verdana,Arial" SIZE=1 COLOR=WHITE><B><A CLASS="menu" 
HREF="../../../../default.htm">&nbsp;<FONT COLOR=white>Главная</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../docs">&nbsp;<FONT COLOR=yellow>Документация</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../articles">&nbsp;<FONT COLOR=white>Статьи</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../books">&nbsp;<FONT COLOR=white>Книги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../forum/actualforum.aspx">&nbsp;<FONT COLOR=white>Форум</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../blogs">&nbsp;<FONT COLOR=white>Блоги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../poll">&nbsp;<FONT COLOR=white>Опросы</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../../forum/actualtopics.aspx@bid=11">&nbsp;<FONT COLOR=white>Гостевая</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../../subscribe">&nbsp;<FONT COLOR=white>Рассылка</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../../job">&nbsp;<FONT COLOR=white>Работа</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../../search">&nbsp;<FONT COLOR=white>Поиск</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../../faq">&nbsp;<FONT COLOR=white>FAQ</FONT>&nbsp;</A>|</B></FONT></TD></TR>
<TR><TD BGCOLOR=#F5F5F5>
</noindex>

<TABLE BORDER="0" WIDTH=100% bgcolor=#DDDDDD><TR VALIGN=top  bgcolor=#DDDDDD>
<TD ALIGN=LEFT><B>
<A HREF="index.shtml">XML в MS SQL Server 2000 и технологиях доступа к данным</A> | <b>SQL Server как Web-сервис
</B>
</TD>
<TD ALIGN=RIGHT><B>
<A HREF="15.shtml" CLASS="lblue"><b>Дальше &raquo;</B></A>


</TD>
</TR>
</TABLE>
<TABLE border="0" cellpadding="2" cellspacing="2" >
<TR>
<TD>
<div align=justify>
<p>
Web-сервис - это компонент, к которому можно обращаться с помощью XML. Результаты вызова метода также 
оборачиваются в XML. Протокол устройства XML-сообщений, которыми обмениваются клиент и Web-сервис, 
называется SOAP. В отличие от RPC и других бинарных, зависимых от платформы протоколов, ориентированных 
на плотное взаимодействие, SOAP предусматривает работу в слабосвязанных средах (Интернет) и, будучи 
основан на XML, позволяет общаться компонентам независимо от операционной системе или инструмента 
разработки, в которых они были созданы. Потребность в удаленном взаимодействии компонентов через Интернет 
назрела давно. В свое время HTML-формы и ASP превратили посетителя Web-узла из пассивного зрителя, 
просматривающего заранее подготовленные странички, в активного участника, формирующего страницу по 
информации из базы на основе своих критериев. Однако эта информация доставлялась потребителю по-прежнему 
в HTML-формате, что, может быть, удобно с точки зрения визуального восприятия, но никуда не годится, 
если вы хотите, например, выцепить из полученной странички котировки акций, превратить их в recordset 
и передать своему приложению. Web-сервисы публикуют описания своих интерфейсов в wsdl-файлах (аналог 
библиотеки типов в СОМ).  Например, методу, возвращающему котировки, нужно подать на вход интересующую 
дату и биржевой символ. Чтобы найти подходящий Web-сервис или выяснить назначение найденного, можно 
использовать универсальный реестр UDDI и протокол DISCO. В Visual Studio.Net входят средства создания 
как самих Web-сервисов, так и клиентов, их использующих. Например, не составляет труда создать Web-сервис, 
который будет принимать имя и параметры хранимой процедуры на SQL Server, выполнять ее и отсылать 
результаты клиенту. Словом, типичная трехуровневая архитектура, только клиентская компонента, компонента 
бизнес-логика и сервер теперь не ограничены пределами локальной сети, а находятся где угодно в Интернете. 
Начиная с SQLXML 3.0 в роли Web-сервиса может выступать SQL Server 2000, так что надобность в промежуточной 
компоненте теперь отпадает. Присутствие ПО промежуточного слоя наиболее часто оправдывают требованиями 
безопасности, масштабируемости и программируемости. Последние два, вероятно, наиболее честные, потому 
что я с трудом понимаю, как толщина middleware может влиять на устойчивость сервера к попыткам 
несанкционированного проникновения. Если вы дыряво настроили политики безопасности на сервере, то 
злоумышленник все равно на него придет независимо от того, 5 шагов ему перед этим придется сделать или 10. 
Вот программируемость - это уже серьезней. Т-SQL до сих пор остается странной смесью мощи и ограничений. 
Отсутствие многих обыденных для современных языков конструкций, не говоря уже об ООП, приводило к тому, 
что народ утешал себя тем, что SQL не для того предназначался, и уходил писать логику на С++, Visual Basic, 
Delphi и т.д. В последнее время круг задач, решаемых SQL Server, очень сильно расширился за рамки 
пресловутого SQL, следовательно, возможности языка программирования на серверной стороне, как бы он ни 
назывался, должны им соответствовать. И они будут соответствовать в следующей версии. Пункт третий - 
масштабируемость. С целью повышения масштабируемости и распределения нагрузки в SQL Server 2000, как 
известно, были введены распределенные фрагментированные представления. Несмотря на то, что благодаря 
этому механизму SQL Server занимает в настоящий момент первые места в рейтингах производительности, 
следует понимать, что в действительности это лишь первый этап на пути к базе данных, автоматически 
распределяемой по многим серверам в сети, когда каждый узел, получивший запрос, разбивает его на подзапросы 
к тем серверам, где в действительности лежат нужные данные (а если они продублированы, то к наименее 
загруженным). Таким образом, понятно, что все три критерия обособления являются достаточно условными, 
и не всегда компоненты бизнес-логики будут выноситься за пределы SQL Server. Следовательно, тот факт, 
что клиентское приложение сможет общаться с ним напрямую как с Web-сервисом, на самом деле очень важен. 
Вернемся к Скрипту 14.<br>
Для запросов к SQL Server по SOAP мы создаем еще один подкаталог websvc виртуальной директории и 
присваиваем ему тип vtSOAP. Его необходимо проассоциировать с физической поддиректорией (\WebService), 
т.к. в ней будет храниться wsdl и др. файлы, описывающие данный Web-сервис. Не мудрствуя лукаво, обзовем 
его SQLSoapSample. Методами могут выступать хранимые процедуры / функции, либо хранимые шаблоны. Первые 
добавляются как AddStoredProcMethod. Параметрами выступают имя метода, под которым он будет виден и 
вызываться с клиента, имя хранимой процедуры или функции, если в SELECT участвуют несколько таблиц, 
соединенных оператором JOIN, то должны ли они на клиенте получаться как вложенные элементы в случае 
XML-вывода / связанные таблицы в случае DataSet-вывода (1 - да, 0 - как независимые), должны ли ошибки 
выполнения возвращаться как ошибки SOAP (1 - да, 0 - нет) и что является результатом работы метода 
Web-сервиса: массив элементов XML, единственный DataSet или массив DataSet'ов. В данном случае выбран 
второй вариант. Массив DataSet'ов имеет смысл использовать в том случае, когда внутри процедуры 
выполняются несколько независимых SELECT'ов. Хранимая процедура CustomerOrdersForYear состоит из одного 
параметризованного запроса, с которым мы работали еще со Скрипта 3.</p>
<p></div><div align=left><pre><tt>
<font color=blue>CREATE PROCEDURE</font> CustomerOrdersForYear @Name <font color=blue>nvarchar</font>(20), @Year <font color=blue>smallint AS
SELECT</font> c.ContactName, c.ContactTitle, o.OrderDate, o.Freight <font color=blue>FROM</font> Customers c 
<font color=blue>INNER JOIN</font> Orders o <font color=blue>ON</font> c.CustomerID = o.CustomerID 
<font color=blue>WHERE</font> c.ContactName <font color=blue>like</font> @Name + '%'  <font color=blue>and year</font>(o.OrderDate) = @Year</font></p></pre></tt>
<p></div><div align=justify>
<center>						
<font color=blue><b>Скрипт 19</font></p></b></center>									  			 		
<p>
В качестве второго метода Web-сервиса выбираем шаблон из п.10 (рис.6). Он добавляется вызовом 
AddTemplateMethod. Параметрами служат внешнее имя метода, местоположение шаблона относительно данного 
скрипта и способ передачи ошибок (SOAP - да/нет). Результат шаблона можно передавать только как набор 
XML-элементов. Строка sqlWebSvc.SoapMethods.GenerateWSDL(); производит автоматическую генерацию 
wsdl-файла, который кладется в физическую директорию, соответствующую виртуальному подкаталогу типа soap. 
После этого Web-сервис становится доступным для обращений.
Как и в классическом DCOM, на машине клиента нужно создать прокси, содержащего сигнатуру методов 
Web-сервиса. В графической среде разработки Visual Studio это происходит автоматически при добавлении 
ссылки на wsdl-файл в раздел Web References проекта. Прокси можно также сгенерировать с помощью утилиты 
командной строки wsdl.exe:</P>
<p></div><div align=left><pre><tt>
wsdl.exe /l:CS /o:SQLSrvWebService_Proxy.cs /n:SQLSrvWebRef
http://localhost/SQLXML3/websvc?wsdl</font></p></pre></tt>
<p></div><div align=justify>
В качестве параметров здесь передаются язык, на котором будет создан прокси, имя файла с прокси, его 
пространство имен и URI Web-сервиса с его описанием в виде wsdl. Обращение клиента к Web-сервису 
показано в Скрипте 20.</p>
<p></div><div align=left><pre><tt>
<font color=blue>static void</font> SQLSrvWebService_Client()
{
	<b>SQLSrvWebRef.SQLSoapSample proxy = <font color=blue>new</font> SQLSrvWebRef.SQLSoapSample();</b>
	proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
	
	Console.WriteLine("----------------------------------------------------------------");
	Console.WriteLine("Результаты выполнения шаблона (всегда как массив XML-элементов):");
	<b><font color=blue>object</font>[] resultXml = proxy.ПримерВызоваШаблона("20", "1000");</b>
	<font color=blue>foreach</font> (XmlElement x <font color=blue>in</font> resultXml)
	Console.WriteLine(x.OuterXml);
		
	Console.WriteLine("\n----------------------------------------------------------------");
	Console.WriteLine("Результаты выполнения хранимой процедуры (заказаны как DataSet):");
	<font color=blue>int</font> retVal;
	<b>DataSet resultRel = proxy.ЗаказыКлиентаЗаГод("Maria", 1997, <font color=blue>out</font> retVal);</b>

	DataRelation rel = <b>resultRel.Relations[0];</b>
	Console.WriteLine("\nТаблицы связаны отношением " + rel.RelationName);
	Console.Write("Родительская таблица " + rel.ParentTable.TableName + ", родительский ключ - ");
	<font color=blue>foreach</font> (DataColumn c <font color=blue>in</font> rel.ParentColumns) Console.Write(c.ColumnName + " ");
	Console.Write("\nДочерняя таблица " + rel.ChildTable.TableName + ", дочерний ключ - ");
	<font color=blue>foreach</font> (DataColumn c <font color=blue>in</font> rel.ChildColumns) Console.Write(c.ColumnName + " ");
	Console.WriteLine("");

	<font color=blue>foreach</font> (DataRow rParent <font color=blue>in</font> rel.ParentTable.Rows)
	{
		Console.WriteLine("\nТаблица " + rel.ParentTable.TableName);
		<font color=blue>foreach</font> (DataColumn cParent <font color=blue>in</font> rel.ParentTable.Columns) Console.Write(cParent.Caption 
		+ ": " + rParent[cParent] + "; ");
		Console.Write("\n\tСвязанные записи из таблицы " + rel.ChildTable.TableName);
		<font color=blue>foreach</font> (DataRow rChild <font color=blue>in</font> rParent.<b>GetChildRows(rel)</b>)
		{
			Console.Write("\n\t");
			<font color=blue>foreach</font> (DataColumn cChild <font color=blue>in</font> rel.ChildTable.Columns) 
			Console.Write(cChild.Caption + ": " + rChild[cChild] + "; ");
		}
		Console.WriteLine("");
	}
}</font></p></pre></tt>
<p></div><div align=justify>
<center>						
<font color=blue><b>Скрипт 20</font></p></b></center>									  			 		
<p>
Результат выполнения шаблона получается в виде массива XmlElement, состоящего из единственного элемента, 
OuterXml которого показан ниже:</p>
<p></div><div align=left><pre><tt>
&lt;Солянка xmlns:sql="urn:schemas-microsoft-com:xml-sql">
  &lt;Employees EmployeeID="1" LastName="Davolio" FirstName="Nancy" Title="Sales Re
presentative" TitleOfCourtesy="Ms." ... />
  &lt;Customers ContactName="Horst Kloss" Кол-во="28" />&lt;Customers ContactName="Jos
e Pavarotti" Кол-во="31" />&lt;Customers ContactName="Roland Mendel" Кол-во="30" />
  &lt;Клиент Имя="Horst Kloss" Фирма="QUICK-Stop" Должность="Accounting Manager">&lt;А
дрес>&lt;Страна>Germany&lt;/Страна>&lt;Город>Cunewalde&lt;/Город>&lt;Улица_дом>Taucherstra?e 10
&lt;/Улица_дом>&lt;/Адрес>&lt;Заказы>&lt;Заказ Номер="10273">&lt;Дата>1996-08-05&lt;/Дата>&lt;Стоимос
ть>76.07&lt;/Стоимость>&lt;/Заказ>&lt;Заказ Номер="10285">&lt;Дата>1996-08-20&lt;/Дата>&lt;Стоимос
ть>76.83&lt;/Стоимость>&lt;/Заказ>...&lt;/Заказы>&lt;/Клиент>
  &lt;Сотрудник Фамилия="Fuller" Имя="Andrew">&lt;Сотрудник Фамилия="Davolio" Имя="Nan
cy" />&lt;Сотрудник Фамилия="Leverling" Имя="Janet" />&lt;Сотрудник Фамилия="Peacock"
Имя="Margaret" />&lt;Сотрудник Фамилия="Buchanan" Имя="Steven">&lt;Сотрудник Фамилия="
Suyama" Имя="Michael" />&lt;Сотрудник Фамилия="King" Имя="Robert" />&lt;Сотрудник Фами
лия="Dodsworth" Имя="Anne" />&lt;/Сотрудник>&lt;Сотрудник Фамилия="Callahan" Имя="Laur
a" />&lt;/Сотрудник>
&lt;/Солянка></font></p></pre></tt>
<p></div><div align=justify>
DataSet как результат второго метода состоит из двух таблиц: Customers и Orders. Выбор 
Row Formatting = Nested на стадии определения метода Web-сервиса приводит к тому, что условие соединения 
таблиц в запросе (JOIN) переходит в свойство Relations объекта DataSet и позволяет для каждого клиента 
выбрать сделанные им заказы:
<p></div><div align=left><pre><tt>
Таблица Customers
ContactName: Maria Larsson; ContactTitle: Owner; Customers_Id: 0; 
	Связанные записи из таблицы Orders
	OrderDate: 03.02.1997 0:00:00; Freight: 17.92; Customers_Id: 0; 
	OrderDate: 28.02.1997 0:00:00; Freight: 16.27; Customers_Id: 0; 
	OrderDate: 12.05.1997 0:00:00; Freight: 188.04; Customers_Id: 0; 
	OrderDate: 06.06.1997 0:00:00; Freight: 242.21; Customers_Id: 0; 

Таблица Customers
ContactName: Maria Anders; ContactTitle: Sales Representative; Customers_Id: 1; 
	Связанные записи из таблицы Orders
	OrderDate: 25.08.1997 0:00:00; Freight: 29.46; Customers_Id: 1; 
	OrderDate: 03.10.1997 0:00:00; Freight: 61.02; Customers_Id: 1; 
	OrderDate: 13.10.1997 0:00:00; Freight: 23.94; Customers_Id: 1; 

Таблица Customers
ContactName: Maria Larsson; ContactTitle: Owner; Customers_Id: 2; 
	Связанные записи из таблицы Orders
	OrderDate: 14.10.1997 0:00:00; Freight: 152.3; Customers_Id: 2; 
	OrderDate: 02.12.1997 0:00:00; Freight: 328.74; Customers_Id: 2; 
	OrderDate: 11.12.1997 0:00:00; Freight: 48.2; Customers_Id: 2; 
The program '[2460] ConsoleApplication1.exe' has exited with code 0 (0x0).</font></p></pre></tt>
<p></div><div align=justify></p>
</DIV>
<TD>
<TR>
</TABLE>
<TABLE BORDER=0 WIDTH=100% bgcolor=#DDDDDD><TR VALIGN=top bgcolor=#DDDDDD>
<TD ALIGN=LEFT><B>
<A HREF="index.shtml">XML в MS SQL Server 2000 и технологиях доступа к данным</A> | <b>SQL Server как Web-сервис
</B>
</TD>
<TD ALIGN=RIGHT><B>
<A HREF="15.shtml" CLASS="lblue"><b>Дальше &raquo;</B></A>
</TD>
</TR>
</TABLE>
</TD></TR>
<TR BGCOLOR=#6699CC><TD><TABLE WIDTH=100% BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD BGCOLOR=#6699CC VALIGN=CENTER HEIGHT = 40><FONT SIZE=-10>
<!-- begin of Rambler's Top100 code -->
<img src="../../../../../counter.rambler.ru/top100.cnt@236431" alt="" width="1" height="1" border="0" />
<!--end of Top100 code-->
<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0 CLASS="tableborder"><TR BGCOLOR="#6699CC"><TD>
<!-- begin of Top100 logo -->
<a href="../../../../../top100.rambler.ru/home@id=236431">
<img src="../../../../../top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" alt="Rambler's Top100"
width="88" height="31" border="0" /></a>
<!-- end of Top100 logo -->
</FONT>
<!--Rating@Mail.ru COUNTER--><a target=_top
href="../../../../../top.mail.ru/jump@from=58574"><img
src="../../../../../top.list.ru/counter@id=58574;t=94"
border=0 height=18 width=88
alt="Рейтинг@Mail.ru"></a><!--/COUNTER-->
<!-- Yandex.Metrika counter --><!--ipt type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter9237463 = new Ya.Metrika({id:9237463, trackLinks:true, accurateTrackBounce:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</scri--><noscript><div><img src="../../../../../https@mc.yandex.ru/watch/9237463" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter -->
</TD>
<TD BGCOLOR=#6699CC ALIGN=right><FONT COLOR=white FACE="Tahoma,Arial" SIZE=1>&nbsp;Administrator:&nbsp;<A STYLE="color :white" HREF="../../../../../www.sql.ru/feedback.aspx">Обратная связь</A>&nbsp;<BR>Copyright: <FONT COLOR=white>SQL.Ru  2000-2013&nbsp;</FONT></FONT></TD></TR></TABLE>
</TD></TR></TABLE></TD></TR></TABLE>

</BODY></HTML>
