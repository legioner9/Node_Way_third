<HTML>
<HEAD>
<TITLE>IBDataBase. Состояния транзакций, сборка мусора, интересующиеся и активные транзакции, sweep, и примеры.. [SQL.RU]</TITLE>
<META http-equiv="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Window-target" CONTENT="_top">
<META HTTP-EQUIV="Last-Modified" CONTENT="29-03-2001">
<META NAME="Description" CONTENT="Использование языка SQL, создание клиент-серверных систем. Конференция по MSSQL, Oracle, Interbase, MySQL. Полезные ссылки, документация, рекомендации по разработке информационных систем, сертификация, заказ книг и многое другое.">
<META NAME="Keywords" CONTENT="SQL, конференция, Database Server, Oracle, Interbase, MySQL, документация, статьи, примеры, книги, ссылки, сертификация, работа, СУБД">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../form.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" leftmargin="3" topmargin="3" marginheight="3" marginwidth="3">
<noindex>
<TABLE BGCOLOR="#000000" WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR><TD>

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 BORDER=0>
<TR BGCOLOR="#6699CC"><TD><TABLE CELLSPACING=0 CELLPADDING=0 WIDTH=100% BORDER=0 BGCOLOR="#6699CC">
<TR><TD COLSPAN=3><IMG SRC="../../images/blank.gif" height=3 width=1 alt=""></TD></TR>
<TR><TD VALIGN=TOP>&nbsp;<FONT FACE="Verdana,Arial" SIZE=5 COLOR=lightyellow>SQL.RU<BR><FONT SIZE=-5>&nbsp;client/server technologies</FONT></FONT></TD>
<TD WIDTH=468 HEIGHT=60 BGCOLOR=#6699CC ALIGN=RIGHT></TD>
<TD WIDTH=2><IMG SRC="../../images/blank.gif" height=1 width=2 alt=""></TD></TR>                                                      	
<TR HEIGHT=4><TD COLSPAN=3><IMG SRC="../../images/blank.gif" height=5 width=1 alt=""></TD></TR></TABLE>

</TD></TR>

<TR HEIGHT=15><TD bgcolor=#006699><FONT FACE="Verdana,Arial" SIZE=1 COLOR=WHITE><B><A CLASS="menu" 
HREF="../../default.htm">&nbsp;<FONT COLOR=white>Главная</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../docs">&nbsp;<FONT COLOR=yellow>Документация</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../articles">&nbsp;<FONT COLOR=white>Статьи</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../books">&nbsp;<FONT COLOR=white>Книги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../forum/actualforum.aspx">&nbsp;<FONT COLOR=white>Форум</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../blogs">&nbsp;<FONT COLOR=white>Блоги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../poll">&nbsp;<FONT COLOR=white>Опросы</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../forum/actualtopics.aspx@bid=11">&nbsp;<FONT COLOR=white>Гостевая</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../subscribe">&nbsp;<FONT COLOR=white>Рассылка</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../job">&nbsp;<FONT COLOR=white>Работа</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../search">&nbsp;<FONT COLOR=white>Поиск</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../faq">&nbsp;<FONT COLOR=white>FAQ</FONT>&nbsp;</A>|</B></FONT></TD></TR>
<TR><TD BGCOLOR=#F5F5F5>
</noindex>

<TABLE BORDER=0 CELLSPACING=10><TR><TD>
<CENTER>
<H2 class="headline">
Состояния транзакций, сборка мусора, интересующиеся и активные 
транзакции, sweep, и примеры.</H2></CENTER> <BR>
<BR>
<B>Автор:</B> Ann Harrison, Harbor. <BR><B>перевод:</B> <A href="mailto:dima@demo.ru">Дмитрий 
Кузьменко</A>, Epsylon Technologies <BR>

<P>Пояснение для новичков - когда я говорю "транзакция", я имею в виду набор 
действий над базой данных, завершающихся Commit (подтверждением), Rollback 
(отменой), Prepare/Commit (подготовкой к подтверждению при two phase commit), и 
в том числе отсоединением от базы данных (обрыв связи, выключение клиентского 
компьютера и т.п.). Простое действие, как вставка, изменение или удаление 
записи, является оператором. Многие инструменты обеспечивают автоматическую 
поддержку транзакций, поэтому вам может быть неизвестно реальное количество 
транзакций, выполняемых при работе с данными. Но любой инструмент, производящий 
подтверждение (commit) на каждый оператор, не является лучшим выбором при 
импорте данных в БД. 
<CENTER>
<H2><B><FONT size=+1>Состояния транзакций</FONT></B></H2></CENTER>Транзакции 
могут находиться в четырех состояниях: активном, подтвержденном, limbo 
(подтвержденное но не зафиксированное по TPC) и отмененном. 
<P>Рассмотрим каждое состояние подробнее от самого сложного до самого простого: 
<P><B><I>Limbo</I></B>: Транзакция, стартовавшая в режиме 2PC (two phase commit) 
вызовом процедуры Prepare. Эта транзакция может быть живой или нет. В любой 
момент така транзакция может возобновиться и запросить подтверждение или отмену. 
Изменения, произведенные транзакцией, оставшейся в состоянии in limbo не могут 
быть приняты или игнорированы, соответственно они не могут быть удалены из БД. 
<P><B><I>Подтвержденное</I></B>: Транзакция, которая завершила всю свою работу 
успешно <BR>a) вызовом процедуры COMMIT <BR>b) вызовом процедуры Rollback, но не 
произведя никаких изменений в БД. <BR>В любом случае транзакция завершилась, и 
никогда не возобновится снова. Ее изменения теперь являются частью корректного 
состояния БД. 
<P><B><I>Отмененное</I></B>: Транзакция, которая <BR>a) завершилась процедурой 
ROLLBACK, т.е. запросила удалить все произведенные ею изменения из БД. <BR>b) 
была помечена как Активная, но была обнаружена в неживом состоянии другой 
транзакцией, которая и помечает ее как отмененную. <BR>В любом случае, 
изменения, сделанные такой транзакцией, должны быть игнорированы и удалены из 
базы данных 
<P><B><I>Активное</I></B>: такое состояние имеет транзакция, которая <BR>a) не 
стартовала. <BR>b) стартовала, но еще не завершилась. <BR>c) стартовала, но не 
закончилась вызовом любой процедуры завершения. (например из-за сбоя питания, 
обрыва соединения и т.п.) 
<CENTER>
<H2><B><FONT size=+1>Как транзакции узнают о состояниях друг друга 
?</FONT></B></H2></CENTER>Состояние каждой транзакции хранится на Transaction 
Inventory Page (TIP). Единственным измененим БД при подтверждении транзакции 
является смена состояни этой транзакции с Активной на Подтвержденную. Когда 
транзакция вызывает процедуру отмены, она проверяет свой Update Flag - если он 
не установлен, то значит никаких изменений БД не было произведено, и нужно 
сделать Подтверждение (COMMIT) вместо Отмены (ROLLBACK). Таким образом отмена 
read-only транзакций не нагружает БД. 
<P>Каким образом транзакция переходит из Активного состояния в Отмененное если 
завершение происходит по сбою ? 
<P>Это может произойти двумя путями. 
<P>1) Когда транзакция стартует, она делает блокировку собственного 
идентификатора транзакции. Если транзакция B пытается изменить или удалить 
запись, и обнаруживает что версия записи была создана транзакцией A, состояние в 
TIP которой Активное, транзакция B пытается вызвать конфликт блокировки 
идентификатора транзакции A. Если блокировка прошла, то транзакция B решает что 
A умерла, и меняет состояние A в TIP с Активного на Отмененное. 
<P>2) Когда транзакция стартует, она проверяет, можно-ли установить полную 
блокировку на БД. Вообще транзакции при работе устанавливают разделяемые 
блокировки на БД. Следовательно, если транзакции удается поставить полную 
блокировку, то других транзакций нет, и она конвертирует все Активные состояни в 
TIP на Отмененные. 
<CENTER>
<H2><B><FONT size=+1>Мусор</FONT></B></H2></CENTER>Borland InterBase - СУБД с 
многоверсионностью данных. Когда запись изменяется, на страницу данных 
помещается ее копия с новыми значениями, однако старая запись остается. Старое 
значение называется "Back Version" (резервная версия), и является "историей 
отката" - если транзакця, изменившая запись, отменится, то старая версия записи 
тут как тут, на своем старом месте. Кроме этого, старые версии обеспечивают 
уровень изоляции Repeatable Read (воспроизводимое чтение) для длинных 
транзакций, которым на все время действия нужно видеть данные, существовавшие на 
момент начала такой транзакции. 
<P>Когда изменяющая записи транзакция подтверждается, и все конкурирующие 
тразнакции также завершаются, старая версия перестает быть необходимой. В часто 
изменяемой базе данных старые записи могут занимать значительное дисковое 
пространство и ухудшать производительность БД. Поскольку такие записи являются 
МУСОРОМ, его необходимо вычищать. 
<CENTER>
<H2><B><FONT size=+1>Сборка мусора</FONT></B></H2></CENTER>Сборка мусора 
предотвращает наполнение интенсивно обновляемой БД ненужными старыми версиями 
записей. Также уничтожаются версии записей, созданные отмененными транзакциями 
(Rolled Back). Каждая транзакция участвует в сборке мусора, в том числе и только 
читающие (read-only) транзакции. 
<P>Когда транзакция считывает запись, на самом верхнем уровне она получает эту 
запись (это относится к любой записи в БД). Двумя уровнями ниже, где-то в недрах 
сервера, Borland InterBase вытаскивает с диска набор версий. (прим. пер.: 
поскольку версии записей хранятся на страницах данных, а механизм работы со 
страницами оптимизирован для работы с версиями, лишних операций кроме чтения 
страниц данных не происходит). Каждая версия имеет идентификатор создавшей ее 
транзакции. Первой в списке версий идет самая старая запись. В этот момент 
сервер имеет две задачи: 
<P>1) выдать правильную версию записи запросившей ее транзакции <BR>2) удалить 
все версии, являющиеся мусором - т.е. те версии, которые были созданы 
отмененными транзакциями или слишком старые версии записей, чтобы в них кто-то 
был заинтересован. 
<P>Существует и третий случай сборки мусора, который происходит в этот-же 
момент. Кроме многоверсионных обновлений сервер использует и <BR>многоверсионные 
удаления. Когда транзакция удаляет запись, должна-ли такая запись быть сразу 
удалена ? Конечно нет ! Удаление-ведь может быть отменено. Поэтому вместо 
удаления записи, сервер выставляет метку удаления для старой версии записи. Если 
рано или поздно транзакция завершится, то вся запись вместе с меткой удаления и 
со своими предыдущими версиями станет мусором, и ... (вы угадали!) когда-нибудь 
будет физически удалена. 
<CENTER>
<H2><B><FONT size=+1>Сборка мусора - итог</FONT></B></H2></CENTER>Сборка мусора 
является кооперативной. Это означает что все транзакции участвуют в ней (а не 
какая-то специально выделенная команда мусорщиков). Старые версии, удаленные 
записи, и отмененные изменения (и добавления) уничтожаются, когда транзакция 
пытается прочитать запись. (прим. пер.: именно этим объясняются "странные" 
задержки в отработке запросов, например если вы выдали SELECT на таблице, из 
которой другой человек прямо перед вами удалил тысяч сто (100000) записей - 
вашей транзакции выпало "счастье" убирать мусор за предыдущей транзакцией). 
<P>Периодическое архивирование БД (backup) также производит сборку мусора, 
поскольку считывает абсолютно все записи из БД. (прим. пер.: если в момент 
backup есть активные транзакции, то некоторый мусор после их завершени 
безусловно останется). 
<CENTER>
<H2><B><FONT size=+1>Старейшая заинтересованная 
транзакция</FONT></B></H2></CENTER>
<CENTER>
<H2><B><FONT size=+1>(OLDEST INTERESTING 
TRANSACTION)</FONT></B></H2></CENTER>Для того чтобы определить, какие версии 
записей могут быть удалены при сборке мусора, и какие изменения отменены и могут 
быть игнорированы, кажда транзакция имеет "маску" "заинтересованых" транзакций". 
Транзакция является "заинтересованной" по отношению к другой транзакции, если 
она конкурирует с ней - т.е. ее изменения не подтверждены, или она отменена (ее 
изменения должны игнорироваться или такая транзакция в состоянии limbo). 
<P>"Маска транзакций" - это снимок состояний всех транзакций от старейшей 
заинтересованной (OIT) до текущей. Размер снимка зависит от количества 
транзакций, стартовавших с момента старта старейшей заинтересованной транзакции. 

<CENTER>
<H2><B><FONT size=+1>Старейшая активная транзакция</FONT></B></H2></CENTER>
<CENTER>
<H2><B><FONT size=+1>(OLDEST ACTIVE TRANSACTION)</FONT></B></H2></CENTER>Звучит 
просто, но на самом деле не очень. Старейшая активная транзакци это не 
старейшая, живущая до настоящего момента. И не старайшая транзакция помеченная 
как Активная в TIP. Это старейшая транзакция, которая была активной, когда 
началась старейшая активная в текущий момент транзакция. Читать такие выражения 
довольно трудно, и я не помню как это было сделано, но это так, и это работает. 
<P>(прим. пер.: следующий абзац переводите сами) 
<P>Any record version behind a committed version created by a transaction older 
than the oldest transaction active when the oldest transaction currently active 
started is garbage and will never be needed ever again. That's pretty dense. 
Lets ignore the commit/rollback question briefly. 
<P>Простой случай: 
<P>Я транзакция 20. Я нахожу запись созданную и подтвержденную транзакцией 15. Я 
изменяю ее и подтверждаю изменения. Вы - транзакция 25, и когда вы стартуете, вы 
являетесь единственной активной транзакцией. Вы читаете запись, и обнаруживаете 
что все активные транзакции (стартовавшие после вас) могут использовать версию 
записи, созданную мной, поэтому вы собираете мусор - оригинальную версию этой 
записи. В этом случае, право на сборку мусора (как старейшей активной 
транзакции) ваше. 
<P>Тяжелый случай: 
<P>Вы продолжаете работу, изменяя данные тут и там. Другая транзакция, например 
27, стартует. Вы являетесь старейшей заинтересованной. Та, 27-а транзакция, тоже 
может изменять данные тут и там, кроме тех записей, что вы модифицировали. 27-ая 
завершается и подтверждает изменения. Я стартую транзакцию 30. Вы также 
являетесь для меня старейшей заинтересованной транзакцией, и я не могу собирать 
мусор поскольку новые версии записей моложе вас. Я нахожу запись, созданную 
транзакцией 15, измененную транзакцией 20, и затем опять измененную транзакцией 
27. Все три этих транзакции завершены и подтверждены, но я могу собрать мусор 
только в виде оригинальной версии записи, созданной транзакцией 15. Т.к. версия, 
созданная транзакцией 27, для меня стара, но не стара для вас, я решаю, что вы 
можете быть заинтересованы в этой версии записи. 
<P>Тяжелейший случай: 
<P>Я транзакция 87, и когда я стартую, все транзакции до 75-ой завершились 
подтверждением, и все после 75-ой в настоящее время активны. Транзакция 77 
модифицирует запись, созданную транзакцией 56. Я продолжаю читать версию 56-ой 
транзакции. Все нормально. Транзакция 77 завершается подтверждением. Вы - 
транзакция 95. Когда вы стартуете, я (87-ая) являюсь старейшей активной. Вы 
читаете запись созданную 56-ой и модифицированную 77-ой. Вы не можете собирать 
мусор для этой записи, поскольку я не могу читать записи созданные транзакцией 
после 74-ой (они еще не все завершены). 
<P>Надеюсь что вы теперь поняли, что понятие "старейшей активной" транзакции не 
так просто, как кажется. 
<CENTER>
<H2><B><FONT size=+1>Чистка</FONT></B></H2></CENTER>
<CENTER>
<H2><B><FONT size=+1>(SWEEPING)</FONT></B></H2></CENTER>Чистка - это НЕ только 
сборка мусора. Основная работа, которую делает чистка, это перемещение старейшей 
заинтересованной транзакции "вверх", и уменьшение размера маски транзакций. Это 
делается переводом Отмененных транзакцией в Подтвержденные транзакции. 
<P>Вы скажете - "Она сошла с ума !" 
<P>Но это действительно основная работа чистки. Она удаляет все изменения, 
сделанные отмененными транзакциями, затем меняет их состояние на 
<BR>Подтвержденное. (Помните, было сказано, что отмененные read-only транзакции 
получают состояние подтвержденных. Удалите изменения, и можно считать что 
транзакция завершилась подтверждением). 
<P>В то-же время, чистка собирает мусор так-же как и любая другая транзакция. 
<P>До версии 4.2, несчастливая транзакция, включившая чистку, сама выполняла ее, 
и только затем отрабатывалась. Другие транзакции продолжали работать. В версии 
4.2 и выше, запускается новый поток и самостоятельно производит чистку, в то 
время как все остальные транзакции нормально работают. 
<CENTER>
<H2><B><FONT size=+1>Транзакции "in limbo"</FONT></B></H2></CENTER>Транзакции in 
limbo не могут быть переведены в другое состояние автоматически, будут приводить 
к постоянному включению чистки, и будут <BR>блокировать попытки изменения или 
удаления созданных ими версий. В любом случае Borland InterBase предоставляет 
хорошую диагностику при возникновении сбоев при two phase commit (утилита Server 
Manager). 
<CENTER>
<H2><B><FONT size=+1>Несколько примеров</FONT></B></H2></CENTER>
<H3>Случай 1. Поток неконкурирующих транзакций.</H3><IMG height=100 
src="images/Ex1.gif" width=300> <BR>Транзакция 1 вставляет запись 1 
и завершается подтверждением. Транзакция 2 стартует и становится одновременно 
старейшей активной и старейшей заинтересованной. Она вставляет запись 2 и 
завершается подтверждением. Транзакция 3 стартует, также становится старейшей 
активной и заинтересованной, вставляет свою запись и завершается подтверждением. 
В конце концов транзакция 1000000 стартует, опять становится старейшей активной 
и заинтересованной. Чистки не происходит (в общем-то чистить и нечего). 
<H3>Случай 2. Готовится засада.</H3><IMG height=100 
src="images/Ex2.gif" width=300> <BR>Транзакция 1 стартует, 
оглядывается, и идет покурить. Транзакция 2 стартует, обнаруживает что 1-ая 
является старейшей активной и <BR>заинтересованной, вставляет запись 1 и 
завершается подтверждением. Транзакция 3 стартует, обнаруживает что 1-ая все еще 
старейшая активна и заинтересованная, вставляет запись 2 и завершается 
подтверждением. В конце концов транзакция 1000001 стартует, видит что 1-ая все 
еще старейша активная и заинтересованная, т.е. разница между OAT и OIT равна 0, 
и завершается. Опять чистка не возникает. 
<H3>Случай 3. Кто попадет в засаду ?</H3><IMG height=100 
src="images/Ex3.gif" width=400> <BR>Транзакция 1 стартует, что-то 
делает, и идет покурить. Транзакция 2 стартует, обнаруживает что 1-ая является 
старейшей активной и <BR>заинтересованной, вставляет запись 1 и 
завершается.Транзакция 3 стартует, обнаруживает что 1-ая является старейшей 
активной и <BR>заинтересованной, вставляет запись 2 и завершается. Вдруг 
транзакция 1 отравляется никотином и умирает прямо в курительной комнате 
(допустим, не так страшно, а просто происходит обрыв связи между клиентским 
компьютером и сервером). Транзакция 15034 стартует (к счастью), получает 
возможность установить монопольную блокировку на файл базы данных, и 
устанавливает состояние транзакции 1 в Отмененное. Теперь старейшая 
заинтересованная имеет номер 1, но старейшая активная уже имеет номер 15034. 
Разница составляет 15033, поэтому уборка (sweep) не начинается. Через 4967 
транзакций происходит уборка. После того как она закончена, идентификаторы 
старейшей заинтересованной и активной становятся равными, и следущий процесс 
уборки может начаться только если возникнет заинтересованная транзакция, 
перешедшая в неактивное состояние. 
<H3>Случай 4. Смертельные качели</H3>Предположим, что в нашей системе происходят 
парные транзакции, одна из которых завершается подтверждением, а другая откатом. 
Проблема в том, что транзакция, завершенная откатом, становится старейшей 
заинтересованной (OIT), а транзакция завершенная подтверждением - соответственно 
старейшей активной (OAT). Если после транзакции, завершившейся откатом, 
произойдет еще одна откатываемая транзакция, то она не станет OIT, поскольку 
предыдуща является "старейшей". Таким образом после даже единственной 
завершенной откатом транзакции, каждая последующая подтверждаемая транзакция 
будет увеличивать разницу между OIT и OAT. И через 20001 завершенных 
подтверждением транзакций действительно произойдет ЧИСТКА (SWEEP). 
<CENTER>
<H2><B><FONT size=+1>Итог</FONT></B></H2></CENTER>Итак, мы с вами выяснили к 
чему может привести вставка 1000000 записей с транзакцией на каждую запись. 
Может-быть стоит выключить forced write (параметр БД в Server Manager) ? Или 
настала пора запустить дефрагментацию диска ? 
<P>
</TD></TR></TABLE>
</TD></TR>
<TR BGCOLOR=#6699CC><TD><TABLE WIDTH=100% BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD BGCOLOR=#6699CC VALIGN=CENTER HEIGHT = 40><FONT SIZE=-10>
<!-- begin of Rambler's Top100 code -->
<img src="../../../counter.rambler.ru/top100.cnt@236431" alt="" width="1" height="1" border="0" />
<!--end of Top100 code-->
<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0 CLASS="tableborder"><TR BGCOLOR="#6699CC"><TD>
<!-- begin of Top100 logo -->
<a href="../../../top100.rambler.ru/home@id=236431">
<img src="../../../top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" alt="Rambler's Top100"
width="88" height="31" border="0" /></a>
<!-- end of Top100 logo -->
</FONT>
<!--Rating@Mail.ru COUNTER--><a target=_top
href="../../../top.mail.ru/jump@from=58574"><img
src="../../../top.list.ru/counter@id=58574;t=94"
border=0 height=18 width=88
alt="Рейтинг@Mail.ru"></a><!--/COUNTER-->
<!-- Yandex.Metrika counter --><!--ipt type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter9237463 = new Ya.Metrika({id:9237463, trackLinks:true, accurateTrackBounce:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</scri--><noscript><div><img src="../../../https@mc.yandex.ru/watch/9237463" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter -->
</TD>
<TD BGCOLOR=#6699CC ALIGN=right><FONT COLOR=white FACE="Tahoma,Arial" SIZE=1>&nbsp;Administrator:&nbsp;<A STYLE="color :white" HREF="../../../www.sql.ru/feedback.aspx">Обратная связь</A>&nbsp;<BR>Copyright: <FONT COLOR=white>SQL.Ru  2000-2013&nbsp;</FONT></FONT></TD></TR></TABLE>
</TD></TR></TABLE></TD></TR></TABLE>

</BODY></HTML>

