<HTML>
<HEAD>
<TITLE>Понимание SQL. Глава 21. Изменение значений с помощью представлений. [SQL.RU]</TITLE>
<META http-equiv="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Window-target" CONTENT="_top">
<META HTTP-EQUIV="Last-Modified" CONTENT="29-03-2001">
<META NAME="Description" CONTENT="Использование языка SQL, создание клиент-серверных систем. Конференция по MSSQL, Oracle, Interbase, MySQL. Полезные ссылки, документация, рекомендации по разработке информационных систем, сертификация, заказ книг и многое другое.">
<META NAME="Keywords" CONTENT="SQL, конференция, Database Server, Oracle, Interbase, MySQL, документация, статьи, примеры, книги, ссылки, сертификация, работа, СУБД">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../form.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" leftmargin="3" topmargin="3" marginheight="3" marginwidth="3">
<noindex>
<TABLE BGCOLOR="#000000" WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR><TD>

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 BORDER=0>
<TR BGCOLOR="#6699CC"><TD><TABLE CELLSPACING=0 CELLPADDING=0 WIDTH=100% BORDER=0 BGCOLOR="#6699CC">
<TR><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" height=3 width=1 alt=""></TD></TR>
<TR><TD VALIGN=TOP>&nbsp;<FONT FACE="Verdana,Arial" SIZE=5 COLOR=lightyellow>SQL.RU<BR><FONT SIZE=-5>&nbsp;client/server technologies</FONT></FONT></TD>
<TD WIDTH=468 HEIGHT=60 BGCOLOR=#6699CC ALIGN=RIGHT></TD>
<TD WIDTH=2><IMG SRC="../../../images/blank.gif" height=1 width=2 alt=""></TD></TR>                                                      	
<TR HEIGHT=4><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" height=5 width=1 alt=""></TD></TR></TABLE>

</TD></TR>

<TR HEIGHT=15><TD bgcolor=#006699><FONT FACE="Verdana,Arial" SIZE=1 COLOR=WHITE><B><A CLASS="menu" 
HREF="../../../default.htm">&nbsp;<FONT COLOR=white>Главная</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../docs">&nbsp;<FONT COLOR=yellow>Документация</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../articles">&nbsp;<FONT COLOR=white>Статьи</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../books">&nbsp;<FONT COLOR=white>Книги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../forum/actualforum.aspx">&nbsp;<FONT COLOR=white>Форум</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../blogs">&nbsp;<FONT COLOR=white>Блоги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../poll">&nbsp;<FONT COLOR=white>Опросы</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="../../../forum/actualtopics.aspx@bid=11">&nbsp;<FONT COLOR=white>Гостевая</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../subscribe">&nbsp;<FONT COLOR=white>Рассылка</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../job">&nbsp;<FONT COLOR=white>Работа</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../search">&nbsp;<FONT COLOR=white>Поиск</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="../../../faq">&nbsp;<FONT COLOR=white>FAQ</FONT>&nbsp;</A>|</B></FONT></TD></TR>
<TR><TD BGCOLOR=#F5F5F5>
</noindex>

<TABLE BORDER=0 CELLSPACING=10><TR><TD>
<CENTER>
<H2 class="headline">
21. ИЗМЕНЕНИЕ ЗНАЧЕНИЙ С ПОМОЩЬЮ ПРЕДСТАВЛЕНИЙ</H2></CENTER>Эта глава рассказывает о командах модификации 
ЯЗЫКА DML - ВСТАВИТЬ(INSERT), ИЗМЕНИТЬ(UPDATE), и 
УДАЛИТЬ(DELETE) - когда они применяются для представлений. 
Как упомянуто в предыдущей главе, использование команд модификации в 
представлениях - это косвенный способ использования их в ссылочных таб- 
лицах с помощью запросов представлений.  Однако, не все представления 
могут модифицироваться. 
  В этой главе, мы будем обсуждать правила определяющие, является ли 
представление модифицируемым. Кроме того, вы обучитесь использованию 
предложения WITH CHECK OPTION, которое управляет указанными 
значениями, которые можно вводить в таблицу с помощью представления. 
  Как упомянуто в <A href="ch18.shtml">Главе 18</A>, это, в некоторых случаях, может быть желательным вариантом непосредственного ограничения таблицы. 
 <a name="21.1"></a>
<H3>МОДИФИЦИРОВАНИЕ ПРЕДСТАВЛЕНИЯ</H3>Один из наиболее трудных и неоднозначных аспектов представлений - 
непосредственное их использование с командами модификации DML. 
Как упомянуто в предыдущей главе, эти команды фактически воздействуют на значения в базовой таблице представления. 
Это является некоторым противоречием. Представление состоит из результатов запроса, и когда вы модифицируете представление, вы модифицируете набор результатов запроса. Но модификация не должна воз- 
действовать на запрос ; она должна воздействовать на значения в таблице к которой был сделан запрос, и таким образом изменять вывод запроса. Это не простой вопрос. Следующий оператор будет создавать представление показанное на Рисунке 21.1: 
<PRE> 
      CREATE VIEW Citymatch (custcity, salescity) 
          AS SELECT DISTINCT a.city, b.city 
             FROM Customers a, Salespeople b 
             WHERE a.snum = b.snum; 
</PRE> 
Это представление показывает все совпадения заказчиков с их продавца- 
ми так, что имеется по крайней мере один заказчик в городе_заказчика 
обслуживаемый продавцом в городе_продавца. 
  Например, одна строка этой таблицы - London   London - показывает, что 
имеется по крайней мере один заказчик в Лондоне, обслуживаемый продав- 
цом в Лондоне. 
Эта строка может быть произведена при совпадении Hoffmanа с его продавцом Peel, причем если оба они из Лондона. 
<PRE> 
            ===============  SQL Execution Log ============== 
           |                                                 | 
           | SELECT *                                        | 
           | FROM  Citymatch;                                | 
           | =============================================== | 
           |   custcity    salescity                         | 
           |  ---------    ---------                         | 
           |  Berlin       San Jose                          | 
           |  London       London                            | 
           |  Rome         London                            | 
           |  Rome         New York                          | 
           |  San Jose     Barselona                         | 
           |  San Jose     San Jose                          | 
           |                                                 | 
             ================================================ 
</PRE> 
Рисунок 21.1: Представление совпадения по городам 
<BR><BR> 
    Однако,  то же самое значение будет произведено при совпадении 
Clemens из Лондона, с его продавцом, который  также оказался с именем 
 - Peel. Пока отличающиеся комбинации городов выбирались конкретно, 
только одна строка из этих значений была произведена. 
<BR><BR> 
  Даже если вы не получите выбора используя отличи, вы все еще будете 
в том же самом положении, потому что вы будете тогда иметь две строки в 
представлении с идентичными значениями, то есть с обоими столбцами рав- 
ными " Lоndon  London ". Эти две строки представления будут отличаться 
друг от друга, так что вы пока не сможете сообщить, какая строка представ- 
лени исходила из каких значений базовых таблиц( имейте в виду, что запросы не использующие предложение ORDER BY, производят вывод в произвольном порядке. Это относится также и к запросам используемым внутри 
представлений, которые не могут использовать ORDER BY. Таким образом, 
порядок из двух строк не может быть использован для их отличий. 
Это означает, что мы будем снова обращаться к выводу строк которые не мо- 
гут быть точно связаны с указанными строками запрашиваемой таблицы. 
Что если вы пробуете удалить строку " London  London " из представления? 
Означало бы это удаление Hoffmanа из таблицы Заказчиков, удаление Clemens 
из той же таблицы, или удаление их обоих? Должен ли SQL также удалить 
Peel из таблицы Продавцов?  На эти вопросы невозможно ответить точно, по- 
этому удаления не разрешены в представлениях такого типа. 
Представление Citymatch - это пример представления только_чтение, оно мо- 
жет быть только запрошено, но не изменено. 
 <a name="21.2"></a>
<H3>ОПРЕДЕЛЕНИЕ МОДИФИЦИРУЕМОСТИ ПРЕДСТАВЛЕНИЯ</H3>Если команды модификации могут выполняться в представлении, представле- 
ние как сообщалось будет модифицируемым; в противном случае оно предназначено только для чтения при запросе. Непротивореча этой терминологии, 
мы будем использовать выражение "модифицируемое представление"(updating 
a view), что означает возможность выполнения в представление любой из 
трех команд модификации DML ( Вставить, Изменить и Удалить ), которые 
могут изменять значения. 
Как вы определите, является ли представление модифицируемым?  В теории 
базы данных, это - пока обсуждаемая тема. Основной ее принцип такой: 
модифицируемое представление - это представление в котором команда модификации может выполниться, чтобы изменить одну и только одну строку основной таблицы в каждый момент времени,  не воздействуя на любые другие 
строки любой таблицы. Использование этого принципа на практике, однако, 
затруднено. Кроме того, некоторые представления, которые являются модифицируемыми в теории, на самом деле не являются модифицируемыми в SQL. 
Критерии по которые определяют, является ли представление модифицируемым или нет, в SQL, следующие: 
<BR><BR> 
*  Оно должно выводиться в одну и только в одну базовую таблицу. 
<BR><BR> 
*  Оно должно содержать первичный ключ этой таблицы ( это технически 
   не предписывается стандартом ANSI, но было бы неплохо придерживаться этого). 
<BR><BR> 
*  Оно не должно иметь никаких полей, которые бы являлись агрегатными 
   функциями. 
<BR><BR> 
*  Оно не должно содержать DISTINCT в своем определении. 
<BR><BR> 
*  Оно не должно использовать GROUP BY или HAVING в своем определении. 
<BR><BR> 
*  Оно не должно использовать подзапросы ( это - ANSI_ограничение которое 
   не предписано для некоторых реализаций ) 
<BR><BR> 
*  Оно может быть использовано в другом представлении, но это представле- 
   ние должно также быть модифицируемыми. 
<BR><BR> 
*  Оно не должно использовать константы, строки, или выражения значений 
   ( например: comm * 100 ) среди выбранных полей вывода. 
<BR><BR> 
*  Для INSERT, оно должно содержать любые пол основной таблицы 
   которые имеют ограничение NOT NULL, если другое ограничение по 
   умолчанию, не определено. <BR><BR>
   <a name="21.3"></a>
<H3>МОДИФИЦИРУЕМЫЕ ПРЕДСТАВЛЕНИЯ И ПРЕДСТАВЛЕНИЯ ТОЛЬКО_ЧТЕНИЕ.</H3>Одно из этих ограничений то, что модифицируемые представления, фактически, подобны окнам в базовых таблицах. Они показывают кое-что, но не 
обязательно все, из содержимого таблицы. Они могут ограничивать определенные строки ( использованием предикатов), или специально именованные столбцы ( с исключениями ), но они представляют значения непосредственно и не выводит их информацию, с использованием составных функций и выражений. 
  Они также не сравнивают строки таблиц друг с другом ( как в объединениях и подзапросах, или как с DISTINCT ). 
  Различи между модифицируемыми представлениями и представлениями 
только_чтение неслучайны. 
  Цели для которых вы их используете, часто различны. Модифицируемые 
представления, в основном, используются точно так же как и базовые таб- 
лицы. Фактически, пользователи не могут даже осознать, является ли объект который они запрашивают, базовой таблицей или представлением. 
Это превосходный механизм защиты для сокрытия частей таблицы, которые являются конфиденциальными или не относятся к потребностям данного пользователя. ( В Главе 22, мы покажем вам, как позволить пользователям обращаться к представлению, а не к базовой таблице ). 
<BR><BR> 
Представления только_чтение, с другой стороны, позволяют вам получать 
и переформатировать данные более рационально. Они дают вам библиотеку 
сложных запросов, которые вы можете выполнить и повторить снова, сохраняя полученную вами информацию до последней минуты. 
Кроме того, результаты этих запросов в таблицах, которые могут затем использоваться в запросах самостоятельно ( например, в объединениях ) имеют 
преимущество над просто выполнением запросов. 
  Представления только_чтение могут также иметь прикладные программы 
защиты. Например, вы можете захотеть, чтобы некоторые пользователи виде- 
ли агрегатные данные, такие как усредненное значение комиссионных про- 
давца, не вид индивидуальных значений комиссионных. 
<a name="21.4"></a>
<H3>ЧТО ЯВЛЯЕТСЯ - МОДИФИЦИРУЕМЫМИ ПРЕДСТАВЛЕНИЕМ</H3>Имеются некоторые примеры модифицируемых представлений и представлений только_чтение: 
<PRE> 
           CREATE VIEW Dateorders (odate, ocount) 
              AS SELECT odate, COUNT (*) 
                 FROM Orders 
                 GROUP BY odate; 
</PRE> 
Это - представление только_чтение из-за присутствия в нем агрегатной 
функции и GROUP BY. 
<PRE> 
              CREATE VIEW Londoncust 
                 AS SELECT * 
                    FROM Customers 
                    WHERE city = 'London'; 
</PRE> 
А это - представление модифицируемое. 
<PRE> 
             CREATE VIEW SJsales (name, number, percentage) 
                 AS SELECT sname, snum, comm  100 
                    FROM Salespeople 
                    WHERE city = 'SanJose'; 
</PRE> 
Это - представление только_чтение из-за выражения " comm * 100 " . 
При этом, однако, возможны переупорядочение и переименование полей. 
Некоторые программы будут позволять удаление в этом представлении или 
в порядках столбцов snum и sname. 
<PRE> 
             CREATE VIEW Salesonthird 
                AS SELECT * 
                  FROM Salespeople 
                  WHERE snum IN 
                    (SELECT snum 
                       FROM Orders 
                       WHERE odate = 10/03/1990); 
</PRE> 
   Это - представление только_чтение в ANSI из-за присутствия в нем 
подзапроса. В некоторых программах, это может быть приемлемо. 
<PRE> 
            CREATE VIEW Someorders 
               AS SELECT snum, onum, cnum 
                  FROM Orders 
                  WHERE odate IN (10/03/1990,10/05/1990); 
</PRE> 
Это - модифицируемое представление. 
 <a name="21.5"></a>
<H3>ПРОВЕРКА ЗНАЧЕНИЙ ПОМЕЩАЕМЫХ В ПРЕДСТАВЛЕНИЕ</H3>Другой вывод о модифицируемости представления тот, что вы можете 
вводить значения которые " проглатываются " (swallowed) в базовой 
таблице.  Рассмотрим такое представление: 
<PRE> 
          CREATE VIEW Highratings 
             AS SELECT cnum, rating 
                FROM Customers 
                WHERE rating = 300; 
</PRE> 
Это - представление модифицируемое. Оно просто ограничивает ваш дос- 
туп к определенным строкам и столбцам в таблице. Предположим, что вы 
вставляете (INSERT) следующую строку: 
<PRE> 
       INSERT INTO Highratings 
          VALUES (2018, 200); 
</PRE> 
   Это - допустима команда INSERT в этом представлении. Строка будет 
вставлена, с помощью представления Highratings, в таблицу Заказчиков. 
Однако когда она появится там, она исчезнет из представления, поскольку 
значение оценки не равно 300. Это - обычна проблема. 
  Значение 200 может быть просто напечатано, но теперь строка находится 
уже в таблице Заказчиков где вы не можете даже увидеть ее. Пользователь 
не сможет понять, почему введя строку он не может ее увидеть, и будет не- 
способен при этом удалить ее. 
Вы можете быть гарантированы от модификаций такого типа с помощью включения WITH CHECK OPTION (С ОПЦИЕЙ ПРОВЕРКИ) в определение представления. Мы можем использовать WITH CHECK OPTION в 
определении представления Highratmgs. 
<PRE> 
          CREATE VIEW Highratings 
             AS SELECT cnum, rating 
                FROM Customers 
                WHERE rating = 300 
                WITH CHECK OPTION; 
</PRE> 
Вышеупомянутая вставка будет отклонена. 
<BR><BR> 
  WITH CHECK OPTION  -  производит действие  все_или_ничего 
(all-or-nothing).  Вы помещаете его в определение представления, а не в 
команду DML, так что или все команды модификации в представлении 
будут проверяться, или ни одна не будет проверена. Обычно вы хотите 
использовать опцию проверки, используя ее в определении представления, что может быть удобно. 
 В общем, вы должны использовать эту опцию, если у вас нет причины, 
разрешать представлению помещать в таблицу значения, которые он 
сам не может содержать. 
 <a name="21.6"></a>
<H3>ПРЕДИКАТЫ И ИСКЛЮЧЕННЫЕ ПОЛЯ</H3> Похожа проблема, которую вы должны знать, включает в себя вставку 
строк в представление с предикатом, базирующемся на одном или более 
исключенных полей. Например, может показаться разумным, чтобы создать Londonstaff подобно этому: 
<PRE> 
            CREATE VIEW Londonsta1t 
               AS SELECT snum, sname, comm 
                  FROM Salespeople 
                  WHERE city = 'London'; 
</PRE> 
В конце концов, зачем включать значение city, если все значения city 
будут одинаковыми. 
  А как будет выглядит картинка получаемая всякий раз, когда мы про- 
буем вставить строку. Так как мы не можем указать значение city как 
значение по умолчанию, этим значением вероятно будет NULL, и оно 
будет введено в поле city ( NULL  используется если другое значение 
по умолчанию значение не было определено. См. <A href="ch18.shtml">Главу 18</A> для подробностей ). Так как в этом случае поле city не будет равняться значению 
London, вставляемая строка будет исключена из представления. 
<BR><BR> 
Это будет верным для любой строки которую вы попробуете вставить в 
просмотр Londonstaff. Все они должны быть введены с помощью представления Londonstaff в таблицу Продавцов, и затем исключены из самого представления( если определением по умолчанию был не London, то 
это особый случай). Пользователь не сможет вводить строки в это представление, хотя все еще неизвестно, может ли он вводить строки в базовую таблицу. Даже если мы добавим WITH CHECK OPTION в определение представления 
<PRE> 
       CREATE VIEW Londonstate 
          AS SELECT snum, sname, comm 
             FROM Salespeople 
             WHERE city = 'London' 
             WITH CHECK OPTION; 
</PRE> 
проблема не обязательно будет решена. В результате этого мы получим 
представление которое мы могли бы модифицировать или из которого мы 
могли бы удалять, но не вставлять в него. В некоторых случаях, это может 
быть хорошо; хотя возможно нет смысла пользователям имеющим доступ 
к этому представлению иметь возможность добавлять строки. Но вы долж- 
ны точно определить что может произойти прежде, чем вы создадите такое 
представление. 
   Даже если это не всегда может обеспечить Вас полезной информацией, 
полезно включать в ваше представление все пол, на которые имеется ссылка в предикате. Если вы не хотите видеть эти пол в вашем выводе, вы всегда сможете исключить их из запроса в представлении, в противоположность 
запросу внутри представления. Другими словами, вы могли бы определить 
представление Londonstaff подобно этому: 
<PRE> 
           CREATE VIEW Londonstaff 
              AS SELECT * 
                 FROM Salespeople 
                 WHERE city = 'London' 
                 WITH CHECK OPTION; 
</PRE> 
Эта команда заполнит представление одинаковыми значениями в поле city, 
которые вы можете просто исключить из вывода с помощью запроса в котором указаны только те пол которые вы хотите видеть 
<PRE> 
           SELECT snum, sname, comm 
              FROM Londonstaff; 
</PRE><a name="21.7"></a>
<H3>ПРОВЕРКА ПРЕДСТАВЛЕНИЙ КОТОРЫЕ БАЗИРУЮТСЯ НА ДРУГИХ ПРЕДСТАВЛЕНИЯХ</H3>Еще одно надо упомянуть относительно предложения WITH CHECK OPTION 
в ANSI: оно не делает каскадированного изменения : Оно применяется только 
в представлениях в которых оно определено, но не в представлениях основанных на этом представлении.  Например, в предыдущем примере 
<PRE> 
          CREATE VIEW Highratings 
             AS SELECT cnum, rating 
                FROM Customers 
                WHERE rating = 300 
                WITH CHECK OPTION; 
</PRE> 
попытка вставить или модифицировать значение оценки не равное 300 по- 
терпит неудачу. Однако, мы можем создать второе представление ( с идентичным содержанием ) основанное на первом: 
<PRE> 
          CREATE VIEW Myratings 
             AS SELECT * 
             FROM Highratings; 
</PRE> 
Теперь мы можем модифицировать оценки не равные 300: 
<PRE> 
           UPDATE Myratings 
              SET rating = 200 
              WHERE cnum = 2004; 
</PRE> 
Эта команда выполняемая так как если бы она выполнялась как первое 
представление, будет допустима. Предложение WITH CHECK OPTION 
просто гарантирует, что люба модификация в представлении, произведет значения, которые удовлетворяют предикату этого представления. 
Модификация других представлений базирующихся на первом текущем, 
является все еще допустимой, если эти представления не защищены предложениями WITH CHECK OPTION внутри этих представлений. Даже 
если такие предложения установлены, они проверяют только те предикаты 
представлений в которых они содержатся. Так например, даже если представление Myratings создавалось следующим образом 
<PRE> 
             CREATE VIEW Myratings 
                AS SELECT * 
                   FROM Highratings 
                   WITH CHECK OPTION; 
</PRE> 
проблема не будет решена. Предложение WITH CHECK OPTION будет 
исследовать только предикат представления Myratings. Пока у Myratings, 
фактически, не имеется никакого предиката, WITH CHECK OPTION ни- 
чего не будет делать. Если используется предикат, то он будет проверять- 
с всякий раз, когда представление Myratings будет модифицироваться, 
но предикат Highratings все равно будет проигнорирован. 
Это - дефект в стандарте ANSI, который у большинство программ исправлен. Вы можете попробовать использовать представление наподобие последнего примера и посмотреть избавлена ли ваша система от этого дефекта. ( Попытка выяснить это самостоятельно может быть иногда быть проще 
и яснее, чем поиск ответа в документации системы. ) 
 <a name="21.8"></a>
<H3>РЕЗЮМЕ</H3>   Вы теперь овладели знаниями о представлениях полностью. Кроме 
правил определяющих, является ли данное представление модифицируемыми в SQL, вы познакомились с основными понятиями на которых 
эти правила базируются - т.е. что модификации в представлениях допустимы только когда SQL может недвусмысленно определить, какие значения базовой таблицы можно изменять. 
  Это означает что команда модификации, при выполнении, не должна 
требовать ни изменений для многих строк сразу, ни сравнений между 
многочисленными строками либо базовой таблицы либо вывода запроса. 
Так как объединения включают в себя сравнение строк, они также запрещены. Вы также поняли различие между некоторыми способами которые используют модифицируемые представления и представления 
только_чтение. 
Вы научились воспринимать модифицируемые представления как окна, 
отображающие данные одиночной таблицы, но необязательно исключающие или реорганизующие столбцы, посредством выбора только определенных строк отвечающих условию предиката. 
Представления только_чтение, с другой стороны, могут содержать более 
допустимые запросы SQL; они могут следовательно стать способом хранения запросов, которые вам нужно часто выполнять в неизменной форме. Кроме того, наличие запроса чей вывод обрабатывается как объект 
данных, дает вам возможность иметь ясность и удобство при создании 
запросов в выводе запросов. 
Вы теперь можете предохранять команды модификации в представлении от создания строк в базовой таблице, которые не представлены в 
самом представлении с помощью предложения WITH CHECK OPTION 
в определении представления. Вы можете также использовать WITH 
CHECK OPTION как один из способов ограничения в базовой таблице. 
В автономных запросах, вы обычно используете один или более столбцов в предикате не представленных среди выбранных для вывода, что 
не вызывает никаких проблем. Но если эти запросы используются в 
модифицируемых представлениях, появляются проблемы, так как эти 
запросы производят представления, которые не могут иметь вставляемых в них строк. 
Вы видели некоторые подходы к этим проблемам. 
В Главах 20 И 21, мы говорили, что представления имеют прикладные 
программы защиты. Вы можете позволить пользователям обращаться к 
представлениям не разрешая в тоже врем обращаться к таблицам в 
которых эти представления непосредственно находятся. Глава 22 будет 
исследовать вопросы доступа к объектам данных в SQL. 
 
 <a name="21.9"></a>
<H3>РАБОТА С SQL</H3>1. Какое из этих представлений - модифицируемое ? 
<PRE> 
       #1 CREATE VIEW Dailyorders 
             AS SELECT DISTINCT cnum, snum, onum, 
             odate 
               FROM Orders; 
 
       #2 CREATE VIEW Custotals 
             AS SELECT cname, SUM (amt) 
                FROM Orders, Customers 
                WHERE Orders.cnum = customer.cnum 
                GROUP BY cname; 
 
       #3 CREATE VIEW Thirdorders 
             AS SELECT * 
                FROM Dailyorders 
                WHERE odate = 10/03/1990; 
 
       #4 CREATE VIEW Nullcities 
             AS SELECT snum, sname, city 
                FROM Salespeople 
                WHERE city IS NULL 
                   OR sname BETWEEN 'A' AND 'MZ'; 
</PRE> 
 
2. Создайте представление таблицы Продавцов с именем Commissions 
   (Комиссионные). Это представление должно включать только пол 
   comm и snum. С помощью этого представления, можно будет вводить 
   или изменять комиссионные, но только для значений между .10 и .20. 
<BR><BR> 
3. Некоторые SQL реализации имеют встроенную константу представляющую текущую дату, иногда называемую " CURDATE ". 
   Слово CURDATE может следовательно использоваться в операторе SQL, 
   и заменяться текущей датой, когда его значение станет доступным с по- 
   мощью таких команд как SELECT или INSERT. Мы будем использовать 
   представление таблицы Порядков с именем Entryorders для вставки строк 
   в таблицу Порядков. Создайте таблицу порядков, так чтобы CURDATE 
   автоматически вставлялась в поле odate если не указано другого значения. Затем создайте представление Entryorders, так чтобы значения не 
   могли быть указаны. 
<BR><BR> 
( См.<A href="a.shtml#21">Приложение A</A> для ответов. ) 

</TD></TR></TABLE>
</TD></TR>
<TR BGCOLOR=#6699CC><TD><TABLE WIDTH=100% BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD BGCOLOR=#6699CC VALIGN=CENTER HEIGHT = 40><FONT SIZE=-10>
<!-- begin of Rambler's Top100 code -->
<img src="../../../../counter.rambler.ru/top100.cnt@236431" alt="" width="1" height="1" border="0" />
<!--end of Top100 code-->
<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0 CLASS="tableborder"><TR BGCOLOR="#6699CC"><TD>
<!-- begin of Top100 logo -->
<a href="../../../../top100.rambler.ru/home@id=236431">
<img src="../../../../top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" alt="Rambler's Top100"
width="88" height="31" border="0" /></a>
<!-- end of Top100 logo -->
</FONT>
<!--Rating@Mail.ru COUNTER--><a target=_top
href="../../../../top.mail.ru/jump@from=58574"><img
src="../../../../top.list.ru/counter@id=58574;t=94"
border=0 height=18 width=88
alt="Рейтинг@Mail.ru"></a><!--/COUNTER-->
<!-- Yandex.Metrika counter --><!--ipt type="text/javascript">(function (d, w, c) { (w[c] = w[c] || []).push(function() { try { w.yaCounter9237463 = new Ya.Metrika({id:9237463, trackLinks:true, accurateTrackBounce:true}); } catch(e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks");</scri--><noscript><div><img src="../../../../https@mc.yandex.ru/watch/9237463" style="position:absolute; left:-9999px;" alt="" /></div></noscript><!-- /Yandex.Metrika counter -->
</TD>
<TD BGCOLOR=#6699CC ALIGN=right><FONT COLOR=white FACE="Tahoma,Arial" SIZE=1>&nbsp;Administrator:&nbsp;<A STYLE="color :white" HREF="../../../../www.sql.ru/feedback.aspx">Обратная связь</A>&nbsp;<BR>Copyright: <FONT COLOR=white>SQL.Ru  2000-2013&nbsp;</FONT></FONT></TD></TR></TABLE>
</TD></TR></TABLE></TD></TR></TABLE>

</BODY></HTML>

